
MOUSE_DUAL.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b1ec  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000d200  8000d200  0000d600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000780  8000d400  8000d400  0000d800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000008c8  00000008  8000db80  0000e008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000378  000008d0  000008d0  00000000  2**2
                  ALLOC
  8 .heap         0000e3b8  00000c48  00000c48  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  0000e8d0  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000013b0  00000000  00000000  0000e900  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 000028f9  00000000  00000000  0000fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0003e91e  00000000  00000000  000125a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006d81  00000000  00000000  00050ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015f69  00000000  00000000  00057c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000031c8  00000000  00000000  0006dbb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000a310  00000000  00000000  00070d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000d068  00000000  00000000  0007b08c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 01390757  00000000  00000000  000880f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 000016a8  00000000  00000000  01418850  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf a5 18 	sub	pc,pc,-23272

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf c5 1c 	sub	pc,pc,-15076

Disassembly of section .text:

80002008 <dip204_select>:
80002008:	d4 01       	pushm	lr
8000200a:	30 2b       	mov	r11,2
/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
8000200c:	fe 7c 28 00 	mov	r12,-55296
80002010:	f0 1f 00 02 	mcall	80002018 <dip204_select+0x10>
}
80002014:	d8 02       	popm	pc
80002016:	00 00       	add	r0,r0
80002018:	80 00       	ld.sh	r0,r0[0x0]
8000201a:	26 0a       	sub	r10,96

8000201c <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
8000201c:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
80002020:	f8 c8 ff f8 	sub	r8,r12,-8
80002024:	30 69       	mov	r9,6
80002026:	f2 08 18 00 	cp.b	r8,r9
8000202a:	e0 8b 00 0f 	brhi	80002048 <dip204_write_byte+0x2c>
8000202e:	30 19       	mov	r9,1
80002030:	f2 08 09 48 	lsl	r8,r9,r8
80002034:	e2 18 00 55 	andl	r8,0x55,COH
80002038:	c0 80       	breq	80002048 <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
8000203a:	18 9b       	mov	r11,r12
8000203c:	fe 7c 28 00 	mov	r12,-55296
80002040:	f0 1f 00 0c 	mcall	80002070 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
80002044:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002048:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
8000204a:	f8 07 16 18 	lsr	r7,r12,0x18
8000204e:	0e 9b       	mov	r11,r7
80002050:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002054:	fe 7c 28 00 	mov	r12,-55296
80002058:	f0 1f 00 06 	mcall	80002070 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
8000205c:	ee 0b 15 04 	lsl	r11,r7,0x4
80002060:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002064:	fe 7c 28 00 	mov	r12,-55296
80002068:	f0 1f 00 02 	mcall	80002070 <dip204_write_byte+0x54>
8000206c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002070:	80 00       	ld.sh	r0,r0[0x0]
80002072:	27 40       	sub	r0,116

80002074 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002074:	eb cd 40 c0 	pushm	r6-r7,lr
80002078:	20 1d       	sub	sp,4
8000207a:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
8000207c:	fa c7 ff fc 	sub	r7,sp,-4
80002080:	30 08       	mov	r8,0
80002082:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002084:	30 0b       	mov	r11,0
80002086:	fe 7c 28 00 	mov	r12,-55296
8000208a:	f0 1f 00 08 	mcall	800020a8 <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
8000208e:	0e 9b       	mov	r11,r7
80002090:	fe 7c 28 00 	mov	r12,-55296
80002094:	f0 1f 00 06 	mcall	800020ac <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002098:	1b b8       	ld.ub	r8,sp[0x3]
8000209a:	5c 98       	brev	r8
8000209c:	b9 88       	lsr	r8,0x18
8000209e:	ac 88       	st.b	r6[0x0],r8
}
800020a0:	2f fd       	sub	sp,-4
800020a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020a6:	00 00       	add	r0,r0
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	27 40       	sub	r0,116
800020ac:	80 00       	ld.sh	r0,r0[0x0]
800020ae:	27 5c       	sub	r12,117

800020b0 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
800020b0:	eb cd 40 c0 	pushm	r6-r7,lr
800020b4:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
800020b6:	fa c7 ff fc 	sub	r7,sp,-4
800020ba:	30 08       	mov	r8,0
800020bc:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
800020be:	e0 6c 00 fc 	mov	r12,252
800020c2:	f0 1f 00 07 	mcall	800020dc <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
800020c6:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
800020c8:	0e 9c       	mov	r12,r7
800020ca:	f0 1f 00 06 	mcall	800020e0 <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
800020ce:	1b b8       	ld.ub	r8,sp[0x3]
800020d0:	ec 08 18 00 	cp.b	r8,r6
800020d4:	cf a5       	brlt	800020c8 <dip204_wait_busy+0x18>
}
800020d6:	2f fd       	sub	sp,-4
800020d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	20 1c       	sub	r12,1
800020e0:	80 00       	ld.sh	r0,r0[0x0]
800020e2:	20 74       	sub	r4,7

800020e4 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
800020e4:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
800020e6:	30 2b       	mov	r11,2
800020e8:	fe 7c 28 00 	mov	r12,-55296
800020ec:	f0 1f 00 02 	mcall	800020f4 <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
800020f0:	d8 02       	popm	pc
800020f2:	00 00       	add	r0,r0
800020f4:	80 00       	ld.sh	r0,r0[0x0]
800020f6:	26 56       	sub	r6,101

800020f8 <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
800020f8:	d4 21       	pushm	r4-r7,lr
800020fa:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
800020fc:	fa ca ff d4 	sub	r10,sp,-44
80002100:	18 9b       	mov	r11,r12
80002102:	1a 9c       	mov	r12,sp
80002104:	f0 1f 00 1e 	mcall	8000217c <dip204_printf_string+0x84>
80002108:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
8000210a:	31 38       	mov	r8,19
8000210c:	f0 0c 18 00 	cp.b	r12,r8
80002110:	e0 8b 00 0e 	brhi	8000212c <dip204_printf_string+0x34>
80002114:	30 0a       	mov	r10,0
80002116:	31 49       	mov	r9,20
80002118:	fa c8 ff e8 	sub	r8,sp,-24
8000211c:	18 08       	add	r8,r12
8000211e:	f1 6a ff e8 	st.b	r8[-24],r10
80002122:	2f fc       	sub	r12,-1
80002124:	5c 5c       	castu.b	r12
80002126:	f2 0c 18 00 	cp.b	r12,r9
8000212a:	cf 71       	brne	80002118 <dip204_printf_string+0x20>
  va_end(arg);
  dip204_select();
8000212c:	f0 1f 00 15 	mcall	80002180 <dip204_printf_string+0x88>
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002130:	30 08       	mov	r8,0
80002132:	1b 89       	ld.ub	r9,sp[0x0]
80002134:	f0 09 18 00 	cp.b	r9,r8
80002138:	c1 e0       	breq	80002174 <dip204_printf_string+0x7c>
8000213a:	30 06       	mov	r6,0
8000213c:	0c 97       	mov	r7,r6
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
8000213e:	e0 64 00 fa 	mov	r4,250
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002142:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002144:	08 9c       	mov	r12,r4
80002146:	f0 1f 00 10 	mcall	80002184 <dip204_printf_string+0x8c>
    /* Send byte */
    dip204_write_byte(string[i]);
8000214a:	fa c8 ff e8 	sub	r8,sp,-24
8000214e:	f0 06 00 06 	add	r6,r8,r6
80002152:	ed 3c ff e8 	ld.ub	r12,r6[-24]
80002156:	f0 1f 00 0c 	mcall	80002184 <dip204_printf_string+0x8c>
    /* go to next char */
    i++;
8000215a:	2f f7       	sub	r7,-1
8000215c:	5c 57       	castu.b	r7
    dip204_wait_busy();
8000215e:	f0 1f 00 0b 	mcall	80002188 <dip204_printf_string+0x90>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002162:	0e 96       	mov	r6,r7
80002164:	fa c8 ff e8 	sub	r8,sp,-24
80002168:	0e 08       	add	r8,r7
8000216a:	f1 38 ff e8 	ld.ub	r8,r8[-24]
8000216e:	ea 08 18 00 	cp.b	r8,r5
80002172:	ce 91       	brne	80002144 <dip204_printf_string+0x4c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002174:	f0 1f 00 06 	mcall	8000218c <dip204_printf_string+0x94>
}
80002178:	2f ad       	sub	sp,-24
8000217a:	d8 22       	popm	r4-r7,pc
8000217c:	80 00       	ld.sh	r0,r0[0x0]
8000217e:	80 04       	ld.sh	r4,r0[0x0]
80002180:	80 00       	ld.sh	r0,r0[0x0]
80002182:	20 08       	sub	r8,0
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	20 1c       	sub	r12,1
80002188:	80 00       	ld.sh	r0,r0[0x0]
8000218a:	20 b0       	sub	r0,11
8000218c:	80 00       	ld.sh	r0,r0[0x0]
8000218e:	20 e4       	sub	r4,14

80002190 <dip204_write_string>:
  dip204_unselect();
}


void dip204_write_string(const char *string)
{
80002190:	eb cd 40 f8 	pushm	r3-r7,lr
80002194:	18 94       	mov	r4,r12
  unsigned char i=0;

  dip204_select();
80002196:	f0 1f 00 11 	mcall	800021d8 <dip204_write_string+0x48>
  /* for all chars in string */
  while(string[i]!=0)
8000219a:	09 89       	ld.ub	r9,r4[0x0]
8000219c:	30 08       	mov	r8,0
8000219e:	f0 09 18 00 	cp.b	r9,r8
800021a2:	c1 60       	breq	800021ce <dip204_write_string+0x3e>
800021a4:	08 96       	mov	r6,r4
800021a6:	30 07       	mov	r7,0
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
800021a8:	e0 63 00 fa 	mov	r3,250
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
800021ac:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
800021ae:	06 9c       	mov	r12,r3
800021b0:	f0 1f 00 0b 	mcall	800021dc <dip204_write_string+0x4c>
    /* Send byte */
    dip204_write_byte(string[i]);
800021b4:	0d 8c       	ld.ub	r12,r6[0x0]
800021b6:	f0 1f 00 0a 	mcall	800021dc <dip204_write_string+0x4c>
    /* go to next char */
    i++;
800021ba:	2f f7       	sub	r7,-1
800021bc:	5c 57       	castu.b	r7
    dip204_wait_busy();
800021be:	f0 1f 00 09 	mcall	800021e0 <dip204_write_string+0x50>
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
800021c2:	e8 07 00 06 	add	r6,r4,r7
800021c6:	0d 88       	ld.ub	r8,r6[0x0]
800021c8:	ea 08 18 00 	cp.b	r8,r5
800021cc:	cf 11       	brne	800021ae <dip204_write_string+0x1e>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
800021ce:	f0 1f 00 06 	mcall	800021e4 <dip204_write_string+0x54>
}
800021d2:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800021d6:	00 00       	add	r0,r0
800021d8:	80 00       	ld.sh	r0,r0[0x0]
800021da:	20 08       	sub	r8,0
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	20 1c       	sub	r12,1
800021e0:	80 00       	ld.sh	r0,r0[0x0]
800021e2:	20 b0       	sub	r0,11
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	20 e4       	sub	r4,14

800021e8 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
800021e8:	eb cd 40 c0 	pushm	r6-r7,lr
800021ec:	18 96       	mov	r6,r12
800021ee:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
800021f0:	f0 1f 00 11 	mcall	80002234 <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
800021f4:	31 48       	mov	r8,20
800021f6:	f0 06 18 00 	cp.b	r6,r8
800021fa:	5f 89       	srls	r9
800021fc:	30 48       	mov	r8,4
800021fe:	f0 07 18 00 	cp.b	r7,r8
80002202:	5f 88       	srls	r8
80002204:	f3 e8 00 08 	and	r8,r9,r8
80002208:	c0 31       	brne	8000220e <dip204_set_cursor_position+0x26>
8000220a:	30 06       	mov	r6,0
8000220c:	c0 68       	rjmp	80002218 <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
8000220e:	28 16       	sub	r6,-127
80002210:	20 17       	sub	r7,1
80002212:	a5 77       	lsl	r7,0x5
80002214:	0e 06       	add	r6,r7
80002216:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002218:	e0 6c 00 f8 	mov	r12,248
8000221c:	f0 1f 00 07 	mcall	80002238 <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002220:	0c 9c       	mov	r12,r6
80002222:	f0 1f 00 06 	mcall	80002238 <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
80002226:	f0 1f 00 06 	mcall	8000223c <dip204_set_cursor_position+0x54>
  dip204_unselect();
8000222a:	f0 1f 00 06 	mcall	80002240 <dip204_set_cursor_position+0x58>
}
8000222e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002232:	00 00       	add	r0,r0
80002234:	80 00       	ld.sh	r0,r0[0x0]
80002236:	20 08       	sub	r8,0
80002238:	80 00       	ld.sh	r0,r0[0x0]
8000223a:	20 1c       	sub	r12,1
8000223c:	80 00       	ld.sh	r0,r0[0x0]
8000223e:	20 b0       	sub	r0,11
80002240:	80 00       	ld.sh	r0,r0[0x0]
80002242:	20 e4       	sub	r4,14

80002244 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002244:	d4 01       	pushm	lr
  /* select the LCD chip */
  dip204_select();
80002246:	f0 1f 00 08 	mcall	80002264 <dip204_hide_cursor+0x20>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
8000224a:	e0 6c 00 f8 	mov	r12,248
8000224e:	f0 1f 00 07 	mcall	80002268 <dip204_hide_cursor+0x24>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002252:	30 cc       	mov	r12,12
80002254:	f0 1f 00 05 	mcall	80002268 <dip204_hide_cursor+0x24>
  dip204_wait_busy();
80002258:	f0 1f 00 05 	mcall	8000226c <dip204_hide_cursor+0x28>
  /* unselect chip */
  dip204_unselect();
8000225c:	f0 1f 00 05 	mcall	80002270 <dip204_hide_cursor+0x2c>
}
80002260:	d8 02       	popm	pc
80002262:	00 00       	add	r0,r0
80002264:	80 00       	ld.sh	r0,r0[0x0]
80002266:	20 08       	sub	r8,0
80002268:	80 00       	ld.sh	r0,r0[0x0]
8000226a:	20 1c       	sub	r12,1
8000226c:	80 00       	ld.sh	r0,r0[0x0]
8000226e:	20 b0       	sub	r0,11
80002270:	80 00       	ld.sh	r0,r0[0x0]
80002272:	20 e4       	sub	r4,14

80002274 <dip204_clear_display>:
  dip204_unselect();
}


void dip204_clear_display(void)
{
80002274:	d4 01       	pushm	lr
  dip204_select();
80002276:	f0 1f 00 13 	mcall	800022c0 <dip204_clear_display+0x4c>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
8000227a:	e0 6c 00 f8 	mov	r12,248
8000227e:	f0 1f 00 12 	mcall	800022c4 <dip204_clear_display+0x50>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002282:	30 1c       	mov	r12,1
80002284:	f0 1f 00 10 	mcall	800022c4 <dip204_clear_display+0x50>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002288:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000228c:	e0 69 bb 80 	mov	r9,48000
80002290:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002294:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002298:	14 38       	cp.w	r8,r10
8000229a:	e0 88 00 08 	brls	800022aa <dip204_clear_display+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000229e:	12 38       	cp.w	r8,r9
800022a0:	fe 98 ff fa 	brls	80002294 <dip204_clear_display+0x20>
800022a4:	12 3a       	cp.w	r10,r9
800022a6:	c0 73       	brcs	800022b4 <dip204_clear_display+0x40>
800022a8:	cf 6b       	rjmp	80002294 <dip204_clear_display+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022aa:	12 38       	cp.w	r8,r9
800022ac:	e0 8b 00 04 	brhi	800022b4 <dip204_clear_display+0x40>
800022b0:	12 3a       	cp.w	r10,r9
800022b2:	cf 12       	brcc	80002294 <dip204_clear_display+0x20>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
800022b4:	f0 1f 00 05 	mcall	800022c8 <dip204_clear_display+0x54>
  dip204_unselect();
800022b8:	f0 1f 00 05 	mcall	800022cc <dip204_clear_display+0x58>
}
800022bc:	d8 02       	popm	pc
800022be:	00 00       	add	r0,r0
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	20 08       	sub	r8,0
800022c4:	80 00       	ld.sh	r0,r0[0x0]
800022c6:	20 1c       	sub	r12,1
800022c8:	80 00       	ld.sh	r0,r0[0x0]
800022ca:	20 b0       	sub	r0,11
800022cc:	80 00       	ld.sh	r0,r0[0x0]
800022ce:	20 e4       	sub	r4,14

800022d0 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
800022d0:	eb cd 40 80 	pushm	r7,lr
800022d4:	20 4d       	sub	sp,16
800022d6:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
800022d8:	58 1c       	cp.w	r12,1
800022da:	c3 01       	brne	8000233a <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
800022dc:	30 69       	mov	r9,6
800022de:	4f a8       	lddpc	r8,800024c4 <dip204_init+0x1f4>
800022e0:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
800022e2:	30 2b       	mov	r11,2
800022e4:	33 2c       	mov	r12,50
800022e6:	f0 1f 00 79 	mcall	800024c8 <dip204_init+0x1f8>

    // PWM controller configuration
    pwm_opt.diva=0;
800022ea:	30 08       	mov	r8,0
800022ec:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
800022ee:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
800022f0:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
800022f2:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
800022f4:	1a 9c       	mov	r12,sp
800022f6:	f0 1f 00 76 	mcall	800024cc <dip204_init+0x1fc>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
800022fa:	58 07       	cp.w	r7,0
800022fc:	f9 b7 01 31 	movne	r7,49
80002300:	f9 b7 00 01 	moveq	r7,1
80002304:	4f 38       	lddpc	r8,800024d0 <dip204_init+0x200>
80002306:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80002308:	4f 3b       	lddpc	r11,800024d4 <dip204_init+0x204>
8000230a:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
8000230c:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80002310:	ab a8       	sbr	r8,0xa
80002312:	30 89       	mov	r9,8
80002314:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80002318:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
8000231a:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
8000231c:	33 28       	mov	r8,50
8000231e:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80002320:	30 08       	mov	r8,0
80002322:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
80002324:	4e 87       	lddpc	r7,800024c4 <dip204_init+0x1f4>
80002326:	6e 0c       	ld.w	r12,r7[0x0]
80002328:	f0 1f 00 6c 	mcall	800024d8 <dip204_init+0x208>
    // start PWM
    pwm_start_channels(1 << channel_id);
8000232c:	6e 08       	ld.w	r8,r7[0x0]
8000232e:	30 1c       	mov	r12,1
80002330:	f8 08 09 4c 	lsl	r12,r12,r8
80002334:	f0 1f 00 6a 	mcall	800024dc <dip204_init+0x20c>
80002338:	c0 a8       	rjmp	8000234c <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
8000233a:	58 0b       	cp.w	r11,0
8000233c:	c0 50       	breq	80002346 <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
8000233e:	33 2c       	mov	r12,50
80002340:	f0 1f 00 68 	mcall	800024e0 <dip204_init+0x210>
80002344:	c0 48       	rjmp	8000234c <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80002346:	33 2c       	mov	r12,50
80002348:	f0 1f 00 67 	mcall	800024e4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000234c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002350:	e2 79 a9 80 	mov	r9,240000
80002354:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002358:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000235c:	14 38       	cp.w	r8,r10
8000235e:	e0 88 00 08 	brls	8000236e <dip204_init+0x9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002362:	12 38       	cp.w	r8,r9
80002364:	fe 98 ff fa 	brls	80002358 <dip204_init+0x88>
80002368:	12 3a       	cp.w	r10,r9
8000236a:	c6 e3       	brcs	80002446 <dip204_init+0x176>
8000236c:	cf 6b       	rjmp	80002358 <dip204_init+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000236e:	12 38       	cp.w	r8,r9
80002370:	e0 8b 00 6b 	brhi	80002446 <dip204_init+0x176>
80002374:	12 3a       	cp.w	r10,r9
80002376:	c6 83       	brcs	80002446 <dip204_init+0x176>
80002378:	cf 0b       	rjmp	80002358 <dip204_init+0x88>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000237a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000237e:	14 38       	cp.w	r8,r10
80002380:	e0 88 00 08 	brls	80002390 <dip204_init+0xc0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002384:	12 38       	cp.w	r8,r9
80002386:	fe 98 ff fa 	brls	8000237a <dip204_init+0xaa>
8000238a:	12 3a       	cp.w	r10,r9
8000238c:	c6 b3       	brcs	80002462 <dip204_init+0x192>
8000238e:	cf 6b       	rjmp	8000237a <dip204_init+0xaa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002390:	12 38       	cp.w	r8,r9
80002392:	e0 8b 00 68 	brhi	80002462 <dip204_init+0x192>
80002396:	12 3a       	cp.w	r10,r9
80002398:	c6 53       	brcs	80002462 <dip204_init+0x192>
8000239a:	cf 0b       	rjmp	8000237a <dip204_init+0xaa>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000239c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800023a0:	14 38       	cp.w	r8,r10
800023a2:	e0 88 00 08 	brls	800023b2 <dip204_init+0xe2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023a6:	12 38       	cp.w	r8,r9
800023a8:	fe 98 ff fa 	brls	8000239c <dip204_init+0xcc>
800023ac:	12 3a       	cp.w	r10,r9
800023ae:	c6 23       	brcs	80002472 <dip204_init+0x1a2>
800023b0:	cf 6b       	rjmp	8000239c <dip204_init+0xcc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023b2:	12 38       	cp.w	r8,r9
800023b4:	e0 8b 00 5f 	brhi	80002472 <dip204_init+0x1a2>
800023b8:	12 3a       	cp.w	r10,r9
800023ba:	c5 c3       	brcs	80002472 <dip204_init+0x1a2>
800023bc:	cf 0b       	rjmp	8000239c <dip204_init+0xcc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023be:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800023c2:	14 38       	cp.w	r8,r10
800023c4:	e0 88 00 08 	brls	800023d4 <dip204_init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023c8:	12 38       	cp.w	r8,r9
800023ca:	fe 98 ff fa 	brls	800023be <dip204_init+0xee>
800023ce:	12 3a       	cp.w	r10,r9
800023d0:	c5 93       	brcs	80002482 <dip204_init+0x1b2>
800023d2:	cf 6b       	rjmp	800023be <dip204_init+0xee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023d4:	12 38       	cp.w	r8,r9
800023d6:	e0 8b 00 56 	brhi	80002482 <dip204_init+0x1b2>
800023da:	12 3a       	cp.w	r10,r9
800023dc:	c5 33       	brcs	80002482 <dip204_init+0x1b2>
800023de:	cf 0b       	rjmp	800023be <dip204_init+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023e0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800023e4:	14 38       	cp.w	r8,r10
800023e6:	e0 88 00 08 	brls	800023f6 <dip204_init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023ea:	12 38       	cp.w	r8,r9
800023ec:	fe 98 ff fa 	brls	800023e0 <dip204_init+0x110>
800023f0:	12 3a       	cp.w	r10,r9
800023f2:	c5 03       	brcs	80002492 <dip204_init+0x1c2>
800023f4:	cf 6b       	rjmp	800023e0 <dip204_init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023f6:	12 38       	cp.w	r8,r9
800023f8:	e0 8b 00 4d 	brhi	80002492 <dip204_init+0x1c2>
800023fc:	12 3a       	cp.w	r10,r9
800023fe:	c4 a3       	brcs	80002492 <dip204_init+0x1c2>
80002400:	cf 0b       	rjmp	800023e0 <dip204_init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002402:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002406:	14 38       	cp.w	r8,r10
80002408:	e0 88 00 08 	brls	80002418 <dip204_init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000240c:	12 38       	cp.w	r8,r9
8000240e:	fe 98 ff fa 	brls	80002402 <dip204_init+0x132>
80002412:	12 3a       	cp.w	r10,r9
80002414:	c4 93       	brcs	800024a6 <dip204_init+0x1d6>
80002416:	cf 6b       	rjmp	80002402 <dip204_init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002418:	12 38       	cp.w	r8,r9
8000241a:	e0 8b 00 46 	brhi	800024a6 <dip204_init+0x1d6>
8000241e:	12 3a       	cp.w	r10,r9
80002420:	c4 33       	brcs	800024a6 <dip204_init+0x1d6>
80002422:	cf 0b       	rjmp	80002402 <dip204_init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002424:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002428:	14 38       	cp.w	r8,r10
8000242a:	e0 88 00 08 	brls	8000243a <dip204_init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000242e:	12 38       	cp.w	r8,r9
80002430:	fe 98 ff fa 	brls	80002424 <dip204_init+0x154>
80002434:	12 3a       	cp.w	r10,r9
80002436:	c4 03       	brcs	800024b6 <dip204_init+0x1e6>
80002438:	cf 6b       	rjmp	80002424 <dip204_init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000243a:	12 38       	cp.w	r8,r9
8000243c:	e0 8b 00 3d 	brhi	800024b6 <dip204_init+0x1e6>
80002440:	12 3a       	cp.w	r10,r9
80002442:	c3 a3       	brcs	800024b6 <dip204_init+0x1e6>
80002444:	cf 0b       	rjmp	80002424 <dip204_init+0x154>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
80002446:	f0 1f 00 29 	mcall	800024e8 <dip204_init+0x218>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
8000244a:	e0 6c 00 f8 	mov	r12,248
8000244e:	f0 1f 00 28 	mcall	800024ec <dip204_init+0x21c>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80002452:	33 4c       	mov	r12,52
80002454:	f0 1f 00 26 	mcall	800024ec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002458:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000245c:	f0 ca d1 20 	sub	r10,r8,-12000
80002460:	c8 db       	rjmp	8000237a <dip204_init+0xaa>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
80002462:	30 9c       	mov	r12,9
80002464:	f0 1f 00 22 	mcall	800024ec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002468:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000246c:	f0 ca d1 20 	sub	r10,r8,-12000
80002470:	c9 6b       	rjmp	8000239c <dip204_init+0xcc>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80002472:	33 0c       	mov	r12,48
80002474:	f0 1f 00 1e 	mcall	800024ec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002478:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000247c:	f0 ca d1 20 	sub	r10,r8,-12000
80002480:	c9 fb       	rjmp	800023be <dip204_init+0xee>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
80002482:	30 fc       	mov	r12,15
80002484:	f0 1f 00 1a 	mcall	800024ec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002488:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000248c:	f0 ca d1 20 	sub	r10,r8,-12000
80002490:	ca 8b       	rjmp	800023e0 <dip204_init+0x110>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
80002492:	30 1c       	mov	r12,1
80002494:	f0 1f 00 16 	mcall	800024ec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002498:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000249c:	e0 69 ea 60 	mov	r9,60000
800024a0:	f0 09 00 0a 	add	r10,r8,r9
800024a4:	ca fb       	rjmp	80002402 <dip204_init+0x132>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
800024a6:	30 6c       	mov	r12,6
800024a8:	f0 1f 00 11 	mcall	800024ec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800024ac:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800024b0:	f0 ca d1 20 	sub	r10,r8,-12000
800024b4:	cb 8b       	rjmp	80002424 <dip204_init+0x154>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
800024b6:	f0 1f 00 0f 	mcall	800024f0 <dip204_init+0x220>
  // unselect chip
  dip204_unselect();
800024ba:	f0 1f 00 0f 	mcall	800024f4 <dip204_init+0x224>
}
800024be:	2f cd       	sub	sp,-16
800024c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800024c4:	00 00       	add	r0,r0
800024c6:	00 08       	add	r8,r0
800024c8:	80 00       	ld.sh	r0,r0[0x0]
800024ca:	31 10       	mov	r0,17
800024cc:	80 00       	ld.sh	r0,r0[0x0]
800024ce:	25 40       	sub	r0,84
800024d0:	00 00       	add	r0,r0
800024d2:	08 f0       	st.b	--r4,r0
800024d4:	00 00       	add	r0,r0
800024d6:	08 d0       	st.w	--r4,r0
800024d8:	80 00       	ld.sh	r0,r0[0x0]
800024da:	24 f8       	sub	r8,79
800024dc:	80 00       	ld.sh	r0,r0[0x0]
800024de:	25 2e       	sub	lr,82
800024e0:	80 00       	ld.sh	r0,r0[0x0]
800024e2:	32 94       	mov	r4,41
800024e4:	80 00       	ld.sh	r0,r0[0x0]
800024e6:	32 78       	mov	r8,39
800024e8:	80 00       	ld.sh	r0,r0[0x0]
800024ea:	20 08       	sub	r8,0
800024ec:	80 00       	ld.sh	r0,r0[0x0]
800024ee:	20 1c       	sub	r12,1
800024f0:	80 00       	ld.sh	r0,r0[0x0]
800024f2:	20 b0       	sub	r0,11
800024f4:	80 00       	ld.sh	r0,r0[0x0]
800024f6:	20 e4       	sub	r4,14

800024f8 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
800024f8:	58 0b       	cp.w	r11,0
800024fa:	c1 90       	breq	8000252c <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
800024fc:	58 6c       	cp.w	r12,6
800024fe:	e0 8b 00 17 	brhi	8000252c <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80002502:	76 0a       	ld.w	r10,r11[0x0]
80002504:	fe 78 30 00 	mov	r8,-53248
80002508:	f8 c9 ff f0 	sub	r9,r12,-16
8000250c:	a5 79       	lsl	r9,0x5
8000250e:	f0 09 00 09 	add	r9,r8,r9
80002512:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80002514:	76 19       	ld.w	r9,r11[0x4]
80002516:	a5 7c       	lsl	r12,0x5
80002518:	f0 0c 00 0c 	add	r12,r8,r12
8000251c:	f8 c8 fd fc 	sub	r8,r12,-516
80002520:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80002522:	76 28       	ld.w	r8,r11[0x8]
80002524:	f8 cc fd f8 	sub	r12,r12,-520
80002528:	99 08       	st.w	r12[0x0],r8
8000252a:	5e fd       	retal	0

  return PWM_SUCCESS;
8000252c:	5e ff       	retal	1

8000252e <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
8000252e:	18 98       	mov	r8,r12
80002530:	e0 18 ff 80 	andl	r8,0xff80
80002534:	c0 20       	breq	80002538 <pwm_start_channels+0xa>
80002536:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80002538:	fe 78 30 00 	mov	r8,-53248
8000253c:	91 1c       	st.w	r8[0x4],r12
8000253e:	5e fd       	retal	0

80002540 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002540:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
80002544:	58 0c       	cp.w	r12,0
80002546:	c0 21       	brne	8000254a <pwm_init+0xa>
80002548:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000254a:	e6 18 00 01 	andh	r8,0x1,COH
8000254e:	c0 91       	brne	80002560 <pwm_init+0x20>
80002550:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002552:	fe 78 30 00 	mov	r8,-53248
80002556:	37 f9       	mov	r9,127
80002558:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000255a:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
8000255c:	d5 03       	csrf	0x10
8000255e:	c0 68       	rjmp	8000256a <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002560:	fe 78 30 00 	mov	r8,-53248
80002564:	37 f9       	mov	r9,127
80002566:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002568:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000256a:	78 08       	ld.w	r8,r12[0x0]
8000256c:	78 39       	ld.w	r9,r12[0xc]
8000256e:	a9 69       	lsl	r9,0x8
80002570:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80002574:	78 18       	ld.w	r8,r12[0x4]
80002576:	10 49       	or	r9,r8
80002578:	78 28       	ld.w	r8,r12[0x8]
8000257a:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
8000257e:	fe 78 30 00 	mov	r8,-53248
80002582:	91 09       	st.w	r8[0x0],r9
80002584:	5e fd       	retal	0

80002586 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80002586:	f8 c8 00 01 	sub	r8,r12,1
8000258a:	f0 0b 00 0b 	add	r11,r8,r11
8000258e:	f6 0c 0d 0a 	divu	r10,r11,r12
80002592:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80002594:	f4 c8 00 01 	sub	r8,r10,1
80002598:	e0 48 00 fe 	cp.w	r8,254
8000259c:	e0 88 00 03 	brls	800025a2 <getBaudDiv+0x1c>
800025a0:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800025a2:	5c 8c       	casts.h	r12
}
800025a4:	5e fc       	retal	r12

800025a6 <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800025a6:	f7 39 00 0d 	ld.ub	r9,r11[13]
800025aa:	30 18       	mov	r8,1
800025ac:	f0 09 18 00 	cp.b	r9,r8
800025b0:	e0 88 00 04 	brls	800025b8 <spi_initMaster+0x12>
800025b4:	30 2c       	mov	r12,2
800025b6:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800025b8:	e0 68 00 80 	mov	r8,128
800025bc:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800025be:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
800025c0:	30 19       	mov	r9,1
800025c2:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800025c6:	f7 39 00 0d 	ld.ub	r9,r11[13]
800025ca:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
800025ce:	30 09       	mov	r9,0
800025d0:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800025d4:	30 fa       	mov	r10,15
800025d6:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
800025da:	99 18       	st.w	r12[0x4],r8
800025dc:	5e f9       	retal	r9

800025de <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800025de:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800025e0:	30 18       	mov	r8,1
800025e2:	f0 0b 18 00 	cp.b	r11,r8
800025e6:	5f be       	srhi	lr
800025e8:	f0 0a 18 00 	cp.b	r10,r8
800025ec:	5f b8       	srhi	r8
800025ee:	fd e8 10 08 	or	r8,lr,r8
800025f2:	c0 30       	breq	800025f8 <spi_selectionMode+0x1a>
800025f4:	30 2c       	mov	r12,2
800025f6:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
800025f8:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
800025fa:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800025fe:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80002602:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80002606:	99 18       	st.w	r12[0x4],r8
80002608:	d8 0a       	popm	pc,r12=0

8000260a <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000260a:	78 18       	ld.w	r8,r12[0x4]
8000260c:	ea 18 00 0f 	orh	r8,0xf
80002610:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80002612:	78 18       	ld.w	r8,r12[0x4]
80002614:	e2 18 00 04 	andl	r8,0x4,COH
80002618:	c0 f0       	breq	80002636 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000261a:	30 e8       	mov	r8,14
8000261c:	f0 0b 18 00 	cp.b	r11,r8
80002620:	e0 8b 00 19 	brhi	80002652 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80002624:	78 18       	ld.w	r8,r12[0x4]
80002626:	b1 6b       	lsl	r11,0x10
80002628:	ea 1b ff f0 	orh	r11,0xfff0
8000262c:	e8 1b ff ff 	orl	r11,0xffff
80002630:	10 6b       	and	r11,r8
80002632:	99 1b       	st.w	r12[0x4],r11
80002634:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80002636:	30 38       	mov	r8,3
80002638:	f0 0b 18 00 	cp.b	r11,r8
8000263c:	e0 8b 00 0b 	brhi	80002652 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002640:	78 18       	ld.w	r8,r12[0x4]
80002642:	2f 0b       	sub	r11,-16
80002644:	30 19       	mov	r9,1
80002646:	f2 0b 09 4b 	lsl	r11,r9,r11
8000264a:	5c db       	com	r11
8000264c:	10 6b       	and	r11,r8
8000264e:	99 1b       	st.w	r12[0x4],r11
80002650:	5e fd       	retal	0
80002652:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80002654:	5e fc       	retal	r12

80002656 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002656:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000265a:	c0 58       	rjmp	80002664 <spi_unselectChip+0xe>
		if (!timeout--) {
8000265c:	58 08       	cp.w	r8,0
8000265e:	c0 21       	brne	80002662 <spi_unselectChip+0xc>
80002660:	5e ff       	retal	1
80002662:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002664:	78 49       	ld.w	r9,r12[0x10]
80002666:	e2 19 02 00 	andl	r9,0x200,COH
8000266a:	cf 90       	breq	8000265c <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000266c:	78 18       	ld.w	r8,r12[0x4]
8000266e:	ea 18 00 0f 	orh	r8,0xf
80002672:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80002674:	fc 18 01 00 	movh	r8,0x100
80002678:	99 08       	st.w	r12[0x0],r8
8000267a:	5e fd       	retal	0

8000267c <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
8000267c:	eb cd 40 f8 	pushm	r3-r7,lr
80002680:	18 95       	mov	r5,r12
80002682:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002684:	f7 36 00 0c 	ld.ub	r6,r11[12]
80002688:	30 38       	mov	r8,3
8000268a:	f0 06 18 00 	cp.b	r6,r8
8000268e:	e0 8b 00 4d 	brhi	80002728 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80002692:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002696:	30 18       	mov	r8,1
80002698:	f0 04 18 00 	cp.b	r4,r8
8000269c:	e0 8b 00 46 	brhi	80002728 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800026a0:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800026a4:	30 78       	mov	r8,7
800026a6:	f0 03 18 00 	cp.b	r3,r8
800026aa:	e0 88 00 3f 	brls	80002728 <spi_setupChipReg+0xac>
800026ae:	31 08       	mov	r8,16
800026b0:	f0 03 18 00 	cp.b	r3,r8
800026b4:	e0 8b 00 3a 	brhi	80002728 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800026b8:	14 9b       	mov	r11,r10
800026ba:	6e 1c       	ld.w	r12,r7[0x4]
800026bc:	f0 1f 00 1d 	mcall	80002730 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800026c0:	c3 45       	brlt	80002728 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800026c2:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800026c4:	ec 09 16 01 	lsr	r9,r6,0x1
800026c8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800026cc:	ec 16 00 01 	eorl	r6,0x1
800026d0:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800026d4:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800026d8:	20 83       	sub	r3,8
800026da:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800026de:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800026e2:	ef 39 00 09 	ld.ub	r9,r7[9]
800026e6:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800026ea:	ef 39 00 0a 	ld.ub	r9,r7[10]
800026ee:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
800026f2:	0f 89       	ld.ub	r9,r7[0x0]
800026f4:	30 1a       	mov	r10,1
800026f6:	f4 09 18 00 	cp.b	r9,r10
800026fa:	c0 e0       	breq	80002716 <spi_setupChipReg+0x9a>
800026fc:	c0 a3       	brcs	80002710 <spi_setupChipReg+0x94>
800026fe:	30 2a       	mov	r10,2
80002700:	f4 09 18 00 	cp.b	r9,r10
80002704:	c0 c0       	breq	8000271c <spi_setupChipReg+0xa0>
80002706:	30 3a       	mov	r10,3
80002708:	f4 09 18 00 	cp.b	r9,r10
8000270c:	c0 e1       	brne	80002728 <spi_setupChipReg+0xac>
8000270e:	c0 a8       	rjmp	80002722 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80002710:	8b c8       	st.w	r5[0x30],r8
80002712:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80002716:	8b d8       	st.w	r5[0x34],r8
80002718:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
8000271c:	8b e8       	st.w	r5[0x38],r8
8000271e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80002722:	8b f8       	st.w	r5[0x3c],r8
80002724:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80002728:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
8000272a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000272e:	00 00       	add	r0,r0
80002730:	80 00       	ld.sh	r0,r0[0x0]
80002732:	25 86       	sub	r6,88

80002734 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002734:	30 18       	mov	r8,1
80002736:	99 08       	st.w	r12[0x0],r8
}
80002738:	5e fc       	retal	r12

8000273a <spi_disable>:

void spi_disable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIDIS_MASK;
8000273a:	30 28       	mov	r8,2
8000273c:	99 08       	st.w	r12[0x0],r8
}
8000273e:	5e fc       	retal	r12

80002740 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80002740:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002744:	c0 58       	rjmp	8000274e <spi_write+0xe>
		if (!timeout--) {
80002746:	58 08       	cp.w	r8,0
80002748:	c0 21       	brne	8000274c <spi_write+0xc>
8000274a:	5e ff       	retal	1
8000274c:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000274e:	78 49       	ld.w	r9,r12[0x10]
80002750:	e2 19 00 02 	andl	r9,0x2,COH
80002754:	cf 90       	breq	80002746 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002756:	5c 7b       	castu.h	r11
80002758:	99 3b       	st.w	r12[0xc],r11
8000275a:	5e fd       	retal	0

8000275c <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
8000275c:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80002760:	c0 58       	rjmp	8000276a <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80002762:	58 08       	cp.w	r8,0
80002764:	c0 21       	brne	80002768 <spi_read+0xc>
80002766:	5e ff       	retal	1
80002768:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
8000276a:	78 49       	ld.w	r9,r12[0x10]
8000276c:	e2 19 02 01 	andl	r9,0x201,COH
80002770:	e0 49 02 01 	cp.w	r9,513
80002774:	cf 71       	brne	80002762 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80002776:	78 28       	ld.w	r8,r12[0x8]
80002778:	b6 08       	st.h	r11[0x0],r8
8000277a:	5e fd       	retal	0

8000277c <udi_hid_mouse_send_report>:
	return udi_hid_mouse_move(0, 1);
}


static bool udi_hid_mouse_send_report(void)
{
8000277c:	d4 01       	pushm	lr
	if (udi_hid_mouse_report_trans_ongoing)
8000277e:	48 f8       	lddpc	r8,800027b8 <udi_hid_mouse_send_report+0x3c>
80002780:	11 89       	ld.ub	r9,r8[0x0]
80002782:	30 08       	mov	r8,0
80002784:	f0 09 18 00 	cp.b	r9,r8
80002788:	c0 20       	breq	8000278c <udi_hid_mouse_send_report+0x10>
8000278a:	d8 0a       	popm	pc,r12=0
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
8000278c:	48 ca       	lddpc	r10,800027bc <udi_hid_mouse_send_report+0x40>
8000278e:	48 d8       	lddpc	r8,800027c0 <udi_hid_mouse_send_report+0x44>
80002790:	70 09       	ld.w	r9,r8[0x0]
80002792:	95 09       	st.w	r10[0x0],r9
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002794:	30 09       	mov	r9,0
80002796:	2f f8       	sub	r8,-1
80002798:	10 c9       	st.b	r8++,r9
8000279a:	10 c9       	st.b	r8++,r9
8000279c:	b0 89       	st.b	r8[0x0],r9
	udi_hid_mouse_b_report_valid = false;
8000279e:	48 a8       	lddpc	r8,800027c4 <udi_hid_mouse_send_report+0x48>
800027a0:	b0 89       	st.b	r8[0x0],r9

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_MIDI_EP_IN,
800027a2:	48 a8       	lddpc	r8,800027c8 <udi_hid_mouse_send_report+0x4c>
800027a4:	30 49       	mov	r9,4
800027a6:	30 0b       	mov	r11,0
800027a8:	e0 6c 00 82 	mov	r12,130
800027ac:	f0 1f 00 08 	mcall	800027cc <udi_hid_mouse_send_report+0x50>
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
800027b0:	48 28       	lddpc	r8,800027b8 <udi_hid_mouse_send_report+0x3c>
800027b2:	b0 8c       	st.b	r8[0x0],r12
							false,
							udi_hid_mouse_report_trans,
							UDI_HID_MOUSE_REPORT_SIZE,
							udi_hid_mouse_report_sent);
	return udi_hid_mouse_report_trans_ongoing;
}
800027b4:	d8 02       	popm	pc
800027b6:	00 00       	add	r0,r0
800027b8:	00 00       	add	r0,r0
800027ba:	08 f8       	st.b	--r4,r8
800027bc:	00 00       	add	r0,r0
800027be:	09 10       	ld.sh	r0,r4++
800027c0:	00 00       	add	r0,r0
800027c2:	08 f4       	st.b	--r4,r4
800027c4:	00 00       	add	r0,r0
800027c6:	09 14       	ld.sh	r4,r4++
800027c8:	80 00       	ld.sh	r0,r0[0x0]
800027ca:	27 d0       	sub	r0,125
800027cc:	80 00       	ld.sh	r0,r0[0x0]
800027ce:	38 a0       	mov	r0,-118

800027d0 <udi_hid_mouse_report_sent>:


static void udi_hid_mouse_report_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
800027d0:	d4 01       	pushm	lr
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// Valid report sending
	udi_hid_mouse_report_trans_ongoing = false;
800027d2:	30 08       	mov	r8,0
800027d4:	48 59       	lddpc	r9,800027e8 <udi_hid_mouse_report_sent+0x18>
800027d6:	b2 88       	st.b	r9[0x0],r8
	if (udi_hid_mouse_b_report_valid) {
800027d8:	48 59       	lddpc	r9,800027ec <udi_hid_mouse_report_sent+0x1c>
800027da:	13 89       	ld.ub	r9,r9[0x0]
800027dc:	f0 09 18 00 	cp.b	r9,r8
800027e0:	c0 30       	breq	800027e6 <udi_hid_mouse_report_sent+0x16>
		// Send new valid report
		udi_hid_mouse_send_report();
800027e2:	f0 1f 00 04 	mcall	800027f0 <udi_hid_mouse_report_sent+0x20>
800027e6:	d8 02       	popm	pc
800027e8:	00 00       	add	r0,r0
800027ea:	08 f8       	st.b	--r4,r8
800027ec:	00 00       	add	r0,r0
800027ee:	09 14       	ld.sh	r4,r4++
800027f0:	80 00       	ld.sh	r0,r0[0x0]
800027f2:	27 7c       	sub	r12,119

800027f4 <udi_hid_mouse_move>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_mouse_move(int8_t pos, uint8_t index_report)
{
800027f4:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027f8:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
800027fc:	d3 03       	ssrf	0x10

	irqflags_t flags = cpu_irq_save();

	// Add position in HID mouse report
	s16_newpos = (int8_t) udi_hid_mouse_report[index_report];
	s16_newpos += pos;
800027fe:	49 28       	lddpc	r8,80002844 <udi_hid_mouse_move+0x50>
80002800:	f0 0b 06 08 	ld.sb	r8,r8[r11]
80002804:	5c 6c       	casts.b	r12
80002806:	f0 0c 00 0c 	add	r12,r8,r12
8000280a:	5c 8c       	casts.h	r12
	if ((-127 > s16_newpos) || (127 < s16_newpos)) {
8000280c:	f8 c9 ff 81 	sub	r9,r12,-127
80002810:	e0 68 00 fe 	mov	r8,254
80002814:	f0 09 19 00 	cp.h	r9,r8
80002818:	e0 88 00 08 	brls	80002828 <udi_hid_mouse_move+0x34>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000281c:	e6 17 00 01 	andh	r7,0x1,COH
80002820:	c0 21       	brne	80002824 <udi_hid_mouse_move+0x30>
      cpu_irq_enable();
80002822:	d5 03       	csrf	0x10
   }

	barrier();
80002824:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;	// Overflow of report
	}
	udi_hid_mouse_report[index_report] = (uint8_t) s16_newpos;
80002828:	48 78       	lddpc	r8,80002844 <udi_hid_mouse_move+0x50>
8000282a:	f0 0b 0b 0c 	st.b	r8[r11],r12

	// Valid and send report
	udi_hid_mouse_b_report_valid = true;
8000282e:	30 19       	mov	r9,1
80002830:	48 68       	lddpc	r8,80002848 <udi_hid_mouse_move+0x54>
80002832:	b0 89       	st.b	r8[0x0],r9
	udi_hid_mouse_send_report();
80002834:	f0 1f 00 06 	mcall	8000284c <udi_hid_mouse_move+0x58>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002838:	e6 17 00 01 	andh	r7,0x1,COH
8000283c:	c0 21       	brne	80002840 <udi_hid_mouse_move+0x4c>
      cpu_irq_enable();
8000283e:	d5 03       	csrf	0x10
   }

	barrier();
80002840:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80002844:	00 00       	add	r0,r0
80002846:	08 f4       	st.b	--r4,r4
80002848:	00 00       	add	r0,r0
8000284a:	09 14       	ld.sh	r4,r4++
8000284c:	80 00       	ld.sh	r0,r0[0x0]
8000284e:	27 7c       	sub	r12,119

80002850 <udi_hid_mouse_btn>:
	return true;
}


static bool udi_hid_mouse_btn(bool b_state, uint8_t btn)
{
80002850:	d4 01       	pushm	lr
	// Modify buttons report
	if (HID_MOUSE_BTN_DOWN == b_state)
80002852:	58 0c       	cp.w	r12,0
80002854:	c0 60       	breq	80002860 <udi_hid_mouse_btn+0x10>
		udi_hid_mouse_report[0] |= btn;
80002856:	48 88       	lddpc	r8,80002874 <udi_hid_mouse_btn+0x24>
80002858:	11 89       	ld.ub	r9,r8[0x0]
8000285a:	12 4b       	or	r11,r9
8000285c:	b0 8b       	st.b	r8[0x0],r11
8000285e:	c0 68       	rjmp	8000286a <udi_hid_mouse_btn+0x1a>
	else
		udi_hid_mouse_report[0] &= ~(unsigned)btn;
80002860:	48 58       	lddpc	r8,80002874 <udi_hid_mouse_btn+0x24>
80002862:	5c db       	com	r11
80002864:	11 89       	ld.ub	r9,r8[0x0]
80002866:	12 6b       	and	r11,r9
80002868:	b0 8b       	st.b	r8[0x0],r11
	// Use mouse move routine
	return udi_hid_mouse_move(0, 1);
8000286a:	30 1b       	mov	r11,1
8000286c:	30 0c       	mov	r12,0
8000286e:	f0 1f 00 03 	mcall	80002878 <udi_hid_mouse_btn+0x28>
}
80002872:	d8 02       	popm	pc
80002874:	00 00       	add	r0,r0
80002876:	08 f4       	st.b	--r4,r4
80002878:	80 00       	ld.sh	r0,r0[0x0]
8000287a:	27 f4       	sub	r4,127

8000287c <udi_hid_mouse_btnleft>:
{
	return udi_hid_mouse_btn(b_state, 0x02);
}

bool udi_hid_mouse_btnleft(bool b_state)
{
8000287c:	d4 01       	pushm	lr
	return udi_hid_mouse_btn(b_state, 0x01);
8000287e:	30 1b       	mov	r11,1
80002880:	f0 1f 00 02 	mcall	80002888 <udi_hid_mouse_btnleft+0xc>
}
80002884:	d8 02       	popm	pc
80002886:	00 00       	add	r0,r0
80002888:	80 00       	ld.sh	r0,r0[0x0]
8000288a:	28 50       	sub	r0,-123

8000288c <udi_hid_mouse_btnright>:
{
	return udi_hid_mouse_btn(b_state, 0x04);
}

bool udi_hid_mouse_btnright(bool b_state)
{
8000288c:	d4 01       	pushm	lr
	return udi_hid_mouse_btn(b_state, 0x02);
8000288e:	30 2b       	mov	r11,2
80002890:	f0 1f 00 02 	mcall	80002898 <udi_hid_mouse_btnright+0xc>
}
80002894:	d8 02       	popm	pc
80002896:	00 00       	add	r0,r0
80002898:	80 00       	ld.sh	r0,r0[0x0]
8000289a:	28 50       	sub	r0,-123

8000289c <udi_hid_mouse_btnmiddle>:
{
	return udi_hid_mouse_move(pos_x, 1);
}

bool udi_hid_mouse_btnmiddle(bool b_state)
{
8000289c:	d4 01       	pushm	lr
	return udi_hid_mouse_btn(b_state, 0x04);
8000289e:	30 4b       	mov	r11,4
800028a0:	f0 1f 00 02 	mcall	800028a8 <udi_hid_mouse_btnmiddle+0xc>
}
800028a4:	d8 02       	popm	pc
800028a6:	00 00       	add	r0,r0
800028a8:	80 00       	ld.sh	r0,r0[0x0]
800028aa:	28 50       	sub	r0,-123

800028ac <udi_hid_mouse_moveX>:
{
	return udi_hid_mouse_move(pos_y, 2);
}

bool udi_hid_mouse_moveX(int8_t pos_x)
{
800028ac:	d4 01       	pushm	lr
	return udi_hid_mouse_move(pos_x, 1);
800028ae:	30 1b       	mov	r11,1
800028b0:	5c 6c       	casts.b	r12
800028b2:	f0 1f 00 02 	mcall	800028b8 <udi_hid_mouse_moveX+0xc>
}
800028b6:	d8 02       	popm	pc
800028b8:	80 00       	ld.sh	r0,r0[0x0]
800028ba:	27 f4       	sub	r4,127

800028bc <udi_hid_mouse_moveY>:
{
	return udi_hid_mouse_move(pos, 3);
}

bool udi_hid_mouse_moveY(int8_t pos_y)
{
800028bc:	d4 01       	pushm	lr
	return udi_hid_mouse_move(pos_y, 2);
800028be:	30 2b       	mov	r11,2
800028c0:	5c 6c       	casts.b	r12
800028c2:	f0 1f 00 02 	mcall	800028c8 <udi_hid_mouse_moveY+0xc>
}
800028c6:	d8 02       	popm	pc
800028c8:	80 00       	ld.sh	r0,r0[0x0]
800028ca:	27 f4       	sub	r4,127

800028cc <uhi_midi_uninstall>:
	//uhi_midi_start_trans_report();
	UHI_MIDI_CHANGE(dev, true);
}

void uhi_midi_uninstall(uhc_device_t* dev)
{
800028cc:	d4 01       	pushm	lr
	if (uhi_midi_dev.dev != dev) {
800028ce:	48 68       	lddpc	r8,800028e4 <uhi_midi_uninstall+0x18>
800028d0:	70 08       	ld.w	r8,r8[0x0]
800028d2:	18 38       	cp.w	r8,r12
800028d4:	c0 71       	brne	800028e2 <uhi_midi_uninstall+0x16>
		return; // Device not enabled in this interface
	}
	uhi_midi_dev.dev = NULL;
800028d6:	30 0b       	mov	r11,0
800028d8:	48 39       	lddpc	r9,800028e4 <uhi_midi_uninstall+0x18>
800028da:	93 0b       	st.w	r9[0x0],r11
	UHI_MIDI_CHANGE(dev, false);
800028dc:	10 9c       	mov	r12,r8
800028de:	f0 1f 00 03 	mcall	800028e8 <uhi_midi_uninstall+0x1c>
800028e2:	d8 02       	popm	pc
800028e4:	00 00       	add	r0,r0
800028e6:	00 a0       	st.w	r0++,r0
800028e8:	80 00       	ld.sh	r0,r0[0x0]
800028ea:	2a 24       	sub	r4,-94

800028ec <uhi_midi_enable>:
	}
	return UHC_ENUM_UNSUPPORTED; // No interface supported
}

void uhi_midi_enable(uhc_device_t* dev)
{
800028ec:	d4 01       	pushm	lr
	if (uhi_midi_dev.dev != dev) {
800028ee:	48 58       	lddpc	r8,80002900 <uhi_midi_enable+0x14>
800028f0:	70 08       	ld.w	r8,r8[0x0]
800028f2:	18 38       	cp.w	r8,r12
800028f4:	c0 51       	brne	800028fe <uhi_midi_enable+0x12>
		return;  // No interface to enable
	}

	// Init value
	//uhi_midi_start_trans_report();
	UHI_MIDI_CHANGE(dev, true);
800028f6:	30 1b       	mov	r11,1
800028f8:	10 9c       	mov	r12,r8
800028fa:	f0 1f 00 03 	mcall	80002904 <uhi_midi_enable+0x18>
800028fe:	d8 02       	popm	pc
80002900:	00 00       	add	r0,r0
80002902:	00 a0       	st.w	r0++,r0
80002904:	80 00       	ld.sh	r0,r0[0x0]
80002906:	2a 24       	sub	r4,-94

80002908 <uhi_midi_install>:
 * \name Functions required by UHC
 * @{
 */

uhc_enum_status_t uhi_midi_install(uhc_device_t* dev)
{
80002908:	d4 31       	pushm	r0-r7,lr
8000290a:	18 97       	mov	r7,r12
	bool b_iface_supported;
	uint16_t conf_desc_lgt;
	usb_iface_desc_t *ptr_iface;

	if (uhi_midi_dev.dev != NULL) {
8000290c:	4a b8       	lddpc	r8,800029b8 <uhi_midi_install+0xb0>
8000290e:	70 08       	ld.w	r8,r8[0x0]
80002910:	58 08       	cp.w	r8,0
80002912:	c0 30       	breq	80002918 <uhi_midi_install+0x10>
80002914:	30 5c       	mov	r12,5
80002916:	d8 32       	popm	r0-r7,pc
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
80002918:	78 66       	ld.w	r6,r12[0x18]
8000291a:	0d a9       	ld.ub	r9,r6[0x2]
8000291c:	0d b8       	ld.ub	r8,r6[0x3]
8000291e:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80002922:	5c c8       	swap.bh	r8
80002924:	5c 88       	casts.h	r8
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	while(conf_desc_lgt) {
80002926:	c0 21       	brne	8000292a <uhi_midi_install+0x22>
80002928:	da 3a       	popm	r0-r7,pc,r12=1

	if (uhi_midi_dev.dev != NULL) {
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
8000292a:	4a 49       	lddpc	r9,800029b8 <uhi_midi_install+0xb0>
8000292c:	13 c3       	ld.ub	r3,r9[0x4]
8000292e:	13 d4       	ld.ub	r4,r9[0x5]
80002930:	30 0c       	mov	r12,0
	b_iface_supported = false;
	while(conf_desc_lgt) {
		switch (ptr_iface->bDescriptorType) {
80002932:	30 4a       	mov	r10,4

		case USB_DT_INTERFACE:
			if ((ptr_iface->bInterfaceClass == AUDIO_CLASS)
80002934:	30 15       	mov	r5,1
				default:
					break;
			}
			uhi_midi_dev.dev = dev;
			// All endpoints of all interfaces supported allocated
			return UHC_ENUM_SUCCESS;
80002936:	18 9e       	mov	lr,r12
	while(conf_desc_lgt) {
		switch (ptr_iface->bDescriptorType) {

		case USB_DT_INTERFACE:
			if ((ptr_iface->bInterfaceClass == AUDIO_CLASS)
			&& (ptr_iface->bInterfaceProtocol == 0) ) {
80002938:	30 02       	mov	r2,0
8000293a:	18 90       	mov	r0,r12
8000293c:	30 11       	mov	r1,1
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	while(conf_desc_lgt) {
		switch (ptr_iface->bDescriptorType) {
8000293e:	30 5b       	mov	r11,5
80002940:	0d 99       	ld.ub	r9,r6[0x1]
80002942:	f4 09 18 00 	cp.b	r9,r10
80002946:	c0 50       	breq	80002950 <uhi_midi_install+0x48>
80002948:	f6 09 18 00 	cp.b	r9,r11
8000294c:	c2 b1       	brne	800029a2 <uhi_midi_install+0x9a>
8000294e:	c0 d8       	rjmp	80002968 <uhi_midi_install+0x60>

		case USB_DT_INTERFACE:
			if ((ptr_iface->bInterfaceClass == AUDIO_CLASS)
80002950:	0d d9       	ld.ub	r9,r6[0x5]
80002952:	ea 09 18 00 	cp.b	r9,r5
80002956:	c2 51       	brne	800029a0 <uhi_midi_install+0x98>
			&& (ptr_iface->bInterfaceProtocol == 0) ) {
80002958:	0d f9       	ld.ub	r9,r6[0x7]
8000295a:	e4 09 18 00 	cp.b	r9,r2
8000295e:	c2 11       	brne	800029a0 <uhi_midi_install+0x98>
80002960:	1c 94       	mov	r4,lr
80002962:	00 93       	mov	r3,r0
80002964:	02 9c       	mov	r12,r1
	b_iface_supported = false;
	while(conf_desc_lgt) {
		switch (ptr_iface->bDescriptorType) {

		case USB_DT_INTERFACE:
			if ((ptr_iface->bInterfaceClass == AUDIO_CLASS)
80002966:	c1 e8       	rjmp	800029a2 <uhi_midi_install+0x9a>
			}
			break;

		case USB_DT_ENDPOINT:
			//  Allocation of the endpoint
			if (!b_iface_supported) {
80002968:	58 0c       	cp.w	r12,0
8000296a:	c1 c0       	breq	800029a2 <uhi_midi_install+0x9a>
8000296c:	49 38       	lddpc	r8,800029b8 <uhi_midi_install+0xb0>
8000296e:	b0 c3       	st.b	r8[0x4],r3
80002970:	b0 d4       	st.b	r8[0x5],r4
				break;
			}
			if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
80002972:	0c 9b       	mov	r11,r6
80002974:	ef 3c 00 12 	ld.ub	r12,r7[18]
80002978:	f0 1f 00 11 	mcall	800029bc <uhi_midi_install+0xb4>
8000297c:	c0 31       	brne	80002982 <uhi_midi_install+0x7a>
8000297e:	30 4c       	mov	r12,4
80002980:	d8 32       	popm	r0-r7,pc
				return UHC_ENUM_HARDWARE_LIMIT; // Endpoint allocation fail
			}
			switch(((usb_ep_desc_t*)ptr_iface)->bmAttributes & USB_EP_TYPE_MASK)
80002982:	0d b8       	ld.ub	r8,r6[0x3]
80002984:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002988:	58 28       	cp.w	r8,2
8000298a:	c0 81       	brne	8000299a <uhi_midi_install+0x92>
			{
				case USB_EP_TYPE_BULK:
					if(((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN)
8000298c:	0d a8       	ld.ub	r8,r6[0x2]
8000298e:	30 09       	mov	r9,0
80002990:	f2 08 18 00 	cp.b	r8,r9
80002994:	c0 34       	brge	8000299a <uhi_midi_install+0x92>
						uhi_midi_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
80002996:	48 99       	lddpc	r9,800029b8 <uhi_midi_install+0xb0>
80002998:	b2 c8       	st.b	r9[0x4],r8
						uhi_midi_dev.ep_out = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
					break;
				default:
					break;
			}
			uhi_midi_dev.dev = dev;
8000299a:	48 88       	lddpc	r8,800029b8 <uhi_midi_install+0xb0>
8000299c:	91 07       	st.w	r8[0x0],r7
8000299e:	d8 3a       	popm	r0-r7,pc,r12=0
			// All endpoints of all interfaces supported allocated
			return UHC_ENUM_SUCCESS;
800029a0:	1c 9c       	mov	r12,lr
		default:
			// Ignore descriptor
			break;
		}
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
800029a2:	0d 89       	ld.ub	r9,r6[0x0]
800029a4:	12 18       	sub	r8,r9
800029a6:	5c 88       	casts.h	r8
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	while(conf_desc_lgt) {
800029a8:	c0 30       	breq	800029ae <uhi_midi_install+0xa6>
			// Ignore descriptor
			break;
		}
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
800029aa:	12 06       	add	r6,r9
800029ac:	cc ab       	rjmp	80002940 <uhi_midi_install+0x38>
800029ae:	48 38       	lddpc	r8,800029b8 <uhi_midi_install+0xb0>
800029b0:	b0 c3       	st.b	r8[0x4],r3
800029b2:	b0 d4       	st.b	r8[0x5],r4
800029b4:	da 3a       	popm	r0-r7,pc,r12=1
800029b6:	00 00       	add	r0,r0
800029b8:	00 00       	add	r0,r0
800029ba:	00 a0       	st.w	r0++,r0
800029bc:	80 00       	ld.sh	r0,r0[0x0]
800029be:	4e ac       	lddpc	r12,80002b64 <ui_device_sof_action+0x24>

800029c0 <ui_host_vbus_change>:
static bool ui_midi_plug = false;

void ui_host_vbus_change(bool b_vbus_present)
{
	UNUSED(b_vbus_present);
}
800029c0:	5e fc       	retal	r12

800029c2 <ui_host_vbus_error>:

void ui_host_vbus_error(void)
{
}
800029c2:	5e fc       	retal	r12

800029c4 <ui_host_enum_event>:
	}
}

void ui_host_enum_event(uhc_device_t * dev, uhc_enum_status_t status)
{
	ui_enum_status = status;
800029c4:	49 08       	lddpc	r8,80002a04 <ui_host_enum_event+0x40>
800029c6:	91 0b       	st.w	r8[0x0],r11
	if (ui_enum_status == UHC_ENUM_SUCCESS) {
800029c8:	58 0b       	cp.w	r11,0
800029ca:	5e 1c       	retne	r12
		ui_x = 0, ui_y = 0, ui_scroll = 0;
800029cc:	30 08       	mov	r8,0
800029ce:	48 f9       	lddpc	r9,80002a08 <ui_host_enum_event+0x44>
800029d0:	b2 88       	st.b	r9[0x0],r8
800029d2:	48 f9       	lddpc	r9,80002a0c <ui_host_enum_event+0x48>
800029d4:	b2 88       	st.b	r9[0x0],r8
800029d6:	48 f9       	lddpc	r9,80002a10 <ui_host_enum_event+0x4c>
800029d8:	b2 88       	st.b	r9[0x0],r8
		switch (dev->speed) {
800029da:	78 58       	ld.w	r8,r12[0x14]
800029dc:	58 18       	cp.w	r8,1
800029de:	c0 80       	breq	800029ee <ui_host_enum_event+0x2a>
800029e0:	58 28       	cp.w	r8,2
800029e2:	c0 b1       	brne	800029f8 <ui_host_enum_event+0x34>
		case UHD_SPEED_HIGH:
			ui_device_speed_blink = 250;
800029e4:	e0 69 00 fa 	mov	r9,250
800029e8:	48 b8       	lddpc	r8,80002a14 <ui_host_enum_event+0x50>
800029ea:	b0 09       	st.h	r8[0x0],r9
			break;
800029ec:	5e fc       	retal	r12
		case UHD_SPEED_FULL:
			ui_device_speed_blink = 500;
800029ee:	e0 69 01 f4 	mov	r9,500
800029f2:	48 98       	lddpc	r8,80002a14 <ui_host_enum_event+0x50>
800029f4:	b0 09       	st.h	r8[0x0],r9
			break;
800029f6:	5e fc       	retal	r12
		case UHD_SPEED_LOW:
		default:
			ui_device_speed_blink = 1000;
800029f8:	e0 69 03 e8 	mov	r9,1000
800029fc:	48 68       	lddpc	r8,80002a14 <ui_host_enum_event+0x50>
800029fe:	b0 09       	st.h	r8[0x0],r9
80002a00:	5e fc       	retal	r12
80002a02:	00 00       	add	r0,r0
80002a04:	00 00       	add	r0,r0
80002a06:	00 a8       	st.w	r0++,r8
80002a08:	00 00       	add	r0,r0
80002a0a:	09 15       	ld.sh	r5,r4++
80002a0c:	00 00       	add	r0,r0
80002a0e:	09 16       	ld.sh	r6,r4++
80002a10:	00 00       	add	r0,r0
80002a12:	09 24       	ld.uh	r4,r4++
80002a14:	00 00       	add	r0,r0
80002a16:	09 18       	ld.sh	r8,r4++

80002a18 <ui_uhi_hid_mouse_change>:
	}
}

void ui_uhi_hid_mouse_change(uhc_device_t * dev, bool b_plug)
{
	ui_hid_mouse_plug = b_plug;
80002a18:	48 28       	lddpc	r8,80002a20 <ui_uhi_hid_mouse_change+0x8>
80002a1a:	b0 8b       	st.b	r8[0x0],r11
}
80002a1c:	5e fc       	retal	r12
80002a1e:	00 00       	add	r0,r0
80002a20:	00 00       	add	r0,r0
80002a22:	09 1c       	ld.sh	r12,r4++

80002a24 <ui_uhi_midi_change>:

void ui_uhi_midi_change(uhc_device_t * dev, bool b_plug)
{
	ui_midi_plug = b_plug;
80002a24:	48 28       	lddpc	r8,80002a2c <ui_uhi_midi_change+0x8>
80002a26:	b0 8b       	st.b	r8[0x0],r11
}
80002a28:	5e fc       	retal	r12
80002a2a:	00 00       	add	r0,r0
80002a2c:	00 00       	add	r0,r0
80002a2e:	09 17       	ld.sh	r7,r4++

80002a30 <ui_device_resume_action>:
{
	ui_init();
}

void ui_device_resume_action(void)
{
80002a30:	d4 01       	pushm	lr
	LED_On(LED1);
80002a32:	30 2c       	mov	r12,2
80002a34:	f0 1f 00 02 	mcall	80002a3c <ui_device_resume_action+0xc>
}
80002a38:	d8 02       	popm	pc
80002a3a:	00 00       	add	r0,r0
80002a3c:	80 00       	ld.sh	r0,r0[0x0]
80002a3e:	2f 3c       	sub	r12,-13

80002a40 <ui_host_hid_mouse_btn_right>:
		LED_Off(LED_BI0_GREEN);
	}
}

void ui_host_hid_mouse_btn_right(bool b_state)
{
80002a40:	d4 01       	pushm	lr
	if (b_state) {
80002a42:	58 0c       	cp.w	r12,0
80002a44:	c0 50       	breq	80002a4e <ui_host_hid_mouse_btn_right+0xe>
		LED_On(LED_BI0_RED);
80002a46:	31 0c       	mov	r12,16
80002a48:	f0 1f 00 04 	mcall	80002a58 <ui_host_hid_mouse_btn_right+0x18>
80002a4c:	d8 02       	popm	pc
		} else {
		LED_Off(LED_BI0_RED);
80002a4e:	31 0c       	mov	r12,16
80002a50:	f0 1f 00 03 	mcall	80002a5c <ui_host_hid_mouse_btn_right+0x1c>
80002a54:	d8 02       	popm	pc
80002a56:	00 00       	add	r0,r0
80002a58:	80 00       	ld.sh	r0,r0[0x0]
80002a5a:	2f 3c       	sub	r12,-13
80002a5c:	80 00       	ld.sh	r0,r0[0x0]
80002a5e:	2f 8c       	sub	r12,-8

80002a60 <ui_host_hid_mouse_btn_left>:
		}*/
	}
}

void ui_host_hid_mouse_btn_left(bool b_state)
{
80002a60:	d4 01       	pushm	lr
	if (b_state) {
80002a62:	58 0c       	cp.w	r12,0
80002a64:	c0 50       	breq	80002a6e <ui_host_hid_mouse_btn_left+0xe>
		LED_On(LED_BI0_GREEN);
80002a66:	32 0c       	mov	r12,32
80002a68:	f0 1f 00 04 	mcall	80002a78 <ui_host_hid_mouse_btn_left+0x18>
80002a6c:	d8 02       	popm	pc
		} else {
		LED_Off(LED_BI0_GREEN);
80002a6e:	32 0c       	mov	r12,32
80002a70:	f0 1f 00 03 	mcall	80002a7c <ui_host_hid_mouse_btn_left+0x1c>
80002a74:	d8 02       	popm	pc
80002a76:	00 00       	add	r0,r0
80002a78:	80 00       	ld.sh	r0,r0[0x0]
80002a7a:	2f 3c       	sub	r12,-13
80002a7c:	80 00       	ld.sh	r0,r0[0x0]
80002a7e:	2f 8c       	sub	r12,-8

80002a80 <ui_host_connection_event>:
void ui_host_vbus_error(void)
{
}

void ui_host_connection_event(uhc_device_t *dev, bool b_present)
{
80002a80:	eb cd 40 80 	pushm	r7,lr
80002a84:	16 97       	mov	r7,r11
	LED_Off(LED1);
80002a86:	30 2c       	mov	r12,2
80002a88:	f0 1f 00 11 	mcall	80002acc <ui_host_connection_event+0x4c>
	LED_Off(LED2);
80002a8c:	30 4c       	mov	r12,4
80002a8e:	f0 1f 00 10 	mcall	80002acc <ui_host_connection_event+0x4c>
	LED_Off(LED3);
80002a92:	30 8c       	mov	r12,8
80002a94:	f0 1f 00 0e 	mcall	80002acc <ui_host_connection_event+0x4c>
	LED_Off(LED_BI0_GREEN);
80002a98:	32 0c       	mov	r12,32
80002a9a:	f0 1f 00 0d 	mcall	80002acc <ui_host_connection_event+0x4c>
	LED_Off(LED_BI0_RED);
80002a9e:	31 0c       	mov	r12,16
80002aa0:	f0 1f 00 0b 	mcall	80002acc <ui_host_connection_event+0x4c>
	LED_Off(LED_BI1_GREEN);
80002aa4:	e0 6c 00 80 	mov	r12,128
80002aa8:	f0 1f 00 09 	mcall	80002acc <ui_host_connection_event+0x4c>
	LED_Off(LED_BI1_RED);
80002aac:	34 0c       	mov	r12,64
80002aae:	f0 1f 00 08 	mcall	80002acc <ui_host_connection_event+0x4c>
	if (b_present) {
80002ab2:	58 07       	cp.w	r7,0
80002ab4:	c0 60       	breq	80002ac0 <ui_host_connection_event+0x40>
		LED_On(LED1);
80002ab6:	30 2c       	mov	r12,2
80002ab8:	f0 1f 00 06 	mcall	80002ad0 <ui_host_connection_event+0x50>
80002abc:	e3 cd 80 80 	ldm	sp++,r7,pc
	} else {
		ui_enum_status = UHC_ENUM_DISCONNECT;
80002ac0:	30 79       	mov	r9,7
80002ac2:	48 58       	lddpc	r8,80002ad4 <ui_host_connection_event+0x54>
80002ac4:	91 09       	st.w	r8[0x0],r9
80002ac6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002aca:	00 00       	add	r0,r0
80002acc:	80 00       	ld.sh	r0,r0[0x0]
80002ace:	2f 8c       	sub	r12,-8
80002ad0:	80 00       	ld.sh	r0,r0[0x0]
80002ad2:	2f 3c       	sub	r12,-13
80002ad4:	00 00       	add	r0,r0
80002ad6:	00 a8       	st.w	r0++,r8

80002ad8 <ui_init>:
/**
 * \name Main user interface functions
 * @{
 */
void ui_init(void)
{
80002ad8:	d4 01       	pushm	lr
	LED_Off(LED0);
80002ada:	30 1c       	mov	r12,1
80002adc:	f0 1f 00 0d 	mcall	80002b10 <ui_init+0x38>
	LED_Off(LED1);
80002ae0:	30 2c       	mov	r12,2
80002ae2:	f0 1f 00 0c 	mcall	80002b10 <ui_init+0x38>
	LED_Off(LED2);
80002ae6:	30 4c       	mov	r12,4
80002ae8:	f0 1f 00 0a 	mcall	80002b10 <ui_init+0x38>
	LED_Off(LED3);
80002aec:	30 8c       	mov	r12,8
80002aee:	f0 1f 00 09 	mcall	80002b10 <ui_init+0x38>
	LED_Off(LED_BI0_GREEN);
80002af2:	32 0c       	mov	r12,32
80002af4:	f0 1f 00 07 	mcall	80002b10 <ui_init+0x38>
	LED_Off(LED_BI0_RED);
80002af8:	31 0c       	mov	r12,16
80002afa:	f0 1f 00 06 	mcall	80002b10 <ui_init+0x38>
	LED_Off(LED_BI1_GREEN);
80002afe:	e0 6c 00 80 	mov	r12,128
80002b02:	f0 1f 00 04 	mcall	80002b10 <ui_init+0x38>
	LED_Off(LED_BI1_RED);
80002b06:	34 0c       	mov	r12,64
80002b08:	f0 1f 00 02 	mcall	80002b10 <ui_init+0x38>
}
80002b0c:	d8 02       	popm	pc
80002b0e:	00 00       	add	r0,r0
80002b10:	80 00       	ld.sh	r0,r0[0x0]
80002b12:	2f 8c       	sub	r12,-8

80002b14 <ui_device_suspend_action>:
void ui_stop_write(void)
{
}
*/
void ui_device_suspend_action(void)
{
80002b14:	d4 01       	pushm	lr
	ui_init();
80002b16:	f0 1f 00 02 	mcall	80002b1c <ui_device_suspend_action+0x8>
}
80002b1a:	d8 02       	popm	pc
80002b1c:	80 00       	ld.sh	r0,r0[0x0]
80002b1e:	2a d8       	sub	r8,-83

80002b20 <ui_usb_mode_change>:
	LED_Off(LED_BI1_GREEN);
	LED_Off(LED_BI1_RED);
}

void ui_usb_mode_change(bool b_host_mode)
{
80002b20:	eb cd 40 80 	pushm	r7,lr
80002b24:	18 97       	mov	r7,r12
	ui_init();
80002b26:	f0 1f 00 05 	mcall	80002b38 <ui_usb_mode_change+0x18>
	if (b_host_mode) {
80002b2a:	58 07       	cp.w	r7,0
80002b2c:	c0 40       	breq	80002b34 <ui_usb_mode_change+0x14>
		LED_On(LED0);
80002b2e:	30 1c       	mov	r12,1
80002b30:	f0 1f 00 03 	mcall	80002b3c <ui_usb_mode_change+0x1c>
80002b34:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b38:	80 00       	ld.sh	r0,r0[0x0]
80002b3a:	2a d8       	sub	r8,-83
80002b3c:	80 00       	ld.sh	r0,r0[0x0]
80002b3e:	2f 3c       	sub	r12,-13

80002b40 <ui_device_sof_action>:
{
	ui_device_b_mouse_enable = false;
}

void ui_device_sof_action(void)
{
80002b40:	eb cd 40 80 	pushm	r7,lr
	static bool btn_left_last_state = HID_MOUSE_BTN_UP;
	static bool btn_right_last_state = HID_MOUSE_BTN_UP;
	static bool btn_middle_last_state = HID_MOUSE_BTN_UP;
	static uint8_t cpt_sof = 0;

	if (!ui_device_b_mouse_enable)
80002b44:	4c 08       	lddpc	r8,80002c44 <ui_device_sof_action+0x104>
80002b46:	11 89       	ld.ub	r9,r8[0x0]
80002b48:	30 08       	mov	r8,0
80002b4a:	f0 09 18 00 	cp.b	r9,r8
80002b4e:	c7 90       	breq	80002c40 <ui_device_sof_action+0x100>
	return;

	framenumber = udd_get_frame_number();
80002b50:	f0 1f 00 3e 	mcall	80002c48 <ui_device_sof_action+0x108>
	if ((framenumber % 1000) == 0) {
80002b54:	5c 7c       	castu.h	r12
80002b56:	e0 69 4d d3 	mov	r9,19923
80002b5a:	ea 19 10 62 	orh	r9,0x1062
80002b5e:	f8 09 06 48 	mulu.d	r8,r12,r9
80002b62:	f2 08 16 06 	lsr	r8,r9,0x6
80002b66:	e0 69 03 e8 	mov	r9,1000
80002b6a:	b3 38       	mul	r8,r9
80002b6c:	10 1c       	sub	r12,r8
80002b6e:	5c 8c       	casts.h	r12
80002b70:	c0 51       	brne	80002b7a <ui_device_sof_action+0x3a>
		LED_On(LED2);
80002b72:	30 4c       	mov	r12,4
80002b74:	f0 1f 00 36 	mcall	80002c4c <ui_device_sof_action+0x10c>
80002b78:	c0 98       	rjmp	80002b8a <ui_device_sof_action+0x4a>
	}
	if ((framenumber % 1000) == 500) {
80002b7a:	e0 68 01 f4 	mov	r8,500
80002b7e:	f0 0c 19 00 	cp.h	r12,r8
80002b82:	c0 41       	brne	80002b8a <ui_device_sof_action+0x4a>
		LED_Off(LED2);
80002b84:	30 4c       	mov	r12,4
80002b86:	f0 1f 00 33 	mcall	80002c50 <ui_device_sof_action+0x110>
	}
	// Scan process running each 2ms
	cpt_sof++;
80002b8a:	4b 39       	lddpc	r9,80002c54 <ui_device_sof_action+0x114>
80002b8c:	13 88       	ld.ub	r8,r9[0x0]
80002b8e:	2f f8       	sub	r8,-1
80002b90:	b2 88       	st.b	r9[0x0],r8
	if (2 > cpt_sof)
80002b92:	30 19       	mov	r9,1
80002b94:	f2 08 18 00 	cp.b	r8,r9
80002b98:	e0 88 00 54 	brls	80002c40 <ui_device_sof_action+0x100>
	return;
	cpt_sof = 0;
80002b9c:	30 09       	mov	r9,0
80002b9e:	4a e8       	lddpc	r8,80002c54 <ui_device_sof_action+0x114>
80002ba0:	b0 89       	st.b	r8[0x0],r9

	// Scan buttons on switch 0 (left), 1 (middle), 2 (right)
	b_btn_state = (!gpio_get_pin_value(GPIO_PUSH_BUTTON_0)) ?
80002ba2:	35 8c       	mov	r12,88
80002ba4:	f0 1f 00 2d 	mcall	80002c58 <ui_device_sof_action+0x118>
80002ba8:	ec 1c 00 01 	eorl	r12,0x1
80002bac:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_left_last_state) {
80002bb0:	4a b8       	lddpc	r8,80002c5c <ui_device_sof_action+0x11c>
80002bb2:	11 88       	ld.ub	r8,r8[0x0]
80002bb4:	ee 08 18 00 	cp.b	r8,r7
80002bb8:	c0 60       	breq	80002bc4 <ui_device_sof_action+0x84>
		udi_hid_mouse_btnleft(b_btn_state);
80002bba:	0e 9c       	mov	r12,r7
80002bbc:	f0 1f 00 29 	mcall	80002c60 <ui_device_sof_action+0x120>
		btn_left_last_state = b_btn_state;
80002bc0:	4a 78       	lddpc	r8,80002c5c <ui_device_sof_action+0x11c>
80002bc2:	b0 87       	st.b	r8[0x0],r7
	}
	b_btn_state = (!gpio_get_pin_value(GPIO_PUSH_BUTTON_1)) ?
80002bc4:	35 5c       	mov	r12,85
80002bc6:	f0 1f 00 25 	mcall	80002c58 <ui_device_sof_action+0x118>
80002bca:	ec 1c 00 01 	eorl	r12,0x1
80002bce:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_middle_last_state) {
80002bd2:	4a 58       	lddpc	r8,80002c64 <ui_device_sof_action+0x124>
80002bd4:	11 88       	ld.ub	r8,r8[0x0]
80002bd6:	ee 08 18 00 	cp.b	r8,r7
80002bda:	c0 60       	breq	80002be6 <ui_device_sof_action+0xa6>
		udi_hid_mouse_btnmiddle(b_btn_state);
80002bdc:	0e 9c       	mov	r12,r7
80002bde:	f0 1f 00 23 	mcall	80002c68 <ui_device_sof_action+0x128>
		btn_middle_last_state = b_btn_state;
80002be2:	4a 18       	lddpc	r8,80002c64 <ui_device_sof_action+0x124>
80002be4:	b0 87       	st.b	r8[0x0],r7
	}
	b_btn_state = (!gpio_get_pin_value(GPIO_PUSH_BUTTON_2)) ?
80002be6:	35 2c       	mov	r12,82
80002be8:	f0 1f 00 1c 	mcall	80002c58 <ui_device_sof_action+0x118>
80002bec:	ec 1c 00 01 	eorl	r12,0x1
80002bf0:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_right_last_state) {
80002bf4:	49 e8       	lddpc	r8,80002c6c <ui_device_sof_action+0x12c>
80002bf6:	11 88       	ld.ub	r8,r8[0x0]
80002bf8:	ee 08 18 00 	cp.b	r8,r7
80002bfc:	c0 60       	breq	80002c08 <ui_device_sof_action+0xc8>
		udi_hid_mouse_btnright(b_btn_state);
80002bfe:	0e 9c       	mov	r12,r7
80002c00:	f0 1f 00 1c 	mcall	80002c70 <ui_device_sof_action+0x130>
		btn_right_last_state = b_btn_state;
80002c04:	49 a8       	lddpc	r8,80002c6c <ui_device_sof_action+0x12c>
80002c06:	b0 87       	st.b	r8[0x0],r7
 *
 * \return \c true if the joystick is on the right, otherwise \c 0.
 */
__always_inline static int is_joystick_right( void )
{
  return (gpio_get_pin_value(GPIO_JOYSTICK_RIGHT)) == GPIO_JOYSTICK_RIGHT_PRESSED;
80002c08:	31 cc       	mov	r12,28
80002c0a:	f0 1f 00 14 	mcall	80002c58 <ui_device_sof_action+0x118>
	}
	// Joystick used to move mouse
	if (is_joystick_right())
80002c0e:	c0 41       	brne	80002c16 <ui_device_sof_action+0xd6>
	udi_hid_mouse_moveX(MOUSE_MOVE_RANGE);
80002c10:	30 3c       	mov	r12,3
80002c12:	f0 1f 00 19 	mcall	80002c74 <ui_device_sof_action+0x134>
 *
 * \return \c true if the joystick is on the left, otherwise \c 0.
 */
__always_inline static int is_joystick_left( void )
{
  return (gpio_get_pin_value(GPIO_JOYSTICK_LEFT)) == GPIO_JOYSTICK_LEFT_PRESSED;
80002c16:	31 9c       	mov	r12,25
80002c18:	f0 1f 00 10 	mcall	80002c58 <ui_device_sof_action+0x118>
	if (is_joystick_left())
80002c1c:	c0 41       	brne	80002c24 <ui_device_sof_action+0xe4>
	udi_hid_mouse_moveX(-MOUSE_MOVE_RANGE);
80002c1e:	3f dc       	mov	r12,-3
80002c20:	f0 1f 00 15 	mcall	80002c74 <ui_device_sof_action+0x134>
 *
 * \return \c true if the joystick is up, otherwise \c 0.
 */
__always_inline static int is_joystick_up( void )
{
  return (gpio_get_pin_value(GPIO_JOYSTICK_UP)) == GPIO_JOYSTICK_UP_PRESSED;
80002c24:	31 ac       	mov	r12,26
80002c26:	f0 1f 00 0d 	mcall	80002c58 <ui_device_sof_action+0x118>
	if (is_joystick_up())
80002c2a:	c0 41       	brne	80002c32 <ui_device_sof_action+0xf2>
	udi_hid_mouse_moveY(-MOUSE_MOVE_RANGE);
80002c2c:	3f dc       	mov	r12,-3
80002c2e:	f0 1f 00 13 	mcall	80002c78 <ui_device_sof_action+0x138>
 *
 * \return \c true if the joystick is down, otherwise \c 0.
 */
__always_inline static int is_joystick_down( void )
{
  return (gpio_get_pin_value(GPIO_JOYSTICK_DOWN)) == GPIO_JOYSTICK_DOWN_PRESSED;
80002c32:	31 bc       	mov	r12,27
80002c34:	f0 1f 00 09 	mcall	80002c58 <ui_device_sof_action+0x118>
	if (is_joystick_down())
80002c38:	c0 41       	brne	80002c40 <ui_device_sof_action+0x100>
	udi_hid_mouse_moveY(MOUSE_MOVE_RANGE);
80002c3a:	30 3c       	mov	r12,3
80002c3c:	f0 1f 00 0f 	mcall	80002c78 <ui_device_sof_action+0x138>
80002c40:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c44:	00 00       	add	r0,r0
80002c46:	09 23       	ld.uh	r3,r4++
80002c48:	80 00       	ld.sh	r0,r0[0x0]
80002c4a:	34 5e       	mov	lr,69
80002c4c:	80 00       	ld.sh	r0,r0[0x0]
80002c4e:	2f 3c       	sub	r12,-13
80002c50:	80 00       	ld.sh	r0,r0[0x0]
80002c52:	2f 8c       	sub	r12,-8
80002c54:	00 00       	add	r0,r0
80002c56:	09 1f       	ld.sh	pc,r4++
80002c58:	80 00       	ld.sh	r0,r0[0x0]
80002c5a:	32 62       	mov	r2,38
80002c5c:	00 00       	add	r0,r0
80002c5e:	09 1e       	ld.sh	lr,r4++
80002c60:	80 00       	ld.sh	r0,r0[0x0]
80002c62:	28 7c       	sub	r12,-121
80002c64:	00 00       	add	r0,r0
80002c66:	09 21       	ld.uh	r1,r4++
80002c68:	80 00       	ld.sh	r0,r0[0x0]
80002c6a:	28 9c       	sub	r12,-119
80002c6c:	00 00       	add	r0,r0
80002c6e:	09 1d       	ld.sh	sp,r4++
80002c70:	80 00       	ld.sh	r0,r0[0x0]
80002c72:	28 8c       	sub	r12,-120
80002c74:	80 00       	ld.sh	r0,r0[0x0]
80002c76:	28 ac       	sub	r12,-118
80002c78:	80 00       	ld.sh	r0,r0[0x0]
80002c7a:	28 bc       	sub	r12,-117

80002c7c <ui_disable_asynchronous_interrupt>:

/**
 * \brief Disables interrupt pin change
 */
static void ui_disable_asynchronous_interrupt(void)
{
80002c7c:	d4 01       	pushm	lr
	eic_disable_line(&AVR32_EIC, EXT_NMI);
80002c7e:	30 8b       	mov	r11,8
80002c80:	fe 7c 0d 80 	mov	r12,-62080
80002c84:	f0 1f 00 03 	mcall	80002c90 <ui_disable_asynchronous_interrupt+0x14>

	/* Disable joystick input change ITs. */
	gpio_disable_pin_interrupt(GPIO_JOYSTICK_PUSH);
80002c88:	31 4c       	mov	r12,20
80002c8a:	f0 1f 00 03 	mcall	80002c94 <ui_disable_asynchronous_interrupt+0x18>
}
80002c8e:	d8 02       	popm	pc
80002c90:	80 00       	ld.sh	r0,r0[0x0]
80002c92:	30 ba       	mov	r10,11
80002c94:	80 00       	ld.sh	r0,r0[0x0]
80002c96:	32 f6       	mov	r6,47

80002c98 <ui_host_wakeup_event>:
{
	ui_midi_plug = b_plug;
}

void ui_host_wakeup_event(void)
{
80002c98:	d4 01       	pushm	lr
	ui_disable_asynchronous_interrupt();
80002c9a:	f0 1f 00 02 	mcall	80002ca0 <ui_host_wakeup_event+0x8>
}
80002c9e:	d8 02       	popm	pc
80002ca0:	80 00       	ld.sh	r0,r0[0x0]
80002ca2:	2c 7c       	sub	r12,-57

80002ca4 <ui_enable_asynchronous_interrupt>:

/**
 * \brief Initializes and enables interrupt pin change
 */
static void ui_enable_asynchronous_interrupt(void)
{
80002ca4:	eb cd 40 80 	pushm	r7,lr
80002ca8:	20 2d       	sub	sp,8
		.eic_level = EIC_LEVEL_LOW_LEVEL,
		// Enable filter.
		.eic_filter = EIC_FILTER_ENABLED,
		// For Wake Up mode, initialize in asynchronous mode
		.eic_async = EIC_ASYNCH_MODE
	};
80002caa:	30 6a       	mov	r10,6
80002cac:	49 6b       	lddpc	r11,80002d04 <ui_enable_asynchronous_interrupt+0x60>
80002cae:	fa cc ff fe 	sub	r12,sp,-2
80002cb2:	f0 1f 00 16 	mcall	80002d08 <ui_enable_asynchronous_interrupt+0x64>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002cb6:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80002cba:	d3 03       	ssrf	0x10

	/* register joystick handler on level 0 */
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(ui_wakeup_isr,
80002cbc:	30 0a       	mov	r10,0
80002cbe:	34 2b       	mov	r11,66
80002cc0:	49 3c       	lddpc	r12,80002d0c <ui_enable_asynchronous_interrupt+0x68>
80002cc2:	f0 1f 00 14 	mcall	80002d10 <ui_enable_asynchronous_interrupt+0x6c>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002cc6:	e6 17 00 01 	andh	r7,0x1,COH
80002cca:	c0 21       	brne	80002cce <ui_enable_asynchronous_interrupt+0x2a>
      cpu_irq_enable();
80002ccc:	d5 03       	csrf	0x10
			AVR32_GPIO_IRQ_0 + (GPIO_JOYSTICK_PUSH / 8), 0);
	cpu_irq_restore(flags);

	/* configure joystick to produce IT on all state change */
	gpio_enable_pin_interrupt(GPIO_JOYSTICK_PUSH, GPIO_PIN_CHANGE);
80002cce:	30 0b       	mov	r11,0
80002cd0:	31 4c       	mov	r12,20
80002cd2:	f0 1f 00 11 	mcall	80002d14 <ui_enable_asynchronous_interrupt+0x70>
	 * wake up from the STATIC sleep mode).
	 *
	 * First, map the interrupt line to the GPIO pin with the right
	 * peripheral function.
	 */
	gpio_enable_module_pin(GPIO_JOYSTICK_PUSH, AVR32_EIC_EXTINT_8_FUNCTION);
80002cd6:	30 0b       	mov	r11,0
80002cd8:	31 4c       	mov	r12,20
80002cda:	f0 1f 00 10 	mcall	80002d18 <ui_enable_asynchronous_interrupt+0x74>
	/*
	 * Enable the internal pull-up resistor on that pin (because the EIC is
	 * configured such that the interrupt will trigger on low-level, see
	 * eic_options.eic_level).
	 */
	gpio_enable_pin_pull_up(GPIO_JOYSTICK_PUSH);
80002cde:	31 4c       	mov	r12,20
80002ce0:	f0 1f 00 0f 	mcall	80002d1c <ui_enable_asynchronous_interrupt+0x78>

	// Init the EIC controller with the set options.
	eic_init(&AVR32_EIC, &eic_options, sizeof(eic_options) /
80002ce4:	30 1a       	mov	r10,1
80002ce6:	fa cb ff fe 	sub	r11,sp,-2
80002cea:	fe 7c 0d 80 	mov	r12,-62080
80002cee:	f0 1f 00 0d 	mcall	80002d20 <ui_enable_asynchronous_interrupt+0x7c>
			sizeof(eic_options_t));

	// Enable External Interrupt Controller Line
	eic_enable_line(&AVR32_EIC, EXT_NMI);
80002cf2:	30 8b       	mov	r11,8
80002cf4:	fe 7c 0d 80 	mov	r12,-62080
80002cf8:	f0 1f 00 0b 	mcall	80002d24 <ui_enable_asynchronous_interrupt+0x80>
}
80002cfc:	2f ed       	sub	sp,-8
80002cfe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d02:	00 00       	add	r0,r0
80002d04:	80 00       	ld.sh	r0,r0[0x0]
80002d06:	d4 00       	acall	0x40
80002d08:	80 00       	ld.sh	r0,r0[0x0]
80002d0a:	7d 6c       	ld.w	r12,lr[0x58]
80002d0c:	80 00       	ld.sh	r0,r0[0x0]
80002d0e:	2d 28       	sub	r8,-46
80002d10:	80 00       	ld.sh	r0,r0[0x0]
80002d12:	33 24       	mov	r4,50
80002d14:	80 00       	ld.sh	r0,r0[0x0]
80002d16:	32 b0       	mov	r0,43
80002d18:	80 00       	ld.sh	r0,r0[0x0]
80002d1a:	31 10       	mov	r0,17
80002d1c:	80 00       	ld.sh	r0,r0[0x0]
80002d1e:	31 94       	mov	r4,25
80002d20:	80 00       	ld.sh	r0,r0[0x0]
80002d22:	2f e0       	sub	r0,-2
80002d24:	80 00       	ld.sh	r0,r0[0x0]
80002d26:	30 b0       	mov	r0,11

80002d28 <ui_wakeup_isr>:

/**
 * \brief Interrupt handler for interrupt pin change
 */
ISR(ui_wakeup_isr, AVR32_GPIO_IRQ_GROUP, 0)
{
80002d28:	d4 01       	pushm	lr
	// Clear GPIO interrupt.
	gpio_clear_pin_interrupt_flag(GPIO_JOYSTICK_PUSH);
80002d2a:	31 4c       	mov	r12,20
80002d2c:	f0 1f 00 07 	mcall	80002d48 <ui_wakeup_isr+0x20>

	// Clear External Interrupt Line else Wakeup event always enabled
	eic_clear_interrupt_line(&AVR32_EIC, EXT_NMI);
80002d30:	30 8b       	mov	r11,8
80002d32:	fe 7c 0d 80 	mov	r12,-62080
80002d36:	f0 1f 00 06 	mcall	80002d4c <ui_wakeup_isr+0x24>

	ui_disable_asynchronous_interrupt();
80002d3a:	f0 1f 00 06 	mcall	80002d50 <ui_wakeup_isr+0x28>

	// Wakeup host and device
	uhc_resume();
80002d3e:	f0 1f 00 06 	mcall	80002d54 <ui_wakeup_isr+0x2c>
}
80002d42:	d4 02       	popm	lr
80002d44:	d6 03       	rete
80002d46:	00 00       	add	r0,r0
80002d48:	80 00       	ld.sh	r0,r0[0x0]
80002d4a:	33 0c       	mov	r12,48
80002d4c:	80 00       	ld.sh	r0,r0[0x0]
80002d4e:	30 c4       	mov	r4,12
80002d50:	80 00       	ld.sh	r0,r0[0x0]
80002d52:	2c 7c       	sub	r12,-57
80002d54:	80 00       	ld.sh	r0,r0[0x0]
80002d56:	6c 98       	ld.w	r8,r6[0x24]

80002d58 <ui_host_sof_event>:
{
	ui_disable_asynchronous_interrupt();
}

void ui_host_sof_event(void)
{
80002d58:	d4 01       	pushm	lr
	bool b_btn_state;
	static bool btn_suspend = false;
	static bool btn_suspend_and_remotewakeup = false;
	static uint16_t counter_sof = 0;

	if (ui_enum_status == UHC_ENUM_SUCCESS) {
80002d5a:	4b 98       	lddpc	r8,80002e3c <ui_host_sof_event+0xe4>
80002d5c:	70 08       	ld.w	r8,r8[0x0]
80002d5e:	58 08       	cp.w	r8,0
80002d60:	c6 d1       	brne	80002e3a <ui_host_sof_event+0xe2>

		// Display device enumerated and in active mode
		if (++counter_sof > ui_device_speed_blink) {
80002d62:	4b 89       	lddpc	r9,80002e40 <ui_host_sof_event+0xe8>
80002d64:	92 08       	ld.sh	r8,r9[0x0]
80002d66:	2f f8       	sub	r8,-1
80002d68:	b2 08       	st.h	r9[0x0],r8
80002d6a:	4b 79       	lddpc	r9,80002e44 <ui_host_sof_event+0xec>
80002d6c:	92 09       	ld.sh	r9,r9[0x0]
80002d6e:	f0 09 19 00 	cp.h	r9,r8
80002d72:	c1 52       	brcc	80002d9c <ui_host_sof_event+0x44>
			counter_sof = 0;
80002d74:	30 08       	mov	r8,0
80002d76:	4b 39       	lddpc	r9,80002e40 <ui_host_sof_event+0xe8>
80002d78:	b2 08       	st.h	r9[0x0],r8
			if (ui_hid_mouse_plug) {
80002d7a:	4b 49       	lddpc	r9,80002e48 <ui_host_sof_event+0xf0>
80002d7c:	13 89       	ld.ub	r9,r9[0x0]
80002d7e:	f0 09 18 00 	cp.b	r9,r8
80002d82:	c0 40       	breq	80002d8a <ui_host_sof_event+0x32>
				LED_Toggle(LED2);
80002d84:	30 4c       	mov	r12,4
80002d86:	f0 1f 00 32 	mcall	80002e4c <ui_host_sof_event+0xf4>
			}
			if (ui_midi_plug) {
80002d8a:	4b 28       	lddpc	r8,80002e50 <ui_host_sof_event+0xf8>
80002d8c:	11 89       	ld.ub	r9,r8[0x0]
80002d8e:	30 08       	mov	r8,0
80002d90:	f0 09 18 00 	cp.b	r9,r8
80002d94:	c0 40       	breq	80002d9c <ui_host_sof_event+0x44>
				LED_Toggle(LED3);
80002d96:	30 8c       	mov	r12,8
80002d98:	f0 1f 00 2d 	mcall	80002e4c <ui_host_sof_event+0xf4>
			}
		}
		
		// Scan button to enter in suspend mode
		b_btn_state = !gpio_get_pin_value(GPIO_PUSH_BUTTON_0);
80002d9c:	35 8c       	mov	r12,88
80002d9e:	f0 1f 00 2e 	mcall	80002e54 <ui_host_sof_event+0xfc>
80002da2:	ec 1c 00 01 	eorl	r12,0x1
80002da6:	5c 5c       	castu.b	r12
		if (b_btn_state != btn_suspend) {
80002da8:	4a c8       	lddpc	r8,80002e58 <ui_host_sof_event+0x100>
80002daa:	11 88       	ld.ub	r8,r8[0x0]
80002dac:	f8 08 18 00 	cp.b	r8,r12
80002db0:	c1 e0       	breq	80002dec <ui_host_sof_event+0x94>
			// Button have changed
			btn_suspend = b_btn_state;
80002db2:	4a a8       	lddpc	r8,80002e58 <ui_host_sof_event+0x100>
80002db4:	b0 8c       	st.b	r8[0x0],r12
			if (b_btn_state) {
80002db6:	58 0c       	cp.w	r12,0
80002db8:	c1 a0       	breq	80002dec <ui_host_sof_event+0x94>
				// Button has been pressed
				LED_Off(LED2);
80002dba:	30 4c       	mov	r12,4
80002dbc:	f0 1f 00 28 	mcall	80002e5c <ui_host_sof_event+0x104>
				LED_Off(LED3);
80002dc0:	30 8c       	mov	r12,8
80002dc2:	f0 1f 00 27 	mcall	80002e5c <ui_host_sof_event+0x104>
				LED_Off(LED_BI0_GREEN);
80002dc6:	32 0c       	mov	r12,32
80002dc8:	f0 1f 00 25 	mcall	80002e5c <ui_host_sof_event+0x104>
				LED_Off(LED_BI0_RED);
80002dcc:	31 0c       	mov	r12,16
80002dce:	f0 1f 00 24 	mcall	80002e5c <ui_host_sof_event+0x104>
				LED_Off(LED_BI1_GREEN);
80002dd2:	e0 6c 00 80 	mov	r12,128
80002dd6:	f0 1f 00 22 	mcall	80002e5c <ui_host_sof_event+0x104>
				LED_Off(LED_BI1_RED);
80002dda:	34 0c       	mov	r12,64
80002ddc:	f0 1f 00 20 	mcall	80002e5c <ui_host_sof_event+0x104>
				ui_enable_asynchronous_interrupt();
80002de0:	f0 1f 00 20 	mcall	80002e60 <ui_host_sof_event+0x108>
				uhc_suspend(false);
80002de4:	30 0c       	mov	r12,0
80002de6:	f0 1f 00 20 	mcall	80002e64 <ui_host_sof_event+0x10c>
				return;
80002dea:	d8 02       	popm	pc
			}
		}

		// Scan button to enter in suspend mode and remote wakeup
		b_btn_state = !gpio_get_pin_value(GPIO_PUSH_BUTTON_1);
80002dec:	35 5c       	mov	r12,85
80002dee:	f0 1f 00 1a 	mcall	80002e54 <ui_host_sof_event+0xfc>
80002df2:	ec 1c 00 01 	eorl	r12,0x1
80002df6:	5c 5c       	castu.b	r12
		if (b_btn_state != btn_suspend_and_remotewakeup) {
80002df8:	49 c8       	lddpc	r8,80002e68 <ui_host_sof_event+0x110>
80002dfa:	11 88       	ld.ub	r8,r8[0x0]
80002dfc:	f8 08 18 00 	cp.b	r8,r12
80002e00:	c1 d0       	breq	80002e3a <ui_host_sof_event+0xe2>
			// Button have changed
			btn_suspend_and_remotewakeup = b_btn_state;
80002e02:	49 a8       	lddpc	r8,80002e68 <ui_host_sof_event+0x110>
80002e04:	b0 8c       	st.b	r8[0x0],r12
			if (b_btn_state) {
80002e06:	58 0c       	cp.w	r12,0
80002e08:	c1 90       	breq	80002e3a <ui_host_sof_event+0xe2>
				// Button has been pressed
				LED_Off(LED2);
80002e0a:	30 4c       	mov	r12,4
80002e0c:	f0 1f 00 14 	mcall	80002e5c <ui_host_sof_event+0x104>
				LED_Off(LED3);
80002e10:	30 8c       	mov	r12,8
80002e12:	f0 1f 00 13 	mcall	80002e5c <ui_host_sof_event+0x104>
				LED_Off(LED_BI0_GREEN);
80002e16:	32 0c       	mov	r12,32
80002e18:	f0 1f 00 11 	mcall	80002e5c <ui_host_sof_event+0x104>
				LED_Off(LED_BI0_RED);
80002e1c:	31 0c       	mov	r12,16
80002e1e:	f0 1f 00 10 	mcall	80002e5c <ui_host_sof_event+0x104>
				LED_Off(LED_BI1_GREEN);
80002e22:	e0 6c 00 80 	mov	r12,128
80002e26:	f0 1f 00 0e 	mcall	80002e5c <ui_host_sof_event+0x104>
				LED_Off(LED_BI1_RED);
80002e2a:	34 0c       	mov	r12,64
80002e2c:	f0 1f 00 0c 	mcall	80002e5c <ui_host_sof_event+0x104>
				ui_enable_asynchronous_interrupt();
80002e30:	f0 1f 00 0c 	mcall	80002e60 <ui_host_sof_event+0x108>
				uhc_suspend(true);
80002e34:	30 1c       	mov	r12,1
80002e36:	f0 1f 00 0c 	mcall	80002e64 <ui_host_sof_event+0x10c>
80002e3a:	d8 02       	popm	pc
80002e3c:	00 00       	add	r0,r0
80002e3e:	00 a8       	st.w	r0++,r8
80002e40:	00 00       	add	r0,r0
80002e42:	09 1a       	ld.sh	r10,r4++
80002e44:	00 00       	add	r0,r0
80002e46:	09 18       	ld.sh	r8,r4++
80002e48:	00 00       	add	r0,r0
80002e4a:	09 1c       	ld.sh	r12,r4++
80002e4c:	80 00       	ld.sh	r0,r0[0x0]
80002e4e:	2e ec       	sub	r12,-18
80002e50:	00 00       	add	r0,r0
80002e52:	09 17       	ld.sh	r7,r4++
80002e54:	80 00       	ld.sh	r0,r0[0x0]
80002e56:	32 62       	mov	r2,38
80002e58:	00 00       	add	r0,r0
80002e5a:	09 22       	ld.uh	r2,r4++
80002e5c:	80 00       	ld.sh	r0,r0[0x0]
80002e5e:	2f 8c       	sub	r12,-8
80002e60:	80 00       	ld.sh	r0,r0[0x0]
80002e62:	2c a4       	sub	r4,-54
80002e64:	80 00       	ld.sh	r0,r0[0x0]
80002e66:	6c b0       	ld.w	r0,r6[0x2c]
80002e68:	00 00       	add	r0,r0
80002e6a:	09 20       	ld.uh	r0,r4++

80002e6c <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80002e6c:	d4 01       	pushm	lr
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002e6e:	30 3b       	mov	r11,3
80002e70:	33 bc       	mov	r12,59
80002e72:	f0 1f 00 1e 	mcall	80002ee8 <board_init+0x7c>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002e76:	30 3b       	mov	r11,3
80002e78:	33 cc       	mov	r12,60
80002e7a:	f0 1f 00 1c 	mcall	80002ee8 <board_init+0x7c>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002e7e:	30 3b       	mov	r11,3
80002e80:	33 dc       	mov	r12,61
80002e82:	f0 1f 00 1a 	mcall	80002ee8 <board_init+0x7c>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002e86:	30 3b       	mov	r11,3
80002e88:	33 ec       	mov	r12,62
80002e8a:	f0 1f 00 18 	mcall	80002ee8 <board_init+0x7c>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002e8e:	30 3b       	mov	r11,3
80002e90:	33 3c       	mov	r12,51
80002e92:	f0 1f 00 16 	mcall	80002ee8 <board_init+0x7c>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002e96:	30 3b       	mov	r11,3
80002e98:	33 4c       	mov	r12,52
80002e9a:	f0 1f 00 14 	mcall	80002ee8 <board_init+0x7c>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002e9e:	30 3b       	mov	r11,3
80002ea0:	33 5c       	mov	r12,53
80002ea2:	f0 1f 00 12 	mcall	80002ee8 <board_init+0x7c>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002ea6:	30 3b       	mov	r11,3
80002ea8:	33 6c       	mov	r12,54
80002eaa:	f0 1f 00 10 	mcall	80002ee8 <board_init+0x7c>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
80002eae:	30 0b       	mov	r11,0
80002eb0:	35 8c       	mov	r12,88
80002eb2:	f0 1f 00 0e 	mcall	80002ee8 <board_init+0x7c>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
80002eb6:	30 0b       	mov	r11,0
80002eb8:	35 5c       	mov	r12,85
80002eba:	f0 1f 00 0c 	mcall	80002ee8 <board_init+0x7c>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
80002ebe:	30 0b       	mov	r11,0
80002ec0:	35 2c       	mov	r12,82
80002ec2:	f0 1f 00 0a 	mcall	80002ee8 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
80002ec6:	30 0b       	mov	r11,0
80002ec8:	31 4c       	mov	r12,20
80002eca:	f0 1f 00 08 	mcall	80002ee8 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
80002ece:	30 0b       	mov	r11,0
80002ed0:	31 9c       	mov	r12,25
80002ed2:	f0 1f 00 06 	mcall	80002ee8 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
80002ed6:	30 0b       	mov	r11,0
80002ed8:	31 ac       	mov	r12,26
80002eda:	f0 1f 00 04 	mcall	80002ee8 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
80002ede:	30 0b       	mov	r11,0
80002ee0:	31 bc       	mov	r12,27
80002ee2:	f0 1f 00 02 	mcall	80002ee8 <board_init+0x7c>
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
80002ee6:	d8 02       	popm	pc
80002ee8:	80 00       	ld.sh	r0,r0[0x0]
80002eea:	31 aa       	mov	r10,26

80002eec <LED_Toggle>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002eec:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);
80002ef0:	49 18       	lddpc	r8,80002f34 <LED_Toggle+0x48>
80002ef2:	70 09       	ld.w	r9,r8[0x0]
80002ef4:	f9 e9 20 09 	eor	r9,r12,r9
80002ef8:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002efa:	58 0c       	cp.w	r12,0
80002efc:	5e 0c       	reteq	r12
80002efe:	48 f8       	lddpc	r8,80002f38 <LED_Toggle+0x4c>
80002f00:	21 08       	sub	r8,16
  {
    // Select the next specified LED and toggle it.
    led_shift = 1 + ctz(leds);
80002f02:	18 9a       	mov	r10,r12
80002f04:	5c 9a       	brev	r10
80002f06:	f4 0a 12 00 	clz	r10,r10
80002f0a:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002f0c:	f4 09 15 04 	lsl	r9,r10,0x4
80002f10:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002f12:	70 09       	ld.w	r9,r8[0x0]
80002f14:	a9 69       	lsl	r9,0x8
80002f16:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
80002f1a:	70 1b       	ld.w	r11,r8[0x4]
80002f1c:	f3 4b 00 5c 	st.w	r9[92],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002f20:	70 1b       	ld.w	r11,r8[0x4]
80002f22:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002f26:	70 1b       	ld.w	r11,r8[0x4]
80002f28:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002f2a:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002f2e:	ce a1       	brne	80002f02 <LED_Toggle+0x16>
80002f30:	5e fc       	retal	r12
80002f32:	00 00       	add	r0,r0
80002f34:	00 00       	add	r0,r0
80002f36:	00 ac       	st.w	r0++,r12
80002f38:	80 00       	ld.sh	r0,r0[0x0]
80002f3a:	d4 08       	*unknown*

80002f3c <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002f3c:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80002f40:	49 18       	lddpc	r8,80002f84 <LED_On+0x48>
80002f42:	70 09       	ld.w	r9,r8[0x0]
80002f44:	f9 e9 10 09 	or	r9,r12,r9
80002f48:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002f4a:	58 0c       	cp.w	r12,0
80002f4c:	5e 0c       	reteq	r12
80002f4e:	48 f8       	lddpc	r8,80002f88 <LED_On+0x4c>
80002f50:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80002f52:	18 9a       	mov	r10,r12
80002f54:	5c 9a       	brev	r10
80002f56:	f4 0a 12 00 	clz	r10,r10
80002f5a:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002f5c:	f4 09 15 04 	lsl	r9,r10,0x4
80002f60:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002f62:	70 09       	ld.w	r9,r8[0x0]
80002f64:	a9 69       	lsl	r9,0x8
80002f66:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80002f6a:	70 1b       	ld.w	r11,r8[0x4]
80002f6c:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002f70:	70 1b       	ld.w	r11,r8[0x4]
80002f72:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002f76:	70 1b       	ld.w	r11,r8[0x4]
80002f78:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002f7a:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002f7e:	ce a1       	brne	80002f52 <LED_On+0x16>
80002f80:	5e fc       	retal	r12
80002f82:	00 00       	add	r0,r0
80002f84:	00 00       	add	r0,r0
80002f86:	00 ac       	st.w	r0++,r12
80002f88:	80 00       	ld.sh	r0,r0[0x0]
80002f8a:	d4 08       	*unknown*

80002f8c <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002f8c:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80002f90:	49 28       	lddpc	r8,80002fd8 <LED_Off+0x4c>
80002f92:	70 09       	ld.w	r9,r8[0x0]
80002f94:	f8 0a 11 ff 	rsub	r10,r12,-1
80002f98:	f5 e9 00 09 	and	r9,r10,r9
80002f9c:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002f9e:	58 0c       	cp.w	r12,0
80002fa0:	5e 0c       	reteq	r12
80002fa2:	48 f8       	lddpc	r8,80002fdc <LED_Off+0x50>
80002fa4:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80002fa6:	18 9a       	mov	r10,r12
80002fa8:	5c 9a       	brev	r10
80002faa:	f4 0a 12 00 	clz	r10,r10
80002fae:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002fb0:	f4 09 15 04 	lsl	r9,r10,0x4
80002fb4:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002fb6:	70 09       	ld.w	r9,r8[0x0]
80002fb8:	a9 69       	lsl	r9,0x8
80002fba:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80002fbe:	70 1b       	ld.w	r11,r8[0x4]
80002fc0:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002fc4:	70 1b       	ld.w	r11,r8[0x4]
80002fc6:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002fca:	70 1b       	ld.w	r11,r8[0x4]
80002fcc:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002fce:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002fd2:	ce a1       	brne	80002fa6 <LED_Off+0x1a>
80002fd4:	5e fc       	retal	r12
80002fd6:	00 00       	add	r0,r0
80002fd8:	00 00       	add	r0,r0
80002fda:	00 ac       	st.w	r0++,r12
80002fdc:	80 00       	ld.sh	r0,r0[0x0]
80002fde:	d4 08       	*unknown*

80002fe0 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
80002fe0:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
80002fe4:	58 0a       	cp.w	r10,0
80002fe6:	c6 30       	breq	800030ac <eic_init+0xcc>
80002fe8:	30 08       	mov	r8,0
80002fea:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80002fec:	30 19       	mov	r9,1
80002fee:	30 1e       	mov	lr,1
80002ff0:	f0 08 00 18 	add	r8,r8,r8<<0x1
80002ff4:	f6 08 00 18 	add	r8,r11,r8<<0x1
80002ff8:	11 96       	ld.ub	r6,r8[0x1]
80002ffa:	f2 06 18 00 	cp.b	r6,r9
80002ffe:	c0 71       	brne	8000300c <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
80003000:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80003002:	11 86       	ld.ub	r6,r8[0x0]
80003004:	fc 06 09 46 	lsl	r6,lr,r6
80003008:	0a 46       	or	r6,r5
8000300a:	c0 78       	rjmp	80003018 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
8000300c:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8000300e:	11 86       	ld.ub	r6,r8[0x0]
80003010:	fc 06 09 46 	lsl	r6,lr,r6
80003014:	5c d6       	com	r6
80003016:	0a 66       	and	r6,r5
80003018:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
8000301a:	11 a6       	ld.ub	r6,r8[0x2]
8000301c:	f2 06 18 00 	cp.b	r6,r9
80003020:	c0 71       	brne	8000302e <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
80003022:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80003024:	11 86       	ld.ub	r6,r8[0x0]
80003026:	fc 06 09 46 	lsl	r6,lr,r6
8000302a:	0a 46       	or	r6,r5
8000302c:	c0 78       	rjmp	8000303a <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
8000302e:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80003030:	11 86       	ld.ub	r6,r8[0x0]
80003032:	fc 06 09 46 	lsl	r6,lr,r6
80003036:	5c d6       	com	r6
80003038:	0a 66       	and	r6,r5
8000303a:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000303c:	11 b6       	ld.ub	r6,r8[0x3]
8000303e:	f2 06 18 00 	cp.b	r6,r9
80003042:	c0 71       	brne	80003050 <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
80003044:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80003046:	11 86       	ld.ub	r6,r8[0x0]
80003048:	fc 06 09 46 	lsl	r6,lr,r6
8000304c:	0a 46       	or	r6,r5
8000304e:	c0 78       	rjmp	8000305c <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80003050:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80003052:	11 86       	ld.ub	r6,r8[0x0]
80003054:	fc 06 09 46 	lsl	r6,lr,r6
80003058:	5c d6       	com	r6
8000305a:	0a 66       	and	r6,r5
8000305c:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8000305e:	11 c6       	ld.ub	r6,r8[0x4]
80003060:	f2 06 18 00 	cp.b	r6,r9
80003064:	c0 71       	brne	80003072 <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
80003066:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80003068:	11 86       	ld.ub	r6,r8[0x0]
8000306a:	fc 06 09 46 	lsl	r6,lr,r6
8000306e:	0a 46       	or	r6,r5
80003070:	c0 78       	rjmp	8000307e <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
80003072:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80003074:	11 86       	ld.ub	r6,r8[0x0]
80003076:	fc 06 09 46 	lsl	r6,lr,r6
8000307a:	5c d6       	com	r6
8000307c:	0a 66       	and	r6,r5
8000307e:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80003080:	11 d6       	ld.ub	r6,r8[0x5]
80003082:	f2 06 18 00 	cp.b	r6,r9
80003086:	c0 71       	brne	80003094 <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
80003088:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
8000308a:	11 88       	ld.ub	r8,r8[0x0]
8000308c:	fc 08 09 48 	lsl	r8,lr,r8
80003090:	0c 48       	or	r8,r6
80003092:	c0 78       	rjmp	800030a0 <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
80003094:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80003096:	11 88       	ld.ub	r8,r8[0x0]
80003098:	fc 08 09 48 	lsl	r8,lr,r8
8000309c:	5c d8       	com	r8
8000309e:	0c 68       	and	r8,r6
800030a0:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800030a2:	2f f7       	sub	r7,-1
800030a4:	0e 98       	mov	r8,r7
800030a6:	0e 3a       	cp.w	r10,r7
800030a8:	fe 9b ff a4 	brhi	80002ff0 <eic_init+0x10>
800030ac:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800030b0 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
800030b0:	30 18       	mov	r8,1
800030b2:	f0 0b 09 48 	lsl	r8,r8,r11
800030b6:	99 c8       	st.w	r12[0x30],r8
}
800030b8:	5e fc       	retal	r12

800030ba <eic_disable_line>:
}

void eic_disable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Disable line line_number
	eic->dis = 1 << line_number;
800030ba:	30 18       	mov	r8,1
800030bc:	f0 0b 09 48 	lsl	r8,r8,r11
800030c0:	99 d8       	st.w	r12[0x34],r8
}
800030c2:	5e fc       	retal	r12

800030c4 <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800030c4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800030c8:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
800030ca:	30 19       	mov	r9,1
800030cc:	f2 0b 09 4b 	lsl	r11,r9,r11
800030d0:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
800030d2:	78 39       	ld.w	r9,r12[0xc]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800030d4:	e6 18 00 01 	andh	r8,0x1,COH
800030d8:	c0 21       	brne	800030dc <eic_clear_interrupt_line+0x18>
      cpu_irq_enable();
800030da:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800030dc:	5e fc       	retal	r12

800030de <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800030de:	fe 68 14 00 	mov	r8,-125952
800030e2:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800030e4:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800030e8:	91 09       	st.w	r8[0x0],r9
}
800030ea:	5e fc       	retal	r12

800030ec <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
800030ec:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
800030ee:	e0 68 8a 3f 	mov	r8,35391
800030f2:	ea 18 01 f7 	orh	r8,0x1f7
800030f6:	10 3c       	cp.w	r12,r8
800030f8:	e0 88 00 06 	brls	80003104 <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
800030fc:	30 1c       	mov	r12,1
800030fe:	f0 1f 00 04 	mcall	8000310c <flashc_set_bus_freq+0x20>
80003102:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
80003104:	30 0c       	mov	r12,0
80003106:	f0 1f 00 02 	mcall	8000310c <flashc_set_bus_freq+0x20>
8000310a:	d8 02       	popm	pc
8000310c:	80 00       	ld.sh	r0,r0[0x0]
8000310e:	30 de       	mov	lr,13

80003110 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003110:	f8 08 16 05 	lsr	r8,r12,0x5
80003114:	a9 68       	lsl	r8,0x8
80003116:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
8000311a:	58 1b       	cp.w	r11,1
8000311c:	c0 d0       	breq	80003136 <gpio_enable_module_pin+0x26>
8000311e:	c0 63       	brcs	8000312a <gpio_enable_module_pin+0x1a>
80003120:	58 2b       	cp.w	r11,2
80003122:	c1 00       	breq	80003142 <gpio_enable_module_pin+0x32>
80003124:	58 3b       	cp.w	r11,3
80003126:	c1 40       	breq	8000314e <gpio_enable_module_pin+0x3e>
80003128:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000312a:	30 19       	mov	r9,1
8000312c:	f2 0c 09 49 	lsl	r9,r9,r12
80003130:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003132:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003134:	c1 28       	rjmp	80003158 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003136:	30 19       	mov	r9,1
80003138:	f2 0c 09 49 	lsl	r9,r9,r12
8000313c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000313e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003140:	c0 c8       	rjmp	80003158 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003142:	30 19       	mov	r9,1
80003144:	f2 0c 09 49 	lsl	r9,r9,r12
80003148:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000314a:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000314c:	c0 68       	rjmp	80003158 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000314e:	30 19       	mov	r9,1
80003150:	f2 0c 09 49 	lsl	r9,r9,r12
80003154:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003156:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80003158:	30 19       	mov	r9,1
8000315a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000315e:	91 2c       	st.w	r8[0x8],r12
80003160:	5e fd       	retal	0
80003162:	d7 03       	nop

80003164 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80003164:	d4 21       	pushm	r4-r7,lr
80003166:	18 97       	mov	r7,r12
80003168:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000316a:	58 0b       	cp.w	r11,0
8000316c:	c0 31       	brne	80003172 <gpio_enable_module+0xe>
8000316e:	30 05       	mov	r5,0
80003170:	c0 d8       	rjmp	8000318a <gpio_enable_module+0x26>
80003172:	30 06       	mov	r6,0
80003174:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80003176:	6e 1b       	ld.w	r11,r7[0x4]
80003178:	6e 0c       	ld.w	r12,r7[0x0]
8000317a:	f0 1f 00 06 	mcall	80003190 <gpio_enable_module+0x2c>
8000317e:	18 45       	or	r5,r12
		gpiomap++;
80003180:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80003182:	2f f6       	sub	r6,-1
80003184:	0c 34       	cp.w	r4,r6
80003186:	fe 9b ff f8 	brhi	80003176 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8000318a:	0a 9c       	mov	r12,r5
8000318c:	d8 22       	popm	r4-r7,pc
8000318e:	00 00       	add	r0,r0
80003190:	80 00       	ld.sh	r0,r0[0x0]
80003192:	31 10       	mov	r0,17

80003194 <gpio_enable_pin_pull_up>:
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003194:	f8 08 16 05 	lsr	r8,r12,0x5
80003198:	a9 68       	lsl	r8,0x8
8000319a:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->puers = 1 << (pin & 0x1F);
8000319e:	30 19       	mov	r9,1
800031a0:	f2 0c 09 4c 	lsl	r12,r9,r12
800031a4:	f1 4c 00 74 	st.w	r8[116],r12
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
800031a8:	5e fc       	retal	r12

800031aa <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800031aa:	f8 08 16 05 	lsr	r8,r12,0x5
800031ae:	a9 68       	lsl	r8,0x8
800031b0:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800031b4:	16 99       	mov	r9,r11
800031b6:	e2 19 00 04 	andl	r9,0x4,COH
800031ba:	c0 70       	breq	800031c8 <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800031bc:	30 19       	mov	r9,1
800031be:	f2 0c 09 49 	lsl	r9,r9,r12
800031c2:	f1 49 00 74 	st.w	r8[116],r9
800031c6:	c0 68       	rjmp	800031d2 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800031c8:	30 19       	mov	r9,1
800031ca:	f2 0c 09 49 	lsl	r9,r9,r12
800031ce:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800031d2:	16 99       	mov	r9,r11
800031d4:	e2 19 00 80 	andl	r9,0x80,COH
800031d8:	c2 40       	breq	80003220 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800031da:	16 99       	mov	r9,r11
800031dc:	e2 19 01 80 	andl	r9,0x180,COH
800031e0:	c0 90       	breq	800031f2 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800031e2:	30 19       	mov	r9,1
800031e4:	f2 0c 09 49 	lsl	r9,r9,r12
800031e8:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800031ec:	f1 49 00 b8 	st.w	r8[184],r9
800031f0:	c1 88       	rjmp	80003220 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
800031f2:	16 99       	mov	r9,r11
800031f4:	e2 19 02 80 	andl	r9,0x280,COH
800031f8:	c0 90       	breq	8000320a <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
800031fa:	30 19       	mov	r9,1
800031fc:	f2 0c 09 49 	lsl	r9,r9,r12
80003200:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80003204:	f1 49 00 b8 	st.w	r8[184],r9
80003208:	c0 c8       	rjmp	80003220 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
8000320a:	16 99       	mov	r9,r11
8000320c:	e2 19 03 80 	andl	r9,0x380,COH
80003210:	c0 80       	breq	80003220 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80003212:	30 19       	mov	r9,1
80003214:	f2 0c 09 49 	lsl	r9,r9,r12
80003218:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000321c:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80003220:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80003224:	c1 50       	breq	8000324e <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80003226:	e2 1b 00 02 	andl	r11,0x2,COH
8000322a:	c0 70       	breq	80003238 <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000322c:	30 19       	mov	r9,1
8000322e:	f2 0c 09 49 	lsl	r9,r9,r12
80003232:	f1 49 00 54 	st.w	r8[84],r9
80003236:	c0 68       	rjmp	80003242 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80003238:	30 19       	mov	r9,1
8000323a:	f2 0c 09 49 	lsl	r9,r9,r12
8000323e:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80003242:	30 19       	mov	r9,1
80003244:	f2 0c 09 49 	lsl	r9,r9,r12
80003248:	f1 49 00 44 	st.w	r8[68],r9
8000324c:	c0 68       	rjmp	80003258 <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
8000324e:	30 19       	mov	r9,1
80003250:	f2 0c 09 49 	lsl	r9,r9,r12
80003254:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003258:	30 19       	mov	r9,1
8000325a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000325e:	91 1c       	st.w	r8[0x4],r12
}
80003260:	5e fc       	retal	r12

80003262 <gpio_get_pin_value>:
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003262:	f8 08 16 05 	lsr	r8,r12,0x5
80003266:	a9 68       	lsl	r8,0x8
80003268:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
8000326c:	71 88       	ld.w	r8,r8[0x60]
8000326e:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80003272:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80003276:	5e fc       	retal	r12

80003278 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003278:	f8 08 16 05 	lsr	r8,r12,0x5
8000327c:	a9 68       	lsl	r8,0x8
8000327e:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80003282:	30 19       	mov	r9,1
80003284:	f2 0c 09 4c 	lsl	r12,r9,r12
80003288:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
8000328c:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003290:	91 1c       	st.w	r8[0x4],r12
}
80003292:	5e fc       	retal	r12

80003294 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003294:	f8 08 16 05 	lsr	r8,r12,0x5
80003298:	a9 68       	lsl	r8,0x8
8000329a:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
8000329e:	30 19       	mov	r9,1
800032a0:	f2 0c 09 4c 	lsl	r12,r9,r12
800032a4:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800032a8:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800032ac:	91 1c       	st.w	r8[0x4],r12
}
800032ae:	5e fc       	retal	r12

800032b0 <gpio_enable_pin_interrupt>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800032b0:	f8 08 16 05 	lsr	r8,r12,0x5
800032b4:	a9 68       	lsl	r8,0x8
800032b6:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
800032ba:	30 19       	mov	r9,1
800032bc:	f2 0c 09 4c 	lsl	r12,r9,r12
800032c0:	f1 4c 00 c4 	st.w	r8[196],r12
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
800032c4:	12 3b       	cp.w	r11,r9
800032c6:	c0 a0       	breq	800032da <gpio_enable_pin_interrupt+0x2a>
800032c8:	c0 43       	brcs	800032d0 <gpio_enable_pin_interrupt+0x20>
800032ca:	58 2b       	cp.w	r11,2
800032cc:	c1 11       	brne	800032ee <gpio_enable_pin_interrupt+0x3e>
800032ce:	c0 b8       	rjmp	800032e4 <gpio_enable_pin_interrupt+0x34>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
800032d0:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
800032d4:	f1 4c 00 b8 	st.w	r8[184],r12
800032d8:	c0 c8       	rjmp	800032f0 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
800032da:	f1 4c 00 a4 	st.w	r8[164],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
800032de:	f1 4c 00 b8 	st.w	r8[184],r12
800032e2:	c0 78       	rjmp	800032f0 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
800032e4:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1s = 1 << (pin & 0x1F);
800032e8:	f1 4c 00 b4 	st.w	r8[180],r12
800032ec:	c0 28       	rjmp	800032f0 <gpio_enable_pin_interrupt+0x40>
800032ee:	5e ff       	retal	1
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
800032f0:	f1 4c 00 94 	st.w	r8[148],r12
800032f4:	5e fd       	retal	0

800032f6 <gpio_disable_pin_interrupt>:
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_interrupt(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800032f6:	f8 08 16 05 	lsr	r8,r12,0x5
800032fa:	a9 68       	lsl	r8,0x8
800032fc:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->ierc = 1 << (pin & 0x1F);
80003300:	30 19       	mov	r9,1
80003302:	f2 0c 09 4c 	lsl	r12,r9,r12
80003306:	f1 4c 00 98 	st.w	r8[152],r12
}
8000330a:	5e fc       	retal	r12

8000330c <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000330c:	f8 08 16 05 	lsr	r8,r12,0x5
80003310:	a9 68       	lsl	r8,0x8
80003312:	e0 28 f0 00 	sub	r8,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
80003316:	30 19       	mov	r9,1
80003318:	f2 0c 09 4c 	lsl	r12,r9,r12
8000331c:	f1 4c 00 d8 	st.w	r8[216],r12
#endif
}
80003320:	5e fc       	retal	r12

80003322 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80003322:	c0 08       	rjmp	80003322 <_unhandled_interrupt>

80003324 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80003324:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80003328:	49 99       	lddpc	r9,8000338c <INTC_register_interrupt+0x68>
8000332a:	f2 08 00 39 	add	r9,r9,r8<<0x3
8000332e:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80003332:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80003334:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80003338:	58 0a       	cp.w	r10,0
8000333a:	c0 91       	brne	8000334c <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000333c:	49 59       	lddpc	r9,80003390 <INTC_register_interrupt+0x6c>
8000333e:	49 6a       	lddpc	r10,80003394 <INTC_register_interrupt+0x70>
80003340:	12 1a       	sub	r10,r9
80003342:	fe 79 08 00 	mov	r9,-63488
80003346:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000334a:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
8000334c:	58 1a       	cp.w	r10,1
8000334e:	c0 a1       	brne	80003362 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80003350:	49 09       	lddpc	r9,80003390 <INTC_register_interrupt+0x6c>
80003352:	49 2a       	lddpc	r10,80003398 <INTC_register_interrupt+0x74>
80003354:	12 1a       	sub	r10,r9
80003356:	bf aa       	sbr	r10,0x1e
80003358:	fe 79 08 00 	mov	r9,-63488
8000335c:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003360:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80003362:	58 2a       	cp.w	r10,2
80003364:	c0 a1       	brne	80003378 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80003366:	48 b9       	lddpc	r9,80003390 <INTC_register_interrupt+0x6c>
80003368:	48 da       	lddpc	r10,8000339c <INTC_register_interrupt+0x78>
8000336a:	12 1a       	sub	r10,r9
8000336c:	bf ba       	sbr	r10,0x1f
8000336e:	fe 79 08 00 	mov	r9,-63488
80003372:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003376:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80003378:	48 69       	lddpc	r9,80003390 <INTC_register_interrupt+0x6c>
8000337a:	48 aa       	lddpc	r10,800033a0 <INTC_register_interrupt+0x7c>
8000337c:	12 1a       	sub	r10,r9
8000337e:	ea 1a c0 00 	orh	r10,0xc000
80003382:	fe 79 08 00 	mov	r9,-63488
80003386:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000338a:	5e fc       	retal	r12
8000338c:	80 00       	ld.sh	r0,r0[0x0]
8000338e:	d4 88       	*unknown*
80003390:	80 00       	ld.sh	r0,r0[0x0]
80003392:	d2 00       	acall	0x20
80003394:	80 00       	ld.sh	r0,r0[0x0]
80003396:	d3 04       	*unknown*
80003398:	80 00       	ld.sh	r0,r0[0x0]
8000339a:	d3 12       	popm	r0-r3,r11-r12
8000339c:	80 00       	ld.sh	r0,r0[0x0]
8000339e:	d3 20       	acall	0x32
800033a0:	80 00       	ld.sh	r0,r0[0x0]
800033a2:	d3 2e       	*unknown*

800033a4 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800033a4:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800033a6:	49 18       	lddpc	r8,800033e8 <INTC_init_interrupts+0x44>
800033a8:	e3 b8 00 01 	mtsr	0x4,r8
800033ac:	49 0e       	lddpc	lr,800033ec <INTC_init_interrupts+0x48>
800033ae:	30 07       	mov	r7,0
800033b0:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800033b2:	49 0c       	lddpc	r12,800033f0 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800033b4:	49 05       	lddpc	r5,800033f4 <INTC_init_interrupts+0x50>
800033b6:	10 15       	sub	r5,r8
800033b8:	fe 76 08 00 	mov	r6,-63488
800033bc:	c1 08       	rjmp	800033dc <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800033be:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
800033c0:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800033c2:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800033c4:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800033c8:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800033ca:	10 3a       	cp.w	r10,r8
800033cc:	fe 9b ff fc 	brhi	800033c4 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800033d0:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800033d4:	2f f7       	sub	r7,-1
800033d6:	2f 8e       	sub	lr,-8
800033d8:	59 47       	cp.w	r7,20
800033da:	c0 50       	breq	800033e4 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800033dc:	7c 08       	ld.w	r8,lr[0x0]
800033de:	58 08       	cp.w	r8,0
800033e0:	ce f1       	brne	800033be <INTC_init_interrupts+0x1a>
800033e2:	cf 7b       	rjmp	800033d0 <INTC_init_interrupts+0x2c>
800033e4:	d8 22       	popm	r4-r7,pc
800033e6:	00 00       	add	r0,r0
800033e8:	80 00       	ld.sh	r0,r0[0x0]
800033ea:	d2 00       	acall	0x20
800033ec:	80 00       	ld.sh	r0,r0[0x0]
800033ee:	d4 88       	*unknown*
800033f0:	80 00       	ld.sh	r0,r0[0x0]
800033f2:	33 22       	mov	r2,50
800033f4:	80 00       	ld.sh	r0,r0[0x0]
800033f6:	d3 04       	*unknown*

800033f8 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800033f8:	fe 78 08 00 	mov	r8,-63488
800033fc:	e0 69 00 83 	mov	r9,131
80003400:	f2 0c 01 0c 	sub	r12,r9,r12
80003404:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80003408:	f2 ca ff c0 	sub	r10,r9,-64
8000340c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003410:	58 08       	cp.w	r8,0
80003412:	c0 21       	brne	80003416 <_get_interrupt_handler+0x1e>
80003414:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003416:	f0 08 12 00 	clz	r8,r8
8000341a:	48 5a       	lddpc	r10,8000342c <_get_interrupt_handler+0x34>
8000341c:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003420:	f0 08 11 1f 	rsub	r8,r8,31
80003424:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003426:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000342a:	5e fc       	retal	r12
8000342c:	80 00       	ld.sh	r0,r0[0x0]
8000342e:	d4 88       	*unknown*

80003430 <udd_set_address>:
}


void udd_set_address(uint8_t address)
{
	udd_disable_address();
80003430:	fe 68 00 00 	mov	r8,-131072
80003434:	70 09       	ld.w	r9,r8[0x0]
80003436:	a7 d9       	cbr	r9,0x7
80003438:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
8000343a:	70 09       	ld.w	r9,r8[0x0]
8000343c:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80003440:	e0 19 ff 80 	andl	r9,0xff80
80003444:	f9 e9 10 09 	or	r9,r12,r9
80003448:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000344a:	70 09       	ld.w	r9,r8[0x0]
8000344c:	a7 b9       	sbr	r9,0x7
8000344e:	91 09       	st.w	r8[0x0],r9
}
80003450:	5e fc       	retal	r12

80003452 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
80003452:	fe 68 00 00 	mov	r8,-131072
80003456:	70 0c       	ld.w	r12,r8[0x0]
}
80003458:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8000345c:	5e fc       	retal	r12

8000345e <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
8000345e:	fe 68 00 20 	mov	r8,-131040
80003462:	70 0c       	ld.w	r12,r8[0x0]
}
80003464:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
80003468:	5e fc       	retal	r12
8000346a:	d7 03       	nop

8000346c <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
8000346c:	48 28       	lddpc	r8,80003474 <udd_set_setup_payload+0x8>
8000346e:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
80003470:	b0 6b       	st.h	r8[0xc],r11
}
80003472:	5e fc       	retal	r12
80003474:	00 00       	add	r0,r0
80003476:	0b a8       	ld.ub	r8,r5[0x2]

80003478 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80003478:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
8000347c:	a3 68       	lsl	r8,0x2
8000347e:	e0 38 fe 40 	sub	r8,130624
80003482:	70 0c       	ld.w	r12,r8[0x0]
}
80003484:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80003488:	5e fc       	retal	r12
8000348a:	d7 03       	nop

8000348c <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
8000348c:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000348e:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index) {
80003492:	30 29       	mov	r9,2
80003494:	f2 08 18 00 	cp.b	r8,r9
80003498:	e0 8b 00 49 	brhi	8000352a <udd_ep_set_halt+0x9e>
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
8000349c:	f0 09 15 02 	lsl	r9,r8,0x2
800034a0:	fe 6e 01 c0 	mov	lr,-130624
800034a4:	f2 0e 00 0a 	add	r10,r9,lr
800034a8:	74 0a       	ld.w	r10,r10[0x0]
800034aa:	e6 1a 00 08 	andh	r10,0x8,COH
800034ae:	c3 f1       	brne	8000352c <udd_ep_set_halt+0xa0>

	if (USB_DEVICE_MAX_EP < index) {
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];
800034b0:	f0 ca 00 01 	sub	r10,r8,1
800034b4:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
800034b8:	49 eb       	lddpc	r11,80003530 <udd_ep_set_halt+0xa4>
800034ba:	f6 0a 00 2a 	add	r10,r11,r10<<0x2

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
800034be:	74 0b       	ld.w	r11,r10[0x0]
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
800034c0:	16 9e       	mov	lr,r11
800034c2:	e6 1e 20 00 	andh	lr,0x2000,COH
800034c6:	c3 31       	brne	8000352c <udd_ep_set_halt+0xa0>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
800034c8:	58 0b       	cp.w	r11,0
800034ca:	c3 05       	brlt	8000352a <udd_ep_set_halt+0x9e>
		return false; // Job on going, stall impossible
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
800034cc:	30 0b       	mov	r11,0
800034ce:	f6 0c 18 00 	cp.b	r12,r11
800034d2:	c1 94       	brge	80003504 <udd_ep_set_halt+0x78>
800034d4:	fe 6c 01 30 	mov	r12,-130768
800034d8:	f2 0c 00 0b 	add	r11,r9,r12
800034dc:	76 0b       	ld.w	r11,r11[0x0]
800034de:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
800034e2:	c1 10       	breq	80003504 <udd_ep_set_halt+0x78>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
800034e4:	74 0b       	ld.w	r11,r10[0x0]
800034e6:	30 1c       	mov	r12,1
800034e8:	f7 dc d3 a1 	bfins	r11,r12,0x1d,0x1
800034ec:	95 0b       	st.w	r10[0x0],r11
			udd_enable_bank_interrupt(index);
800034ee:	e0 39 fe 10 	sub	r9,130576
800034f2:	e0 6a 10 00 	mov	r10,4096
800034f6:	93 0a       	st.w	r9[0x0],r10
			udd_enable_endpoint_interrupt(index);
800034f8:	f4 08 09 48 	lsl	r8,r10,r8
800034fc:	fe 69 00 00 	mov	r9,-131072
80003500:	93 68       	st.w	r9[0x18],r8
			return true;
80003502:	d8 02       	popm	pc
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
80003504:	fe 6a 01 00 	mov	r10,-130816
80003508:	f2 0a 00 08 	add	r8,r9,r10
8000350c:	70 0a       	ld.w	r10,r8[0x0]
8000350e:	a9 da       	cbr	r10,0x9
80003510:	91 0a       	st.w	r8[0x0],r10
	udd_ack_stall(index);
80003512:	fe 6e 01 60 	mov	lr,-130720
80003516:	f2 0e 00 08 	add	r8,r9,lr
8000351a:	34 0a       	mov	r10,64
8000351c:	91 0a       	st.w	r8[0x0],r10
	udd_enable_stall_handshake(index);
8000351e:	e0 39 fe 10 	sub	r9,130576
80003522:	e8 68 00 00 	mov	r8,524288
80003526:	93 08       	st.w	r9[0x0],r8
80003528:	da 0a       	popm	pc,r12=1
	return true;
8000352a:	d8 0a       	popm	pc,r12=0
8000352c:	da 0a       	popm	pc,r12=1
8000352e:	00 00       	add	r0,r0
80003530:	00 00       	add	r0,r0
80003532:	0a 18       	sub	r8,r5

80003534 <udd_ep_clear_halt>:
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80003534:	d4 01       	pushm	lr
	bool b_stall_cleared = false;
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80003536:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
8000353a:	30 28       	mov	r8,2
8000353c:	f0 0c 18 00 	cp.b	r12,r8
80003540:	e0 88 00 03 	brls	80003546 <udd_ep_clear_halt+0x12>
80003544:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
80003546:	18 99       	mov	r9,r12
80003548:	f8 c8 00 01 	sub	r8,r12,1
8000354c:	f0 08 00 28 	add	r8,r8,r8<<0x2
80003550:	4a aa       	lddpc	r10,800035f8 <udd_ep_clear_halt+0xc4>
80003552:	f4 08 00 28 	add	r8,r10,r8<<0x2

	if (ptr_job->stall_requested) {
80003556:	70 0a       	ld.w	r10,r8[0x0]
80003558:	e6 1a 20 00 	andh	r10,0x2000,COH
8000355c:	c0 31       	brne	80003562 <udd_ep_clear_halt+0x2e>
8000355e:	30 0b       	mov	r11,0
80003560:	c1 38       	rjmp	80003586 <udd_ep_clear_halt+0x52>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
80003562:	70 0a       	ld.w	r10,r8[0x0]
80003564:	30 0b       	mov	r11,0
80003566:	f5 db d3 a1 	bfins	r10,r11,0x1d,0x1
8000356a:	91 0a       	st.w	r8[0x0],r10
		udd_disable_bank_interrupt(ep);
8000356c:	f8 0b 15 02 	lsl	r11,r12,0x2
80003570:	e0 3b fd e0 	sub	r11,130528
80003574:	e0 6a 10 00 	mov	r10,4096
80003578:	97 0a       	st.w	r11[0x0],r10
		udd_disable_endpoint_interrupt(ep);
8000357a:	f4 0c 09 4c 	lsl	r12,r10,r12
8000357e:	fe 6b 00 00 	mov	r11,-131072
80003582:	97 5c       	st.w	r11[0x14],r12
80003584:	30 1b       	mov	r11,1
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
80003586:	a3 69       	lsl	r9,0x2
80003588:	fe 6c 01 c0 	mov	r12,-130624
8000358c:	f2 0c 00 0a 	add	r10,r9,r12
80003590:	74 0a       	ld.w	r10,r10[0x0]
80003592:	e6 1a 00 08 	andh	r10,0x8,COH
80003596:	c2 30       	breq	800035dc <udd_ep_clear_halt+0xa8>
		if (Is_udd_stall(ep)) {
80003598:	fe 6b 01 30 	mov	r11,-130768
8000359c:	f2 0b 00 0a 	add	r10,r9,r11
800035a0:	74 0a       	ld.w	r10,r10[0x0]
800035a2:	e2 1a 00 40 	andl	r10,0x40,COH
800035a6:	c0 e0       	breq	800035c2 <udd_ep_clear_halt+0x8e>
			udd_ack_stall(ep);
800035a8:	fe 6c 01 60 	mov	r12,-130720
800035ac:	f2 0c 00 0a 	add	r10,r9,r12
800035b0:	34 0b       	mov	r11,64
800035b2:	95 0b       	st.w	r10[0x0],r11
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
800035b4:	fe 6b 01 f0 	mov	r11,-130576
800035b8:	f2 0b 00 0a 	add	r10,r9,r11
800035bc:	e4 6b 00 00 	mov	r11,262144
800035c0:	95 0b       	st.w	r10[0x0],r11
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
800035c2:	fe 6c 02 20 	mov	r12,-130528
800035c6:	f2 0c 00 0a 	add	r10,r9,r12
800035ca:	e8 6b 00 00 	mov	r11,524288
800035ce:	95 0b       	st.w	r10[0x0],r11
		udd_enable_endpoint_bank_autoswitch(ep);
800035d0:	e0 39 ff 00 	sub	r9,130816
800035d4:	72 0a       	ld.w	r10,r9[0x0]
800035d6:	a9 ba       	sbr	r10,0x9
800035d8:	93 0a       	st.w	r9[0x0],r10
800035da:	c0 38       	rjmp	800035e0 <udd_ep_clear_halt+0xac>
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
800035dc:	58 0b       	cp.w	r11,0
800035de:	c0 b0       	breq	800035f4 <udd_ep_clear_halt+0xc0>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
800035e0:	70 09       	ld.w	r9,r8[0x0]
800035e2:	58 09       	cp.w	r9,0
800035e4:	c0 84       	brge	800035f4 <udd_ep_clear_halt+0xc0>
			ptr_job->busy = false;
800035e6:	30 0a       	mov	r10,0
800035e8:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
800035ec:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
800035ee:	70 48       	ld.w	r8,r8[0x10]
800035f0:	5d 18       	icall	r8
800035f2:	da 0a       	popm	pc,r12=1
800035f4:	da 0a       	popm	pc,r12=1
800035f6:	00 00       	add	r0,r0
800035f8:	00 00       	add	r0,r0
800035fa:	0a 18       	sub	r8,r5

800035fc <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
800035fc:	30 59       	mov	r9,5
800035fe:	48 58       	lddpc	r8,80003610 <udd_ctrl_stall_data+0x14>
80003600:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80003602:	e8 69 00 00 	mov	r9,524288
80003606:	fe 68 01 f0 	mov	r8,-130576
8000360a:	91 09       	st.w	r8[0x0],r9
}
8000360c:	5e fc       	retal	r12
8000360e:	00 00       	add	r0,r0
80003610:	00 00       	add	r0,r0
80003612:	0a 44       	or	r4,r5

80003614 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
80003614:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80003616:	48 48       	lddpc	r8,80003624 <udd_ctrl_endofrequest+0x10>
80003618:	70 48       	ld.w	r8,r8[0x10]
8000361a:	58 08       	cp.w	r8,0
8000361c:	c0 20       	breq	80003620 <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
8000361e:	5d 18       	icall	r8
80003620:	d8 02       	popm	pc
80003622:	00 00       	add	r0,r0
80003624:	00 00       	add	r0,r0
80003626:	0b a8       	ld.ub	r8,r5[0x2]

80003628 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
80003628:	d4 01       	pushm	lr
8000362a:	16 99       	mov	r9,r11
	if (ptr_job->busy == false) {
8000362c:	78 08       	ld.w	r8,r12[0x0]
8000362e:	58 08       	cp.w	r8,0
80003630:	c1 84       	brge	80003660 <udd_ep_finish_job+0x38>
		return; // No on-going job
	}
	ptr_job->busy = false;
80003632:	30 0b       	mov	r11,0
80003634:	f1 db d3 e1 	bfins	r8,r11,0x1f,0x1
80003638:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans) {
8000363a:	78 48       	ld.w	r8,r12[0x10]
8000363c:	58 08       	cp.w	r8,0
8000363e:	c1 10       	breq	80003660 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
80003640:	f4 0b 15 02 	lsl	r11,r10,0x2
80003644:	e0 3b ff 00 	sub	r11,130816
80003648:	76 0b       	ld.w	r11,r11[0x0]
8000364a:	e2 1b 01 00 	andl	r11,0x100,COH
8000364e:	c0 60       	breq	8000365a <udd_ep_finish_job+0x32>
		ep_num |= USB_EP_DIR_IN;
80003650:	ea 1a ff ff 	orh	r10,0xffff
80003654:	e8 1a ff 80 	orl	r10,0xff80
80003658:	5c 5a       	castu.b	r10
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
8000365a:	78 2b       	ld.w	r11,r12[0x8]
8000365c:	12 9c       	mov	r12,r9
8000365e:	5d 18       	icall	r8
80003660:	d8 02       	popm	pc
80003662:	d7 03       	nop

80003664 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
80003664:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
80003666:	f5 dc c0 04 	bfextu	r10,r12,0x0,0x4

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
8000366a:	f4 cc 00 01 	sub	r12,r10,1
8000366e:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80003672:	30 1b       	mov	r11,1
80003674:	48 38       	lddpc	r8,80003680 <udd_ep_abort_job+0x1c>
80003676:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
8000367a:	f0 1f 00 03 	mcall	80003684 <udd_ep_abort_job+0x20>
}
8000367e:	d8 02       	popm	pc
80003680:	00 00       	add	r0,r0
80003682:	0a 18       	sub	r8,r5
80003684:	80 00       	ld.sh	r0,r0[0x0]
80003686:	36 28       	mov	r8,98

80003688 <udd_ep_abort>:
	return true;
}


void udd_ep_abort(udd_ep_id_t ep)
{
80003688:	d4 01       	pushm	lr
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000368a:	f3 dc c0 04 	bfextu	r9,r12,0x0,0x4

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
8000368e:	f2 c8 00 01 	sub	r8,r9,1
80003692:	fc 1a 02 00 	movh	r10,0x200
80003696:	f4 08 09 4a 	lsl	r10,r10,r8
8000369a:	fe 68 00 00 	mov	r8,-131072
8000369e:	91 5a       	st.w	r8[0x14],r10
	udd_endpoint_dma_set_control(index, 0);
800036a0:	f2 0a 15 04 	lsl	r10,r9,0x4
800036a4:	e0 3a fd 00 	sub	r10,130304
800036a8:	30 0b       	mov	r11,0
800036aa:	95 2b       	st.w	r10[0x8],r11
	// Kill banks
	udd_disable_endpoint_interrupt(index);
800036ac:	e0 6a 10 00 	mov	r10,4096
800036b0:	f4 09 09 4a 	lsl	r10,r10,r9
800036b4:	91 5a       	st.w	r8[0x14],r10
	while (udd_nb_busy_bank(index)) {
800036b6:	a3 69       	lsl	r9,0x2
800036b8:	fe 68 01 30 	mov	r8,-130768
800036bc:	f2 08 00 0a 	add	r10,r9,r8
		udd_kill_last_in_bank(index);
800036c0:	fe 68 01 f0 	mov	r8,-130576
800036c4:	f2 08 00 0e 	add	lr,r9,r8
800036c8:	e0 6b 20 00 	mov	r11,8192
		while(Is_udd_killing_last_in_bank(index));
800036cc:	e0 39 fe 40 	sub	r9,130624
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
800036d0:	c0 68       	rjmp	800036dc <udd_ep_abort+0x54>
		udd_kill_last_in_bank(index);
800036d2:	9d 0b       	st.w	lr[0x0],r11
		while(Is_udd_killing_last_in_bank(index));
800036d4:	72 08       	ld.w	r8,r9[0x0]
800036d6:	e2 18 20 00 	andl	r8,0x2000,COH
800036da:	cf d1       	brne	800036d4 <udd_ep_abort+0x4c>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
800036dc:	74 08       	ld.w	r8,r10[0x0]
800036de:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
800036e2:	cf 81       	brne	800036d2 <udd_ep_abort+0x4a>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
800036e4:	f0 1f 00 02 	mcall	800036ec <udd_ep_abort+0x64>
}
800036e8:	d8 02       	popm	pc
800036ea:	00 00       	add	r0,r0
800036ec:	80 00       	ld.sh	r0,r0[0x0]
800036ee:	36 64       	mov	r4,102

800036f0 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
800036f0:	eb cd 40 80 	pushm	r7,lr
	uint8_t index = ep & USB_EP_ADDR_MASK;
800036f4:	ef dc c0 04 	bfextu	r7,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index) {
800036f8:	30 28       	mov	r8,2
800036fa:	f0 07 18 00 	cp.b	r7,r8
800036fe:	e0 8b 00 1f 	brhi	8000373c <udd_ep_free+0x4c>
		return;
	}
	udd_disable_endpoint(index);
80003702:	fe 68 00 00 	mov	r8,-131072
80003706:	70 7a       	ld.w	r10,r8[0x1c]
80003708:	30 19       	mov	r9,1
8000370a:	f2 07 09 49 	lsl	r9,r9,r7
8000370e:	5c d9       	com	r9
80003710:	14 69       	and	r9,r10
80003712:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
80003714:	ee 08 15 02 	lsl	r8,r7,0x2
80003718:	e0 38 ff 00 	sub	r8,130816
8000371c:	70 09       	ld.w	r9,r8[0x0]
8000371e:	a1 d9       	cbr	r9,0x1
80003720:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
80003722:	f0 1f 00 08 	mcall	80003740 <udd_ep_free+0x50>
	udd_ep_job[index - 1].stall_requested = false;
80003726:	20 17       	sub	r7,1
80003728:	ee 07 00 27 	add	r7,r7,r7<<0x2
8000372c:	48 68       	lddpc	r8,80003744 <udd_ep_free+0x54>
8000372e:	f0 07 00 27 	add	r7,r8,r7<<0x2
80003732:	6e 08       	ld.w	r8,r7[0x0]
80003734:	30 09       	mov	r9,0
80003736:	f1 d9 d3 a1 	bfins	r8,r9,0x1d,0x1
8000373a:	8f 08       	st.w	r7[0x0],r8
8000373c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003740:	80 00       	ld.sh	r0,r0[0x0]
80003742:	36 64       	mov	r4,102
80003744:	00 00       	add	r0,r0
80003746:	0a 18       	sub	r8,r5

80003748 <udd_ep_trans_done>:
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

static void udd_ep_trans_done(udd_ep_id_t ep)
{
80003748:	eb cd 40 c0 	pushm	r6-r7,lr
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
8000374c:	18 99       	mov	r9,r12
8000374e:	f8 c8 00 01 	sub	r8,r12,1
80003752:	f0 08 00 28 	add	r8,r8,r8<<0x2
80003756:	4d 1a       	lddpc	r10,80003898 <udd_ep_trans_done+0x150>
80003758:	f4 08 00 28 	add	r8,r10,r8<<0x2

	if (!ptr_job->busy) {
8000375c:	70 0a       	ld.w	r10,r8[0x0]
8000375e:	58 0a       	cp.w	r10,0
80003760:	e0 84 00 99 	brge	80003892 <udd_ep_trans_done+0x14a>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80003764:	70 3a       	ld.w	r10,r8[0xc]
80003766:	70 2b       	ld.w	r11,r8[0x8]
80003768:	16 3a       	cp.w	r10,r11
8000376a:	c6 10       	breq	8000382c <udd_ep_trans_done+0xe4>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
8000376c:	f6 0a 01 0a 	sub	r10,r11,r10

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80003770:	e0 5a 00 00 	cp.w	r10,65536
80003774:	e0 88 00 06 	brls	80003780 <udd_ep_trans_done+0x38>
80003778:	e0 7a 00 00 	mov	r10,65536
8000377c:	30 0e       	mov	lr,0
8000377e:	c0 38       	rjmp	80003784 <udd_ep_trans_done+0x3c>
			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
80003780:	f4 0e 15 10 	lsl	lr,r10,0x10
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
80003784:	f2 0b 15 02 	lsl	r11,r9,0x2
80003788:	e0 3b ff 00 	sub	r11,130816
8000378c:	76 07       	ld.w	r7,r11[0x0]
8000378e:	e2 17 01 00 	andl	r7,0x100,COH
80003792:	c1 20       	breq	800037b6 <udd_ep_trans_done+0x6e>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
80003794:	76 0b       	ld.w	r11,r11[0x0]
80003796:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
8000379a:	30 87       	mov	r7,8
8000379c:	ee 0b 09 4b 	lsl	r11,r7,r11
800037a0:	20 1b       	sub	r11,1
800037a2:	f5 eb 00 0b 	and	r11,r10,r11
800037a6:	c1 80       	breq	800037d6 <udd_ep_trans_done+0x8e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
800037a8:	0e 4e       	or	lr,r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
800037aa:	70 0b       	ld.w	r11,r8[0x0]
800037ac:	30 07       	mov	r7,0
800037ae:	f7 d7 d3 c1 	bfins	r11,r7,0x1e,0x1
800037b2:	91 0b       	st.w	r8[0x0],r11
800037b4:	c1 18       	rjmp	800037d6 <udd_ep_trans_done+0x8e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
800037b6:	76 07       	ld.w	r7,r11[0x0]
800037b8:	ef d7 c1 62 	bfextu	r7,r7,0xb,0x2
800037bc:	58 17       	cp.w	r7,1
800037be:	c0 a1       	brne	800037d2 <udd_ep_trans_done+0x8a>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
800037c0:	76 0b       	ld.w	r11,r11[0x0]
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
800037c2:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
800037c6:	30 87       	mov	r7,8
800037c8:	ee 0b 09 4b 	lsl	r11,r7,r11
800037cc:	16 3a       	cp.w	r10,r11
800037ce:	e0 8b 00 04 	brhi	800037d6 <udd_ep_trans_done+0x8e>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
800037d2:	e8 1e 00 14 	orl	lr,0x14
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
800037d6:	f2 0b 15 04 	lsl	r11,r9,0x4
800037da:	e0 3b fd 00 	sub	r11,130304
800037de:	70 16       	ld.w	r6,r8[0x4]
800037e0:	70 37       	ld.w	r7,r8[0xc]
800037e2:	ec 07 00 07 	add	r7,r6,r7
800037e6:	97 17       	st.w	r11[0x4],r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800037e8:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
800037ec:	d3 03       	ssrf	0x10
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if ( !(udd_endpoint_dma_get_status(ep)
800037ee:	76 37       	ld.w	r7,r11[0xc]
800037f0:	e2 17 00 10 	andl	r7,0x10,COH
800037f4:	c1 61       	brne	80003820 <udd_ep_trans_done+0xd8>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800037f6:	e8 1e 00 21 	orl	lr,0x21
		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if ( !(udd_endpoint_dma_get_status(ep)
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
800037fa:	97 2e       	st.w	r11[0x8],lr
			ptr_job->nb_trans += next_trans;
800037fc:	70 39       	ld.w	r9,r8[0xc]
800037fe:	f2 0a 00 0a 	add	r10,r9,r10
80003802:	91 3a       	st.w	r8[0xc],r10
			udd_enable_endpoint_dma_interrupt(ep);
80003804:	20 1c       	sub	r12,1
80003806:	fc 18 02 00 	movh	r8,0x200
8000380a:	f0 0c 09 4c 	lsl	r12,r8,r12
8000380e:	fe 68 00 00 	mov	r8,-131072
80003812:	91 6c       	st.w	r8[0x18],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003814:	e6 16 00 01 	andh	r6,0x1,COH
80003818:	c0 21       	brne	8000381c <udd_ep_trans_done+0xd4>
      cpu_irq_enable();
8000381a:	d5 03       	csrf	0x10
			cpu_irq_restore(flags);
			return;
8000381c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003820:	e6 16 00 01 	andh	r6,0x1,COH
80003824:	c0 21       	brne	80003828 <udd_ep_trans_done+0xe0>
      cpu_irq_enable();
80003826:	d5 03       	csrf	0x10
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80003828:	70 3a       	ld.w	r10,r8[0xc]
8000382a:	91 2a       	st.w	r8[0x8],r10
	}
	if (Is_udd_endpoint_in(ep)) {
8000382c:	a3 69       	lsl	r9,0x2
8000382e:	fe 6b 01 00 	mov	r11,-130816
80003832:	f2 0b 00 0a 	add	r10,r9,r11
80003836:	74 0a       	ld.w	r10,r10[0x0]
80003838:	e2 1a 01 00 	andl	r10,0x100,COH
8000383c:	c2 60       	breq	80003888 <udd_ep_trans_done+0x140>
		if (ptr_job->b_shortpacket) {
8000383e:	70 0a       	ld.w	r10,r8[0x0]
80003840:	e6 1a 40 00 	andh	r10,0x4000,COH
80003844:	c2 20       	breq	80003888 <udd_ep_trans_done+0x140>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
80003846:	fe 6a 01 60 	mov	r10,-130720
8000384a:	f2 0a 00 08 	add	r8,r9,r10
8000384e:	30 1a       	mov	r10,1
80003850:	91 0a       	st.w	r8[0x0],r10
			if (Is_udd_write_enabled(ep)) {
80003852:	fe 6b 01 30 	mov	r11,-130768
80003856:	f2 0b 00 08 	add	r8,r9,r11
8000385a:	70 08       	ld.w	r8,r8[0x0]
8000385c:	e6 18 00 01 	andh	r8,0x1,COH
80003860:	c0 70       	breq	8000386e <udd_ep_trans_done+0x126>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
80003862:	fe 6a 01 90 	mov	r10,-130672
80003866:	f2 0a 00 08 	add	r8,r9,r10
8000386a:	30 1a       	mov	r10,1
8000386c:	91 0a       	st.w	r8[0x0],r10
			}
			udd_enable_in_send_interrupt(ep);
8000386e:	e0 39 fe 10 	sub	r9,130576
80003872:	30 18       	mov	r8,1
80003874:	93 08       	st.w	r9[0x0],r8
			udd_enable_endpoint_interrupt(ep);
80003876:	e0 68 10 00 	mov	r8,4096
8000387a:	f0 0c 09 4c 	lsl	r12,r8,r12
8000387e:	fe 68 00 00 	mov	r8,-131072
80003882:	91 6c       	st.w	r8[0x18],r12
			return;
80003884:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
80003888:	18 9a       	mov	r10,r12
8000388a:	30 0b       	mov	r11,0
8000388c:	10 9c       	mov	r12,r8
8000388e:	f0 1f 00 04 	mcall	8000389c <udd_ep_trans_done+0x154>
80003892:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003896:	00 00       	add	r0,r0
80003898:	00 00       	add	r0,r0
8000389a:	0a 18       	sub	r8,r5
8000389c:	80 00       	ld.sh	r0,r0[0x0]
8000389e:	36 28       	mov	r8,98

800038a0 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
800038a0:	eb cd 40 e0 	pushm	r5-r7,lr
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
800038a4:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep) {
800038a8:	30 2e       	mov	lr,2
800038aa:	fc 0c 18 00 	cp.b	r12,lr
800038ae:	e0 8b 00 40 	brhi	8000392e <udd_ep_run+0x8e>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800038b2:	fe 6e 00 00 	mov	lr,-131072
800038b6:	7c 77       	ld.w	r7,lr[0x1c]
800038b8:	18 96       	mov	r6,r12
800038ba:	30 1e       	mov	lr,1
800038bc:	fc 0c 09 4e 	lsl	lr,lr,r12
800038c0:	0e 6e       	and	lr,r7
800038c2:	c3 60       	breq	8000392e <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
800038c4:	f8 0e 15 02 	lsl	lr,r12,0x2
800038c8:	e0 3e fe 40 	sub	lr,130624
800038cc:	7c 0e       	ld.w	lr,lr[0x0]
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800038ce:	e6 1e 00 08 	andh	lr,0x8,COH
800038d2:	c2 e1       	brne	8000392e <udd_ep_run+0x8e>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
800038d4:	20 1c       	sub	r12,1
800038d6:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
800038da:	49 77       	lddpc	r7,80003934 <udd_ep_run+0x94>
800038dc:	ee 0c 00 2e 	add	lr,r7,r12<<0x2

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
800038e0:	7c 0c       	ld.w	r12,lr[0x0]
800038e2:	e6 1c 20 00 	andh	r12,0x2000,COH
800038e6:	c2 41       	brne	8000392e <udd_ep_run+0x8e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800038e8:	e1 bc 00 00 	mfsr	r12,0x0
	cpu_irq_disable();
800038ec:	d3 03       	ssrf	0x10
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
800038ee:	7c 07       	ld.w	r7,lr[0x0]
800038f0:	58 07       	cp.w	r7,0
800038f2:	c0 74       	brge	80003900 <udd_ep_run+0x60>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800038f4:	e6 1c 00 01 	andh	r12,0x1,COH
800038f8:	c0 21       	brne	800038fc <udd_ep_run+0x5c>
      cpu_irq_enable();
800038fa:	d5 03       	csrf	0x10
   }

	barrier();
800038fc:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
80003900:	7c 07       	ld.w	r7,lr[0x0]
80003902:	30 15       	mov	r5,1
80003904:	ef d5 d3 e1 	bfins	r7,r5,0x1f,0x1
80003908:	9d 07       	st.w	lr[0x0],r7
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000390a:	e6 1c 00 01 	andh	r12,0x1,COH
8000390e:	c0 21       	brne	80003912 <udd_ep_run+0x72>
      cpu_irq_enable();
80003910:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
80003912:	9d 1a       	st.w	lr[0x4],r10
	ptr_job->buf_size = buf_size;
80003914:	9d 29       	st.w	lr[0x8],r9
	ptr_job->nb_trans = 0;
80003916:	30 09       	mov	r9,0
80003918:	9d 39       	st.w	lr[0xc],r9
	ptr_job->call_trans = callback;
8000391a:	9d 48       	st.w	lr[0x10],r8
	ptr_job->b_shortpacket = b_shortpacket;
8000391c:	7c 08       	ld.w	r8,lr[0x0]
8000391e:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
80003922:	9d 08       	st.w	lr[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
80003924:	0c 9c       	mov	r12,r6
80003926:	f0 1f 00 05 	mcall	80003938 <udd_ep_run+0x98>
8000392a:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
8000392e:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003932:	00 00       	add	r0,r0
80003934:	00 00       	add	r0,r0
80003936:	0a 18       	sub	r8,r5
80003938:	80 00       	ld.sh	r0,r0[0x0]
8000393a:	37 48       	mov	r8,116

8000393c <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
8000393c:	58 0c       	cp.w	r12,0
8000393e:	c1 b1       	brne	80003974 <udd_sleep_mode+0x38>
80003940:	49 b8       	lddpc	r8,800039ac <udd_sleep_mode+0x70>
80003942:	11 89       	ld.ub	r9,r8[0x0]
80003944:	30 08       	mov	r8,0
80003946:	f0 09 18 00 	cp.b	r9,r8
8000394a:	c2 e0       	breq	800039a6 <udd_sleep_mode+0x6a>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
8000394c:	49 98       	lddpc	r8,800039b0 <udd_sleep_mode+0x74>
8000394e:	11 99       	ld.ub	r9,r8[0x1]
80003950:	30 08       	mov	r8,0
80003952:	f0 09 18 00 	cp.b	r9,r8
80003956:	c0 21       	brne	8000395a <udd_sleep_mode+0x1e>
80003958:	c0 08       	rjmp	80003958 <udd_sleep_mode+0x1c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000395a:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000395e:	d3 03       	ssrf	0x10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80003960:	49 48       	lddpc	r8,800039b0 <udd_sleep_mode+0x74>
80003962:	11 9a       	ld.ub	r10,r8[0x1]
80003964:	20 1a       	sub	r10,1
80003966:	b0 9a       	st.b	r8[0x1],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003968:	12 98       	mov	r8,r9
8000396a:	e6 18 00 01 	andh	r8,0x1,COH
8000396e:	c0 21       	brne	80003972 <udd_sleep_mode+0x36>
      cpu_irq_enable();
80003970:	d5 03       	csrf	0x10
   }

	barrier();
80003972:	c1 a8       	rjmp	800039a6 <udd_sleep_mode+0x6a>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
80003974:	48 e8       	lddpc	r8,800039ac <udd_sleep_mode+0x70>
80003976:	11 89       	ld.ub	r9,r8[0x0]
80003978:	30 08       	mov	r8,0
8000397a:	f0 09 18 00 	cp.b	r9,r8
8000397e:	c1 41       	brne	800039a6 <udd_sleep_mode+0x6a>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
80003980:	48 c8       	lddpc	r8,800039b0 <udd_sleep_mode+0x74>
80003982:	11 99       	ld.ub	r9,r8[0x1]
80003984:	3f f8       	mov	r8,-1
80003986:	f0 09 18 00 	cp.b	r9,r8
8000398a:	c0 21       	brne	8000398e <udd_sleep_mode+0x52>
8000398c:	c0 08       	rjmp	8000398c <udd_sleep_mode+0x50>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000398e:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003992:	d3 03       	ssrf	0x10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80003994:	48 78       	lddpc	r8,800039b0 <udd_sleep_mode+0x74>
80003996:	11 9a       	ld.ub	r10,r8[0x1]
80003998:	2f fa       	sub	r10,-1
8000399a:	b0 9a       	st.b	r8[0x1],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000399c:	12 98       	mov	r8,r9
8000399e:	e6 18 00 01 	andh	r8,0x1,COH
800039a2:	c0 21       	brne	800039a6 <udd_sleep_mode+0x6a>
      cpu_irq_enable();
800039a4:	d5 03       	csrf	0x10
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
800039a6:	48 28       	lddpc	r8,800039ac <udd_sleep_mode+0x70>
800039a8:	b0 8c       	st.b	r8[0x0],r12
}
800039aa:	5e fc       	retal	r12
800039ac:	00 00       	add	r0,r0
800039ae:	0a 40       	or	r0,r5
800039b0:	00 00       	add	r0,r0
800039b2:	0b d4       	ld.ub	r4,r5[0x5]

800039b4 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
800039b4:	d4 01       	pushm	lr
	otg_unfreeze_clock();
800039b6:	fe 68 08 00 	mov	r8,-129024
800039ba:	70 09       	ld.w	r9,r8[0x0]
800039bc:	af c9       	cbr	r9,0xe
800039be:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
800039c0:	fe 69 00 00 	mov	r9,-131072
800039c4:	72 0a       	ld.w	r10,r9[0x0]
800039c6:	a9 aa       	sbr	r10,0x8
800039c8:	93 0a       	st.w	r9[0x0],r10
	otg_freeze_clock();
800039ca:	70 09       	ld.w	r9,r8[0x0]
800039cc:	af a9       	sbr	r9,0xe
800039ce:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
800039d0:	30 0c       	mov	r12,0
800039d2:	f0 1f 00 02 	mcall	800039d8 <udd_detach+0x24>
}
800039d6:	d8 02       	popm	pc
800039d8:	80 00       	ld.sh	r0,r0[0x0]
800039da:	39 3c       	mov	r12,-109

800039dc <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
800039dc:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800039e0:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
800039e4:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
800039e6:	30 1c       	mov	r12,1
800039e8:	f0 1f 00 19 	mcall	80003a4c <udd_attach+0x70>
	otg_unfreeze_clock();
800039ec:	fe 68 08 00 	mov	r8,-129024
800039f0:	70 09       	ld.w	r9,r8[0x0]
800039f2:	af c9       	cbr	r9,0xe
800039f4:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );
800039f6:	fe 68 08 04 	mov	r8,-129020
800039fa:	70 09       	ld.w	r9,r8[0x0]
800039fc:	e2 19 40 00 	andl	r9,0x4000,COH
80003a00:	cf d0       	breq	800039fa <udd_attach+0x1e>

	// Authorize attach if Vbus is present
	udd_attach_device();
80003a02:	fe 68 00 00 	mov	r8,-131072
80003a06:	70 09       	ld.w	r9,r8[0x0]
80003a08:	a9 c9       	cbr	r9,0x8
80003a0a:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
80003a0c:	fe 68 00 18 	mov	r8,-131048
80003a10:	30 8c       	mov	r12,8
80003a12:	91 0c       	st.w	r8[0x0],r12
	udd_enable_suspend_interrupt();
80003a14:	30 1a       	mov	r10,1
80003a16:	91 0a       	st.w	r8[0x0],r10
	udd_enable_wake_up_interrupt();
80003a18:	31 09       	mov	r9,16
80003a1a:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
80003a1c:	30 4b       	mov	r11,4
80003a1e:	91 0b       	st.w	r8[0x0],r11
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interrupts flag
	udd_ack_reset();
80003a20:	fe 68 00 08 	mov	r8,-131064
80003a24:	91 0c       	st.w	r8[0x0],r12
	udd_ack_sof();
80003a26:	91 0b       	st.w	r8[0x0],r11
	udd_ack_msof();
80003a28:	30 2b       	mov	r11,2
80003a2a:	91 0b       	st.w	r8[0x0],r11
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
80003a2c:	fe 6b 00 0c 	mov	r11,-131060
80003a30:	97 0a       	st.w	r11[0x0],r10
#endif
	udd_ack_wake_up();
80003a32:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80003a34:	fe 68 08 00 	mov	r8,-129024
80003a38:	70 09       	ld.w	r9,r8[0x0]
80003a3a:	af a9       	sbr	r9,0xe
80003a3c:	91 09       	st.w	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003a3e:	e6 17 00 01 	andh	r7,0x1,COH
80003a42:	c0 21       	brne	80003a46 <udd_attach+0x6a>
      cpu_irq_enable();
80003a44:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80003a46:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a4a:	00 00       	add	r0,r0
80003a4c:	80 00       	ld.sh	r0,r0[0x0]
80003a4e:	39 3c       	mov	r12,-109

80003a50 <udd_disable>:
	cpu_irq_restore(flags);
}


void udd_disable(void)
{
80003a50:	eb cd 40 80 	pushm	r7,lr
	irqflags_t flags;

#ifdef UHD_ENABLE
# ifdef USB_ID
	if (Is_otg_id_host()) {
80003a54:	fe 68 08 04 	mov	r8,-129020
80003a58:	70 08       	ld.w	r8,r8[0x0]
80003a5a:	e2 18 04 00 	andl	r8,0x400,COH
80003a5e:	c2 20       	breq	80003aa2 <udd_disable+0x52>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003a60:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80003a64:	d3 03       	ssrf	0x10
	}
# endif
#endif

	flags = cpu_irq_save();
	otg_unfreeze_clock();
80003a66:	fe 68 08 00 	mov	r8,-129024
80003a6a:	70 09       	ld.w	r9,r8[0x0]
80003a6c:	af c9       	cbr	r9,0xe
80003a6e:	91 09       	st.w	r8[0x0],r9
	udd_detach();
80003a70:	f0 1f 00 0e 	mcall	80003aa8 <udd_disable+0x58>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
80003a74:	48 e8       	lddpc	r8,80003aac <udd_disable+0x5c>
80003a76:	11 b9       	ld.ub	r9,r8[0x3]
80003a78:	30 08       	mov	r8,0
80003a7a:	f0 09 18 00 	cp.b	r9,r8
80003a7e:	c0 21       	brne	80003a82 <udd_disable+0x32>
80003a80:	c0 08       	rjmp	80003a80 <udd_disable+0x30>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003a82:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003a86:	d3 03       	ssrf	0x10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80003a88:	48 98       	lddpc	r8,80003aac <udd_disable+0x5c>
80003a8a:	11 ba       	ld.ub	r10,r8[0x3]
80003a8c:	20 1a       	sub	r10,1
80003a8e:	b0 ba       	st.b	r8[0x3],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003a90:	12 98       	mov	r8,r9
80003a92:	e6 18 00 01 	andh	r8,0x1,COH
80003a96:	c0 21       	brne	80003a9a <udd_disable+0x4a>
      cpu_irq_enable();
80003a98:	d5 03       	csrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003a9a:	e6 17 00 01 	andh	r7,0x1,COH
80003a9e:	c0 21       	brne	80003aa2 <udd_disable+0x52>
      cpu_irq_enable();
80003aa0:	d5 03       	csrf	0x10
   }

	barrier();
80003aa2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003aa6:	00 00       	add	r0,r0
80003aa8:	80 00       	ld.sh	r0,r0[0x0]
80003aaa:	39 b4       	mov	r4,-101
80003aac:	00 00       	add	r0,r0
80003aae:	0b d4       	ld.ub	r4,r5[0x5]

80003ab0 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80003ab0:	30 39       	mov	r9,3
80003ab2:	48 b8       	lddpc	r8,80003adc <udd_ctrl_send_zlp_in+0x2c>
80003ab4:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003ab6:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80003aba:	d3 03       	ssrf	0x10

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80003abc:	fe 6a 01 60 	mov	r10,-130720
80003ac0:	30 19       	mov	r9,1
80003ac2:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
80003ac4:	fe 68 01 f0 	mov	r8,-130576
80003ac8:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80003aca:	30 89       	mov	r9,8
80003acc:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
80003ace:	91 09       	st.w	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003ad0:	16 98       	mov	r8,r11
80003ad2:	e6 18 00 01 	andh	r8,0x1,COH
80003ad6:	c0 21       	brne	80003ada <udd_ctrl_send_zlp_in+0x2a>
      cpu_irq_enable();
80003ad8:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80003ada:	5e fc       	retal	r12
80003adc:	00 00       	add	r0,r0
80003ade:	0a 44       	or	r4,r5

80003ae0 <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003ae0:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80003ae4:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80003ae6:	30 1a       	mov	r10,1
80003ae8:	fe 69 02 20 	mov	r9,-130528
80003aec:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003aee:	e6 18 00 01 	andh	r8,0x1,COH
80003af2:	c0 21       	brne	80003af6 <udd_ctrl_init+0x16>
      cpu_irq_enable();
80003af4:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80003af6:	30 29       	mov	r9,2
80003af8:	fe 68 01 60 	mov	r8,-130720
80003afc:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
80003afe:	48 59       	lddpc	r9,80003b10 <udd_ctrl_init+0x30>
80003b00:	30 08       	mov	r8,0
80003b02:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80003b04:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
80003b06:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80003b08:	48 39       	lddpc	r9,80003b14 <udd_ctrl_init+0x34>
80003b0a:	93 08       	st.w	r9[0x0],r8
}
80003b0c:	5e fc       	retal	r12
80003b0e:	00 00       	add	r0,r0
80003b10:	00 00       	add	r0,r0
80003b12:	0b a8       	ld.ub	r8,r5[0x2]
80003b14:	00 00       	add	r0,r0
80003b16:	0a 44       	or	r4,r5

80003b18 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
80003b18:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003b1c:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80003b20:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
80003b22:	30 1a       	mov	r10,1
80003b24:	fe 69 02 20 	mov	r9,-130528
80003b28:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003b2a:	e6 18 00 01 	andh	r8,0x1,COH
80003b2e:	c0 21       	brne	80003b32 <udd_ctrl_in_sent+0x1a>
      cpu_irq_enable();
80003b30:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80003b32:	4c 38       	lddpc	r8,80003c3c <udd_ctrl_in_sent+0x124>
80003b34:	70 08       	ld.w	r8,r8[0x0]
80003b36:	58 38       	cp.w	r8,3
80003b38:	c0 71       	brne	80003b46 <udd_ctrl_in_sent+0x2e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80003b3a:	f0 1f 00 42 	mcall	80003c40 <udd_ctrl_in_sent+0x128>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80003b3e:	f0 1f 00 42 	mcall	80003c44 <udd_ctrl_in_sent+0x12c>
		return;
80003b42:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
80003b46:	4c 18       	lddpc	r8,80003c48 <udd_ctrl_in_sent+0x130>
80003b48:	90 08       	ld.sh	r8,r8[0x0]
80003b4a:	4c 19       	lddpc	r9,80003c4c <udd_ctrl_in_sent+0x134>
80003b4c:	92 67       	ld.sh	r7,r9[0xc]
80003b4e:	10 17       	sub	r7,r8
80003b50:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
80003b52:	c3 01       	brne	80003bb2 <udd_ctrl_in_sent+0x9a>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80003b54:	4b f9       	lddpc	r9,80003c50 <udd_ctrl_in_sent+0x138>
80003b56:	92 0a       	ld.sh	r10,r9[0x0]
80003b58:	f4 08 00 08 	add	r8,r10,r8
80003b5c:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
80003b5e:	4b c9       	lddpc	r9,80003c4c <udd_ctrl_in_sent+0x134>
80003b60:	92 39       	ld.sh	r9,r9[0x6]
80003b62:	f0 09 19 00 	cp.h	r9,r8
80003b66:	c0 70       	breq	80003b74 <udd_ctrl_in_sent+0x5c>
80003b68:	4b b8       	lddpc	r8,80003c54 <udd_ctrl_in_sent+0x13c>
80003b6a:	11 89       	ld.ub	r9,r8[0x0]
80003b6c:	30 08       	mov	r8,0
80003b6e:	f0 09 18 00 	cp.b	r9,r8
80003b72:	c1 50       	breq	80003b9c <udd_ctrl_in_sent+0x84>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80003b74:	30 49       	mov	r9,4
80003b76:	4b 28       	lddpc	r8,80003c3c <udd_ctrl_in_sent+0x124>
80003b78:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003b7a:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003b7e:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80003b80:	31 08       	mov	r8,16
80003b82:	fe 6a 01 60 	mov	r10,-130720
80003b86:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
80003b88:	fe 6a 01 f0 	mov	r10,-130576
80003b8c:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003b8e:	12 98       	mov	r8,r9
80003b90:	e6 18 00 01 	andh	r8,0x1,COH
80003b94:	c0 21       	brne	80003b98 <udd_ctrl_in_sent+0x80>
      cpu_irq_enable();
80003b96:	d5 03       	csrf	0x10
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
80003b98:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
80003b9c:	4a c8       	lddpc	r8,80003c4c <udd_ctrl_in_sent+0x134>
80003b9e:	70 5c       	ld.w	r12,r8[0x14]
80003ba0:	58 0c       	cp.w	r12,0
80003ba2:	c1 20       	breq	80003bc6 <udd_ctrl_in_sent+0xae>
80003ba4:	5d 1c       	icall	r12
80003ba6:	c1 00       	breq	80003bc6 <udd_ctrl_in_sent+0xae>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
80003ba8:	30 09       	mov	r9,0
80003baa:	4a 88       	lddpc	r8,80003c48 <udd_ctrl_in_sent+0x130>
80003bac:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
80003bae:	4a 88       	lddpc	r8,80003c4c <udd_ctrl_in_sent+0x134>
80003bb0:	90 67       	ld.sh	r7,r8[0xc]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
80003bb2:	30 78       	mov	r8,7
80003bb4:	f0 07 19 00 	cp.h	r7,r8
80003bb8:	e0 88 00 07 	brls	80003bc6 <udd_ctrl_in_sent+0xae>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
80003bbc:	30 09       	mov	r9,0
80003bbe:	4a 68       	lddpc	r8,80003c54 <udd_ctrl_in_sent+0x13c>
80003bc0:	b0 89       	st.b	r8[0x0],r9
80003bc2:	30 87       	mov	r7,8
80003bc4:	c0 48       	rjmp	80003bcc <udd_ctrl_in_sent+0xb4>
	} else {
		b_shortpacket = true;
80003bc6:	30 19       	mov	r9,1
80003bc8:	4a 38       	lddpc	r8,80003c54 <udd_ctrl_in_sent+0x13c>
80003bca:	b0 89       	st.b	r8[0x0],r9
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80003bcc:	4a 08       	lddpc	r8,80003c4c <udd_ctrl_in_sent+0x134>
80003bce:	70 2a       	ld.w	r10,r8[0x8]
80003bd0:	49 e8       	lddpc	r8,80003c48 <udd_ctrl_in_sent+0x130>
80003bd2:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003bd4:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80003bd8:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
80003bda:	fe 68 01 30 	mov	r8,-130768
80003bde:	70 08       	ld.w	r8,r8[0x0]
80003be0:	e2 18 00 02 	andl	r8,0x2,COH
80003be4:	c0 41       	brne	80003bec <udd_ctrl_in_sent+0xd4>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80003be6:	58 07       	cp.w	r7,0
80003be8:	c0 b1       	brne	80003bfe <udd_ctrl_in_sent+0xe6>
80003bea:	c1 68       	rjmp	80003c16 <udd_ctrl_in_sent+0xfe>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003bec:	e6 1b 00 01 	andh	r11,0x1,COH
80003bf0:	c0 21       	brne	80003bf4 <udd_ctrl_in_sent+0xdc>
      cpu_irq_enable();
80003bf2:	d5 03       	csrf	0x10
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80003bf4:	30 49       	mov	r9,4
80003bf6:	49 28       	lddpc	r8,80003c3c <udd_ctrl_in_sent+0x124>
80003bf8:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
80003bfa:	e3 cd 80 80 	ldm	sp++,r7,pc
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80003bfe:	5c 79       	castu.h	r9
80003c00:	f4 09 00 09 	add	r9,r10,r9
80003c04:	fc 18 e0 00 	movh	r8,0xe000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
80003c08:	13 3a       	ld.ub	r10,r9++
80003c0a:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80003c0c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80003c10:	ee 0a 19 00 	cp.h	r10,r7
80003c14:	cf a3       	brcs	80003c08 <udd_ctrl_in_sent+0xf0>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
80003c16:	48 d8       	lddpc	r8,80003c48 <udd_ctrl_in_sent+0x130>
80003c18:	90 09       	ld.sh	r9,r8[0x0]
80003c1a:	f2 07 00 07 	add	r7,r9,r7
80003c1e:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
80003c20:	30 18       	mov	r8,1
80003c22:	fe 69 01 60 	mov	r9,-130720
80003c26:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
80003c28:	fe 69 01 f0 	mov	r9,-130576
80003c2c:	93 08       	st.w	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003c2e:	e6 1b 00 01 	andh	r11,0x1,COH
80003c32:	c0 21       	brne	80003c36 <udd_ctrl_in_sent+0x11e>
      cpu_irq_enable();
80003c34:	d5 03       	csrf	0x10
   }

	barrier();
80003c36:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c3a:	00 00       	add	r0,r0
80003c3c:	00 00       	add	r0,r0
80003c3e:	0a 44       	or	r4,r5
80003c40:	80 00       	ld.sh	r0,r0[0x0]
80003c42:	36 14       	mov	r4,97
80003c44:	80 00       	ld.sh	r0,r0[0x0]
80003c46:	3a e0       	mov	r0,-82
80003c48:	00 00       	add	r0,r0
80003c4a:	0a 42       	or	r2,r5
80003c4c:	00 00       	add	r0,r0
80003c4e:	0b a8       	ld.ub	r8,r5[0x2]
80003c50:	00 00       	add	r0,r0
80003c52:	0a 14       	sub	r4,r5
80003c54:	00 00       	add	r0,r0
80003c56:	0a 48       	or	r8,r5

80003c58 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80003c58:	d4 31       	pushm	r0-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
80003c5a:	ef dc c0 04 	bfextu	r7,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP) {
80003c5e:	30 28       	mov	r8,2
80003c60:	f0 07 18 00 	cp.b	r7,r8
80003c64:	e0 8b 00 ae 	brhi	80003dc0 <udd_ep_alloc+0x168>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
80003c68:	fe 68 00 00 	mov	r8,-131072
80003c6c:	70 78       	ld.w	r8,r8[0x1c]
80003c6e:	30 15       	mov	r5,1
80003c70:	ea 07 09 45 	lsl	r5,r5,r7
80003c74:	eb e8 00 08 	and	r8,r5,r8
80003c78:	e0 81 00 a4 	brne	80003dc0 <udd_ep_alloc+0x168>
		return false;
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80003c7c:	f1 db c0 02 	bfextu	r8,r11,0x0,0x2
80003c80:	58 18       	cp.w	r8,1
80003c82:	e0 85 00 9f 	brlt	80003dc0 <udd_ep_alloc+0x168>
80003c86:	58 28       	cp.w	r8,2
80003c88:	e0 8a 00 07 	brle	80003c96 <udd_ep_alloc+0x3e>
80003c8c:	58 38       	cp.w	r8,3
80003c8e:	e0 81 00 99 	brne	80003dc0 <udd_ep_alloc+0x168>
80003c92:	30 09       	mov	r9,0
80003c94:	c0 28       	rjmp	80003c98 <udd_ep_alloc+0x40>
80003c96:	30 19       	mov	r9,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80003c98:	ee 08 15 02 	lsl	r8,r7,0x2
80003c9c:	e0 38 ff 00 	sub	r8,130816
80003ca0:	70 0e       	ld.w	lr,r8[0x0]
80003ca2:	5c 7a       	castu.h	r10
80003ca4:	30 86       	mov	r6,8
80003ca6:	f4 06 0c 4a 	max	r10,r10,r6
80003caa:	e0 66 04 00 	mov	r6,1024
80003cae:	f4 06 0d 4a 	min	r10,r10,r6
80003cb2:	a1 7a       	lsl	r10,0x1
80003cb4:	20 1a       	sub	r10,1
80003cb6:	f4 0a 12 00 	clz	r10,r10
80003cba:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
80003cbe:	ab 7b       	lsl	r11,0xb
80003cc0:	e2 1b 18 00 	andl	r11,0x1800,COH
80003cc4:	f7 ec 10 8b 	or	r11,r11,r12<<0x8
80003cc8:	f4 0c 11 1c 	rsub	r12,r10,28
80003ccc:	f7 ec 10 4c 	or	r12,r11,r12<<0x4
80003cd0:	f9 e9 10 29 	or	r9,r12,r9<<0x2
80003cd4:	e2 19 19 7c 	andl	r9,0x197c,COH
80003cd8:	1c 9a       	mov	r10,lr
80003cda:	e0 1a e6 83 	andl	r10,0xe683
80003cde:	14 49       	or	r9,r10
80003ce0:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80003ce2:	5c 85       	casts.h	r5

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80003ce4:	30 18       	mov	r8,1
80003ce6:	f0 07 18 00 	cp.b	r7,r8
80003cea:	e0 8b 00 1d 	brhi	80003d24 <udd_ep_alloc+0xcc>
80003cee:	fe 69 01 08 	mov	r9,-130808
80003cf2:	30 28       	mov	r8,2
		if (Is_udd_endpoint_enabled(i)) {
80003cf4:	fe 6b 00 00 	mov	r11,-131072
80003cf8:	30 1e       	mov	lr,1
80003cfa:	76 7c       	ld.w	r12,r11[0x1c]
80003cfc:	fc 08 09 4a 	lsl	r10,lr,r8
80003d00:	f5 ec 00 0c 	and	r12,r10,r12
80003d04:	c0 b0       	breq	80003d1a <udd_ep_alloc+0xc2>
			ep_allocated |= 1 << i;
80003d06:	f5 e5 10 05 	or	r5,r10,r5
80003d0a:	5c 85       	casts.h	r5
			udd_disable_endpoint(i);
80003d0c:	76 7c       	ld.w	r12,r11[0x1c]
80003d0e:	5c da       	com	r10
80003d10:	18 6a       	and	r10,r12
80003d12:	97 7a       	st.w	r11[0x1c],r10
			udd_unallocate_memory(i);
80003d14:	72 0a       	ld.w	r10,r9[0x0]
80003d16:	a1 da       	cbr	r10,0x1
80003d18:	93 0a       	st.w	r9[0x0],r10
80003d1a:	20 18       	sub	r8,1
80003d1c:	20 49       	sub	r9,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80003d1e:	f0 07 18 00 	cp.b	r7,r8
80003d22:	ce c3       	brcs	80003cfa <udd_ep_alloc+0xa2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
80003d24:	5c 75       	castu.h	r5
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
80003d26:	4a 83       	lddpc	r3,80003dc4 <udd_ep_alloc+0x16c>
			bool b_restart = ptr_job->busy;
			ptr_job->busy = false;
80003d28:	30 02       	mov	r2,0

			udd_allocate_memory(i);
			udd_enable_endpoint(i);
80003d2a:	fe 64 00 00 	mov	r4,-131072
80003d2e:	30 11       	mov	r1,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80003d30:	30 26       	mov	r6,2
		if (ep_allocated & (1 << i)) {
80003d32:	0e 9c       	mov	r12,r7
80003d34:	ea 07 08 48 	asr	r8,r5,r7
80003d38:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003d3c:	c3 b0       	breq	80003db2 <udd_ep_alloc+0x15a>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
80003d3e:	ee ce 00 01 	sub	lr,r7,1
80003d42:	fc 0e 00 2e 	add	lr,lr,lr<<0x2
80003d46:	e6 0e 00 2e 	add	lr,r3,lr<<0x2
			bool b_restart = ptr_job->busy;
80003d4a:	7c 0a       	ld.w	r10,lr[0x0]
			ptr_job->busy = false;
80003d4c:	14 98       	mov	r8,r10
80003d4e:	f1 d2 d3 e1 	bfins	r8,r2,0x1f,0x1
80003d52:	9d 08       	st.w	lr[0x0],r8

			udd_allocate_memory(i);
80003d54:	ee 08 15 02 	lsl	r8,r7,0x2
80003d58:	fe 6b 01 00 	mov	r11,-130816
80003d5c:	f0 0b 00 09 	add	r9,r8,r11
80003d60:	72 0b       	ld.w	r11,r9[0x0]
80003d62:	a1 bb       	sbr	r11,0x1
80003d64:	93 0b       	st.w	r9[0x0],r11
			udd_enable_endpoint(i);
80003d66:	68 7b       	ld.w	r11,r4[0x1c]
80003d68:	e2 07 09 40 	lsl	r0,r1,r7
80003d6c:	e1 eb 10 0b 	or	r11,r0,r11
80003d70:	89 7b       	st.w	r4[0x1c],r11
			if (!Is_udd_endpoint_configured(i)) {
80003d72:	e0 38 fe d0 	sub	r8,130768
80003d76:	70 08       	ld.w	r8,r8[0x0]
80003d78:	e6 18 00 04 	andh	r8,0x4,COH
80003d7c:	c0 e1       	brne	80003d98 <udd_ep_alloc+0x140>
				if (NULL == ptr_job->call_trans) {
80003d7e:	7c 48       	ld.w	r8,lr[0x10]
80003d80:	58 08       	cp.w	r8,0
80003d82:	c1 f0       	breq	80003dc0 <udd_ep_alloc+0x168>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
80003d84:	72 09       	ld.w	r9,r9[0x0]
80003d86:	e2 19 01 00 	andl	r9,0x100,COH
80003d8a:	c0 20       	breq	80003d8e <udd_ep_alloc+0x136>
					i |= USB_EP_DIR_IN;
80003d8c:	a7 b7       	sbr	r7,0x7
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
80003d8e:	0e 9a       	mov	r10,r7
80003d90:	7c 2b       	ld.w	r11,lr[0x8]
80003d92:	30 1c       	mov	r12,1
80003d94:	5d 18       	icall	r8
80003d96:	d8 3a       	popm	r0-r7,pc,r12=0
						ptr_job->buf_size, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
80003d98:	72 08       	ld.w	r8,r9[0x0]
80003d9a:	a9 b8       	sbr	r8,0x9
80003d9c:	93 08       	st.w	r9[0x0],r8
			if (b_restart) {
80003d9e:	58 0a       	cp.w	r10,0
80003da0:	c0 94       	brge	80003db2 <udd_ep_alloc+0x15a>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
80003da2:	7c 0b       	ld.w	r11,lr[0x0]
80003da4:	7c 48       	ld.w	r8,lr[0x10]
80003da6:	7c 29       	ld.w	r9,lr[0x8]
80003da8:	7c 1a       	ld.w	r10,lr[0x4]
80003daa:	f7 db c3 c1 	bfextu	r11,r11,0x1e,0x1
80003dae:	f0 1f 00 07 	mcall	80003dc8 <udd_ep_alloc+0x170>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80003db2:	2f f7       	sub	r7,-1
80003db4:	5c 57       	castu.b	r7
80003db6:	ec 07 18 00 	cp.b	r7,r6
80003dba:	fe 98 ff bc 	brls	80003d32 <udd_ep_alloc+0xda>
80003dbe:	da 3a       	popm	r0-r7,pc,r12=1
80003dc0:	d8 3a       	popm	r0-r7,pc,r12=0
80003dc2:	00 00       	add	r0,r0
80003dc4:	00 00       	add	r0,r0
80003dc6:	0a 18       	sub	r8,r5
80003dc8:	80 00       	ld.sh	r0,r0[0x0]
80003dca:	38 a0       	mov	r0,-118

80003dcc <udd_enable>:
	return true;
}


void udd_enable(void)
{
80003dcc:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003dd0:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80003dd4:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

#ifdef UHD_ENABLE
	//* DUAL ROLE INITIALIZATION
	if (otg_dual_enable()) {
80003dd6:	f0 1f 00 35 	mcall	80003ea8 <udd_enable+0xdc>
80003dda:	c0 70       	breq	80003de8 <udd_enable+0x1c>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003ddc:	e6 17 00 01 	andh	r7,0x1,COH
80003de0:	c0 21       	brne	80003de4 <udd_enable+0x18>
      cpu_irq_enable();
80003de2:	d5 03       	csrf	0x10
		// The current mode has been started by otg_dual_enable()
		cpu_irq_restore(flags);
		return;
80003de4:	e3 cd 80 80 	ldm	sp++,r7,pc
	pm_asyn_wake_up_enable(AVR32_PM_AWEN_USB_WAKEN_MASK);
#endif

# if (defined USB_ID) && (defined UHD_ENABLE)
	// Check that the device mode is selected by ID pin
	if (!Is_otg_id_device()) {
80003de8:	fe 68 08 04 	mov	r8,-129020
80003dec:	70 08       	ld.w	r8,r8[0x0]
80003dee:	e2 18 04 00 	andl	r8,0x400,COH
80003df2:	c0 71       	brne	80003e00 <udd_enable+0x34>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003df4:	e6 17 00 01 	andh	r7,0x1,COH
80003df8:	c0 21       	brne	80003dfc <udd_enable+0x30>
      cpu_irq_enable();
80003dfa:	d5 03       	csrf	0x10
		cpu_irq_restore(flags);
		return; // Device is not the current mode
80003dfc:	e3 cd 80 80 	ldm	sp++,r7,pc
	otg_disable_id_pin();
	otg_force_device_mode();
# endif

	// Enable USB hardware
	otg_enable_pad();
80003e00:	fe 68 08 00 	mov	r8,-129024
80003e04:	70 09       	ld.w	r9,r8[0x0]
80003e06:	ad a9       	sbr	r9,0xc
80003e08:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80003e0a:	70 09       	ld.w	r9,r8[0x0]
80003e0c:	af b9       	sbr	r9,0xf
80003e0e:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80003e10:	70 09       	ld.w	r9,r8[0x0]
80003e12:	af c9       	cbr	r9,0xe
80003e14:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
80003e16:	70 08       	ld.w	r8,r8[0x0]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80003e18:	4a 58       	lddpc	r8,80003eac <udd_enable+0xe0>
80003e1a:	70 09       	ld.w	r9,r8[0x0]
80003e1c:	30 0a       	mov	r10,0
		udd_ep_job[i].stall_requested = false;
80003e1e:	f3 d9 c0 1f 	bfextu	r9,r9,0x0,0x1f
80003e22:	f3 da d3 a1 	bfins	r9,r10,0x1d,0x1
80003e26:	91 09       	st.w	r8[0x0],r9

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80003e28:	70 59       	ld.w	r9,r8[0x14]
		udd_ep_job[i].stall_requested = false;
80003e2a:	f3 d9 c0 1f 	bfextu	r9,r9,0x0,0x1f
80003e2e:	f3 da d3 a1 	bfins	r9,r10,0x1d,0x1
80003e32:	91 59       	st.w	r8[0x14],r9

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80003e34:	fe 68 00 00 	mov	r8,-131072
80003e38:	70 09       	ld.w	r9,r8[0x0]
80003e3a:	ad c9       	cbr	r9,0xc
80003e3c:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80003e3e:	70 09       	ld.w	r9,r8[0x0]
80003e40:	e8 19 0c 00 	orl	r9,0xc00
80003e44:	91 09       	st.w	r8[0x0],r9
#  endif
#endif
	otg_ack_vbus_transition();
80003e46:	30 29       	mov	r9,2
80003e48:	fe 68 08 08 	mov	r8,-129016
80003e4c:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80003e4e:	fe 68 08 04 	mov	r8,-129020
80003e52:	70 08       	ld.w	r8,r8[0x0]
80003e54:	e2 18 08 00 	andl	r8,0x800,COH
80003e58:	c0 40       	breq	80003e60 <udd_enable+0x94>
		otg_raise_vbus_transition();
80003e5a:	fe 68 08 0c 	mov	r8,-129012
80003e5e:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
80003e60:	fe 68 08 00 	mov	r8,-129024
80003e64:	70 09       	ld.w	r9,r8[0x0]
80003e66:	a1 b9       	sbr	r9,0x1
80003e68:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80003e6a:	70 09       	ld.w	r9,r8[0x0]
80003e6c:	af a9       	sbr	r9,0xe
80003e6e:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80003e70:	30 09       	mov	r9,0
80003e72:	49 08       	lddpc	r8,80003eb0 <udd_enable+0xe4>
80003e74:	b0 89       	st.b	r8[0x0],r9
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
80003e76:	49 08       	lddpc	r8,80003eb4 <udd_enable+0xe8>
80003e78:	11 b9       	ld.ub	r9,r8[0x3]
80003e7a:	3f f8       	mov	r8,-1
80003e7c:	f0 09 18 00 	cp.b	r9,r8
80003e80:	c0 21       	brne	80003e84 <udd_enable+0xb8>
80003e82:	c0 08       	rjmp	80003e82 <udd_enable+0xb6>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003e84:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003e88:	d3 03       	ssrf	0x10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80003e8a:	48 b8       	lddpc	r8,80003eb4 <udd_enable+0xe8>
80003e8c:	11 ba       	ld.ub	r10,r8[0x3]
80003e8e:	2f fa       	sub	r10,-1
80003e90:	b0 ba       	st.b	r8[0x3],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003e92:	12 98       	mov	r8,r9
80003e94:	e6 18 00 01 	andh	r8,0x1,COH
80003e98:	c0 21       	brne	80003e9c <udd_enable+0xd0>
      cpu_irq_enable();
80003e9a:	d5 03       	csrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003e9c:	e6 17 00 01 	andh	r7,0x1,COH
80003ea0:	c0 21       	brne	80003ea4 <udd_enable+0xd8>
      cpu_irq_enable();
80003ea2:	d5 03       	csrf	0x10
   }

	barrier();
80003ea4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ea8:	80 00       	ld.sh	r0,r0[0x0]
80003eaa:	51 84       	stdsp	sp[0x60],r4
80003eac:	00 00       	add	r0,r0
80003eae:	0a 18       	sub	r8,r5
80003eb0:	00 00       	add	r0,r0
80003eb2:	0a 40       	or	r0,r5
80003eb4:	00 00       	add	r0,r0
80003eb6:	0b d4       	ld.ub	r4,r5[0x5]

80003eb8 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
80003eb8:	eb cd 40 fc 	pushm	r2-r7,lr
	if (Is_udd_sof()) {
80003ebc:	fe 68 00 04 	mov	r8,-131068
80003ec0:	70 08       	ld.w	r8,r8[0x0]
80003ec2:	e2 18 00 04 	andl	r8,0x4,COH
80003ec6:	c1 10       	breq	80003ee8 <udd_interrupt+0x30>
		udd_ack_sof();
80003ec8:	30 49       	mov	r9,4
80003eca:	fe 68 00 08 	mov	r8,-131064
80003ece:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
80003ed0:	fe 68 08 04 	mov	r8,-129020
80003ed4:	70 08       	ld.w	r8,r8[0x0]
80003ed6:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80003eda:	c0 31       	brne	80003ee0 <udd_interrupt+0x28>
			udc_sof_notify();
80003edc:	f0 1f 01 75 	mcall	800044b0 <udd_interrupt+0x5f8>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
80003ee0:	f0 1f 01 75 	mcall	800044b4 <udd_interrupt+0x5fc>
#endif
		goto udd_interrupt_end;
80003ee4:	e0 8f 02 d4 	bral	8000448c <udd_interrupt+0x5d4>
	}
	if (Is_udd_msof()) {
80003ee8:	fe 68 00 04 	mov	r8,-131068
80003eec:	70 08       	ld.w	r8,r8[0x0]
80003eee:	e2 18 00 02 	andl	r8,0x2,COH
80003ef2:	c0 90       	breq	80003f04 <udd_interrupt+0x4c>
		udd_ack_msof();
80003ef4:	30 29       	mov	r9,2
80003ef6:	fe 68 00 08 	mov	r8,-131064
80003efa:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
80003efc:	f0 1f 01 6d 	mcall	800044b0 <udd_interrupt+0x5f8>
		goto udd_interrupt_end;
80003f00:	e0 8f 02 c6 	bral	8000448c <udd_interrupt+0x5d4>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80003f04:	fe 68 00 00 	mov	r8,-131072
80003f08:	70 18       	ld.w	r8,r8[0x4]
80003f0a:	e2 18 10 00 	andl	r8,0x1000,COH
80003f0e:	e0 80 01 6e 	breq	800041ea <udd_interrupt+0x332>
		return false; // No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80003f12:	fe 68 02 20 	mov	r8,-130528
80003f16:	31 09       	mov	r9,16
80003f18:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80003f1a:	30 89       	mov	r9,8
80003f1c:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80003f1e:	fe 68 01 30 	mov	r8,-130768
80003f22:	70 08       	ld.w	r8,r8[0x0]
80003f24:	e2 18 00 04 	andl	r8,0x4,COH
80003f28:	e0 80 00 81 	breq	8000402a <udd_interrupt+0x172>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80003f2c:	fe f8 05 8c 	ld.w	r8,pc[1420]
80003f30:	70 08       	ld.w	r8,r8[0x0]
80003f32:	58 08       	cp.w	r8,0
80003f34:	c0 50       	breq	80003f3e <udd_interrupt+0x86>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80003f36:	f0 1f 01 62 	mcall	800044bc <udd_interrupt+0x604>

		// Reinitializes control endpoint management
		udd_ctrl_init();
80003f3a:	f0 1f 01 62 	mcall	800044c0 <udd_interrupt+0x608>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80003f3e:	fe 68 01 30 	mov	r8,-130768
80003f42:	70 08       	ld.w	r8,r8[0x0]
80003f44:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80003f48:	58 88       	cp.w	r8,8
80003f4a:	c0 90       	breq	80003f5c <udd_interrupt+0xa4>
		udd_ctrl_stall_data();
80003f4c:	f0 1f 01 5e 	mcall	800044c4 <udd_interrupt+0x60c>
		udd_ack_setup_received(0);
80003f50:	30 49       	mov	r9,4
80003f52:	fe 68 01 60 	mov	r8,-130720
80003f56:	91 09       	st.w	r8[0x0],r9
80003f58:	e0 8f 02 9a 	bral	8000448c <udd_interrupt+0x5d4>
80003f5c:	fc 18 e0 00 	movh	r8,0xe000
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80003f60:	fe fc 05 68 	ld.w	r12,pc[1384]
80003f64:	fc 1b 20 00 	movh	r11,0x2000
80003f68:	f0 0c 00 09 	add	r9,r8,r12
80003f6c:	11 3a       	ld.ub	r10,r8++
80003f6e:	f2 0b 0b 0a 	st.b	r9[r11],r10
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80003f72:	30 8a       	mov	r10,8
80003f74:	ea 1a e0 00 	orh	r10,0xe000
80003f78:	14 38       	cp.w	r8,r10
80003f7a:	cf 71       	brne	80003f68 <udd_interrupt+0xb0>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80003f7c:	fe f8 05 4c 	ld.w	r8,pc[1356]
80003f80:	90 19       	ld.sh	r9,r8[0x2]
80003f82:	5c c9       	swap.bh	r9
80003f84:	b0 19       	st.h	r8[0x2],r9
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80003f86:	90 29       	ld.sh	r9,r8[0x4]
80003f88:	5c c9       	swap.bh	r9
80003f8a:	b0 29       	st.h	r8[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80003f8c:	90 39       	ld.sh	r9,r8[0x6]
80003f8e:	5c c9       	swap.bh	r9
80003f90:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
80003f92:	f0 1f 01 4f 	mcall	800044cc <udd_interrupt+0x614>
80003f96:	c0 91       	brne	80003fa8 <udd_interrupt+0xf0>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
80003f98:	f0 1f 01 4b 	mcall	800044c4 <udd_interrupt+0x60c>
		udd_ack_setup_received(0);
80003f9c:	30 49       	mov	r9,4
80003f9e:	fe 68 01 60 	mov	r8,-130720
80003fa2:	91 09       	st.w	r8[0x0],r9
80003fa4:	e0 8f 02 74 	bral	8000448c <udd_interrupt+0x5d4>
		return;
	}
	udd_ack_setup_received(0);
80003fa8:	30 49       	mov	r9,4
80003faa:	fe 68 01 60 	mov	r8,-130720
80003fae:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80003fb0:	fe f8 05 18 	ld.w	r8,pc[1304]
80003fb4:	11 89       	ld.ub	r9,r8[0x0]
80003fb6:	30 08       	mov	r8,0
80003fb8:	f0 09 18 00 	cp.b	r9,r8
80003fbc:	c1 04       	brge	80003fdc <udd_interrupt+0x124>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80003fbe:	30 08       	mov	r8,0
80003fc0:	fe f9 05 10 	ld.w	r9,pc[1296]
80003fc4:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80003fc6:	fe f9 05 0e 	ld.w	r9,pc[1294]
80003fca:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80003fcc:	30 29       	mov	r9,2
80003fce:	fe f8 04 ea 	ld.w	r8,pc[1258]
80003fd2:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
80003fd4:	f0 1f 01 41 	mcall	800044d8 <udd_interrupt+0x620>
80003fd8:	e0 8f 02 5a 	bral	8000448c <udd_interrupt+0x5d4>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80003fdc:	fe f8 04 ec 	ld.w	r8,pc[1260]
80003fe0:	90 39       	ld.sh	r9,r8[0x6]
80003fe2:	30 08       	mov	r8,0
80003fe4:	f0 09 19 00 	cp.h	r9,r8
80003fe8:	c0 51       	brne	80003ff2 <udd_interrupt+0x13a>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80003fea:	f0 1f 01 3d 	mcall	800044dc <udd_interrupt+0x624>
80003fee:	e0 8f 02 4f 	bral	8000448c <udd_interrupt+0x5d4>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80003ff2:	30 08       	mov	r8,0
80003ff4:	fe f9 04 dc 	ld.w	r9,pc[1244]
80003ff8:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80003ffa:	fe f9 04 da 	ld.w	r9,pc[1242]
80003ffe:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80004000:	30 19       	mov	r9,1
80004002:	fe f8 04 b6 	ld.w	r8,pc[1206]
80004006:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80004008:	31 08       	mov	r8,16
8000400a:	fe 69 01 60 	mov	r9,-130720
8000400e:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004010:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80004014:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80004016:	fe 6a 01 f0 	mov	r10,-130576
8000401a:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000401c:	12 98       	mov	r8,r9
8000401e:	e6 18 00 01 	andh	r8,0x1,COH
80004022:	c0 21       	brne	80004026 <udd_interrupt+0x16e>
      cpu_irq_enable();
80004024:	d5 03       	csrf	0x10
   }

	barrier();
80004026:	e0 8f 02 33 	bral	8000448c <udd_interrupt+0x5d4>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
8000402a:	fe 68 01 30 	mov	r8,-130768
8000402e:	70 08       	ld.w	r8,r8[0x0]
80004030:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004034:	c0 b0       	breq	8000404a <udd_interrupt+0x192>
80004036:	fe 68 01 c0 	mov	r8,-130624
8000403a:	70 08       	ld.w	r8,r8[0x0]
8000403c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004040:	c0 50       	breq	8000404a <udd_interrupt+0x192>
		// IN packet sent
		udd_ctrl_in_sent();
80004042:	f0 1f 01 26 	mcall	800044d8 <udd_interrupt+0x620>
80004046:	e0 8f 02 23 	bral	8000448c <udd_interrupt+0x5d4>
		return true;
	}
	if (Is_udd_out_received(0)) {
8000404a:	fe 68 01 30 	mov	r8,-130768
8000404e:	70 08       	ld.w	r8,r8[0x0]
80004050:	e2 18 00 02 	andl	r8,0x2,COH
80004054:	e0 80 00 a8 	breq	800041a4 <udd_interrupt+0x2ec>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80004058:	fe f8 04 60 	ld.w	r8,pc[1120]
8000405c:	70 08       	ld.w	r8,r8[0x0]
8000405e:	58 18       	cp.w	r8,1
80004060:	c1 10       	breq	80004082 <udd_interrupt+0x1ca>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80004062:	58 28       	cp.w	r8,2
80004064:	5f 09       	sreq	r9
80004066:	58 48       	cp.w	r8,4
80004068:	5f 08       	sreq	r8
8000406a:	f3 e8 10 08 	or	r8,r9,r8
8000406e:	c0 40       	breq	80004076 <udd_interrupt+0x1be>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
80004070:	f0 1f 01 13 	mcall	800044bc <udd_interrupt+0x604>
80004074:	c0 38       	rjmp	8000407a <udd_interrupt+0x1c2>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80004076:	f0 1f 01 14 	mcall	800044c4 <udd_interrupt+0x60c>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000407a:	f0 1f 01 12 	mcall	800044c0 <udd_interrupt+0x608>
8000407e:	e0 8f 02 07 	bral	8000448c <udd_interrupt+0x5d4>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80004082:	fe 68 01 30 	mov	r8,-130768
80004086:	70 0b       	ld.w	r11,r8[0x0]
80004088:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
8000408c:	fe f8 04 3c 	ld.w	r8,pc[1084]
80004090:	90 69       	ld.sh	r9,r8[0xc]
80004092:	fe f8 04 42 	ld.w	r8,pc[1090]
80004096:	90 08       	ld.sh	r8,r8[0x0]
80004098:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
8000409c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800040a0:	f6 0a 00 0a 	add	r10,r11,r10
800040a4:	14 3c       	cp.w	r12,r10
800040a6:	c0 44       	brge	800040ae <udd_interrupt+0x1f6>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
800040a8:	10 19       	sub	r9,r8
800040aa:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800040ae:	fe f9 04 1a 	ld.w	r9,pc[1050]
800040b2:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
800040b4:	58 0b       	cp.w	r11,0
800040b6:	e0 80 01 f1 	breq	80004498 <udd_interrupt+0x5e0>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800040ba:	5c 78       	castu.h	r8
800040bc:	10 09       	add	r9,r8
800040be:	fc 18 e0 00 	movh	r8,0xe000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
800040c2:	11 3a       	ld.ub	r10,r8++
800040c4:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
800040c6:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800040ca:	f6 0a 19 00 	cp.h	r10,r11
800040ce:	cf a3       	brcs	800040c2 <udd_interrupt+0x20a>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
800040d0:	fe f9 04 04 	ld.w	r9,pc[1028]
800040d4:	92 08       	ld.sh	r8,r9[0x0]
800040d6:	16 08       	add	r8,r11
800040d8:	5c 88       	casts.h	r8
800040da:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
800040dc:	30 89       	mov	r9,8
800040de:	f2 0b 19 00 	cp.h	r11,r9
800040e2:	c0 e1       	brne	800040fe <udd_interrupt+0x246>
800040e4:	fe f9 03 e4 	ld.w	r9,pc[996]
800040e8:	92 ba       	ld.uh	r10,r9[0x6]
800040ea:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
800040ee:	fe f9 03 e2 	ld.w	r9,pc[994]
800040f2:	92 89       	ld.uh	r9,r9[0x0]
800040f4:	f6 09 00 09 	add	r9,r11,r9
800040f8:	12 3a       	cp.w	r10,r9
800040fa:	e0 89 00 1a 	brgt	8000412e <udd_interrupt+0x276>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
800040fe:	fe f9 03 ca 	ld.w	r9,pc[970]
80004102:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80004104:	72 5c       	ld.w	r12,r9[0x14]
80004106:	58 0c       	cp.w	r12,0
80004108:	c0 b0       	breq	8000411e <udd_interrupt+0x266>
			if (!udd_g_ctrlreq.over_under_run()) {
8000410a:	5d 1c       	icall	r12
8000410c:	c0 91       	brne	8000411e <udd_interrupt+0x266>
				// Stall ZLP
				udd_ctrl_stall_data();
8000410e:	f0 1f 00 ee 	mcall	800044c4 <udd_interrupt+0x60c>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80004112:	30 29       	mov	r9,2
80004114:	fe 68 01 60 	mov	r8,-130720
80004118:	91 09       	st.w	r8[0x0],r9
8000411a:	e0 8f 01 b9 	bral	8000448c <udd_interrupt+0x5d4>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
8000411e:	30 29       	mov	r9,2
80004120:	fe 68 01 60 	mov	r8,-130720
80004124:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80004126:	f0 1f 00 ee 	mcall	800044dc <udd_interrupt+0x624>
8000412a:	e0 8f 01 b1 	bral	8000448c <udd_interrupt+0x5d4>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
8000412e:	fe f9 03 9a 	ld.w	r9,pc[922]
80004132:	92 69       	ld.sh	r9,r9[0xc]
80004134:	f0 09 19 00 	cp.h	r9,r8
80004138:	c2 31       	brne	8000417e <udd_interrupt+0x2c6>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
8000413a:	fe f8 03 8e 	ld.w	r8,pc[910]
8000413e:	70 5c       	ld.w	r12,r8[0x14]
80004140:	58 0c       	cp.w	r12,0
80004142:	c0 91       	brne	80004154 <udd_interrupt+0x29c>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
80004144:	f0 1f 00 e0 	mcall	800044c4 <udd_interrupt+0x60c>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80004148:	30 29       	mov	r9,2
8000414a:	fe 68 01 60 	mov	r8,-130720
8000414e:	91 09       	st.w	r8[0x0],r9
80004150:	e0 8f 01 9e 	bral	8000448c <udd_interrupt+0x5d4>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80004154:	5d 1c       	icall	r12
80004156:	c0 91       	brne	80004168 <udd_interrupt+0x2b0>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80004158:	f0 1f 00 db 	mcall	800044c4 <udd_interrupt+0x60c>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000415c:	30 29       	mov	r9,2
8000415e:	fe 68 01 60 	mov	r8,-130720
80004162:	91 09       	st.w	r8[0x0],r9
80004164:	e0 8f 01 94 	bral	8000448c <udd_interrupt+0x5d4>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80004168:	fe f9 03 68 	ld.w	r9,pc[872]
8000416c:	fe f8 03 68 	ld.w	r8,pc[872]
80004170:	90 0b       	ld.sh	r11,r8[0x0]
80004172:	92 0a       	ld.sh	r10,r9[0x0]
80004174:	f6 0a 00 0a 	add	r10,r11,r10
80004178:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
8000417a:	30 09       	mov	r9,0
8000417c:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
8000417e:	fe 69 01 60 	mov	r9,-130720
80004182:	30 28       	mov	r8,2
80004184:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80004186:	31 08       	mov	r8,16
80004188:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000418a:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000418e:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80004190:	fe 6a 01 f0 	mov	r10,-130576
80004194:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004196:	12 98       	mov	r8,r9
80004198:	e6 18 00 01 	andh	r8,0x1,COH
8000419c:	c0 21       	brne	800041a0 <udd_interrupt+0x2e8>
      cpu_irq_enable();
8000419e:	d5 03       	csrf	0x10
   }

	barrier();
800041a0:	e0 8f 01 76 	bral	8000448c <udd_interrupt+0x5d4>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
800041a4:	fe 68 01 30 	mov	r8,-130768
800041a8:	70 08       	ld.w	r8,r8[0x0]
800041aa:	e2 18 00 08 	andl	r8,0x8,COH
800041ae:	c1 80       	breq	800041de <udd_interrupt+0x326>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
800041b0:	30 89       	mov	r9,8
800041b2:	fe 68 01 60 	mov	r8,-130720
800041b6:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
800041b8:	fe 68 01 30 	mov	r8,-130768
800041bc:	70 08       	ld.w	r8,r8[0x0]
800041be:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800041c2:	e0 81 01 65 	brne	8000448c <udd_interrupt+0x5d4>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800041c6:	fe f8 02 f2 	ld.w	r8,pc[754]
800041ca:	70 08       	ld.w	r8,r8[0x0]
800041cc:	58 38       	cp.w	r8,3
800041ce:	e0 81 01 5f 	brne	8000448c <udd_interrupt+0x5d4>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
800041d2:	e8 69 00 00 	mov	r9,524288
800041d6:	fe 68 01 f0 	mov	r8,-130576
800041da:	91 09       	st.w	r8[0x0],r9
800041dc:	c5 89       	rjmp	8000448c <udd_interrupt+0x5d4>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
800041de:	fe 68 01 30 	mov	r8,-130768
800041e2:	70 08       	ld.w	r8,r8[0x0]
800041e4:	e2 18 00 10 	andl	r8,0x10,COH
800041e8:	c0 d1       	brne	80004202 <udd_interrupt+0x34a>
800041ea:	fe f7 02 f6 	ld.w	r7,pc[758]
800041ee:	fe 69 01 34 	mov	r9,-130764
800041f2:	30 06       	mov	r6,0
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
800041f4:	fe 6a 00 00 	mov	r10,-131072
800041f8:	fc 15 02 00 	movh	r5,0x200
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
800041fc:	e0 64 10 00 	mov	r4,4096
80004200:	c1 e8       	rjmp	8000423c <udd_interrupt+0x384>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
80004202:	31 09       	mov	r9,16
80004204:	fe 68 01 60 	mov	r8,-130720
80004208:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
8000420a:	fe 68 01 30 	mov	r8,-130768
8000420e:	70 08       	ld.w	r8,r8[0x0]
80004210:	e2 18 00 02 	andl	r8,0x2,COH
80004214:	e0 81 01 3c 	brne	8000448c <udd_interrupt+0x5d4>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80004218:	fe f8 02 a0 	ld.w	r8,pc[672]
8000421c:	70 08       	ld.w	r8,r8[0x0]
8000421e:	58 18       	cp.w	r8,1
80004220:	c0 41       	brne	80004228 <udd_interrupt+0x370>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80004222:	f0 1f 00 af 	mcall	800044dc <udd_interrupt+0x624>
80004226:	c3 39       	rjmp	8000448c <udd_interrupt+0x5d4>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80004228:	58 48       	cp.w	r8,4
8000422a:	e0 81 01 31 	brne	8000448c <udd_interrupt+0x5d4>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
8000422e:	e8 69 00 00 	mov	r9,524288
80004232:	fe 68 01 f0 	mov	r8,-130576
80004236:	91 09       	st.w	r8[0x0],r9
80004238:	c2 a9       	rjmp	8000448c <udd_interrupt+0x5d4>
8000423a:	16 96       	mov	r6,r11
8000423c:	ec cb ff ff 	sub	r11,r6,-1
80004240:	0e 98       	mov	r8,r7
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80004242:	74 4e       	ld.w	lr,r10[0x10]
80004244:	16 9c       	mov	r12,r11
80004246:	ea 06 09 46 	lsl	r6,r5,r6
8000424a:	ed ee 00 0e 	and	lr,r6,lr
8000424e:	c1 e0       	breq	8000428a <udd_interrupt+0x3d2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80004250:	74 1e       	ld.w	lr,r10[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80004252:	ed ee 00 0e 	and	lr,r6,lr
80004256:	c1 a0       	breq	8000428a <udd_interrupt+0x3d2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
80004258:	f6 09 15 04 	lsl	r9,r11,0x4
8000425c:	e0 39 fd 00 	sub	r9,130304
80004260:	72 3a       	ld.w	r10,r9[0xc]
80004262:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80004266:	e0 81 01 13 	brne	8000448c <udd_interrupt+0x5d4>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
			}
			udd_disable_endpoint_dma_interrupt(ep);
8000426a:	fe 6a 00 00 	mov	r10,-131072
8000426e:	95 56       	st.w	r10[0x14],r6
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
80004270:	72 39       	ld.w	r9,r9[0xc]
80004272:	b1 89       	lsr	r9,0x10
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
80004274:	ef fa 10 03 	ld.wne	r10,r7[0xc]
80004278:	f5 d9 e1 19 	subne	r9,r10,r9
8000427c:	f1 f9 1a 03 	st.wne	r8[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
80004280:	f1 f9 1a 02 	st.wne	r8[0x8],r9
			}
			udd_ep_trans_done(ep);
80004284:	f0 1f 00 98 	mcall	800044e4 <udd_interrupt+0x62c>
80004288:	c0 29       	rjmp	8000448c <udd_interrupt+0x5d4>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
8000428a:	74 46       	ld.w	r6,r10[0x10]
8000428c:	e8 0c 09 4e 	lsl	lr,r4,r12
80004290:	fd e6 00 06 	and	r6,lr,r6
80004294:	c4 80       	breq	80004324 <udd_interrupt+0x46c>
80004296:	e0 76 fe d0 	mov	r6,130768
8000429a:	f2 06 00 02 	add	r2,r9,r6
8000429e:	f2 c6 ff 70 	sub	r6,r9,-144
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
800042a2:	6c 03       	ld.w	r3,r6[0x0]
800042a4:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
800042a8:	c1 70       	breq	800042d6 <udd_interrupt+0x41e>
800042aa:	72 03       	ld.w	r3,r9[0x0]
800042ac:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
800042b0:	c1 30       	breq	800042d6 <udd_interrupt+0x41e>
				udd_disable_in_send_interrupt(ep);
800042b2:	fe 6a 02 20 	mov	r10,-130528
800042b6:	e4 0a 00 09 	add	r9,r2,r10
800042ba:	30 1a       	mov	r10,1
800042bc:	93 0a       	st.w	r9[0x0],r10
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
800042be:	e0 32 fe a0 	sub	r2,130720
800042c2:	85 0a       	st.w	r2[0x0],r10
				udd_ack_fifocon(ep);
800042c4:	e0 6a 40 00 	mov	r10,16384
800042c8:	93 0a       	st.w	r9[0x0],r10
				udd_ep_finish_job(ptr_job, false, ep);
800042ca:	18 9a       	mov	r10,r12
800042cc:	30 0b       	mov	r11,0
800042ce:	10 9c       	mov	r12,r8
800042d0:	f0 1f 00 86 	mcall	800044e8 <udd_interrupt+0x630>
800042d4:	cd c8       	rjmp	8000448c <udd_interrupt+0x5d4>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
800042d6:	6c 0c       	ld.w	r12,r6[0x0]
800042d8:	e2 1c 10 00 	andl	r12,0x1000,COH
800042dc:	c2 40       	breq	80004324 <udd_interrupt+0x46c>
800042de:	72 0c       	ld.w	r12,r9[0x0]
800042e0:	f9 dc c1 82 	bfextu	r12,r12,0xc,0x2
800042e4:	c2 01       	brne	80004324 <udd_interrupt+0x46c>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
800042e6:	fe 66 02 20 	mov	r6,-130528
800042ea:	e4 06 00 09 	add	r9,r2,r6
800042ee:	e0 6a 10 00 	mov	r10,4096
800042f2:	93 0a       	st.w	r9[0x0],r10
				udd_disable_endpoint_interrupt(ep);
800042f4:	fe 69 00 00 	mov	r9,-131072
800042f8:	93 5e       	st.w	r9[0x14],lr

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
800042fa:	70 09       	ld.w	r9,r8[0x0]
800042fc:	30 0a       	mov	r10,0
800042fe:	f3 da d3 a1 	bfins	r9,r10,0x1d,0x1
80004302:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_bank_autoswitch(ep);
80004304:	fe 6a 01 00 	mov	r10,-130816
80004308:	e4 0a 00 08 	add	r8,r2,r10
8000430c:	70 09       	ld.w	r9,r8[0x0]
8000430e:	a9 d9       	cbr	r9,0x9
80004310:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
80004312:	e0 32 fe 10 	sub	r2,130576
80004316:	e8 68 00 00 	mov	r8,524288
8000431a:	85 08       	st.w	r2[0x0],r8
				udd_reset_data_toggle(ep);
8000431c:	e4 68 00 00 	mov	r8,262144
80004320:	85 08       	st.w	r2[0x0],r8
80004322:	cb 58       	rjmp	8000448c <udd_interrupt+0x5d4>
80004324:	2e c7       	sub	r7,-20
80004326:	2f c9       	sub	r9,-4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80004328:	58 2b       	cp.w	r11,2
8000432a:	c8 81       	brne	8000423a <udd_interrupt+0x382>
8000432c:	cb a8       	rjmp	800044a0 <udd_interrupt+0x5e8>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
8000432e:	30 87       	mov	r7,8
80004330:	fe 68 00 08 	mov	r8,-131064
80004334:	91 07       	st.w	r8[0x0],r7
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
80004336:	4e b6       	lddpc	r6,800044e0 <udd_interrupt+0x628>
80004338:	30 1a       	mov	r10,1
8000433a:	14 9b       	mov	r11,r10
8000433c:	0c 9c       	mov	r12,r6
8000433e:	f0 1f 00 6b 	mcall	800044e8 <udd_interrupt+0x630>
80004342:	30 2a       	mov	r10,2
80004344:	30 1b       	mov	r11,1
80004346:	ec cc ff ec 	sub	r12,r6,-20
8000434a:	f0 1f 00 68 	mcall	800044e8 <udd_interrupt+0x630>
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
8000434e:	f0 1f 00 68 	mcall	800044ec <udd_interrupt+0x634>
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
80004352:	fe 68 00 00 	mov	r8,-131072
80004356:	70 09       	ld.w	r9,r8[0x0]
80004358:	e0 19 ff 80 	andl	r9,0xff80
8000435c:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000435e:	70 09       	ld.w	r9,r8[0x0]
80004360:	a7 b9       	sbr	r9,0x7
80004362:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80004364:	fe 69 01 00 	mov	r9,-130816
80004368:	72 0a       	ld.w	r10,r9[0x0]
8000436a:	ee 07 0c 47 	max	r7,r7,r7
8000436e:	e0 6b 04 00 	mov	r11,1024
80004372:	ee 0b 0d 4b 	min	r11,r7,r11
80004376:	a1 7b       	lsl	r11,0x1
80004378:	20 1b       	sub	r11,1
8000437a:	f6 0b 12 00 	clz	r11,r11
8000437e:	f6 0b 11 1c 	rsub	r11,r11,28
80004382:	a5 6b       	lsl	r11,0x4
80004384:	e2 1b 19 7c 	andl	r11,0x197c,COH
80004388:	e0 1a e6 83 	andl	r10,0xe683
8000438c:	f7 ea 10 0a 	or	r10,r11,r10
80004390:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80004392:	72 0a       	ld.w	r10,r9[0x0]
80004394:	a1 ba       	sbr	r10,0x1
80004396:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
80004398:	70 79       	ld.w	r9,r8[0x1c]
8000439a:	a1 a9       	sbr	r9,0x0
8000439c:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000439e:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
800043a2:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
800043a4:	fe 69 01 f0 	mov	r9,-130576
800043a8:	30 4b       	mov	r11,4
800043aa:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
800043ac:	30 2b       	mov	r11,2
800043ae:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
800043b0:	e0 69 10 00 	mov	r9,4096
800043b4:	91 69       	st.w	r8[0x18],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800043b6:	14 98       	mov	r8,r10
800043b8:	e6 18 00 01 	andh	r8,0x1,COH
800043bc:	c0 21       	brne	800043c0 <udd_interrupt+0x508>
      cpu_irq_enable();
800043be:	d5 03       	csrf	0x10
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
800043c0:	f0 1f 00 40 	mcall	800044c0 <udd_interrupt+0x608>
		goto udd_interrupt_end;
800043c4:	c6 48       	rjmp	8000448c <udd_interrupt+0x5d4>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
800043c6:	fe 68 00 10 	mov	r8,-131056
800043ca:	70 08       	ld.w	r8,r8[0x0]
800043cc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800043d0:	c1 d0       	breq	8000440a <udd_interrupt+0x552>
800043d2:	fe 68 00 04 	mov	r8,-131068
800043d6:	70 08       	ld.w	r8,r8[0x0]
800043d8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800043dc:	c1 70       	breq	8000440a <udd_interrupt+0x552>
		otg_unfreeze_clock();
800043de:	fe 68 08 00 	mov	r8,-129024
800043e2:	70 09       	ld.w	r9,r8[0x0]
800043e4:	af c9       	cbr	r9,0xe
800043e6:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
800043e8:	30 1a       	mov	r10,1
800043ea:	fe 69 00 14 	mov	r9,-131052
800043ee:	93 0a       	st.w	r9[0x0],r10
		udd_enable_wake_up_interrupt();
800043f0:	31 0a       	mov	r10,16
800043f2:	fe 69 00 18 	mov	r9,-131048
800043f6:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
800043f8:	70 09       	ld.w	r9,r8[0x0]
800043fa:	af a9       	sbr	r9,0xe
800043fc:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
800043fe:	30 0c       	mov	r12,0
80004400:	f0 1f 00 3c 	mcall	800044f0 <udd_interrupt+0x638>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
80004404:	f0 1f 00 3c 	mcall	800044f4 <udd_interrupt+0x63c>
#endif
		goto udd_interrupt_end;
80004408:	c4 28       	rjmp	8000448c <udd_interrupt+0x5d4>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
8000440a:	fe 68 00 10 	mov	r8,-131056
8000440e:	70 08       	ld.w	r8,r8[0x0]
80004410:	e2 18 00 10 	andl	r8,0x10,COH
80004414:	c1 f0       	breq	80004452 <udd_interrupt+0x59a>
80004416:	fe 68 00 04 	mov	r8,-131068
8000441a:	70 08       	ld.w	r8,r8[0x0]
8000441c:	e2 18 00 10 	andl	r8,0x10,COH
80004420:	c1 90       	breq	80004452 <udd_interrupt+0x59a>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80004422:	fe 68 08 00 	mov	r8,-129024
80004426:	70 09       	ld.w	r9,r8[0x0]
80004428:	af c9       	cbr	r9,0xe
8000442a:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );
8000442c:	fe 69 08 04 	mov	r9,-129020
80004430:	72 08       	ld.w	r8,r9[0x0]
80004432:	e2 18 40 00 	andl	r8,0x4000,COH
80004436:	cf d0       	breq	80004430 <udd_interrupt+0x578>

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80004438:	31 09       	mov	r9,16
8000443a:	fe 68 00 14 	mov	r8,-131052
8000443e:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
80004440:	30 1c       	mov	r12,1
80004442:	fe 68 00 18 	mov	r8,-131048
80004446:	91 0c       	st.w	r8[0x0],r12
		udd_sleep_mode(true); // Enter in IDLE mode
80004448:	f0 1f 00 2a 	mcall	800044f0 <udd_interrupt+0x638>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
8000444c:	f0 1f 00 2b 	mcall	800044f8 <udd_interrupt+0x640>
#endif
		goto udd_interrupt_end;
80004450:	c1 e8       	rjmp	8000448c <udd_interrupt+0x5d4>
	}

	if (Is_otg_vbus_transition()) {
80004452:	fe 68 08 04 	mov	r8,-129020
80004456:	70 08       	ld.w	r8,r8[0x0]
80004458:	e2 18 00 02 	andl	r8,0x2,COH
8000445c:	c1 80       	breq	8000448c <udd_interrupt+0x5d4>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
8000445e:	fe 68 08 00 	mov	r8,-129024
80004462:	70 09       	ld.w	r9,r8[0x0]
80004464:	af c9       	cbr	r9,0xe
80004466:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
80004468:	30 2a       	mov	r10,2
8000446a:	fe 69 08 08 	mov	r9,-129016
8000446e:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock();
80004470:	70 09       	ld.w	r9,r8[0x0]
80004472:	af a9       	sbr	r9,0xe
80004474:	91 09       	st.w	r8[0x0],r9
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
80004476:	fe 68 08 04 	mov	r8,-129020
8000447a:	70 08       	ld.w	r8,r8[0x0]
8000447c:	e2 18 08 00 	andl	r8,0x800,COH
80004480:	c0 40       	breq	80004488 <udd_interrupt+0x5d0>
			udd_attach();
80004482:	f0 1f 00 1f 	mcall	800044fc <udd_interrupt+0x644>
80004486:	c0 38       	rjmp	8000448c <udd_interrupt+0x5d4>
		} else {
			udd_detach();
80004488:	f0 1f 00 1e 	mcall	80004500 <udd_interrupt+0x648>
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
8000448c:	fe 68 00 00 	mov	r8,-131072
80004490:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80004494:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80004498:	48 f9       	lddpc	r9,800044d4 <udd_interrupt+0x61c>
8000449a:	b2 08       	st.h	r9[0x0],r8
8000449c:	fe 9f fe 31 	bral	800040fe <udd_interrupt+0x246>
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
800044a0:	fe 68 00 04 	mov	r8,-131068
800044a4:	70 08       	ld.w	r8,r8[0x0]
800044a6:	e2 18 00 08 	andl	r8,0x8,COH
800044aa:	c8 e0       	breq	800043c6 <udd_interrupt+0x50e>
800044ac:	c4 1b       	rjmp	8000432e <udd_interrupt+0x476>
800044ae:	00 00       	add	r0,r0
800044b0:	80 00       	ld.sh	r0,r0[0x0]
800044b2:	63 d4       	ld.w	r4,r1[0x74]
800044b4:	80 00       	ld.sh	r0,r0[0x0]
800044b6:	2b 40       	sub	r0,-76
800044b8:	00 00       	add	r0,r0
800044ba:	0a 44       	or	r4,r5
800044bc:	80 00       	ld.sh	r0,r0[0x0]
800044be:	36 14       	mov	r4,97
800044c0:	80 00       	ld.sh	r0,r0[0x0]
800044c2:	3a e0       	mov	r0,-82
800044c4:	80 00       	ld.sh	r0,r0[0x0]
800044c6:	35 fc       	mov	r12,95
800044c8:	00 00       	add	r0,r0
800044ca:	0b a8       	ld.ub	r8,r5[0x2]
800044cc:	80 00       	ld.sh	r0,r0[0x0]
800044ce:	66 50       	ld.w	r0,r3[0x14]
800044d0:	00 00       	add	r0,r0
800044d2:	0a 14       	sub	r4,r5
800044d4:	00 00       	add	r0,r0
800044d6:	0a 42       	or	r2,r5
800044d8:	80 00       	ld.sh	r0,r0[0x0]
800044da:	3b 18       	mov	r8,-79
800044dc:	80 00       	ld.sh	r0,r0[0x0]
800044de:	3a b0       	mov	r0,-85
800044e0:	00 00       	add	r0,r0
800044e2:	0a 18       	sub	r8,r5
800044e4:	80 00       	ld.sh	r0,r0[0x0]
800044e6:	37 48       	mov	r8,116
800044e8:	80 00       	ld.sh	r0,r0[0x0]
800044ea:	36 28       	mov	r8,98
800044ec:	80 00       	ld.sh	r0,r0[0x0]
800044ee:	65 f4       	ld.w	r4,r2[0x7c]
800044f0:	80 00       	ld.sh	r0,r0[0x0]
800044f2:	39 3c       	mov	r12,-109
800044f4:	80 00       	ld.sh	r0,r0[0x0]
800044f6:	2b 14       	sub	r4,-79
800044f8:	80 00       	ld.sh	r0,r0[0x0]
800044fa:	2a 30       	sub	r0,-93
800044fc:	80 00       	ld.sh	r0,r0[0x0]
800044fe:	39 dc       	mov	r12,-99
80004500:	80 00       	ld.sh	r0,r0[0x0]
80004502:	39 b4       	mov	r4,-101

80004504 <uhd_get_speed>:
	cpu_irq_restore(flags);
}

uhd_speed_t uhd_get_speed(void)
{
	switch (uhd_get_speed_mode()) {
80004504:	fe 68 08 04 	mov	r8,-129020
80004508:	70 08       	ld.w	r8,r8[0x0]
8000450a:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
8000450e:	58 28       	cp.w	r8,2
80004510:	e0 88 00 03 	brls	80004516 <uhd_get_speed+0x12>
80004514:	5e fd       	retal	0
80004516:	48 39       	lddpc	r9,80004520 <uhd_get_speed+0x1c>
80004518:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]

	default:
		Assert(false);
		return UHD_SPEED_LOW;
	}
}
8000451c:	5e fc       	retal	r12
8000451e:	00 00       	add	r0,r0
80004520:	80 00       	ld.sh	r0,r0[0x0]
80004522:	d5 4c       	*unknown*

80004524 <uhd_send_reset>:
	return uhd_get_microsof_number();
}

void uhd_send_reset(uhd_callback_reset_t callback)
{
	uhd_reset_callback = callback;
80004524:	48 48       	lddpc	r8,80004534 <uhd_send_reset+0x10>
80004526:	91 0c       	st.w	r8[0x0],r12
	uhd_start_reset();
80004528:	fe 68 04 00 	mov	r8,-130048
8000452c:	70 09       	ld.w	r9,r8[0x0]
8000452e:	a9 b9       	sbr	r9,0x9
80004530:	91 09       	st.w	r8[0x0],r9
}
80004532:	5e fc       	retal	r12
80004534:	00 00       	add	r0,r0
80004536:	0a 50       	eor	r0,r5

80004538 <uhd_suspend>:

void uhd_suspend(void)
{
	if (uhd_ctrl_request_timeout) {
80004538:	49 28       	lddpc	r8,80004580 <uhd_suspend+0x48>
8000453a:	90 08       	ld.sh	r8,r8[0x0]
8000453c:	58 08       	cp.w	r8,0
8000453e:	c0 50       	breq	80004548 <uhd_suspend+0x10>
		// Delay suspend after setup requests
		uhd_b_suspend_requested = true;
80004540:	30 19       	mov	r9,1
80004542:	49 18       	lddpc	r8,80004584 <uhd_suspend+0x4c>
80004544:	b0 89       	st.b	r8[0x0],r9
		return;
80004546:	5e fc       	retal	r12
80004548:	fe 69 05 c4 	mov	r9,-129596
8000454c:	30 08       	mov	r8,0
8000454e:	10 9a       	mov	r10,r8
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
80004550:	e2 6c 00 00 	mov	r12,131072
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80004554:	72 0b       	ld.w	r11,r9[0x0]
{
	uhd_reset_callback = callback;
	uhd_start_reset();
}

void uhd_suspend(void)
80004556:	2f f8       	sub	r8,-1
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80004558:	ee 1b 00 02 	eorh	r11,0x2
8000455c:	f7 db c2 21 	bfextu	r11,r11,0x11,0x1
80004560:	f6 08 09 4b 	lsl	r11,r11,r8
80004564:	16 4a       	or	r10,r11
80004566:	5c 5a       	castu.b	r10
80004568:	f2 cb ff d0 	sub	r11,r9,-48
		uhd_freeze_pipe(pipe);
8000456c:	97 0c       	st.w	r11[0x0],r12
8000456e:	2f c9       	sub	r9,-4
		uhd_b_suspend_requested = true;
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80004570:	58 68       	cp.w	r8,6
80004572:	cf 11       	brne	80004554 <uhd_suspend+0x1c>
80004574:	48 58       	lddpc	r8,80004588 <uhd_suspend+0x50>
80004576:	b0 8a       	st.b	r8[0x0],r10
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
80004578:	30 39       	mov	r9,3
8000457a:	48 58       	lddpc	r8,8000458c <uhd_suspend+0x54>
8000457c:	b0 89       	st.b	r8[0x0],r9
8000457e:	5e fc       	retal	r12
80004580:	00 00       	add	r0,r0
80004582:	0b d0       	ld.ub	r0,r5[0x5]
80004584:	00 00       	add	r0,r0
80004586:	0a cf       	st.b	r5++,pc
80004588:	00 00       	add	r0,r0
8000458a:	0a cd       	st.b	r5++,sp
8000458c:	00 00       	add	r0,r0
8000458e:	0a cc       	st.b	r5++,r12

80004590 <uhd_is_suspend>:
}

bool uhd_is_suspend(void)
{
	return !Is_uhd_sof_enabled();
80004590:	fe 68 04 00 	mov	r8,-130048
80004594:	70 0c       	ld.w	r12,r8[0x0]
80004596:	ec 1c 01 00 	eorl	r12,0x100
}
8000459a:	f9 dc c1 01 	bfextu	r12,r12,0x8,0x1
8000459e:	5e fc       	retal	r12

800045a0 <uhd_ctrl_phase_zlp_in>:
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
800045a0:	30 39       	mov	r9,3
800045a2:	48 f8       	lddpc	r8,800045dc <uhd_ctrl_phase_zlp_in+0x3c>
800045a4:	91 09       	st.w	r8[0x0],r9
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
800045a6:	fe 68 05 00 	mov	r8,-129792
800045aa:	70 09       	ld.w	r9,r8[0x0]
800045ac:	e0 19 fc ff 	andl	r9,0xfcff
800045b0:	a9 a9       	sbr	r9,0x8
800045b2:	91 09       	st.w	r8[0x0],r9
	uhd_ack_in_received(0);
800045b4:	fe 69 05 60 	mov	r9,-129696
800045b8:	30 18       	mov	r8,1
800045ba:	93 08       	st.w	r9[0x0],r8
	uhd_ack_short_packet(0);
800045bc:	e0 6a 00 80 	mov	r10,128
800045c0:	93 0a       	st.w	r9[0x0],r10
	uhd_enable_in_received_interrupt(0);
800045c2:	fe 69 05 f0 	mov	r9,-129552
800045c6:	93 08       	st.w	r9[0x0],r8
	uhd_ack_fifocon(0);
800045c8:	fe 68 06 20 	mov	r8,-129504
800045cc:	e0 69 40 00 	mov	r9,16384
800045d0:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
800045d2:	e2 69 00 00 	mov	r9,131072
800045d6:	91 09       	st.w	r8[0x0],r9
}
800045d8:	5e fc       	retal	r12
800045da:	00 00       	add	r0,r0
800045dc:	00 00       	add	r0,r0
800045de:	0b c0       	ld.ub	r0,r5[0x4]

800045e0 <uhd_ctrl_phase_data_out>:
/**
 * \internal
 * \brief Manages the DATA OUT phase on control endpoint
 */
static void uhd_ctrl_phase_data_out(void)
{
800045e0:	eb cd 40 e0 	pushm	r5-r7,lr
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
800045e4:	30 19       	mov	r9,1
800045e6:	4c 98       	lddpc	r8,80004708 <uhd_ctrl_phase_data_out+0x128>
800045e8:	91 09       	st.w	r8[0x0],r9

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
800045ea:	4c 98       	lddpc	r8,8000470c <uhd_ctrl_phase_data_out+0x12c>
800045ec:	70 0b       	ld.w	r11,r8[0x0]
800045ee:	17 f9       	ld.ub	r9,r11[0x7]
800045f0:	f7 38 00 08 	ld.ub	r8,r11[8]
800045f4:	f1 e9 10 88 	or	r8,r8,r9<<0x8
800045f8:	4c 69       	lddpc	r9,80004710 <uhd_ctrl_phase_data_out+0x130>
800045fa:	92 09       	ld.sh	r9,r9[0x0]
800045fc:	f0 09 19 00 	cp.h	r9,r8
80004600:	c0 51       	brne	8000460a <uhd_ctrl_phase_data_out+0x2a>
		// End of DATA phase
		uhd_ctrl_phase_zlp_in();
80004602:	f0 1f 00 45 	mcall	80004714 <uhd_ctrl_phase_data_out+0x134>
		return;
80004606:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	}

	if (!uhd_ctrl_request_first->payload_size) {
8000460a:	f7 09 00 10 	ld.sh	r9,r11[16]
8000460e:	30 08       	mov	r8,0
80004610:	f0 09 19 00 	cp.h	r9,r8
80004614:	c1 21       	brne	80004638 <uhd_ctrl_phase_data_out+0x58>
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
				|| !uhd_ctrl_request_first->callback_run(
80004616:	76 58       	ld.w	r8,r11[0x14]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80004618:	58 08       	cp.w	r8,0
8000461a:	c0 b0       	breq	80004630 <uhd_ctrl_phase_data_out+0x50>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
8000461c:	fe 69 04 24 	mov	r9,-130012
80004620:	72 0c       	ld.w	r12,r9[0x0]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80004622:	f6 ca ff f0 	sub	r10,r11,-16
80004626:	2f 4b       	sub	r11,-12
80004628:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8000462c:	5d 18       	icall	r8
8000462e:	c0 51       	brne	80004638 <uhd_ctrl_phase_data_out+0x58>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
				&uhd_ctrl_request_first->payload,
				&uhd_ctrl_request_first->payload_size)) {
			// DATA phase aborted by host
			uhd_ctrl_phase_zlp_in();
80004630:	f0 1f 00 39 	mcall	80004714 <uhd_ctrl_phase_data_out+0x134>
			return;
80004634:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80004638:	fe 68 05 00 	mov	r8,-129792
8000463c:	70 06       	ld.w	r6,r8[0x0]
8000463e:	ed d6 c0 83 	bfextu	r6,r6,0x4,0x3
80004642:	30 89       	mov	r9,8
80004644:	f2 06 09 46 	lsl	r6,r9,r6
80004648:	5c 56       	castu.b	r6
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
8000464a:	70 09       	ld.w	r9,r8[0x0]
8000464c:	e0 19 fc ff 	andl	r9,0xfcff
80004650:	a9 b9       	sbr	r9,0x9
80004652:	91 09       	st.w	r8[0x0],r9
	uhd_ack_out_ready(0);
80004654:	30 29       	mov	r9,2
80004656:	fe 68 05 60 	mov	r8,-129696
8000465a:	91 09       	st.w	r8[0x0],r9
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
8000465c:	4a c8       	lddpc	r8,8000470c <uhd_ctrl_phase_data_out+0x12c>
8000465e:	70 08       	ld.w	r8,r8[0x0]
80004660:	11 fa       	ld.ub	r10,r8[0x7]
80004662:	f1 39 00 08 	ld.ub	r9,r8[8]
80004666:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000466a:	4a aa       	lddpc	r10,80004710 <uhd_ctrl_phase_data_out+0x130>
8000466c:	94 0a       	ld.sh	r10,r10[0x0]
8000466e:	f2 0a 19 00 	cp.h	r10,r9
80004672:	5f 3b       	srlo	r11
80004674:	30 09       	mov	r9,0
80004676:	f2 06 18 00 	cp.b	r6,r9
8000467a:	5f 1a       	srne	r10
8000467c:	f7 ea 00 0a 	and	r10,r11,r10
80004680:	f2 0a 18 00 	cp.b	r10,r9
80004684:	c3 30       	breq	800046ea <uhd_ctrl_phase_data_out+0x10a>
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
80004686:	f1 0a 00 10 	ld.sh	r10,r8[16]
8000468a:	30 09       	mov	r9,0
8000468c:	f2 0a 19 00 	cp.h	r10,r9
80004690:	c2 d0       	breq	800046ea <uhd_ctrl_phase_data_out+0x10a>
80004692:	fc 1b e0 00 	movh	r11,0xe000
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
		uhd_ctrl_nb_trans++;
80004696:	49 fa       	lddpc	r10,80004710 <uhd_ctrl_phase_data_out+0x130>
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
80004698:	49 de       	lddpc	lr,8000470c <uhd_ctrl_phase_data_out+0x12c>

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
8000469a:	30 0c       	mov	r12,0
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
8000469c:	12 95       	mov	r5,r9
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
8000469e:	70 39       	ld.w	r9,r8[0xc]
800046a0:	13 37       	ld.ub	r7,r9++
800046a2:	16 c7       	st.b	r11++,r7
800046a4:	91 39       	st.w	r8[0xc],r9
		uhd_ctrl_nb_trans++;
800046a6:	94 08       	ld.sh	r8,r10[0x0]
800046a8:	2f f8       	sub	r8,-1
800046aa:	b4 08       	st.h	r10[0x0],r8
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
800046ac:	7c 08       	ld.w	r8,lr[0x0]
800046ae:	f1 09 00 10 	ld.sh	r9,r8[16]
800046b2:	20 19       	sub	r9,1
800046b4:	f1 59 00 10 	st.h	r8[16],r9

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
800046b8:	7c 08       	ld.w	r8,lr[0x0]
800046ba:	11 f7       	ld.ub	r7,r8[0x7]
800046bc:	f1 39 00 08 	ld.ub	r9,r8[8]
800046c0:	f3 e7 10 89 	or	r9,r9,r7<<0x8
800046c4:	94 07       	ld.sh	r7,r10[0x0]
800046c6:	f2 07 19 00 	cp.h	r7,r9
800046ca:	5f 37       	srlo	r7
800046cc:	ec 0b 01 09 	sub	r9,r6,r11
800046d0:	f8 09 18 00 	cp.b	r9,r12
800046d4:	5f 19       	srne	r9
800046d6:	ef e9 00 09 	and	r9,r7,r9
800046da:	f8 09 18 00 	cp.b	r9,r12
800046de:	c0 60       	breq	800046ea <uhd_ctrl_phase_data_out+0x10a>
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
800046e0:	f1 09 00 10 	ld.sh	r9,r8[16]
800046e4:	ea 09 19 00 	cp.h	r9,r5
800046e8:	cd b1       	brne	8000469e <uhd_ctrl_phase_data_out+0xbe>
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
		uhd_ctrl_nb_trans++;
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
	}
	uhd_enable_out_ready_interrupt(0);
800046ea:	30 29       	mov	r9,2
800046ec:	fe 68 05 f0 	mov	r8,-129552
800046f0:	91 09       	st.w	r8[0x0],r9
	uhd_ack_fifocon(0);
800046f2:	fe 68 06 20 	mov	r8,-129504
800046f6:	e0 69 40 00 	mov	r9,16384
800046fa:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
800046fc:	e2 69 00 00 	mov	r9,131072
80004700:	91 09       	st.w	r8[0x0],r9
80004702:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004706:	00 00       	add	r0,r0
80004708:	00 00       	add	r0,r0
8000470a:	0b c0       	ld.ub	r0,r5[0x4]
8000470c:	00 00       	add	r0,r0
8000470e:	0b c4       	ld.ub	r4,r5[0x4]
80004710:	00 00       	add	r0,r0
80004712:	0b c8       	ld.ub	r8,r5[0x4]
80004714:	80 00       	ld.sh	r0,r0[0x0]
80004716:	45 a0       	lddsp	r0,sp[0x168]

80004718 <uhd_pipe_get_error>:
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
80004718:	a3 6c       	lsl	r12,0x2
8000471a:	e0 3c f9 80 	sub	r12,129408
8000471e:	78 08       	ld.w	r8,r12[0x0]
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
80004720:	30 09       	mov	r9,0
80004722:	99 09       	st.w	r12[0x0],r9
80004724:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004728:	20 18       	sub	r8,1
8000472a:	58 28       	cp.w	r8,2
8000472c:	e0 88 00 04 	brls	80004734 <uhd_pipe_get_error+0x1c>
80004730:	30 6c       	mov	r12,6
80004732:	5e fc       	retal	r12
80004734:	48 29       	lddpc	r9,8000473c <uhd_pipe_get_error+0x24>
80004736:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
	case AVR32_USBB_UPERR0_DATAPID_MASK:
	case AVR32_USBB_UPERR0_PID_MASK:
	default:
		return UHD_TRANS_PIDFAILURE;
	}
}
8000473a:	5e fc       	retal	r12
8000473c:	80 00       	ld.sh	r0,r0[0x0]
8000473e:	d5 40       	acall	0x54

80004740 <uhd_get_pipe>:
 * \param endp  Endpoint number
 *
 * \return Pipe number
 */
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
80004740:	eb cd 40 fc 	pushm	r2-r7,lr
80004744:	18 98       	mov	r8,r12
80004746:	fe 6a 05 00 	mov	r10,-129792
8000474a:	30 09       	mov	r9,0
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
8000474c:	fe 64 00 00 	mov	r4,-131072
80004750:	30 15       	mov	r5,1
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80004752:	37 f3       	mov	r3,127
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80004754:	e0 62 00 80 	mov	r2,128
 * \param endp  Endpoint number
 *
 * \return Pipe number
 */
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
80004758:	f9 d9 c0 08 	bfextu	r12,r9,0x0,0x8
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
8000475c:	e8 fe 04 1c 	ld.w	lr,r4[1052]
80004760:	12 96       	mov	r6,r9
80004762:	ea 09 09 47 	lsl	r7,r5,r9
80004766:	ef ee 00 0e 	and	lr,r7,lr
8000476a:	c2 40       	breq	800047b2 <uhd_get_pipe+0x72>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
8000476c:	18 9e       	mov	lr,r12
8000476e:	e2 1e 00 fc 	andl	lr,0xfc,COH
80004772:	e0 3e fb dc 	sub	lr,130012
80004776:	7c 07       	ld.w	r7,lr[0x0]
80004778:	ed d9 c0 02 	bfextu	r6,r9,0x0,0x2
8000477c:	a3 76       	lsl	r6,0x3
8000477e:	e6 06 09 46 	lsl	r6,r3,r6
80004782:	0c 9e       	mov	lr,r6
80004784:	5c 9e       	brev	lr
80004786:	fc 0e 12 00 	clz	lr,lr
8000478a:	ef e6 00 06 	and	r6,r7,r6
8000478e:	ec 0e 0a 46 	lsr	r6,r6,lr
80004792:	0c 38       	cp.w	r8,r6
80004794:	c0 f1       	brne	800047b2 <uhd_get_pipe+0x72>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80004796:	74 07       	ld.w	r7,r10[0x0]
80004798:	74 0e       	ld.w	lr,r10[0x0]
8000479a:	fd de c1 02 	bfextu	lr,lr,0x8,0x2
8000479e:	58 1e       	cp.w	lr,1
800047a0:	e4 0e 17 00 	moveq	lr,r2
800047a4:	f9 be 01 00 	movne	lr,0
800047a8:	ef d7 c2 04 	bfextu	r7,r7,0x10,0x4
800047ac:	0e 4e       	or	lr,r7
800047ae:	1c 3b       	cp.w	r11,lr
800047b0:	c0 70       	breq	800047be <uhd_get_pipe+0x7e>
800047b2:	2f fc       	sub	r12,-1
800047b4:	5c 5c       	castu.b	r12
800047b6:	2f f9       	sub	r9,-1
800047b8:	2f ca       	sub	r10,-4
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
800047ba:	58 79       	cp.w	r9,7
800047bc:	cc e1       	brne	80004758 <uhd_get_pipe+0x18>
			continue;
		}
		break;
	}
	return pipe;
}
800047be:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800047c2:	d7 03       	nop

800047c4 <uhd_pipe_finish_job>:
 *
 * \param pipe   Pipe number
 * \param status Status of the transfer
 */
static void uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
800047c4:	eb cd 40 e0 	pushm	r5-r7,lr
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
800047c8:	18 9a       	mov	r10,r12
800047ca:	f8 c9 00 01 	sub	r9,r12,1
800047ce:	f2 09 00 29 	add	r9,r9,r9<<0x2
800047d2:	49 d8       	lddpc	r8,80004844 <uhd_pipe_finish_job+0x80>
800047d4:	f0 09 00 29 	add	r9,r8,r9<<0x2
	if (ptr_job->busy == false) {
800047d8:	72 08       	ld.w	r8,r9[0x0]
800047da:	58 08       	cp.w	r8,0
800047dc:	c3 24       	brge	80004840 <uhd_pipe_finish_job+0x7c>
		return; // No job running
	}
	ptr_job->busy = false;
800047de:	30 0e       	mov	lr,0
800047e0:	f1 de d3 e1 	bfins	r8,lr,0x1f,0x1
800047e4:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_end) {
800047e6:	72 48       	ld.w	r8,r9[0x10]
800047e8:	58 08       	cp.w	r8,0
800047ea:	c2 b0       	breq	80004840 <uhd_pipe_finish_job+0x7c>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
800047ec:	a3 6a       	lsl	r10,0x2
800047ee:	e0 3a fb 00 	sub	r10,129792
800047f2:	74 0e       	ld.w	lr,r10[0x0]
800047f4:	74 07       	ld.w	r7,r10[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
800047f6:	ef d7 c1 02 	bfextu	r7,r7,0x8,0x2
800047fa:	e0 6a 00 80 	mov	r10,128
800047fe:	58 17       	cp.w	r7,1
80004800:	f4 07 17 00 	moveq	r7,r10
80004804:	f9 b7 01 00 	movne	r7,0
80004808:	18 9a       	mov	r10,r12
8000480a:	e2 1a 03 fc 	andl	r10,0x3fc,COH
8000480e:	e0 3a fb dc 	sub	r10,130012
80004812:	74 05       	ld.w	r5,r10[0x0]
80004814:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
80004818:	a3 7c       	lsl	r12,0x3
8000481a:	37 fa       	mov	r10,127
8000481c:	f4 0c 09 4a 	lsl	r10,r10,r12
80004820:	14 96       	mov	r6,r10
80004822:	5c 96       	brev	r6
80004824:	ec 06 12 00 	clz	r6,r6
80004828:	fd de c2 04 	bfextu	lr,lr,0x10,0x4
8000482c:	f5 e5 00 0c 	and	r12,r10,r5
80004830:	f8 06 0a 4c 	lsr	r12,r12,r6
80004834:	72 39       	ld.w	r9,r9[0xc]
80004836:	16 9a       	mov	r10,r11
80004838:	ef ee 10 0b 	or	r11,r7,lr
8000483c:	5c 5c       	castu.b	r12
8000483e:	5d 18       	icall	r8
80004840:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004844:	00 00       	add	r0,r0
80004846:	0a 54       	eor	r4,r5

80004848 <uhd_ep_abort_pipe>:
 *
 * \param pipe   Pipe number
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
80004848:	d4 01       	pushm	lr
8000484a:	18 99       	mov	r9,r12
	// Stop transfer
	uhd_reset_pipe(pipe);
8000484c:	fe 68 00 00 	mov	r8,-131072
80004850:	f0 fe 04 1c 	ld.w	lr,r8[1052]
80004854:	e0 7a 00 00 	mov	r10,65536
80004858:	f4 0c 09 4a 	lsl	r10,r10,r12
8000485c:	f5 ee 10 0e 	or	lr,r10,lr
80004860:	f1 4e 04 1c 	st.w	r8[1052],lr
80004864:	f0 fe 04 1c 	ld.w	lr,r8[1052]
80004868:	5c da       	com	r10
8000486a:	1c 6a       	and	r10,lr
8000486c:	f1 4a 04 1c 	st.w	r8[1052],r10

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80004870:	f8 08 15 02 	lsl	r8,r12,0x2
80004874:	fe 6e 05 00 	mov	lr,-129792
80004878:	f0 0e 00 0a 	add	r10,r8,lr
8000487c:	74 0e       	ld.w	lr,r10[0x0]
8000487e:	ab ae       	sbr	lr,0xa
80004880:	95 0e       	st.w	r10[0x0],lr
	uhd_enable_stall_interrupt(pipe);
80004882:	fe 6e 05 f0 	mov	lr,-129552
80004886:	f0 0e 00 0a 	add	r10,r8,lr
8000488a:	34 0e       	mov	lr,64
8000488c:	95 0e       	st.w	r10[0x0],lr
	uhd_enable_pipe_error_interrupt(pipe);
8000488e:	30 8e       	mov	lr,8
80004890:	95 0e       	st.w	r10[0x0],lr

	uhd_disable_out_ready_interrupt(pipe);
80004892:	e0 38 f9 e0 	sub	r8,129504
80004896:	30 2a       	mov	r10,2
80004898:	91 0a       	st.w	r8[0x0],r10
	uhd_pipe_dma_set_control(pipe, 0);
8000489a:	a5 69       	lsl	r9,0x4
8000489c:	e0 39 f9 00 	sub	r9,129280
800048a0:	30 08       	mov	r8,0
800048a2:	93 28       	st.w	r9[0x8],r8
	uhd_pipe_finish_job(pipe, status);
800048a4:	f0 1f 00 02 	mcall	800048ac <uhd_ep_abort_pipe+0x64>
}
800048a8:	d8 02       	popm	pc
800048aa:	00 00       	add	r0,r0
800048ac:	80 00       	ld.sh	r0,r0[0x0]
800048ae:	47 c4       	lddsp	r4,sp[0x1f0]

800048b0 <uhd_pipe_trans_complet>:
 * \brief Computes and starts the next transfer on a pipe
 *
 * \param pipe  Pipe number
 */
static void uhd_pipe_trans_complet(uint8_t pipe)
{
800048b0:	eb cd 40 f8 	pushm	r3-r7,lr
	iram_size_t max_trans;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
800048b4:	18 9a       	mov	r10,r12
800048b6:	f8 c8 00 01 	sub	r8,r12,1
800048ba:	f0 08 00 28 	add	r8,r8,r8<<0x2
800048be:	4e a9       	lddpc	r9,80004a64 <uhd_pipe_trans_complet+0x1b4>
800048c0:	f2 08 00 28 	add	r8,r9,r8<<0x2

	if (!ptr_job->busy) {
800048c4:	70 09       	ld.w	r9,r8[0x0]
800048c6:	58 09       	cp.w	r9,0
800048c8:	e0 84 00 cc 	brge	80004a60 <uhd_pipe_trans_complet+0x1b0>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
800048cc:	70 3e       	ld.w	lr,r8[0xc]
800048ce:	70 27       	ld.w	r7,r8[0x8]
800048d0:	0e 3e       	cp.w	lr,r7
800048d2:	e0 80 00 9d 	breq	80004a0c <uhd_pipe_trans_complet+0x15c>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
		max_trans = UHD_PIPE_MAX_TRANS;
		if (uhd_is_pipe_in(pipe)) {
800048d6:	f8 06 15 02 	lsl	r6,r12,0x2
800048da:	fe 6b 05 00 	mov	r11,-129792
800048de:	ec 0b 00 09 	add	r9,r6,r11
800048e2:	72 0b       	ld.w	r11,r9[0x0]
800048e4:	f7 db c1 02 	bfextu	r11,r11,0x8,0x2
800048e8:	58 1b       	cp.w	r11,1
800048ea:	c1 21       	brne	8000490e <uhd_pipe_trans_complet+0x5e>
			// 256 is the maximum of IN requests via UPINRQ
			if ((256L*uhd_get_pipe_size(pipe))<UHD_PIPE_MAX_TRANS) {
800048ec:	72 0b       	ld.w	r11,r9[0x0]
800048ee:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
800048f2:	e0 65 08 00 	mov	r5,2048
800048f6:	ea 0b 09 4b 	lsl	r11,r5,r11
800048fa:	e0 4b ff ff 	cp.w	r11,65535
800048fe:	e0 89 00 08 	brgt	8000490e <uhd_pipe_trans_complet+0x5e>
				 max_trans = 256L * uhd_get_pipe_size(pipe);
80004902:	72 0b       	ld.w	r11,r9[0x0]
80004904:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
80004908:	ea 0b 09 4b 	lsl	r11,r5,r11
8000490c:	c0 38       	rjmp	80004912 <uhd_pipe_trans_complet+0x62>
8000490e:	e0 7b 00 00 	mov	r11,65536
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80004912:	ee 0e 01 0e 	sub	lr,r7,lr
80004916:	1c 3b       	cp.w	r11,lr
80004918:	fc 0b 17 b0 	movhi	r11,lr
			// The USB hardware supports a maximum
			// transfer size of UHD_PIPE_MAX_TRANS Bytes
			next_trans = max_trans;
		}

		if (next_trans == UHD_PIPE_MAX_TRANS) {
8000491c:	e0 5b 00 00 	cp.w	r11,65536
80004920:	c0 31       	brne	80004926 <uhd_pipe_trans_complet+0x76>
80004922:	30 07       	mov	r7,0
80004924:	c0 38       	rjmp	8000492a <uhd_pipe_trans_complet+0x7a>
			// Set 0 to transfer the maximum
			uhd_dma_ctrl = (0 <<
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			uhd_dma_ctrl = (next_trans <<
80004926:	f6 07 15 10 	lsl	r7,r11,0x10
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}

		if (uhd_is_pipe_out(pipe)) {
8000492a:	72 0e       	ld.w	lr,r9[0x0]
8000492c:	fd de c1 02 	bfextu	lr,lr,0x8,0x2
80004930:	58 2e       	cp.w	lr,2
80004932:	c1 21       	brne	80004956 <uhd_pipe_trans_complet+0xa6>
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
80004934:	72 0e       	ld.w	lr,r9[0x0]
80004936:	fd de c0 83 	bfextu	lr,lr,0x4,0x3
8000493a:	30 85       	mov	r5,8
8000493c:	ea 0e 09 4e 	lsl	lr,r5,lr
80004940:	20 1e       	sub	lr,1
80004942:	f7 ee 00 0e 	and	lr,r11,lr
80004946:	c1 70       	breq	80004974 <uhd_pipe_trans_complet+0xc4>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
80004948:	0a 47       	or	r7,r5
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
8000494a:	70 0e       	ld.w	lr,r8[0x0]
8000494c:	30 05       	mov	r5,0
8000494e:	fd d5 d3 c1 	bfins	lr,r5,0x1e,0x1
80004952:	91 0e       	st.w	r8[0x0],lr
80004954:	c1 08       	rjmp	80004974 <uhd_pipe_trans_complet+0xc4>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
80004956:	72 0e       	ld.w	lr,r9[0x0]
80004958:	fd de c1 82 	bfextu	lr,lr,0xc,0x2
8000495c:	58 1e       	cp.w	lr,1
8000495e:	c0 91       	brne	80004970 <uhd_pipe_trans_complet+0xc0>
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
80004960:	72 0e       	ld.w	lr,r9[0x0]
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
80004962:	fd de c0 83 	bfextu	lr,lr,0x4,0x3
80004966:	30 85       	mov	r5,8
80004968:	ea 0e 09 4e 	lsl	lr,r5,lr
8000496c:	16 3e       	cp.w	lr,r11
8000496e:	c0 33       	brcs	80004974 <uhd_pipe_trans_complet+0xc4>
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
				// Enable short packet reception
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOT_IRQ_EN_MASK
80004970:	e8 17 00 14 	orl	r7,0x14
						| AVR32_USBB_UHDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80004974:	f4 0e 15 04 	lsl	lr,r10,0x4
80004978:	e0 3e f9 00 	sub	lr,129280
8000497c:	70 14       	ld.w	r4,r8[0x4]
8000497e:	70 35       	ld.w	r5,r8[0xc]
80004980:	e8 05 00 05 	add	r5,r4,r5
80004984:	9d 15       	st.w	lr[0x4],r5

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004986:	e1 b4 00 00 	mfsr	r4,0x0
	cpu_irq_disable();
8000498a:	d3 03       	ssrf	0x10
				AVR32_USBB_UHDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if( !(uhd_pipe_dma_get_status(pipe)
8000498c:	7c 35       	ld.w	r5,lr[0xc]
8000498e:	e2 15 00 10 	andl	r5,0x10,COH
80004992:	c3 71       	brne	80004a00 <uhd_pipe_trans_complet+0x150>
				& AVR32_USBB_UHDMA1_STATUS_EOT_STA_MASK)) {
			if (uhd_is_pipe_in(pipe)) {
80004994:	72 0a       	ld.w	r10,r9[0x0]
80004996:	f5 da c1 02 	bfextu	r10,r10,0x8,0x2
8000499a:	58 1a       	cp.w	r10,1
8000499c:	c1 d1       	brne	800049d6 <uhd_pipe_trans_complet+0x126>
				uhd_in_request_number(pipe,
8000499e:	fe 6c 06 50 	mov	r12,-129456
800049a2:	ec 0c 00 0a 	add	r10,r6,r12
800049a6:	74 05       	ld.w	r5,r10[0x0]
800049a8:	72 0c       	ld.w	r12,r9[0x0]
800049aa:	72 09       	ld.w	r9,r9[0x0]
800049ac:	f9 dc c0 83 	bfextu	r12,r12,0x4,0x3
800049b0:	30 83       	mov	r3,8
800049b2:	e6 0c 09 4c 	lsl	r12,r3,r12
800049b6:	20 1c       	sub	r12,1
800049b8:	16 0c       	add	r12,r11
800049ba:	f3 d9 c0 83 	bfextu	r9,r9,0x4,0x3
800049be:	2f d9       	sub	r9,-3
800049c0:	f8 09 0a 4c 	lsr	r12,r12,r9
800049c4:	20 1c       	sub	r12,1
800049c6:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8
800049ca:	0a 99       	mov	r9,r5
800049cc:	e0 19 ff 00 	andl	r9,0xff00
800049d0:	f9 e9 10 09 	or	r9,r12,r9
800049d4:	95 09       	st.w	r10[0x0],r9
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
800049d6:	e0 36 f9 e0 	sub	r6,129504
800049da:	e0 69 10 00 	mov	r9,4096
800049de:	8d 09       	st.w	r6[0x0],r9
			uhd_unfreeze_pipe(pipe);
800049e0:	e2 69 00 00 	mov	r9,131072
800049e4:	8d 09       	st.w	r6[0x0],r9
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800049e6:	e8 17 00 21 	orl	r7,0x21
				uhd_in_request_number(pipe,
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
			uhd_unfreeze_pipe(pipe);
			uhd_pipe_dma_set_control(pipe, uhd_dma_ctrl);
800049ea:	9d 27       	st.w	lr[0x8],r7
			ptr_job->nb_trans += next_trans;
800049ec:	70 39       	ld.w	r9,r8[0xc]
800049ee:	f2 0b 00 0b 	add	r11,r9,r11
800049f2:	91 3b       	st.w	r8[0xc],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800049f4:	e6 14 00 01 	andh	r4,0x1,COH
800049f8:	c0 21       	brne	800049fc <uhd_pipe_trans_complet+0x14c>
      cpu_irq_enable();
800049fa:	d5 03       	csrf	0x10
			cpu_irq_restore(flags);
			return;
800049fc:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004a00:	e6 14 00 01 	andh	r4,0x1,COH
80004a04:	c0 21       	brne	80004a08 <uhd_pipe_trans_complet+0x158>
      cpu_irq_enable();
80004a06:	d5 03       	csrf	0x10
		}
		cpu_irq_restore(flags);
		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80004a08:	70 39       	ld.w	r9,r8[0xc]
80004a0a:	91 29       	st.w	r8[0x8],r9
	}
	if (uhd_is_pipe_out(pipe)) {
80004a0c:	a3 6a       	lsl	r10,0x2
80004a0e:	fe 6b 05 00 	mov	r11,-129792
80004a12:	f4 0b 00 09 	add	r9,r10,r11
80004a16:	72 09       	ld.w	r9,r9[0x0]
80004a18:	f3 d9 c1 02 	bfextu	r9,r9,0x8,0x2
80004a1c:	58 29       	cp.w	r9,2
80004a1e:	c1 e1       	brne	80004a5a <uhd_pipe_trans_complet+0x1aa>
		if (ptr_job->b_shortpacket) {
80004a20:	70 08       	ld.w	r8,r8[0x0]
80004a22:	e6 18 40 00 	andh	r8,0x4000,COH
80004a26:	c1 a0       	breq	80004a5a <uhd_pipe_trans_complet+0x1aa>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			uhd_ack_out_ready(pipe);
80004a28:	fe 69 05 60 	mov	r9,-129696
80004a2c:	f4 09 00 08 	add	r8,r10,r9
80004a30:	30 29       	mov	r9,2
80004a32:	91 09       	st.w	r8[0x0],r9
			if (Is_uhd_write_enabled(pipe)) {
80004a34:	fe 6c 05 30 	mov	r12,-129744
80004a38:	f4 0c 00 08 	add	r8,r10,r12
80004a3c:	70 08       	ld.w	r8,r8[0x0]
80004a3e:	e6 18 00 01 	andh	r8,0x1,COH
80004a42:	c0 60       	breq	80004a4e <uhd_pipe_trans_complet+0x19e>
				// Force interrupt in case of pipe already free
				uhd_raise_out_ready(pipe);
80004a44:	fe 6b 05 90 	mov	r11,-129648
80004a48:	f4 0b 00 08 	add	r8,r10,r11
80004a4c:	91 09       	st.w	r8[0x0],r9
			}
			uhd_enable_out_ready_interrupt(pipe);
80004a4e:	e0 3a fa 10 	sub	r10,129552
80004a52:	30 28       	mov	r8,2
80004a54:	95 08       	st.w	r10[0x0],r8
			return;
80004a56:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
		}
	}
	// Call callback to signal end of transfer
	uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
80004a5a:	30 0b       	mov	r11,0
80004a5c:	f0 1f 00 03 	mcall	80004a68 <uhd_pipe_trans_complet+0x1b8>
80004a60:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80004a64:	00 00       	add	r0,r0
80004a66:	0a 54       	eor	r4,r5
80004a68:	80 00       	ld.sh	r0,r0[0x0]
80004a6a:	47 c4       	lddsp	r4,sp[0x1f0]

80004a6c <uhd_ep_run>:
		bool b_shortpacket,
		uint8_t *buf,
		iram_size_t buf_size,
		uint16_t timeout,
		uhd_callback_trans_t callback)
{
80004a6c:	eb cd 40 f8 	pushm	r3-r7,lr
80004a70:	fa c4 ff e8 	sub	r4,sp,-24
80004a74:	14 93       	mov	r3,r10
80004a76:	12 96       	mov	r6,r9
80004a78:	10 95       	mov	r5,r8
80004a7a:	68 07       	ld.w	r7,r4[0x0]
80004a7c:	68 14       	ld.w	r4,r4[0x4]
	irqflags_t flags;
	uint8_t pipe;
	uhd_pipe_job_t *ptr_job;

	pipe = uhd_get_pipe(add,endp);
80004a7e:	f0 1f 00 1a 	mcall	80004ae4 <uhd_ep_run+0x78>
	if (pipe == AVR32_USBB_EPT_NUM) {
80004a82:	30 78       	mov	r8,7
80004a84:	f0 0c 18 00 	cp.b	r12,r8
80004a88:	c0 31       	brne	80004a8e <uhd_ep_run+0x22>
80004a8a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		return false; // pipe not found
	}

	// Get job about pipe
	ptr_job = &uhd_pipe_job[pipe-1];
80004a8e:	f8 c8 00 01 	sub	r8,r12,1
80004a92:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004a96:	49 59       	lddpc	r9,80004ae8 <uhd_ep_run+0x7c>
80004a98:	f2 08 00 28 	add	r8,r9,r8<<0x2

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004a9c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80004aa0:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80004aa2:	70 09       	ld.w	r9,r8[0x0]
80004aa4:	58 09       	cp.w	r9,0
80004aa6:	c0 74       	brge	80004ab4 <uhd_ep_run+0x48>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004aa8:	e6 1a 00 01 	andh	r10,0x1,COH
80004aac:	c0 21       	brne	80004ab0 <uhd_ep_run+0x44>
      cpu_irq_enable();
80004aae:	d5 03       	csrf	0x10
   }

	barrier();
80004ab0:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
80004ab4:	70 09       	ld.w	r9,r8[0x0]
80004ab6:	30 1b       	mov	r11,1
80004ab8:	f3 db d3 e1 	bfins	r9,r11,0x1f,0x1
80004abc:	91 09       	st.w	r8[0x0],r9

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
80004abe:	91 16       	st.w	r8[0x4],r6
	ptr_job->buf_size = buf_size;
80004ac0:	91 25       	st.w	r8[0x8],r5
	ptr_job->nb_trans = 0;
80004ac2:	30 09       	mov	r9,0
80004ac4:	91 39       	st.w	r8[0xc],r9
	ptr_job->timeout = timeout;
80004ac6:	b0 17       	st.h	r8[0x2],r7
	ptr_job->b_shortpacket = b_shortpacket;
80004ac8:	70 09       	ld.w	r9,r8[0x0]
80004aca:	f3 d3 d3 c1 	bfins	r9,r3,0x1e,0x1
80004ace:	91 09       	st.w	r8[0x0],r9
	ptr_job->call_end = callback;
80004ad0:	91 44       	st.w	r8[0x10],r4
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004ad2:	e6 1a 00 01 	andh	r10,0x1,COH
80004ad6:	c0 21       	brne	80004ada <uhd_ep_run+0x6e>
      cpu_irq_enable();
80004ad8:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// Request first transfer
	uhd_pipe_trans_complet(pipe);
80004ada:	f0 1f 00 05 	mcall	80004aec <uhd_ep_run+0x80>
80004ade:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
80004ae2:	00 00       	add	r0,r0
80004ae4:	80 00       	ld.sh	r0,r0[0x0]
80004ae6:	47 40       	lddsp	r0,sp[0x1d0]
80004ae8:	00 00       	add	r0,r0
80004aea:	0a 54       	eor	r4,r5
80004aec:	80 00       	ld.sh	r0,r0[0x0]
80004aee:	48 b0       	lddpc	r0,80004b18 <uhd_sleep_mode+0x28>

80004af0 <uhd_sleep_mode>:
/*! \brief Manages the sleep mode following the USBB state
 *
 * \param new_state  New USBB state
 */
static void uhd_sleep_mode(enum uhd_usbb_state_enum new_state)
{
80004af0:	20 6d       	sub	sp,24
		SLEEPMGR_STOP,   // UHD_STATE_NO_VBUS
#endif
		SLEEPMGR_IDLE,   // UHD_STATE_DISCONNECT
		SLEEPMGR_STATIC, // UHD_STATE_SUSPEND
		SLEEPMGR_IDLE,   // UHD_STATE_IDLE
	};
80004af2:	4a a9       	lddpc	r9,80004b98 <uhd_sleep_mode+0xa8>
80004af4:	f2 ea 00 00 	ld.d	r10,r9[0]
80004af8:	fa eb 00 00 	st.d	sp[0],r10
80004afc:	f2 ea 00 08 	ld.d	r10,r9[8]
80004b00:	fa eb 00 08 	st.d	sp[8],r10
80004b04:	f2 ea 00 10 	ld.d	r10,r9[16]
80004b08:	fa eb 00 10 	st.d	sp[16],r10
	static enum uhd_usbb_state_enum uhd_state = UHD_STATE_OFF;

	if (uhd_state == new_state) {
80004b0c:	4a 48       	lddpc	r8,80004b9c <uhd_sleep_mode+0xac>
80004b0e:	70 08       	ld.w	r8,r8[0x0]
80004b10:	18 38       	cp.w	r8,r12
80004b12:	c4 10       	breq	80004b94 <uhd_sleep_mode+0xa4>
		return; // No change
	}
	if (new_state != UHD_STATE_OFF) {
80004b14:	58 0c       	cp.w	r12,0
80004b16:	c1 d0       	breq	80004b50 <uhd_sleep_mode+0x60>
		// Lock new limit
		sleepmgr_lock_mode( sleep_mode[new_state] );
80004b18:	fa c9 ff e8 	sub	r9,sp,-24
80004b1c:	f2 0c 00 28 	add	r8,r9,r12<<0x2
80004b20:	f0 f8 ff e8 	ld.w	r8,r8[-24]
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
80004b24:	49 f9       	lddpc	r9,80004ba0 <uhd_sleep_mode+0xb0>
80004b26:	f2 08 07 0a 	ld.ub	r10,r9[r8]
80004b2a:	3f f9       	mov	r9,-1
80004b2c:	f2 0a 18 00 	cp.b	r10,r9
80004b30:	c0 21       	brne	80004b34 <uhd_sleep_mode+0x44>
80004b32:	c0 08       	rjmp	80004b32 <uhd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004b34:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80004b38:	d3 03       	ssrf	0x10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80004b3a:	49 a9       	lddpc	r9,80004ba0 <uhd_sleep_mode+0xb0>
80004b3c:	f2 08 07 0b 	ld.ub	r11,r9[r8]
80004b40:	2f fb       	sub	r11,-1
80004b42:	f2 08 0b 0b 	st.b	r9[r8],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004b46:	14 98       	mov	r8,r10
80004b48:	e6 18 00 01 	andh	r8,0x1,COH
80004b4c:	c0 21       	brne	80004b50 <uhd_sleep_mode+0x60>
      cpu_irq_enable();
80004b4e:	d5 03       	csrf	0x10
	}
	if (uhd_state != UHD_STATE_OFF) {
80004b50:	49 38       	lddpc	r8,80004b9c <uhd_sleep_mode+0xac>
80004b52:	70 08       	ld.w	r8,r8[0x0]
80004b54:	58 08       	cp.w	r8,0
80004b56:	c1 d0       	breq	80004b90 <uhd_sleep_mode+0xa0>
		// Unlock old limit
		sleepmgr_unlock_mode( sleep_mode[uhd_state] );
80004b58:	fa c9 ff e8 	sub	r9,sp,-24
80004b5c:	f2 08 00 28 	add	r8,r9,r8<<0x2
80004b60:	f0 f8 ff e8 	ld.w	r8,r8[-24]
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
80004b64:	48 f9       	lddpc	r9,80004ba0 <uhd_sleep_mode+0xb0>
80004b66:	f2 08 07 0a 	ld.ub	r10,r9[r8]
80004b6a:	30 09       	mov	r9,0
80004b6c:	f2 0a 18 00 	cp.b	r10,r9
80004b70:	c0 21       	brne	80004b74 <uhd_sleep_mode+0x84>
80004b72:	c0 08       	rjmp	80004b72 <uhd_sleep_mode+0x82>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004b74:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80004b78:	d3 03       	ssrf	0x10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80004b7a:	48 a9       	lddpc	r9,80004ba0 <uhd_sleep_mode+0xb0>
80004b7c:	f2 08 07 0b 	ld.ub	r11,r9[r8]
80004b80:	20 1b       	sub	r11,1
80004b82:	f2 08 0b 0b 	st.b	r9[r8],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004b86:	14 98       	mov	r8,r10
80004b88:	e6 18 00 01 	andh	r8,0x1,COH
80004b8c:	c0 21       	brne	80004b90 <uhd_sleep_mode+0xa0>
      cpu_irq_enable();
80004b8e:	d5 03       	csrf	0x10
	}
	uhd_state = new_state;
80004b90:	48 38       	lddpc	r8,80004b9c <uhd_sleep_mode+0xac>
80004b92:	91 0c       	st.w	r8[0x0],r12
}
80004b94:	2f ad       	sub	sp,-24
80004b96:	5e fc       	retal	r12
80004b98:	80 00       	ld.sh	r0,r0[0x0]
80004b9a:	d5 28       	*unknown*
80004b9c:	00 00       	add	r0,r0
80004b9e:	0a 4c       	or	r12,r5
80004ba0:	00 00       	add	r0,r0
80004ba2:	0b d4       	ld.ub	r4,r5[0x5]

80004ba4 <uhd_resume>:
{
	return !Is_uhd_sof_enabled();
}

void uhd_resume(void)
{
80004ba4:	d4 01       	pushm	lr
	if (Is_uhd_sof_enabled()) {
80004ba6:	fe 68 04 00 	mov	r8,-130048
80004baa:	70 08       	ld.w	r8,r8[0x0]
80004bac:	e2 18 01 00 	andl	r8,0x100,COH
80004bb0:	c0 e0       	breq	80004bcc <uhd_resume+0x28>
		// Currently in IDLE mode (!=Suspend)
		if (uhd_suspend_start) {
80004bb2:	49 38       	lddpc	r8,80004bfc <uhd_resume+0x58>
80004bb4:	11 89       	ld.ub	r9,r8[0x0]
80004bb6:	30 08       	mov	r8,0
80004bb8:	f0 09 18 00 	cp.b	r9,r8
80004bbc:	c1 e0       	breq	80004bf8 <uhd_resume+0x54>
			// Suspend mode on going
			// then stop it and start resume event
			uhd_suspend_start = 0;
80004bbe:	10 99       	mov	r9,r8
80004bc0:	48 f8       	lddpc	r8,80004bfc <uhd_resume+0x58>
80004bc2:	b0 89       	st.b	r8[0x0],r9
			uhd_resume_start = 1;
80004bc4:	30 19       	mov	r9,1
80004bc6:	48 f8       	lddpc	r8,80004c00 <uhd_resume+0x5c>
80004bc8:	b0 89       	st.b	r8[0x0],r9
80004bca:	d8 02       	popm	pc
		}
		return;
	}
	// Check USB clock ready after a potential sleep mode < IDLE
	while (!Is_otg_clock_usable());
80004bcc:	fe 69 08 04 	mov	r9,-129020
80004bd0:	72 08       	ld.w	r8,r9[0x0]
80004bd2:	e2 18 40 00 	andl	r8,0x4000,COH
80004bd6:	cf d0       	breq	80004bd0 <uhd_resume+0x2c>
	otg_unfreeze_clock();
80004bd8:	fe 68 08 00 	mov	r8,-129024
80004bdc:	70 09       	ld.w	r9,r8[0x0]
80004bde:	af c9       	cbr	r9,0xe
80004be0:	91 09       	st.w	r8[0x0],r9
	uhd_enable_sof();
80004be2:	fe 68 04 00 	mov	r8,-130048
80004be6:	70 09       	ld.w	r9,r8[0x0]
80004be8:	a9 a9       	sbr	r9,0x8
80004bea:	91 09       	st.w	r8[0x0],r9
	uhd_send_resume();
80004bec:	70 09       	ld.w	r9,r8[0x0]
80004bee:	ab a9       	sbr	r9,0xa
80004bf0:	91 09       	st.w	r8[0x0],r9
	uhd_sleep_mode(UHD_STATE_IDLE);
80004bf2:	30 5c       	mov	r12,5
80004bf4:	f0 1f 00 04 	mcall	80004c04 <uhd_resume+0x60>
80004bf8:	d8 02       	popm	pc
80004bfa:	00 00       	add	r0,r0
80004bfc:	00 00       	add	r0,r0
80004bfe:	0a cc       	st.b	r5++,r12
80004c00:	00 00       	add	r0,r0
80004c02:	0a ce       	st.b	r5++,lr
80004c04:	80 00       	ld.sh	r0,r0[0x0]
80004c06:	4a f0       	lddpc	r0,80004cc0 <uhd_ctrl_phase_setup+0x38>

80004c08 <uhd_ctrl_request_end>:
 * \internal
 * \brief Call the callback linked to control request
 * and start the next request from the queue.
*/
static void uhd_ctrl_request_end(uhd_trans_status_t status)
{
80004c08:	eb cd 40 e0 	pushm	r5-r7,lr
80004c0c:	18 95       	mov	r5,r12
	irqflags_t flags;
	uhd_callback_setup_end_t callback_end;
	struct uhd_ctrl_request_t *request_to_free;
	bool b_new_request;

	uhd_ctrl_request_timeout = 0;
80004c0e:	30 09       	mov	r9,0
80004c10:	49 78       	lddpc	r8,80004c6c <uhd_ctrl_request_end+0x64>
80004c12:	b0 09       	st.h	r8[0x0],r9

	// Remove request from the control request list
	callback_end = uhd_ctrl_request_first->callback_end;
80004c14:	49 78       	lddpc	r8,80004c70 <uhd_ctrl_request_end+0x68>
80004c16:	70 0c       	ld.w	r12,r8[0x0]
80004c18:	78 66       	ld.w	r6,r12[0x18]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004c1a:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80004c1e:	d3 03       	ssrf	0x10
	request_to_free = uhd_ctrl_request_first;
	flags = cpu_irq_save();
	uhd_ctrl_request_first = uhd_ctrl_request_first->next_request;
80004c20:	70 0a       	ld.w	r10,r8[0x0]
80004c22:	74 77       	ld.w	r7,r10[0x1c]
80004c24:	91 07       	st.w	r8[0x0],r7
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004c26:	12 98       	mov	r8,r9
80004c28:	e6 18 00 01 	andh	r8,0x1,COH
80004c2c:	c0 21       	brne	80004c30 <uhd_ctrl_request_end+0x28>
      cpu_irq_enable();
80004c2e:	d5 03       	csrf	0x10
	b_new_request = (uhd_ctrl_request_first != NULL);
	cpu_irq_restore(flags);
	free(request_to_free);
80004c30:	f0 1f 00 11 	mcall	80004c74 <uhd_ctrl_request_end+0x6c>

	// Call callback
	if (callback_end != NULL) {
80004c34:	58 06       	cp.w	r6,0
80004c36:	c0 a0       	breq	80004c4a <uhd_ctrl_request_end+0x42>
		callback_end(uhd_get_configured_address(0), status, uhd_ctrl_nb_trans);
80004c38:	fe 68 04 24 	mov	r8,-130012
80004c3c:	70 0c       	ld.w	r12,r8[0x0]
80004c3e:	48 f8       	lddpc	r8,80004c78 <uhd_ctrl_request_end+0x70>
80004c40:	90 8a       	ld.uh	r10,r8[0x0]
80004c42:	0a 9b       	mov	r11,r5
80004c44:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80004c48:	5d 16       	icall	r6
	}

	// If a setup request is pending and no started by previous callback
	if (b_new_request) {
80004c4a:	58 07       	cp.w	r7,0
80004c4c:	c0 30       	breq	80004c52 <uhd_ctrl_request_end+0x4a>
		uhd_ctrl_phase_setup();
80004c4e:	f0 1f 00 0c 	mcall	80004c7c <uhd_ctrl_request_end+0x74>
	}
	if (uhd_b_suspend_requested) {
80004c52:	48 c8       	lddpc	r8,80004c80 <uhd_ctrl_request_end+0x78>
80004c54:	11 89       	ld.ub	r9,r8[0x0]
80004c56:	30 08       	mov	r8,0
80004c58:	f0 09 18 00 	cp.b	r9,r8
80004c5c:	c0 60       	breq	80004c68 <uhd_ctrl_request_end+0x60>
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
80004c5e:	10 99       	mov	r9,r8
80004c60:	48 88       	lddpc	r8,80004c80 <uhd_ctrl_request_end+0x78>
80004c62:	b0 89       	st.b	r8[0x0],r9
		uhd_suspend();
80004c64:	f0 1f 00 08 	mcall	80004c84 <uhd_ctrl_request_end+0x7c>
80004c68:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004c6c:	00 00       	add	r0,r0
80004c6e:	0b d0       	ld.ub	r0,r5[0x5]
80004c70:	00 00       	add	r0,r0
80004c72:	0b c4       	ld.ub	r4,r5[0x4]
80004c74:	80 00       	ld.sh	r0,r0[0x0]
80004c76:	79 24       	ld.w	r4,r12[0x48]
80004c78:	00 00       	add	r0,r0
80004c7a:	0b c8       	ld.ub	r8,r5[0x4]
80004c7c:	80 00       	ld.sh	r0,r0[0x0]
80004c7e:	4c 88       	lddpc	r8,80004d9c <uhd_setup_request+0x48>
80004c80:	00 00       	add	r0,r0
80004c82:	0a cf       	st.b	r5++,pc
80004c84:	80 00       	ld.sh	r0,r0[0x0]
80004c86:	45 38       	lddsp	r8,sp[0x14c]

80004c88 <uhd_ctrl_phase_setup>:
/**
 * \internal
 * \brief Sends a USB setup packet to start a control request sequence
 */
static void uhd_ctrl_phase_setup(void)
{
80004c88:	eb cd 40 80 	pushm	r7,lr
80004c8c:	20 2d       	sub	sp,8
		usb_setup_req_t req;
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
80004c8e:	30 07       	mov	r7,0
80004c90:	4a b8       	lddpc	r8,80004d3c <uhd_ctrl_phase_setup+0xb4>
80004c92:	91 07       	st.w	r8[0x0],r7
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80004c94:	4a b8       	lddpc	r8,80004d40 <uhd_ctrl_phase_setup+0xb8>
80004c96:	70 0b       	ld.w	r11,r8[0x0]
80004c98:	30 8a       	mov	r10,8
80004c9a:	2f fb       	sub	r11,-1
80004c9c:	1a 9c       	mov	r12,sp
80004c9e:	f0 1f 00 2a 	mcall	80004d44 <uhd_ctrl_phase_setup+0xbc>
80004ca2:	40 09       	lddsp	r9,sp[0x0]
80004ca4:	40 18       	lddsp	r8,sp[0x4]

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
80004ca6:	f5 d9 b0 10 	bfexts	r10,r9,0x0,0x10
80004caa:	5c ca       	swap.bh	r10
80004cac:	5c 8a       	casts.h	r10
80004cae:	f3 da d0 10 	bfins	r9,r10,0x0,0x10
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
80004cb2:	f0 0a 14 10 	asr	r10,r8,0x10
80004cb6:	5c ca       	swap.bh	r10
80004cb8:	5c 8a       	casts.h	r10
80004cba:	f1 da d2 10 	bfins	r8,r10,0x10,0x10
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80004cbe:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
80004cc2:	5c ca       	swap.bh	r10
80004cc4:	5c 8a       	casts.h	r10
	uhd_ctrl_nb_trans = 0;
80004cc6:	4a 1b       	lddpc	r11,80004d48 <uhd_ctrl_phase_setup+0xc0>
80004cc8:	b6 07       	st.h	r11[0x0],r7
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80004cca:	fe 6b 00 00 	mov	r11,-131072
80004cce:	f6 fb 04 1c 	ld.w	r11,r11[1052]
80004cd2:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
80004cd6:	c0 b0       	breq	80004cec <uhd_ctrl_phase_setup+0x64>
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
80004cd8:	fe 6b 04 24 	mov	r11,-130012
80004cdc:	76 0b       	ld.w	r11,r11[0x0]
80004cde:	49 9c       	lddpc	r12,80004d40 <uhd_ctrl_phase_setup+0xb8>
80004ce0:	78 0c       	ld.w	r12,r12[0x0]
80004ce2:	19 8c       	ld.ub	r12,r12[0x0]
80004ce4:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7
80004ce8:	16 3c       	cp.w	r12,r11
80004cea:	c0 50       	breq	80004cf4 <uhd_ctrl_phase_setup+0x6c>
		uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
80004cec:	30 1c       	mov	r12,1
80004cee:	f0 1f 00 18 	mcall	80004d4c <uhd_ctrl_phase_setup+0xc4>
		return; // Endpoint not valid
80004cf2:	c2 28       	rjmp	80004d36 <uhd_ctrl_phase_setup+0xae>
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
80004cf4:	fe 6b 05 00 	mov	r11,-129792
80004cf8:	76 0c       	ld.w	r12,r11[0x0]
80004cfa:	e0 1c fc ff 	andl	r12,0xfcff
80004cfe:	97 0c       	st.w	r11[0x0],r12
	uhd_ack_setup_ready(0);
80004d00:	30 4c       	mov	r12,4
80004d02:	fe 6b 05 60 	mov	r11,-129696
80004d06:	97 0c       	st.w	r11[0x0],r12
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80004d08:	f1 da d0 10 	bfins	r8,r10,0x0,0x10
	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
	Assert(sizeof(setup) == sizeof(uint64_t));
	ptr_ep_data = (volatile uint64_t *)&uhd_get_pipe_fifo_access(0, 64);
	*ptr_ep_data = setup.value64;
80004d0c:	12 9b       	mov	r11,r9
80004d0e:	10 9a       	mov	r10,r8
80004d10:	fc 18 e0 00 	movh	r8,0xe000
80004d14:	f0 eb 00 00 	st.d	r8[0],r10

	uhd_ctrl_request_timeout = 5000;
80004d18:	e0 69 13 88 	mov	r9,5000
80004d1c:	48 d8       	lddpc	r8,80004d50 <uhd_ctrl_phase_setup+0xc8>
80004d1e:	b0 09       	st.h	r8[0x0],r9
	uhd_enable_setup_ready_interrupt(0);
80004d20:	fe 68 05 f0 	mov	r8,-129552
80004d24:	91 0c       	st.w	r8[0x0],r12
	uhd_ack_fifocon(0);
80004d26:	fe 68 06 20 	mov	r8,-129504
80004d2a:	e0 69 40 00 	mov	r9,16384
80004d2e:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
80004d30:	e2 69 00 00 	mov	r9,131072
80004d34:	91 09       	st.w	r8[0x0],r9
}
80004d36:	2f ed       	sub	sp,-8
80004d38:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d3c:	00 00       	add	r0,r0
80004d3e:	0b c0       	ld.ub	r0,r5[0x4]
80004d40:	00 00       	add	r0,r0
80004d42:	0b c4       	ld.ub	r4,r5[0x4]
80004d44:	80 00       	ld.sh	r0,r0[0x0]
80004d46:	7d 6c       	ld.w	r12,lr[0x58]
80004d48:	00 00       	add	r0,r0
80004d4a:	0b c8       	ld.ub	r8,r5[0x4]
80004d4c:	80 00       	ld.sh	r0,r0[0x0]
80004d4e:	4c 08       	lddpc	r8,80004e4c <uhd_ep_free+0x74>
80004d50:	00 00       	add	r0,r0
80004d52:	0b d0       	ld.ub	r0,r5[0x5]

80004d54 <uhd_setup_request>:
		usb_setup_req_t *req,
		uint8_t *payload,
		uint16_t payload_size,
		uhd_callback_setup_run_t callback_run,
		uhd_callback_setup_end_t callback_end)
{
80004d54:	eb cd 40 fe 	pushm	r1-r7,lr
80004d58:	18 95       	mov	r5,r12
80004d5a:	16 96       	mov	r6,r11
80004d5c:	14 93       	mov	r3,r10
80004d5e:	12 94       	mov	r4,r9
80004d60:	10 92       	mov	r2,r8
80004d62:	40 81       	lddsp	r1,sp[0x20]
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
80004d64:	32 0c       	mov	r12,32
80004d66:	f0 1f 00 18 	mcall	80004dc4 <uhd_setup_request+0x70>
80004d6a:	18 97       	mov	r7,r12
	if (request == NULL) {
80004d6c:	c0 31       	brne	80004d72 <uhd_setup_request+0x1e>
80004d6e:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
		Assert(false);
		return false;
	}

	// Fill structure
	request->add = (uint8_t) add;
80004d72:	18 c5       	st.b	r12++,r5
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
80004d74:	30 8a       	mov	r10,8
80004d76:	0c 9b       	mov	r11,r6
80004d78:	f0 1f 00 14 	mcall	80004dc8 <uhd_setup_request+0x74>
	request->payload = payload;
80004d7c:	8f 33       	st.w	r7[0xc],r3
	request->payload_size = payload_size;
80004d7e:	ef 54 00 10 	st.h	r7[16],r4
	request->callback_run = callback_run;
80004d82:	8f 52       	st.w	r7[0x14],r2
	request->callback_end = callback_end;
80004d84:	8f 61       	st.w	r7[0x18],r1
	request->next_request = NULL;
80004d86:	30 08       	mov	r8,0
80004d88:	8f 78       	st.w	r7[0x1c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004d8a:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80004d8e:	d3 03       	ssrf	0x10

	// Add this request in the queue
	flags = cpu_irq_save();
	if (uhd_ctrl_request_first == NULL) {
80004d90:	48 f8       	lddpc	r8,80004dcc <uhd_setup_request+0x78>
80004d92:	70 08       	ld.w	r8,r8[0x0]
80004d94:	58 08       	cp.w	r8,0
80004d96:	c0 51       	brne	80004da0 <uhd_setup_request+0x4c>
		uhd_ctrl_request_first = request;
80004d98:	48 d8       	lddpc	r8,80004dcc <uhd_setup_request+0x78>
80004d9a:	91 07       	st.w	r8[0x0],r7
80004d9c:	30 18       	mov	r8,1
80004d9e:	c0 58       	rjmp	80004da8 <uhd_setup_request+0x54>
		b_start_request = true;
	} else {
		uhd_ctrl_request_last->next_request = request;
80004da0:	48 c8       	lddpc	r8,80004dd0 <uhd_setup_request+0x7c>
80004da2:	70 08       	ld.w	r8,r8[0x0]
80004da4:	91 77       	st.w	r8[0x1c],r7
80004da6:	30 08       	mov	r8,0
	}
	uhd_ctrl_request_last = request;
80004da8:	48 aa       	lddpc	r10,80004dd0 <uhd_setup_request+0x7c>
80004daa:	95 07       	st.w	r10[0x0],r7
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004dac:	e6 19 00 01 	andh	r9,0x1,COH
80004db0:	c0 21       	brne	80004db4 <uhd_setup_request+0x60>
      cpu_irq_enable();
80004db2:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (b_start_request) {
80004db4:	58 08       	cp.w	r8,0
80004db6:	c0 31       	brne	80004dbc <uhd_setup_request+0x68>
80004db8:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
		// Start immediately request
		uhd_ctrl_phase_setup();
80004dbc:	f0 1f 00 06 	mcall	80004dd4 <uhd_setup_request+0x80>
80004dc0:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
80004dc4:	80 00       	ld.sh	r0,r0[0x0]
80004dc6:	79 34       	ld.w	r4,r12[0x4c]
80004dc8:	80 00       	ld.sh	r0,r0[0x0]
80004dca:	7d 6c       	ld.w	r12,lr[0x58]
80004dcc:	00 00       	add	r0,r0
80004dce:	0b c4       	ld.ub	r4,r5[0x4]
80004dd0:	00 00       	add	r0,r0
80004dd2:	0b cc       	ld.ub	r12,r5[0x4]
80004dd4:	80 00       	ld.sh	r0,r0[0x0]
80004dd6:	4c 88       	lddpc	r8,80004ef4 <uhd_ep_alloc+0x48>

80004dd8 <uhd_ep_free>:
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
80004dd8:	d4 31       	pushm	r0-r7,lr
80004dda:	18 92       	mov	r2,r12
80004ddc:	16 90       	mov	r0,r11
80004dde:	30 16       	mov	r6,1
80004de0:	30 07       	mov	r7,0
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80004de2:	fe 64 00 00 	mov	r4,-131072
80004de6:	0c 93       	mov	r3,r6
		}
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80004de8:	30 65       	mov	r5,6
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80004dea:	37 f1       	mov	r1,127
80004dec:	c0 48       	rjmp	80004df4 <uhd_ep_free+0x1c>
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
80004dee:	2f f7       	sub	r7,-1
80004df0:	2f f6       	sub	r6,-1
80004df2:	5c 56       	castu.b	r6
80004df4:	0e 98       	mov	r8,r7
80004df6:	5c 58       	castu.b	r8
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80004df8:	e8 fa 04 1c 	ld.w	r10,r4[1052]
80004dfc:	10 9c       	mov	r12,r8
80004dfe:	e6 08 09 49 	lsl	r9,r3,r8
80004e02:	f3 ea 00 0a 	and	r10,r9,r10
80004e06:	c4 70       	breq	80004e94 <uhd_ep_free+0xbc>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80004e08:	10 9a       	mov	r10,r8
80004e0a:	e2 1a 00 fc 	andl	r10,0xfc,COH
80004e0e:	e0 3a fb dc 	sub	r10,130012
80004e12:	74 0e       	ld.w	lr,r10[0x0]
80004e14:	f5 d8 c0 02 	bfextu	r10,r8,0x0,0x2
80004e18:	a3 7a       	lsl	r10,0x3
80004e1a:	e2 0a 09 4a 	lsl	r10,r1,r10
80004e1e:	14 9b       	mov	r11,r10
80004e20:	5c 9b       	brev	r11
80004e22:	f6 0b 12 00 	clz	r11,r11
80004e26:	1c 6a       	and	r10,lr
80004e28:	f4 0b 0a 4a 	lsr	r10,r10,r11
80004e2c:	14 32       	cp.w	r2,r10
80004e2e:	c3 31       	brne	80004e94 <uhd_ep_free+0xbc>
			continue;
		}
		if (endp != 0xFF) {
80004e30:	3f fe       	mov	lr,-1
80004e32:	fc 00 18 00 	cp.b	r0,lr
80004e36:	c1 50       	breq	80004e60 <uhd_ep_free+0x88>
			// Disable specific endpoint number
			if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80004e38:	f0 0a 15 02 	lsl	r10,r8,0x2
80004e3c:	e0 3a fb 00 	sub	r10,129792
80004e40:	74 0b       	ld.w	r11,r10[0x0]
80004e42:	74 0a       	ld.w	r10,r10[0x0]
80004e44:	f5 da c1 02 	bfextu	r10,r10,0x8,0x2
80004e48:	e0 6e 00 80 	mov	lr,128
80004e4c:	58 1a       	cp.w	r10,1
80004e4e:	fc 0a 17 00 	moveq	r10,lr
80004e52:	f9 ba 01 00 	movne	r10,0
80004e56:	f7 db c2 04 	bfextu	r11,r11,0x10,0x4
80004e5a:	16 4a       	or	r10,r11
80004e5c:	14 30       	cp.w	r0,r10
80004e5e:	c1 b1       	brne	80004e94 <uhd_ep_free+0xbc>
				continue; // Mismatch
			}
		}
		// Unalloc pipe
		uhd_disable_pipe(pipe);
80004e60:	e8 fa 04 1c 	ld.w	r10,r4[1052]
80004e64:	5c d9       	com	r9
80004e66:	14 69       	and	r9,r10
80004e68:	e9 49 04 1c 	st.w	r4[1052],r9
		uhd_unallocate_memory(pipe);
80004e6c:	f0 09 15 02 	lsl	r9,r8,0x2
80004e70:	e0 39 fb 00 	sub	r9,129792
80004e74:	72 0a       	ld.w	r10,r9[0x0]
80004e76:	a1 da       	cbr	r10,0x1
80004e78:	93 0a       	st.w	r9[0x0],r10

		// Stop transfer on this pipe
#ifndef USB_HOST_HUB_SUPPORT
		if (pipe == 0) {
80004e7a:	58 08       	cp.w	r8,0
80004e7c:	c0 91       	brne	80004e8e <uhd_ep_free+0xb6>
			// Endpoint control
			if (uhd_ctrl_request_timeout) {
80004e7e:	48 9a       	lddpc	r10,80004ea0 <uhd_ep_free+0xc8>
80004e80:	94 08       	ld.sh	r8,r10[0x0]
80004e82:	58 08       	cp.w	r8,0
80004e84:	c0 80       	breq	80004e94 <uhd_ep_free+0xbc>
				uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
80004e86:	06 9c       	mov	r12,r3
80004e88:	f0 1f 00 07 	mcall	80004ea4 <uhd_ep_free+0xcc>
80004e8c:	cb 1b       	rjmp	80004dee <uhd_ep_free+0x16>
			}
			continue;
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
80004e8e:	06 9b       	mov	r11,r3
80004e90:	f0 1f 00 06 	mcall	80004ea8 <uhd_ep_free+0xd0>
		}
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80004e94:	ea 06 18 00 	cp.b	r6,r5
80004e98:	fe 98 ff ab 	brls	80004dee <uhd_ep_free+0x16>
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
	}
}
80004e9c:	d8 32       	popm	r0-r7,pc
80004e9e:	00 00       	add	r0,r0
80004ea0:	00 00       	add	r0,r0
80004ea2:	0b d0       	ld.ub	r0,r5[0x5]
80004ea4:	80 00       	ld.sh	r0,r0[0x0]
80004ea6:	4c 08       	lddpc	r8,80004fa4 <uhd_ep_alloc+0xf8>
80004ea8:	80 00       	ld.sh	r0,r0[0x0]
80004eaa:	48 48       	lddpc	r8,80004eb8 <uhd_ep_alloc+0xc>

80004eac <uhd_ep_alloc>:
	uhd_enable_pipe_interrupt(0);
	return true;
}

bool uhd_ep_alloc(usb_add_t add, usb_ep_desc_t * ep_desc)
{
80004eac:	d4 31       	pushm	r0-r7,lr
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
80004eae:	fe 68 00 00 	mov	r8,-131072
80004eb2:	f0 f8 04 1c 	ld.w	r8,r8[1052]
80004eb6:	e2 18 00 02 	andl	r8,0x2,COH
80004eba:	c1 60       	breq	80004ee6 <uhd_ep_alloc+0x3a>
80004ebc:	30 09       	mov	r9,0
80004ebe:	fe 64 00 00 	mov	r4,-131072
80004ec2:	30 15       	mov	r5,1
80004ec4:	f2 c6 ff fe 	sub	r6,r9,-2
80004ec8:	5c 56       	castu.b	r6
80004eca:	e8 fa 04 1c 	ld.w	r10,r4[1052]
80004ece:	f2 c8 ff fe 	sub	r8,r9,-2
80004ed2:	ea 08 09 4e 	lsl	lr,r5,r8
80004ed6:	1c 97       	mov	r7,lr
80004ed8:	fd ea 00 0a 	and	r10,lr,r10
80004edc:	c0 90       	breq	80004eee <uhd_ep_alloc+0x42>
80004ede:	2f f9       	sub	r9,-1
	uint8_t ep_type;
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80004ee0:	58 59       	cp.w	r9,5
80004ee2:	cf 11       	brne	80004ec4 <uhd_ep_alloc+0x18>
80004ee4:	c9 a8       	rjmp	80005018 <uhd_ep_alloc+0x16c>
80004ee6:	30 27       	mov	r7,2
80004ee8:	0e 9e       	mov	lr,r7
80004eea:	30 18       	mov	r8,1
80004eec:	10 96       	mov	r6,r8
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
80004eee:	fe 69 00 00 	mov	r9,-131072
80004ef2:	f2 fa 04 1c 	ld.w	r10,r9[1052]
80004ef6:	ef ea 10 0a 	or	r10,r7,r10
80004efa:	f3 4a 04 1c 	st.w	r9[1052],r10
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
80004efe:	17 aa       	ld.ub	r10,r11[0x2]
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
80004f00:	30 09       	mov	r9,0
80004f02:	f4 09 18 00 	cp.b	r9,r10
80004f06:	f9 b3 09 01 	movgt	r3,1
80004f0a:	f9 b3 0a 02 	movle	r3,2
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
80004f0e:	17 b5       	ld.ub	r5,r11[0x3]
80004f10:	f3 d5 c0 02 	bfextu	r9,r5,0x0,0x2
		// Bank choice
		switch(ep_type) {
80004f14:	30 25       	mov	r5,2
80004f16:	ea 09 18 00 	cp.b	r9,r5
80004f1a:	c0 e0       	breq	80004f36 <uhd_ep_alloc+0x8a>
80004f1c:	30 35       	mov	r5,3
80004f1e:	ea 09 18 00 	cp.b	r9,r5
80004f22:	c0 70       	breq	80004f30 <uhd_ep_alloc+0x84>
80004f24:	30 15       	mov	r5,1
80004f26:	ea 09 18 00 	cp.b	r9,r5
80004f2a:	c7 71       	brne	80005018 <uhd_ep_alloc+0x16c>
		case USB_EP_TYPE_ISOCHRONOUS:
			bank = UHD_ISOCHRONOUS_NB_BANK;
			ep_interval = ep_desc->bInterval;
80004f2c:	17 e2       	ld.ub	r2,r11[0x6]
80004f2e:	c0 58       	rjmp	80004f38 <uhd_ep_alloc+0x8c>
			break;
		case USB_EP_TYPE_INTERRUPT:
			bank = UHD_INTERRUPT_NB_BANK;
			ep_interval = ep_desc->bInterval;
80004f30:	17 e2       	ld.ub	r2,r11[0x6]
80004f32:	30 01       	mov	r1,0
80004f34:	c0 38       	rjmp	80004f3a <uhd_ep_alloc+0x8e>
80004f36:	30 02       	mov	r2,0
80004f38:	30 11       	mov	r1,1
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
80004f3a:	ec 04 15 02 	lsl	r4,r6,0x2
80004f3e:	fe 60 05 00 	mov	r0,-129792
80004f42:	e8 00 00 05 	add	r5,r4,r0
80004f46:	17 c0       	ld.ub	r0,r11[0x4]
80004f48:	17 db       	ld.ub	r11,r11[0x5]
80004f4a:	f7 e0 10 8b 	or	r11,r11,r0<<0x8
80004f4e:	5c cb       	swap.bh	r11
80004f50:	5c 7b       	castu.h	r11
80004f52:	30 80       	mov	r0,8
80004f54:	f6 00 0c 4b 	max	r11,r11,r0
80004f58:	e0 60 04 00 	mov	r0,1024
80004f5c:	f6 00 0d 4b 	min	r11,r11,r0
80004f60:	a1 7b       	lsl	r11,0x1
80004f62:	20 1b       	sub	r11,1
80004f64:	f6 0b 12 00 	clz	r11,r11
80004f68:	f5 da c0 04 	bfextu	r10,r10,0x0,0x4
80004f6c:	ad 69       	lsl	r9,0xc
80004f6e:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80004f72:	00 49       	or	r9,r0
80004f74:	f3 e3 10 83 	or	r3,r9,r3<<0x8
80004f78:	e7 e2 11 82 	or	r2,r3,r2<<0x18
80004f7c:	f6 09 11 1c 	rsub	r9,r11,28
80004f80:	e5 e9 10 42 	or	r2,r2,r9<<0x4
80004f84:	e5 e1 10 22 	or	r2,r2,r1<<0x2
80004f88:	8b 02       	st.w	r5[0x0],r2
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
80004f8a:	6a 09       	ld.w	r9,r5[0x0]
80004f8c:	a1 b9       	sbr	r9,0x1
80004f8e:	8b 09       	st.w	r5[0x0],r9
		if (!Is_uhd_pipe_configured(pipe)) {
80004f90:	fe 6a 05 30 	mov	r10,-129744
80004f94:	e8 0a 00 09 	add	r9,r4,r10
80004f98:	72 09       	ld.w	r9,r9[0x0]
80004f9a:	e6 19 00 04 	andh	r9,0x4,COH
80004f9e:	c0 a1       	brne	80004fb2 <uhd_ep_alloc+0x106>
			uhd_disable_pipe(pipe);
80004fa0:	fe 68 00 00 	mov	r8,-131072
80004fa4:	f0 f9 04 1c 	ld.w	r9,r8[1052]
80004fa8:	5c de       	com	lr
80004faa:	12 6e       	and	lr,r9
80004fac:	f1 4e 04 1c 	st.w	r8[1052],lr
80004fb0:	d8 3a       	popm	r0-r7,pc,r12=0
			return false;
		}
		uhd_configure_address(pipe, add);
80004fb2:	e2 16 00 fc 	andl	r6,0xfc,COH
80004fb6:	e0 36 fb dc 	sub	r6,130012
80004fba:	6c 0a       	ld.w	r10,r6[0x0]
80004fbc:	f3 d8 c0 02 	bfextu	r9,r8,0x0,0x2
80004fc0:	a3 79       	lsl	r9,0x3
80004fc2:	37 fb       	mov	r11,127
80004fc4:	f6 09 09 49 	lsl	r9,r11,r9
80004fc8:	12 9b       	mov	r11,r9
80004fca:	5c 9b       	brev	r11
80004fcc:	f6 0b 12 00 	clz	r11,r11
80004fd0:	f8 0b 09 4c 	lsl	r12,r12,r11
80004fd4:	12 6c       	and	r12,r9
80004fd6:	5c d9       	com	r9
80004fd8:	14 69       	and	r9,r10
80004fda:	f9 e9 10 09 	or	r9,r12,r9
80004fde:	8d 09       	st.w	r6[0x0],r9
		uhd_enable_pipe(pipe);
80004fe0:	fe 69 00 00 	mov	r9,-131072
80004fe4:	f2 fa 04 1c 	ld.w	r10,r9[1052]
80004fe8:	14 47       	or	r7,r10
80004fea:	f3 47 04 1c 	st.w	r9[1052],r7

		// Enable endpoint interrupts
		uhd_enable_pipe_dma_interrupt(pipe);
80004fee:	f0 ca 00 01 	sub	r10,r8,1
80004ff2:	fc 1b 02 00 	movh	r11,0x200
80004ff6:	f6 0a 09 4a 	lsl	r10,r11,r10
80004ffa:	f3 4a 04 18 	st.w	r9[1048],r10
		uhd_enable_stall_interrupt(pipe);
80004ffe:	e0 34 fa 10 	sub	r4,129552
80005002:	34 0a       	mov	r10,64
80005004:	89 0a       	st.w	r4[0x0],r10
		uhd_enable_pipe_error_interrupt(pipe);
80005006:	30 8a       	mov	r10,8
80005008:	89 0a       	st.w	r4[0x0],r10
		uhd_enable_pipe_interrupt(pipe);
8000500a:	e0 6a 01 00 	mov	r10,256
8000500e:	f4 08 09 48 	lsl	r8,r10,r8
80005012:	f3 48 04 18 	st.w	r9[1048],r8
80005016:	da 3a       	popm	r0-r7,pc,r12=1
		return true;
80005018:	d8 3a       	popm	r0-r7,pc,r12=0

8000501a <uhd_ep0_alloc>:
	uhd_sleep_mode(UHD_STATE_IDLE);
}

bool uhd_ep0_alloc(usb_add_t add, uint8_t ep_size)
{
	if (ep_size < 8) {
8000501a:	30 78       	mov	r8,7
8000501c:	f0 0b 18 00 	cp.b	r11,r8
80005020:	e0 8b 00 03 	brhi	80005026 <uhd_ep0_alloc+0xc>
80005024:	5e fd       	retal	0
#error TODO Add USB address in a list
		return true;
	}
#endif

	uhd_enable_pipe(0);
80005026:	fe 68 00 00 	mov	r8,-131072
8000502a:	f0 f9 04 1c 	ld.w	r9,r8[1052]
8000502e:	a1 a9       	sbr	r9,0x0
80005030:	f1 49 04 1c 	st.w	r8[1052],r9
	uhd_configure_pipe(0, // Pipe 0
80005034:	30 89       	mov	r9,8
80005036:	f6 09 0c 4b 	max	r11,r11,r9
8000503a:	e0 69 04 00 	mov	r9,1024
8000503e:	f6 09 0d 49 	min	r9,r11,r9
80005042:	a1 79       	lsl	r9,0x1
80005044:	20 19       	sub	r9,1
80005046:	f2 09 12 00 	clz	r9,r9
8000504a:	f2 09 11 1c 	rsub	r9,r9,28
8000504e:	a5 69       	lsl	r9,0x4
80005050:	fe 68 05 00 	mov	r8,-129792
80005054:	91 09       	st.w	r8[0x0],r9
#else
			ep_size,
#endif
			AVR32_USBB_UECFG0_EPBK_SINGLE, 0);

	uhd_allocate_memory(0);
80005056:	70 09       	ld.w	r9,r8[0x0]
80005058:	a1 b9       	sbr	r9,0x1
8000505a:	91 09       	st.w	r8[0x0],r9
	if (!Is_uhd_pipe_configured(0)) {
8000505c:	fe 68 05 30 	mov	r8,-129744
80005060:	70 08       	ld.w	r8,r8[0x0]
80005062:	e6 18 00 04 	andh	r8,0x4,COH
80005066:	c0 91       	brne	80005078 <uhd_ep0_alloc+0x5e>
		uhd_disable_pipe(0);
80005068:	fe 68 00 00 	mov	r8,-131072
8000506c:	f0 f9 04 1c 	ld.w	r9,r8[1052]
80005070:	a1 c9       	cbr	r9,0x0
80005072:	f1 49 04 1c 	st.w	r8[1052],r9
80005076:	5e fd       	retal	0
		return false;
	}
	uhd_configure_address(0, add);
80005078:	fe 68 04 24 	mov	r8,-130012
8000507c:	70 09       	ld.w	r9,r8[0x0]
8000507e:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80005082:	e0 19 ff 80 	andl	r9,0xff80
80005086:	12 4c       	or	r12,r9
80005088:	91 0c       	st.w	r8[0x0],r12

	// Always enable stall and error interrupts of control endpoint
	uhd_enable_stall_interrupt(0);
8000508a:	fe 68 05 f0 	mov	r8,-129552
8000508e:	34 09       	mov	r9,64
80005090:	91 09       	st.w	r8[0x0],r9
	uhd_enable_pipe_error_interrupt(0);
80005092:	30 89       	mov	r9,8
80005094:	91 09       	st.w	r8[0x0],r9
	uhd_enable_pipe_interrupt(0);
80005096:	e0 69 01 00 	mov	r9,256
8000509a:	fe 68 00 00 	mov	r8,-131072
8000509e:	f1 49 04 18 	st.w	r8[1048],r9
800050a2:	5e ff       	retal	1

800050a4 <otg_dual_disable>:
# endif
}


void otg_dual_disable(void)
{
800050a4:	eb cd 40 80 	pushm	r7,lr
	if (!otg_initialized) {
800050a8:	49 48       	lddpc	r8,800050f8 <otg_dual_disable+0x54>
800050aa:	11 89       	ld.ub	r9,r8[0x0]
800050ac:	30 08       	mov	r8,0
800050ae:	f0 09 18 00 	cp.b	r9,r8
800050b2:	c2 00       	breq	800050f2 <otg_dual_disable+0x4e>
		return; // Dual role not initialized
	}
	otg_initialized = false;
800050b4:	10 99       	mov	r9,r8
800050b6:	49 18       	lddpc	r8,800050f8 <otg_dual_disable+0x54>
800050b8:	b0 89       	st.b	r8[0x0],r9

	// Do not authorize asynchronous USB interrupts
	AVR32_PM.AWEN.usb_waken = 0;
800050ba:	fe 78 0c 00 	mov	r8,-62464
800050be:	f0 f9 01 44 	ld.w	r9,r8[324]
800050c2:	30 07       	mov	r7,0
800050c4:	f3 d7 d0 01 	bfins	r9,r7,0x0,0x1
800050c8:	f1 49 01 44 	st.w	r8[324],r9
	otg_unfreeze_clock();
800050cc:	fe 68 08 00 	mov	r8,-129024
800050d0:	70 09       	ld.w	r9,r8[0x0]
800050d2:	af c9       	cbr	r9,0xe
800050d4:	91 09       	st.w	r8[0x0],r9
# ifdef USB_ID
	otg_disable_id_interrupt();
800050d6:	70 09       	ld.w	r9,r8[0x0]
800050d8:	a1 c9       	cbr	r9,0x0
800050da:	91 09       	st.w	r8[0x0],r9
# endif
	otg_disable();
800050dc:	70 09       	ld.w	r9,r8[0x0]
800050de:	af d9       	cbr	r9,0xf
800050e0:	91 09       	st.w	r8[0x0],r9
	otg_disable_pad();
800050e2:	70 09       	ld.w	r9,r8[0x0]
800050e4:	ad c9       	cbr	r9,0xc
800050e6:	91 09       	st.w	r8[0x0],r9
	sysclk_disable_usb();
800050e8:	f0 1f 00 05 	mcall	800050fc <otg_dual_disable+0x58>
	uhd_sleep_mode(UHD_STATE_OFF);
800050ec:	0e 9c       	mov	r12,r7
800050ee:	f0 1f 00 05 	mcall	80005100 <otg_dual_disable+0x5c>
800050f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800050f6:	00 00       	add	r0,r0
800050f8:	00 00       	add	r0,r0
800050fa:	0a 49       	or	r9,r5
800050fc:	80 00       	ld.sh	r0,r0[0x0]
800050fe:	5b 98       	cp.w	r8,-7
80005100:	80 00       	ld.sh	r0,r0[0x0]
80005102:	4a f0       	lddpc	r0,800051bc <otg_dual_enable+0x38>

80005104 <uhd_disable>:
	cpu_irq_restore(flags);
}


void uhd_disable(bool b_id_stop)
{
80005104:	eb cd 40 c0 	pushm	r6-r7,lr
80005108:	18 96       	mov	r6,r12
	irqflags_t flags;

	// Check USB clock ready after a potential sleep mode < IDLE
	while (!Is_otg_clock_usable());
8000510a:	fe 68 08 04 	mov	r8,-129020
8000510e:	70 09       	ld.w	r9,r8[0x0]
80005110:	e2 19 40 00 	andl	r9,0x4000,COH
80005114:	cf d0       	breq	8000510e <uhd_disable+0xa>
	otg_unfreeze_clock();
80005116:	fe 67 08 00 	mov	r7,-129024
8000511a:	6e 08       	ld.w	r8,r7[0x0]
8000511c:	af c8       	cbr	r8,0xe
8000511e:	8f 08       	st.w	r7[0x0],r8

	// Disable Vbus change and error interrupts
	Clr_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSTE_MASK
80005120:	fe 68 00 00 	mov	r8,-131072
80005124:	f0 f9 08 00 	ld.w	r9,r8[2048]
80005128:	e0 19 ff f5 	andl	r9,0xfff5
8000512c:	f1 49 08 00 	st.w	r8[2048],r9
			| AVR32_USBB_USBCON_VBERRE_MASK);

	// Disable main control interrupt
	// (Connection, disconnection, SOF and reset)
	AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_DCONNIEC_MASK
80005130:	37 f9       	mov	r9,127
80005132:	f1 49 04 14 	st.w	r8[1044],r9
			| AVR32_USBB_UHINTECLR_HSOFIEC_MASK
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
80005136:	fe 68 04 00 	mov	r8,-130048
8000513a:	70 09       	ld.w	r9,r8[0x0]
8000513c:	a9 c9       	cbr	r9,0x8
8000513e:	91 09       	st.w	r8[0x0],r9
	uhd_disable_vbus();
80005140:	e0 69 02 00 	mov	r9,512
80005144:	fe 68 08 08 	mov	r8,-129016
80005148:	91 09       	st.w	r8[0x0],r9
	uhc_notify_connection(false);
8000514a:	30 0c       	mov	r12,0
8000514c:	f0 1f 00 0b 	mcall	80005178 <uhd_disable+0x74>
	otg_freeze_clock();
80005150:	6e 08       	ld.w	r8,r7[0x0]
80005152:	af a8       	sbr	r8,0xe
80005154:	8f 08       	st.w	r7[0x0],r8

#ifdef USB_ID
	uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
80005156:	30 1c       	mov	r12,1
80005158:	f0 1f 00 09 	mcall	8000517c <uhd_disable+0x78>
	if (!b_id_stop) {
8000515c:	58 06       	cp.w	r6,0
8000515e:	c0 a0       	breq	80005172 <uhd_disable+0x6e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005160:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80005164:	d3 03       	ssrf	0x10
		return; // No need to disable host, it is done automatically by hardware
	}
#endif

	flags = cpu_irq_save();
	otg_dual_disable();
80005166:	f0 1f 00 07 	mcall	80005180 <uhd_disable+0x7c>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000516a:	e6 17 00 01 	andh	r7,0x1,COH
8000516e:	c0 21       	brne	80005172 <uhd_disable+0x6e>
      cpu_irq_enable();
80005170:	d5 03       	csrf	0x10
   }

	barrier();
80005172:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005176:	00 00       	add	r0,r0
80005178:	80 00       	ld.sh	r0,r0[0x0]
8000517a:	6d 50       	ld.w	r0,r6[0x54]
8000517c:	80 00       	ld.sh	r0,r0[0x0]
8000517e:	4a f0       	lddpc	r0,80005238 <uhd_enable>
80005180:	80 00       	ld.sh	r0,r0[0x0]
80005182:	50 a4       	stdsp	sp[0x28],r4

80005184 <otg_dual_enable>:
	}
	otg_data_memory_barrier();
}

bool otg_dual_enable(void)
{
80005184:	d4 01       	pushm	lr
	if (otg_initialized) {
80005186:	4a 58       	lddpc	r8,80005218 <otg_dual_enable+0x94>
80005188:	11 89       	ld.ub	r9,r8[0x0]
8000518a:	30 08       	mov	r8,0
8000518c:	f0 09 18 00 	cp.b	r9,r8
80005190:	c0 20       	breq	80005194 <otg_dual_enable+0x10>
80005192:	d8 0a       	popm	pc,r12=0
		return false; // Dual role already initialized
	}
	otg_initialized = true;
80005194:	30 19       	mov	r9,1
80005196:	4a 18       	lddpc	r8,80005218 <otg_dual_enable+0x94>
80005198:	b0 89       	st.b	r8[0x0],r9

	//* Enable USB hardware clock
	sysclk_enable_usb();
8000519a:	f0 1f 00 21 	mcall	8000521c <otg_dual_enable+0x98>

	//* Link USB interrupt on OTG interrupt in dual role
	irq_register_handler(otg_interrupt, AVR32_USBB_IRQ, UHD_USB_INT_LEVEL);
8000519e:	30 0a       	mov	r10,0
800051a0:	e0 6b 02 20 	mov	r11,544
800051a4:	49 fc       	lddpc	r12,80005220 <otg_dual_enable+0x9c>
800051a6:	f0 1f 00 20 	mcall	80005224 <otg_dual_enable+0xa0>
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
800051aa:	fe 78 0c 00 	mov	r8,-62464
800051ae:	f0 f9 01 44 	ld.w	r9,r8[324]
800051b2:	a1 a9       	sbr	r9,0x0
800051b4:	f1 49 01 44 	st.w	r8[324],r9
	pm_asyn_wake_up_enable(AVR32_PM_AWEN_USB_WAKEN_MASK);

# ifdef USB_ID
	// By default USBB is already configured with ID pin enable
	// The USBB must be enabled to provide interrupt
	otg_input_id_pin();
800051b8:	fe 78 10 00 	mov	r8,-61440
800051bc:	e0 69 08 00 	mov	r9,2048
800051c0:	91 59       	st.w	r8[0x14],r9
800051c2:	91 a9       	st.w	r8[0x28],r9
800051c4:	91 29       	st.w	r8[0x8],r9
800051c6:	f1 49 00 74 	st.w	r8[116],r9
	otg_unfreeze_clock();
800051ca:	fe 68 08 00 	mov	r8,-129024
800051ce:	70 09       	ld.w	r9,r8[0x0]
800051d0:	af c9       	cbr	r9,0xe
800051d2:	91 09       	st.w	r8[0x0],r9
	otg_enable();
800051d4:	70 09       	ld.w	r9,r8[0x0]
800051d6:	af b9       	sbr	r9,0xf
800051d8:	91 09       	st.w	r8[0x0],r9
	otg_enable_id_interrupt();
800051da:	70 09       	ld.w	r9,r8[0x0]
800051dc:	a1 a9       	sbr	r9,0x0
800051de:	91 09       	st.w	r8[0x0],r9
	otg_ack_id_transition();
800051e0:	30 1a       	mov	r10,1
800051e2:	fe 69 08 08 	mov	r9,-129016
800051e6:	93 0a       	st.w	r9[0x0],r10
	otg_freeze_clock();
800051e8:	70 09       	ld.w	r9,r8[0x0]
800051ea:	af a9       	sbr	r9,0xe
800051ec:	91 09       	st.w	r8[0x0],r9
	if (Is_otg_id_device()) {
800051ee:	fe 68 08 04 	mov	r8,-129020
800051f2:	70 08       	ld.w	r8,r8[0x0]
800051f4:	e2 18 04 00 	andl	r8,0x400,COH
800051f8:	c0 a0       	breq	8000520c <otg_dual_enable+0x88>
		uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
800051fa:	14 9c       	mov	r12,r10
800051fc:	f0 1f 00 0b 	mcall	80005228 <otg_dual_enable+0xa4>
		UHC_MODE_CHANGE(false);
80005200:	30 0c       	mov	r12,0
80005202:	f0 1f 00 0b 	mcall	8000522c <otg_dual_enable+0xa8>
		udc_start();
80005206:	f0 1f 00 0b 	mcall	80005230 <otg_dual_enable+0xac>
8000520a:	da 0a       	popm	pc,r12=1
	} else {
		UHC_MODE_CHANGE(true);
8000520c:	30 1c       	mov	r12,1
8000520e:	f0 1f 00 08 	mcall	8000522c <otg_dual_enable+0xa8>
		uhc_start();
80005212:	f0 1f 00 09 	mcall	80005234 <otg_dual_enable+0xb0>
80005216:	da 0a       	popm	pc,r12=1
80005218:	00 00       	add	r0,r0
8000521a:	0a 49       	or	r9,r5
8000521c:	80 00       	ld.sh	r0,r0[0x0]
8000521e:	5c 30       	neg	r0
80005220:	80 00       	ld.sh	r0,r0[0x0]
80005222:	53 40       	stdsp	sp[0xd0],r0
80005224:	80 00       	ld.sh	r0,r0[0x0]
80005226:	33 24       	mov	r4,50
80005228:	80 00       	ld.sh	r0,r0[0x0]
8000522a:	4a f0       	lddpc	r0,800052e4 <uhd_enable+0xac>
8000522c:	80 00       	ld.sh	r0,r0[0x0]
8000522e:	2b 20       	sub	r0,-78
80005230:	80 00       	ld.sh	r0,r0[0x0]
80005232:	6b 90       	ld.w	r0,r5[0x64]
80005234:	80 00       	ld.sh	r0,r0[0x0]
80005236:	6c f4       	ld.w	r4,r6[0x3c]

80005238 <uhd_enable>:
	uhd_sleep_mode(UHD_STATE_OFF);
}


void uhd_enable(void)
{
80005238:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000523c:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80005240:	d3 03       	ssrf	0x10
	irqflags_t flags;

	// To avoid USB interrupt before end of initialization
	flags = cpu_irq_save();

	if (otg_dual_enable()) {
80005242:	f0 1f 00 38 	mcall	80005320 <uhd_enable+0xe8>
80005246:	c0 70       	breq	80005254 <uhd_enable+0x1c>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005248:	e6 17 00 01 	andh	r7,0x1,COH
8000524c:	c0 21       	brne	80005250 <uhd_enable+0x18>
      cpu_irq_enable();
8000524e:	d5 03       	csrf	0x10
		// The current mode has been started by otg_dual_enable()
		cpu_irq_restore(flags);
		return;
80005250:	e3 cd 80 80 	ldm	sp++,r7,pc
	}

#ifdef USB_ID
	// Check that the host mode is selected by ID pin
	if (!Is_otg_id_host()) {
80005254:	fe 68 08 04 	mov	r8,-129020
80005258:	70 08       	ld.w	r8,r8[0x0]
8000525a:	e2 18 04 00 	andl	r8,0x400,COH
8000525e:	c0 70       	breq	8000526c <uhd_enable+0x34>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005260:	e6 17 00 01 	andh	r7,0x1,COH
80005264:	c0 21       	brne	80005268 <uhd_enable+0x30>
      cpu_irq_enable();
80005266:	d5 03       	csrf	0x10
		cpu_irq_restore(flags);
		return; // Host is not the current mode
80005268:	e3 cd 80 80 	ldm	sp++,r7,pc
	otg_force_host_mode();
#endif

	// Enable USB hardware
#ifdef USB_VBOF
	uhd_output_vbof_pin();
8000526c:	fe 78 10 00 	mov	r8,-61440
80005270:	e2 69 00 00 	mov	r9,131072
80005274:	f1 49 01 14 	st.w	r8[276],r9
80005278:	f1 49 01 28 	st.w	r8[296],r9
8000527c:	f1 49 01 08 	st.w	r8[264],r9
80005280:	f1 49 01 88 	st.w	r8[392],r9
80005284:	f1 49 01 78 	st.w	r8[376],r9
# if USB_VBOF_ACTIVE_LEVEL == HIGH
	uhd_set_vbof_active_high();
# else // USB_VBOF_ACTIVE_LEVEL == LOW
	uhd_set_vbof_active_low();
80005288:	fe 68 08 00 	mov	r8,-129024
8000528c:	70 09       	ld.w	r9,r8[0x0]
8000528e:	ad b9       	sbr	r9,0xd
80005290:	91 09       	st.w	r8[0x0],r9
# endif
#endif
	otg_enable_pad();
80005292:	70 09       	ld.w	r9,r8[0x0]
80005294:	ad a9       	sbr	r9,0xc
80005296:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80005298:	70 09       	ld.w	r9,r8[0x0]
8000529a:	af b9       	sbr	r9,0xf
8000529c:	91 09       	st.w	r8[0x0],r9

	uhd_ctrl_request_first = NULL;
8000529e:	30 09       	mov	r9,0
800052a0:	4a 1a       	lddpc	r10,80005324 <uhd_enable+0xec>
800052a2:	95 09       	st.w	r10[0x0],r9
	uhd_ctrl_request_last = NULL;
800052a4:	4a 1a       	lddpc	r10,80005328 <uhd_enable+0xf0>
800052a6:	95 09       	st.w	r10[0x0],r9
	uhd_ctrl_request_timeout = 0;
800052a8:	12 9a       	mov	r10,r9
800052aa:	4a 1b       	lddpc	r11,8000532c <uhd_enable+0xf4>
800052ac:	b6 09       	st.h	r11[0x0],r9
	uhd_suspend_start = 0;
800052ae:	4a 19       	lddpc	r9,80005330 <uhd_enable+0xf8>
800052b0:	b2 8a       	st.b	r9[0x0],r10
	uhd_resume_start = 0;
800052b2:	4a 19       	lddpc	r9,80005334 <uhd_enable+0xfc>
800052b4:	b2 8a       	st.b	r9[0x0],r10
	uhd_b_suspend_requested = false;
800052b6:	4a 19       	lddpc	r9,80005338 <uhd_enable+0x100>
800052b8:	b2 8a       	st.b	r9[0x0],r10

	otg_unfreeze_clock();
800052ba:	70 09       	ld.w	r9,r8[0x0]
800052bc:	af c9       	cbr	r9,0xe
800052be:	91 09       	st.w	r8[0x0],r9
	uhd_disable_high_speed_mode();
#  endif
#endif

	// Clear all interrupts that may have been set by a previous host mode
	AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_DCONNIC_MASK
800052c0:	fe 68 00 00 	mov	r8,-131072
800052c4:	37 f9       	mov	r9,127
800052c6:	f1 49 04 08 	st.w	r8[1032],r9
			| AVR32_USBB_UHINTCLR_DDISCIC_MASK | AVR32_USBB_UHINTCLR_HSOFIC_MASK
			| AVR32_USBB_UHINTCLR_HWUPIC_MASK | AVR32_USBB_UHINTCLR_RSMEDIC_MASK
			| AVR32_USBB_UHINTCLR_RSTIC_MASK | AVR32_USBB_UHINTCLR_RXRSMIC_MASK;
	otg_ack_vbus_transition();
800052ca:	30 2a       	mov	r10,2
800052cc:	fe 69 08 08 	mov	r9,-129016
800052d0:	93 0a       	st.w	r9[0x0],r10

	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
800052d2:	f0 f9 08 00 	ld.w	r9,r8[2048]
800052d6:	e8 19 01 0a 	orl	r9,0x10a
800052da:	f1 49 08 00 	st.w	r8[2048],r9
			|AVR32_USBB_USBCON_VBUSTE_MASK
			|AVR32_USBB_USBCON_VBERRE_MASK);
	uhd_enable_vbus();
800052de:	e0 69 02 00 	mov	r9,512
800052e2:	fe 68 08 0c 	mov	r8,-129012
800052e6:	91 09       	st.w	r8[0x0],r9

	// Force Vbus interrupt when Vbus is always high
	// This is possible due to a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
800052e8:	fe 68 08 04 	mov	r8,-129020
800052ec:	70 08       	ld.w	r8,r8[0x0]
800052ee:	e2 18 08 00 	andl	r8,0x800,COH
800052f2:	c0 40       	breq	800052fa <uhd_enable+0xc2>
		otg_raise_vbus_transition();
800052f4:	fe 68 08 0c 	mov	r8,-129012
800052f8:	91 0a       	st.w	r8[0x0],r10
	}

	// Enable main control interrupt
	// Connection, SOF and reset
	AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_DCONNIES_MASK
800052fa:	32 59       	mov	r9,37
800052fc:	fe 68 00 00 	mov	r8,-131072
80005300:	f1 49 04 18 	st.w	r8[1048],r9
			| AVR32_USBB_UHINTESET_HSOFIES_MASK
			| AVR32_USBB_UHINTESET_RSTIES_MASK;

	otg_freeze_clock();
80005304:	fe 68 08 00 	mov	r8,-129024
80005308:	70 09       	ld.w	r9,r8[0x0]
8000530a:	af a9       	sbr	r9,0xe
8000530c:	91 09       	st.w	r8[0x0],r9
	uhd_sleep_mode(UHD_STATE_NO_VBUS);
8000530e:	30 2c       	mov	r12,2
80005310:	f0 1f 00 0b 	mcall	8000533c <uhd_enable+0x104>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005314:	e6 17 00 01 	andh	r7,0x1,COH
80005318:	c0 21       	brne	8000531c <uhd_enable+0xe4>
      cpu_irq_enable();
8000531a:	d5 03       	csrf	0x10
   }

	barrier();
8000531c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005320:	80 00       	ld.sh	r0,r0[0x0]
80005322:	51 84       	stdsp	sp[0x60],r4
80005324:	00 00       	add	r0,r0
80005326:	0b c4       	ld.ub	r4,r5[0x4]
80005328:	00 00       	add	r0,r0
8000532a:	0b cc       	ld.ub	r12,r5[0x4]
8000532c:	00 00       	add	r0,r0
8000532e:	0b d0       	ld.ub	r0,r5[0x5]
80005330:	00 00       	add	r0,r0
80005332:	0a cc       	st.b	r5++,r12
80005334:	00 00       	add	r0,r0
80005336:	0a ce       	st.b	r5++,lr
80005338:	00 00       	add	r0,r0
8000533a:	0a cf       	st.b	r5++,pc
8000533c:	80 00       	ld.sh	r0,r0[0x0]
8000533e:	4a f0       	lddpc	r0,800053f8 <otg_interrupt+0xb8>

80005340 <otg_interrupt>:
 * (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests
 * in peripheral modules.
 */
ISR(otg_interrupt, AVR32_USBB_IRQ_GROUP, UHD_USB_INT_LEVEL)
{
80005340:	d4 31       	pushm	r0-r7,lr
80005342:	20 1d       	sub	sp,4
	bool b_mode_device;

#ifdef USB_ID
	if (Is_otg_id_transition()) {
80005344:	fe 68 08 04 	mov	r8,-129020
80005348:	70 08       	ld.w	r8,r8[0x0]
8000534a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000534e:	c2 c0       	breq	800053a6 <otg_interrupt+0x66>
		while (!Is_otg_clock_usable());
80005350:	fe 69 08 04 	mov	r9,-129020
80005354:	72 08       	ld.w	r8,r9[0x0]
80005356:	e2 18 40 00 	andl	r8,0x4000,COH
8000535a:	cf d0       	breq	80005354 <otg_interrupt+0x14>
		otg_unfreeze_clock();
8000535c:	fe 68 08 00 	mov	r8,-129024
80005360:	70 09       	ld.w	r9,r8[0x0]
80005362:	af c9       	cbr	r9,0xe
80005364:	91 09       	st.w	r8[0x0],r9
		otg_ack_id_transition();
80005366:	30 1a       	mov	r10,1
80005368:	fe 69 08 08 	mov	r9,-129016
8000536c:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock();
8000536e:	70 09       	ld.w	r9,r8[0x0]
80005370:	af a9       	sbr	r9,0xe
80005372:	91 09       	st.w	r8[0x0],r9
		if (Is_otg_id_device()) {
80005374:	fe 68 08 04 	mov	r8,-129020
80005378:	70 08       	ld.w	r8,r8[0x0]
8000537a:	e2 18 04 00 	andl	r8,0x400,COH
8000537e:	c0 b0       	breq	80005394 <otg_interrupt+0x54>
			uhc_stop(false);
80005380:	30 0c       	mov	r12,0
80005382:	f0 1f 01 bd 	mcall	80005a74 <otg_interrupt+0x734>
			UHC_MODE_CHANGE(false);
80005386:	30 0c       	mov	r12,0
80005388:	f0 1f 01 bc 	mcall	80005a78 <otg_interrupt+0x738>
			udc_start();
8000538c:	f0 1f 01 bc 	mcall	80005a7c <otg_interrupt+0x73c>
80005390:	e0 8f 03 6f 	bral	80005a6e <otg_interrupt+0x72e>
		} else {
			udc_stop();
80005394:	f0 1f 01 bb 	mcall	80005a80 <otg_interrupt+0x740>
			UHC_MODE_CHANGE(true);
80005398:	30 1c       	mov	r12,1
8000539a:	f0 1f 01 b8 	mcall	80005a78 <otg_interrupt+0x738>
			uhc_start();
8000539e:	f0 1f 01 ba 	mcall	80005a84 <otg_interrupt+0x744>
800053a2:	e0 8f 03 66 	bral	80005a6e <otg_interrupt+0x72e>
		}
		return;
	}
	b_mode_device = Is_otg_id_device();
800053a6:	fe 68 08 04 	mov	r8,-129020
800053aa:	70 08       	ld.w	r8,r8[0x0]
#else
	b_mode_device = Is_otg_device_mode_forced();
#endif

	// Redirection to host or device interrupt
	if (b_mode_device) {
800053ac:	e2 18 04 00 	andl	r8,0x400,COH
800053b0:	c0 50       	breq	800053ba <otg_interrupt+0x7a>
		udd_interrupt();
800053b2:	f0 1f 01 b6 	mcall	80005a88 <otg_interrupt+0x748>
800053b6:	e0 8f 03 58 	bral	80005a66 <otg_interrupt+0x726>
static void uhd_interrupt(void)
{
	uint8_t pipe_int;

	// Manage SOF interrupt
	if (Is_uhd_sof()) {
800053ba:	fe 68 04 04 	mov	r8,-130044
800053be:	70 08       	ld.w	r8,r8[0x0]
800053c0:	e2 18 00 20 	andl	r8,0x20,COH
800053c4:	e0 80 00 8f 	breq	800054e2 <otg_interrupt+0x1a2>
		uhd_ack_sof();
800053c8:	32 09       	mov	r9,32
800053ca:	fe 68 04 08 	mov	r8,-130040
800053ce:	91 09       	st.w	r8[0x0],r9
			return;
		}
	}

	// Manage a delay to enter in suspend
	if (uhd_suspend_start) {
800053d0:	fe f8 06 bc 	ld.w	r8,pc[1724]
800053d4:	11 88       	ld.ub	r8,r8[0x0]
800053d6:	58 08       	cp.w	r8,0
800053d8:	c3 00       	breq	80005438 <otg_interrupt+0xf8>
		if (--uhd_suspend_start == 0) {
800053da:	20 18       	sub	r8,1
800053dc:	5c 58       	castu.b	r8
800053de:	fe f9 06 ae 	ld.w	r9,pc[1710]
800053e2:	b2 88       	st.b	r9[0x0],r8
800053e4:	58 08       	cp.w	r8,0
800053e6:	c0 80       	breq	800053f6 <otg_interrupt+0xb6>
800053e8:	e0 8f 03 3f 	bral	80005a66 <otg_interrupt+0x726>
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
#endif
				if (Is_uhd_disconnection()) {
800053ec:	74 08       	ld.w	r8,r10[0x0]
800053ee:	e2 18 00 02 	andl	r8,0x2,COH
800053f2:	c0 60       	breq	800053fe <otg_interrupt+0xbe>
800053f4:	c0 c8       	rjmp	8000540c <otg_interrupt+0xcc>
			// then wait end of SOF generation
			// to be sure that disable SOF has been accepted
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
800053f6:	fe 69 04 20 	mov	r9,-130016
#endif
				if (Is_uhd_disconnection()) {
800053fa:	fe 6a 04 04 	mov	r10,-130044
			// then wait end of SOF generation
			// to be sure that disable SOF has been accepted
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
800053fe:	72 08       	ld.w	r8,r9[0x0]
80005400:	f1 d8 c2 08 	bfextu	r8,r8,0x10,0x8
80005404:	e0 48 00 b9 	cp.w	r8,185
80005408:	fe 9b ff f2 	brhi	800053ec <otg_interrupt+0xac>
#endif
				if (Is_uhd_disconnection()) {
					break;
				}
			}
			uhd_disable_sof();
8000540c:	fe 68 04 00 	mov	r8,-130048
80005410:	70 09       	ld.w	r9,r8[0x0]
80005412:	a9 c9       	cbr	r9,0x8
80005414:	91 09       	st.w	r8[0x0],r9

			// Ack previous wakeup and resumes interrupts
			AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_HWUPIC_MASK
80005416:	fe 68 00 00 	mov	r8,-131072
8000541a:	35 89       	mov	r9,88
8000541c:	f1 49 04 08 	st.w	r8[1032],r9
					|AVR32_USBB_UHINTCLR_RSMEDIC_MASK
					|AVR32_USBB_UHINTCLR_RXRSMIC_MASK;

			// Enable wakeup/resumes interrupts
			AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_HWUPIES_MASK
80005420:	f1 49 04 18 	st.w	r8[1048],r9
					|AVR32_USBB_UHINTESET_RSMEDIES_MASK
					|AVR32_USBB_UHINTESET_RXRSMIES_MASK;

			otg_freeze_clock();
80005424:	fe 68 08 00 	mov	r8,-129024
80005428:	70 09       	ld.w	r9,r8[0x0]
8000542a:	af a9       	sbr	r9,0xe
8000542c:	91 09       	st.w	r8[0x0],r9
			uhd_sleep_mode(UHD_STATE_SUSPEND);
8000542e:	30 4c       	mov	r12,4
80005430:	f0 1f 01 98 	mcall	80005a90 <otg_interrupt+0x750>
80005434:	e0 8f 03 19 	bral	80005a66 <otg_interrupt+0x726>
		}
		return; // Abort SOF events
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
80005438:	fe f8 06 5c 	ld.w	r8,pc[1628]
8000543c:	11 88       	ld.ub	r8,r8[0x0]
8000543e:	58 08       	cp.w	r8,0
80005440:	c1 e0       	breq	8000547c <otg_interrupt+0x13c>
		if (--uhd_resume_start == 0) {
80005442:	20 18       	sub	r8,1
80005444:	5c 58       	castu.b	r8
80005446:	fe f9 06 4e 	ld.w	r9,pc[1614]
8000544a:	b2 88       	st.b	r9[0x0],r8
8000544c:	58 08       	cp.w	r8,0
8000544e:	e0 81 03 0c 	brne	80005a66 <otg_interrupt+0x726>
80005452:	fe 69 06 24 	mov	r9,-129500
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
80005456:	fe fb 06 42 	ld.w	r11,pc[1602]
					uhd_unfreeze_pipe(pipe);
8000545a:	e2 6c 00 00 	mov	r12,131072
 * is enabled because this one can not occurred during the USB ISR
 * (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests
 * in peripheral modules.
 */
ISR(otg_interrupt, AVR32_USBB_IRQ_GROUP, UHD_USB_INT_LEVEL)
8000545e:	2f f8       	sub	r8,-1
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
80005460:	17 8a       	ld.ub	r10,r11[0x0]
80005462:	f4 08 08 4a 	asr	r10,r10,r8
80005466:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
					uhd_unfreeze_pipe(pipe);
8000546a:	f3 fc 1a 00 	st.wne	r9[0x0],r12
8000546e:	2f c9       	sub	r9,-4
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80005470:	58 68       	cp.w	r8,6
80005472:	cf 61       	brne	8000545e <otg_interrupt+0x11e>
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
					uhd_unfreeze_pipe(pipe);
				}
			}
			uhc_notify_resume();
80005474:	f0 1f 01 8a 	mcall	80005a9c <otg_interrupt+0x75c>
80005478:	e0 8f 02 f7 	bral	80005a66 <otg_interrupt+0x726>
		}
		return; // Abort SOF events
	}
	// Manage the timeout on endpoint control transfer
	if (uhd_ctrl_request_timeout) {
8000547c:	fe f8 06 24 	ld.w	r8,pc[1572]
80005480:	90 08       	ld.sh	r8,r8[0x0]
80005482:	58 08       	cp.w	r8,0
80005484:	c1 10       	breq	800054a6 <otg_interrupt+0x166>
		// Setup request on-going
		if (--uhd_ctrl_request_timeout == 0) {
80005486:	fe f8 06 1a 	ld.w	r8,pc[1562]
8000548a:	90 09       	ld.sh	r9,r8[0x0]
8000548c:	20 19       	sub	r9,1
8000548e:	b0 09       	st.h	r8[0x0],r9
80005490:	90 08       	ld.sh	r8,r8[0x0]
80005492:	58 08       	cp.w	r8,0
80005494:	c0 91       	brne	800054a6 <otg_interrupt+0x166>
			// Stop request
			uhd_freeze_pipe(0);
80005496:	e2 69 00 00 	mov	r9,131072
8000549a:	fe 68 05 f0 	mov	r8,-129552
8000549e:	91 09       	st.w	r8[0x0],r9
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
800054a0:	30 7c       	mov	r12,7
800054a2:	f0 1f 01 81 	mcall	80005aa4 <otg_interrupt+0x764>
800054a6:	fe f7 06 02 	ld.w	r7,pc[1538]
800054aa:	30 06       	mov	r6,0
		if (ptr_job->busy == true) {
			if (ptr_job->timeout) {
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
					// Abort job
					uhd_ep_abort_pipe(pipe,UHD_TRANS_TIMEOUT);
800054ac:	30 75       	mov	r5,7
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
800054ae:	6e 08       	ld.w	r8,r7[0x0]
800054b0:	58 08       	cp.w	r8,0
800054b2:	c0 d4       	brge	800054cc <otg_interrupt+0x18c>
			if (ptr_job->timeout) {
800054b4:	8e 18       	ld.sh	r8,r7[0x2]
800054b6:	58 08       	cp.w	r8,0
800054b8:	c0 a0       	breq	800054cc <otg_interrupt+0x18c>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
800054ba:	20 18       	sub	r8,1
800054bc:	5c 88       	casts.h	r8
800054be:	ae 18       	st.h	r7[0x2],r8
800054c0:	c0 61       	brne	800054cc <otg_interrupt+0x18c>
					// Abort job
					uhd_ep_abort_pipe(pipe,UHD_TRANS_TIMEOUT);
800054c2:	0a 9b       	mov	r11,r5
800054c4:	ec cc ff ff 	sub	r12,r6,-1
800054c8:	f0 1f 01 79 	mcall	80005aac <otg_interrupt+0x76c>
800054cc:	2f f6       	sub	r6,-1
800054ce:	2e c7       	sub	r7,-20
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
		}
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
800054d0:	58 66       	cp.w	r6,6
800054d2:	ce e1       	brne	800054ae <otg_interrupt+0x16e>
				}
			}
		}
	}
	// Notify the UHC
	uhc_notify_sof(false);
800054d4:	30 0c       	mov	r12,0
800054d6:	f0 1f 01 77 	mcall	80005ab0 <otg_interrupt+0x770>

	// Notify the user application
	UHC_SOF_EVENT();
800054da:	f0 1f 01 77 	mcall	80005ab4 <otg_interrupt+0x774>
800054de:	e0 8f 02 c4 	bral	80005a66 <otg_interrupt+0x726>
		uhd_sof_interrupt();
		return;
	}

	// Manage pipe interrupts
	pipe_int = uhd_get_interrupt_pipe_number();
800054e2:	fe 68 00 00 	mov	r8,-131072
800054e6:	f0 f9 04 04 	ld.w	r9,r8[1028]
800054ea:	f0 f7 04 10 	ld.w	r7,r8[1040]
800054ee:	f2 08 16 08 	lsr	r8,r9,0x8
800054f2:	f1 e7 02 87 	and	r7,r8,r7>>0x8
800054f6:	a7 b7       	sbr	r7,0x7
800054f8:	5c 97       	brev	r7
800054fa:	ee 07 12 00 	clz	r7,r7
	if (pipe_int == 0) {
800054fe:	e0 81 01 24 	brne	80005746 <otg_interrupt+0x406>
{
	// A setup request is on-going
	Assert(uhd_ctrl_request_timeout!=0);

	// Disable setup, IN and OUT interrupts of control endpoint
	AVR32_USBB.upcon0clr = AVR32_USBB_UPCON0CLR_TXSTPEC_MASK
80005502:	30 79       	mov	r9,7
80005504:	fe 68 00 00 	mov	r8,-131072
80005508:	f1 49 06 20 	st.w	r8[1568],r9
			| AVR32_USBB_UPCON0CLR_RXINEC_MASK
			| AVR32_USBB_UPCON0CLR_TXOUTEC_MASK;

	// Search event on control endpoint
	if (Is_uhd_setup_ready(0)) {
8000550c:	fe 68 05 30 	mov	r8,-129744
80005510:	70 08       	ld.w	r8,r8[0x0]
80005512:	e2 18 00 04 	andl	r8,0x4,COH
80005516:	c3 f0       	breq	80005594 <otg_interrupt+0x254>
		// SETUP packet sent
		uhd_freeze_pipe(0);
80005518:	e2 69 00 00 	mov	r9,131072
8000551c:	fe 68 05 f0 	mov	r8,-129552
80005520:	91 09       	st.w	r8[0x0],r9
		uhd_ack_setup_ready(0);
80005522:	30 49       	mov	r9,4
80005524:	fe 68 05 60 	mov	r8,-129696
80005528:	91 09       	st.w	r8[0x0],r9
		Assert(uhd_ctrl_request_phase == UHD_CTRL_REQ_PHASE_SETUP);

		// Start DATA phase
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
8000552a:	fe f8 05 8e 	ld.w	r8,pc[1422]
8000552e:	70 08       	ld.w	r8,r8[0x0]
80005530:	11 9a       	ld.ub	r10,r8[0x1]
80005532:	30 09       	mov	r9,0
80005534:	f2 0a 18 00 	cp.b	r10,r9
80005538:	c2 04       	brge	80005578 <otg_interrupt+0x238>
 * \internal
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
8000553a:	30 29       	mov	r9,2
8000553c:	fe f8 05 80 	ld.w	r8,pc[1408]
80005540:	91 09       	st.w	r8[0x0],r9
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80005542:	fe 68 05 00 	mov	r8,-129792
80005546:	70 09       	ld.w	r9,r8[0x0]
80005548:	e0 19 fc ff 	andl	r9,0xfcff
8000554c:	a9 a9       	sbr	r9,0x8
8000554e:	91 09       	st.w	r8[0x0],r9
	uhd_ack_in_received(0);
80005550:	fe 69 05 60 	mov	r9,-129696
80005554:	30 18       	mov	r8,1
80005556:	93 08       	st.w	r9[0x0],r8
	uhd_ack_short_packet(0);
80005558:	e0 6a 00 80 	mov	r10,128
8000555c:	93 0a       	st.w	r9[0x0],r10
	uhd_enable_in_received_interrupt(0);
8000555e:	fe 69 05 f0 	mov	r9,-129552
80005562:	93 08       	st.w	r9[0x0],r8
	uhd_ack_fifocon(0);
80005564:	fe 68 06 20 	mov	r8,-129504
80005568:	e0 69 40 00 	mov	r9,16384
8000556c:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
8000556e:	e2 69 00 00 	mov	r9,131072
80005572:	91 09       	st.w	r8[0x0],r9
80005574:	e0 8f 02 79 	bral	80005a66 <otg_interrupt+0x726>
		// Start DATA phase
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
				== USB_REQ_DIR_IN ) {
			uhd_ctrl_phase_data_in_start();
		} else {
			if (uhd_ctrl_request_first->req.wLength) {
80005578:	11 f9       	ld.ub	r9,r8[0x7]
8000557a:	f1 38 00 08 	ld.ub	r8,r8[8]
8000557e:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80005582:	c0 50       	breq	8000558c <otg_interrupt+0x24c>
				uhd_ctrl_phase_data_out();
80005584:	f0 1f 01 4f 	mcall	80005ac0 <otg_interrupt+0x780>
80005588:	e0 8f 02 6f 	bral	80005a66 <otg_interrupt+0x726>
			} else {
				// No DATA phase
				uhd_ctrl_phase_zlp_in();
8000558c:	f0 1f 01 4e 	mcall	80005ac4 <otg_interrupt+0x784>
80005590:	e0 8f 02 6b 	bral	80005a66 <otg_interrupt+0x726>
			}
		}
		return;
	}
	if (Is_uhd_in_received(0)) {
80005594:	fe 68 05 30 	mov	r8,-129744
80005598:	70 08       	ld.w	r8,r8[0x0]
8000559a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000559e:	e0 80 00 96 	breq	800056ca <otg_interrupt+0x38a>
		// In case of low USB speed and with a high CPU frequency,
		// a ACK from host can be always running on USB line
		// then wait end of ACK on IN pipe.
		while(!Is_uhd_pipe_frozen(0));
800055a2:	fe 69 05 c0 	mov	r9,-129600
800055a6:	72 08       	ld.w	r8,r9[0x0]
800055a8:	e6 18 00 02 	andh	r8,0x2,COH
800055ac:	cf d0       	breq	800055a6 <otg_interrupt+0x266>

		// IN packet received
		uhd_ack_in_received(0);
800055ae:	30 19       	mov	r9,1
800055b0:	fe 68 05 60 	mov	r8,-129696
800055b4:	91 09       	st.w	r8[0x0],r9
		switch(uhd_ctrl_request_phase) {
800055b6:	fe f8 05 06 	ld.w	r8,pc[1286]
800055ba:	70 08       	ld.w	r8,r8[0x0]
800055bc:	58 28       	cp.w	r8,2
800055be:	c0 50       	breq	800055c8 <otg_interrupt+0x288>
800055c0:	58 38       	cp.w	r8,3
800055c2:	e0 81 02 52 	brne	80005a66 <otg_interrupt+0x726>
800055c6:	c7 d8       	rjmp	800056c0 <otg_interrupt+0x380>
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
800055c8:	fe 68 05 30 	mov	r8,-129744
800055cc:	70 07       	ld.w	r7,r8[0x0]
800055ce:	ef d7 c2 88 	bfextu	r7,r7,0x14,0x8
	//! In HUB mode, the control pipe is always configured to 64B
	//! thus the short packet flag must be computed
	b_short_packet = (nb_byte_received != uhd_get_pipe_size(0));
	uhd_ack_short_packet(0);
#else
	b_short_packet = Is_uhd_short_packet(0);
800055d2:	70 08       	ld.w	r8,r8[0x0]
800055d4:	50 08       	stdsp	sp[0x0],r8
800055d6:	fc 12 e0 00 	movh	r2,0xe000
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
800055da:	fe f4 04 de 	ld.w	r4,pc[1246]
800055de:	30 06       	mov	r6,0
800055e0:	30 05       	mov	r5,0
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
800055e2:	fe f3 04 e6 	ld.w	r3,pc[1254]
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
800055e6:	0a 91       	mov	r1,r5
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
800055e8:	fe 60 04 24 	mov	r0,-130012
800055ec:	c1 08       	rjmp	8000560c <otg_interrupt+0x2cc>

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
800055ee:	05 39       	ld.ub	r9,r2++
800055f0:	76 38       	ld.w	r8,r11[0xc]
800055f2:	10 c9       	st.b	r8++,r9
800055f4:	97 38       	st.w	r11[0xc],r8
		uhd_ctrl_nb_trans++;
800055f6:	86 08       	ld.sh	r8,r3[0x0]
800055f8:	2f f8       	sub	r8,-1
800055fa:	a6 08       	st.h	r3[0x0],r8
		uhd_ctrl_request_first->payload_size--;
800055fc:	68 08       	ld.w	r8,r4[0x0]
800055fe:	f1 09 00 10 	ld.sh	r9,r8[16]
80005602:	20 19       	sub	r9,1
80005604:	f1 59 00 10 	st.h	r8[16],r9
		nb_byte_received--;
80005608:	20 17       	sub	r7,1
8000560a:	5c 57       	castu.b	r7
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
8000560c:	68 0b       	ld.w	r11,r4[0x0]
8000560e:	f7 09 00 10 	ld.sh	r9,r11[16]
80005612:	ec 07 18 00 	cp.b	r7,r6
80005616:	5f 18       	srne	r8
80005618:	ea 09 19 00 	cp.h	r9,r5
8000561c:	5f 1a       	srne	r10
8000561e:	f1 ea 00 0a 	and	r10,r8,r10
80005622:	ec 0a 18 00 	cp.b	r10,r6
80005626:	ce 41       	brne	800055ee <otg_interrupt+0x2ae>
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
80005628:	ea 09 19 00 	cp.h	r9,r5
8000562c:	5f 09       	sreq	r9
8000562e:	12 68       	and	r8,r9
80005630:	e2 08 18 00 	cp.b	r8,r1
80005634:	c0 d0       	breq	8000564e <otg_interrupt+0x30e>
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
				|| !uhd_ctrl_request_first->callback_run(
80005636:	76 58       	ld.w	r8,r11[0x14]
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
80005638:	58 08       	cp.w	r8,0
8000563a:	c1 90       	breq	8000566c <otg_interrupt+0x32c>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
8000563c:	60 0c       	ld.w	r12,r0[0x0]
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
8000563e:	f6 ca ff f0 	sub	r10,r11,-16
80005642:	2f 4b       	sub	r11,-12
80005644:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80005648:	5d 18       	icall	r8
8000564a:	ce 11       	brne	8000560c <otg_interrupt+0x2cc>
8000564c:	c1 08       	rjmp	8000566c <otg_interrupt+0x32c>
		// thus the data load can restart.
		goto uhd_ctrl_receiv_in_read_data;
	}

	// Test short packet
	if ((uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength)
8000564e:	17 f9       	ld.ub	r9,r11[0x7]
80005650:	f7 38 00 08 	ld.ub	r8,r11[8]
80005654:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80005658:	fe f9 04 70 	ld.w	r9,pc[1136]
8000565c:	92 09       	ld.sh	r9,r9[0x0]
8000565e:	f0 09 19 00 	cp.h	r9,r8
80005662:	c0 50       	breq	8000566c <otg_interrupt+0x32c>
80005664:	40 08       	lddsp	r8,sp[0x0]
80005666:	e2 18 00 80 	andl	r8,0x80,COH
8000566a:	c1 d0       	breq	800056a4 <otg_interrupt+0x364>
 * \internal
 * \brief Starts the ZLP OUT phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_out(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
8000566c:	30 49       	mov	r9,4
8000566e:	fe f8 04 4e 	ld.w	r8,pc[1102]
80005672:	91 09       	st.w	r8[0x0],r9
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80005674:	fe 68 05 00 	mov	r8,-129792
80005678:	70 09       	ld.w	r9,r8[0x0]
8000567a:	e0 19 fc ff 	andl	r9,0xfcff
8000567e:	a9 b9       	sbr	r9,0x9
80005680:	91 09       	st.w	r8[0x0],r9
	uhd_ack_out_ready(0);
80005682:	30 28       	mov	r8,2
80005684:	fe 69 05 60 	mov	r9,-129696
80005688:	93 08       	st.w	r9[0x0],r8
	uhd_enable_out_ready_interrupt(0);
8000568a:	fe 69 05 f0 	mov	r9,-129552
8000568e:	93 08       	st.w	r9[0x0],r8
	uhd_ack_fifocon(0);
80005690:	fe 68 06 20 	mov	r8,-129504
80005694:	e0 69 40 00 	mov	r9,16384
80005698:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
8000569a:	e2 69 00 00 	mov	r9,131072
8000569e:	91 09       	st.w	r8[0x0],r9
800056a0:	e0 8f 01 e3 	bral	80005a66 <otg_interrupt+0x726>
		uhd_ctrl_phase_zlp_out();
		return;
	}

	// Send a new IN packet request
	uhd_enable_in_received_interrupt(0);
800056a4:	30 19       	mov	r9,1
800056a6:	fe 68 05 f0 	mov	r8,-129552
800056aa:	91 09       	st.w	r8[0x0],r9
	uhd_ack_fifocon(0);
800056ac:	fe 68 06 20 	mov	r8,-129504
800056b0:	e0 69 40 00 	mov	r9,16384
800056b4:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
800056b6:	e2 69 00 00 	mov	r9,131072
800056ba:	91 09       	st.w	r8[0x0],r9
800056bc:	e0 8f 01 d5 	bral	80005a66 <otg_interrupt+0x726>
		switch(uhd_ctrl_request_phase) {
		case UHD_CTRL_REQ_PHASE_DATA_IN:
			uhd_ctrl_phase_data_in();
			break;
		case UHD_CTRL_REQ_PHASE_ZLP_IN:
			uhd_ctrl_request_end(UHD_TRANS_NOERROR);
800056c0:	30 0c       	mov	r12,0
800056c2:	f0 1f 00 f9 	mcall	80005aa4 <otg_interrupt+0x764>
800056c6:	e0 8f 01 d0 	bral	80005a66 <otg_interrupt+0x726>
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_out_ready(0)) {
800056ca:	fe 68 05 30 	mov	r8,-129744
800056ce:	70 08       	ld.w	r8,r8[0x0]
800056d0:	e2 18 00 02 	andl	r8,0x2,COH
800056d4:	c1 c0       	breq	8000570c <otg_interrupt+0x3cc>
		// OUT packet sent
		uhd_freeze_pipe(0);
800056d6:	e2 69 00 00 	mov	r9,131072
800056da:	fe 68 05 f0 	mov	r8,-129552
800056de:	91 09       	st.w	r8[0x0],r9
		uhd_ack_out_ready(0);
800056e0:	30 29       	mov	r9,2
800056e2:	fe 68 05 60 	mov	r8,-129696
800056e6:	91 09       	st.w	r8[0x0],r9
		switch(uhd_ctrl_request_phase) {
800056e8:	fe f8 03 d4 	ld.w	r8,pc[980]
800056ec:	70 08       	ld.w	r8,r8[0x0]
800056ee:	58 18       	cp.w	r8,1
800056f0:	c0 50       	breq	800056fa <otg_interrupt+0x3ba>
800056f2:	58 48       	cp.w	r8,4
800056f4:	e0 81 01 b9 	brne	80005a66 <otg_interrupt+0x726>
800056f8:	c0 58       	rjmp	80005702 <otg_interrupt+0x3c2>
		case UHD_CTRL_REQ_PHASE_DATA_OUT:
			uhd_ctrl_phase_data_out();
800056fa:	f0 1f 00 f2 	mcall	80005ac0 <otg_interrupt+0x780>
800056fe:	e0 8f 01 b4 	bral	80005a66 <otg_interrupt+0x726>
			break;
		case UHD_CTRL_REQ_PHASE_ZLP_OUT:
			uhd_ctrl_request_end(UHD_TRANS_NOERROR);
80005702:	30 0c       	mov	r12,0
80005704:	f0 1f 00 e8 	mcall	80005aa4 <otg_interrupt+0x764>
80005708:	e0 8f 01 af 	bral	80005a66 <otg_interrupt+0x726>
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_stall(0)) {
8000570c:	fe 68 05 30 	mov	r8,-129744
80005710:	70 08       	ld.w	r8,r8[0x0]
80005712:	e2 18 00 40 	andl	r8,0x40,COH
80005716:	c0 a0       	breq	8000572a <otg_interrupt+0x3ea>
		// Stall Handshake received
		uhd_ack_stall(0);
80005718:	34 09       	mov	r9,64
8000571a:	fe 68 05 60 	mov	r8,-129696
8000571e:	91 09       	st.w	r8[0x0],r9
		uhd_ctrl_request_end(UHD_TRANS_STALL);
80005720:	30 4c       	mov	r12,4
80005722:	f0 1f 00 e1 	mcall	80005aa4 <otg_interrupt+0x764>
80005726:	e0 8f 01 a0 	bral	80005a66 <otg_interrupt+0x726>
		return;
	}
	if (Is_uhd_pipe_error(0)) {
8000572a:	fe 68 05 30 	mov	r8,-129744
8000572e:	70 08       	ld.w	r8,r8[0x0]
80005730:	e2 18 00 08 	andl	r8,0x8,COH
80005734:	e0 80 01 99 	breq	80005a66 <otg_interrupt+0x726>
		// Get and ack error
		uhd_ctrl_request_end(uhd_pipe_get_error(0));
80005738:	30 0c       	mov	r12,0
8000573a:	f0 1f 00 e5 	mcall	80005acc <otg_interrupt+0x78c>
8000573e:	f0 1f 00 da 	mcall	80005aa4 <otg_interrupt+0x764>
80005742:	e0 8f 01 92 	bral	80005a66 <otg_interrupt+0x726>
	if (pipe_int == 0) {
		// Interrupt acked by control endpoint managed
		uhd_ctrl_interrupt();
		return;
	}
	if (pipe_int != AVR32_USBB_EPT_NUM) {
80005746:	30 78       	mov	r8,7
80005748:	f0 07 18 00 	cp.b	r7,r8
8000574c:	c6 60       	breq	80005818 <otg_interrupt+0x4d8>
 *
 * \param pipe  Pipe number
 */
static void uhd_pipe_interrupt(uint8_t pipe)
{
	if (Is_uhd_bank_interrupt_enabled(pipe) && (0==uhd_nb_busy_bank(pipe))) {
8000574e:	ee 08 15 02 	lsl	r8,r7,0x2
80005752:	fe 6a 05 c0 	mov	r10,-129600
80005756:	f0 0a 00 09 	add	r9,r8,r10
8000575a:	72 0a       	ld.w	r10,r9[0x0]
8000575c:	e2 1a 10 00 	andl	r10,0x1000,COH
80005760:	c1 40       	breq	80005788 <otg_interrupt+0x448>
80005762:	fe 6c 05 30 	mov	r12,-129744
80005766:	f0 0c 00 0a 	add	r10,r8,r12
8000576a:	74 0a       	ld.w	r10,r10[0x0]
8000576c:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
80005770:	c0 c1       	brne	80005788 <otg_interrupt+0x448>
		uhd_disable_bank_interrupt(pipe);
80005772:	e0 38 f9 e0 	sub	r8,129504
80005776:	e0 69 10 00 	mov	r9,4096
8000577a:	91 09       	st.w	r8[0x0],r9
		uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
8000577c:	30 0b       	mov	r11,0
8000577e:	0e 9c       	mov	r12,r7
80005780:	f0 1f 00 d4 	mcall	80005ad0 <otg_interrupt+0x790>
80005784:	e0 8f 01 71 	bral	80005a66 <otg_interrupt+0x726>
		return;
	}
	if (Is_uhd_out_ready_interrupt_enabled(pipe) && Is_uhd_out_ready(pipe)) {
80005788:	72 09       	ld.w	r9,r9[0x0]
8000578a:	e2 19 00 02 	andl	r9,0x2,COH
8000578e:	c2 00       	breq	800057ce <otg_interrupt+0x48e>
80005790:	fe 6b 05 30 	mov	r11,-129744
80005794:	f0 0b 00 09 	add	r9,r8,r11
80005798:	72 09       	ld.w	r9,r9[0x0]
8000579a:	e2 19 00 02 	andl	r9,0x2,COH
8000579e:	c1 80       	breq	800057ce <otg_interrupt+0x48e>
		uhd_disable_out_ready_interrupt(pipe);
800057a0:	fe 6a 06 20 	mov	r10,-129504
800057a4:	f0 0a 00 09 	add	r9,r8,r10
800057a8:	30 2a       	mov	r10,2
800057aa:	93 0a       	st.w	r9[0x0],r10
		// One bank is free then send a ZLP
		uhd_ack_out_ready(pipe);
800057ac:	fe 6c 05 60 	mov	r12,-129696
800057b0:	f0 0c 00 0b 	add	r11,r8,r12
800057b4:	97 0a       	st.w	r11[0x0],r10
		uhd_ack_fifocon(pipe);
800057b6:	e0 6a 40 00 	mov	r10,16384
800057ba:	93 0a       	st.w	r9[0x0],r10
		uhd_unfreeze_pipe(pipe);
800057bc:	e2 6a 00 00 	mov	r10,131072
800057c0:	93 0a       	st.w	r9[0x0],r10
		uhd_enable_bank_interrupt(pipe);
800057c2:	e0 38 fa 10 	sub	r8,129552
800057c6:	e0 69 10 00 	mov	r9,4096
800057ca:	91 09       	st.w	r8[0x0],r9
800057cc:	c4 d9       	rjmp	80005a66 <otg_interrupt+0x726>
		return;
	}
	if (Is_uhd_stall(pipe)) {
800057ce:	fe 6b 05 30 	mov	r11,-129744
800057d2:	f0 0b 00 09 	add	r9,r8,r11
800057d6:	72 0a       	ld.w	r10,r9[0x0]
800057d8:	e2 1a 00 40 	andl	r10,0x40,COH
800057dc:	c1 10       	breq	800057fe <otg_interrupt+0x4be>
		uhd_ack_stall(pipe);
800057de:	fe 6a 05 60 	mov	r10,-129696
800057e2:	f0 0a 00 09 	add	r9,r8,r10
800057e6:	34 0a       	mov	r10,64
800057e8:	93 0a       	st.w	r9[0x0],r10
		uhd_reset_data_toggle(pipe);
800057ea:	e0 38 fa 10 	sub	r8,129552
800057ee:	e4 69 00 00 	mov	r9,262144
800057f2:	91 09       	st.w	r8[0x0],r9
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
800057f4:	30 4b       	mov	r11,4
800057f6:	0e 9c       	mov	r12,r7
800057f8:	f0 1f 00 ad 	mcall	80005aac <otg_interrupt+0x76c>
800057fc:	c3 59       	rjmp	80005a66 <otg_interrupt+0x726>
		return;
	}
	if (Is_uhd_pipe_error(pipe)) {
800057fe:	72 08       	ld.w	r8,r9[0x0]
80005800:	e2 18 00 08 	andl	r8,0x8,COH
80005804:	e0 80 01 31 	breq	80005a66 <otg_interrupt+0x726>
		// Get and ack error
		uhd_ep_abort_pipe(pipe, uhd_pipe_get_error(pipe));
80005808:	0e 9c       	mov	r12,r7
8000580a:	f0 1f 00 b1 	mcall	80005acc <otg_interrupt+0x78c>
8000580e:	18 9b       	mov	r11,r12
80005810:	0e 9c       	mov	r12,r7
80005812:	f0 1f 00 a7 	mcall	80005aac <otg_interrupt+0x76c>
80005816:	c2 89       	rjmp	80005a66 <otg_interrupt+0x726>
	if (pipe_int != AVR32_USBB_EPT_NUM) {
		// Interrupt acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt(pipe_int);
		return;
	}
	pipe_int = uhd_get_pipe_dma_interrupt_number();
80005818:	fe 68 00 00 	mov	r8,-131072
8000581c:	f0 f9 04 04 	ld.w	r9,r8[1028]
80005820:	f0 fc 04 10 	ld.w	r12,r8[1040]
80005824:	f2 08 16 19 	lsr	r8,r9,0x19
80005828:	f1 ec 03 9c 	and	r12,r8,r12>>0x19
8000582c:	a7 ac       	sbr	r12,0x6
8000582e:	5c 9c       	brev	r12
80005830:	f8 0c 12 00 	clz	r12,r12
80005834:	2f fc       	sub	r12,-1
	if (pipe_int != AVR32_USBB_EPT_NUM) {
80005836:	30 78       	mov	r8,7
80005838:	f0 0c 18 00 	cp.b	r12,r8
8000583c:	c4 20       	breq	800058c0 <otg_interrupt+0x580>
static void uhd_pipe_interrupt_dma(uint8_t pipe)
{
	uhd_pipe_job_t *ptr_job;
	uint32_t nb_remaining;

	if (uhd_pipe_dma_get_status(pipe)
8000583e:	18 9a       	mov	r10,r12
80005840:	f8 08 15 04 	lsl	r8,r12,0x4
80005844:	e0 38 f9 00 	sub	r8,129280
80005848:	70 39       	ld.w	r9,r8[0xc]
8000584a:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
8000584e:	e0 81 01 0c 	brne	80005a66 <otg_interrupt+0x726>
			& AVR32_USBB_UHDMA1_STATUS_CH_EN_MASK) {
		return; // Ignore EOT_STA interrupt
	}
	// Save number of data no transfered
	nb_remaining = (uhd_pipe_dma_get_status(pipe) &
80005852:	70 3b       	ld.w	r11,r8[0xc]
80005854:	b1 8b       	lsr	r11,0x10
			AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_MASK)
			>> AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_OFFSET;
	if (nb_remaining) {
80005856:	c0 d0       	breq	80005870 <otg_interrupt+0x530>
		// Get job corresponding at endpoint
		ptr_job = &uhd_pipe_job[pipe - 1];
80005858:	f8 c8 00 01 	sub	r8,r12,1
8000585c:	f0 08 00 28 	add	r8,r8,r8<<0x2
80005860:	fe f9 02 48 	ld.w	r9,pc[584]
80005864:	f2 08 00 28 	add	r8,r9,r8<<0x2

		// Transfer no complete (short packet or ZLP) then:
		// Update number of transfered data
		ptr_job->nb_trans -= nb_remaining;
80005868:	70 39       	ld.w	r9,r8[0xc]
8000586a:	16 19       	sub	r9,r11
8000586c:	91 39       	st.w	r8[0xc],r9

		// Set transfer complete to stop the transfer
		ptr_job->buf_size = ptr_job->nb_trans;
8000586e:	91 29       	st.w	r8[0x8],r9
	}

	if (uhd_is_pipe_out(pipe)) {
80005870:	f4 08 15 02 	lsl	r8,r10,0x2
80005874:	fe 6a 05 00 	mov	r10,-129792
80005878:	f0 0a 00 09 	add	r9,r8,r10
8000587c:	72 09       	ld.w	r9,r9[0x0]
8000587e:	f3 d9 c1 02 	bfextu	r9,r9,0x8,0x2
80005882:	58 29       	cp.w	r9,2
80005884:	c0 71       	brne	80005892 <otg_interrupt+0x552>
		// Wait that all banks are free to freeze clock of OUT endpoint
		// and call callback
		uhd_enable_bank_interrupt(pipe);
80005886:	e0 38 fa 10 	sub	r8,129552
8000588a:	e0 69 10 00 	mov	r9,4096
8000588e:	91 09       	st.w	r8[0x0],r9
80005890:	ce b8       	rjmp	80005a66 <otg_interrupt+0x726>
	} else {
		if (!Is_uhd_pipe_frozen(pipe)) {
80005892:	fe 6a 05 c0 	mov	r10,-129600
80005896:	f0 0a 00 09 	add	r9,r8,r10
8000589a:	72 0a       	ld.w	r10,r9[0x0]
8000589c:	e6 1a 00 02 	andh	r10,0x2,COH
800058a0:	c0 d1       	brne	800058ba <otg_interrupt+0x57a>
			// Pipe is not freeze in case of :
			// - incomplete transfer when the request number INRQ is not complete.
			// - low USB speed and with a high CPU frequency,
			// a ACK from host can be always running on USB line.

			if (nb_remaining) {
800058a2:	58 0b       	cp.w	r11,0
800058a4:	c0 70       	breq	800058b2 <otg_interrupt+0x572>
				// Freeze pipe in case of incomplete transfer
				uhd_freeze_pipe(pipe);
800058a6:	e0 38 fa 10 	sub	r8,129552
800058aa:	e2 69 00 00 	mov	r9,131072
800058ae:	91 09       	st.w	r8[0x0],r9
800058b0:	c0 58       	rjmp	800058ba <otg_interrupt+0x57a>
			} else {
				// Wait freeze in case of ASK on going
				while (!Is_uhd_pipe_frozen(pipe)) {
800058b2:	72 08       	ld.w	r8,r9[0x0]
800058b4:	e6 18 00 02 	andh	r8,0x2,COH
800058b8:	cf d0       	breq	800058b2 <otg_interrupt+0x572>
				}
			}
		}
		uhd_pipe_trans_complet(pipe);
800058ba:	f0 1f 00 87 	mcall	80005ad4 <otg_interrupt+0x794>
800058be:	cd 48       	rjmp	80005a66 <otg_interrupt+0x726>
		// Interrupt DMA acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt_dma(pipe_int);
		return;
	}
	// USB bus reset detection
	if (Is_uhd_reset_sent()) {
800058c0:	fe 68 04 04 	mov	r8,-130044
800058c4:	70 08       	ld.w	r8,r8[0x0]
800058c6:	e2 18 00 04 	andl	r8,0x4,COH
800058ca:	c0 d0       	breq	800058e4 <otg_interrupt+0x5a4>
		uhd_ack_reset_sent();
800058cc:	30 49       	mov	r9,4
800058ce:	fe 68 04 08 	mov	r8,-130040
800058d2:	91 09       	st.w	r8[0x0],r9
		if (uhd_reset_callback != NULL) {
800058d4:	fe f8 02 04 	ld.w	r8,pc[516]
800058d8:	70 08       	ld.w	r8,r8[0x0]
800058da:	58 08       	cp.w	r8,0
800058dc:	e0 80 00 c5 	breq	80005a66 <otg_interrupt+0x726>
			uhd_reset_callback();
800058e0:	5d 18       	icall	r8
800058e2:	cc 28       	rjmp	80005a66 <otg_interrupt+0x726>
		}
		return;
	}

	// Manage dis/connection event
	if (Is_uhd_disconnection() && Is_uhd_disconnection_int_enabled()) {
800058e4:	fe 68 04 04 	mov	r8,-130044
800058e8:	70 08       	ld.w	r8,r8[0x0]
800058ea:	e2 18 00 02 	andl	r8,0x2,COH
800058ee:	c2 80       	breq	8000593e <otg_interrupt+0x5fe>
800058f0:	fe 68 04 10 	mov	r8,-130032
800058f4:	70 08       	ld.w	r8,r8[0x0]
800058f6:	e2 18 00 02 	andl	r8,0x2,COH
800058fa:	c2 20       	breq	8000593e <otg_interrupt+0x5fe>
		uhd_ack_disconnection();
800058fc:	30 28       	mov	r8,2
800058fe:	fe 69 04 08 	mov	r9,-130040
80005902:	93 08       	st.w	r9[0x0],r8
		uhd_disable_disconnection_int();
80005904:	fe 69 04 14 	mov	r9,-130028
80005908:	93 08       	st.w	r9[0x0],r8
		// Stop reset signal, in case of disconnection during reset
		uhd_stop_reset();
8000590a:	fe 68 04 00 	mov	r8,-130048
8000590e:	70 09       	ld.w	r9,r8[0x0]
80005910:	a9 d9       	cbr	r9,0x9
80005912:	91 09       	st.w	r8[0x0],r9
		// Disable wakeup/resumes interrupts,
		// in case of disconnection during suspend mode
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
80005914:	35 89       	mov	r9,88
80005916:	fe 68 00 00 	mov	r8,-131072
8000591a:	f1 49 04 14 	st.w	r8[1044],r9
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
8000591e:	30 3c       	mov	r12,3
80005920:	f0 1f 00 5c 	mcall	80005a90 <otg_interrupt+0x750>
		uhd_enable_connection_int();
80005924:	30 19       	mov	r9,1
80005926:	fe 68 04 18 	mov	r8,-130024
8000592a:	91 09       	st.w	r8[0x0],r9
		uhd_suspend_start = 0;
8000592c:	30 08       	mov	r8,0
8000592e:	4d 89       	lddpc	r9,80005a8c <otg_interrupt+0x74c>
80005930:	b2 88       	st.b	r9[0x0],r8
		uhd_resume_start = 0;
80005932:	4d 99       	lddpc	r9,80005a94 <otg_interrupt+0x754>
80005934:	b2 88       	st.b	r9[0x0],r8
		uhc_notify_connection(false);
80005936:	30 0c       	mov	r12,0
80005938:	f0 1f 00 69 	mcall	80005adc <otg_interrupt+0x79c>
8000593c:	c9 58       	rjmp	80005a66 <otg_interrupt+0x726>
		return;
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
8000593e:	fe 68 04 04 	mov	r8,-130044
80005942:	70 08       	ld.w	r8,r8[0x0]
80005944:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005948:	c2 30       	breq	8000598e <otg_interrupt+0x64e>
8000594a:	fe 68 04 10 	mov	r8,-130032
8000594e:	70 08       	ld.w	r8,r8[0x0]
80005950:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005954:	c1 d0       	breq	8000598e <otg_interrupt+0x64e>
		uhd_ack_connection();
80005956:	30 17       	mov	r7,1
80005958:	fe 68 04 08 	mov	r8,-130040
8000595c:	91 07       	st.w	r8[0x0],r7
		uhd_disable_connection_int();
8000595e:	fe 68 04 14 	mov	r8,-130028
80005962:	91 07       	st.w	r8[0x0],r7
		uhd_enable_disconnection_int();
80005964:	30 29       	mov	r9,2
80005966:	fe 68 04 18 	mov	r8,-130024
8000596a:	91 09       	st.w	r8[0x0],r9
		uhd_enable_sof();
8000596c:	fe 68 04 00 	mov	r8,-130048
80005970:	70 09       	ld.w	r9,r8[0x0]
80005972:	a9 a9       	sbr	r9,0x8
80005974:	91 09       	st.w	r8[0x0],r9
		uhd_sleep_mode(UHD_STATE_IDLE);
80005976:	30 5c       	mov	r12,5
80005978:	f0 1f 00 46 	mcall	80005a90 <otg_interrupt+0x750>
		uhd_suspend_start = 0;
8000597c:	30 08       	mov	r8,0
8000597e:	4c 49       	lddpc	r9,80005a8c <otg_interrupt+0x74c>
80005980:	b2 88       	st.b	r9[0x0],r8
		uhd_resume_start = 0;
80005982:	4c 59       	lddpc	r9,80005a94 <otg_interrupt+0x754>
80005984:	b2 88       	st.b	r9[0x0],r8
		uhc_notify_connection(true);
80005986:	0e 9c       	mov	r12,r7
80005988:	f0 1f 00 55 	mcall	80005adc <otg_interrupt+0x79c>
8000598c:	c6 d8       	rjmp	80005a66 <otg_interrupt+0x726>
		return;
	}

	// Manage Vbus error
	if (Is_uhd_vbus_error_interrupt()) {
8000598e:	fe 68 08 04 	mov	r8,-129020
80005992:	70 08       	ld.w	r8,r8[0x0]
80005994:	e2 18 00 08 	andl	r8,0x8,COH
80005998:	c0 80       	breq	800059a8 <otg_interrupt+0x668>
		uhd_ack_vbus_error_interrupt();
8000599a:	30 89       	mov	r9,8
8000599c:	fe 68 08 08 	mov	r8,-129016
800059a0:	91 09       	st.w	r8[0x0],r9
		UHC_VBUS_ERROR();
800059a2:	f0 1f 00 50 	mcall	80005ae0 <otg_interrupt+0x7a0>
800059a6:	c6 08       	rjmp	80005a66 <otg_interrupt+0x726>
		return;
	}

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
800059a8:	fe 69 08 04 	mov	r9,-129020
800059ac:	72 08       	ld.w	r8,r9[0x0]
800059ae:	e2 18 40 00 	andl	r8,0x4000,COH
800059b2:	cf d0       	breq	800059ac <otg_interrupt+0x66c>
	otg_unfreeze_clock();
800059b4:	fe 68 08 00 	mov	r8,-129024
800059b8:	70 09       	ld.w	r9,r8[0x0]
800059ba:	af c9       	cbr	r9,0xe
800059bc:	91 09       	st.w	r8[0x0],r9

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
800059be:	fe 68 04 10 	mov	r8,-130032
800059c2:	70 08       	ld.w	r8,r8[0x0]
800059c4:	e2 18 00 40 	andl	r8,0x40,COH
800059c8:	c2 d0       	breq	80005a22 <otg_interrupt+0x6e2>
800059ca:	fe 68 04 04 	mov	r8,-130044
800059ce:	70 08       	ld.w	r8,r8[0x0]
800059d0:	e2 18 00 40 	andl	r8,0x40,COH
800059d4:	c0 d1       	brne	800059ee <otg_interrupt+0x6ae>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
800059d6:	fe 68 04 04 	mov	r8,-130044
800059da:	70 08       	ld.w	r8,r8[0x0]

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
	otg_unfreeze_clock();

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
800059dc:	e2 18 00 08 	andl	r8,0x8,COH
800059e0:	c0 71       	brne	800059ee <otg_interrupt+0x6ae>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
800059e2:	fe 68 04 04 	mov	r8,-130044
800059e6:	70 08       	ld.w	r8,r8[0x0]

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
	otg_unfreeze_clock();

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
800059e8:	e2 18 00 10 	andl	r8,0x10,COH
800059ec:	c1 b0       	breq	80005a22 <otg_interrupt+0x6e2>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
		// Disable wakeup/resumes interrupts
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
800059ee:	35 89       	mov	r9,88
800059f0:	fe 68 00 00 	mov	r8,-131072
800059f4:	f1 49 04 14 	st.w	r8[1044],r9
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_enable_sof();
800059f8:	fe 68 04 00 	mov	r8,-130048
800059fc:	70 09       	ld.w	r9,r8[0x0]
800059fe:	a9 a9       	sbr	r9,0x8
80005a00:	91 09       	st.w	r8[0x0],r9
		if ((!Is_uhd_downstream_resume())
80005a02:	fe 68 04 04 	mov	r8,-130044
80005a06:	70 08       	ld.w	r8,r8[0x0]
80005a08:	e2 18 00 08 	andl	r8,0x8,COH
80005a0c:	c0 41       	brne	80005a14 <otg_interrupt+0x6d4>
				&&(!Is_uhd_disconnection())) {
80005a0e:	fe 68 04 04 	mov	r8,-130044
80005a12:	70 08       	ld.w	r8,r8[0x0]
			if (Is_uhd_high_speed_mode()) {
				uhd_send_resume();
			}
		}
		// Wait 50ms before restarting transfer
		uhd_resume_start = 50;
80005a14:	33 29       	mov	r9,50
80005a16:	4a 08       	lddpc	r8,80005a94 <otg_interrupt+0x754>
80005a18:	b0 89       	st.b	r8[0x0],r9
		uhd_sleep_mode(UHD_STATE_IDLE);
80005a1a:	30 5c       	mov	r12,5
80005a1c:	f0 1f 00 1d 	mcall	80005a90 <otg_interrupt+0x750>
80005a20:	c2 38       	rjmp	80005a66 <otg_interrupt+0x726>
		return;
	}

	// Manage Vbus state change
	if (Is_otg_vbus_transition()) {
80005a22:	fe 68 08 04 	mov	r8,-129020
80005a26:	70 08       	ld.w	r8,r8[0x0]
80005a28:	e2 18 00 02 	andl	r8,0x2,COH
80005a2c:	c1 d0       	breq	80005a66 <otg_interrupt+0x726>
		otg_ack_vbus_transition();
80005a2e:	30 29       	mov	r9,2
80005a30:	fe 68 08 08 	mov	r8,-129016
80005a34:	91 09       	st.w	r8[0x0],r9
		if (Is_otg_vbus_high()) {
80005a36:	fe 68 08 04 	mov	r8,-129020
80005a3a:	70 08       	ld.w	r8,r8[0x0]
80005a3c:	e2 18 08 00 	andl	r8,0x800,COH
80005a40:	c0 80       	breq	80005a50 <otg_interrupt+0x710>
			uhd_sleep_mode(UHD_STATE_DISCONNECT);
80005a42:	30 3c       	mov	r12,3
80005a44:	f0 1f 00 13 	mcall	80005a90 <otg_interrupt+0x750>
			UHC_VBUS_CHANGE(true);
80005a48:	30 1c       	mov	r12,1
80005a4a:	f0 1f 00 27 	mcall	80005ae4 <otg_interrupt+0x7a4>
80005a4e:	c0 c8       	rjmp	80005a66 <otg_interrupt+0x726>
		} else {
			uhd_sleep_mode(UHD_STATE_NO_VBUS);
80005a50:	30 2c       	mov	r12,2
80005a52:	f0 1f 00 10 	mcall	80005a90 <otg_interrupt+0x750>
			otg_freeze_clock();
80005a56:	fe 68 08 00 	mov	r8,-129024
80005a5a:	70 09       	ld.w	r9,r8[0x0]
80005a5c:	af a9       	sbr	r9,0xe
80005a5e:	91 09       	st.w	r8[0x0],r9
			UHC_VBUS_CHANGE(false);
80005a60:	30 0c       	mov	r12,0
80005a62:	f0 1f 00 21 	mcall	80005ae4 <otg_interrupt+0x7a4>
	if (b_mode_device) {
		udd_interrupt();
	} else {
		uhd_interrupt();
	}
	otg_data_memory_barrier();
80005a66:	fe 68 00 00 	mov	r8,-131072
80005a6a:	f0 f8 08 18 	ld.w	r8,r8[2072]
}
80005a6e:	2f fd       	sub	sp,-4
80005a70:	d4 32       	popm	r0-r7,lr
80005a72:	d6 03       	rete
80005a74:	80 00       	ld.sh	r0,r0[0x0]
80005a76:	6c e8       	ld.w	r8,r6[0x38]
80005a78:	80 00       	ld.sh	r0,r0[0x0]
80005a7a:	2b 20       	sub	r0,-78
80005a7c:	80 00       	ld.sh	r0,r0[0x0]
80005a7e:	6b 90       	ld.w	r0,r5[0x64]
80005a80:	80 00       	ld.sh	r0,r0[0x0]
80005a82:	6b 7c       	ld.w	r12,r5[0x5c]
80005a84:	80 00       	ld.sh	r0,r0[0x0]
80005a86:	6c f4       	ld.w	r4,r6[0x3c]
80005a88:	80 00       	ld.sh	r0,r0[0x0]
80005a8a:	3e b8       	mov	r8,-21
80005a8c:	00 00       	add	r0,r0
80005a8e:	0a cc       	st.b	r5++,r12
80005a90:	80 00       	ld.sh	r0,r0[0x0]
80005a92:	4a f0       	lddpc	r0,80005b4c <sysclk_priv_disable_module+0x24>
80005a94:	00 00       	add	r0,r0
80005a96:	0a ce       	st.b	r5++,lr
80005a98:	00 00       	add	r0,r0
80005a9a:	0a cd       	st.b	r5++,sp
80005a9c:	80 00       	ld.sh	r0,r0[0x0]
80005a9e:	6d 18       	ld.w	r8,r6[0x44]
80005aa0:	00 00       	add	r0,r0
80005aa2:	0b d0       	ld.ub	r0,r5[0x5]
80005aa4:	80 00       	ld.sh	r0,r0[0x0]
80005aa6:	4c 08       	lddpc	r8,80005ba4 <sysclk_disable_usb+0xc>
80005aa8:	00 00       	add	r0,r0
80005aaa:	0a 54       	eor	r4,r5
80005aac:	80 00       	ld.sh	r0,r0[0x0]
80005aae:	48 48       	lddpc	r8,80005abc <otg_interrupt+0x77c>
80005ab0:	80 00       	ld.sh	r0,r0[0x0]
80005ab2:	6b d8       	ld.w	r8,r5[0x74]
80005ab4:	80 00       	ld.sh	r0,r0[0x0]
80005ab6:	2d 58       	sub	r8,-43
80005ab8:	00 00       	add	r0,r0
80005aba:	0b c4       	ld.ub	r4,r5[0x4]
80005abc:	00 00       	add	r0,r0
80005abe:	0b c0       	ld.ub	r0,r5[0x4]
80005ac0:	80 00       	ld.sh	r0,r0[0x0]
80005ac2:	45 e0       	lddsp	r0,sp[0x178]
80005ac4:	80 00       	ld.sh	r0,r0[0x0]
80005ac6:	45 a0       	lddsp	r0,sp[0x168]
80005ac8:	00 00       	add	r0,r0
80005aca:	0b c8       	ld.ub	r8,r5[0x4]
80005acc:	80 00       	ld.sh	r0,r0[0x0]
80005ace:	47 18       	lddsp	r8,sp[0x1c4]
80005ad0:	80 00       	ld.sh	r0,r0[0x0]
80005ad2:	47 c4       	lddsp	r4,sp[0x1f0]
80005ad4:	80 00       	ld.sh	r0,r0[0x0]
80005ad6:	48 b0       	lddpc	r0,80005b00 <_stext+0x18>
80005ad8:	00 00       	add	r0,r0
80005ada:	0a 50       	eor	r0,r5
80005adc:	80 00       	ld.sh	r0,r0[0x0]
80005ade:	6d 50       	ld.w	r0,r6[0x54]
80005ae0:	80 00       	ld.sh	r0,r0[0x0]
80005ae2:	29 c2       	sub	r2,-100
80005ae4:	80 00       	ld.sh	r0,r0[0x0]
80005ae6:	29 c0       	sub	r0,-100

80005ae8 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80005ae8:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80005aec:	fe c0 88 ec 	sub	r0,pc,-30484

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80005af0:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80005af4:	d5 53       	csrf	0x15
  cp      r0, r1
80005af6:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80005af8:	e0 61 08 d0 	mov	r1,2256
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80005afc:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80005afe:	c0 62       	brcc	80005b0a <idata_load_loop_end>
  cp      r0, r1
80005b00:	48 92       	lddpc	r2,80005b24 <udata_clear_loop_end+0x4>

80005b02 <idata_load_loop>:
  brlo    idata_load_loop
80005b02:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80005b04:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
80005b06:	02 30       	cp.w	r0,r1
  cp      r0, r1
80005b08:	cf d3       	brcs	80005b02 <idata_load_loop>

80005b0a <idata_load_loop_end>:
  brhs    udata_clear_loop_end
80005b0a:	e0 60 08 d0 	mov	r0,2256
  mov     r2, 0
  mov     r3, 0
80005b0e:	e0 61 0c 48 	mov	r1,3144
udata_clear_loop:
  st.d    r0++, r2
  cp      r0, r1
80005b12:	02 30       	cp.w	r0,r1
  brlo    udata_clear_loop
80005b14:	c0 62       	brcc	80005b20 <udata_clear_loop_end>
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80005b16:	30 02       	mov	r2,0
80005b18:	30 03       	mov	r3,0

80005b1a <udata_clear_loop>:
80005b1a:	a1 22       	st.d	r0++,r2
80005b1c:	02 30       	cp.w	r0,r1
80005b1e:	cf e3       	brcs	80005b1a <udata_clear_loop>

80005b20 <udata_clear_loop_end>:
80005b20:	fe cf e3 80 	sub	pc,pc,-7296
80005b24:	80 00       	ld.sh	r0,r0[0x0]
80005b26:	db 80       	acall	0xb8

80005b28 <sysclk_priv_disable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005b28:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80005b2c:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80005b2e:	fe 78 0c 00 	mov	r8,-62464
80005b32:	71 59       	ld.w	r9,r8[0x54]
80005b34:	e2 19 00 40 	andl	r9,0x40,COH
80005b38:	cf d0       	breq	80005b32 <sysclk_priv_disable_module+0xa>
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80005b3a:	a3 6c       	lsl	r12,0x2
80005b3c:	e0 2c f3 f8 	sub	r12,62456
80005b40:	78 09       	ld.w	r9,r12[0x0]
	mask &= ~(1U << module_index);
80005b42:	30 18       	mov	r8,1
80005b44:	f0 0b 09 48 	lsl	r8,r8,r11
80005b48:	5c d8       	com	r8
80005b4a:	12 68       	and	r8,r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
80005b4c:	99 08       	st.w	r12[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005b4e:	14 98       	mov	r8,r10
80005b50:	e6 18 00 01 	andh	r8,0x1,COH
80005b54:	c0 21       	brne	80005b58 <sysclk_priv_disable_module+0x30>
      cpu_irq_enable();
80005b56:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80005b58:	5e fc       	retal	r12
80005b5a:	d7 03       	nop

80005b5c <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(unsigned int index)
{
80005b5c:	eb cd 40 80 	pushm	r7,lr
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_PBB, index);
80005b60:	18 9b       	mov	r11,r12
80005b62:	30 3c       	mov	r12,3
80005b64:	f0 1f 00 0b 	mcall	80005b90 <sysclk_disable_pbb_module+0x34>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005b68:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80005b6c:	d3 03       	ssrf	0x10

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	sysclk_pbb_refcount--;
80005b6e:	48 a9       	lddpc	r9,80005b94 <sysclk_disable_pbb_module+0x38>
80005b70:	13 88       	ld.ub	r8,r9[0x0]
80005b72:	20 18       	sub	r8,1
80005b74:	5c 58       	castu.b	r8
80005b76:	b2 88       	st.b	r9[0x0],r8
	if (!sysclk_pbb_refcount)
80005b78:	c0 51       	brne	80005b82 <sysclk_disable_pbb_module+0x26>
 * \brief Disable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(unsigned int index)
{
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_HSB, index);
80005b7a:	30 2b       	mov	r11,2
80005b7c:	30 1c       	mov	r12,1
80005b7e:	f0 1f 00 05 	mcall	80005b90 <sysclk_disable_pbb_module+0x34>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005b82:	e6 17 00 01 	andh	r7,0x1,COH
80005b86:	c0 21       	brne	80005b8a <sysclk_disable_pbb_module+0x2e>
      cpu_irq_enable();
80005b88:	d5 03       	csrf	0x10
		sysclk_disable_hsb_module(SYSCLK_PBB_BRIDGE);

	cpu_irq_restore(flags);
}
80005b8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b8e:	00 00       	add	r0,r0
80005b90:	80 00       	ld.sh	r0,r0[0x0]
80005b92:	5b 28       	cp.w	r8,-14
80005b94:	00 00       	add	r0,r0
80005b96:	0a d0       	st.w	--r5,r0

80005b98 <sysclk_disable_usb>:

/**
 * \brief Disable the USB generic clock
 */
void sysclk_disable_usb(void)
{
80005b98:	d4 01       	pushm	lr
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
}

static inline void genclk_disable(unsigned int id)
{
	AVR32_PM.gcctrl[id] = 0;
80005b9a:	30 09       	mov	r9,0
80005b9c:	fe 78 0c 00 	mov	r8,-62464
80005ba0:	f1 49 00 70 	st.w	r8[112],r9
80005ba4:	30 3b       	mov	r11,3
80005ba6:	30 1c       	mov	r12,1
80005ba8:	f0 1f 00 03 	mcall	80005bb4 <sysclk_disable_usb+0x1c>
	genclk_disable(AVR32_PM_GCLK_USBB);
	sysclk_disable_hsb_module(SYSCLK_USBB_DATA);
	sysclk_disable_pbb_module(SYSCLK_USBB_REGS);
80005bac:	30 1c       	mov	r12,1
80005bae:	f0 1f 00 03 	mcall	80005bb8 <sysclk_disable_usb+0x20>
}
80005bb2:	d8 02       	popm	pc
80005bb4:	80 00       	ld.sh	r0,r0[0x0]
80005bb6:	5b 28       	cp.w	r8,-14
80005bb8:	80 00       	ld.sh	r0,r0[0x0]
80005bba:	5b 5c       	cp.w	r12,-11

80005bbc <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005bbc:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80005bc0:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80005bc2:	fe 78 0c 00 	mov	r8,-62464
80005bc6:	71 59       	ld.w	r9,r8[0x54]
80005bc8:	e2 19 00 40 	andl	r9,0x40,COH
80005bcc:	cf d0       	breq	80005bc6 <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80005bce:	a3 6c       	lsl	r12,0x2
80005bd0:	e0 2c f3 f8 	sub	r12,62456
80005bd4:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80005bd6:	30 19       	mov	r9,1
80005bd8:	f2 0b 09 4b 	lsl	r11,r9,r11
80005bdc:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80005bde:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005be0:	14 98       	mov	r8,r10
80005be2:	e6 18 00 01 	andh	r8,0x1,COH
80005be6:	c0 21       	brne	80005bea <sysclk_priv_enable_module+0x2e>
      cpu_irq_enable();
80005be8:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80005bea:	5e fc       	retal	r12

80005bec <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80005bec:	eb cd 40 c0 	pushm	r6-r7,lr
80005bf0:	18 97       	mov	r7,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005bf2:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80005bf6:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
80005bf8:	48 c8       	lddpc	r8,80005c28 <sysclk_enable_pbb_module+0x3c>
80005bfa:	11 89       	ld.ub	r9,r8[0x0]
80005bfc:	30 08       	mov	r8,0
80005bfe:	f0 09 18 00 	cp.b	r9,r8
80005c02:	c0 51       	brne	80005c0c <sysclk_enable_pbb_module+0x20>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80005c04:	30 2b       	mov	r11,2
80005c06:	30 1c       	mov	r12,1
80005c08:	f0 1f 00 09 	mcall	80005c2c <sysclk_enable_pbb_module+0x40>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);

	sysclk_pbb_refcount++;
80005c0c:	48 78       	lddpc	r8,80005c28 <sysclk_enable_pbb_module+0x3c>
80005c0e:	11 89       	ld.ub	r9,r8[0x0]
80005c10:	2f f9       	sub	r9,-1
80005c12:	b0 89       	st.b	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005c14:	e6 16 00 01 	andh	r6,0x1,COH
80005c18:	c0 21       	brne	80005c1c <sysclk_enable_pbb_module+0x30>
      cpu_irq_enable();
80005c1a:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
80005c1c:	0e 9b       	mov	r11,r7
80005c1e:	30 3c       	mov	r12,3
80005c20:	f0 1f 00 03 	mcall	80005c2c <sysclk_enable_pbb_module+0x40>
}
80005c24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005c28:	00 00       	add	r0,r0
80005c2a:	0a d0       	st.w	--r5,r0
80005c2c:	80 00       	ld.sh	r0,r0[0x0]
80005c2e:	5b bc       	cp.w	r12,-5

80005c30 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
80005c30:	d4 01       	pushm	lr
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80005c32:	30 1c       	mov	r12,1
80005c34:	f0 1f 00 20 	mcall	80005cb4 <sysclk_enable_usb+0x84>
80005c38:	30 3b       	mov	r11,3
80005c3a:	30 1c       	mov	r12,1
80005c3c:	f0 1f 00 1f 	mcall	80005cb8 <sysclk_enable_usb+0x88>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80005c40:	fe 78 0c 00 	mov	r8,-62464
80005c44:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
80005c46:	e2 18 00 02 	andl	r8,0x2,COH
80005c4a:	c2 f1       	brne	80005ca8 <sysclk_enable_usb+0x78>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80005c4c:	fe 78 0c 00 	mov	r8,-62464
80005c50:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80005c52:	e2 18 00 80 	andl	r8,0x80,COH
80005c56:	c1 71       	brne	80005c84 <sysclk_enable_usb+0x54>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005c58:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80005c5c:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80005c5e:	fe 78 0c 00 	mov	r8,-62464
80005c62:	e0 6a 03 07 	mov	r10,775
80005c66:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80005c68:	70 0a       	ld.w	r10,r8[0x0]
80005c6a:	a3 aa       	sbr	r10,0x2
80005c6c:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005c6e:	12 98       	mov	r8,r9
80005c70:	e6 18 00 01 	andh	r8,0x1,COH
80005c74:	c0 21       	brne	80005c78 <sysclk_enable_usb+0x48>
      cpu_irq_enable();
80005c76:	d5 03       	csrf	0x10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80005c78:	fe 79 0c 00 	mov	r9,-62464
80005c7c:	73 58       	ld.w	r8,r9[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80005c7e:	e2 18 00 80 	andl	r8,0x80,COH
80005c82:	cf d0       	breq	80005c7c <sysclk_enable_usb+0x4c>
	cfg->ctrl = 0;

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
		mul *= 2;
		vco_hz *= 2;
80005c84:	30 88       	mov	r8,8
static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
80005c86:	a3 a8       	sbr	r8,0x2
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80005c88:	31 09       	mov	r9,16
80005c8a:	20 19       	sub	r9,1
80005c8c:	b1 69       	lsl	r9,0x10
80005c8e:	ea 19 3f 00 	orh	r9,0x3f00
80005c92:	e8 19 02 01 	orl	r9,0x201
80005c96:	f3 e8 10 08 	or	r8,r9,r8
80005c9a:	fe 79 0c 00 	mov	r9,-62464
80005c9e:	93 98       	st.w	r9[0x24],r8

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80005ca0:	73 58       	ld.w	r8,r9[0x54]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80005ca2:	e2 18 00 02 	andl	r8,0x2,COH
80005ca6:	cf d0       	breq	80005ca0 <sysclk_enable_usb+0x70>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
80005ca8:	30 79       	mov	r9,7
80005caa:	fe 78 0c 00 	mov	r8,-62464
80005cae:	f1 49 00 70 	st.w	r8[112],r9
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
}
80005cb2:	d8 02       	popm	pc
80005cb4:	80 00       	ld.sh	r0,r0[0x0]
80005cb6:	5b ec       	cp.w	r12,-2
80005cb8:	80 00       	ld.sh	r0,r0[0x0]
80005cba:	5b bc       	cp.w	r12,-5

80005cbc <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80005cbc:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005cbe:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80005cc2:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80005cc4:	fe 78 0c 00 	mov	r8,-62464
80005cc8:	e0 6a 03 07 	mov	r10,775
80005ccc:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80005cce:	70 0a       	ld.w	r10,r8[0x0]
80005cd0:	a3 aa       	sbr	r10,0x2
80005cd2:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005cd4:	12 98       	mov	r8,r9
80005cd6:	e6 18 00 01 	andh	r8,0x1,COH
80005cda:	c0 21       	brne	80005cde <sysclk_init+0x22>
      cpu_irq_enable();
80005cdc:	d5 03       	csrf	0x10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80005cde:	fe 78 0c 00 	mov	r8,-62464
80005ce2:	71 59       	ld.w	r9,r8[0x54]
80005ce4:	e2 19 00 80 	andl	r9,0x80,COH
80005ce8:	cf d0       	breq	80005ce2 <sysclk_init+0x26>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(OSC_ID_OSC0);
		osc_wait_ready(OSC_ID_OSC0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
80005cea:	e0 6c 1b 00 	mov	r12,6912
80005cee:	ea 1c 00 b7 	orh	r12,0xb7
80005cf2:	f0 1f 00 0a 	mcall	80005d18 <sysclk_init+0x5c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005cf6:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80005cfa:	d3 03       	ssrf	0x10
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80005cfc:	fe 78 0c 00 	mov	r8,-62464
80005d00:	70 0a       	ld.w	r10,r8[0x0]
80005d02:	e0 1a ff fc 	andl	r10,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80005d06:	a1 aa       	sbr	r10,0x0
	AVR32_PM.mcctrl = mcctrl;
80005d08:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005d0a:	12 98       	mov	r8,r9
80005d0c:	e6 18 00 01 	andh	r8,0x1,COH
80005d10:	c0 21       	brne	80005d14 <sysclk_init+0x58>
      cpu_irq_enable();
80005d12:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80005d14:	d8 02       	popm	pc
80005d16:	00 00       	add	r0,r0
80005d18:	80 00       	ld.sh	r0,r0[0x0]
80005d1a:	30 ec       	mov	r12,14

80005d1c <uhi_hid_mouse_uninstall>:
	uhi_hid_mouse_start_trans_report(dev->address);
	UHI_HID_MOUSE_CHANGE(dev, true);
}

void uhi_hid_mouse_uninstall(uhc_device_t* dev)
{
80005d1c:	eb cd 40 c0 	pushm	r6-r7,lr
	if (uhi_hid_mouse_dev.dev != dev) 
80005d20:	48 88       	lddpc	r8,80005d40 <uhi_hid_mouse_uninstall+0x24>
80005d22:	70 07       	ld.w	r7,r8[0x0]
80005d24:	18 37       	cp.w	r7,r12
80005d26:	c0 a1       	brne	80005d3a <uhi_hid_mouse_uninstall+0x1e>
		return; // Device not enabled in this interface

	uhi_hid_mouse_dev.dev = NULL;
80005d28:	30 06       	mov	r6,0
80005d2a:	91 06       	st.w	r8[0x0],r6
	Assert(uhi_hid_mouse_dev.report!=NULL);
	free(uhi_hid_mouse_dev.report);
80005d2c:	70 2c       	ld.w	r12,r8[0x8]
80005d2e:	f0 1f 00 06 	mcall	80005d44 <uhi_hid_mouse_uninstall+0x28>
	UHI_HID_MOUSE_CHANGE(dev, false);
80005d32:	0c 9b       	mov	r11,r6
80005d34:	0e 9c       	mov	r12,r7
80005d36:	f0 1f 00 05 	mcall	80005d48 <uhi_hid_mouse_uninstall+0x2c>
80005d3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005d3e:	00 00       	add	r0,r0
80005d40:	00 00       	add	r0,r0
80005d42:	0b 14       	ld.sh	r4,r5++
80005d44:	80 00       	ld.sh	r0,r0[0x0]
80005d46:	79 24       	ld.w	r4,r12[0x48]
80005d48:	80 00       	ld.sh	r0,r0[0x0]
80005d4a:	2a 18       	sub	r8,-95

80005d4c <uhi_hid_mouse_start_trans_report>:
 * \brief Starts the reception of the HID mouse report
 *
 * \param add   USB address to use
 */
static void uhi_hid_mouse_start_trans_report(usb_add_t add)
{
80005d4c:	d4 01       	pushm	lr
	// Start transfer on interrupt endpoint IN
	uhd_ep_run(add, uhi_hid_mouse_dev.ep_in, true, uhi_hid_mouse_dev.report,
80005d4e:	48 7b       	lddpc	r11,80005d68 <uhi_hid_mouse_start_trans_report+0x1c>
80005d50:	48 78       	lddpc	r8,80005d6c <uhi_hid_mouse_start_trans_report+0x20>
80005d52:	1a d8       	st.w	--sp,r8
80005d54:	30 08       	mov	r8,0
80005d56:	1a d8       	st.w	--sp,r8
80005d58:	17 d8       	ld.ub	r8,r11[0x5]
80005d5a:	76 29       	ld.w	r9,r11[0x8]
80005d5c:	30 1a       	mov	r10,1
80005d5e:	17 cb       	ld.ub	r11,r11[0x4]
80005d60:	f0 1f 00 04 	mcall	80005d70 <uhi_hid_mouse_start_trans_report+0x24>
80005d64:	2f ed       	sub	sp,-8
			uhi_hid_mouse_dev.report_size, 0, uhi_hid_mouse_report_reception);
}
80005d66:	d8 02       	popm	pc
80005d68:	00 00       	add	r0,r0
80005d6a:	0b 14       	ld.sh	r4,r5++
80005d6c:	80 00       	ld.sh	r0,r0[0x0]
80005d6e:	5d a8       	*unknown*
80005d70:	80 00       	ld.sh	r0,r0[0x0]
80005d72:	4a 6c       	lddpc	r12,80005e08 <uhi_hid_mouse_report_reception+0x60>

80005d74 <uhi_hid_mouse_enable>:
	}
	return UHC_ENUM_UNSUPPORTED; // No interface supported
}

void uhi_hid_mouse_enable(uhc_device_t* dev)
{
80005d74:	eb cd 40 80 	pushm	r7,lr
	if (uhi_hid_mouse_dev.dev != dev) 
80005d78:	48 98       	lddpc	r8,80005d9c <uhi_hid_mouse_enable+0x28>
80005d7a:	70 07       	ld.w	r7,r8[0x0]
80005d7c:	18 37       	cp.w	r7,r12
80005d7e:	c0 c1       	brne	80005d96 <uhi_hid_mouse_enable+0x22>
		return;  // No interface to enable

	// Init value
	uhi_hid_mouse_dev.report_btn_prev = 0;
80005d80:	30 09       	mov	r9,0
80005d82:	f1 69 00 0c 	st.b	r8[12],r9
	uhi_hid_mouse_start_trans_report(dev->address);
80005d86:	ef 3c 00 12 	ld.ub	r12,r7[18]
80005d8a:	f0 1f 00 06 	mcall	80005da0 <uhi_hid_mouse_enable+0x2c>
	UHI_HID_MOUSE_CHANGE(dev, true);
80005d8e:	30 1b       	mov	r11,1
80005d90:	0e 9c       	mov	r12,r7
80005d92:	f0 1f 00 05 	mcall	80005da4 <uhi_hid_mouse_enable+0x30>
80005d96:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d9a:	00 00       	add	r0,r0
80005d9c:	00 00       	add	r0,r0
80005d9e:	0b 14       	ld.sh	r4,r5++
80005da0:	80 00       	ld.sh	r0,r0[0x0]
80005da2:	5d 4c       	*unknown*
80005da4:	80 00       	ld.sh	r0,r0[0x0]
80005da6:	2a 18       	sub	r8,-95

80005da8 <uhi_hid_mouse_report_reception>:
static void uhi_hid_mouse_report_reception(
		usb_add_t add,
		usb_ep_t ep,
		uhd_trans_status_t status,
		iram_size_t nb_transfered)
{
80005da8:	d4 31       	pushm	r0-r7,lr
80005daa:	20 5d       	sub	sp,20
80005dac:	50 4c       	stdsp	sp[0x10],r12
	uint8_t i;
	unsigned short val;
	UNUSED(ep);

	if ((status == UHD_TRANS_NOTRESPONDING) || (status == UHD_TRANS_TIMEOUT)) {
80005dae:	58 5a       	cp.w	r10,5
80005db0:	5f 0b       	sreq	r11
80005db2:	58 7a       	cp.w	r10,7
80005db4:	5f 08       	sreq	r8
80005db6:	f7 e8 10 08 	or	r8,r11,r8
80005dba:	c0 50       	breq	80005dc4 <uhi_hid_mouse_report_reception+0x1c>
		uhi_hid_mouse_start_trans_report(add);
80005dbc:	f0 1f 01 2d 	mcall	80006270 <uhi_hid_mouse_report_reception+0x4c8>
		return; // HID mouse transfer restart
80005dc0:	e0 8f 02 56 	bral	8000626c <uhi_hid_mouse_report_reception+0x4c4>
	}

	if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
80005dc4:	58 0a       	cp.w	r10,0
80005dc6:	5f 1a       	srne	r10
80005dc8:	58 39       	cp.w	r9,3
80005dca:	5f 88       	srls	r8
80005dcc:	f5 e8 10 08 	or	r8,r10,r8
80005dd0:	e0 81 02 4e 	brne	8000626c <uhi_hid_mouse_report_reception+0x4c4>
80005dd4:	fe f8 04 a0 	ld.w	r8,pc[1184]
80005dd8:	70 29       	ld.w	r9,r8[0x8]
80005dda:	2f f9       	sub	r9,-1
80005ddc:	fe f5 04 9c 	ld.w	r5,pc[1180]
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
80005de0:	ea cb ff cc 	sub	r11,r5,-52
80005de4:	0a 98       	mov	r8,r5
	if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
		return; // HID mouse transfer aborted
	}
	// Decode buttons
	for(i=0; i<52; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;		
80005de6:	13 3a       	ld.ub	r10,r9++
80005de8:	f4 ca 00 80 	sub	r10,r10,128
80005dec:	10 ca       	st.b	r8++,r10

	if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
		return; // HID mouse transfer aborted
	}
	// Decode buttons
	for(i=0; i<52; i++)
80005dee:	16 38       	cp.w	r8,r11
80005df0:	cf b1       	brne	80005de6 <uhi_hid_mouse_report_reception+0x3e>
80005df2:	fe f8 04 82 	ld.w	r8,pc[1154]
80005df6:	70 29       	ld.w	r9,r8[0x8]
80005df8:	2c b9       	sub	r9,-53
80005dfa:	fe f8 04 82 	ld.w	r8,pc[1154]
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
80005dfe:	f0 cb ff fc 	sub	r11,r8,-4
	}
	// Decode buttons
	for(i=0; i<52; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;		
	for(i=0; i<4; i++)
		sliders[i] = uhi_hid_mouse_dev.report[i+53] + 0x80;
80005e02:	13 3a       	ld.ub	r10,r9++
80005e04:	f4 ca 00 80 	sub	r10,r10,128
80005e08:	10 ca       	st.b	r8++,r10
		return; // HID mouse transfer aborted
	}
	// Decode buttons
	for(i=0; i<52; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;		
	for(i=0; i<4; i++)
80005e0a:	16 38       	cp.w	r8,r11
80005e0c:	cf b1       	brne	80005e02 <uhi_hid_mouse_report_reception+0x5a>
		sliders[i] = uhi_hid_mouse_dev.report[i+53] + 0x80;
		
    i = 0;
	
	while(i < 52 && butt_states[i] == 0)
80005e0e:	fe f8 04 6a 	ld.w	r8,pc[1130]
80005e12:	11 89       	ld.ub	r9,r8[0x0]
80005e14:	30 08       	mov	r8,0
80005e16:	f0 09 18 00 	cp.b	r9,r8
80005e1a:	e0 81 01 ee 	brne	800061f6 <uhi_hid_mouse_report_reception+0x44e>
80005e1e:	fe f8 04 5a 	ld.w	r8,pc[1114]
80005e22:	2f f8       	sub	r8,-1
80005e24:	30 17       	mov	r7,1
80005e26:	30 0a       	mov	r10,0
80005e28:	33 4b       	mov	r11,52
80005e2a:	c0 78       	rjmp	80005e38 <uhi_hid_mouse_report_reception+0x90>
		i++;
80005e2c:	2f f7       	sub	r7,-1
80005e2e:	5c 57       	castu.b	r7
80005e30:	2f f8       	sub	r8,-1
	for(i=0; i<4; i++)
		sliders[i] = uhi_hid_mouse_dev.report[i+53] + 0x80;
		
    i = 0;
	
	while(i < 52 && butt_states[i] == 0)
80005e32:	f6 07 18 00 	cp.b	r7,r11
80005e36:	c0 70       	breq	80005e44 <uhi_hid_mouse_report_reception+0x9c>
80005e38:	11 89       	ld.ub	r9,r8[0x0]
80005e3a:	f4 09 18 00 	cp.b	r9,r10
80005e3e:	cf 70       	breq	80005e2c <uhi_hid_mouse_report_reception+0x84>
80005e40:	e0 8f 01 dc 	bral	800061f8 <uhi_hid_mouse_report_reception+0x450>
		dip204_hide_cursor();
		UHI_HID_MOUSE_EVENT_BTN_LEFT(1);
	}
	else 
	{
		dip204_set_cursor_position(1,1);
80005e44:	30 1b       	mov	r11,1
80005e46:	16 9c       	mov	r12,r11
80005e48:	f0 1f 01 0e 	mcall	80006280 <uhi_hid_mouse_report_reception+0x4d8>
		dip204_write_string("              ");
80005e4c:	fe fc 04 38 	ld.w	r12,pc[1080]
80005e50:	f0 1f 01 0e 	mcall	80006288 <uhi_hid_mouse_report_reception+0x4e0>
		UHI_HID_MOUSE_EVENT_BTN_LEFT(0);
80005e54:	30 0c       	mov	r12,0
80005e56:	f0 1f 01 0e 	mcall	8000628c <uhi_hid_mouse_report_reception+0x4e4>
80005e5a:	c1 b8       	rjmp	80005e90 <uhi_hid_mouse_report_reception+0xe8>
	}
	

	i++;
	
	while(i < 52 && butt_states[i] == 0)
80005e5c:	fe f9 04 1c 	ld.w	r9,pc[1052]
80005e60:	f2 08 07 0a 	ld.ub	r10,r9[r8]
80005e64:	30 09       	mov	r9,0
80005e66:	f2 0a 18 00 	cp.b	r10,r9
80005e6a:	e0 81 01 ec 	brne	80006242 <uhi_hid_mouse_report_reception+0x49a>
80005e6e:	33 3a       	mov	r10,51
80005e70:	fe fc 04 08 	ld.w	r12,pc[1032]
80005e74:	12 9b       	mov	r11,r9
		i++;
80005e76:	2f f8       	sub	r8,-1
80005e78:	5c 58       	castu.b	r8
	}
	

	i++;
	
	while(i < 52 && butt_states[i] == 0)
80005e7a:	f4 08 18 00 	cp.b	r8,r10
80005e7e:	e0 8b 00 09 	brhi	80005e90 <uhi_hid_mouse_report_reception+0xe8>
80005e82:	f8 08 07 09 	ld.ub	r9,r12[r8]
80005e86:	f6 09 18 00 	cp.b	r9,r11
80005e8a:	cf 60       	breq	80005e76 <uhi_hid_mouse_report_reception+0xce>
80005e8c:	e0 8f 01 db 	bral	80006242 <uhi_hid_mouse_report_reception+0x49a>
		dip204_set_cursor_position(1,2);
		dip204_printf_string("a");
		dip204_hide_cursor();
		UHI_HID_MOUSE_EVENT_BTN_RIGHT(1);
	}
	else UHI_HID_MOUSE_EVENT_BTN_RIGHT(0);
80005e90:	30 0c       	mov	r12,0
80005e92:	f0 1f 01 00 	mcall	80006290 <uhi_hid_mouse_report_reception+0x4e8>
	
	if((sliders[0] != pastsliders[0] && sliders[0] != 255) || (sliders[1] != pastsliders[1] && sliders[1] != 255))
80005e96:	fe f8 03 e6 	ld.w	r8,pc[998]
80005e9a:	11 88       	ld.ub	r8,r8[0x0]
80005e9c:	fe f9 03 f8 	ld.w	r9,pc[1016]
80005ea0:	13 89       	ld.ub	r9,r9[0x0]
80005ea2:	f0 09 18 00 	cp.b	r9,r8
80005ea6:	c0 50       	breq	80005eb0 <uhi_hid_mouse_report_reception+0x108>
80005ea8:	3f f9       	mov	r9,-1
80005eaa:	f2 08 18 00 	cp.b	r8,r9
80005eae:	c0 e1       	brne	80005eca <uhi_hid_mouse_report_reception+0x122>
80005eb0:	fe f9 03 cc 	ld.w	r9,pc[972]
80005eb4:	13 99       	ld.ub	r9,r9[0x1]
80005eb6:	fe fa 03 de 	ld.w	r10,pc[990]
80005eba:	15 9a       	ld.ub	r10,r10[0x1]
80005ebc:	f2 0a 18 00 	cp.b	r10,r9
80005ec0:	c1 10       	breq	80005ee2 <uhi_hid_mouse_report_reception+0x13a>
80005ec2:	3f fa       	mov	r10,-1
80005ec4:	f4 09 18 00 	cp.b	r9,r10
80005ec8:	c0 d0       	breq	80005ee2 <uhi_hid_mouse_report_reception+0x13a>
		dip204_set_cursor_position(1,3);
		dip204_write_string("                    ");
		dip204_set_cursor_position(1,3);
		dip204_printf_string("slider: %u = %u",1,val);
		dip204_hide_cursor();*/
		dacsend(0,2,val);
80005eca:	fe f9 03 b2 	ld.w	r9,pc[946]
80005ece:	13 99       	ld.ub	r9,r9[0x1]
80005ed0:	a9 69       	lsl	r9,0x8
80005ed2:	f2 08 00 08 	add	r8,r9,r8
80005ed6:	f5 d8 c0 0c 	bfextu	r10,r8,0x0,0xc
80005eda:	30 2b       	mov	r11,2
80005edc:	30 0c       	mov	r12,0
80005ede:	f0 1f 00 ef 	mcall	80006298 <uhi_hid_mouse_report_reception+0x4f0>
	}
	
	if((sliders[2] != pastsliders[2] && sliders[2] != 255) || (sliders[3] != pastsliders[3] && sliders[3] != 255))
80005ee2:	fe f8 03 9a 	ld.w	r8,pc[922]
80005ee6:	11 a8       	ld.ub	r8,r8[0x2]
80005ee8:	fe f9 03 ac 	ld.w	r9,pc[940]
80005eec:	13 a9       	ld.ub	r9,r9[0x2]
80005eee:	f0 09 18 00 	cp.b	r9,r8
80005ef2:	c0 50       	breq	80005efc <uhi_hid_mouse_report_reception+0x154>
80005ef4:	3f f9       	mov	r9,-1
80005ef6:	f2 08 18 00 	cp.b	r8,r9
80005efa:	c0 e1       	brne	80005f16 <uhi_hid_mouse_report_reception+0x16e>
80005efc:	fe f9 03 80 	ld.w	r9,pc[896]
80005f00:	13 b9       	ld.ub	r9,r9[0x3]
80005f02:	fe fa 03 92 	ld.w	r10,pc[914]
80005f06:	15 ba       	ld.ub	r10,r10[0x3]
80005f08:	f2 0a 18 00 	cp.b	r10,r9
80005f0c:	c1 10       	breq	80005f2e <uhi_hid_mouse_report_reception+0x186>
80005f0e:	3f fa       	mov	r10,-1
80005f10:	f4 09 18 00 	cp.b	r9,r10
80005f14:	c0 d0       	breq	80005f2e <uhi_hid_mouse_report_reception+0x186>
		dip204_set_cursor_position(1,4);
		dip204_write_string("                    ");
		dip204_set_cursor_position(1,4);
		dip204_printf_string("slider: %u = %u",2,val);
		dip204_hide_cursor();*/
		dacsend(2,2,val);
80005f16:	fe f9 03 66 	ld.w	r9,pc[870]
80005f1a:	13 b9       	ld.ub	r9,r9[0x3]
80005f1c:	a9 69       	lsl	r9,0x8
80005f1e:	f2 08 00 08 	add	r8,r9,r8
80005f22:	f5 d8 c0 0c 	bfextu	r10,r8,0x0,0xc
80005f26:	30 2b       	mov	r11,2
80005f28:	16 9c       	mov	r12,r11
80005f2a:	f0 1f 00 dc 	mcall	80006298 <uhi_hid_mouse_report_reception+0x4f0>
80005f2e:	fe f8 03 6e 	ld.w	r8,pc[878]
80005f32:	50 08       	stdsp	sp[0x0],r8
80005f34:	30 06       	mov	r6,0
80005f36:	0c 93       	mov	r3,r6
			
			//remove it from the notestack and decrement numnotes
			numnotes--;
			notehappened = 1;
			noteoffhappened = 1;
			if (notestack[0] != -1)
80005f38:	fe f7 03 68 	ld.w	r7,pc[872]
			for (j = 0; j < numnotes; j++)
			{
				//if it's the note that just got released
				if (notestack[j] == i)
				{
					for (k = 0; k < (numnotes - j); k++)
80005f3c:	50 26       	stdsp	sp[0x8],r6
80005f3e:	50 36       	stdsp	sp[0xc],r6
		dip204_set_cursor_position(1,4);
		dip204_write_string("                    ");
		dip204_set_cursor_position(1,4);
		dip204_printf_string("slider: %u = %u",2,val);
		dip204_hide_cursor();*/
		dacsend(2,2,val);
80005f40:	e9 d6 c0 08 	bfextu	r4,r6,0x0,0x8
80005f44:	0c 90       	mov	r0,r6
	//create a stack that stores the currently touched notes in order they were touched
	for (i = 0; i < 48; i++)
	{
		checkstolen = -1;
		//if the current sensor value of a key is positive and it was zero on last count
		if ((butt_states[i] > 0) && (pastbutt_states[i] <= 0))
80005f46:	0b 89       	ld.ub	r9,r5[0x0]
80005f48:	30 08       	mov	r8,0
80005f4a:	f0 09 18 00 	cp.b	r9,r8
80005f4e:	c2 b0       	breq	80005fa4 <uhi_hid_mouse_report_reception+0x1fc>
80005f50:	40 08       	lddsp	r8,sp[0x0]
80005f52:	11 89       	ld.ub	r9,r8[0x0]
80005f54:	30 08       	mov	r8,0
80005f56:	f0 09 18 00 	cp.b	r9,r8
80005f5a:	c7 31       	brne	80006040 <uhi_hid_mouse_report_reception+0x298>
		{
			//it's a note-on -- add it to the monophonic stack
			changed = 1;
			if(numnotes == 0)		
80005f5c:	fe f8 03 48 	ld.w	r8,pc[840]
80005f60:	11 88       	ld.ub	r8,r8[0x0]
80005f62:	58 08       	cp.w	r8,0
80005f64:	c0 c1       	brne	80005f7c <uhi_hid_mouse_report_reception+0x1d4>
				dacsend(1,2,0xFFF);
80005f66:	e0 6a 0f ff 	mov	r10,4095
80005f6a:	30 2b       	mov	r11,2
80005f6c:	30 1c       	mov	r12,1
80005f6e:	f0 1f 00 cb 	mcall	80006298 <uhi_hid_mouse_report_reception+0x4f0>

			//first move notes that are already in the stack one position to the right
			for (j = numnotes; j > 0; j--)
80005f72:	fe f8 03 32 	ld.w	r8,pc[818]
80005f76:	11 88       	ld.ub	r8,r8[0x0]
80005f78:	58 08       	cp.w	r8,0
80005f7a:	c0 a0       	breq	80005f8e <uhi_hid_mouse_report_reception+0x1e6>
				notestack[j] = notestack[(j - 1)];
80005f7c:	ee 08 00 09 	add	r9,r7,r8
80005f80:	f3 39 ff ff 	ld.ub	r9,r9[-1]
80005f84:	ee 08 0b 09 	st.b	r7[r8],r9
			changed = 1;
			if(numnotes == 0)		
				dacsend(1,2,0xFFF);

			//first move notes that are already in the stack one position to the right
			for (j = numnotes; j > 0; j--)
80005f88:	20 18       	sub	r8,1
80005f8a:	5c 58       	castu.b	r8
80005f8c:	cf 81       	brne	80005f7c <uhi_hid_mouse_report_reception+0x1d4>
				notestack[j] = notestack[(j - 1)];

			//then, insert the new note into the front of the stack
			notestack[0] = i;
80005f8e:	ae 86       	st.b	r7[0x0],r6
					polyVoiceBusy[(polynum - 1)] = 1;
					changevoice[(polynum - 1)] = 1;
					voicefound = 1;
				}
			}*/
			numnotes++;
80005f90:	fe f8 03 14 	ld.w	r8,pc[788]
80005f94:	11 89       	ld.ub	r9,r8[0x0]
80005f96:	2f f9       	sub	r9,-1
80005f98:	b0 89       	st.b	r8[0x0],r9
			notehappened = 1;
			currentnote = notestack[0];
80005f9a:	fe f8 03 0e 	ld.w	r8,pc[782]
80005f9e:	b0 84       	st.b	r8[0x0],r4
80005fa0:	30 13       	mov	r3,1
80005fa2:	c4 f8       	rjmp	80006040 <uhi_hid_mouse_report_reception+0x298>
		}

		else if ((butt_states[i] <= 0) && (pastbutt_states[i] > 0))
80005fa4:	40 08       	lddsp	r8,sp[0x0]
80005fa6:	11 89       	ld.ub	r9,r8[0x0]
80005fa8:	30 08       	mov	r8,0
80005faa:	f0 09 18 00 	cp.b	r9,r8
80005fae:	c4 90       	breq	80006040 <uhi_hid_mouse_report_reception+0x298>
		{
			//it's a note-off, remove it from the stack
			changed = 1;
			//go through the notes that are currently held down to find the one that released
			for (j = 0; j < numnotes; j++)
80005fb0:	fe f8 02 f4 	ld.w	r8,pc[756]
80005fb4:	11 81       	ld.ub	r1,r8[0x0]
80005fb6:	58 01       	cp.w	r1,0
80005fb8:	c2 90       	breq	8000600a <uhi_hid_mouse_report_reception+0x262>
80005fba:	30 0e       	mov	lr,0
			{
				//if it's the note that just got released
				if (notestack[j] == i)
				{
					for (k = 0; k < (numnotes - j); k++)
80005fbc:	e2 c9 00 01 	sub	r9,r1,1
80005fc0:	50 19       	stdsp	sp[0x4],r9
		else if ((butt_states[i] <= 0) && (pastbutt_states[i] > 0))
		{
			//it's a note-off, remove it from the stack
			changed = 1;
			//go through the notes that are currently held down to find the one that released
			for (j = 0; j < numnotes; j++)
80005fc2:	1c 94       	mov	r4,lr
			{
				//if it's the note that just got released
				if (notestack[j] == i)
80005fc4:	ee 0e 06 08 	ld.sb	r8,r7[lr]
80005fc8:	10 30       	cp.w	r0,r8
80005fca:	c1 c1       	brne	80006002 <uhi_hid_mouse_report_reception+0x25a>
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
80005fcc:	e2 0e 01 03 	sub	r3,r1,lr
			for (j = 0; j < numnotes; j++)
			{
				//if it's the note that just got released
				if (notestack[j] == i)
				{
					for (k = 0; k < (numnotes - j); k++)
80005fd0:	58 03       	cp.w	r3,0
80005fd2:	e0 8a 00 18 	brle	80006002 <uhi_hid_mouse_report_reception+0x25a>
80005fd6:	40 12       	lddsp	r2,sp[0x4]
80005fd8:	1c 12       	sub	r2,lr
80005fda:	40 29       	lddsp	r9,sp[0x8]
80005fdc:	40 38       	lddsp	r8,sp[0xc]
					{
						notestack[k + j] = notestack[k + j + 1];
80005fde:	e8 09 00 0a 	add	r10,r4,r9
80005fe2:	f4 cb ff ff 	sub	r11,r10,-1
80005fe6:	ee 0b 07 0c 	ld.ub	r12,r7[r11]
80005fea:	ee 0a 0b 0c 	st.b	r7[r10],r12
						//if it's the last one, write negative 1 beyond it (it's already been copied to the position to the left of it)
						if (k == ((numnotes - j) - 1))
80005fee:	12 32       	cp.w	r2,r9
80005ff0:	c0 41       	brne	80005ff8 <uhi_hid_mouse_report_reception+0x250>
							notestack[k + j + 1] = -1;
80005ff2:	3f f9       	mov	r9,-1
80005ff4:	ee 0b 0b 09 	st.b	r7[r11],r9
			for (j = 0; j < numnotes; j++)
			{
				//if it's the note that just got released
				if (notestack[j] == i)
				{
					for (k = 0; k < (numnotes - j); k++)
80005ff8:	2f f8       	sub	r8,-1
80005ffa:	5c 58       	castu.b	r8
80005ffc:	10 99       	mov	r9,r8
80005ffe:	06 38       	cp.w	r8,r3
80006000:	ce f5       	brlt	80005fde <uhi_hid_mouse_report_reception+0x236>
80006002:	2f fe       	sub	lr,-1
		else if ((butt_states[i] <= 0) && (pastbutt_states[i] > 0))
		{
			//it's a note-off, remove it from the stack
			changed = 1;
			//go through the notes that are currently held down to find the one that released
			for (j = 0; j < numnotes; j++)
80006004:	e2 0e 18 00 	cp.b	lr,r1
80006008:	cd d3       	brcs	80005fc2 <uhi_hid_mouse_report_reception+0x21a>
					checkstolen = j;
				}
			}*/
			
			//remove it from the notestack and decrement numnotes
			numnotes--;
8000600a:	20 11       	sub	r1,1
8000600c:	fe f8 02 98 	ld.w	r8,pc[664]
80006010:	b0 81       	st.b	r8[0x0],r1
			notehappened = 1;
			noteoffhappened = 1;
			if (notestack[0] != -1)
80006012:	0f 88       	ld.ub	r8,r7[0x0]
80006014:	3f f9       	mov	r9,-1
80006016:	f2 08 18 00 	cp.b	r8,r9
8000601a:	c0 40       	breq	80006022 <uhi_hid_mouse_report_reception+0x27a>
				currentnote = notestack[0];
8000601c:	fe f9 02 8c 	ld.w	r9,pc[652]
80006020:	b2 88       	st.b	r9[0x0],r8
						}
					}
				}
			}*/
			
			if(numnotes == 0)
80006022:	fe f8 02 82 	ld.w	r8,pc[642]
80006026:	11 89       	ld.ub	r9,r8[0x0]
80006028:	30 08       	mov	r8,0
8000602a:	f0 09 18 00 	cp.b	r9,r8
8000602e:	c0 30       	breq	80006034 <uhi_hid_mouse_report_reception+0x28c>
80006030:	30 13       	mov	r3,1
80006032:	c0 78       	rjmp	80006040 <uhi_hid_mouse_report_reception+0x298>
				dacsend(1,2,0);
80006034:	30 0a       	mov	r10,0
80006036:	30 2b       	mov	r11,2
80006038:	30 1c       	mov	r12,1
8000603a:	f0 1f 00 98 	mcall	80006298 <uhi_hid_mouse_report_reception+0x4f0>
8000603e:	30 13       	mov	r3,1
			
		}
		// update the past keymap array (stores the previous values of every key's sensor reading)
		pastbutt_states[i] = butt_states[i];
80006040:	0b 38       	ld.ub	r8,r5++
80006042:	40 09       	lddsp	r9,sp[0x0]
80006044:	12 c8       	st.b	r9++,r8
80006046:	50 09       	stdsp	sp[0x0],r9
80006048:	2f f6       	sub	r6,-1
	//then, remove it
	//move everything to the right of it (if it's not negative 1) one index number less
	//replace the last position with -1

	//create a stack that stores the currently touched notes in order they were touched
	for (i = 0; i < 48; i++)
8000604a:	e0 46 00 30 	cp.w	r6,48
8000604e:	fe 91 ff 79 	brne	80005f40 <uhi_hid_mouse_report_reception+0x198>
		pastbutt_states[i] = butt_states[i];

	}
	
	// volume control
	amplitude = 0;		
80006052:	30 09       	mov	r9,0
80006054:	fe f8 02 58 	ld.w	r8,pc[600]
80006058:	b0 89       	st.b	r8[0x0],r9
	if (lastButtVCA == 1)
8000605a:	fe f8 02 56 	ld.w	r8,pc[598]
8000605e:	11 89       	ld.ub	r9,r8[0x0]
80006060:	30 18       	mov	r8,1
80006062:	f0 09 18 00 	cp.b	r9,r8
80006066:	c0 70       	breq	80006074 <uhi_hid_mouse_report_reception+0x2cc>
		if(numnotes > 0)
			amplitude = butt_states[notestack[0]];
	}
	else
	{
		for(j=0; j<numnotes; j++)
80006068:	fe f8 02 3c 	ld.w	r8,pc[572]
8000606c:	11 8b       	ld.ub	r11,r8[0x0]
8000606e:	58 0b       	cp.w	r11,0
80006070:	c1 41       	brne	80006098 <uhi_hid_mouse_report_reception+0x2f0>
80006072:	c2 78       	rjmp	800060c0 <uhi_hid_mouse_report_reception+0x318>
	
	// volume control
	amplitude = 0;		
	if (lastButtVCA == 1)
	{
		if(numnotes > 0)
80006074:	fe f8 02 30 	ld.w	r8,pc[560]
80006078:	11 89       	ld.ub	r9,r8[0x0]
8000607a:	30 08       	mov	r8,0
8000607c:	f0 09 18 00 	cp.b	r9,r8
80006080:	c2 00       	breq	800060c0 <uhi_hid_mouse_report_reception+0x318>
			amplitude = butt_states[notestack[0]];
80006082:	fe f8 02 1e 	ld.w	r8,pc[542]
80006086:	f1 28 00 00 	ld.sb	r8,r8[0]
8000608a:	4f c9       	lddpc	r9,80006278 <uhi_hid_mouse_report_reception+0x4d0>
8000608c:	f2 08 07 09 	ld.ub	r9,r9[r8]
80006090:	fe f8 02 1c 	ld.w	r8,pc[540]
80006094:	b0 89       	st.b	r8[0x0],r9
80006096:	c1 58       	rjmp	800060c0 <uhi_hid_mouse_report_reception+0x318>
80006098:	30 08       	mov	r8,0
8000609a:	10 99       	mov	r9,r8
8000609c:	4f 7e       	lddpc	lr,80006278 <uhi_hid_mouse_report_reception+0x4d0>
8000609e:	fe fc 02 02 	ld.w	r12,pc[514]
800060a2:	f8 08 06 0a 	ld.sb	r10,r12[r8]
800060a6:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
800060aa:	f2 0a 18 00 	cp.b	r10,r9
800060ae:	f4 09 17 20 	movhs	r9,r10
800060b2:	5c 59       	castu.b	r9
800060b4:	2f f8       	sub	r8,-1
	}
	else
	{
		for(j=0; j<numnotes; j++)
800060b6:	f6 08 18 00 	cp.b	r8,r11
800060ba:	cf 43       	brcs	800060a2 <uhi_hid_mouse_report_reception+0x2fa>
800060bc:	4f c8       	lddpc	r8,800062ac <uhi_hid_mouse_report_reception+0x504>
800060be:	b0 89       	st.b	r8[0x0],r9
			if(val > amplitude)
			amplitude = val;
		}
	}
	
	dacsend(3,2,amplitude<<4);/*
800060c0:	4f b8       	lddpc	r8,800062ac <uhi_hid_mouse_report_reception+0x504>
800060c2:	11 8a       	ld.ub	r10,r8[0x0]
800060c4:	a5 6a       	lsl	r10,0x4
800060c6:	30 2b       	mov	r11,2
800060c8:	30 3c       	mov	r12,3
800060ca:	f0 1f 00 74 	mcall	80006298 <uhi_hid_mouse_report_reception+0x4f0>
		dip204_printf_string("slider: %u = %u",2,val);
		dip204_hide_cursor();*/
		dacsend(2,2,val);
	}
	
	if(calculateNoteStack())
800060ce:	58 03       	cp.w	r3,0
800060d0:	e0 80 00 8f 	breq	800061ee <uhi_hid_mouse_report_reception+0x446>
	{
		val  = calculateDACvalue((unsigned int)currentnote);
800060d4:	4f 58       	lddpc	r8,800062a8 <uhi_hid_mouse_report_reception+0x500>
800060d6:	11 88       	ld.ub	r8,r8[0x0]
	unsigned int virtualnote;
	unsigned long templongoctave;
	unsigned short DAC1val;
	unsigned int note;
	
	switch(whichmap)
800060d8:	4f 79       	lddpc	r9,800062b4 <uhi_hid_mouse_report_reception+0x50c>
800060da:	72 09       	ld.w	r9,r9[0x0]
800060dc:	58 19       	cp.w	r9,1
800060de:	c0 40       	breq	800060e6 <uhi_hid_mouse_report_reception+0x33e>
800060e0:	58 29       	cp.w	r9,2
800060e2:	c0 91       	brne	800060f4 <uhi_hid_mouse_report_reception+0x34c>
800060e4:	c0 58       	rjmp	800060ee <uhi_hid_mouse_report_reception+0x346>
	{
		case WICKI_HAYDEN: note = whmap[noteval]; break;    // wicki-hayden
800060e6:	4f 59       	lddpc	r9,800062b8 <uhi_hid_mouse_report_reception+0x510>
800060e8:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800060ec:	c0 48       	rjmp	800060f4 <uhi_hid_mouse_report_reception+0x34c>
		case HARMONIC: note = harmonicmap[noteval]; break;  // harmonic
800060ee:	4f 49       	lddpc	r9,800062bc <uhi_hid_mouse_report_reception+0x514>
800060f0:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
		default: note = noteval; break;                     // no map
	}
	
	//templong = ((noteval + offset + transpose) * 54612);  // original simple equal temperament
	pitchclass = ((note + transpose + 21) % 12);  // add 21 to make it positive and centered on C
800060f4:	4f 39       	lddpc	r9,800062c0 <uhi_hid_mouse_report_reception+0x518>
800060f6:	f3 2b 00 00 	ld.sb	r11,r9[0]
800060fa:	f0 0b 00 0b 	add	r11,r8,r11
800060fe:	f6 c8 ff eb 	sub	r8,r11,-21
80006102:	e0 67 aa ab 	mov	r7,43691
80006106:	ea 17 aa aa 	orh	r7,0xaaaa
8000610a:	f0 07 06 46 	mulu.d	r6,r8,r7
8000610e:	0e 9a       	mov	r10,r7
80006110:	a3 9a       	lsr	r10,0x3
80006112:	f4 0a 00 1a 	add	r10,r10,r10<<0x1
80006116:	f0 0a 01 2a 	sub	r10,r8,r10<<0x2
	virtualnote = (note + 13 + transpose - pitchclass);
	if (tuning == 0)
8000611a:	4e b9       	lddpc	r9,800062c4 <uhi_hid_mouse_report_reception+0x51c>
8000611c:	13 89       	ld.ub	r9,r9[0x0]
8000611e:	58 09       	cp.w	r9,0
80006120:	c0 91       	brne	80006132 <uhi_hid_mouse_report_reception+0x38a>
		templongnote = (twelvetet[pitchclass] * scaledoctaveDACvalue);
80006122:	4e a9       	lddpc	r9,800062c8 <uhi_hid_mouse_report_reception+0x520>
80006124:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80006128:	4e 98       	lddpc	r8,800062cc <uhi_hid_mouse_report_reception+0x524>
8000612a:	70 08       	ld.w	r8,r8[0x0]
8000612c:	f2 08 02 48 	mul	r8,r9,r8
80006130:	c3 e8       	rjmp	800061ac <uhi_hid_mouse_report_reception+0x404>
	else if (tuning == 1)
80006132:	30 1c       	mov	r12,1
80006134:	f8 09 18 00 	cp.b	r9,r12
80006138:	c0 91       	brne	8000614a <uhi_hid_mouse_report_reception+0x3a2>
		templongnote = (overtonejust[pitchclass] * scaledoctaveDACvalue);
8000613a:	4e 69       	lddpc	r9,800062d0 <uhi_hid_mouse_report_reception+0x528>
8000613c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80006140:	4e 38       	lddpc	r8,800062cc <uhi_hid_mouse_report_reception+0x524>
80006142:	70 08       	ld.w	r8,r8[0x0]
80006144:	f2 08 02 48 	mul	r8,r9,r8
80006148:	c3 28       	rjmp	800061ac <uhi_hid_mouse_report_reception+0x404>
	else if (tuning == 2)
8000614a:	30 2c       	mov	r12,2
8000614c:	f8 09 18 00 	cp.b	r9,r12
80006150:	c0 91       	brne	80006162 <uhi_hid_mouse_report_reception+0x3ba>
		templongnote = (kora1[pitchclass] * scaledoctaveDACvalue);
80006152:	4e 19       	lddpc	r9,800062d4 <uhi_hid_mouse_report_reception+0x52c>
80006154:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80006158:	4d d8       	lddpc	r8,800062cc <uhi_hid_mouse_report_reception+0x524>
8000615a:	70 08       	ld.w	r8,r8[0x0]
8000615c:	f2 08 02 48 	mul	r8,r9,r8
80006160:	c2 68       	rjmp	800061ac <uhi_hid_mouse_report_reception+0x404>
	else if (tuning == 3)
80006162:	30 3c       	mov	r12,3
80006164:	f8 09 18 00 	cp.b	r9,r12
80006168:	c0 91       	brne	8000617a <uhi_hid_mouse_report_reception+0x3d2>
		templongnote = (meantone[pitchclass] * scaledoctaveDACvalue);
8000616a:	4d c9       	lddpc	r9,800062d8 <uhi_hid_mouse_report_reception+0x530>
8000616c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80006170:	4d 78       	lddpc	r8,800062cc <uhi_hid_mouse_report_reception+0x524>
80006172:	70 08       	ld.w	r8,r8[0x0]
80006174:	f2 08 02 48 	mul	r8,r9,r8
80006178:	c1 a8       	rjmp	800061ac <uhi_hid_mouse_report_reception+0x404>
	else if (tuning == 4)
8000617a:	30 4c       	mov	r12,4
8000617c:	f8 09 18 00 	cp.b	r9,r12
80006180:	c0 91       	brne	80006192 <uhi_hid_mouse_report_reception+0x3ea>
		templongnote = (werckmeister1[pitchclass] * scaledoctaveDACvalue);
80006182:	4d 79       	lddpc	r9,800062dc <uhi_hid_mouse_report_reception+0x534>
80006184:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80006188:	4d 18       	lddpc	r8,800062cc <uhi_hid_mouse_report_reception+0x524>
8000618a:	70 08       	ld.w	r8,r8[0x0]
8000618c:	f2 08 02 48 	mul	r8,r9,r8
80006190:	c0 e8       	rjmp	800061ac <uhi_hid_mouse_report_reception+0x404>
	else if (tuning == 5)
80006192:	30 5c       	mov	r12,5
80006194:	f8 09 18 00 	cp.b	r9,r12
80006198:	c0 30       	breq	8000619e <uhi_hid_mouse_report_reception+0x3f6>
8000619a:	30 08       	mov	r8,0
8000619c:	c0 88       	rjmp	800061ac <uhi_hid_mouse_report_reception+0x404>
		templongnote = (werckmeister3[pitchclass] * scaledoctaveDACvalue);
8000619e:	4d 19       	lddpc	r9,800062e0 <uhi_hid_mouse_report_reception+0x538>
800061a0:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800061a4:	4c a8       	lddpc	r8,800062cc <uhi_hid_mouse_report_reception+0x524>
800061a6:	70 08       	ld.w	r8,r8[0x0]
800061a8:	f2 08 02 48 	mul	r8,r9,r8
	
	templongnote = (templongnote / 10000);
	templongoctave = ((virtualnote + octaveoffset) * scaledoctaveDACvalue);
800061ac:	4c e9       	lddpc	r9,800062e4 <uhi_hid_mouse_report_reception+0x53c>
800061ae:	13 89       	ld.ub	r9,r9[0x0]
800061b0:	2f 39       	sub	r9,-13
800061b2:	f2 0b 00 0b 	add	r11,r9,r11
800061b6:	f6 0a 01 0a 	sub	r10,r11,r10
800061ba:	4c 59       	lddpc	r9,800062cc <uhi_hid_mouse_report_reception+0x524>
800061bc:	72 09       	ld.w	r9,r9[0x0]
800061be:	f4 09 02 49 	mul	r9,r10,r9
	}
	
	if(calculateNoteStack())
	{
		val  = calculateDACvalue((unsigned int)currentnote);
		DAC16Send(2, val);
800061c2:	e0 6b 17 59 	mov	r11,5977
800061c6:	ea 1b d1 b7 	orh	r11,0xd1b7
800061ca:	f0 0b 06 4a 	mulu.d	r10,r8,r11
800061ce:	ad 9b       	lsr	r11,0xd
800061d0:	e0 68 85 1f 	mov	r8,34079
800061d4:	ea 18 51 eb 	orh	r8,0x51eb
800061d8:	f2 08 06 48 	mulu.d	r8,r9,r8
800061dc:	f2 08 16 05 	lsr	r8,r9,0x5
800061e0:	10 0b       	add	r11,r8
800061e2:	a1 7b       	lsl	r11,0x1
800061e4:	e2 1b ff fe 	andl	r11,0xfffe,COH
800061e8:	30 2c       	mov	r12,2
800061ea:	f0 1f 00 40 	mcall	800062e8 <uhi_hid_mouse_report_reception+0x540>
	} uhi_hid_mouse_start_trans_report(add);
800061ee:	40 4c       	lddsp	r12,sp[0x10]
800061f0:	f0 1f 00 20 	mcall	80006270 <uhi_hid_mouse_report_reception+0x4c8>
800061f4:	c3 c8       	rjmp	8000626c <uhi_hid_mouse_report_reception+0x4c4>
800061f6:	30 07       	mov	r7,0
	while(i < 52 && butt_states[i] == 0)
		i++;
		
	if(i < 52)
	{
		dip204_set_cursor_position(1,1);
800061f8:	30 1b       	mov	r11,1
800061fa:	16 9c       	mov	r12,r11
800061fc:	f0 1f 00 21 	mcall	80006280 <uhi_hid_mouse_report_reception+0x4d8>
		dip204_write_string("                ");
80006200:	4b bc       	lddpc	r12,800062ec <uhi_hid_mouse_report_reception+0x544>
80006202:	f0 1f 00 22 	mcall	80006288 <uhi_hid_mouse_report_reception+0x4e0>
		dip204_set_cursor_position(1,1);
80006206:	30 1b       	mov	r11,1
80006208:	16 9c       	mov	r12,r11
8000620a:	f0 1f 00 1e 	mcall	80006280 <uhi_hid_mouse_report_reception+0x4d8>
		dip204_printf_string("b: %u = %u",i+1,butt_states[i]);
8000620e:	49 b8       	lddpc	r8,80006278 <uhi_hid_mouse_report_reception+0x4d0>
80006210:	f0 07 07 08 	ld.ub	r8,r8[r7]
80006214:	1a d8       	st.w	--sp,r8
80006216:	ee c8 ff ff 	sub	r8,r7,-1
8000621a:	1a d8       	st.w	--sp,r8
8000621c:	4b 5c       	lddpc	r12,800062f0 <uhi_hid_mouse_report_reception+0x548>
8000621e:	f0 1f 00 36 	mcall	800062f4 <uhi_hid_mouse_report_reception+0x54c>
		dip204_hide_cursor();
80006222:	f0 1f 00 36 	mcall	800062f8 <uhi_hid_mouse_report_reception+0x550>
		UHI_HID_MOUSE_EVENT_BTN_LEFT(1);
80006226:	30 1c       	mov	r12,1
80006228:	f0 1f 00 19 	mcall	8000628c <uhi_hid_mouse_report_reception+0x4e4>
		dip204_write_string("              ");
		UHI_HID_MOUSE_EVENT_BTN_LEFT(0);
	}
	

	i++;
8000622c:	0e 98       	mov	r8,r7
8000622e:	2f f8       	sub	r8,-1
80006230:	5c 58       	castu.b	r8
	
	while(i < 52 && butt_states[i] == 0)
80006232:	2f ed       	sub	sp,-8
80006234:	33 39       	mov	r9,51
80006236:	f2 08 18 00 	cp.b	r8,r9
8000623a:	fe 98 fe 11 	brls	80005e5c <uhi_hid_mouse_report_reception+0xb4>
8000623e:	fe 9f fe 29 	bral	80005e90 <uhi_hid_mouse_report_reception+0xe8>
		i++;
	
	if(i < 52)
	{
		dip204_set_cursor_position(1,2);
80006242:	30 2b       	mov	r11,2
80006244:	30 1c       	mov	r12,1
80006246:	f0 1f 00 0f 	mcall	80006280 <uhi_hid_mouse_report_reception+0x4d8>
		dip204_write_string("         ");
8000624a:	4a dc       	lddpc	r12,800062fc <uhi_hid_mouse_report_reception+0x554>
8000624c:	f0 1f 00 0f 	mcall	80006288 <uhi_hid_mouse_report_reception+0x4e0>
		dip204_set_cursor_position(1,2);
80006250:	30 2b       	mov	r11,2
80006252:	30 1c       	mov	r12,1
80006254:	f0 1f 00 0b 	mcall	80006280 <uhi_hid_mouse_report_reception+0x4d8>
		dip204_printf_string("a");
80006258:	4a ac       	lddpc	r12,80006300 <uhi_hid_mouse_report_reception+0x558>
8000625a:	f0 1f 00 27 	mcall	800062f4 <uhi_hid_mouse_report_reception+0x54c>
		dip204_hide_cursor();
8000625e:	f0 1f 00 27 	mcall	800062f8 <uhi_hid_mouse_report_reception+0x550>
		UHI_HID_MOUSE_EVENT_BTN_RIGHT(1);
80006262:	30 1c       	mov	r12,1
80006264:	f0 1f 00 0b 	mcall	80006290 <uhi_hid_mouse_report_reception+0x4e8>
80006268:	fe 9f fe 17 	bral	80005e96 <uhi_hid_mouse_report_reception+0xee>
	if(calculateNoteStack())
	{
		val  = calculateDACvalue((unsigned int)currentnote);
		DAC16Send(2, val);
	} uhi_hid_mouse_start_trans_report(add);
}
8000626c:	2f bd       	sub	sp,-20
8000626e:	d8 32       	popm	r0-r7,pc
80006270:	80 00       	ld.sh	r0,r0[0x0]
80006272:	5d 4c       	*unknown*
80006274:	00 00       	add	r0,r0
80006276:	0b 14       	ld.sh	r4,r5++
80006278:	00 00       	add	r0,r0
8000627a:	0c 0c       	add	r12,r6
8000627c:	00 00       	add	r0,r0
8000627e:	0b 0c       	ld.w	r12,r5++
80006280:	80 00       	ld.sh	r0,r0[0x0]
80006282:	21 e8       	sub	r8,30
80006284:	80 00       	ld.sh	r0,r0[0x0]
80006286:	d5 58       	*unknown*
80006288:	80 00       	ld.sh	r0,r0[0x0]
8000628a:	21 90       	sub	r0,25
8000628c:	80 00       	ld.sh	r0,r0[0x0]
8000628e:	2a 60       	sub	r0,-90
80006290:	80 00       	ld.sh	r0,r0[0x0]
80006292:	2a 40       	sub	r0,-92
80006294:	00 00       	add	r0,r0
80006296:	0b 04       	ld.w	r4,r5++
80006298:	80 00       	ld.sh	r0,r0[0x0]
8000629a:	75 ac       	ld.w	r12,r10[0x68]
8000629c:	00 00       	add	r0,r0
8000629e:	0a d4       	st.w	--r5,r4
800062a0:	00 00       	add	r0,r0
800062a2:	0b dc       	ld.ub	r12,r5[0x5]
800062a4:	00 00       	add	r0,r0
800062a6:	0b 08       	ld.w	r8,r5++
800062a8:	00 00       	add	r0,r0
800062aa:	0b 24       	ld.uh	r4,r5++
800062ac:	00 00       	add	r0,r0
800062ae:	0b 13       	ld.sh	r3,r5++
800062b0:	00 00       	add	r0,r0
800062b2:	0b 10       	ld.sh	r0,r5++
800062b4:	00 00       	add	r0,r0
800062b6:	02 04       	add	r4,r1
800062b8:	00 00       	add	r0,r0
800062ba:	02 08       	add	r8,r1
800062bc:	00 00       	add	r0,r0
800062be:	00 b0       	st.h	r0++,r0
800062c0:	00 00       	add	r0,r0
800062c2:	0b 11       	ld.sh	r1,r5++
800062c4:	00 00       	add	r0,r0
800062c6:	0b 25       	ld.uh	r5,r5++
800062c8:	00 00       	add	r0,r0
800062ca:	02 f8       	st.b	--r1,r8
800062cc:	00 00       	add	r0,r0
800062ce:	02 00       	add	r0,r1
800062d0:	00 00       	add	r0,r0
800062d2:	01 a0       	ld.ub	r0,r0[0x2]
800062d4:	00 00       	add	r0,r0
800062d6:	03 28       	ld.uh	r8,r1++
800062d8:	00 00       	add	r0,r0
800062da:	01 d0       	ld.ub	r0,r0[0x5]
800062dc:	00 00       	add	r0,r0
800062de:	02 c8       	st.b	r1++,r8
800062e0:	00 00       	add	r0,r0
800062e2:	01 70       	ld.ub	r0,--r0
800062e4:	00 00       	add	r0,r0
800062e6:	0b 12       	ld.sh	r2,r5++
800062e8:	80 00       	ld.sh	r0,r0[0x0]
800062ea:	74 c8       	ld.w	r8,r10[0x30]
800062ec:	80 00       	ld.sh	r0,r0[0x0]
800062ee:	d5 68       	*unknown*
800062f0:	80 00       	ld.sh	r0,r0[0x0]
800062f2:	d5 7c       	*unknown*
800062f4:	80 00       	ld.sh	r0,r0[0x0]
800062f6:	20 f8       	sub	r8,15
800062f8:	80 00       	ld.sh	r0,r0[0x0]
800062fa:	22 44       	sub	r4,36
800062fc:	80 00       	ld.sh	r0,r0[0x0]
800062fe:	d5 88       	*unknown*
80006300:	80 00       	ld.sh	r0,r0[0x0]
80006302:	d5 94       	*unknown*

80006304 <uhi_hid_mouse_install>:
 * \name Functions required by UHC
 * @{
 */

uhc_enum_status_t uhi_hid_mouse_install(uhc_device_t* dev)
{
80006304:	eb cd 40 f8 	pushm	r3-r7,lr
80006308:	18 97       	mov	r7,r12
	bool b_iface_supported;
	uint16_t conf_desc_lgt;
	usb_iface_desc_t *ptr_iface;

	if (uhi_hid_mouse_dev.dev != NULL)
8000630a:	4a d8       	lddpc	r8,800063bc <uhi_hid_mouse_install+0xb8>
8000630c:	70 08       	ld.w	r8,r8[0x0]
8000630e:	58 08       	cp.w	r8,0
80006310:	c5 11       	brne	800063b2 <uhi_hid_mouse_install+0xae>
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated

	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
80006312:	78 66       	ld.w	r6,r12[0x18]
80006314:	0d aa       	ld.ub	r10,r6[0x2]
80006316:	0d b8       	ld.ub	r8,r6[0x3]
80006318:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
8000631c:	5c ca       	swap.bh	r10
8000631e:	5c 8a       	casts.h	r10
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	
	while(conf_desc_lgt)
80006320:	c4 c0       	breq	800063b8 <uhi_hid_mouse_install+0xb4>

	if (uhi_hid_mouse_dev.dev != NULL)
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated

	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
80006322:	30 03       	mov	r3,0
	b_iface_supported = false;
	
	while(conf_desc_lgt)
	{
		switch (ptr_iface->bDescriptorType) 
80006324:	30 44       	mov	r4,4
		{
			case USB_DT_INTERFACE:
				if ((ptr_iface->bInterfaceClass   == HID_CLASS)
					&& (ptr_iface->bInterfaceProtocol == HID_PROTOCOL_GENERIC) ) 
80006326:	30 09       	mov	r9,0
					// Start allocation endpoint(s)
					b_iface_supported = true;
					// initialize button states to 0
					for(i=0; i<48; i++)
					{
						butt_states[i]=0;
80006328:	4a 65       	lddpc	r5,800063c0 <uhi_hid_mouse_install+0xbc>
						pastbutt_states[i]=0;
8000632a:	4a 7c       	lddpc	r12,800063c4 <uhi_hid_mouse_install+0xc0>
						notestack[i] = -1;
8000632c:	4a 7b       	lddpc	r11,800063c8 <uhi_hid_mouse_install+0xc4>
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	
	while(conf_desc_lgt)
	{
		switch (ptr_iface->bDescriptorType) 
8000632e:	0d 98       	ld.ub	r8,r6[0x1]
80006330:	e8 08 18 00 	cp.b	r8,r4
80006334:	c0 60       	breq	80006340 <uhi_hid_mouse_install+0x3c>
80006336:	30 5e       	mov	lr,5
80006338:	fc 08 18 00 	cp.b	r8,lr
8000633c:	c3 51       	brne	800063a6 <uhi_hid_mouse_install+0xa2>
8000633e:	c1 88       	rjmp	8000636e <uhi_hid_mouse_install+0x6a>
		{
			case USB_DT_INTERFACE:
				if ((ptr_iface->bInterfaceClass   == HID_CLASS)
80006340:	0d de       	ld.ub	lr,r6[0x5]
80006342:	30 38       	mov	r8,3
80006344:	f0 0e 18 00 	cp.b	lr,r8
80006348:	c2 e1       	brne	800063a4 <uhi_hid_mouse_install+0xa0>
					&& (ptr_iface->bInterfaceProtocol == HID_PROTOCOL_GENERIC) ) 
8000634a:	0d f8       	ld.ub	r8,r6[0x7]
8000634c:	f2 08 18 00 	cp.b	r8,r9
80006350:	c2 a1       	brne	800063a4 <uhi_hid_mouse_install+0xa0>
80006352:	30 08       	mov	r8,0
					// initialize button states to 0
					for(i=0; i<48; i++)
					{
						butt_states[i]=0;
						pastbutt_states[i]=0;
						notestack[i] = -1;
80006354:	3f fe       	mov	lr,-1
					// Start allocation endpoint(s)
					b_iface_supported = true;
					// initialize button states to 0
					for(i=0; i<48; i++)
					{
						butt_states[i]=0;
80006356:	ea 08 0b 09 	st.b	r5[r8],r9
						pastbutt_states[i]=0;
8000635a:	f8 08 0b 09 	st.b	r12[r8],r9
						notestack[i] = -1;
8000635e:	f6 08 0b 0e 	st.b	r11[r8],lr
					int i;
					// USB HID Mouse interface found
					// Start allocation endpoint(s)
					b_iface_supported = true;
					// initialize button states to 0
					for(i=0; i<48; i++)
80006362:	2f f8       	sub	r8,-1
80006364:	e0 48 00 30 	cp.w	r8,48
80006368:	cf 71       	brne	80006356 <uhi_hid_mouse_install+0x52>
8000636a:	30 13       	mov	r3,1
8000636c:	c1 d8       	rjmp	800063a6 <uhi_hid_mouse_install+0xa2>
				else b_iface_supported = false; // Stop allocation endpoint(s)
			break;

			case USB_DT_ENDPOINT:
				//  Allocation of the endpoint
				if (!b_iface_supported) 
8000636e:	58 03       	cp.w	r3,0
80006370:	c1 b0       	breq	800063a6 <uhi_hid_mouse_install+0xa2>
					break;

				if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface))
80006372:	0c 9b       	mov	r11,r6
80006374:	ef 3c 00 12 	ld.ub	r12,r7[18]
80006378:	f0 1f 00 15 	mcall	800063cc <uhi_hid_mouse_install+0xc8>
8000637c:	c0 41       	brne	80006384 <uhi_hid_mouse_install+0x80>
8000637e:	30 4c       	mov	r12,4
80006380:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
					return UHC_ENUM_HARDWARE_LIMIT; // Endpoint allocation fail

				Assert(((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN);
				uhi_hid_mouse_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
80006384:	48 e5       	lddpc	r5,800063bc <uhi_hid_mouse_install+0xb8>
80006386:	0d a8       	ld.ub	r8,r6[0x2]
80006388:	aa c8       	st.b	r5[0x4],r8
				uhi_hid_mouse_dev.report_size =
8000638a:	0d cc       	ld.ub	r12,r6[0x4]
8000638c:	aa dc       	st.b	r5[0x5],r12
						le16_to_cpu(((usb_ep_desc_t*)ptr_iface)->wMaxPacketSize);
				uhi_hid_mouse_dev.report = malloc(uhi_hid_mouse_dev.report_size);
8000638e:	f0 1f 00 11 	mcall	800063d0 <uhi_hid_mouse_install+0xcc>
80006392:	8b 2c       	st.w	r5[0x8],r12
			
				if (uhi_hid_mouse_dev.report == NULL) {
80006394:	c0 41       	brne	8000639c <uhi_hid_mouse_install+0x98>
80006396:	30 6c       	mov	r12,6
80006398:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
					Assert(false);
					return UHC_ENUM_MEMORY_LIMIT; // Internal RAM allocation fail
				}
			
				uhi_hid_mouse_dev.dev = dev;
8000639c:	48 88       	lddpc	r8,800063bc <uhi_hid_mouse_install+0xb8>
8000639e:	91 07       	st.w	r8[0x0],r7
800063a0:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
				// All endpoints of all interfaces supported allocated
				return UHC_ENUM_SUCCESS;
800063a4:	30 03       	mov	r3,0

			// Ignore descriptor
			default: break;
		}	
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
800063a6:	0d 88       	ld.ub	r8,r6[0x0]
800063a8:	10 1a       	sub	r10,r8
800063aa:	5c 8a       	casts.h	r10

	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	
	while(conf_desc_lgt)
800063ac:	c0 60       	breq	800063b8 <uhi_hid_mouse_install+0xb4>
			// Ignore descriptor
			default: break;
		}	
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
800063ae:	10 06       	add	r6,r8
800063b0:	cb fb       	rjmp	8000632e <uhi_hid_mouse_install+0x2a>
800063b2:	30 5c       	mov	r12,5
800063b4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800063b8:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
800063bc:	00 00       	add	r0,r0
800063be:	0b 14       	ld.sh	r4,r5++
800063c0:	00 00       	add	r0,r0
800063c2:	0c 0c       	add	r12,r6
800063c4:	00 00       	add	r0,r0
800063c6:	0a d4       	st.w	--r5,r4
800063c8:	00 00       	add	r0,r0
800063ca:	0b dc       	ld.ub	r12,r5[0x5]
800063cc:	80 00       	ld.sh	r0,r0[0x0]
800063ce:	4e ac       	lddpc	r12,80006574 <udc_iface_enable+0x44>
800063d0:	80 00       	ld.sh	r0,r0[0x0]
800063d2:	79 34       	ld.w	r4,r12[0x4c]

800063d4 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
800063d4:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800063d8:	49 18       	lddpc	r8,8000641c <udc_sof_notify+0x48>
800063da:	11 89       	ld.ub	r9,r8[0x0]
800063dc:	30 08       	mov	r8,0
800063de:	f0 09 18 00 	cp.b	r9,r8
800063e2:	c1 b0       	breq	80006418 <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800063e4:	48 f8       	lddpc	r8,80006420 <udc_sof_notify+0x4c>
800063e6:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800063e8:	70 09       	ld.w	r9,r8[0x0]
800063ea:	13 ca       	ld.ub	r10,r9[0x4]
800063ec:	30 09       	mov	r9,0
800063ee:	f2 0a 18 00 	cp.b	r10,r9
800063f2:	c1 30       	breq	80006418 <udc_sof_notify+0x44>
800063f4:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800063f6:	48 b6       	lddpc	r6,80006420 <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
800063f8:	70 18       	ld.w	r8,r8[0x4]
800063fa:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800063fe:	70 48       	ld.w	r8,r8[0x10]
80006400:	58 08       	cp.w	r8,0
80006402:	c0 20       	breq	80006406 <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
80006404:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80006406:	2f f7       	sub	r7,-1
80006408:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000640a:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000640c:	70 09       	ld.w	r9,r8[0x0]
8000640e:	13 c9       	ld.ub	r9,r9[0x4]
80006410:	ee 09 18 00 	cp.b	r9,r7
80006414:	fe 9b ff f2 	brhi	800063f8 <udc_sof_notify+0x24>
80006418:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000641c:	00 00       	add	r0,r0
8000641e:	0b 38       	ld.ub	r8,r5++
80006420:	00 00       	add	r0,r0
80006422:	0b 28       	ld.uh	r8,r5++

80006424 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80006424:	48 78       	lddpc	r8,80006440 <udc_get_eof_conf+0x1c>
80006426:	70 08       	ld.w	r8,r8[0x0]
80006428:	70 08       	ld.w	r8,r8[0x0]
8000642a:	11 aa       	ld.ub	r10,r8[0x2]
8000642c:	11 b9       	ld.ub	r9,r8[0x3]
8000642e:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80006432:	5c c9       	swap.bh	r9
80006434:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
80006438:	f0 0c 00 0c 	add	r12,r8,r12
8000643c:	5e fc       	retal	r12
8000643e:	00 00       	add	r0,r0
80006440:	00 00       	add	r0,r0
80006442:	0b 28       	ld.uh	r8,r5++

80006444 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80006444:	eb cd 40 e0 	pushm	r5-r7,lr
80006448:	18 97       	mov	r7,r12
8000644a:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
8000644c:	49 b8       	lddpc	r8,800064b8 <udc_update_iface_desc+0x74>
8000644e:	11 89       	ld.ub	r9,r8[0x0]
80006450:	30 08       	mov	r8,0
80006452:	f0 09 18 00 	cp.b	r9,r8
80006456:	c2 f0       	breq	800064b4 <udc_update_iface_desc+0x70>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80006458:	49 98       	lddpc	r8,800064bc <udc_update_iface_desc+0x78>
8000645a:	70 08       	ld.w	r8,r8[0x0]
8000645c:	70 08       	ld.w	r8,r8[0x0]
8000645e:	11 c9       	ld.ub	r9,r8[0x4]
80006460:	18 9e       	mov	lr,r12
80006462:	f8 09 18 00 	cp.b	r9,r12
80006466:	e0 88 00 27 	brls	800064b4 <udc_update_iface_desc+0x70>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000646a:	49 65       	lddpc	r5,800064c0 <udc_update_iface_desc+0x7c>
8000646c:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
8000646e:	f0 1f 00 16 	mcall	800064c4 <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
80006472:	6a 08       	ld.w	r8,r5[0x0]
80006474:	10 3c       	cp.w	r12,r8
80006476:	e0 88 00 1f 	brls	800064b4 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000647a:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000647c:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000647e:	11 9a       	ld.ub	r10,r8[0x1]
80006480:	f6 0a 18 00 	cp.b	r10,r11
80006484:	c0 a1       	brne	80006498 <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
80006486:	11 aa       	ld.ub	r10,r8[0x2]
80006488:	0e 9e       	mov	lr,r7
8000648a:	ee 0a 18 00 	cp.b	r10,r7
8000648e:	c0 51       	brne	80006498 <udc_update_iface_desc+0x54>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
80006490:	11 ba       	ld.ub	r10,r8[0x3]
80006492:	ec 0a 18 00 	cp.b	r10,r6
80006496:	c0 b0       	breq	800064ac <udc_update_iface_desc+0x68>
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
80006498:	13 88       	ld.ub	r8,r9[0x0]
8000649a:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000649e:	10 3c       	cp.w	r12,r8
800064a0:	fe 9b ff ee 	brhi	8000647c <udc_update_iface_desc+0x38>
800064a4:	48 79       	lddpc	r9,800064c0 <udc_update_iface_desc+0x7c>
800064a6:	93 08       	st.w	r9[0x0],r8
800064a8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800064ac:	48 59       	lddpc	r9,800064c0 <udc_update_iface_desc+0x7c>
800064ae:	93 08       	st.w	r9[0x0],r8
800064b0:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800064b4:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800064b8:	00 00       	add	r0,r0
800064ba:	0b 38       	ld.ub	r8,r5++
800064bc:	00 00       	add	r0,r0
800064be:	0b 28       	ld.uh	r8,r5++
800064c0:	00 00       	add	r0,r0
800064c2:	0b 3c       	ld.ub	r12,r5++
800064c4:	80 00       	ld.sh	r0,r0[0x0]
800064c6:	64 24       	ld.w	r4,r2[0x8]

800064c8 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
800064c8:	eb cd 40 c0 	pushm	r6-r7,lr
800064cc:	18 96       	mov	r6,r12
800064ce:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
800064d0:	f0 1f 00 11 	mcall	80006514 <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800064d4:	0d 88       	ld.ub	r8,r6[0x0]
800064d6:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800064d8:	0c 3c       	cp.w	r12,r6
800064da:	e0 88 00 19 	brls	8000650c <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
800064de:	0d 98       	ld.ub	r8,r6[0x1]
800064e0:	30 49       	mov	r9,4
800064e2:	f2 08 18 00 	cp.b	r8,r9
800064e6:	c1 30       	breq	8000650c <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
800064e8:	ee 08 18 00 	cp.b	r8,r7
800064ec:	c0 a1       	brne	80006500 <udc_next_desc_in_iface+0x38>
800064ee:	c1 08       	rjmp	8000650e <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
800064f0:	0d 98       	ld.ub	r8,r6[0x1]
800064f2:	f2 08 18 00 	cp.b	r8,r9
800064f6:	c0 b0       	breq	8000650c <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
800064f8:	ee 08 18 00 	cp.b	r8,r7
800064fc:	c0 31       	brne	80006502 <udc_next_desc_in_iface+0x3a>
800064fe:	c0 88       	rjmp	8000650e <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80006500:	30 49       	mov	r9,4
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80006502:	0d 88       	ld.ub	r8,r6[0x0]
80006504:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80006506:	0c 3c       	cp.w	r12,r6
80006508:	fe 9b ff f4 	brhi	800064f0 <udc_next_desc_in_iface+0x28>
8000650c:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
8000650e:	0c 9c       	mov	r12,r6
80006510:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006514:	80 00       	ld.sh	r0,r0[0x0]
80006516:	64 24       	ld.w	r4,r2[0x8]

80006518 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
80006518:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
8000651a:	48 48       	lddpc	r8,80006528 <udc_valid_address+0x10>
8000651c:	11 bc       	ld.ub	r12,r8[0x3]
8000651e:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80006522:	f0 1f 00 03 	mcall	8000652c <udc_valid_address+0x14>
}
80006526:	d8 02       	popm	pc
80006528:	00 00       	add	r0,r0
8000652a:	0b a8       	ld.ub	r8,r5[0x2]
8000652c:	80 00       	ld.sh	r0,r0[0x0]
8000652e:	34 30       	mov	r0,67

80006530 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
80006530:	eb cd 40 e0 	pushm	r5-r7,lr
80006534:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
80006536:	f0 1f 00 12 	mcall	8000657c <udc_iface_enable+0x4c>
8000653a:	c1 f0       	breq	80006578 <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000653c:	49 18       	lddpc	r8,80006580 <udc_iface_enable+0x50>
8000653e:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80006540:	30 56       	mov	r6,5
80006542:	0c 9b       	mov	r11,r6
80006544:	0e 9c       	mov	r12,r7
80006546:	f0 1f 00 10 	mcall	80006584 <udc_iface_enable+0x54>
8000654a:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
8000654c:	c0 d0       	breq	80006566 <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
8000654e:	19 ca       	ld.ub	r10,r12[0x4]
80006550:	19 d8       	ld.ub	r8,r12[0x5]
80006552:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
80006556:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80006558:	5c 7a       	castu.h	r10
8000655a:	19 bb       	ld.ub	r11,r12[0x3]
8000655c:	19 ac       	ld.ub	r12,r12[0x2]
8000655e:	f0 1f 00 0b 	mcall	80006588 <udc_iface_enable+0x58>
80006562:	cf 01       	brne	80006542 <udc_iface_enable+0x12>
80006564:	c0 a8       	rjmp	80006578 <udc_iface_enable+0x48>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80006566:	48 a8       	lddpc	r8,8000658c <udc_iface_enable+0x5c>
80006568:	70 08       	ld.w	r8,r8[0x0]
8000656a:	70 18       	ld.w	r8,r8[0x4]
8000656c:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
80006570:	70 0c       	ld.w	r12,r8[0x0]
80006572:	5d 1c       	icall	r12
80006574:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006578:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000657c:	80 00       	ld.sh	r0,r0[0x0]
8000657e:	64 44       	ld.w	r4,r2[0x10]
80006580:	00 00       	add	r0,r0
80006582:	0b 3c       	ld.ub	r12,r5++
80006584:	80 00       	ld.sh	r0,r0[0x0]
80006586:	64 c8       	ld.w	r8,r2[0x30]
80006588:	80 00       	ld.sh	r0,r0[0x0]
8000658a:	3c 58       	mov	r8,-59
8000658c:	00 00       	add	r0,r0
8000658e:	0b 28       	ld.uh	r8,r5++

80006590 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
80006590:	eb cd 40 e0 	pushm	r5-r7,lr
80006594:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80006596:	18 97       	mov	r7,r12
80006598:	30 0b       	mov	r11,0
8000659a:	f0 1f 00 12 	mcall	800065e0 <udc_iface_disable+0x50>
8000659e:	c1 e0       	breq	800065da <udc_iface_disable+0x4a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
800065a0:	49 18       	lddpc	r8,800065e4 <udc_iface_disable+0x54>
800065a2:	70 08       	ld.w	r8,r8[0x0]
800065a4:	70 18       	ld.w	r8,r8[0x4]
800065a6:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
800065aa:	6a 3c       	ld.w	r12,r5[0xc]
800065ac:	5d 1c       	icall	r12
800065ae:	18 9b       	mov	r11,r12
800065b0:	0c 9c       	mov	r12,r6
800065b2:	f0 1f 00 0c 	mcall	800065e0 <udc_iface_disable+0x50>
800065b6:	c1 20       	breq	800065da <udc_iface_disable+0x4a>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800065b8:	48 c8       	lddpc	r8,800065e8 <udc_iface_disable+0x58>
800065ba:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800065bc:	30 56       	mov	r6,5
800065be:	0c 9b       	mov	r11,r6
800065c0:	0e 9c       	mov	r12,r7
800065c2:	f0 1f 00 0b 	mcall	800065ec <udc_iface_disable+0x5c>
800065c6:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
800065c8:	c0 50       	breq	800065d2 <udc_iface_disable+0x42>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
800065ca:	19 ac       	ld.ub	r12,r12[0x2]
800065cc:	f0 1f 00 09 	mcall	800065f0 <udc_iface_disable+0x60>
		}
800065d0:	cf 7b       	rjmp	800065be <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
800065d2:	6a 18       	ld.w	r8,r5[0x4]
800065d4:	5d 18       	icall	r8
800065d6:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
800065da:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800065de:	00 00       	add	r0,r0
800065e0:	80 00       	ld.sh	r0,r0[0x0]
800065e2:	64 44       	ld.w	r4,r2[0x10]
800065e4:	00 00       	add	r0,r0
800065e6:	0b 28       	ld.uh	r8,r5++
800065e8:	00 00       	add	r0,r0
800065ea:	0b 3c       	ld.ub	r12,r5++
800065ec:	80 00       	ld.sh	r0,r0[0x0]
800065ee:	64 c8       	ld.w	r8,r2[0x30]
800065f0:	80 00       	ld.sh	r0,r0[0x0]
800065f2:	36 f0       	mov	r0,111

800065f4 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
800065f4:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800065f8:	49 28       	lddpc	r8,80006640 <udc_reset+0x4c>
800065fa:	11 89       	ld.ub	r9,r8[0x0]
800065fc:	30 08       	mov	r8,0
800065fe:	f0 09 18 00 	cp.b	r9,r8
80006602:	c1 70       	breq	80006630 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80006604:	49 08       	lddpc	r8,80006644 <udc_reset+0x50>
80006606:	70 08       	ld.w	r8,r8[0x0]
80006608:	70 08       	ld.w	r8,r8[0x0]
8000660a:	11 c9       	ld.ub	r9,r8[0x4]
8000660c:	30 08       	mov	r8,0
8000660e:	f0 09 18 00 	cp.b	r9,r8
80006612:	c0 f0       	breq	80006630 <udc_reset+0x3c>
80006614:	30 07       	mov	r7,0
80006616:	48 c6       	lddpc	r6,80006644 <udc_reset+0x50>
				iface_num++) {
			udc_iface_disable(iface_num);
80006618:	0e 9c       	mov	r12,r7
8000661a:	f0 1f 00 0c 	mcall	80006648 <udc_reset+0x54>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000661e:	2f f7       	sub	r7,-1
80006620:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80006622:	6c 08       	ld.w	r8,r6[0x0]
80006624:	70 08       	ld.w	r8,r8[0x0]
80006626:	11 c8       	ld.ub	r8,r8[0x4]
80006628:	ee 08 18 00 	cp.b	r8,r7
8000662c:	fe 9b ff f6 	brhi	80006618 <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80006630:	30 09       	mov	r9,0
80006632:	48 48       	lddpc	r8,80006640 <udc_reset+0x4c>
80006634:	b0 89       	st.b	r8[0x0],r9
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80006636:	30 09       	mov	r9,0
80006638:	48 58       	lddpc	r8,8000664c <udc_reset+0x58>
8000663a:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
8000663c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006640:	00 00       	add	r0,r0
80006642:	0b 38       	ld.ub	r8,r5++
80006644:	00 00       	add	r0,r0
80006646:	0b 28       	ld.uh	r8,r5++
80006648:	80 00       	ld.sh	r0,r0[0x0]
8000664a:	65 90       	ld.w	r0,r2[0x64]
8000664c:	00 00       	add	r0,r0
8000664e:	0b 34       	ld.ub	r4,r5++

80006650 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80006650:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80006654:	fe f8 04 d0 	ld.w	r8,pc[1232]
80006658:	30 09       	mov	r9,0
8000665a:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
8000665c:	30 0a       	mov	r10,0
8000665e:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80006660:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
80006662:	11 88       	ld.ub	r8,r8[0x0]
80006664:	10 9a       	mov	r10,r8
80006666:	f2 08 18 00 	cp.b	r8,r9
8000666a:	c0 94       	brge	8000667c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
8000666c:	fe f9 04 b8 	ld.w	r9,pc[1208]
80006670:	92 3b       	ld.sh	r11,r9[0x6]
80006672:	30 09       	mov	r9,0
80006674:	f2 0b 19 00 	cp.h	r11,r9
80006678:	e0 80 02 51 	breq	80006b1a <udc_process_setup+0x4ca>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
8000667c:	10 99       	mov	r9,r8
8000667e:	e2 19 00 60 	andl	r9,0x60,COH
80006682:	e0 81 01 f5 	brne	80006a6c <udc_process_setup+0x41c>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80006686:	f2 0a 18 00 	cp.b	r10,r9
8000668a:	e0 84 01 16 	brge	800068b6 <udc_process_setup+0x266>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
8000668e:	fe f9 04 96 	ld.w	r9,pc[1174]
80006692:	92 39       	ld.sh	r9,r9[0x6]
80006694:	58 09       	cp.w	r9,0
80006696:	e0 80 01 eb 	breq	80006a6c <udc_process_setup+0x41c>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000669a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000669e:	e0 81 00 b3 	brne	80006804 <udc_process_setup+0x1b4>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
800066a2:	fe fa 04 82 	ld.w	r10,pc[1154]
800066a6:	15 9a       	ld.ub	r10,r10[0x1]
800066a8:	30 6b       	mov	r11,6
800066aa:	f6 0a 18 00 	cp.b	r10,r11
800066ae:	c1 a0       	breq	800066e2 <udc_process_setup+0x92>
800066b0:	30 8b       	mov	r11,8
800066b2:	f6 0a 18 00 	cp.b	r10,r11
800066b6:	e0 80 00 9a 	breq	800067ea <udc_process_setup+0x19a>
800066ba:	30 0b       	mov	r11,0
800066bc:	f6 0a 18 00 	cp.b	r10,r11
800066c0:	e0 81 00 a2 	brne	80006804 <udc_process_setup+0x1b4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
800066c4:	30 28       	mov	r8,2
800066c6:	f0 09 19 00 	cp.h	r9,r8
800066ca:	c0 40       	breq	800066d2 <udc_process_setup+0x82>
800066cc:	30 0c       	mov	r12,0
800066ce:	e0 8f 01 cd 	bral	80006a68 <udc_process_setup+0x418>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
800066d2:	30 2b       	mov	r11,2
800066d4:	fe fc 04 54 	ld.w	r12,pc[1108]
800066d8:	f0 1f 01 15 	mcall	80006b2c <udc_process_setup+0x4dc>
800066dc:	30 1c       	mov	r12,1
800066de:	e0 8f 01 c5 	bral	80006a68 <udc_process_setup+0x418>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
800066e2:	fe f8 04 42 	ld.w	r8,pc[1090]
800066e6:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
800066e8:	f2 08 16 08 	lsr	r8,r9,0x8
800066ec:	30 2a       	mov	r10,2
800066ee:	f4 08 18 00 	cp.b	r8,r10
800066f2:	c1 80       	breq	80006722 <udc_process_setup+0xd2>
800066f4:	e0 8b 00 07 	brhi	80006702 <udc_process_setup+0xb2>
800066f8:	30 19       	mov	r9,1
800066fa:	f2 08 18 00 	cp.b	r8,r9
800066fe:	c7 41       	brne	800067e6 <udc_process_setup+0x196>
80006700:	c0 a8       	rjmp	80006714 <udc_process_setup+0xc4>
80006702:	30 3a       	mov	r10,3
80006704:	f4 08 18 00 	cp.b	r8,r10
80006708:	c3 70       	breq	80006776 <udc_process_setup+0x126>
8000670a:	30 f9       	mov	r9,15
8000670c:	f2 08 18 00 	cp.b	r8,r9
80006710:	c6 b1       	brne	800067e6 <udc_process_setup+0x196>
80006712:	c2 68       	rjmp	8000675e <udc_process_setup+0x10e>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80006714:	fe f8 04 1c 	ld.w	r8,pc[1052]
80006718:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
8000671a:	19 8b       	ld.ub	r11,r12[0x0]
8000671c:	f0 1f 01 04 	mcall	80006b2c <udc_process_setup+0x4dc>
80006720:	c5 38       	rjmp	800067c6 <udc_process_setup+0x176>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80006722:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80006724:	fe f8 04 0c 	ld.w	r8,pc[1036]
80006728:	70 08       	ld.w	r8,r8[0x0]
8000672a:	f1 38 00 11 	ld.ub	r8,r8[17]
8000672e:	f2 08 18 00 	cp.b	r8,r9
80006732:	e0 88 00 5a 	brls	800067e6 <udc_process_setup+0x196>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80006736:	fe f8 03 fa 	ld.w	r8,pc[1018]
8000673a:	70 18       	ld.w	r8,r8[0x4]
8000673c:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80006740:	19 a9       	ld.ub	r9,r12[0x2]
80006742:	19 b8       	ld.ub	r8,r12[0x3]
80006744:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80006748:	5c c8       	swap.bh	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000674a:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
8000674e:	f0 1f 00 f8 	mcall	80006b2c <udc_process_setup+0x4dc>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80006752:	fe f8 03 d2 	ld.w	r8,pc[978]
80006756:	70 28       	ld.w	r8,r8[0x8]
80006758:	30 29       	mov	r9,2
8000675a:	b0 99       	st.b	r8[0x1],r9
8000675c:	c3 58       	rjmp	800067c6 <udc_process_setup+0x176>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
8000675e:	fe f8 03 d2 	ld.w	r8,pc[978]
80006762:	70 2c       	ld.w	r12,r8[0x8]
80006764:	58 0c       	cp.w	r12,0
80006766:	c4 00       	breq	800067e6 <udc_process_setup+0x196>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
80006768:	19 ab       	ld.ub	r11,r12[0x2]
8000676a:	19 b8       	ld.ub	r8,r12[0x3]
8000676c:	f1 eb 10 8b 	or	r11,r8,r11<<0x8
80006770:	f0 1f 00 ef 	mcall	80006b2c <udc_process_setup+0x4dc>
80006774:	c2 98       	rjmp	800067c6 <udc_process_setup+0x176>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80006776:	5c 59       	castu.b	r9
80006778:	58 19       	cp.w	r9,1
8000677a:	c1 00       	breq	8000679a <udc_process_setup+0x14a>
8000677c:	58 29       	cp.w	r9,2
8000677e:	c0 40       	breq	80006786 <udc_process_setup+0x136>
80006780:	58 09       	cp.w	r9,0
80006782:	c0 60       	breq	8000678e <udc_process_setup+0x13e>
80006784:	c3 18       	rjmp	800067e6 <udc_process_setup+0x196>
80006786:	fe fc 03 ae 	ld.w	r12,pc[942]
8000678a:	30 eb       	mov	r11,14
8000678c:	c0 a8       	rjmp	800067a0 <udc_process_setup+0x150>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
8000678e:	30 4b       	mov	r11,4
80006790:	fe fc 03 a8 	ld.w	r12,pc[936]
80006794:	f0 1f 00 e6 	mcall	80006b2c <udc_process_setup+0x4dc>
80006798:	c1 78       	rjmp	800067c6 <udc_process_setup+0x176>
8000679a:	fe fc 03 a2 	ld.w	r12,pc[930]
8000679e:	30 db       	mov	r11,13
800067a0:	fe fa 03 a0 	ld.w	r10,pc[928]
800067a4:	2f ea       	sub	r10,-2
800067a6:	18 98       	mov	r8,r12
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
800067a8:	11 39       	ld.ub	r9,r8++
800067aa:	5c c9       	swap.bh	r9
800067ac:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
800067ae:	f0 0c 01 09 	sub	r9,r8,r12
800067b2:	f6 09 18 00 	cp.b	r9,r11
800067b6:	cf 93       	brcs	800067a8 <udc_process_setup+0x158>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
800067b8:	a1 7b       	lsl	r11,0x1
800067ba:	2f eb       	sub	r11,-2
800067bc:	fe fc 03 84 	ld.w	r12,pc[900]
800067c0:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
800067c2:	f0 1f 00 db 	mcall	80006b2c <udc_process_setup+0x4dc>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
800067c6:	fe f8 03 5e 	ld.w	r8,pc[862]
800067ca:	90 39       	ld.sh	r9,r8[0x6]
800067cc:	90 68       	ld.sh	r8,r8[0xc]
800067ce:	f2 08 19 00 	cp.h	r8,r9
800067d2:	e0 8b 00 05 	brhi	800067dc <udc_process_setup+0x18c>
800067d6:	30 1c       	mov	r12,1
800067d8:	e0 8f 01 48 	bral	80006a68 <udc_process_setup+0x418>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
800067dc:	fe f8 03 48 	ld.w	r8,pc[840]
800067e0:	b0 69       	st.h	r8[0xc],r9
800067e2:	30 1c       	mov	r12,1
800067e4:	c4 29       	rjmp	80006a68 <udc_process_setup+0x418>
800067e6:	30 0c       	mov	r12,0
800067e8:	c4 09       	rjmp	80006a68 <udc_process_setup+0x418>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
800067ea:	30 18       	mov	r8,1
800067ec:	f0 09 19 00 	cp.h	r9,r8
800067f0:	c0 30       	breq	800067f6 <udc_process_setup+0x1a6>
800067f2:	30 0c       	mov	r12,0
800067f4:	c3 a9       	rjmp	80006a68 <udc_process_setup+0x418>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
800067f6:	30 1b       	mov	r11,1
800067f8:	fe fc 03 4c 	ld.w	r12,pc[844]
800067fc:	f0 1f 00 cc 	mcall	80006b2c <udc_process_setup+0x4dc>
80006800:	30 1c       	mov	r12,1
80006802:	c3 39       	rjmp	80006a68 <udc_process_setup+0x418>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80006804:	58 18       	cp.w	r8,1
80006806:	c3 61       	brne	80006872 <udc_process_setup+0x222>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80006808:	fe fa 03 1c 	ld.w	r10,pc[796]
8000680c:	15 9b       	ld.ub	r11,r10[0x1]
8000680e:	30 aa       	mov	r10,10
80006810:	f4 0b 18 00 	cp.b	r11,r10
80006814:	c2 f1       	brne	80006872 <udc_process_setup+0x222>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
80006816:	f0 09 19 00 	cp.h	r9,r8
8000681a:	c2 a1       	brne	8000686e <udc_process_setup+0x21e>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
8000681c:	fe f8 03 28 	ld.w	r8,pc[808]
80006820:	11 89       	ld.ub	r9,r8[0x0]
80006822:	30 08       	mov	r8,0
80006824:	f0 09 18 00 	cp.b	r9,r8
80006828:	c2 30       	breq	8000686e <udc_process_setup+0x21e>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000682a:	fe f8 02 fa 	ld.w	r8,pc[762]
8000682e:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80006830:	fe f8 03 18 	ld.w	r8,pc[792]
80006834:	70 08       	ld.w	r8,r8[0x0]
80006836:	70 08       	ld.w	r8,r8[0x0]
80006838:	11 c8       	ld.ub	r8,r8[0x4]
8000683a:	ee 08 18 00 	cp.b	r8,r7
8000683e:	e0 88 00 18 	brls	8000686e <udc_process_setup+0x21e>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80006842:	30 0b       	mov	r11,0
80006844:	0e 9c       	mov	r12,r7
80006846:	f0 1f 00 c2 	mcall	80006b4c <udc_process_setup+0x4fc>
8000684a:	c1 20       	breq	8000686e <udc_process_setup+0x21e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
8000684c:	fe f8 02 fc 	ld.w	r8,pc[764]
80006850:	70 08       	ld.w	r8,r8[0x0]
80006852:	70 18       	ld.w	r8,r8[0x4]
80006854:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80006858:	70 3c       	ld.w	r12,r8[0xc]
8000685a:	5d 1c       	icall	r12
8000685c:	fe f8 02 f4 	ld.w	r8,pc[756]
80006860:	b0 8c       	st.b	r8[0x0],r12

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80006862:	30 1b       	mov	r11,1
80006864:	10 9c       	mov	r12,r8
80006866:	f0 1f 00 b2 	mcall	80006b2c <udc_process_setup+0x4dc>
8000686a:	30 1c       	mov	r12,1
8000686c:	cf e8       	rjmp	80006a68 <udc_process_setup+0x418>
8000686e:	30 0c       	mov	r12,0
80006870:	cf c8       	rjmp	80006a68 <udc_process_setup+0x418>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80006872:	58 28       	cp.w	r8,2
80006874:	e0 81 00 fc 	brne	80006a6c <udc_process_setup+0x41c>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80006878:	fe f8 02 ac 	ld.w	r8,pc[684]
8000687c:	11 9a       	ld.ub	r10,r8[0x1]
8000687e:	30 08       	mov	r8,0
80006880:	f0 0a 18 00 	cp.b	r10,r8
80006884:	e0 81 00 f1 	brne	80006a66 <udc_process_setup+0x416>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
80006888:	30 28       	mov	r8,2
8000688a:	f0 09 19 00 	cp.h	r9,r8
8000688e:	c0 30       	breq	80006894 <udc_process_setup+0x244>
80006890:	30 0c       	mov	r12,0
80006892:	ce b8       	rjmp	80006a68 <udc_process_setup+0x418>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80006894:	fe f8 02 90 	ld.w	r8,pc[656]
80006898:	11 dc       	ld.ub	r12,r8[0x5]
8000689a:	f0 1f 00 af 	mcall	80006b54 <udc_process_setup+0x504>
8000689e:	e0 68 01 00 	mov	r8,256
800068a2:	f9 b8 00 00 	moveq	r8,0
800068a6:	fe fc 02 b2 	ld.w	r12,pc[690]
800068aa:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
800068ac:	30 2b       	mov	r11,2
800068ae:	f0 1f 00 a0 	mcall	80006b2c <udc_process_setup+0x4dc>
800068b2:	30 1c       	mov	r12,1
800068b4:	cd a8       	rjmp	80006a68 <udc_process_setup+0x418>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
800068b6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800068ba:	c7 d1       	brne	800069b4 <udc_process_setup+0x364>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
800068bc:	fe f9 02 68 	ld.w	r9,pc[616]
800068c0:	13 99       	ld.ub	r9,r9[0x1]
800068c2:	30 3a       	mov	r10,3
800068c4:	f4 09 18 00 	cp.b	r9,r10
800068c8:	e0 80 00 cf 	breq	80006a66 <udc_process_setup+0x416>
800068cc:	e0 8b 00 07 	brhi	800068da <udc_process_setup+0x28a>
800068d0:	30 1a       	mov	r10,1
800068d2:	f4 09 18 00 	cp.b	r9,r10
800068d6:	c6 f1       	brne	800069b4 <udc_process_setup+0x364>
800068d8:	c1 a8       	rjmp	8000690c <udc_process_setup+0x2bc>
800068da:	30 5a       	mov	r10,5
800068dc:	f4 09 18 00 	cp.b	r9,r10
800068e0:	c0 60       	breq	800068ec <udc_process_setup+0x29c>
800068e2:	30 9a       	mov	r10,9
800068e4:	f4 09 18 00 	cp.b	r9,r10
800068e8:	c6 61       	brne	800069b4 <udc_process_setup+0x364>
800068ea:	c2 88       	rjmp	8000693a <udc_process_setup+0x2ea>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
800068ec:	fe f8 02 38 	ld.w	r8,pc[568]
800068f0:	90 39       	ld.sh	r9,r8[0x6]
800068f2:	30 08       	mov	r8,0
800068f4:	f0 09 19 00 	cp.h	r9,r8
800068f8:	c0 30       	breq	800068fe <udc_process_setup+0x2ae>
800068fa:	30 0c       	mov	r12,0
800068fc:	cb 68       	rjmp	80006a68 <udc_process_setup+0x418>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
800068fe:	fe f9 02 5e 	ld.w	r9,pc[606]
80006902:	fe f8 02 22 	ld.w	r8,pc[546]
80006906:	91 49       	st.w	r8[0x10],r9
80006908:	30 1c       	mov	r12,1
8000690a:	ca f8       	rjmp	80006a68 <udc_process_setup+0x418>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
8000690c:	fe f8 02 18 	ld.w	r8,pc[536]
80006910:	90 39       	ld.sh	r9,r8[0x6]
80006912:	30 08       	mov	r8,0
80006914:	f0 09 19 00 	cp.h	r9,r8
80006918:	c0 f1       	brne	80006936 <udc_process_setup+0x2e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
8000691a:	fe f8 02 0a 	ld.w	r8,pc[522]
8000691e:	90 19       	ld.sh	r9,r8[0x2]
80006920:	30 18       	mov	r8,1
80006922:	f0 09 19 00 	cp.h	r9,r8
80006926:	c0 81       	brne	80006936 <udc_process_setup+0x2e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
80006928:	fe f8 02 00 	ld.w	r8,pc[512]
8000692c:	90 09       	ld.sh	r9,r8[0x0]
8000692e:	a9 d9       	cbr	r9,0x9
80006930:	b0 09       	st.h	r8[0x0],r9
80006932:	30 1c       	mov	r12,1
80006934:	c9 a8       	rjmp	80006a68 <udc_process_setup+0x418>
80006936:	30 0c       	mov	r12,0
80006938:	c9 88       	rjmp	80006a68 <udc_process_setup+0x418>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
8000693a:	4f b8       	lddpc	r8,80006b24 <udc_process_setup+0x4d4>
8000693c:	90 39       	ld.sh	r9,r8[0x6]
8000693e:	30 08       	mov	r8,0
80006940:	f0 09 19 00 	cp.h	r9,r8
80006944:	c3 41       	brne	800069ac <udc_process_setup+0x35c>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
80006946:	f0 1f 00 87 	mcall	80006b60 <udc_process_setup+0x510>
8000694a:	c3 10       	breq	800069ac <udc_process_setup+0x35c>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000694c:	4f 68       	lddpc	r8,80006b24 <udc_process_setup+0x4d4>
8000694e:	11 b9       	ld.ub	r9,r8[0x3]
80006950:	4f 88       	lddpc	r8,80006b30 <udc_process_setup+0x4e0>
80006952:	70 08       	ld.w	r8,r8[0x0]
80006954:	f1 38 00 11 	ld.ub	r8,r8[17]
80006958:	10 39       	cp.w	r9,r8
8000695a:	e0 89 00 29 	brgt	800069ac <udc_process_setup+0x35c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
8000695e:	f0 1f 00 82 	mcall	80006b64 <udc_process_setup+0x514>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80006962:	4f 18       	lddpc	r8,80006b24 <udc_process_setup+0x4d4>
80006964:	11 b8       	ld.ub	r8,r8[0x3]
80006966:	4f 89       	lddpc	r9,80006b44 <udc_process_setup+0x4f4>
80006968:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
8000696a:	58 08       	cp.w	r8,0
8000696c:	c2 20       	breq	800069b0 <udc_process_setup+0x360>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
8000696e:	20 18       	sub	r8,1
80006970:	4f 09       	lddpc	r9,80006b30 <udc_process_setup+0x4e0>
80006972:	72 19       	ld.w	r9,r9[0x4]
80006974:	f2 08 00 38 	add	r8,r9,r8<<0x3
80006978:	4f 49       	lddpc	r9,80006b48 <udc_process_setup+0x4f8>
8000697a:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000697c:	70 08       	ld.w	r8,r8[0x0]
8000697e:	11 c9       	ld.ub	r9,r8[0x4]
80006980:	30 08       	mov	r8,0
80006982:	f0 09 18 00 	cp.b	r9,r8
80006986:	c1 50       	breq	800069b0 <udc_process_setup+0x360>
80006988:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
8000698a:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000698c:	4e f6       	lddpc	r6,80006b48 <udc_process_setup+0x4f8>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
8000698e:	0a 9b       	mov	r11,r5
80006990:	0e 9c       	mov	r12,r7
80006992:	f0 1f 00 76 	mcall	80006b68 <udc_process_setup+0x518>
80006996:	c0 b0       	breq	800069ac <udc_process_setup+0x35c>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80006998:	2f f7       	sub	r7,-1
8000699a:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000699c:	6c 08       	ld.w	r8,r6[0x0]
8000699e:	70 08       	ld.w	r8,r8[0x0]
800069a0:	11 c8       	ld.ub	r8,r8[0x4]
800069a2:	ee 08 18 00 	cp.b	r8,r7
800069a6:	fe 9b ff f4 	brhi	8000698e <udc_process_setup+0x33e>
800069aa:	c0 38       	rjmp	800069b0 <udc_process_setup+0x360>
800069ac:	30 0c       	mov	r12,0
800069ae:	c5 d8       	rjmp	80006a68 <udc_process_setup+0x418>
800069b0:	30 1c       	mov	r12,1
800069b2:	c5 b8       	rjmp	80006a68 <udc_process_setup+0x418>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
800069b4:	58 18       	cp.w	r8,1
800069b6:	c2 21       	brne	800069fa <udc_process_setup+0x3aa>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
800069b8:	4d b9       	lddpc	r9,80006b24 <udc_process_setup+0x4d4>
800069ba:	13 9a       	ld.ub	r10,r9[0x1]
800069bc:	30 b9       	mov	r9,11
800069be:	f2 0a 18 00 	cp.b	r10,r9
800069c2:	c1 c1       	brne	800069fa <udc_process_setup+0x3aa>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
800069c4:	4d 88       	lddpc	r8,80006b24 <udc_process_setup+0x4d4>
800069c6:	90 39       	ld.sh	r9,r8[0x6]
800069c8:	30 08       	mov	r8,0
800069ca:	f0 09 19 00 	cp.h	r9,r8
800069ce:	c1 41       	brne	800069f6 <udc_process_setup+0x3a6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
800069d0:	4d d8       	lddpc	r8,80006b44 <udc_process_setup+0x4f4>
800069d2:	11 89       	ld.ub	r9,r8[0x0]
800069d4:	30 08       	mov	r8,0
800069d6:	f0 09 18 00 	cp.b	r9,r8
800069da:	c0 e0       	breq	800069f6 <udc_process_setup+0x3a6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
800069dc:	4d 28       	lddpc	r8,80006b24 <udc_process_setup+0x4d4>
800069de:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
800069e0:	11 d7       	ld.ub	r7,r8[0x5]
800069e2:	0e 9c       	mov	r12,r7
800069e4:	f0 1f 00 62 	mcall	80006b6c <udc_process_setup+0x51c>
800069e8:	c0 70       	breq	800069f6 <udc_process_setup+0x3a6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
800069ea:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
800069ee:	0e 9c       	mov	r12,r7
800069f0:	f0 1f 00 5e 	mcall	80006b68 <udc_process_setup+0x518>
800069f4:	c3 a8       	rjmp	80006a68 <udc_process_setup+0x418>
800069f6:	30 0c       	mov	r12,0
800069f8:	c3 88       	rjmp	80006a68 <udc_process_setup+0x418>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
800069fa:	58 28       	cp.w	r8,2
800069fc:	c3 81       	brne	80006a6c <udc_process_setup+0x41c>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
800069fe:	4c a8       	lddpc	r8,80006b24 <udc_process_setup+0x4d4>
80006a00:	11 98       	ld.ub	r8,r8[0x1]
80006a02:	30 19       	mov	r9,1
80006a04:	f2 08 18 00 	cp.b	r8,r9
80006a08:	c0 60       	breq	80006a14 <udc_process_setup+0x3c4>
80006a0a:	30 39       	mov	r9,3
80006a0c:	f2 08 18 00 	cp.b	r8,r9
80006a10:	c2 b1       	brne	80006a66 <udc_process_setup+0x416>
80006a12:	c1 48       	rjmp	80006a3a <udc_process_setup+0x3ea>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80006a14:	4c 48       	lddpc	r8,80006b24 <udc_process_setup+0x4d4>
80006a16:	90 39       	ld.sh	r9,r8[0x6]
80006a18:	30 08       	mov	r8,0
80006a1a:	f0 09 19 00 	cp.h	r9,r8
80006a1e:	c0 c1       	brne	80006a36 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80006a20:	4c 18       	lddpc	r8,80006b24 <udc_process_setup+0x4d4>
80006a22:	90 19       	ld.sh	r9,r8[0x2]
80006a24:	30 08       	mov	r8,0
80006a26:	f0 09 19 00 	cp.h	r9,r8
80006a2a:	c0 61       	brne	80006a36 <udc_process_setup+0x3e6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80006a2c:	4b e8       	lddpc	r8,80006b24 <udc_process_setup+0x4d4>
80006a2e:	11 dc       	ld.ub	r12,r8[0x5]
80006a30:	f0 1f 00 50 	mcall	80006b70 <udc_process_setup+0x520>
80006a34:	c1 a8       	rjmp	80006a68 <udc_process_setup+0x418>
80006a36:	30 0c       	mov	r12,0
80006a38:	c1 88       	rjmp	80006a68 <udc_process_setup+0x418>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80006a3a:	4b b8       	lddpc	r8,80006b24 <udc_process_setup+0x4d4>
80006a3c:	90 39       	ld.sh	r9,r8[0x6]
80006a3e:	30 08       	mov	r8,0
80006a40:	f0 09 19 00 	cp.h	r9,r8
80006a44:	c0 f1       	brne	80006a62 <udc_process_setup+0x412>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80006a46:	4b 88       	lddpc	r8,80006b24 <udc_process_setup+0x4d4>
80006a48:	90 19       	ld.sh	r9,r8[0x2]
80006a4a:	30 08       	mov	r8,0
80006a4c:	f0 09 19 00 	cp.h	r9,r8
80006a50:	c0 91       	brne	80006a62 <udc_process_setup+0x412>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
80006a52:	4b 57       	lddpc	r7,80006b24 <udc_process_setup+0x4d4>
80006a54:	0f dc       	ld.ub	r12,r7[0x5]
80006a56:	f0 1f 00 48 	mcall	80006b74 <udc_process_setup+0x524>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80006a5a:	0f dc       	ld.ub	r12,r7[0x5]
80006a5c:	f0 1f 00 47 	mcall	80006b78 <udc_process_setup+0x528>
80006a60:	c0 48       	rjmp	80006a68 <udc_process_setup+0x418>
80006a62:	30 0c       	mov	r12,0
80006a64:	c0 28       	rjmp	80006a68 <udc_process_setup+0x418>
80006a66:	30 0c       	mov	r12,0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
80006a68:	58 0c       	cp.w	r12,0
80006a6a:	c5 a1       	brne	80006b1e <udc_process_setup+0x4ce>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80006a6c:	4a e8       	lddpc	r8,80006b24 <udc_process_setup+0x4d4>
80006a6e:	11 88       	ld.ub	r8,r8[0x0]
80006a70:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006a74:	58 18       	cp.w	r8,1
80006a76:	c2 61       	brne	80006ac2 <udc_process_setup+0x472>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
80006a78:	4b 38       	lddpc	r8,80006b44 <udc_process_setup+0x4f4>
80006a7a:	11 89       	ld.ub	r9,r8[0x0]
80006a7c:	30 08       	mov	r8,0
80006a7e:	f0 09 18 00 	cp.b	r9,r8
80006a82:	c2 00       	breq	80006ac2 <udc_process_setup+0x472>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80006a84:	4a 88       	lddpc	r8,80006b24 <udc_process_setup+0x4d4>
80006a86:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80006a88:	4b 08       	lddpc	r8,80006b48 <udc_process_setup+0x4f8>
80006a8a:	70 08       	ld.w	r8,r8[0x0]
80006a8c:	70 08       	ld.w	r8,r8[0x0]
80006a8e:	11 c8       	ld.ub	r8,r8[0x4]
80006a90:	ee 08 18 00 	cp.b	r8,r7
80006a94:	e0 88 00 17 	brls	80006ac2 <udc_process_setup+0x472>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80006a98:	0e 96       	mov	r6,r7
80006a9a:	30 0b       	mov	r11,0
80006a9c:	0e 9c       	mov	r12,r7
80006a9e:	f0 1f 00 2c 	mcall	80006b4c <udc_process_setup+0x4fc>
80006aa2:	c1 00       	breq	80006ac2 <udc_process_setup+0x472>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80006aa4:	4a 98       	lddpc	r8,80006b48 <udc_process_setup+0x4f8>
80006aa6:	70 08       	ld.w	r8,r8[0x0]
80006aa8:	70 18       	ld.w	r8,r8[0x4]
80006aaa:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80006aae:	6e 3c       	ld.w	r12,r7[0xc]
80006ab0:	5d 1c       	icall	r12
80006ab2:	18 9b       	mov	r11,r12
80006ab4:	0c 9c       	mov	r12,r6
80006ab6:	f0 1f 00 26 	mcall	80006b4c <udc_process_setup+0x4fc>
80006aba:	c0 40       	breq	80006ac2 <udc_process_setup+0x472>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80006abc:	6e 2c       	ld.w	r12,r7[0x8]
80006abe:	5d 1c       	icall	r12
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
80006ac0:	c2 f1       	brne	80006b1e <udc_process_setup+0x4ce>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
80006ac2:	49 98       	lddpc	r8,80006b24 <udc_process_setup+0x4d4>
80006ac4:	11 88       	ld.ub	r8,r8[0x0]
80006ac6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006aca:	58 28       	cp.w	r8,2
80006acc:	c2 71       	brne	80006b1a <udc_process_setup+0x4ca>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
80006ace:	49 e8       	lddpc	r8,80006b44 <udc_process_setup+0x4f4>
80006ad0:	11 89       	ld.ub	r9,r8[0x0]
80006ad2:	30 08       	mov	r8,0
80006ad4:	f0 09 18 00 	cp.b	r9,r8
80006ad8:	c2 10       	breq	80006b1a <udc_process_setup+0x4ca>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80006ada:	49 c8       	lddpc	r8,80006b48 <udc_process_setup+0x4f8>
80006adc:	70 08       	ld.w	r8,r8[0x0]
80006ade:	70 09       	ld.w	r9,r8[0x0]
80006ae0:	13 ca       	ld.ub	r10,r9[0x4]
80006ae2:	30 09       	mov	r9,0
80006ae4:	f2 0a 18 00 	cp.b	r10,r9
80006ae8:	c1 90       	breq	80006b1a <udc_process_setup+0x4ca>
80006aea:	30 07       	mov	r7,0
80006aec:	49 75       	lddpc	r5,80006b48 <udc_process_setup+0x4f8>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
80006aee:	70 18       	ld.w	r8,r8[0x4]
80006af0:	f0 07 03 26 	ld.w	r6,r8[r7<<0x2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80006af4:	6c 3c       	ld.w	r12,r6[0xc]
80006af6:	5d 1c       	icall	r12
80006af8:	18 9b       	mov	r11,r12
80006afa:	0e 9c       	mov	r12,r7
80006afc:	f0 1f 00 14 	mcall	80006b4c <udc_process_setup+0x4fc>
80006b00:	c0 d0       	breq	80006b1a <udc_process_setup+0x4ca>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
80006b02:	6c 2c       	ld.w	r12,r6[0x8]
80006b04:	5d 1c       	icall	r12
80006b06:	c0 c1       	brne	80006b1e <udc_process_setup+0x4ce>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80006b08:	2f f7       	sub	r7,-1
80006b0a:	5c 57       	castu.b	r7
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80006b0c:	6a 08       	ld.w	r8,r5[0x0]
80006b0e:	70 09       	ld.w	r9,r8[0x0]
80006b10:	13 c9       	ld.ub	r9,r9[0x4]
80006b12:	ee 09 18 00 	cp.b	r9,r7
80006b16:	fe 9b ff ec 	brhi	80006aee <udc_process_setup+0x49e>
80006b1a:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80006b1e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80006b22:	00 00       	add	r0,r0
80006b24:	00 00       	add	r0,r0
80006b26:	0b a8       	ld.ub	r8,r5[0x2]
80006b28:	00 00       	add	r0,r0
80006b2a:	0b 34       	ld.ub	r4,r5++
80006b2c:	80 00       	ld.sh	r0,r0[0x0]
80006b2e:	34 6c       	mov	r12,70
80006b30:	00 00       	add	r0,r0
80006b32:	00 20       	rsub	r0,r0
80006b34:	00 00       	add	r0,r0
80006b36:	03 58       	ld.sh	r8,--r1
80006b38:	00 00       	add	r0,r0
80006b3a:	03 98       	ld.ub	r8,r1[0x1]
80006b3c:	00 00       	add	r0,r0
80006b3e:	03 68       	ld.uh	r8,--r1
80006b40:	00 00       	add	r0,r0
80006b42:	03 78       	ld.ub	r8,--r1
80006b44:	00 00       	add	r0,r0
80006b46:	0b 38       	ld.ub	r8,r5++
80006b48:	00 00       	add	r0,r0
80006b4a:	0b 28       	ld.uh	r8,r5++
80006b4c:	80 00       	ld.sh	r0,r0[0x0]
80006b4e:	64 44       	ld.w	r4,r2[0x10]
80006b50:	00 00       	add	r0,r0
80006b52:	0b 30       	ld.ub	r0,r5++
80006b54:	80 00       	ld.sh	r0,r0[0x0]
80006b56:	34 78       	mov	r8,71
80006b58:	00 00       	add	r0,r0
80006b5a:	0b 2c       	ld.uh	r12,r5++
80006b5c:	80 00       	ld.sh	r0,r0[0x0]
80006b5e:	65 18       	ld.w	r8,r2[0x44]
80006b60:	80 00       	ld.sh	r0,r0[0x0]
80006b62:	34 52       	mov	r2,69
80006b64:	80 00       	ld.sh	r0,r0[0x0]
80006b66:	65 f4       	ld.w	r4,r2[0x7c]
80006b68:	80 00       	ld.sh	r0,r0[0x0]
80006b6a:	65 30       	ld.w	r0,r2[0x4c]
80006b6c:	80 00       	ld.sh	r0,r0[0x0]
80006b6e:	65 90       	ld.w	r0,r2[0x64]
80006b70:	80 00       	ld.sh	r0,r0[0x0]
80006b72:	35 34       	mov	r4,83
80006b74:	80 00       	ld.sh	r0,r0[0x0]
80006b76:	36 88       	mov	r8,104
80006b78:	80 00       	ld.sh	r0,r0[0x0]
80006b7a:	34 8c       	mov	r12,72

80006b7c <udc_stop>:
}

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
80006b7c:	d4 01       	pushm	lr
	udd_disable();
80006b7e:	f0 1f 00 03 	mcall	80006b88 <udc_stop+0xc>
	udc_reset();
80006b82:	f0 1f 00 03 	mcall	80006b8c <udc_stop+0x10>
}
80006b86:	d8 02       	popm	pc
80006b88:	80 00       	ld.sh	r0,r0[0x0]
80006b8a:	3a 50       	mov	r0,-91
80006b8c:	80 00       	ld.sh	r0,r0[0x0]
80006b8e:	65 f4       	ld.w	r4,r2[0x7c]

80006b90 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
80006b90:	d4 01       	pushm	lr
	udd_enable();
80006b92:	f0 1f 00 02 	mcall	80006b98 <udc_start+0x8>
}
80006b96:	d8 02       	popm	pc
80006b98:	80 00       	ld.sh	r0,r0[0x0]
80006b9a:	3d cc       	mov	r12,-36

80006b9c <uhc_enable_timeout_callback>:
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80006b9c:	48 38       	lddpc	r8,80006ba8 <uhc_enable_timeout_callback+0xc>
80006b9e:	91 0b       	st.w	r8[0x0],r11
	uhc_sof_timeout = timeout;
80006ba0:	48 38       	lddpc	r8,80006bac <uhc_enable_timeout_callback+0x10>
80006ba2:	b0 8c       	st.b	r8[0x0],r12
}
80006ba4:	5e fc       	retal	r12
80006ba6:	00 00       	add	r0,r0
80006ba8:	00 00       	add	r0,r0
80006baa:	0b 60       	ld.uh	r0,--r5
80006bac:	00 00       	add	r0,r0
80006bae:	0c 3c       	cp.w	r12,r6

80006bb0 <uhc_enumeration_step2>:
/**
 * \brief Device enumeration step 2
 * Lets USB line in IDLE state during 20ms.
 */
static void uhc_enumeration_step2(void)
{
80006bb0:	d4 01       	pushm	lr
	uhc_enable_timeout_callback(20, uhc_enumeration_step3);
80006bb2:	48 3b       	lddpc	r11,80006bbc <uhc_enumeration_step2+0xc>
80006bb4:	31 4c       	mov	r12,20
80006bb6:	f0 1f 00 03 	mcall	80006bc0 <uhc_enumeration_step2+0x10>
}
80006bba:	d8 02       	popm	pc
80006bbc:	80 00       	ld.sh	r0,r0[0x0]
80006bbe:	6d e4       	ld.w	r4,r6[0x78]
80006bc0:	80 00       	ld.sh	r0,r0[0x0]
80006bc2:	6b 9c       	ld.w	r12,r5[0x64]

80006bc4 <uhc_enumeration_step8>:
/**
 * \brief Device enumeration step 8
 * Lets USB line in IDLE state during 100ms.
 */
static void uhc_enumeration_step8(void)
{
80006bc4:	d4 01       	pushm	lr
	// Wait 100ms
	uhc_enable_timeout_callback(100, uhc_enumeration_step9);
80006bc6:	48 3b       	lddpc	r11,80006bd0 <uhc_enumeration_step8+0xc>
80006bc8:	36 4c       	mov	r12,100
80006bca:	f0 1f 00 03 	mcall	80006bd4 <uhc_enumeration_step8+0x10>
}
80006bce:	d8 02       	popm	pc
80006bd0:	80 00       	ld.sh	r0,r0[0x0]
80006bd2:	6f 74       	ld.w	r4,r7[0x5c]
80006bd4:	80 00       	ld.sh	r0,r0[0x0]
80006bd6:	6b 9c       	ld.w	r12,r5[0x64]

80006bd8 <uhc_notify_sof>:
	// Device connection on root
	uhc_connection_tree(b_plug, &g_uhc_device_root);
}

void uhc_notify_sof(bool b_micro)
{
80006bd8:	eb cd 40 80 	pushm	r7,lr
80006bdc:	18 97       	mov	r7,r12
	// Call all UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		if (uhc_uhis[i].sof_notify != NULL) {
80006bde:	48 f8       	lddpc	r8,80006c18 <uhc_notify_sof+0x40>
80006be0:	70 38       	ld.w	r8,r8[0xc]
80006be2:	58 08       	cp.w	r8,0
80006be4:	c0 20       	breq	80006be8 <uhc_notify_sof+0x10>
			uhc_uhis[i].sof_notify(b_micro);
80006be6:	5d 18       	icall	r8

void uhc_notify_sof(bool b_micro)
{
	// Call all UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		if (uhc_uhis[i].sof_notify != NULL) {
80006be8:	48 c8       	lddpc	r8,80006c18 <uhc_notify_sof+0x40>
80006bea:	70 78       	ld.w	r8,r8[0x1c]
80006bec:	58 08       	cp.w	r8,0
80006bee:	c0 30       	breq	80006bf4 <uhc_notify_sof+0x1c>
			uhc_uhis[i].sof_notify(b_micro);
80006bf0:	0e 9c       	mov	r12,r7
80006bf2:	5d 18       	icall	r8
		}
	}

	if (!b_micro) {
80006bf4:	58 07       	cp.w	r7,0
80006bf6:	c0 e1       	brne	80006c12 <uhc_notify_sof+0x3a>
		// Manage SOF timeout
		if (uhc_sof_timeout) {
80006bf8:	48 98       	lddpc	r8,80006c1c <uhc_notify_sof+0x44>
80006bfa:	11 88       	ld.ub	r8,r8[0x0]
80006bfc:	58 08       	cp.w	r8,0
80006bfe:	c0 a0       	breq	80006c12 <uhc_notify_sof+0x3a>
			if (--uhc_sof_timeout == 0) {
80006c00:	20 18       	sub	r8,1
80006c02:	5c 58       	castu.b	r8
80006c04:	48 69       	lddpc	r9,80006c1c <uhc_notify_sof+0x44>
80006c06:	b2 88       	st.b	r9[0x0],r8
80006c08:	58 08       	cp.w	r8,0
80006c0a:	c0 41       	brne	80006c12 <uhc_notify_sof+0x3a>
				uhc_sof_timeout_callback();
80006c0c:	48 58       	lddpc	r8,80006c20 <uhc_notify_sof+0x48>
80006c0e:	70 08       	ld.w	r8,r8[0x0]
80006c10:	5d 18       	icall	r8
80006c12:	e3 cd 80 80 	ldm	sp++,r7,pc
80006c16:	00 00       	add	r0,r0
80006c18:	80 00       	ld.sh	r0,r0[0x0]
80006c1a:	d5 98       	*unknown*
80006c1c:	00 00       	add	r0,r0
80006c1e:	0c 3c       	cp.w	r12,r6
80006c20:	00 00       	add	r0,r0
80006c22:	0b 60       	ld.uh	r0,--r5

80006c24 <uhc_remotewakeup>:
 * of all devices connected
 *
 * \param b_enable   true to enable remote wakeup feature, else disable.
 */
static void uhc_remotewakeup(bool b_enable)
{
80006c24:	d4 01       	pushm	lr
80006c26:	20 2d       	sub	sp,8
	usb_setup_req_t req;
	uhc_device_t *dev;

	dev = &g_uhc_device_root;
	while(1) {
		if (dev->conf_desc->bmAttributes & USB_CONFIG_ATTR_REMOTE_WAKEUP) {
80006c28:	49 28       	lddpc	r8,80006c70 <uhc_remotewakeup+0x4c>
80006c2a:	70 68       	ld.w	r8,r8[0x18]
80006c2c:	11 f8       	ld.ub	r8,r8[0x7]
80006c2e:	e2 18 00 20 	andl	r8,0x20,COH
80006c32:	c1 d0       	breq	80006c6c <uhc_remotewakeup+0x48>
			if (b_enable) {
				req.bRequest = USB_REQ_SET_FEATURE;
80006c34:	58 0c       	cp.w	r12,0
80006c36:	f9 b8 01 03 	movne	r8,3
80006c3a:	fb f8 1e 01 	st.bne	sp[0x1],r8
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
80006c3e:	f9 b8 00 01 	moveq	r8,1
80006c42:	fb f8 0e 01 	st.beq	sp[0x1],r8
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
80006c46:	30 08       	mov	r8,0
80006c48:	ba 88       	st.b	sp[0x0],r8
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
80006c4a:	30 18       	mov	r8,1
80006c4c:	ba 18       	st.h	sp[0x2],r8
			req.wIndex = 0;
80006c4e:	30 08       	mov	r8,0
80006c50:	ba 28       	st.h	sp[0x4],r8
			req.wLength = 0;
80006c52:	ba 38       	st.h	sp[0x6],r8
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80006c54:	30 0a       	mov	r10,0
80006c56:	1a da       	st.w	--sp,r10
80006c58:	14 98       	mov	r8,r10
80006c5a:	14 99       	mov	r9,r10
80006c5c:	fa cb ff fc 	sub	r11,sp,-4
80006c60:	48 4c       	lddpc	r12,80006c70 <uhc_remotewakeup+0x4c>
80006c62:	f9 3c 00 12 	ld.ub	r12,r12[18]
80006c66:	f0 1f 00 04 	mcall	80006c74 <uhc_remotewakeup+0x50>
80006c6a:	2f fd       	sub	sp,-4
		dev = dev->next;
#else
		break;
#endif
	}
}
80006c6c:	2f ed       	sub	sp,-8
80006c6e:	d8 02       	popm	pc
80006c70:	00 00       	add	r0,r0
80006c72:	0b 40       	ld.w	r0,--r5
80006c74:	80 00       	ld.sh	r0,r0[0x0]
80006c76:	4d 54       	lddpc	r4,80006dc8 <uhc_notify_connection+0x78>

80006c78 <uhc_is_suspend>:
	// Suspend all USB devices
	uhd_suspend();
}

bool uhc_is_suspend(void)
{
80006c78:	d4 01       	pushm	lr
	if (g_uhc_device_root.address == UHC_USB_ADD_NOT_VALID) {
80006c7a:	48 68       	lddpc	r8,80006c90 <uhc_is_suspend+0x18>
80006c7c:	f1 39 00 12 	ld.ub	r9,r8[18]
80006c80:	3f f8       	mov	r8,-1
80006c82:	f0 09 18 00 	cp.b	r9,r8
80006c86:	c0 21       	brne	80006c8a <uhc_is_suspend+0x12>
80006c88:	da 0a       	popm	pc,r12=1
		return true;
	}
	return uhd_is_suspend();
80006c8a:	f0 1f 00 03 	mcall	80006c94 <uhc_is_suspend+0x1c>
}
80006c8e:	d8 02       	popm	pc
80006c90:	00 00       	add	r0,r0
80006c92:	0b 40       	ld.w	r0,--r5
80006c94:	80 00       	ld.sh	r0,r0[0x0]
80006c96:	45 90       	lddsp	r0,sp[0x164]

80006c98 <uhc_resume>:

void uhc_resume(void)
{
80006c98:	d4 01       	pushm	lr
	if (!uhc_is_suspend()) {
80006c9a:	f0 1f 00 04 	mcall	80006ca8 <uhc_resume+0x10>
80006c9e:	c0 30       	breq	80006ca4 <uhc_resume+0xc>
		return;
	}
	// Resume all USB devices
	uhd_resume();
80006ca0:	f0 1f 00 03 	mcall	80006cac <uhc_resume+0x14>
80006ca4:	d8 02       	popm	pc
80006ca6:	00 00       	add	r0,r0
80006ca8:	80 00       	ld.sh	r0,r0[0x0]
80006caa:	6c 78       	ld.w	r8,r6[0x1c]
80006cac:	80 00       	ld.sh	r0,r0[0x0]
80006cae:	4b a4       	lddpc	r4,80006d94 <uhc_notify_connection+0x44>

80006cb0 <uhc_suspend>:
	// Stop UHD
	uhd_disable(b_id_stop);
}

void uhc_suspend(bool b_remotewakeup)
{
80006cb0:	d4 01       	pushm	lr
	if (uhc_enum_try) {
80006cb2:	48 88       	lddpc	r8,80006cd0 <uhc_suspend+0x20>
80006cb4:	11 89       	ld.ub	r9,r8[0x0]
80006cb6:	30 08       	mov	r8,0
80006cb8:	f0 09 18 00 	cp.b	r9,r8
80006cbc:	c0 81       	brne	80006ccc <uhc_suspend+0x1c>
		// enumeration on-going, the USB suspend can't be done
		return;
	}

	if (b_remotewakeup) {
80006cbe:	58 0c       	cp.w	r12,0
80006cc0:	c0 40       	breq	80006cc8 <uhc_suspend+0x18>
		uhc_remotewakeup(true);
80006cc2:	30 1c       	mov	r12,1
80006cc4:	f0 1f 00 04 	mcall	80006cd4 <uhc_suspend+0x24>
	}
	// Suspend all USB devices
	uhd_suspend();
80006cc8:	f0 1f 00 04 	mcall	80006cd8 <uhc_suspend+0x28>
80006ccc:	d8 02       	popm	pc
80006cce:	00 00       	add	r0,r0
80006cd0:	00 00       	add	r0,r0
80006cd2:	0b 5c       	ld.sh	r12,--r5
80006cd4:	80 00       	ld.sh	r0,r0[0x0]
80006cd6:	6c 24       	ld.w	r4,r6[0x8]
80006cd8:	80 00       	ld.sh	r0,r0[0x0]
80006cda:	45 38       	lddsp	r8,sp[0x14c]

80006cdc <uhc_enumeration_suspend>:
/**
 * \brief Enters a specific device in USB suspend mode
 * Suspend the USB line or a port on USB hub.
 */
static void uhc_enumeration_suspend(void)
{
80006cdc:	d4 01       	pushm	lr
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80006cde:	f0 1f 00 02 	mcall	80006ce4 <uhc_enumeration_suspend+0x8>
	}
}
80006ce2:	d8 02       	popm	pc
80006ce4:	80 00       	ld.sh	r0,r0[0x0]
80006ce6:	45 38       	lddsp	r8,sp[0x14c]

80006ce8 <uhc_stop>:
	uhc_sof_timeout = 0; // No callback registered on a SOF timeout
	uhd_enable();
}

void uhc_stop(bool b_id_stop)
{
80006ce8:	d4 01       	pushm	lr
	// Stop UHD
	uhd_disable(b_id_stop);
80006cea:	f0 1f 00 02 	mcall	80006cf0 <uhc_stop+0x8>
}
80006cee:	d8 02       	popm	pc
80006cf0:	80 00       	ld.sh	r0,r0[0x0]
80006cf2:	51 04       	stdsp	sp[0x40],r4

80006cf4 <uhc_start>:
 * \name Functions to control the USB host stack
 *
 * @{
 */
void uhc_start(void)
{
80006cf4:	d4 01       	pushm	lr
	g_uhc_device_root.address = UHC_USB_ADD_NOT_VALID;
80006cf6:	3f f9       	mov	r9,-1
80006cf8:	48 58       	lddpc	r8,80006d0c <uhc_start+0x18>
80006cfa:	f1 69 00 12 	st.b	r8[18],r9
	uhc_sof_timeout = 0; // No callback registered on a SOF timeout
80006cfe:	30 09       	mov	r9,0
80006d00:	48 48       	lddpc	r8,80006d10 <uhc_start+0x1c>
80006d02:	b0 89       	st.b	r8[0x0],r9
	uhd_enable();
80006d04:	f0 1f 00 04 	mcall	80006d14 <uhc_start+0x20>
}
80006d08:	d8 02       	popm	pc
80006d0a:	00 00       	add	r0,r0
80006d0c:	00 00       	add	r0,r0
80006d0e:	0b 40       	ld.w	r0,--r5
80006d10:	00 00       	add	r0,r0
80006d12:	0c 3c       	cp.w	r12,r6
80006d14:	80 00       	ld.sh	r0,r0[0x0]
80006d16:	52 38       	stdsp	sp[0x8c],r8

80006d18 <uhc_notify_resume>:
		}
	}
}

void uhc_notify_resume(void)
{
80006d18:	d4 01       	pushm	lr
	uhc_remotewakeup(false);
80006d1a:	30 0c       	mov	r12,0
80006d1c:	f0 1f 00 03 	mcall	80006d28 <uhc_notify_resume+0x10>
	UHC_WAKEUP_EVENT();
80006d20:	f0 1f 00 03 	mcall	80006d2c <uhc_notify_resume+0x14>
}
80006d24:	d8 02       	popm	pc
80006d26:	00 00       	add	r0,r0
80006d28:	80 00       	ld.sh	r0,r0[0x0]
80006d2a:	6c 24       	ld.w	r4,r6[0x8]
80006d2c:	80 00       	ld.sh	r0,r0[0x0]
80006d2e:	2c 98       	sub	r8,-55

80006d30 <uhc_enumeration_reset>:
 * \brief Sends the USB Reset signal on the USB line of a device
 *
 * \param callback Callback to call at the end of Reset signal
 */
static void uhc_enumeration_reset(uhd_callback_reset_t callback)
{
80006d30:	d4 01       	pushm	lr
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80006d32:	f0 1f 00 02 	mcall	80006d38 <uhc_enumeration_reset+0x8>
	}
}
80006d36:	d8 02       	popm	pc
80006d38:	80 00       	ld.sh	r0,r0[0x0]
80006d3a:	45 24       	lddsp	r4,sp[0x148]

80006d3c <uhc_enumeration_step1>:
/**
 * \brief Device enumeration step 1
 * Reset USB line.
 */
static void uhc_enumeration_step1(void)
{
80006d3c:	d4 01       	pushm	lr
	uhc_enumeration_reset(uhc_enumeration_step2);
80006d3e:	48 3c       	lddpc	r12,80006d48 <uhc_enumeration_step1+0xc>
80006d40:	f0 1f 00 03 	mcall	80006d4c <uhc_enumeration_step1+0x10>
}
80006d44:	d8 02       	popm	pc
80006d46:	00 00       	add	r0,r0
80006d48:	80 00       	ld.sh	r0,r0[0x0]
80006d4a:	6b b0       	ld.w	r0,r5[0x6c]
80006d4c:	80 00       	ld.sh	r0,r0[0x0]
80006d4e:	6d 30       	ld.w	r0,r6[0x4c]

80006d50 <uhc_notify_connection>:
/**
 * \name Callbacks used by USB Host Driver (UHD) to notify events
 * @{
 */
void uhc_notify_connection(bool b_plug)
{
80006d50:	eb cd 40 c0 	pushm	r6-r7,lr
	if (b_plug) {
80006d54:	58 0c       	cp.w	r12,0
80006d56:	c0 a1       	brne	80006d6a <uhc_notify_connection+0x1a>

#ifdef USB_HOST_HUB_SUPPORT
		uhc_power_running = 0;
#endif
	} else {
		if (g_uhc_device_root.address == UHC_USB_ADD_NOT_VALID) {
80006d58:	49 b8       	lddpc	r8,80006dc4 <uhc_notify_connection+0x74>
80006d5a:	f1 3c 00 12 	ld.ub	r12,r8[18]
80006d5e:	3f f8       	mov	r8,-1
80006d60:	f0 0c 18 00 	cp.b	r12,r8
80006d64:	c1 21       	brne	80006d88 <uhc_notify_connection+0x38>
80006d66:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
	if (b_plug) {
		uhc_enum_try = 1;
80006d6a:	30 19       	mov	r9,1
80006d6c:	49 78       	lddpc	r8,80006dc8 <uhc_notify_connection+0x78>
80006d6e:	b0 89       	st.b	r8[0x0],r9
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
80006d70:	49 5c       	lddpc	r12,80006dc4 <uhc_notify_connection+0x74>
80006d72:	30 08       	mov	r8,0
80006d74:	99 68       	st.w	r12[0x18],r8
		uhc_dev_enum->address = 0;
80006d76:	f9 68 00 12 	st.b	r12[18],r8
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
80006d7a:	30 1b       	mov	r11,1
80006d7c:	f0 1f 00 14 	mcall	80006dcc <uhc_notify_connection+0x7c>
		uhc_enumeration_step1();
80006d80:	f0 1f 00 14 	mcall	80006dd0 <uhc_notify_connection+0x80>
80006d84:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	} else {
		if (uhc_dev_enum == dev) {
			// Eventually stop enumeration timeout on-going on this device
			uhc_sof_timeout = 0;
80006d88:	30 09       	mov	r9,0
80006d8a:	49 38       	lddpc	r8,80006dd4 <uhc_notify_connection+0x84>
80006d8c:	b0 89       	st.b	r8[0x0],r9
		}
		// Abort all transfers (endpoint control and other) and free pipe(s)
		uhd_ep_free(dev->address, 0xFF);
80006d8e:	e0 6b 00 ff 	mov	r11,255
80006d92:	f0 1f 00 12 	mcall	80006dd8 <uhc_notify_connection+0x88>

		// Disable all USB interfaces (this includes HUB interface)
		for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(dev);
80006d96:	49 26       	lddpc	r6,80006ddc <uhc_notify_connection+0x8c>
80006d98:	48 b7       	lddpc	r7,80006dc4 <uhc_notify_connection+0x74>
80006d9a:	6c 28       	ld.w	r8,r6[0x8]
80006d9c:	0e 9c       	mov	r12,r7
80006d9e:	5d 18       	icall	r8
80006da0:	6c 68       	ld.w	r8,r6[0x18]
80006da2:	0e 9c       	mov	r12,r7
80006da4:	5d 18       	icall	r8
		}

		UHC_CONNECTION_EVENT(dev, false);
80006da6:	30 0b       	mov	r11,0
80006da8:	0e 9c       	mov	r12,r7
80006daa:	f0 1f 00 09 	mcall	80006dcc <uhc_notify_connection+0x7c>
		dev->address = UHC_USB_ADD_NOT_VALID;
80006dae:	3f f8       	mov	r8,-1
80006db0:	ef 68 00 12 	st.b	r7[18],r8
		// Free USB configuration descriptor buffer
		if (dev->conf_desc != NULL) {
80006db4:	6e 6c       	ld.w	r12,r7[0x18]
80006db6:	58 0c       	cp.w	r12,0
80006db8:	c0 30       	breq	80006dbe <uhc_notify_connection+0x6e>
			free(dev->conf_desc);
80006dba:	f0 1f 00 0a 	mcall	80006de0 <uhc_notify_connection+0x90>
80006dbe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006dc2:	00 00       	add	r0,r0
80006dc4:	00 00       	add	r0,r0
80006dc6:	0b 40       	ld.w	r0,--r5
80006dc8:	00 00       	add	r0,r0
80006dca:	0b 5c       	ld.sh	r12,--r5
80006dcc:	80 00       	ld.sh	r0,r0[0x0]
80006dce:	2a 80       	sub	r0,-88
80006dd0:	80 00       	ld.sh	r0,r0[0x0]
80006dd2:	6d 3c       	ld.w	r12,r6[0x4c]
80006dd4:	00 00       	add	r0,r0
80006dd6:	0c 3c       	cp.w	r12,r6
80006dd8:	80 00       	ld.sh	r0,r0[0x0]
80006dda:	4d d8       	lddpc	r8,80006f4c <uhc_enumeration_step6+0x24>
80006ddc:	80 00       	ld.sh	r0,r0[0x0]
80006dde:	d5 98       	*unknown*
80006de0:	80 00       	ld.sh	r0,r0[0x0]
80006de2:	79 24       	ld.w	r4,r12[0x48]

80006de4 <uhc_enumeration_step3>:
/**
 * \brief Device enumeration step 3
 * Reset USB line.
 */
static void uhc_enumeration_step3(void)
{
80006de4:	d4 01       	pushm	lr
	uhc_enumeration_reset(uhc_enumeration_step4);
80006de6:	48 3c       	lddpc	r12,80006df0 <uhc_enumeration_step3+0xc>
80006de8:	f0 1f 00 03 	mcall	80006df4 <uhc_enumeration_step3+0x10>
}
80006dec:	d8 02       	popm	pc
80006dee:	00 00       	add	r0,r0
80006df0:	80 00       	ld.sh	r0,r0[0x0]
80006df2:	6e 0c       	ld.w	r12,r7[0x0]
80006df4:	80 00       	ld.sh	r0,r0[0x0]
80006df6:	6d 30       	ld.w	r0,r6[0x4c]

80006df8 <uhc_enumeration_step7>:
/**
 * \brief Device enumeration step 7
 * Reset USB line.
 */
static void uhc_enumeration_step7(void)
{
80006df8:	d4 01       	pushm	lr
	uhc_enumeration_reset(uhc_enumeration_step8);
80006dfa:	48 3c       	lddpc	r12,80006e04 <uhc_enumeration_step7+0xc>
80006dfc:	f0 1f 00 03 	mcall	80006e08 <uhc_enumeration_step7+0x10>
}
80006e00:	d8 02       	popm	pc
80006e02:	00 00       	add	r0,r0
80006e04:	80 00       	ld.sh	r0,r0[0x0]
80006e06:	6b c4       	ld.w	r4,r5[0x70]
80006e08:	80 00       	ld.sh	r0,r0[0x0]
80006e0a:	6d 30       	ld.w	r0,r6[0x4c]

80006e0c <uhc_enumeration_step4>:
/**
 * \brief Device enumeration step 4
 * Lets USB line in IDLE state during 100ms.
 */
static void uhc_enumeration_step4(void)
{
80006e0c:	d4 01       	pushm	lr
	uhc_dev_enum->speed = uhd_get_speed();
80006e0e:	f0 1f 00 05 	mcall	80006e20 <uhc_enumeration_step4+0x14>
80006e12:	48 58       	lddpc	r8,80006e24 <uhc_enumeration_step4+0x18>
80006e14:	91 5c       	st.w	r8[0x14],r12
	uhc_enable_timeout_callback(100, uhc_enumeration_step5);
80006e16:	48 5b       	lddpc	r11,80006e28 <uhc_enumeration_step4+0x1c>
80006e18:	36 4c       	mov	r12,100
80006e1a:	f0 1f 00 05 	mcall	80006e2c <uhc_enumeration_step4+0x20>
}
80006e1e:	d8 02       	popm	pc
80006e20:	80 00       	ld.sh	r0,r0[0x0]
80006e22:	45 04       	lddsp	r4,sp[0x140]
80006e24:	00 00       	add	r0,r0
80006e26:	0b 40       	ld.w	r0,--r5
80006e28:	80 00       	ld.sh	r0,r0[0x0]
80006e2a:	6e b8       	ld.w	r8,r7[0x2c]
80006e2c:	80 00       	ld.sh	r0,r0[0x0]
80006e2e:	6b 9c       	ld.w	r12,r5[0x64]

80006e30 <uhc_enumeration_error>:
 * \brief Manage error during device enumeration
 *
 * \param status        Enumeration error occurred
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
80006e30:	eb cd 40 c0 	pushm	r6-r7,lr
80006e34:	18 97       	mov	r7,r12
	if (status == UHC_ENUM_DISCONNECT) {
80006e36:	58 7c       	cp.w	r12,7
80006e38:	c0 61       	brne	80006e44 <uhc_enumeration_error+0x14>
		uhc_enum_try = 0;
80006e3a:	30 09       	mov	r9,0
80006e3c:	49 88       	lddpc	r8,80006e9c <uhc_enumeration_error+0x6c>
80006e3e:	b0 89       	st.b	r8[0x0],r9
		return; // Abort enumeration process
80006e40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80006e44:	49 76       	lddpc	r6,80006ea0 <uhc_enumeration_error+0x70>
80006e46:	e0 6b 00 ff 	mov	r11,255
80006e4a:	ed 3c 00 12 	ld.ub	r12,r6[18]
80006e4e:	f0 1f 00 16 	mcall	80006ea4 <uhc_enumeration_error+0x74>

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80006e52:	6c 6c       	ld.w	r12,r6[0x18]
80006e54:	58 0c       	cp.w	r12,0
80006e56:	c0 50       	breq	80006e60 <uhc_enumeration_error+0x30>
		free(uhc_dev_enum->conf_desc);
80006e58:	f0 1f 00 14 	mcall	80006ea8 <uhc_enumeration_error+0x78>
		uhc_dev_enum->conf_desc = NULL;
80006e5c:	30 09       	mov	r9,0
80006e5e:	8d 69       	st.w	r6[0x18],r9
	}
	uhc_dev_enum->address = 0;
80006e60:	30 09       	mov	r9,0
80006e62:	49 08       	lddpc	r8,80006ea0 <uhc_enumeration_error+0x70>
80006e64:	f1 69 00 12 	st.b	r8[18],r9
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80006e68:	48 d9       	lddpc	r9,80006e9c <uhc_enumeration_error+0x6c>
80006e6a:	13 88       	ld.ub	r8,r9[0x0]
80006e6c:	f0 ca ff ff 	sub	r10,r8,-1
80006e70:	b2 8a       	st.b	r9[0x0],r10
80006e72:	30 39       	mov	r9,3
80006e74:	f2 08 18 00 	cp.b	r8,r9
80006e78:	e0 8b 00 06 	brhi	80006e84 <uhc_enumeration_error+0x54>
		// Restart enumeration at beginning
		uhc_enumeration_step1();
80006e7c:	f0 1f 00 0c 	mcall	80006eac <uhc_enumeration_error+0x7c>
		return;
80006e80:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
80006e84:	f0 1f 00 0b 	mcall	80006eb0 <uhc_enumeration_error+0x80>
	UHC_ENUM_EVENT(uhc_dev_enum, status);
80006e88:	0e 9b       	mov	r11,r7
80006e8a:	48 6c       	lddpc	r12,80006ea0 <uhc_enumeration_error+0x70>
80006e8c:	f0 1f 00 0a 	mcall	80006eb4 <uhc_enumeration_error+0x84>
	uhc_enum_try = 0;
80006e90:	30 09       	mov	r9,0
80006e92:	48 38       	lddpc	r8,80006e9c <uhc_enumeration_error+0x6c>
80006e94:	b0 89       	st.b	r8[0x0],r9
80006e96:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006e9a:	00 00       	add	r0,r0
80006e9c:	00 00       	add	r0,r0
80006e9e:	0b 5c       	ld.sh	r12,--r5
80006ea0:	00 00       	add	r0,r0
80006ea2:	0b 40       	ld.w	r0,--r5
80006ea4:	80 00       	ld.sh	r0,r0[0x0]
80006ea6:	4d d8       	lddpc	r8,80007018 <uhc_enumeration_step11>
80006ea8:	80 00       	ld.sh	r0,r0[0x0]
80006eaa:	79 24       	ld.w	r4,r12[0x48]
80006eac:	80 00       	ld.sh	r0,r0[0x0]
80006eae:	6d 3c       	ld.w	r12,r6[0x4c]
80006eb0:	80 00       	ld.sh	r0,r0[0x0]
80006eb2:	6c dc       	ld.w	r12,r6[0x34]
80006eb4:	80 00       	ld.sh	r0,r0[0x0]
80006eb6:	29 c4       	sub	r4,-100

80006eb8 <uhc_enumeration_step5>:
 * Requests the USB device descriptor.
 * This setup request can be aborted
 * because the control endpoint size is unknown.
 */
static void uhc_enumeration_step5(void)
{
80006eb8:	d4 01       	pushm	lr
80006eba:	20 2d       	sub	sp,8
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
80006ebc:	38 08       	mov	r8,-128
80006ebe:	ba 88       	st.b	sp[0x0],r8
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
80006ec0:	30 68       	mov	r8,6
80006ec2:	ba 98       	st.b	sp[0x1],r8
	req.wValue = (USB_DT_DEVICE << 8);
80006ec4:	e0 68 01 00 	mov	r8,256
80006ec8:	ba 18       	st.h	sp[0x2],r8
	req.wIndex = 0;
80006eca:	30 08       	mov	r8,0
80006ecc:	ba 28       	st.h	sp[0x4],r8
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
80006ece:	30 88       	mov	r8,8
80006ed0:	ba 38       	st.h	sp[0x6],r8
			+ sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
80006ed2:	30 0b       	mov	r11,0
80006ed4:	16 9c       	mov	r12,r11
80006ed6:	f0 1f 00 0f 	mcall	80006f10 <uhc_enumeration_step5+0x58>
	if (!uhd_ep0_alloc(0, 64)) {
80006eda:	34 0b       	mov	r11,64
80006edc:	30 0c       	mov	r12,0
80006ede:	f0 1f 00 0e 	mcall	80006f14 <uhc_enumeration_step5+0x5c>
80006ee2:	c0 51       	brne	80006eec <uhc_enumeration_step5+0x34>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
80006ee4:	30 4c       	mov	r12,4
80006ee6:	f0 1f 00 0d 	mcall	80006f18 <uhc_enumeration_step5+0x60>
		return;
80006eea:	c1 18       	rjmp	80006f0c <uhc_enumeration_step5+0x54>
	}
	if (!uhd_setup_request(0,
80006eec:	48 c8       	lddpc	r8,80006f1c <uhc_enumeration_step5+0x64>
80006eee:	1a d8       	st.w	--sp,r8
80006ef0:	30 08       	mov	r8,0
80006ef2:	31 29       	mov	r9,18
80006ef4:	48 ba       	lddpc	r10,80006f20 <uhc_enumeration_step5+0x68>
80006ef6:	fa cb ff fc 	sub	r11,sp,-4
80006efa:	10 9c       	mov	r12,r8
80006efc:	f0 1f 00 0a 	mcall	80006f24 <uhc_enumeration_step5+0x6c>
80006f00:	2f fd       	sub	sp,-4
80006f02:	58 0c       	cp.w	r12,0
80006f04:	c0 41       	brne	80006f0c <uhc_enumeration_step5+0x54>
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step6)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80006f06:	30 6c       	mov	r12,6
80006f08:	f0 1f 00 04 	mcall	80006f18 <uhc_enumeration_step5+0x60>
		return;
	}
}
80006f0c:	2f ed       	sub	sp,-8
80006f0e:	d8 02       	popm	pc
80006f10:	80 00       	ld.sh	r0,r0[0x0]
80006f12:	4d d8       	lddpc	r8,80007084 <uhc_enumeration_step11+0x6c>
80006f14:	80 00       	ld.sh	r0,r0[0x0]
80006f16:	50 1a       	stdsp	sp[0x4],r10
80006f18:	80 00       	ld.sh	r0,r0[0x0]
80006f1a:	6e 30       	ld.w	r0,r7[0xc]
80006f1c:	80 00       	ld.sh	r0,r0[0x0]
80006f1e:	6f 28       	ld.w	r8,r7[0x48]
80006f20:	00 00       	add	r0,r0
80006f22:	0b 40       	ld.w	r0,--r5
80006f24:	80 00       	ld.sh	r0,r0[0x0]
80006f26:	4d 54       	lddpc	r4,80007078 <uhc_enumeration_step11+0x60>

80006f28 <uhc_enumeration_step6>:
 */
static void uhc_enumeration_step6(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
80006f28:	d4 01       	pushm	lr
	UNUSED(add);
	if ((status != UHD_TRANS_NOERROR) || (payload_trans < 8)
80006f2a:	58 0b       	cp.w	r11,0
80006f2c:	5f 19       	srne	r9
80006f2e:	30 78       	mov	r8,7
80006f30:	f0 0a 19 00 	cp.h	r10,r8
80006f34:	5f 88       	srls	r8
80006f36:	f3 e8 10 08 	or	r8,r9,r8
80006f3a:	c0 71       	brne	80006f48 <uhc_enumeration_step6+0x20>
80006f3c:	48 a8       	lddpc	r8,80006f64 <uhc_enumeration_step6+0x3c>
80006f3e:	11 99       	ld.ub	r9,r8[0x1]
80006f40:	30 18       	mov	r8,1
80006f42:	f0 09 18 00 	cp.b	r9,r8
80006f46:	c0 90       	breq	80006f58 <uhc_enumeration_step6+0x30>
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
80006f48:	58 1b       	cp.w	r11,1
80006f4a:	f9 bc 00 07 	moveq	r12,7
80006f4e:	f9 bc 01 03 	movne	r12,3
80006f52:	f0 1f 00 06 	mcall	80006f68 <uhc_enumeration_step6+0x40>
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
80006f56:	d8 02       	popm	pc
	}
	// Wait 20ms
	uhc_enable_timeout_callback(20, uhc_enumeration_step7);
80006f58:	48 5b       	lddpc	r11,80006f6c <uhc_enumeration_step6+0x44>
80006f5a:	31 4c       	mov	r12,20
80006f5c:	f0 1f 00 05 	mcall	80006f70 <uhc_enumeration_step6+0x48>
80006f60:	d8 02       	popm	pc
80006f62:	00 00       	add	r0,r0
80006f64:	00 00       	add	r0,r0
80006f66:	0b 40       	ld.w	r0,--r5
80006f68:	80 00       	ld.sh	r0,r0[0x0]
80006f6a:	6e 30       	ld.w	r0,r7[0xc]
80006f6c:	80 00       	ld.sh	r0,r0[0x0]
80006f6e:	6d f8       	ld.w	r8,r6[0x7c]
80006f70:	80 00       	ld.sh	r0,r0[0x0]
80006f72:	6b 9c       	ld.w	r12,r5[0x64]

80006f74 <uhc_enumeration_step9>:
/**
 * \brief Device enumeration step 9
 * Send a Set address setup request.
 */
static void uhc_enumeration_step9(void)
{
80006f74:	eb cd 40 80 	pushm	r7,lr
80006f78:	20 2d       	sub	sp,8
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE
80006f7a:	30 08       	mov	r8,0
80006f7c:	ba 88       	st.b	sp[0x0],r8
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_ADDRESS;
80006f7e:	30 58       	mov	r8,5
80006f80:	ba 98       	st.b	sp[0x1],r8
		break;
	}
	req.wValue = usb_addr_free;
	uhc_dev_enum->address = usb_addr_free;
#else
	req.wValue = UHC_DEVICE_ENUM_ADD;
80006f82:	30 18       	mov	r8,1
80006f84:	ba 18       	st.h	sp[0x2],r8
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
80006f86:	49 47       	lddpc	r7,80006fd4 <uhc_enumeration_step9+0x60>
80006f88:	ef 68 00 12 	st.b	r7[18],r8
#endif
	req.wIndex = 0;
80006f8c:	30 08       	mov	r8,0
80006f8e:	ba 28       	st.h	sp[0x4],r8
	req.wLength = 0;
80006f90:	ba 38       	st.h	sp[0x6],r8

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
80006f92:	30 0b       	mov	r11,0
80006f94:	16 9c       	mov	r12,r11
80006f96:	f0 1f 00 11 	mcall	80006fd8 <uhc_enumeration_step9+0x64>
	if (!uhd_ep0_alloc(0, uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
80006f9a:	0f fb       	ld.ub	r11,r7[0x7]
80006f9c:	30 0c       	mov	r12,0
80006f9e:	f0 1f 00 10 	mcall	80006fdc <uhc_enumeration_step9+0x68>
80006fa2:	c0 51       	brne	80006fac <uhc_enumeration_step9+0x38>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
80006fa4:	30 4c       	mov	r12,4
80006fa6:	f0 1f 00 0f 	mcall	80006fe0 <uhc_enumeration_step9+0x6c>
		return;
80006faa:	c1 18       	rjmp	80006fcc <uhc_enumeration_step9+0x58>
	}

	if (!uhd_setup_request(0,
80006fac:	48 e8       	lddpc	r8,80006fe4 <uhc_enumeration_step9+0x70>
80006fae:	1a d8       	st.w	--sp,r8
80006fb0:	30 08       	mov	r8,0
80006fb2:	31 29       	mov	r9,18
80006fb4:	48 8a       	lddpc	r10,80006fd4 <uhc_enumeration_step9+0x60>
80006fb6:	fa cb ff fc 	sub	r11,sp,-4
80006fba:	10 9c       	mov	r12,r8
80006fbc:	f0 1f 00 0b 	mcall	80006fe8 <uhc_enumeration_step9+0x74>
80006fc0:	2f fd       	sub	sp,-4
80006fc2:	58 0c       	cp.w	r12,0
80006fc4:	c0 41       	brne	80006fcc <uhc_enumeration_step9+0x58>
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step10)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80006fc6:	30 6c       	mov	r12,6
80006fc8:	f0 1f 00 06 	mcall	80006fe0 <uhc_enumeration_step9+0x6c>
		return;
	}
}
80006fcc:	2f ed       	sub	sp,-8
80006fce:	e3 cd 80 80 	ldm	sp++,r7,pc
80006fd2:	00 00       	add	r0,r0
80006fd4:	00 00       	add	r0,r0
80006fd6:	0b 40       	ld.w	r0,--r5
80006fd8:	80 00       	ld.sh	r0,r0[0x0]
80006fda:	4d d8       	lddpc	r8,8000714c <uhc_enumeration_step13+0x28>
80006fdc:	80 00       	ld.sh	r0,r0[0x0]
80006fde:	50 1a       	stdsp	sp[0x4],r10
80006fe0:	80 00       	ld.sh	r0,r0[0x0]
80006fe2:	6e 30       	ld.w	r0,r7[0xc]
80006fe4:	80 00       	ld.sh	r0,r0[0x0]
80006fe6:	6f ec       	ld.w	r12,r7[0x78]
80006fe8:	80 00       	ld.sh	r0,r0[0x0]
80006fea:	4d 54       	lddpc	r4,8000713c <uhc_enumeration_step13+0x18>

80006fec <uhc_enumeration_step10>:
 */
static void uhc_enumeration_step10(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
80006fec:	d4 01       	pushm	lr
	UNUSED(add);
	UNUSED(payload_trans);
	if (status != UHD_TRANS_NOERROR) {
80006fee:	58 0b       	cp.w	r11,0
80006ff0:	c0 90       	breq	80007002 <uhc_enumeration_step10+0x16>
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT) ?
80006ff2:	58 1b       	cp.w	r11,1
80006ff4:	f9 bc 00 07 	moveq	r12,7
80006ff8:	f9 bc 01 03 	movne	r12,3
80006ffc:	f0 1f 00 04 	mcall	8000700c <uhc_enumeration_step10+0x20>
				UHC_ENUM_DISCONNECT : UHC_ENUM_FAIL);
		return;
80007000:	d8 02       	popm	pc
	}
	// Wait 20ms
	uhc_enable_timeout_callback(20, uhc_enumeration_step11);
80007002:	48 4b       	lddpc	r11,80007010 <uhc_enumeration_step10+0x24>
80007004:	31 4c       	mov	r12,20
80007006:	f0 1f 00 04 	mcall	80007014 <uhc_enumeration_step10+0x28>
8000700a:	d8 02       	popm	pc
8000700c:	80 00       	ld.sh	r0,r0[0x0]
8000700e:	6e 30       	ld.w	r0,r7[0xc]
80007010:	80 00       	ld.sh	r0,r0[0x0]
80007012:	70 18       	ld.w	r8,r8[0x4]
80007014:	80 00       	ld.sh	r0,r0[0x0]
80007016:	6b 9c       	ld.w	r12,r5[0x64]

80007018 <uhc_enumeration_step11>:
 * \brief Device enumeration step 11
 * Updates USB host pipe with the new USB address.
 * Requests a complete USB device descriptor.
 */
static void uhc_enumeration_step11(void)
{
80007018:	d4 01       	pushm	lr
8000701a:	20 2d       	sub	sp,8
	usb_setup_req_t req;

	// Free address 0 used to start enumeration
	uhd_ep_free(0, 0);
8000701c:	30 0b       	mov	r11,0
8000701e:	16 9c       	mov	r12,r11
80007020:	f0 1f 00 15 	mcall	80007074 <uhc_enumeration_step11+0x5c>

	// Alloc control endpoint with the new USB address
	if (!uhd_ep0_alloc(UHC_DEVICE_ENUM_ADD,
80007024:	49 58       	lddpc	r8,80007078 <uhc_enumeration_step11+0x60>
80007026:	11 fb       	ld.ub	r11,r8[0x7]
80007028:	30 1c       	mov	r12,1
8000702a:	f0 1f 00 15 	mcall	8000707c <uhc_enumeration_step11+0x64>
8000702e:	c0 51       	brne	80007038 <uhc_enumeration_step11+0x20>
			uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
80007030:	30 4c       	mov	r12,4
80007032:	f0 1f 00 14 	mcall	80007080 <uhc_enumeration_step11+0x68>
		return;
80007036:	c1 c8       	rjmp	8000706e <uhc_enumeration_step11+0x56>
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
80007038:	38 08       	mov	r8,-128
8000703a:	ba 88       	st.b	sp[0x0],r8
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
8000703c:	30 68       	mov	r8,6
8000703e:	ba 98       	st.b	sp[0x1],r8
	req.wValue = (USB_DT_DEVICE << 8);
80007040:	e0 68 01 00 	mov	r8,256
80007044:	ba 18       	st.h	sp[0x2],r8
	req.wIndex = 0;
80007046:	30 08       	mov	r8,0
80007048:	ba 28       	st.h	sp[0x4],r8
	req.wLength = sizeof(usb_dev_desc_t);
8000704a:	31 28       	mov	r8,18
8000704c:	ba 38       	st.h	sp[0x6],r8
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
8000704e:	48 e8       	lddpc	r8,80007084 <uhc_enumeration_step11+0x6c>
80007050:	1a d8       	st.w	--sp,r8
80007052:	30 08       	mov	r8,0
80007054:	31 29       	mov	r9,18
80007056:	48 9a       	lddpc	r10,80007078 <uhc_enumeration_step11+0x60>
80007058:	fa cb ff fc 	sub	r11,sp,-4
8000705c:	30 1c       	mov	r12,1
8000705e:	f0 1f 00 0b 	mcall	80007088 <uhc_enumeration_step11+0x70>
80007062:	2f fd       	sub	sp,-4
80007064:	58 0c       	cp.w	r12,0
80007066:	c0 41       	brne	8000706e <uhc_enumeration_step11+0x56>
			&req,
			(uint8_t *) & uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL, uhc_enumeration_step12)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80007068:	30 6c       	mov	r12,6
8000706a:	f0 1f 00 06 	mcall	80007080 <uhc_enumeration_step11+0x68>
		return;
	}
}
8000706e:	2f ed       	sub	sp,-8
80007070:	d8 02       	popm	pc
80007072:	00 00       	add	r0,r0
80007074:	80 00       	ld.sh	r0,r0[0x0]
80007076:	4d d8       	lddpc	r8,800071e8 <uhc_enumeration_step13+0xc4>
80007078:	00 00       	add	r0,r0
8000707a:	0b 40       	ld.w	r0,--r5
8000707c:	80 00       	ld.sh	r0,r0[0x0]
8000707e:	50 1a       	stdsp	sp[0x4],r10
80007080:	80 00       	ld.sh	r0,r0[0x0]
80007082:	6e 30       	ld.w	r0,r7[0xc]
80007084:	80 00       	ld.sh	r0,r0[0x0]
80007086:	70 8c       	ld.w	r12,r8[0x20]
80007088:	80 00       	ld.sh	r0,r0[0x0]
8000708a:	4d 54       	lddpc	r4,800071dc <uhc_enumeration_step13+0xb8>

8000708c <uhc_enumeration_step12>:
 */
static void uhc_enumeration_step12(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
8000708c:	d4 01       	pushm	lr
8000708e:	20 2d       	sub	sp,8
	usb_setup_req_t req;
	uint8_t conf_num;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
80007090:	58 0b       	cp.w	r11,0
80007092:	5f 19       	srne	r9
80007094:	31 28       	mov	r8,18
80007096:	f0 0a 19 00 	cp.h	r10,r8
8000709a:	5f 18       	srne	r8
8000709c:	f3 e8 10 08 	or	r8,r9,r8
800070a0:	c0 71       	brne	800070ae <uhc_enumeration_step12+0x22>
800070a2:	49 c8       	lddpc	r8,80007110 <uhc_enumeration_step12+0x84>
800070a4:	11 99       	ld.ub	r9,r8[0x1]
800070a6:	30 18       	mov	r8,1
800070a8:	f0 09 18 00 	cp.b	r9,r8
800070ac:	c0 90       	breq	800070be <uhc_enumeration_step12+0x32>
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
800070ae:	58 1b       	cp.w	r11,1
800070b0:	f9 bc 00 07 	moveq	r12,7
800070b4:	f9 bc 01 03 	movne	r12,3
800070b8:	f0 1f 00 17 	mcall	80007114 <uhc_enumeration_step12+0x88>
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
800070bc:	c2 78       	rjmp	8000710a <uhc_enumeration_step12+0x7e>
		conf_num = UHC_DEVICE_CONF(uhc_dev_enum);
	} else {
		conf_num = 1;
	}

	uhc_dev_enum->conf_desc = malloc(sizeof(usb_conf_desc_t));
800070be:	30 9c       	mov	r12,9
800070c0:	f0 1f 00 16 	mcall	80007118 <uhc_enumeration_step12+0x8c>
800070c4:	49 38       	lddpc	r8,80007110 <uhc_enumeration_step12+0x84>
800070c6:	91 6c       	st.w	r8[0x18],r12
	if (uhc_dev_enum->conf_desc == NULL) {
800070c8:	58 0c       	cp.w	r12,0
800070ca:	c0 51       	brne	800070d4 <uhc_enumeration_step12+0x48>
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800070cc:	30 6c       	mov	r12,6
800070ce:	f0 1f 00 12 	mcall	80007114 <uhc_enumeration_step12+0x88>
		return;
800070d2:	c1 c8       	rjmp	8000710a <uhc_enumeration_step12+0x7e>
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
800070d4:	38 08       	mov	r8,-128
800070d6:	ba 88       	st.b	sp[0x0],r8
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
800070d8:	30 68       	mov	r8,6
800070da:	ba 98       	st.b	sp[0x1],r8
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
800070dc:	e0 68 02 00 	mov	r8,512
800070e0:	ba 18       	st.h	sp[0x2],r8
	req.wIndex = 0;
800070e2:	30 08       	mov	r8,0
800070e4:	ba 28       	st.h	sp[0x4],r8
	req.wLength = sizeof(usb_conf_desc_t);
800070e6:	30 98       	mov	r8,9
800070e8:	ba 38       	st.h	sp[0x6],r8
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800070ea:	48 d8       	lddpc	r8,8000711c <uhc_enumeration_step12+0x90>
800070ec:	1a d8       	st.w	--sp,r8
800070ee:	30 08       	mov	r8,0
800070f0:	30 99       	mov	r9,9
800070f2:	18 9a       	mov	r10,r12
800070f4:	fa cb ff fc 	sub	r11,sp,-4
800070f8:	30 1c       	mov	r12,1
800070fa:	f0 1f 00 0a 	mcall	80007120 <uhc_enumeration_step12+0x94>
800070fe:	2f fd       	sub	sp,-4
80007100:	58 0c       	cp.w	r12,0
80007102:	c0 41       	brne	8000710a <uhc_enumeration_step12+0x7e>
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			sizeof(usb_conf_desc_t),
			NULL, uhc_enumeration_step13)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80007104:	30 6c       	mov	r12,6
80007106:	f0 1f 00 04 	mcall	80007114 <uhc_enumeration_step12+0x88>
		return;
	}
}
8000710a:	2f ed       	sub	sp,-8
8000710c:	d8 02       	popm	pc
8000710e:	00 00       	add	r0,r0
80007110:	00 00       	add	r0,r0
80007112:	0b 40       	ld.w	r0,--r5
80007114:	80 00       	ld.sh	r0,r0[0x0]
80007116:	6e 30       	ld.w	r0,r7[0xc]
80007118:	80 00       	ld.sh	r0,r0[0x0]
8000711a:	79 34       	ld.w	r4,r12[0x4c]
8000711c:	80 00       	ld.sh	r0,r0[0x0]
8000711e:	71 24       	ld.w	r4,r8[0x48]
80007120:	80 00       	ld.sh	r0,r0[0x0]
80007122:	4d 54       	lddpc	r4,80007274 <uhc_enumeration_step14+0x6c>

80007124 <uhc_enumeration_step13>:
 */
static void uhc_enumeration_step13(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
80007124:	eb cd 40 e0 	pushm	r5-r7,lr
80007128:	20 2d       	sub	sp,8
	uint16_t conf_size;
	uint16_t bus_power = 0;
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
8000712a:	58 0b       	cp.w	r11,0
8000712c:	5f 19       	srne	r9
8000712e:	30 98       	mov	r8,9
80007130:	f0 0a 19 00 	cp.h	r10,r8
80007134:	5f 18       	srne	r8
80007136:	f3 e8 10 08 	or	r8,r9,r8
8000713a:	c0 81       	brne	8000714a <uhc_enumeration_step13+0x26>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
8000713c:	4a b8       	lddpc	r8,800071e8 <uhc_enumeration_step13+0xc4>
8000713e:	70 68       	ld.w	r8,r8[0x18]
	uint16_t conf_size;
	uint16_t bus_power = 0;
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
80007140:	11 9a       	ld.ub	r10,r8[0x1]
80007142:	30 29       	mov	r9,2
80007144:	f2 0a 18 00 	cp.b	r10,r9
80007148:	c0 90       	breq	8000715a <uhc_enumeration_step13+0x36>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
8000714a:	58 1b       	cp.w	r11,1
8000714c:	f9 bc 00 07 	moveq	r12,7
80007150:	f9 bc 01 03 	movne	r12,3
80007154:	f0 1f 00 26 	mcall	800071ec <uhc_enumeration_step13+0xc8>
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
80007158:	c4 58       	rjmp	800071e2 <uhc_enumeration_step13+0xbe>
		}
		// Go to USB HUB parent
		dev = dev->hub;
	}
#else
	if (!(uhc_dev_enum->conf_desc->bmAttributes
8000715a:	11 f9       	ld.ub	r9,r8[0x7]
8000715c:	e2 19 00 40 	andl	r9,0x40,COH
80007160:	c1 11       	brne	80007182 <uhc_enumeration_step13+0x5e>
			&USB_CONFIG_ATTR_SELF_POWERED)) {
		bus_power = uhc_dev_enum->conf_desc->bMaxPower * 2;
80007162:	f1 3a 00 08 	ld.ub	r10,r8[8]
80007166:	a1 7a       	lsl	r10,0x1
80007168:	e0 69 01 f4 	mov	r9,500
8000716c:	f2 0a 19 00 	cp.h	r10,r9
80007170:	e0 88 00 09 	brls	80007182 <uhc_enumeration_step13+0x5e>
	}
#endif
	if ((bus_power + uhc_power_running) > USB_HOST_POWER_MAX) {
		// USB interfaces consumption too high
		UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_OVERCURRENT);
80007174:	30 2b       	mov	r11,2
80007176:	49 dc       	lddpc	r12,800071e8 <uhc_enumeration_step13+0xc4>
80007178:	f0 1f 00 1e 	mcall	800071f0 <uhc_enumeration_step13+0xcc>

		// Abort enumeration, set line in suspend mode
		uhc_enumeration_suspend();
8000717c:	f0 1f 00 1e 	mcall	800071f4 <uhc_enumeration_step13+0xd0>
		return;
80007180:	c3 18       	rjmp	800071e2 <uhc_enumeration_step13+0xbe>
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
80007182:	11 a7       	ld.ub	r7,r8[0x2]
80007184:	11 b8       	ld.ub	r8,r8[0x3]
80007186:	f1 e7 10 87 	or	r7,r8,r7<<0x8
8000718a:	5c c7       	swap.bh	r7
8000718c:	5c 87       	casts.h	r7
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
8000718e:	49 76       	lddpc	r6,800071e8 <uhc_enumeration_step13+0xc4>
80007190:	6c 6c       	ld.w	r12,r6[0x18]
80007192:	19 d5       	ld.ub	r5,r12[0x5]
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
80007194:	f0 1f 00 19 	mcall	800071f8 <uhc_enumeration_step13+0xd4>
	uhc_dev_enum->conf_desc = malloc(conf_size);
80007198:	0e 9c       	mov	r12,r7
8000719a:	5c 7c       	castu.h	r12
8000719c:	f0 1f 00 18 	mcall	800071fc <uhc_enumeration_step13+0xd8>
800071a0:	8d 6c       	st.w	r6[0x18],r12
	if (uhc_dev_enum->conf_desc == NULL) {
800071a2:	c0 51       	brne	800071ac <uhc_enumeration_step13+0x88>
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800071a4:	30 6c       	mov	r12,6
800071a6:	f0 1f 00 12 	mcall	800071ec <uhc_enumeration_step13+0xc8>
		return;
800071aa:	c1 c8       	rjmp	800071e2 <uhc_enumeration_step13+0xbe>
	}
	// Send USB device descriptor request
	req.bmRequestType =
800071ac:	38 08       	mov	r8,-128
800071ae:	ba 88       	st.b	sp[0x0],r8
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
800071b0:	30 68       	mov	r8,6
800071b2:	ba 98       	st.b	sp[0x1],r8
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
800071b4:	20 15       	sub	r5,1
800071b6:	a9 b5       	sbr	r5,0x9
800071b8:	ba 15       	st.h	sp[0x2],r5
	req.wIndex = 0;
800071ba:	30 08       	mov	r8,0
800071bc:	ba 28       	st.h	sp[0x4],r8
	req.wLength = conf_size;
800071be:	ba 37       	st.h	sp[0x6],r7
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800071c0:	49 08       	lddpc	r8,80007200 <uhc_enumeration_step13+0xdc>
800071c2:	1a d8       	st.w	--sp,r8
800071c4:	30 08       	mov	r8,0
800071c6:	0e 99       	mov	r9,r7
800071c8:	5c 79       	castu.h	r9
800071ca:	18 9a       	mov	r10,r12
800071cc:	fa cb ff fc 	sub	r11,sp,-4
800071d0:	30 1c       	mov	r12,1
800071d2:	f0 1f 00 0d 	mcall	80007204 <uhc_enumeration_step13+0xe0>
800071d6:	2f fd       	sub	sp,-4
800071d8:	58 0c       	cp.w	r12,0
800071da:	c0 41       	brne	800071e2 <uhc_enumeration_step13+0xbe>
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			conf_size,
			NULL, uhc_enumeration_step14)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800071dc:	30 6c       	mov	r12,6
800071de:	f0 1f 00 04 	mcall	800071ec <uhc_enumeration_step13+0xc8>
		return;
	}
}
800071e2:	2f ed       	sub	sp,-8
800071e4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800071e8:	00 00       	add	r0,r0
800071ea:	0b 40       	ld.w	r0,--r5
800071ec:	80 00       	ld.sh	r0,r0[0x0]
800071ee:	6e 30       	ld.w	r0,r7[0xc]
800071f0:	80 00       	ld.sh	r0,r0[0x0]
800071f2:	29 c4       	sub	r4,-100
800071f4:	80 00       	ld.sh	r0,r0[0x0]
800071f6:	6c dc       	ld.w	r12,r6[0x34]
800071f8:	80 00       	ld.sh	r0,r0[0x0]
800071fa:	79 24       	ld.w	r4,r12[0x48]
800071fc:	80 00       	ld.sh	r0,r0[0x0]
800071fe:	79 34       	ld.w	r4,r12[0x4c]
80007200:	80 00       	ld.sh	r0,r0[0x0]
80007202:	72 08       	ld.w	r8,r9[0x0]
80007204:	80 00       	ld.sh	r0,r0[0x0]
80007206:	4d 54       	lddpc	r4,80007358 <uhc_enumeration_step15+0x58>

80007208 <uhc_enumeration_step14>:
 */
static void uhc_enumeration_step14(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
80007208:	eb cd 40 80 	pushm	r7,lr
8000720c:	20 2d       	sub	sp,8
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
8000720e:	58 0b       	cp.w	r11,0
80007210:	5f 19       	srne	r9
80007212:	30 88       	mov	r8,8
80007214:	f0 0a 19 00 	cp.h	r10,r8
80007218:	5f 88       	srls	r8
8000721a:	f3 e8 10 08 	or	r8,r9,r8
8000721e:	c1 01       	brne	8000723e <uhc_enumeration_step14+0x36>
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
80007220:	4b 08       	lddpc	r8,800072e0 <uhc_enumeration_step14+0xd8>
80007222:	70 68       	ld.w	r8,r8[0x18]
{
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
80007224:	11 9c       	ld.ub	r12,r8[0x1]
80007226:	30 29       	mov	r9,2
80007228:	f2 0c 18 00 	cp.b	r12,r9
8000722c:	c0 91       	brne	8000723e <uhc_enumeration_step14+0x36>
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
8000722e:	11 a9       	ld.ub	r9,r8[0x2]
80007230:	11 b8       	ld.ub	r8,r8[0x3]
80007232:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80007236:	5c c8       	swap.bh	r8
{
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
80007238:	f4 08 19 00 	cp.h	r8,r10
8000723c:	c0 90       	breq	8000724e <uhc_enumeration_step14+0x46>
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
8000723e:	58 1b       	cp.w	r11,1
80007240:	f9 bc 00 07 	moveq	r12,7
80007244:	f9 bc 01 03 	movne	r12,3
80007248:	f0 1f 00 27 	mcall	800072e4 <uhc_enumeration_step14+0xdc>
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
8000724c:	c4 68       	rjmp	800072d8 <uhc_enumeration_step14+0xd0>
	}
	// Check if unless one USB interface is supported by UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		switch (uhc_uhis[i].install(uhc_dev_enum)) {
8000724e:	4a 78       	lddpc	r8,800072e8 <uhc_enumeration_step14+0xe0>
80007250:	70 08       	ld.w	r8,r8[0x0]
80007252:	4a 4c       	lddpc	r12,800072e0 <uhc_enumeration_step14+0xd8>
80007254:	5d 18       	icall	r8
80007256:	c0 40       	breq	8000725e <uhc_enumeration_step14+0x56>
80007258:	58 1c       	cp.w	r12,1
8000725a:	c0 f1       	brne	80007278 <uhc_enumeration_step14+0x70>
8000725c:	c0 38       	rjmp	80007262 <uhc_enumeration_step14+0x5a>
8000725e:	30 17       	mov	r7,1
80007260:	c0 28       	rjmp	80007264 <uhc_enumeration_step14+0x5c>
80007262:	30 07       	mov	r7,0
80007264:	4a 18       	lddpc	r8,800072e8 <uhc_enumeration_step14+0xe0>
80007266:	70 48       	ld.w	r8,r8[0x10]
80007268:	49 ec       	lddpc	r12,800072e0 <uhc_enumeration_step14+0xd8>
8000726a:	5d 18       	icall	r8
8000726c:	c0 40       	breq	80007274 <uhc_enumeration_step14+0x6c>
8000726e:	58 1c       	cp.w	r12,1
80007270:	c0 41       	brne	80007278 <uhc_enumeration_step14+0x70>
80007272:	c0 f8       	rjmp	80007290 <uhc_enumeration_step14+0x88>
80007274:	30 17       	mov	r7,1
80007276:	c0 d8       	rjmp	80007290 <uhc_enumeration_step14+0x88>
			break;

		default:
			// USB host hardware limitation
			// Free all endpoints
			uhd_ep_free(UHC_DEVICE_ENUM_ADD,0xFF);
80007278:	e0 6b 00 ff 	mov	r11,255
8000727c:	30 1c       	mov	r12,1
8000727e:	f0 1f 00 1c 	mcall	800072ec <uhc_enumeration_step14+0xe4>
			UHC_ENUM_EVENT(uhc_dev_enum,UHC_ENUM_HARDWARE_LIMIT);
80007282:	30 4b       	mov	r11,4
80007284:	49 7c       	lddpc	r12,800072e0 <uhc_enumeration_step14+0xd8>
80007286:	f0 1f 00 1b 	mcall	800072f0 <uhc_enumeration_step14+0xe8>

			// Abort enumeration, set line in suspend mode
			uhc_enumeration_suspend();
8000728a:	f0 1f 00 1b 	mcall	800072f4 <uhc_enumeration_step14+0xec>
			return;
8000728e:	c2 58       	rjmp	800072d8 <uhc_enumeration_step14+0xd0>
		}
	}
	if (!b_conf_supported) {
80007290:	58 07       	cp.w	r7,0
80007292:	c0 81       	brne	800072a2 <uhc_enumeration_step14+0x9a>
		// No USB interface supported
		UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_UNSUPPORTED);
80007294:	30 1b       	mov	r11,1
80007296:	49 3c       	lddpc	r12,800072e0 <uhc_enumeration_step14+0xd8>
80007298:	f0 1f 00 16 	mcall	800072f0 <uhc_enumeration_step14+0xe8>

		// Abort enumeration, set line in suspend mode
		uhc_enumeration_suspend();
8000729c:	f0 1f 00 16 	mcall	800072f4 <uhc_enumeration_step14+0xec>
		return;
800072a0:	c1 c8       	rjmp	800072d8 <uhc_enumeration_step14+0xd0>
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
800072a2:	30 08       	mov	r8,0
800072a4:	ba 88       	st.b	sp[0x0],r8
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
800072a6:	30 98       	mov	r8,9
800072a8:	ba 98       	st.b	sp[0x1],r8
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
800072aa:	48 e8       	lddpc	r8,800072e0 <uhc_enumeration_step14+0xd8>
800072ac:	70 68       	ld.w	r8,r8[0x18]
800072ae:	11 d8       	ld.ub	r8,r8[0x5]
800072b0:	ba 18       	st.h	sp[0x2],r8
	req.wIndex = 0;
800072b2:	30 08       	mov	r8,0
800072b4:	ba 28       	st.h	sp[0x4],r8
	req.wLength = 0;
800072b6:	ba 38       	st.h	sp[0x6],r8
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800072b8:	49 08       	lddpc	r8,800072f8 <uhc_enumeration_step14+0xf0>
800072ba:	1a d8       	st.w	--sp,r8
800072bc:	30 08       	mov	r8,0
800072be:	10 99       	mov	r9,r8
800072c0:	10 9a       	mov	r10,r8
800072c2:	fa cb ff fc 	sub	r11,sp,-4
800072c6:	30 1c       	mov	r12,1
800072c8:	f0 1f 00 0d 	mcall	800072fc <uhc_enumeration_step14+0xf4>
800072cc:	2f fd       	sub	sp,-4
800072ce:	58 0c       	cp.w	r12,0
800072d0:	c0 41       	brne	800072d8 <uhc_enumeration_step14+0xd0>
			&req,
			NULL,
			0,
			NULL, uhc_enumeration_step15)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800072d2:	30 6c       	mov	r12,6
800072d4:	f0 1f 00 04 	mcall	800072e4 <uhc_enumeration_step14+0xdc>
		return;
	}
}
800072d8:	2f ed       	sub	sp,-8
800072da:	e3 cd 80 80 	ldm	sp++,r7,pc
800072de:	00 00       	add	r0,r0
800072e0:	00 00       	add	r0,r0
800072e2:	0b 40       	ld.w	r0,--r5
800072e4:	80 00       	ld.sh	r0,r0[0x0]
800072e6:	6e 30       	ld.w	r0,r7[0xc]
800072e8:	80 00       	ld.sh	r0,r0[0x0]
800072ea:	d5 98       	*unknown*
800072ec:	80 00       	ld.sh	r0,r0[0x0]
800072ee:	4d d8       	lddpc	r8,80007460 <initSPIbus+0x2c>
800072f0:	80 00       	ld.sh	r0,r0[0x0]
800072f2:	29 c4       	sub	r4,-100
800072f4:	80 00       	ld.sh	r0,r0[0x0]
800072f6:	6c dc       	ld.w	r12,r6[0x34]
800072f8:	80 00       	ld.sh	r0,r0[0x0]
800072fa:	73 00       	ld.w	r0,r9[0x40]
800072fc:	80 00       	ld.sh	r0,r0[0x0]
800072fe:	4d 54       	lddpc	r4,80007450 <initSPIbus+0x1c>

80007300 <uhc_enumeration_step15>:
 */
static void uhc_enumeration_step15(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
80007300:	eb cd 40 e0 	pushm	r5-r7,lr
80007304:	16 97       	mov	r7,r11
	UNUSED(add);
	if ((status!=UHD_TRANS_NOERROR) || (payload_trans!=0)) {
80007306:	58 0b       	cp.w	r11,0
80007308:	5f 1b       	srne	r11
8000730a:	30 08       	mov	r8,0
8000730c:	f0 0a 19 00 	cp.h	r10,r8
80007310:	5f 19       	srne	r9
80007312:	f7 e9 10 09 	or	r9,r11,r9
80007316:	f0 09 18 00 	cp.b	r9,r8
8000731a:	c1 20       	breq	8000733e <uhc_enumeration_step15+0x3e>
		for(uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(uhc_dev_enum);
8000731c:	49 16       	lddpc	r6,80007360 <uhc_enumeration_step15+0x60>
8000731e:	49 25       	lddpc	r5,80007364 <uhc_enumeration_step15+0x64>
80007320:	6c 28       	ld.w	r8,r6[0x8]
80007322:	0a 9c       	mov	r12,r5
80007324:	5d 18       	icall	r8
80007326:	6c 68       	ld.w	r8,r6[0x18]
80007328:	0a 9c       	mov	r12,r5
8000732a:	5d 18       	icall	r8
		}
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
8000732c:	58 17       	cp.w	r7,1
8000732e:	f9 bc 00 07 	moveq	r12,7
80007332:	f9 bc 01 03 	movne	r12,3
80007336:	f0 1f 00 0d 	mcall	80007368 <uhc_enumeration_step15+0x68>
				UHC_ENUM_DISCONNECT : UHC_ENUM_FAIL);
		return;
8000733a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	}

	// Enable all UHIs supported
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		uhc_uhis[i].enable(uhc_dev_enum);
8000733e:	48 96       	lddpc	r6,80007360 <uhc_enumeration_step15+0x60>
80007340:	48 97       	lddpc	r7,80007364 <uhc_enumeration_step15+0x64>
80007342:	6c 18       	ld.w	r8,r6[0x4]
80007344:	0e 9c       	mov	r12,r7
80007346:	5d 18       	icall	r8
80007348:	6c 58       	ld.w	r8,r6[0x14]
8000734a:	0e 9c       	mov	r12,r7
8000734c:	5d 18       	icall	r8
		return;
	}
	uhc_dev_enum->lpm_desc = NULL;
#endif

	uhc_enum_try = 0;
8000734e:	30 09       	mov	r9,0
80007350:	48 78       	lddpc	r8,8000736c <uhc_enumeration_step15+0x6c>
80007352:	b0 89       	st.b	r8[0x0],r9

	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
80007354:	30 0b       	mov	r11,0
80007356:	0e 9c       	mov	r12,r7
80007358:	f0 1f 00 06 	mcall	80007370 <uhc_enumeration_step15+0x70>
8000735c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007360:	80 00       	ld.sh	r0,r0[0x0]
80007362:	d5 98       	*unknown*
80007364:	00 00       	add	r0,r0
80007366:	0b 40       	ld.w	r0,--r5
80007368:	80 00       	ld.sh	r0,r0[0x0]
8000736a:	6e 30       	ld.w	r0,r7[0xc]
8000736c:	00 00       	add	r0,r0
8000736e:	0b 5c       	ld.sh	r12,--r5
80007370:	80 00       	ld.sh	r0,r0[0x0]
80007372:	29 c4       	sub	r4,-100

80007374 <dacwait2>:
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007374:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80007378:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000737c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007380:	14 38       	cp.w	r8,r10
80007382:	e0 88 00 08 	brls	80007392 <dacwait2+0x1e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007386:	12 38       	cp.w	r8,r9
80007388:	fe 98 ff fa 	brls	8000737c <dacwait2+0x8>
8000738c:	12 3a       	cp.w	r10,r9
8000738e:	5e 3c       	retlo	r12
80007390:	cf 6b       	rjmp	8000737c <dacwait2+0x8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007392:	12 38       	cp.w	r8,r9
80007394:	5e bc       	rethi	r12
80007396:	12 3a       	cp.w	r10,r9
80007398:	cf 22       	brcc	8000737c <dacwait2+0x8>
8000739a:	5e fc       	retal	r12

8000739c <dacwait1>:
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000739c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800073a0:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800073a4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800073a8:	14 38       	cp.w	r8,r10
800073aa:	e0 88 00 08 	brls	800073ba <dacwait1+0x1e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800073ae:	12 38       	cp.w	r8,r9
800073b0:	fe 98 ff fa 	brls	800073a4 <dacwait1+0x8>
800073b4:	12 3a       	cp.w	r10,r9
800073b6:	5e 3c       	retlo	r12
800073b8:	cf 6b       	rjmp	800073a4 <dacwait1+0x8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800073ba:	12 38       	cp.w	r8,r9
800073bc:	5e bc       	rethi	r12
800073be:	12 3a       	cp.w	r10,r9
800073c0:	cf 22       	brcc	800073a4 <dacwait1+0x8>
800073c2:	5e fc       	retal	r12

800073c4 <setSPI>:
{
	cpu_delay_us(12,64000000);//5
}

void setSPI(spi_options_t spiOptions)
{
800073c4:	d4 01       	pushm	lr
	SPIbusy = 1;
800073c6:	30 19       	mov	r9,1
800073c8:	49 48       	lddpc	r8,80007418 <setSPI+0x54>
800073ca:	b0 89       	st.b	r8[0x0],r9
	spi_disable(SPARE_SPI);
800073cc:	fe 7c 24 00 	mov	r12,-56320
800073d0:	f0 1f 00 13 	mcall	8000741c <setSPI+0x58>
	spi_initMaster(SPARE_SPI, &spiOptions);
800073d4:	fa cb ff fc 	sub	r11,sp,-4
800073d8:	fe 7c 24 00 	mov	r12,-56320
800073dc:	f0 1f 00 11 	mcall	80007420 <setSPI+0x5c>
	spi_selectionMode(SPARE_SPI, 0, 0, 0);
800073e0:	30 09       	mov	r9,0
800073e2:	12 9a       	mov	r10,r9
800073e4:	12 9b       	mov	r11,r9
800073e6:	fe 7c 24 00 	mov	r12,-56320
800073ea:	f0 1f 00 0f 	mcall	80007424 <setSPI+0x60>
	spi_selectChip(SPARE_SPI, 0);
800073ee:	30 0b       	mov	r11,0
800073f0:	fe 7c 24 00 	mov	r12,-56320
800073f4:	f0 1f 00 0d 	mcall	80007428 <setSPI+0x64>
	spi_setupChipReg(SPARE_SPI, &spiOptions, TARGET_PBACLK_FREQ_HZ);
800073f8:	e0 6a 48 00 	mov	r10,18432
800073fc:	ea 1a 01 e8 	orh	r10,0x1e8
80007400:	fa cb ff fc 	sub	r11,sp,-4
80007404:	fe 7c 24 00 	mov	r12,-56320
80007408:	f0 1f 00 09 	mcall	8000742c <setSPI+0x68>
	spi_enable(SPARE_SPI);
8000740c:	fe 7c 24 00 	mov	r12,-56320
80007410:	f0 1f 00 08 	mcall	80007430 <setSPI+0x6c>
}
80007414:	d8 02       	popm	pc
80007416:	00 00       	add	r0,r0
80007418:	00 00       	add	r0,r0
8000741a:	0b 64       	ld.uh	r4,--r5
8000741c:	80 00       	ld.sh	r0,r0[0x0]
8000741e:	27 3a       	sub	r10,115
80007420:	80 00       	ld.sh	r0,r0[0x0]
80007422:	25 a6       	sub	r6,90
80007424:	80 00       	ld.sh	r0,r0[0x0]
80007426:	25 de       	sub	lr,93
80007428:	80 00       	ld.sh	r0,r0[0x0]
8000742a:	26 0a       	sub	r10,96
8000742c:	80 00       	ld.sh	r0,r0[0x0]
8000742e:	26 7c       	sub	r12,103
80007430:	80 00       	ld.sh	r0,r0[0x0]
80007432:	27 34       	sub	r4,115

80007434 <initSPIbus>:
	gpio_set_gpio_pin(DAC1_CS);
	SPIbusy = 0;
}

void initSPIbus(void)
{
80007434:	d4 01       	pushm	lr
	SPIbusy = 1;
80007436:	30 19       	mov	r9,1
80007438:	49 c8       	lddpc	r8,800074a8 <initSPIbus+0x74>
8000743a:	b0 89       	st.b	r8[0x0],r9
	//prepare the pins the control the DAC and set them to default positions
	gpio_set_gpio_pin(DAC1_CS);
8000743c:	34 6c       	mov	r12,70
8000743e:	f0 1f 00 1c 	mcall	800074ac <initSPIbus+0x78>
	gpio_set_gpio_pin(DAC2_CS);
80007442:	36 9c       	mov	r12,105
80007444:	f0 1f 00 1a 	mcall	800074ac <initSPIbus+0x78>
	gpio_set_gpio_pin(DAC3_CS);
80007448:	36 8c       	mov	r12,104
8000744a:	f0 1f 00 19 	mcall	800074ac <initSPIbus+0x78>
	//gpio_set_gpio_pin(DAC4_CS);
	gpio_clr_gpio_pin(REF1);
8000744e:	36 6c       	mov	r12,102
80007450:	f0 1f 00 18 	mcall	800074b0 <initSPIbus+0x7c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007454:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80007458:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000745c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007460:	14 38       	cp.w	r8,r10
80007462:	e0 88 00 08 	brls	80007472 <initSPIbus+0x3e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007466:	12 38       	cp.w	r8,r9
80007468:	fe 98 ff fa 	brls	8000745c <initSPIbus+0x28>
8000746c:	12 3a       	cp.w	r10,r9
8000746e:	c0 73       	brcs	8000747c <initSPIbus+0x48>
80007470:	cf 6b       	rjmp	8000745c <initSPIbus+0x28>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007472:	12 38       	cp.w	r8,r9
80007474:	e0 8b 00 04 	brhi	8000747c <initSPIbus+0x48>
80007478:	12 3a       	cp.w	r10,r9
8000747a:	cf 12       	brcc	8000745c <initSPIbus+0x28>

	//allow pins to settle
	delay_ms(1);

	// Initialize as master
	setSPI(spiOptions12DAC);
8000747c:	48 e8       	lddpc	r8,800074b4 <initSPIbus+0x80>
8000747e:	20 4d       	sub	sp,16
80007480:	f0 ea 00 00 	ld.d	r10,r8[0]
80007484:	fa eb 00 00 	st.d	sp[0],r10
80007488:	f0 e8 00 08 	ld.d	r8,r8[8]
8000748c:	fa e9 00 08 	st.d	sp[8],r8
80007490:	f0 1f 00 0a 	mcall	800074b8 <initSPIbus+0x84>
		{DIP204_SPI_SCK_PIN,  DIP204_SPI_SCK_FUNCTION },  // SPI Clock.
		{DIP204_SPI_MISO_PIN, DIP204_SPI_MISO_FUNCTION},  // MISO.
		{DIP204_SPI_MOSI_PIN, DIP204_SPI_MOSI_FUNCTION},  // MOSI.
		{DIP204_SPI_NPCS_PIN, DIP204_SPI_NPCS_FUNCTION}   // Chip Select NPCS.
	};
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
80007494:	30 4b       	mov	r11,4
80007496:	48 ac       	lddpc	r12,800074bc <initSPIbus+0x88>
80007498:	f0 1f 00 0a 	mcall	800074c0 <initSPIbus+0x8c>
		{SPARE_SPI_SCK_PIN,  SPARE_SPI_SCK_FUNCTION },  // SPI Clock.
		{SPARE_SPI_MISO_PIN, SPARE_SPI_MISO_FUNCTION},  // MISO.
		{SPARE_SPI_MOSI_PIN, SPARE_SPI_MOSI_FUNCTION},  // MOSI.
		{SPARE_SPI_NPCS_PIN, SPARE_SPI_NPCS_FUNCTION}   // Chip Select NPCS.
	};
	gpio_enable_module(SPARE_SPI_GPIO_MAP,
8000749c:	30 4b       	mov	r11,4
8000749e:	48 ac       	lddpc	r12,800074c4 <initSPIbus+0x90>
800074a0:	f0 1f 00 08 	mcall	800074c0 <initSPIbus+0x8c>
800074a4:	2f cd       	sub	sp,-16
	sizeof(SPARE_SPI_GPIO_MAP) / sizeof(SPARE_SPI_GPIO_MAP[0]));
}
800074a6:	d8 02       	popm	pc
800074a8:	00 00       	add	r0,r0
800074aa:	0b 64       	ld.uh	r4,--r5
800074ac:	80 00       	ld.sh	r0,r0[0x0]
800074ae:	32 78       	mov	r8,39
800074b0:	80 00       	ld.sh	r0,r0[0x0]
800074b2:	32 94       	mov	r4,41
800074b4:	00 00       	add	r0,r0
800074b6:	03 9c       	ld.ub	r12,r1[0x1]
800074b8:	80 00       	ld.sh	r0,r0[0x0]
800074ba:	73 c4       	ld.w	r4,r9[0x70]
800074bc:	80 00       	ld.sh	r0,r0[0x0]
800074be:	d5 d8       	*unknown*
800074c0:	80 00       	ld.sh	r0,r0[0x0]
800074c2:	31 64       	mov	r4,22
800074c4:	80 00       	ld.sh	r0,r0[0x0]
800074c6:	d5 b8       	*unknown*

800074c8 <DAC16Send>:
	}
	SPIbusy = 0;
}

void DAC16Send(unsigned char DAC16voice, unsigned short DAC16val)
{
800074c8:	eb cd 40 c0 	pushm	r6-r7,lr
800074cc:	18 96       	mov	r6,r12
800074ce:	16 97       	mov	r7,r11
	unsigned char daccontrol = 0;

	SPIbusy = 1;
800074d0:	30 19       	mov	r9,1
800074d2:	4a f8       	lddpc	r8,8000758c <DAC16Send+0xc4>
800074d4:	b0 89       	st.b	r8[0x0],r9
	//set up SPI to be 16 bit for the DAC
	setSPI(spiOptions16DAC);
800074d6:	4a f8       	lddpc	r8,80007590 <DAC16Send+0xc8>
800074d8:	20 4d       	sub	sp,16
800074da:	f0 ea 00 00 	ld.d	r10,r8[0]
800074de:	fa eb 00 00 	st.d	sp[0],r10
800074e2:	f0 e8 00 08 	ld.d	r8,r8[8]
800074e6:	fa e9 00 08 	st.d	sp[8],r8
800074ea:	f0 1f 00 2b 	mcall	80007594 <DAC16Send+0xcc>

	daccontrol = (16 | (DAC16voice << 1));
	DAC1outhigh = ((daccontrol << 8) + (DAC16val >> 8));
800074ee:	a9 76       	lsl	r6,0x9
800074f0:	ad a6       	sbr	r6,0xc
800074f2:	5c 77       	castu.h	r7
800074f4:	ee 08 16 08 	lsr	r8,r7,0x8
800074f8:	10 06       	add	r6,r8
800074fa:	4a 88       	lddpc	r8,80007598 <DAC16Send+0xd0>
800074fc:	b0 06       	st.h	r8[0x0],r6
	DAC1outlow = ((DAC16val & 255) << 8);
800074fe:	a9 67       	lsl	r7,0x8
80007500:	4a 78       	lddpc	r8,8000759c <DAC16Send+0xd4>
80007502:	b0 07       	st.h	r8[0x0],r7
	gpio_clr_gpio_pin(DAC1_CS);
80007504:	34 6c       	mov	r12,70
80007506:	f0 1f 00 27 	mcall	800075a0 <DAC16Send+0xd8>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000750a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000750e:	f0 ca ff 80 	sub	r10,r8,-128
80007512:	2f cd       	sub	sp,-16
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007514:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007518:	14 38       	cp.w	r8,r10
8000751a:	e0 88 00 08 	brls	8000752a <DAC16Send+0x62>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000751e:	12 38       	cp.w	r8,r9
80007520:	fe 98 ff fa 	brls	80007514 <DAC16Send+0x4c>
80007524:	12 3a       	cp.w	r10,r9
80007526:	c1 93       	brcs	80007558 <DAC16Send+0x90>
80007528:	cf 6b       	rjmp	80007514 <DAC16Send+0x4c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000752a:	12 38       	cp.w	r8,r9
8000752c:	e0 8b 00 16 	brhi	80007558 <DAC16Send+0x90>
80007530:	12 3a       	cp.w	r10,r9
80007532:	c1 33       	brcs	80007558 <DAC16Send+0x90>
80007534:	cf 0b       	rjmp	80007514 <DAC16Send+0x4c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80007536:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000753a:	14 38       	cp.w	r8,r10
8000753c:	e0 88 00 08 	brls	8000754c <DAC16Send+0x84>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007540:	12 38       	cp.w	r8,r9
80007542:	fe 98 ff fa 	brls	80007536 <DAC16Send+0x6e>
80007546:	12 3a       	cp.w	r10,r9
80007548:	c1 93       	brcs	8000757a <DAC16Send+0xb2>
8000754a:	cf 6b       	rjmp	80007536 <DAC16Send+0x6e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000754c:	12 38       	cp.w	r8,r9
8000754e:	e0 8b 00 16 	brhi	8000757a <DAC16Send+0xb2>
80007552:	12 3a       	cp.w	r10,r9
80007554:	c1 33       	brcs	8000757a <DAC16Send+0xb2>
80007556:	cf 0b       	rjmp	80007536 <DAC16Send+0x6e>
	cpu_delay_us(2,64000000);
	spi_write(SPARE_SPI,DAC1outhigh);
80007558:	49 08       	lddpc	r8,80007598 <DAC16Send+0xd0>
8000755a:	90 8b       	ld.uh	r11,r8[0x0]
8000755c:	fe 7c 24 00 	mov	r12,-56320
80007560:	f0 1f 00 11 	mcall	800075a4 <DAC16Send+0xdc>
	spi_write(SPARE_SPI,DAC1outlow);
80007564:	48 e8       	lddpc	r8,8000759c <DAC16Send+0xd4>
80007566:	90 8b       	ld.uh	r11,r8[0x0]
80007568:	fe 7c 24 00 	mov	r12,-56320
8000756c:	f0 1f 00 0e 	mcall	800075a4 <DAC16Send+0xdc>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80007570:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80007574:	f0 ca fd 00 	sub	r10,r8,-768
80007578:	cd fb       	rjmp	80007536 <DAC16Send+0x6e>
	cpu_delay_us(12,64000000);
	gpio_set_gpio_pin(DAC1_CS);
8000757a:	34 6c       	mov	r12,70
8000757c:	f0 1f 00 0b 	mcall	800075a8 <DAC16Send+0xe0>
	SPIbusy = 0;
80007580:	30 09       	mov	r9,0
80007582:	48 38       	lddpc	r8,8000758c <DAC16Send+0xc4>
80007584:	b0 89       	st.b	r8[0x0],r9
}
80007586:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000758a:	00 00       	add	r0,r0
8000758c:	00 00       	add	r0,r0
8000758e:	0b 64       	ld.uh	r4,--r5
80007590:	00 00       	add	r0,r0
80007592:	03 ac       	ld.ub	r12,r1[0x2]
80007594:	80 00       	ld.sh	r0,r0[0x0]
80007596:	73 c4       	ld.w	r4,r9[0x70]
80007598:	00 00       	add	r0,r0
8000759a:	0b 66       	ld.uh	r6,--r5
8000759c:	00 00       	add	r0,r0
8000759e:	0b 6c       	ld.uh	r12,--r5
800075a0:	80 00       	ld.sh	r0,r0[0x0]
800075a2:	32 94       	mov	r4,41
800075a4:	80 00       	ld.sh	r0,r0[0x0]
800075a6:	27 40       	sub	r0,116
800075a8:	80 00       	ld.sh	r0,r0[0x0]
800075aa:	32 78       	mov	r8,39

800075ac <dacsend>:
	spi_setupChipReg(SPARE_SPI, &spiOptions, TARGET_PBACLK_FREQ_HZ);
	spi_enable(SPARE_SPI);
}

void dacsend(unsigned char DACvoice, unsigned char DACnum, unsigned short DACval)
{
800075ac:	d4 21       	pushm	r4-r7,lr
800075ae:	18 95       	mov	r5,r12
800075b0:	16 96       	mov	r6,r11
800075b2:	14 94       	mov	r4,r10
	//send a value to one of the DAC channels to be converted to analog voltage
	//DACvoice is which of the polyphonic voices it should go to (not yet implemented) (channel number)
	//DACnum is which type of output it goes to (1 = A, 2 = V, 3 = B)

	SPIbusy = 1;
800075b4:	30 17       	mov	r7,1
800075b6:	4b 78       	lddpc	r8,80007690 <dacsend+0xe4>
800075b8:	b0 87       	st.b	r8[0x0],r7
	setSPI(spiOptions12DAC);
800075ba:	4b 78       	lddpc	r8,80007694 <dacsend+0xe8>
800075bc:	20 4d       	sub	sp,16
800075be:	f0 ea 00 00 	ld.d	r10,r8[0]
800075c2:	fa eb 00 00 	st.d	sp[0],r10
800075c6:	f0 e8 00 08 	ld.d	r8,r8[8]
800075ca:	fa e9 00 08 	st.d	sp[8],r8
800075ce:	f0 1f 00 33 	mcall	80007698 <dacsend+0xec>

	dacouthigh = (DACval >> 4) & 0xFF;
800075d2:	5c 74       	castu.h	r4
800075d4:	f3 d4 c0 88 	bfextu	r9,r4,0x4,0x8
800075d8:	4b 18       	lddpc	r8,8000769c <dacsend+0xf0>
800075da:	b0 09       	st.h	r8[0x0],r9
	dacoutlow = ((DACval << 4) & 0xF0);
800075dc:	e8 08 15 04 	lsl	r8,r4,0x4
800075e0:	e9 d8 c0 08 	bfextu	r4,r8,0x0,0x8
800075e4:	4a f8       	lddpc	r8,800076a0 <dacsend+0xf4>
800075e6:	b0 04       	st.h	r8[0x0],r4

	if (DACnum == 1)
800075e8:	2f cd       	sub	sp,-16
800075ea:	ee 06 18 00 	cp.b	r6,r7
800075ee:	c2 51       	brne	80007638 <dacsend+0x8c>
	{
		gpio_clr_gpio_pin(DAC2_CS);
800075f0:	36 9c       	mov	r12,105
800075f2:	f0 1f 00 2d 	mcall	800076a4 <dacsend+0xf8>
		dacwait1();
800075f6:	f0 1f 00 2d 	mcall	800076a8 <dacsend+0xfc>
		while((spi_write(SPARE_SPI,DACvoice)) != 0);
800075fa:	fe 77 24 00 	mov	r7,-56320
800075fe:	0a 9b       	mov	r11,r5
80007600:	0e 9c       	mov	r12,r7
80007602:	f0 1f 00 2b 	mcall	800076ac <dacsend+0x100>
80007606:	cf c1       	brne	800075fe <dacsend+0x52>
		while((spi_write(SPARE_SPI,dacouthigh)) !=0);
80007608:	4a 56       	lddpc	r6,8000769c <dacsend+0xf0>
8000760a:	fe 77 24 00 	mov	r7,-56320
8000760e:	8c 8b       	ld.uh	r11,r6[0x0]
80007610:	0e 9c       	mov	r12,r7
80007612:	f0 1f 00 27 	mcall	800076ac <dacsend+0x100>
80007616:	cf c1       	brne	8000760e <dacsend+0x62>
		while((spi_write(SPARE_SPI,dacoutlow)) != 0);
80007618:	4a 26       	lddpc	r6,800076a0 <dacsend+0xf4>
8000761a:	fe 77 24 00 	mov	r7,-56320
8000761e:	8c 8b       	ld.uh	r11,r6[0x0]
80007620:	0e 9c       	mov	r12,r7
80007622:	f0 1f 00 23 	mcall	800076ac <dacsend+0x100>
80007626:	cf c1       	brne	8000761e <dacsend+0x72>
		dacwait2();
80007628:	f0 1f 00 22 	mcall	800076b0 <dacsend+0x104>
		gpio_set_gpio_pin(DAC2_CS);
8000762c:	36 9c       	mov	r12,105
8000762e:	f0 1f 00 22 	mcall	800076b4 <dacsend+0x108>
		dacwait1();
80007632:	f0 1f 00 1e 	mcall	800076a8 <dacsend+0xfc>
80007636:	c2 88       	rjmp	80007686 <dacsend+0xda>
	}

	if (DACnum == 2)
80007638:	30 28       	mov	r8,2
8000763a:	f0 06 18 00 	cp.b	r6,r8
8000763e:	c2 41       	brne	80007686 <dacsend+0xda>
	{
		gpio_clr_gpio_pin(DAC3_CS);
80007640:	36 8c       	mov	r12,104
80007642:	f0 1f 00 19 	mcall	800076a4 <dacsend+0xf8>
		dacwait1();
80007646:	f0 1f 00 19 	mcall	800076a8 <dacsend+0xfc>
		while((spi_write(SPARE_SPI,DACvoice)) != 0);
8000764a:	fe 77 24 00 	mov	r7,-56320
8000764e:	0a 9b       	mov	r11,r5
80007650:	0e 9c       	mov	r12,r7
80007652:	f0 1f 00 17 	mcall	800076ac <dacsend+0x100>
80007656:	cf c1       	brne	8000764e <dacsend+0xa2>
		while((spi_write(SPARE_SPI,dacouthigh)) !=0);
80007658:	49 16       	lddpc	r6,8000769c <dacsend+0xf0>
8000765a:	fe 77 24 00 	mov	r7,-56320
8000765e:	8c 8b       	ld.uh	r11,r6[0x0]
80007660:	0e 9c       	mov	r12,r7
80007662:	f0 1f 00 13 	mcall	800076ac <dacsend+0x100>
80007666:	cf c1       	brne	8000765e <dacsend+0xb2>
		while((spi_write(SPARE_SPI,dacoutlow)) != 0);
80007668:	48 e6       	lddpc	r6,800076a0 <dacsend+0xf4>
8000766a:	fe 77 24 00 	mov	r7,-56320
8000766e:	8c 8b       	ld.uh	r11,r6[0x0]
80007670:	0e 9c       	mov	r12,r7
80007672:	f0 1f 00 0f 	mcall	800076ac <dacsend+0x100>
80007676:	cf c1       	brne	8000766e <dacsend+0xc2>
		dacwait2();
80007678:	f0 1f 00 0e 	mcall	800076b0 <dacsend+0x104>
		gpio_set_gpio_pin(DAC3_CS);
8000767c:	36 8c       	mov	r12,104
8000767e:	f0 1f 00 0e 	mcall	800076b4 <dacsend+0x108>
		dacwait1();
80007682:	f0 1f 00 0a 	mcall	800076a8 <dacsend+0xfc>
	}
	SPIbusy = 0;
80007686:	30 09       	mov	r9,0
80007688:	48 28       	lddpc	r8,80007690 <dacsend+0xe4>
8000768a:	b0 89       	st.b	r8[0x0],r9
}
8000768c:	d8 22       	popm	r4-r7,pc
8000768e:	00 00       	add	r0,r0
80007690:	00 00       	add	r0,r0
80007692:	0b 64       	ld.uh	r4,--r5
80007694:	00 00       	add	r0,r0
80007696:	03 9c       	ld.ub	r12,r1[0x1]
80007698:	80 00       	ld.sh	r0,r0[0x0]
8000769a:	73 c4       	ld.w	r4,r9[0x70]
8000769c:	00 00       	add	r0,r0
8000769e:	0b 68       	ld.uh	r8,--r5
800076a0:	00 00       	add	r0,r0
800076a2:	0b 6a       	ld.uh	r10,--r5
800076a4:	80 00       	ld.sh	r0,r0[0x0]
800076a6:	32 94       	mov	r4,41
800076a8:	80 00       	ld.sh	r0,r0[0x0]
800076aa:	73 9c       	ld.w	r12,r9[0x64]
800076ac:	80 00       	ld.sh	r0,r0[0x0]
800076ae:	27 40       	sub	r0,116
800076b0:	80 00       	ld.sh	r0,r0[0x0]
800076b2:	73 74       	ld.w	r4,r9[0x5c]
800076b4:	80 00       	ld.sh	r0,r0[0x0]
800076b6:	32 78       	mov	r8,39

800076b8 <DACsetup>:
		sleepmgr_enter_sleep();
	}
}

void DACsetup(void)
{
800076b8:	d4 01       	pushm	lr
	//let the portamento interrupt know the SPI is busy
	SPIbusy = 1;
800076ba:	30 19       	mov	r9,1
800076bc:	4b 18       	lddpc	r8,80007780 <DACsetup+0xc8>
800076be:	b0 89       	st.b	r8[0x0],r9
	
	setSPI(spiOptions12DAC);
800076c0:	4b 18       	lddpc	r8,80007784 <DACsetup+0xcc>
800076c2:	20 4d       	sub	sp,16
800076c4:	f0 ea 00 00 	ld.d	r10,r8[0]
800076c8:	fa eb 00 00 	st.d	sp[0],r10
800076cc:	f0 e8 00 08 	ld.d	r8,r8[8]
800076d0:	fa e9 00 08 	st.d	sp[8],r8
800076d4:	f0 1f 00 2d 	mcall	80007788 <DACsetup+0xd0>

	gpio_clr_gpio_pin(DAC2_CS);
800076d8:	36 9c       	mov	r12,105
800076da:	f0 1f 00 2d 	mcall	8000778c <DACsetup+0xd4>
	dacwait1();
800076de:	f0 1f 00 2d 	mcall	80007790 <DACsetup+0xd8>
	dacwait1();
800076e2:	f0 1f 00 2c 	mcall	80007790 <DACsetup+0xd8>
	dacwait1();
800076e6:	f0 1f 00 2b 	mcall	80007790 <DACsetup+0xd8>
	spi_write(SPARE_SPI,0x30);
800076ea:	33 0b       	mov	r11,48
800076ec:	fe 7c 24 00 	mov	r12,-56320
800076f0:	f0 1f 00 29 	mcall	80007794 <DACsetup+0xdc>
	spi_write(SPARE_SPI,0x00);
800076f4:	30 0b       	mov	r11,0
800076f6:	fe 7c 24 00 	mov	r12,-56320
800076fa:	f0 1f 00 27 	mcall	80007794 <DACsetup+0xdc>
	spi_write(SPARE_SPI,0x0F);
800076fe:	30 fb       	mov	r11,15
80007700:	fe 7c 24 00 	mov	r12,-56320
80007704:	f0 1f 00 24 	mcall	80007794 <DACsetup+0xdc>
	dacwait2();
80007708:	f0 1f 00 24 	mcall	80007798 <DACsetup+0xe0>
	dacwait2();
8000770c:	f0 1f 00 23 	mcall	80007798 <DACsetup+0xe0>
	dacwait2();
80007710:	f0 1f 00 22 	mcall	80007798 <DACsetup+0xe0>
	dacwait2();
80007714:	f0 1f 00 21 	mcall	80007798 <DACsetup+0xe0>
	gpio_set_gpio_pin(DAC2_CS);
80007718:	36 9c       	mov	r12,105
8000771a:	f0 1f 00 21 	mcall	8000779c <DACsetup+0xe4>
	dacwait1();
8000771e:	f0 1f 00 1d 	mcall	80007790 <DACsetup+0xd8>
	dacwait1();
80007722:	f0 1f 00 1c 	mcall	80007790 <DACsetup+0xd8>
	dacwait1();
80007726:	f0 1f 00 1b 	mcall	80007790 <DACsetup+0xd8>

	gpio_clr_gpio_pin(DAC3_CS);
8000772a:	36 8c       	mov	r12,104
8000772c:	f0 1f 00 18 	mcall	8000778c <DACsetup+0xd4>
	dacwait1();
80007730:	f0 1f 00 18 	mcall	80007790 <DACsetup+0xd8>
	dacwait1();
80007734:	f0 1f 00 17 	mcall	80007790 <DACsetup+0xd8>
	dacwait1();
80007738:	f0 1f 00 16 	mcall	80007790 <DACsetup+0xd8>
	spi_write(SPARE_SPI,0x30);
8000773c:	33 0b       	mov	r11,48
8000773e:	fe 7c 24 00 	mov	r12,-56320
80007742:	f0 1f 00 15 	mcall	80007794 <DACsetup+0xdc>
	spi_write(SPARE_SPI,0x00);
80007746:	30 0b       	mov	r11,0
80007748:	fe 7c 24 00 	mov	r12,-56320
8000774c:	f0 1f 00 12 	mcall	80007794 <DACsetup+0xdc>
	spi_write(SPARE_SPI,0x0F);
80007750:	30 fb       	mov	r11,15
80007752:	fe 7c 24 00 	mov	r12,-56320
80007756:	f0 1f 00 10 	mcall	80007794 <DACsetup+0xdc>
	dacwait2();
8000775a:	f0 1f 00 10 	mcall	80007798 <DACsetup+0xe0>
	dacwait2();
8000775e:	f0 1f 00 0f 	mcall	80007798 <DACsetup+0xe0>
	dacwait2();
80007762:	f0 1f 00 0e 	mcall	80007798 <DACsetup+0xe0>
	dacwait2();
80007766:	f0 1f 00 0d 	mcall	80007798 <DACsetup+0xe0>
	gpio_set_gpio_pin(DAC3_CS);
8000776a:	36 8c       	mov	r12,104
8000776c:	f0 1f 00 0c 	mcall	8000779c <DACsetup+0xe4>
	dacwait1();
80007770:	f0 1f 00 08 	mcall	80007790 <DACsetup+0xd8>
	dacwait1();
80007774:	f0 1f 00 07 	mcall	80007790 <DACsetup+0xd8>
	dacwait1();
80007778:	f0 1f 00 06 	mcall	80007790 <DACsetup+0xd8>
8000777c:	2f cd       	sub	sp,-16
}
8000777e:	d8 02       	popm	pc
80007780:	00 00       	add	r0,r0
80007782:	0b 64       	ld.uh	r4,--r5
80007784:	00 00       	add	r0,r0
80007786:	03 9c       	ld.ub	r12,r1[0x1]
80007788:	80 00       	ld.sh	r0,r0[0x0]
8000778a:	73 c4       	ld.w	r4,r9[0x70]
8000778c:	80 00       	ld.sh	r0,r0[0x0]
8000778e:	32 94       	mov	r4,41
80007790:	80 00       	ld.sh	r0,r0[0x0]
80007792:	73 9c       	ld.w	r12,r9[0x64]
80007794:	80 00       	ld.sh	r0,r0[0x0]
80007796:	27 40       	sub	r0,116
80007798:	80 00       	ld.sh	r0,r0[0x0]
8000779a:	73 74       	ld.w	r4,r9[0x5c]
8000779c:	80 00       	ld.sh	r0,r0[0x0]
8000779e:	32 78       	mov	r8,39

800077a0 <main>:
unsigned short DAC1outlow = 0;
unsigned char SPIbusy = 0;

/*! \brief Main function. Execution starts here.
 */
int main(void){
800077a0:	eb cd 40 80 	pushm	r7,lr
#if SAMD21 || SAML21 || SAMDA1
	system_init();
#else
	sysclk_init();
800077a4:	f0 1f 00 50 	mcall	800078e4 <main+0x144>
	board_init();
800077a8:	f0 1f 00 50 	mcall	800078e8 <main+0x148>
#endif
	irq_initialize_vectors();
800077ac:	f0 1f 00 50 	mcall	800078ec <main+0x14c>
	cpu_irq_enable();
800077b0:	d5 03       	csrf	0x10
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
800077b2:	4d 08       	lddpc	r8,800078f0 <main+0x150>
800077b4:	30 09       	mov	r9,0
800077b6:	b0 89       	st.b	r8[0x0],r9
800077b8:	b0 99       	st.b	r8[0x1],r9
800077ba:	b0 a9       	st.b	r8[0x2],r9
800077bc:	b0 b9       	st.b	r8[0x3],r9
800077be:	b0 c9       	st.b	r8[0x4],r9
800077c0:	b0 d9       	st.b	r8[0x5],r9
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
800077c2:	30 19       	mov	r9,1
800077c4:	b0 e9       	st.b	r8[0x6],r9

	// Initialize the sleep manager
	sleepmgr_init();

	ui_init();
800077c6:	f0 1f 00 4c 	mcall	800078f4 <main+0x154>
	//initGates();

	// Initialize as master
	
	//Initialize SPI for the Display, DIP204
	spi_initMaster(DIP204_SPI, &DIP_spiOptions);
800077ca:	4c c7       	lddpc	r7,800078f8 <main+0x158>
800077cc:	0e 9b       	mov	r11,r7
800077ce:	fe 7c 28 00 	mov	r12,-55296
800077d2:	f0 1f 00 4b 	mcall	800078fc <main+0x15c>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
800077d6:	30 09       	mov	r9,0
800077d8:	12 9a       	mov	r10,r9
800077da:	12 9b       	mov	r11,r9
800077dc:	fe 7c 28 00 	mov	r12,-55296
800077e0:	f0 1f 00 48 	mcall	80007900 <main+0x160>
	spi_selectChip(DIP204_SPI,0);
800077e4:	30 0b       	mov	r11,0
800077e6:	fe 7c 28 00 	mov	r12,-55296
800077ea:	f0 1f 00 47 	mcall	80007904 <main+0x164>
	spi_setupChipReg(DIP204_SPI, &DIP_spiOptions, FOSC0);
800077ee:	e0 6a 1b 00 	mov	r10,6912
800077f2:	ea 1a 00 b7 	orh	r10,0xb7
800077f6:	0e 9b       	mov	r11,r7
800077f8:	fe 7c 28 00 	mov	r12,-55296
800077fc:	f0 1f 00 43 	mcall	80007908 <main+0x168>
	spi_enable(DIP204_SPI);
80007800:	fe 7c 28 00 	mov	r12,-55296
80007804:	f0 1f 00 42 	mcall	8000790c <main+0x16c>
	
	dip204_init(backlight_PWM, true);
80007808:	30 1b       	mov	r11,1
8000780a:	16 9c       	mov	r12,r11
8000780c:	f0 1f 00 41 	mcall	80007910 <main+0x170>
	dip204_clear_display();
80007810:	f0 1f 00 41 	mcall	80007914 <main+0x174>
	//initialize the SPI bus for DAC
	initSPIbus();
80007814:	f0 1f 00 41 	mcall	80007918 <main+0x178>
	
	//send the messages to the DACs to make them update without software LDAC feature
	DACsetup();
80007818:	f0 1f 00 41 	mcall	8000791c <main+0x17c>
	
	// Start USB host stack
	uhc_start();
8000781c:	f0 1f 00 41 	mcall	80007920 <main+0x180>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
80007820:	4b 4c       	lddpc	r12,800078f0 <main+0x150>
80007822:	30 0b       	mov	r11,0
80007824:	30 07       	mov	r7,0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
80007826:	d3 03       	ssrf	0x10

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
80007828:	19 88       	ld.ub	r8,r12[0x0]
8000782a:	f6 08 18 00 	cp.b	r8,r11
8000782e:	c0 b1       	brne	80007844 <main+0xa4>
80007830:	0e 99       	mov	r9,r7
80007832:	18 98       	mov	r8,r12
		lock_ptr++;
80007834:	2f f8       	sub	r8,-1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
80007836:	2f f9       	sub	r9,-1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
80007838:	11 8a       	ld.ub	r10,r8[0x0]
8000783a:	f6 0a 18 00 	cp.b	r10,r11
8000783e:	cf b0       	breq	80007834 <main+0x94>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
80007840:	58 09       	cp.w	r9,0
80007842:	c0 31       	brne	80007848 <main+0xa8>
		cpu_irq_enable();
80007844:	d5 03       	csrf	0x10
80007846:	cf 0b       	rjmp	80007826 <main+0x86>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
80007848:	d3 03       	ssrf	0x10
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
	switch (sleep_mode) {
8000784a:	20 19       	sub	r9,1
8000784c:	a7 b9       	sbr	r9,0x7
8000784e:	58 59       	cp.w	r9,5
80007850:	c4 30       	breq	800078d6 <main+0x136>
80007852:	e0 89 00 10 	brgt	80007872 <main+0xd2>
80007856:	58 29       	cp.w	r9,2
80007858:	c2 d0       	breq	800078b2 <main+0x112>
8000785a:	e0 89 00 07 	brgt	80007868 <main+0xc8>
8000785e:	58 09       	cp.w	r9,0
80007860:	c1 d0       	breq	8000789a <main+0xfa>
80007862:	58 19       	cp.w	r9,1
80007864:	ce 11       	brne	80007826 <main+0x86>
80007866:	c2 08       	rjmp	800078a6 <main+0x106>
80007868:	58 39       	cp.w	r9,3
8000786a:	c2 a0       	breq	800078be <main+0x11e>
8000786c:	58 49       	cp.w	r9,4
8000786e:	cd c1       	brne	80007826 <main+0x86>
80007870:	c2 d8       	rjmp	800078ca <main+0x12a>
80007872:	e0 49 00 82 	cp.w	r9,130
80007876:	c2 10       	breq	800078b8 <main+0x118>
80007878:	e0 89 00 09 	brgt	8000788a <main+0xea>
8000787c:	e0 49 00 80 	cp.w	r9,128
80007880:	c1 00       	breq	800078a0 <main+0x100>
80007882:	e0 49 00 81 	cp.w	r9,129
80007886:	cd 01       	brne	80007826 <main+0x86>
80007888:	c1 28       	rjmp	800078ac <main+0x10c>
8000788a:	e0 49 00 84 	cp.w	r9,132
8000788e:	c2 10       	breq	800078d0 <main+0x130>
80007890:	c1 a5       	brlt	800078c4 <main+0x124>
80007892:	e0 49 00 85 	cp.w	r9,133
80007896:	cc 81       	brne	80007826 <main+0x86>
80007898:	c2 28       	rjmp	800078dc <main+0x13c>
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
8000789a:	e9 b0 00 00 	sleep	0x0
8000789e:	cc 4b       	rjmp	80007826 <main+0x86>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
800078a0:	e9 b0 00 80 	sleep	0x80
800078a4:	cc 1b       	rjmp	80007826 <main+0x86>
		break;
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
800078a6:	e9 b0 00 01 	sleep	0x1
800078aa:	cb eb       	rjmp	80007826 <main+0x86>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
800078ac:	e9 b0 00 81 	sleep	0x81
800078b0:	cb bb       	rjmp	80007826 <main+0x86>
		break;
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
800078b2:	e9 b0 00 02 	sleep	0x2
800078b6:	cb 8b       	rjmp	80007826 <main+0x86>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
800078b8:	e9 b0 00 82 	sleep	0x82
800078bc:	cb 5b       	rjmp	80007826 <main+0x86>
		break;
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
800078be:	e9 b0 00 03 	sleep	0x3
800078c2:	cb 2b       	rjmp	80007826 <main+0x86>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
800078c4:	e9 b0 00 83 	sleep	0x83
800078c8:	ca fb       	rjmp	80007826 <main+0x86>
		break;
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
800078ca:	e9 b0 00 04 	sleep	0x4
800078ce:	ca cb       	rjmp	80007826 <main+0x86>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
800078d0:	e9 b0 00 84 	sleep	0x84
800078d4:	ca 9b       	rjmp	80007826 <main+0x86>
		break;
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
800078d6:	e9 b0 00 05 	sleep	0x5
800078da:	ca 6b       	rjmp	80007826 <main+0x86>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
800078dc:	e9 b0 00 85 	sleep	0x85
800078e0:	ca 3b       	rjmp	80007826 <main+0x86>
800078e2:	00 00       	add	r0,r0
800078e4:	80 00       	ld.sh	r0,r0[0x0]
800078e6:	5c bc       	swap.b	r12
800078e8:	80 00       	ld.sh	r0,r0[0x0]
800078ea:	2e 6c       	sub	r12,-26
800078ec:	80 00       	ld.sh	r0,r0[0x0]
800078ee:	33 a4       	mov	r4,58
800078f0:	00 00       	add	r0,r0
800078f2:	0b d4       	ld.ub	r4,r5[0x5]
800078f4:	80 00       	ld.sh	r0,r0[0x0]
800078f6:	2a d8       	sub	r8,-83
800078f8:	00 00       	add	r0,r0
800078fa:	03 bc       	ld.ub	r12,r1[0x3]
800078fc:	80 00       	ld.sh	r0,r0[0x0]
800078fe:	25 a6       	sub	r6,90
80007900:	80 00       	ld.sh	r0,r0[0x0]
80007902:	25 de       	sub	lr,93
80007904:	80 00       	ld.sh	r0,r0[0x0]
80007906:	26 0a       	sub	r10,96
80007908:	80 00       	ld.sh	r0,r0[0x0]
8000790a:	26 7c       	sub	r12,103
8000790c:	80 00       	ld.sh	r0,r0[0x0]
8000790e:	27 34       	sub	r4,115
80007910:	80 00       	ld.sh	r0,r0[0x0]
80007912:	22 d0       	sub	r0,45
80007914:	80 00       	ld.sh	r0,r0[0x0]
80007916:	22 74       	sub	r4,39
80007918:	80 00       	ld.sh	r0,r0[0x0]
8000791a:	74 34       	ld.w	r4,r10[0xc]
8000791c:	80 00       	ld.sh	r0,r0[0x0]
8000791e:	76 b8       	ld.w	r8,r11[0x2c]
80007920:	80 00       	ld.sh	r0,r0[0x0]
80007922:	6c f4       	ld.w	r4,r6[0x3c]

80007924 <free>:
80007924:	d4 01       	pushm	lr
80007926:	e0 68 08 cc 	mov	r8,2252
8000792a:	18 9b       	mov	r11,r12
8000792c:	70 0c       	ld.w	r12,r8[0x0]
8000792e:	e0 a0 03 c1 	rcall	800080b0 <_free_r>
80007932:	d8 02       	popm	pc

80007934 <malloc>:
80007934:	d4 01       	pushm	lr
80007936:	e0 68 08 cc 	mov	r8,2252
8000793a:	18 9b       	mov	r11,r12
8000793c:	70 0c       	ld.w	r12,r8[0x0]
8000793e:	c0 3c       	rcall	80007944 <_malloc_r>
80007940:	d8 02       	popm	pc
80007942:	d7 03       	nop

80007944 <_malloc_r>:
80007944:	d4 31       	pushm	r0-r7,lr
80007946:	f6 c8 ff f5 	sub	r8,r11,-11
8000794a:	18 95       	mov	r5,r12
8000794c:	10 97       	mov	r7,r8
8000794e:	e0 17 ff f8 	andl	r7,0xfff8
80007952:	59 68       	cp.w	r8,22
80007954:	f9 b7 08 10 	movls	r7,16
80007958:	16 37       	cp.w	r7,r11
8000795a:	5f 38       	srlo	r8
8000795c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80007960:	c0 50       	breq	8000796a <_malloc_r+0x26>
80007962:	30 c8       	mov	r8,12
80007964:	99 38       	st.w	r12[0xc],r8
80007966:	e0 8f 01 f4 	bral	80007d4e <_malloc_r+0x40a>
8000796a:	e0 a0 02 a5 	rcall	80007eb4 <__malloc_lock>
8000796e:	e0 47 01 f7 	cp.w	r7,503
80007972:	e0 8b 00 1d 	brhi	800079ac <_malloc_r+0x68>
80007976:	ee 03 16 03 	lsr	r3,r7,0x3
8000797a:	e0 68 03 cc 	mov	r8,972
8000797e:	f0 03 00 38 	add	r8,r8,r3<<0x3
80007982:	70 36       	ld.w	r6,r8[0xc]
80007984:	10 36       	cp.w	r6,r8
80007986:	c0 61       	brne	80007992 <_malloc_r+0x4e>
80007988:	ec c8 ff f8 	sub	r8,r6,-8
8000798c:	70 36       	ld.w	r6,r8[0xc]
8000798e:	10 36       	cp.w	r6,r8
80007990:	c0 c0       	breq	800079a8 <_malloc_r+0x64>
80007992:	6c 18       	ld.w	r8,r6[0x4]
80007994:	e0 18 ff fc 	andl	r8,0xfffc
80007998:	6c 3a       	ld.w	r10,r6[0xc]
8000799a:	ec 08 00 09 	add	r9,r6,r8
8000799e:	0a 9c       	mov	r12,r5
800079a0:	6c 28       	ld.w	r8,r6[0x8]
800079a2:	95 28       	st.w	r10[0x8],r8
800079a4:	91 3a       	st.w	r8[0xc],r10
800079a6:	c4 78       	rjmp	80007a34 <_malloc_r+0xf0>
800079a8:	2f e3       	sub	r3,-2
800079aa:	c4 d8       	rjmp	80007a44 <_malloc_r+0x100>
800079ac:	ee 03 16 09 	lsr	r3,r7,0x9
800079b0:	c0 41       	brne	800079b8 <_malloc_r+0x74>
800079b2:	ee 03 16 03 	lsr	r3,r7,0x3
800079b6:	c2 68       	rjmp	80007a02 <_malloc_r+0xbe>
800079b8:	58 43       	cp.w	r3,4
800079ba:	e0 8b 00 06 	brhi	800079c6 <_malloc_r+0x82>
800079be:	ee 03 16 06 	lsr	r3,r7,0x6
800079c2:	2c 83       	sub	r3,-56
800079c4:	c1 f8       	rjmp	80007a02 <_malloc_r+0xbe>
800079c6:	59 43       	cp.w	r3,20
800079c8:	e0 8b 00 04 	brhi	800079d0 <_malloc_r+0x8c>
800079cc:	2a 53       	sub	r3,-91
800079ce:	c1 a8       	rjmp	80007a02 <_malloc_r+0xbe>
800079d0:	e0 43 00 54 	cp.w	r3,84
800079d4:	e0 8b 00 06 	brhi	800079e0 <_malloc_r+0x9c>
800079d8:	ee 03 16 0c 	lsr	r3,r7,0xc
800079dc:	29 23       	sub	r3,-110
800079de:	c1 28       	rjmp	80007a02 <_malloc_r+0xbe>
800079e0:	e0 43 01 54 	cp.w	r3,340
800079e4:	e0 8b 00 06 	brhi	800079f0 <_malloc_r+0xac>
800079e8:	ee 03 16 0f 	lsr	r3,r7,0xf
800079ec:	28 93       	sub	r3,-119
800079ee:	c0 a8       	rjmp	80007a02 <_malloc_r+0xbe>
800079f0:	e0 43 05 54 	cp.w	r3,1364
800079f4:	e0 88 00 04 	brls	800079fc <_malloc_r+0xb8>
800079f8:	37 e3       	mov	r3,126
800079fa:	c0 48       	rjmp	80007a02 <_malloc_r+0xbe>
800079fc:	ee 03 16 12 	lsr	r3,r7,0x12
80007a00:	28 43       	sub	r3,-124
80007a02:	e0 6a 03 cc 	mov	r10,972
80007a06:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80007a0a:	74 36       	ld.w	r6,r10[0xc]
80007a0c:	c1 98       	rjmp	80007a3e <_malloc_r+0xfa>
80007a0e:	6c 19       	ld.w	r9,r6[0x4]
80007a10:	e0 19 ff fc 	andl	r9,0xfffc
80007a14:	f2 07 01 0b 	sub	r11,r9,r7
80007a18:	58 fb       	cp.w	r11,15
80007a1a:	e0 8a 00 04 	brle	80007a22 <_malloc_r+0xde>
80007a1e:	20 13       	sub	r3,1
80007a20:	c1 18       	rjmp	80007a42 <_malloc_r+0xfe>
80007a22:	6c 38       	ld.w	r8,r6[0xc]
80007a24:	58 0b       	cp.w	r11,0
80007a26:	c0 b5       	brlt	80007a3c <_malloc_r+0xf8>
80007a28:	6c 2a       	ld.w	r10,r6[0x8]
80007a2a:	ec 09 00 09 	add	r9,r6,r9
80007a2e:	0a 9c       	mov	r12,r5
80007a30:	91 2a       	st.w	r8[0x8],r10
80007a32:	95 38       	st.w	r10[0xc],r8
80007a34:	72 18       	ld.w	r8,r9[0x4]
80007a36:	a1 a8       	sbr	r8,0x0
80007a38:	93 18       	st.w	r9[0x4],r8
80007a3a:	cb c8       	rjmp	80007bb2 <_malloc_r+0x26e>
80007a3c:	10 96       	mov	r6,r8
80007a3e:	14 36       	cp.w	r6,r10
80007a40:	ce 71       	brne	80007a0e <_malloc_r+0xca>
80007a42:	2f f3       	sub	r3,-1
80007a44:	e0 6a 03 cc 	mov	r10,972
80007a48:	f4 cc ff f8 	sub	r12,r10,-8
80007a4c:	78 26       	ld.w	r6,r12[0x8]
80007a4e:	18 36       	cp.w	r6,r12
80007a50:	c6 c0       	breq	80007b28 <_malloc_r+0x1e4>
80007a52:	6c 19       	ld.w	r9,r6[0x4]
80007a54:	e0 19 ff fc 	andl	r9,0xfffc
80007a58:	f2 07 01 08 	sub	r8,r9,r7
80007a5c:	58 f8       	cp.w	r8,15
80007a5e:	e0 89 00 8f 	brgt	80007b7c <_malloc_r+0x238>
80007a62:	99 3c       	st.w	r12[0xc],r12
80007a64:	99 2c       	st.w	r12[0x8],r12
80007a66:	58 08       	cp.w	r8,0
80007a68:	c0 55       	brlt	80007a72 <_malloc_r+0x12e>
80007a6a:	ec 09 00 09 	add	r9,r6,r9
80007a6e:	0a 9c       	mov	r12,r5
80007a70:	ce 2b       	rjmp	80007a34 <_malloc_r+0xf0>
80007a72:	e0 49 01 ff 	cp.w	r9,511
80007a76:	e0 8b 00 13 	brhi	80007a9c <_malloc_r+0x158>
80007a7a:	a3 99       	lsr	r9,0x3
80007a7c:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007a80:	70 2b       	ld.w	r11,r8[0x8]
80007a82:	8d 38       	st.w	r6[0xc],r8
80007a84:	8d 2b       	st.w	r6[0x8],r11
80007a86:	97 36       	st.w	r11[0xc],r6
80007a88:	91 26       	st.w	r8[0x8],r6
80007a8a:	a3 49       	asr	r9,0x2
80007a8c:	74 18       	ld.w	r8,r10[0x4]
80007a8e:	30 1b       	mov	r11,1
80007a90:	f6 09 09 49 	lsl	r9,r11,r9
80007a94:	f1 e9 10 09 	or	r9,r8,r9
80007a98:	95 19       	st.w	r10[0x4],r9
80007a9a:	c4 78       	rjmp	80007b28 <_malloc_r+0x1e4>
80007a9c:	f2 0a 16 09 	lsr	r10,r9,0x9
80007aa0:	58 4a       	cp.w	r10,4
80007aa2:	e0 8b 00 07 	brhi	80007ab0 <_malloc_r+0x16c>
80007aa6:	f2 0a 16 06 	lsr	r10,r9,0x6
80007aaa:	2c 8a       	sub	r10,-56
80007aac:	c2 08       	rjmp	80007aec <_malloc_r+0x1a8>
80007aae:	d7 03       	nop
80007ab0:	59 4a       	cp.w	r10,20
80007ab2:	e0 8b 00 04 	brhi	80007aba <_malloc_r+0x176>
80007ab6:	2a 5a       	sub	r10,-91
80007ab8:	c1 a8       	rjmp	80007aec <_malloc_r+0x1a8>
80007aba:	e0 4a 00 54 	cp.w	r10,84
80007abe:	e0 8b 00 06 	brhi	80007aca <_malloc_r+0x186>
80007ac2:	f2 0a 16 0c 	lsr	r10,r9,0xc
80007ac6:	29 2a       	sub	r10,-110
80007ac8:	c1 28       	rjmp	80007aec <_malloc_r+0x1a8>
80007aca:	e0 4a 01 54 	cp.w	r10,340
80007ace:	e0 8b 00 06 	brhi	80007ada <_malloc_r+0x196>
80007ad2:	f2 0a 16 0f 	lsr	r10,r9,0xf
80007ad6:	28 9a       	sub	r10,-119
80007ad8:	c0 a8       	rjmp	80007aec <_malloc_r+0x1a8>
80007ada:	e0 4a 05 54 	cp.w	r10,1364
80007ade:	e0 88 00 04 	brls	80007ae6 <_malloc_r+0x1a2>
80007ae2:	37 ea       	mov	r10,126
80007ae4:	c0 48       	rjmp	80007aec <_malloc_r+0x1a8>
80007ae6:	f2 0a 16 12 	lsr	r10,r9,0x12
80007aea:	28 4a       	sub	r10,-124
80007aec:	e0 6b 03 cc 	mov	r11,972
80007af0:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007af4:	68 28       	ld.w	r8,r4[0x8]
80007af6:	08 38       	cp.w	r8,r4
80007af8:	c0 e1       	brne	80007b14 <_malloc_r+0x1d0>
80007afa:	76 19       	ld.w	r9,r11[0x4]
80007afc:	a3 4a       	asr	r10,0x2
80007afe:	30 1e       	mov	lr,1
80007b00:	fc 0a 09 4a 	lsl	r10,lr,r10
80007b04:	f3 ea 10 0a 	or	r10,r9,r10
80007b08:	10 99       	mov	r9,r8
80007b0a:	97 1a       	st.w	r11[0x4],r10
80007b0c:	c0 a8       	rjmp	80007b20 <_malloc_r+0x1dc>
80007b0e:	70 28       	ld.w	r8,r8[0x8]
80007b10:	08 38       	cp.w	r8,r4
80007b12:	c0 60       	breq	80007b1e <_malloc_r+0x1da>
80007b14:	70 1a       	ld.w	r10,r8[0x4]
80007b16:	e0 1a ff fc 	andl	r10,0xfffc
80007b1a:	14 39       	cp.w	r9,r10
80007b1c:	cf 93       	brcs	80007b0e <_malloc_r+0x1ca>
80007b1e:	70 39       	ld.w	r9,r8[0xc]
80007b20:	8d 39       	st.w	r6[0xc],r9
80007b22:	8d 28       	st.w	r6[0x8],r8
80007b24:	91 36       	st.w	r8[0xc],r6
80007b26:	93 26       	st.w	r9[0x8],r6
80007b28:	e6 08 14 02 	asr	r8,r3,0x2
80007b2c:	30 1b       	mov	r11,1
80007b2e:	e0 64 03 cc 	mov	r4,972
80007b32:	f6 08 09 4b 	lsl	r11,r11,r8
80007b36:	68 18       	ld.w	r8,r4[0x4]
80007b38:	10 3b       	cp.w	r11,r8
80007b3a:	e0 8b 00 69 	brhi	80007c0c <_malloc_r+0x2c8>
80007b3e:	f7 e8 00 09 	and	r9,r11,r8
80007b42:	c0 b1       	brne	80007b58 <_malloc_r+0x214>
80007b44:	e0 13 ff fc 	andl	r3,0xfffc
80007b48:	a1 7b       	lsl	r11,0x1
80007b4a:	2f c3       	sub	r3,-4
80007b4c:	c0 38       	rjmp	80007b52 <_malloc_r+0x20e>
80007b4e:	2f c3       	sub	r3,-4
80007b50:	a1 7b       	lsl	r11,0x1
80007b52:	f7 e8 00 09 	and	r9,r11,r8
80007b56:	cf c0       	breq	80007b4e <_malloc_r+0x20a>
80007b58:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007b5c:	06 92       	mov	r2,r3
80007b5e:	1c 91       	mov	r1,lr
80007b60:	62 36       	ld.w	r6,r1[0xc]
80007b62:	c2 d8       	rjmp	80007bbc <_malloc_r+0x278>
80007b64:	6c 1a       	ld.w	r10,r6[0x4]
80007b66:	e0 1a ff fc 	andl	r10,0xfffc
80007b6a:	f4 07 01 08 	sub	r8,r10,r7
80007b6e:	58 f8       	cp.w	r8,15
80007b70:	e0 8a 00 15 	brle	80007b9a <_malloc_r+0x256>
80007b74:	6c 3a       	ld.w	r10,r6[0xc]
80007b76:	6c 29       	ld.w	r9,r6[0x8]
80007b78:	95 29       	st.w	r10[0x8],r9
80007b7a:	93 3a       	st.w	r9[0xc],r10
80007b7c:	0e 99       	mov	r9,r7
80007b7e:	ec 07 00 07 	add	r7,r6,r7
80007b82:	a1 a9       	sbr	r9,0x0
80007b84:	99 37       	st.w	r12[0xc],r7
80007b86:	99 27       	st.w	r12[0x8],r7
80007b88:	8d 19       	st.w	r6[0x4],r9
80007b8a:	ee 08 09 08 	st.w	r7[r8],r8
80007b8e:	8f 2c       	st.w	r7[0x8],r12
80007b90:	8f 3c       	st.w	r7[0xc],r12
80007b92:	a1 a8       	sbr	r8,0x0
80007b94:	0a 9c       	mov	r12,r5
80007b96:	8f 18       	st.w	r7[0x4],r8
80007b98:	c0 d8       	rjmp	80007bb2 <_malloc_r+0x26e>
80007b9a:	6c 39       	ld.w	r9,r6[0xc]
80007b9c:	58 08       	cp.w	r8,0
80007b9e:	c0 e5       	brlt	80007bba <_malloc_r+0x276>
80007ba0:	ec 0a 00 0a 	add	r10,r6,r10
80007ba4:	74 18       	ld.w	r8,r10[0x4]
80007ba6:	a1 a8       	sbr	r8,0x0
80007ba8:	0a 9c       	mov	r12,r5
80007baa:	95 18       	st.w	r10[0x4],r8
80007bac:	6c 28       	ld.w	r8,r6[0x8]
80007bae:	93 28       	st.w	r9[0x8],r8
80007bb0:	91 39       	st.w	r8[0xc],r9
80007bb2:	c8 2d       	rcall	80007eb6 <__malloc_unlock>
80007bb4:	ec cc ff f8 	sub	r12,r6,-8
80007bb8:	d8 32       	popm	r0-r7,pc
80007bba:	12 96       	mov	r6,r9
80007bbc:	02 36       	cp.w	r6,r1
80007bbe:	cd 31       	brne	80007b64 <_malloc_r+0x220>
80007bc0:	2f f2       	sub	r2,-1
80007bc2:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80007bc6:	c0 30       	breq	80007bcc <_malloc_r+0x288>
80007bc8:	2f 81       	sub	r1,-8
80007bca:	cc bb       	rjmp	80007b60 <_malloc_r+0x21c>
80007bcc:	1c 98       	mov	r8,lr
80007bce:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007bd2:	c0 81       	brne	80007be2 <_malloc_r+0x29e>
80007bd4:	68 19       	ld.w	r9,r4[0x4]
80007bd6:	f6 08 11 ff 	rsub	r8,r11,-1
80007bda:	f3 e8 00 08 	and	r8,r9,r8
80007bde:	89 18       	st.w	r4[0x4],r8
80007be0:	c0 78       	rjmp	80007bee <_malloc_r+0x2aa>
80007be2:	f0 c9 00 08 	sub	r9,r8,8
80007be6:	20 13       	sub	r3,1
80007be8:	70 08       	ld.w	r8,r8[0x0]
80007bea:	12 38       	cp.w	r8,r9
80007bec:	cf 10       	breq	80007bce <_malloc_r+0x28a>
80007bee:	a1 7b       	lsl	r11,0x1
80007bf0:	68 18       	ld.w	r8,r4[0x4]
80007bf2:	10 3b       	cp.w	r11,r8
80007bf4:	e0 8b 00 0c 	brhi	80007c0c <_malloc_r+0x2c8>
80007bf8:	58 0b       	cp.w	r11,0
80007bfa:	c0 90       	breq	80007c0c <_malloc_r+0x2c8>
80007bfc:	04 93       	mov	r3,r2
80007bfe:	c0 38       	rjmp	80007c04 <_malloc_r+0x2c0>
80007c00:	2f c3       	sub	r3,-4
80007c02:	a1 7b       	lsl	r11,0x1
80007c04:	f7 e8 00 09 	and	r9,r11,r8
80007c08:	ca 81       	brne	80007b58 <_malloc_r+0x214>
80007c0a:	cf bb       	rjmp	80007c00 <_malloc_r+0x2bc>
80007c0c:	68 23       	ld.w	r3,r4[0x8]
80007c0e:	66 12       	ld.w	r2,r3[0x4]
80007c10:	e0 12 ff fc 	andl	r2,0xfffc
80007c14:	0e 32       	cp.w	r2,r7
80007c16:	5f 39       	srlo	r9
80007c18:	e4 07 01 08 	sub	r8,r2,r7
80007c1c:	58 f8       	cp.w	r8,15
80007c1e:	5f aa       	srle	r10
80007c20:	f5 e9 10 09 	or	r9,r10,r9
80007c24:	e0 80 00 96 	breq	80007d50 <_malloc_r+0x40c>
80007c28:	e0 68 0b 78 	mov	r8,2936
80007c2c:	70 01       	ld.w	r1,r8[0x0]
80007c2e:	e0 68 07 d8 	mov	r8,2008
80007c32:	2f 01       	sub	r1,-16
80007c34:	70 08       	ld.w	r8,r8[0x0]
80007c36:	0e 01       	add	r1,r7
80007c38:	5b f8       	cp.w	r8,-1
80007c3a:	c0 40       	breq	80007c42 <_malloc_r+0x2fe>
80007c3c:	28 11       	sub	r1,-127
80007c3e:	e0 11 ff 80 	andl	r1,0xff80
80007c42:	02 9b       	mov	r11,r1
80007c44:	0a 9c       	mov	r12,r5
80007c46:	c3 9d       	rcall	80007eb8 <_sbrk_r>
80007c48:	18 96       	mov	r6,r12
80007c4a:	5b fc       	cp.w	r12,-1
80007c4c:	c7 30       	breq	80007d32 <_malloc_r+0x3ee>
80007c4e:	e6 02 00 08 	add	r8,r3,r2
80007c52:	10 3c       	cp.w	r12,r8
80007c54:	c0 32       	brcc	80007c5a <_malloc_r+0x316>
80007c56:	08 33       	cp.w	r3,r4
80007c58:	c6 d1       	brne	80007d32 <_malloc_r+0x3ee>
80007c5a:	e0 6a 0b 7c 	mov	r10,2940
80007c5e:	74 09       	ld.w	r9,r10[0x0]
80007c60:	e2 09 00 09 	add	r9,r1,r9
80007c64:	95 09       	st.w	r10[0x0],r9
80007c66:	10 36       	cp.w	r6,r8
80007c68:	c0 a1       	brne	80007c7c <_malloc_r+0x338>
80007c6a:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007c6e:	c0 71       	brne	80007c7c <_malloc_r+0x338>
80007c70:	e2 02 00 02 	add	r2,r1,r2
80007c74:	68 28       	ld.w	r8,r4[0x8]
80007c76:	a1 a2       	sbr	r2,0x0
80007c78:	91 12       	st.w	r8[0x4],r2
80007c7a:	c4 d8       	rjmp	80007d14 <_malloc_r+0x3d0>
80007c7c:	e0 6a 07 d8 	mov	r10,2008
80007c80:	74 0b       	ld.w	r11,r10[0x0]
80007c82:	5b fb       	cp.w	r11,-1
80007c84:	c0 31       	brne	80007c8a <_malloc_r+0x346>
80007c86:	95 06       	st.w	r10[0x0],r6
80007c88:	c0 78       	rjmp	80007c96 <_malloc_r+0x352>
80007c8a:	ec 09 00 09 	add	r9,r6,r9
80007c8e:	e0 6a 0b 7c 	mov	r10,2940
80007c92:	10 19       	sub	r9,r8
80007c94:	95 09       	st.w	r10[0x0],r9
80007c96:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007c9a:	f0 09 11 08 	rsub	r9,r8,8
80007c9e:	58 08       	cp.w	r8,0
80007ca0:	f2 08 17 10 	movne	r8,r9
80007ca4:	ed d8 e1 06 	addne	r6,r6,r8
80007ca8:	28 08       	sub	r8,-128
80007caa:	ec 01 00 01 	add	r1,r6,r1
80007cae:	0a 9c       	mov	r12,r5
80007cb0:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80007cb4:	f0 01 01 01 	sub	r1,r8,r1
80007cb8:	02 9b       	mov	r11,r1
80007cba:	cf fc       	rcall	80007eb8 <_sbrk_r>
80007cbc:	e0 68 0b 7c 	mov	r8,2940
80007cc0:	5b fc       	cp.w	r12,-1
80007cc2:	ec 0c 17 00 	moveq	r12,r6
80007cc6:	f9 b1 00 00 	moveq	r1,0
80007cca:	70 09       	ld.w	r9,r8[0x0]
80007ccc:	0c 1c       	sub	r12,r6
80007cce:	89 26       	st.w	r4[0x8],r6
80007cd0:	02 0c       	add	r12,r1
80007cd2:	12 01       	add	r1,r9
80007cd4:	a1 ac       	sbr	r12,0x0
80007cd6:	91 01       	st.w	r8[0x0],r1
80007cd8:	8d 1c       	st.w	r6[0x4],r12
80007cda:	08 33       	cp.w	r3,r4
80007cdc:	c1 c0       	breq	80007d14 <_malloc_r+0x3d0>
80007cde:	58 f2       	cp.w	r2,15
80007ce0:	e0 8b 00 05 	brhi	80007cea <_malloc_r+0x3a6>
80007ce4:	30 18       	mov	r8,1
80007ce6:	8d 18       	st.w	r6[0x4],r8
80007ce8:	c2 58       	rjmp	80007d32 <_malloc_r+0x3ee>
80007cea:	30 59       	mov	r9,5
80007cec:	20 c2       	sub	r2,12
80007cee:	e0 12 ff f8 	andl	r2,0xfff8
80007cf2:	e6 02 00 08 	add	r8,r3,r2
80007cf6:	91 29       	st.w	r8[0x8],r9
80007cf8:	91 19       	st.w	r8[0x4],r9
80007cfa:	66 18       	ld.w	r8,r3[0x4]
80007cfc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007d00:	e5 e8 10 08 	or	r8,r2,r8
80007d04:	87 18       	st.w	r3[0x4],r8
80007d06:	58 f2       	cp.w	r2,15
80007d08:	e0 88 00 06 	brls	80007d14 <_malloc_r+0x3d0>
80007d0c:	e6 cb ff f8 	sub	r11,r3,-8
80007d10:	0a 9c       	mov	r12,r5
80007d12:	cc fd       	rcall	800080b0 <_free_r>
80007d14:	e0 69 0b 74 	mov	r9,2932
80007d18:	72 0a       	ld.w	r10,r9[0x0]
80007d1a:	e0 68 0b 7c 	mov	r8,2940
80007d1e:	70 08       	ld.w	r8,r8[0x0]
80007d20:	14 38       	cp.w	r8,r10
80007d22:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007d26:	e0 69 0b 70 	mov	r9,2928
80007d2a:	72 0a       	ld.w	r10,r9[0x0]
80007d2c:	14 38       	cp.w	r8,r10
80007d2e:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007d32:	68 28       	ld.w	r8,r4[0x8]
80007d34:	70 18       	ld.w	r8,r8[0x4]
80007d36:	e0 18 ff fc 	andl	r8,0xfffc
80007d3a:	0e 38       	cp.w	r8,r7
80007d3c:	5f 39       	srlo	r9
80007d3e:	0e 18       	sub	r8,r7
80007d40:	58 f8       	cp.w	r8,15
80007d42:	5f aa       	srle	r10
80007d44:	f5 e9 10 09 	or	r9,r10,r9
80007d48:	c0 40       	breq	80007d50 <_malloc_r+0x40c>
80007d4a:	0a 9c       	mov	r12,r5
80007d4c:	cb 5c       	rcall	80007eb6 <__malloc_unlock>
80007d4e:	d8 3a       	popm	r0-r7,pc,r12=0
80007d50:	68 26       	ld.w	r6,r4[0x8]
80007d52:	a1 a8       	sbr	r8,0x0
80007d54:	0e 99       	mov	r9,r7
80007d56:	a1 a9       	sbr	r9,0x0
80007d58:	8d 19       	st.w	r6[0x4],r9
80007d5a:	ec 07 00 07 	add	r7,r6,r7
80007d5e:	0a 9c       	mov	r12,r5
80007d60:	89 27       	st.w	r4[0x8],r7
80007d62:	8f 18       	st.w	r7[0x4],r8
80007d64:	ca 9c       	rcall	80007eb6 <__malloc_unlock>
80007d66:	ec cc ff f8 	sub	r12,r6,-8
80007d6a:	d8 32       	popm	r0-r7,pc

80007d6c <memcpy>:
80007d6c:	58 8a       	cp.w	r10,8
80007d6e:	c2 f5       	brlt	80007dcc <memcpy+0x60>
80007d70:	f9 eb 10 09 	or	r9,r12,r11
80007d74:	e2 19 00 03 	andl	r9,0x3,COH
80007d78:	e0 81 00 97 	brne	80007ea6 <memcpy+0x13a>
80007d7c:	e0 4a 00 20 	cp.w	r10,32
80007d80:	c3 b4       	brge	80007df6 <memcpy+0x8a>
80007d82:	f4 08 14 02 	asr	r8,r10,0x2
80007d86:	f0 09 11 08 	rsub	r9,r8,8
80007d8a:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80007d8e:	76 69       	ld.w	r9,r11[0x18]
80007d90:	99 69       	st.w	r12[0x18],r9
80007d92:	76 59       	ld.w	r9,r11[0x14]
80007d94:	99 59       	st.w	r12[0x14],r9
80007d96:	76 49       	ld.w	r9,r11[0x10]
80007d98:	99 49       	st.w	r12[0x10],r9
80007d9a:	76 39       	ld.w	r9,r11[0xc]
80007d9c:	99 39       	st.w	r12[0xc],r9
80007d9e:	76 29       	ld.w	r9,r11[0x8]
80007da0:	99 29       	st.w	r12[0x8],r9
80007da2:	76 19       	ld.w	r9,r11[0x4]
80007da4:	99 19       	st.w	r12[0x4],r9
80007da6:	76 09       	ld.w	r9,r11[0x0]
80007da8:	99 09       	st.w	r12[0x0],r9
80007daa:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80007dae:	f8 08 00 28 	add	r8,r12,r8<<0x2
80007db2:	e0 1a 00 03 	andl	r10,0x3
80007db6:	f4 0a 11 04 	rsub	r10,r10,4
80007dba:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80007dbe:	17 a9       	ld.ub	r9,r11[0x2]
80007dc0:	b0 a9       	st.b	r8[0x2],r9
80007dc2:	17 99       	ld.ub	r9,r11[0x1]
80007dc4:	b0 99       	st.b	r8[0x1],r9
80007dc6:	17 89       	ld.ub	r9,r11[0x0]
80007dc8:	b0 89       	st.b	r8[0x0],r9
80007dca:	5e fc       	retal	r12
80007dcc:	f4 0a 11 09 	rsub	r10,r10,9
80007dd0:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80007dd4:	17 f9       	ld.ub	r9,r11[0x7]
80007dd6:	b8 f9       	st.b	r12[0x7],r9
80007dd8:	17 e9       	ld.ub	r9,r11[0x6]
80007dda:	b8 e9       	st.b	r12[0x6],r9
80007ddc:	17 d9       	ld.ub	r9,r11[0x5]
80007dde:	b8 d9       	st.b	r12[0x5],r9
80007de0:	17 c9       	ld.ub	r9,r11[0x4]
80007de2:	b8 c9       	st.b	r12[0x4],r9
80007de4:	17 b9       	ld.ub	r9,r11[0x3]
80007de6:	b8 b9       	st.b	r12[0x3],r9
80007de8:	17 a9       	ld.ub	r9,r11[0x2]
80007dea:	b8 a9       	st.b	r12[0x2],r9
80007dec:	17 99       	ld.ub	r9,r11[0x1]
80007dee:	b8 99       	st.b	r12[0x1],r9
80007df0:	17 89       	ld.ub	r9,r11[0x0]
80007df2:	b8 89       	st.b	r12[0x0],r9
80007df4:	5e fc       	retal	r12
80007df6:	eb cd 40 c0 	pushm	r6-r7,lr
80007dfa:	18 99       	mov	r9,r12
80007dfc:	22 0a       	sub	r10,32
80007dfe:	b7 07       	ld.d	r6,r11++
80007e00:	b3 26       	st.d	r9++,r6
80007e02:	b7 07       	ld.d	r6,r11++
80007e04:	b3 26       	st.d	r9++,r6
80007e06:	b7 07       	ld.d	r6,r11++
80007e08:	b3 26       	st.d	r9++,r6
80007e0a:	b7 07       	ld.d	r6,r11++
80007e0c:	b3 26       	st.d	r9++,r6
80007e0e:	22 0a       	sub	r10,32
80007e10:	cf 74       	brge	80007dfe <memcpy+0x92>
80007e12:	2f 0a       	sub	r10,-16
80007e14:	c0 65       	brlt	80007e20 <memcpy+0xb4>
80007e16:	b7 07       	ld.d	r6,r11++
80007e18:	b3 26       	st.d	r9++,r6
80007e1a:	b7 07       	ld.d	r6,r11++
80007e1c:	b3 26       	st.d	r9++,r6
80007e1e:	21 0a       	sub	r10,16
80007e20:	5c 3a       	neg	r10
80007e22:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80007e26:	d7 03       	nop
80007e28:	d7 03       	nop
80007e2a:	f7 36 00 0e 	ld.ub	r6,r11[14]
80007e2e:	f3 66 00 0e 	st.b	r9[14],r6
80007e32:	f7 36 00 0d 	ld.ub	r6,r11[13]
80007e36:	f3 66 00 0d 	st.b	r9[13],r6
80007e3a:	f7 36 00 0c 	ld.ub	r6,r11[12]
80007e3e:	f3 66 00 0c 	st.b	r9[12],r6
80007e42:	f7 36 00 0b 	ld.ub	r6,r11[11]
80007e46:	f3 66 00 0b 	st.b	r9[11],r6
80007e4a:	f7 36 00 0a 	ld.ub	r6,r11[10]
80007e4e:	f3 66 00 0a 	st.b	r9[10],r6
80007e52:	f7 36 00 09 	ld.ub	r6,r11[9]
80007e56:	f3 66 00 09 	st.b	r9[9],r6
80007e5a:	f7 36 00 08 	ld.ub	r6,r11[8]
80007e5e:	f3 66 00 08 	st.b	r9[8],r6
80007e62:	f7 36 00 07 	ld.ub	r6,r11[7]
80007e66:	f3 66 00 07 	st.b	r9[7],r6
80007e6a:	f7 36 00 06 	ld.ub	r6,r11[6]
80007e6e:	f3 66 00 06 	st.b	r9[6],r6
80007e72:	f7 36 00 05 	ld.ub	r6,r11[5]
80007e76:	f3 66 00 05 	st.b	r9[5],r6
80007e7a:	f7 36 00 04 	ld.ub	r6,r11[4]
80007e7e:	f3 66 00 04 	st.b	r9[4],r6
80007e82:	f7 36 00 03 	ld.ub	r6,r11[3]
80007e86:	f3 66 00 03 	st.b	r9[3],r6
80007e8a:	f7 36 00 02 	ld.ub	r6,r11[2]
80007e8e:	f3 66 00 02 	st.b	r9[2],r6
80007e92:	f7 36 00 01 	ld.ub	r6,r11[1]
80007e96:	f3 66 00 01 	st.b	r9[1],r6
80007e9a:	f7 36 00 00 	ld.ub	r6,r11[0]
80007e9e:	f3 66 00 00 	st.b	r9[0],r6
80007ea2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007ea6:	20 1a       	sub	r10,1
80007ea8:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80007eac:	f8 0a 0b 09 	st.b	r12[r10],r9
80007eb0:	cf b1       	brne	80007ea6 <memcpy+0x13a>
80007eb2:	5e fc       	retal	r12

80007eb4 <__malloc_lock>:
80007eb4:	5e fc       	retal	r12

80007eb6 <__malloc_unlock>:
80007eb6:	5e fc       	retal	r12

80007eb8 <_sbrk_r>:
80007eb8:	d4 21       	pushm	r4-r7,lr
80007eba:	30 08       	mov	r8,0
80007ebc:	18 97       	mov	r7,r12
80007ebe:	e0 66 0c 40 	mov	r6,3136
80007ec2:	16 9c       	mov	r12,r11
80007ec4:	8d 08       	st.w	r6[0x0],r8
80007ec6:	c6 bc       	rcall	80007f9c <_sbrk>
80007ec8:	5b fc       	cp.w	r12,-1
80007eca:	c0 51       	brne	80007ed4 <_sbrk_r+0x1c>
80007ecc:	6c 08       	ld.w	r8,r6[0x0]
80007ece:	58 08       	cp.w	r8,0
80007ed0:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007ed4:	d8 22       	popm	r4-r7,pc
80007ed6:	d7 03       	nop

80007ed8 <_close>:
80007ed8:	30 28       	mov	r8,2
80007eda:	d6 73       	breakpoint
80007edc:	3f fc       	mov	r12,-1
80007ede:	35 8b       	mov	r11,88
80007ee0:	58 0c       	cp.w	r12,0
80007ee2:	5e 4c       	retge	r12
80007ee4:	e0 6a 0c 40 	mov	r10,3136
80007ee8:	95 0b       	st.w	r10[0x0],r11
80007eea:	5e fc       	retal	r12

80007eec <_lseek>:
80007eec:	30 58       	mov	r8,5
80007eee:	d6 73       	breakpoint
80007ef0:	3f fc       	mov	r12,-1
80007ef2:	35 8b       	mov	r11,88
80007ef4:	58 0c       	cp.w	r12,0
80007ef6:	5e 4c       	retge	r12
80007ef8:	e0 6a 0c 40 	mov	r10,3136
80007efc:	95 0b       	st.w	r10[0x0],r11
80007efe:	5e fc       	retal	r12

80007f00 <_read>:
80007f00:	30 38       	mov	r8,3
80007f02:	d6 73       	breakpoint
80007f04:	3f fc       	mov	r12,-1
80007f06:	35 8b       	mov	r11,88
80007f08:	58 0c       	cp.w	r12,0
80007f0a:	5e 4c       	retge	r12
80007f0c:	e0 6a 0c 40 	mov	r10,3136
80007f10:	95 0b       	st.w	r10[0x0],r11
80007f12:	5e fc       	retal	r12

80007f14 <_write>:
80007f14:	30 48       	mov	r8,4
80007f16:	d6 73       	breakpoint
80007f18:	3f fc       	mov	r12,-1
80007f1a:	35 8b       	mov	r11,88
80007f1c:	58 0c       	cp.w	r12,0
80007f1e:	5e 4c       	retge	r12
80007f20:	e0 6a 0c 40 	mov	r10,3136
80007f24:	95 0b       	st.w	r10[0x0],r11
80007f26:	5e fc       	retal	r12

80007f28 <isatty>:
80007f28:	30 b8       	mov	r8,11
80007f2a:	d6 73       	breakpoint
80007f2c:	3f fc       	mov	r12,-1
80007f2e:	35 8b       	mov	r11,88
80007f30:	58 0c       	cp.w	r12,0
80007f32:	5e 4c       	retge	r12
80007f34:	e0 6a 0c 40 	mov	r10,3136
80007f38:	95 0b       	st.w	r10[0x0],r11
80007f3a:	5e fc       	retal	r12

80007f3c <_fstat_host>:
80007f3c:	30 98       	mov	r8,9
80007f3e:	d6 73       	breakpoint
80007f40:	3f fc       	mov	r12,-1
80007f42:	35 8b       	mov	r11,88
80007f44:	58 0c       	cp.w	r12,0
80007f46:	5e 4c       	retge	r12
80007f48:	e0 6a 0c 40 	mov	r10,3136
80007f4c:	95 0b       	st.w	r10[0x0],r11
80007f4e:	5e fc       	retal	r12

80007f50 <_fstat>:
80007f50:	d4 21       	pushm	r4-r7,lr
80007f52:	21 0d       	sub	sp,64
80007f54:	16 97       	mov	r7,r11
80007f56:	1a 9b       	mov	r11,sp
80007f58:	cf 2f       	rcall	80007f3c <_fstat_host>
80007f5a:	c0 34       	brge	80007f60 <_fstat+0x10>
80007f5c:	3f fc       	mov	r12,-1
80007f5e:	c1 c8       	rjmp	80007f96 <_fstat+0x46>
80007f60:	40 08       	lddsp	r8,sp[0x0]
80007f62:	ae 08       	st.h	r7[0x0],r8
80007f64:	40 18       	lddsp	r8,sp[0x4]
80007f66:	ae 18       	st.h	r7[0x2],r8
80007f68:	40 28       	lddsp	r8,sp[0x8]
80007f6a:	8f 18       	st.w	r7[0x4],r8
80007f6c:	40 38       	lddsp	r8,sp[0xc]
80007f6e:	ae 48       	st.h	r7[0x8],r8
80007f70:	40 48       	lddsp	r8,sp[0x10]
80007f72:	ae 58       	st.h	r7[0xa],r8
80007f74:	40 58       	lddsp	r8,sp[0x14]
80007f76:	ae 68       	st.h	r7[0xc],r8
80007f78:	40 68       	lddsp	r8,sp[0x18]
80007f7a:	ae 78       	st.h	r7[0xe],r8
80007f7c:	40 88       	lddsp	r8,sp[0x20]
80007f7e:	8f 48       	st.w	r7[0x10],r8
80007f80:	40 a8       	lddsp	r8,sp[0x28]
80007f82:	8f b8       	st.w	r7[0x2c],r8
80007f84:	40 c8       	lddsp	r8,sp[0x30]
80007f86:	8f c8       	st.w	r7[0x30],r8
80007f88:	40 d8       	lddsp	r8,sp[0x34]
80007f8a:	8f 58       	st.w	r7[0x14],r8
80007f8c:	40 e8       	lddsp	r8,sp[0x38]
80007f8e:	30 0c       	mov	r12,0
80007f90:	8f 78       	st.w	r7[0x1c],r8
80007f92:	40 f8       	lddsp	r8,sp[0x3c]
80007f94:	8f 98       	st.w	r7[0x24],r8
80007f96:	2f 0d       	sub	sp,-64
80007f98:	d8 22       	popm	r4-r7,pc
80007f9a:	d7 03       	nop

80007f9c <_sbrk>:
80007f9c:	d4 01       	pushm	lr
80007f9e:	e0 68 0b a4 	mov	r8,2980
80007fa2:	70 09       	ld.w	r9,r8[0x0]
80007fa4:	58 09       	cp.w	r9,0
80007fa6:	c0 41       	brne	80007fae <_sbrk+0x12>
80007fa8:	e0 69 0c 48 	mov	r9,3144
80007fac:	91 09       	st.w	r8[0x0],r9
80007fae:	e0 69 0b a4 	mov	r9,2980
80007fb2:	e0 6a f0 00 	mov	r10,61440
80007fb6:	72 08       	ld.w	r8,r9[0x0]
80007fb8:	f0 0c 00 0c 	add	r12,r8,r12
80007fbc:	14 3c       	cp.w	r12,r10
80007fbe:	e0 8b 00 04 	brhi	80007fc6 <_sbrk+0x2a>
80007fc2:	93 0c       	st.w	r9[0x0],r12
80007fc4:	c0 58       	rjmp	80007fce <_sbrk+0x32>
80007fc6:	c2 9c       	rcall	80008018 <__errno>
80007fc8:	30 c8       	mov	r8,12
80007fca:	99 08       	st.w	r12[0x0],r8
80007fcc:	3f f8       	mov	r8,-1
80007fce:	10 9c       	mov	r12,r8
80007fd0:	d8 02       	popm	pc
80007fd2:	d7 03       	nop

80007fd4 <_vsprintf_r>:
80007fd4:	d4 01       	pushm	lr
80007fd6:	21 7d       	sub	sp,92
80007fd8:	e0 68 ff ff 	mov	r8,65535
80007fdc:	ea 18 7f ff 	orh	r8,0x7fff
80007fe0:	50 58       	stdsp	sp[0x14],r8
80007fe2:	50 28       	stdsp	sp[0x8],r8
80007fe4:	e0 68 02 08 	mov	r8,520
80007fe8:	ba 68       	st.h	sp[0xc],r8
80007fea:	3f f8       	mov	r8,-1
80007fec:	50 4b       	stdsp	sp[0x10],r11
80007fee:	50 0b       	stdsp	sp[0x0],r11
80007ff0:	ba 78       	st.h	sp[0xe],r8
80007ff2:	1a 9b       	mov	r11,sp
80007ff4:	e0 a0 02 b8 	rcall	80008564 <_vfprintf_r>
80007ff8:	30 09       	mov	r9,0
80007ffa:	40 08       	lddsp	r8,sp[0x0]
80007ffc:	b0 89       	st.b	r8[0x0],r9
80007ffe:	2e 9d       	sub	sp,-92
80008000:	d8 02       	popm	pc
80008002:	d7 03       	nop

80008004 <vsprintf>:
80008004:	d4 01       	pushm	lr
80008006:	e0 68 08 cc 	mov	r8,2252
8000800a:	14 99       	mov	r9,r10
8000800c:	16 9a       	mov	r10,r11
8000800e:	18 9b       	mov	r11,r12
80008010:	70 0c       	ld.w	r12,r8[0x0]
80008012:	ce 1f       	rcall	80007fd4 <_vsprintf_r>
80008014:	d8 02       	popm	pc
80008016:	d7 03       	nop

80008018 <__errno>:
80008018:	e0 68 08 cc 	mov	r8,2252
8000801c:	70 0c       	ld.w	r12,r8[0x0]
8000801e:	2f 4c       	sub	r12,-12
80008020:	5e fc       	retal	r12
80008022:	d7 03       	nop

80008024 <_malloc_trim_r>:
80008024:	d4 21       	pushm	r4-r7,lr
80008026:	16 95       	mov	r5,r11
80008028:	18 97       	mov	r7,r12
8000802a:	c4 5f       	rcall	80007eb4 <__malloc_lock>
8000802c:	e0 64 03 cc 	mov	r4,972
80008030:	68 28       	ld.w	r8,r4[0x8]
80008032:	70 16       	ld.w	r6,r8[0x4]
80008034:	e0 16 ff fc 	andl	r6,0xfffc
80008038:	ec c8 ff 91 	sub	r8,r6,-111
8000803c:	f0 05 01 05 	sub	r5,r8,r5
80008040:	e0 15 ff 80 	andl	r5,0xff80
80008044:	ea c5 00 80 	sub	r5,r5,128
80008048:	e0 45 00 7f 	cp.w	r5,127
8000804c:	e0 8a 00 22 	brle	80008090 <_malloc_trim_r+0x6c>
80008050:	30 0b       	mov	r11,0
80008052:	0e 9c       	mov	r12,r7
80008054:	c3 2f       	rcall	80007eb8 <_sbrk_r>
80008056:	68 28       	ld.w	r8,r4[0x8]
80008058:	0c 08       	add	r8,r6
8000805a:	10 3c       	cp.w	r12,r8
8000805c:	c1 a1       	brne	80008090 <_malloc_trim_r+0x6c>
8000805e:	ea 0b 11 00 	rsub	r11,r5,0
80008062:	0e 9c       	mov	r12,r7
80008064:	c2 af       	rcall	80007eb8 <_sbrk_r>
80008066:	5b fc       	cp.w	r12,-1
80008068:	c1 71       	brne	80008096 <_malloc_trim_r+0x72>
8000806a:	30 0b       	mov	r11,0
8000806c:	0e 9c       	mov	r12,r7
8000806e:	c2 5f       	rcall	80007eb8 <_sbrk_r>
80008070:	68 28       	ld.w	r8,r4[0x8]
80008072:	f8 08 01 09 	sub	r9,r12,r8
80008076:	58 f9       	cp.w	r9,15
80008078:	e0 8a 00 0c 	brle	80008090 <_malloc_trim_r+0x6c>
8000807c:	a1 a9       	sbr	r9,0x0
8000807e:	91 19       	st.w	r8[0x4],r9
80008080:	e0 68 07 d8 	mov	r8,2008
80008084:	70 09       	ld.w	r9,r8[0x0]
80008086:	e0 68 0b 7c 	mov	r8,2940
8000808a:	f8 09 01 09 	sub	r9,r12,r9
8000808e:	91 09       	st.w	r8[0x0],r9
80008090:	0e 9c       	mov	r12,r7
80008092:	c1 2f       	rcall	80007eb6 <__malloc_unlock>
80008094:	d8 2a       	popm	r4-r7,pc,r12=0
80008096:	68 28       	ld.w	r8,r4[0x8]
80008098:	0a 16       	sub	r6,r5
8000809a:	a1 a6       	sbr	r6,0x0
8000809c:	91 16       	st.w	r8[0x4],r6
8000809e:	e0 68 0b 7c 	mov	r8,2940
800080a2:	70 09       	ld.w	r9,r8[0x0]
800080a4:	0a 19       	sub	r9,r5
800080a6:	0e 9c       	mov	r12,r7
800080a8:	91 09       	st.w	r8[0x0],r9
800080aa:	c0 6f       	rcall	80007eb6 <__malloc_unlock>
800080ac:	da 2a       	popm	r4-r7,pc,r12=1
800080ae:	d7 03       	nop

800080b0 <_free_r>:
800080b0:	d4 21       	pushm	r4-r7,lr
800080b2:	16 96       	mov	r6,r11
800080b4:	18 97       	mov	r7,r12
800080b6:	58 0b       	cp.w	r11,0
800080b8:	e0 80 00 bd 	breq	80008232 <_free_r+0x182>
800080bc:	cf ce       	rcall	80007eb4 <__malloc_lock>
800080be:	20 86       	sub	r6,8
800080c0:	e0 6a 03 cc 	mov	r10,972
800080c4:	6c 18       	ld.w	r8,r6[0x4]
800080c6:	74 2e       	ld.w	lr,r10[0x8]
800080c8:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800080cc:	a1 c8       	cbr	r8,0x0
800080ce:	ec 08 00 09 	add	r9,r6,r8
800080d2:	72 1b       	ld.w	r11,r9[0x4]
800080d4:	e0 1b ff fc 	andl	r11,0xfffc
800080d8:	1c 39       	cp.w	r9,lr
800080da:	c1 d1       	brne	80008114 <_free_r+0x64>
800080dc:	f6 08 00 08 	add	r8,r11,r8
800080e0:	58 0c       	cp.w	r12,0
800080e2:	c0 81       	brne	800080f2 <_free_r+0x42>
800080e4:	6c 09       	ld.w	r9,r6[0x0]
800080e6:	12 16       	sub	r6,r9
800080e8:	12 08       	add	r8,r9
800080ea:	6c 3b       	ld.w	r11,r6[0xc]
800080ec:	6c 29       	ld.w	r9,r6[0x8]
800080ee:	97 29       	st.w	r11[0x8],r9
800080f0:	93 3b       	st.w	r9[0xc],r11
800080f2:	10 99       	mov	r9,r8
800080f4:	95 26       	st.w	r10[0x8],r6
800080f6:	a1 a9       	sbr	r9,0x0
800080f8:	8d 19       	st.w	r6[0x4],r9
800080fa:	e0 69 07 d4 	mov	r9,2004
800080fe:	72 09       	ld.w	r9,r9[0x0]
80008100:	12 38       	cp.w	r8,r9
80008102:	c0 63       	brcs	8000810e <_free_r+0x5e>
80008104:	e0 68 0b 78 	mov	r8,2936
80008108:	0e 9c       	mov	r12,r7
8000810a:	70 0b       	ld.w	r11,r8[0x0]
8000810c:	c8 cf       	rcall	80008024 <_malloc_trim_r>
8000810e:	0e 9c       	mov	r12,r7
80008110:	cd 3e       	rcall	80007eb6 <__malloc_unlock>
80008112:	d8 22       	popm	r4-r7,pc
80008114:	93 1b       	st.w	r9[0x4],r11
80008116:	58 0c       	cp.w	r12,0
80008118:	c0 30       	breq	8000811e <_free_r+0x6e>
8000811a:	30 0c       	mov	r12,0
8000811c:	c1 08       	rjmp	8000813c <_free_r+0x8c>
8000811e:	6c 0e       	ld.w	lr,r6[0x0]
80008120:	f4 c5 ff f8 	sub	r5,r10,-8
80008124:	1c 16       	sub	r6,lr
80008126:	1c 08       	add	r8,lr
80008128:	6c 2e       	ld.w	lr,r6[0x8]
8000812a:	0a 3e       	cp.w	lr,r5
8000812c:	f9 bc 00 01 	moveq	r12,1
80008130:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80008134:	eb fe 1a 02 	st.wne	r5[0x8],lr
80008138:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000813c:	f2 0b 00 0e 	add	lr,r9,r11
80008140:	7c 1e       	ld.w	lr,lr[0x4]
80008142:	ed be 00 00 	bld	lr,0x0
80008146:	c1 40       	breq	8000816e <_free_r+0xbe>
80008148:	16 08       	add	r8,r11
8000814a:	58 0c       	cp.w	r12,0
8000814c:	c0 d1       	brne	80008166 <_free_r+0xb6>
8000814e:	e0 6e 03 cc 	mov	lr,972
80008152:	72 2b       	ld.w	r11,r9[0x8]
80008154:	2f 8e       	sub	lr,-8
80008156:	1c 3b       	cp.w	r11,lr
80008158:	c0 71       	brne	80008166 <_free_r+0xb6>
8000815a:	97 36       	st.w	r11[0xc],r6
8000815c:	97 26       	st.w	r11[0x8],r6
8000815e:	8d 2b       	st.w	r6[0x8],r11
80008160:	8d 3b       	st.w	r6[0xc],r11
80008162:	30 1c       	mov	r12,1
80008164:	c0 58       	rjmp	8000816e <_free_r+0xbe>
80008166:	72 2b       	ld.w	r11,r9[0x8]
80008168:	72 39       	ld.w	r9,r9[0xc]
8000816a:	93 2b       	st.w	r9[0x8],r11
8000816c:	97 39       	st.w	r11[0xc],r9
8000816e:	10 99       	mov	r9,r8
80008170:	ec 08 09 08 	st.w	r6[r8],r8
80008174:	a1 a9       	sbr	r9,0x0
80008176:	8d 19       	st.w	r6[0x4],r9
80008178:	58 0c       	cp.w	r12,0
8000817a:	c5 a1       	brne	8000822e <_free_r+0x17e>
8000817c:	e0 48 01 ff 	cp.w	r8,511
80008180:	e0 8b 00 13 	brhi	800081a6 <_free_r+0xf6>
80008184:	a3 98       	lsr	r8,0x3
80008186:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000818a:	72 2b       	ld.w	r11,r9[0x8]
8000818c:	8d 39       	st.w	r6[0xc],r9
8000818e:	8d 2b       	st.w	r6[0x8],r11
80008190:	97 36       	st.w	r11[0xc],r6
80008192:	93 26       	st.w	r9[0x8],r6
80008194:	a3 48       	asr	r8,0x2
80008196:	74 19       	ld.w	r9,r10[0x4]
80008198:	30 1b       	mov	r11,1
8000819a:	f6 08 09 48 	lsl	r8,r11,r8
8000819e:	f3 e8 10 08 	or	r8,r9,r8
800081a2:	95 18       	st.w	r10[0x4],r8
800081a4:	c4 58       	rjmp	8000822e <_free_r+0x17e>
800081a6:	f0 0b 16 09 	lsr	r11,r8,0x9
800081aa:	58 4b       	cp.w	r11,4
800081ac:	e0 8b 00 06 	brhi	800081b8 <_free_r+0x108>
800081b0:	f0 0b 16 06 	lsr	r11,r8,0x6
800081b4:	2c 8b       	sub	r11,-56
800081b6:	c2 08       	rjmp	800081f6 <_free_r+0x146>
800081b8:	59 4b       	cp.w	r11,20
800081ba:	e0 8b 00 04 	brhi	800081c2 <_free_r+0x112>
800081be:	2a 5b       	sub	r11,-91
800081c0:	c1 b8       	rjmp	800081f6 <_free_r+0x146>
800081c2:	e0 4b 00 54 	cp.w	r11,84
800081c6:	e0 8b 00 06 	brhi	800081d2 <_free_r+0x122>
800081ca:	f0 0b 16 0c 	lsr	r11,r8,0xc
800081ce:	29 2b       	sub	r11,-110
800081d0:	c1 38       	rjmp	800081f6 <_free_r+0x146>
800081d2:	e0 4b 01 54 	cp.w	r11,340
800081d6:	e0 8b 00 06 	brhi	800081e2 <_free_r+0x132>
800081da:	f0 0b 16 0f 	lsr	r11,r8,0xf
800081de:	28 9b       	sub	r11,-119
800081e0:	c0 b8       	rjmp	800081f6 <_free_r+0x146>
800081e2:	e0 4b 05 54 	cp.w	r11,1364
800081e6:	e0 88 00 05 	brls	800081f0 <_free_r+0x140>
800081ea:	37 eb       	mov	r11,126
800081ec:	c0 58       	rjmp	800081f6 <_free_r+0x146>
800081ee:	d7 03       	nop
800081f0:	f0 0b 16 12 	lsr	r11,r8,0x12
800081f4:	28 4b       	sub	r11,-124
800081f6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800081fa:	78 29       	ld.w	r9,r12[0x8]
800081fc:	18 39       	cp.w	r9,r12
800081fe:	c0 e1       	brne	8000821a <_free_r+0x16a>
80008200:	74 18       	ld.w	r8,r10[0x4]
80008202:	a3 4b       	asr	r11,0x2
80008204:	30 1c       	mov	r12,1
80008206:	f8 0b 09 4b 	lsl	r11,r12,r11
8000820a:	f1 eb 10 0b 	or	r11,r8,r11
8000820e:	12 98       	mov	r8,r9
80008210:	95 1b       	st.w	r10[0x4],r11
80008212:	c0 a8       	rjmp	80008226 <_free_r+0x176>
80008214:	72 29       	ld.w	r9,r9[0x8]
80008216:	18 39       	cp.w	r9,r12
80008218:	c0 60       	breq	80008224 <_free_r+0x174>
8000821a:	72 1a       	ld.w	r10,r9[0x4]
8000821c:	e0 1a ff fc 	andl	r10,0xfffc
80008220:	14 38       	cp.w	r8,r10
80008222:	cf 93       	brcs	80008214 <_free_r+0x164>
80008224:	72 38       	ld.w	r8,r9[0xc]
80008226:	8d 38       	st.w	r6[0xc],r8
80008228:	8d 29       	st.w	r6[0x8],r9
8000822a:	93 36       	st.w	r9[0xc],r6
8000822c:	91 26       	st.w	r8[0x8],r6
8000822e:	0e 9c       	mov	r12,r7
80008230:	c4 3e       	rcall	80007eb6 <__malloc_unlock>
80008232:	d8 22       	popm	r4-r7,pc

80008234 <get_arg>:
80008234:	d4 31       	pushm	r0-r7,lr
80008236:	20 8d       	sub	sp,32
80008238:	fa c4 ff bc 	sub	r4,sp,-68
8000823c:	50 4b       	stdsp	sp[0x10],r11
8000823e:	68 2e       	ld.w	lr,r4[0x8]
80008240:	50 58       	stdsp	sp[0x14],r8
80008242:	12 96       	mov	r6,r9
80008244:	7c 0b       	ld.w	r11,lr[0x0]
80008246:	70 05       	ld.w	r5,r8[0x0]
80008248:	50 6e       	stdsp	sp[0x18],lr
8000824a:	58 0b       	cp.w	r11,0
8000824c:	f4 0b 17 00 	moveq	r11,r10
80008250:	68 03       	ld.w	r3,r4[0x0]
80008252:	68 11       	ld.w	r1,r4[0x4]
80008254:	40 49       	lddsp	r9,sp[0x10]
80008256:	30 08       	mov	r8,0
80008258:	c2 89       	rjmp	800084a8 <get_arg+0x274>
8000825a:	2f fb       	sub	r11,-1
8000825c:	32 5c       	mov	r12,37
8000825e:	17 8a       	ld.ub	r10,r11[0x0]
80008260:	f8 0a 18 00 	cp.b	r10,r12
80008264:	5f 1e       	srne	lr
80008266:	f0 0a 18 00 	cp.b	r10,r8
8000826a:	5f 1c       	srne	r12
8000826c:	fd ec 00 0c 	and	r12,lr,r12
80008270:	f0 0c 18 00 	cp.b	r12,r8
80008274:	cf 31       	brne	8000825a <get_arg+0x26>
80008276:	58 0a       	cp.w	r10,0
80008278:	e0 80 01 25 	breq	800084c2 <get_arg+0x28e>
8000827c:	30 0c       	mov	r12,0
8000827e:	3f fa       	mov	r10,-1
80008280:	18 90       	mov	r0,r12
80008282:	50 3a       	stdsp	sp[0xc],r10
80008284:	18 94       	mov	r4,r12
80008286:	18 92       	mov	r2,r12
80008288:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000828c:	16 97       	mov	r7,r11
8000828e:	50 7c       	stdsp	sp[0x1c],r12
80008290:	fe cc a9 bc 	sub	r12,pc,-22084
80008294:	0f 3a       	ld.ub	r10,r7++
80008296:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000829a:	40 7c       	lddsp	r12,sp[0x1c]
8000829c:	1c 0c       	add	r12,lr
8000829e:	fe ce aa 92 	sub	lr,pc,-21870
800082a2:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800082a6:	20 1e       	sub	lr,1
800082a8:	50 0e       	stdsp	sp[0x0],lr
800082aa:	fe ce ab 0a 	sub	lr,pc,-21750
800082ae:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800082b2:	50 7c       	stdsp	sp[0x1c],r12
800082b4:	40 0c       	lddsp	r12,sp[0x0]
800082b6:	58 7c       	cp.w	r12,7
800082b8:	e0 8b 00 f1 	brhi	8000849a <get_arg+0x266>
800082bc:	fe ce ac bc 	sub	lr,pc,-21316
800082c0:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800082c4:	36 8b       	mov	r11,104
800082c6:	f6 0a 18 00 	cp.b	r10,r11
800082ca:	e0 80 00 e8 	breq	8000849a <get_arg+0x266>
800082ce:	37 1b       	mov	r11,113
800082d0:	f6 0a 18 00 	cp.b	r10,r11
800082d4:	c0 70       	breq	800082e2 <get_arg+0xae>
800082d6:	34 cb       	mov	r11,76
800082d8:	f6 0a 18 00 	cp.b	r10,r11
800082dc:	c0 51       	brne	800082e6 <get_arg+0xb2>
800082de:	a3 b4       	sbr	r4,0x3
800082e0:	cd d8       	rjmp	8000849a <get_arg+0x266>
800082e2:	a5 b4       	sbr	r4,0x5
800082e4:	cd b8       	rjmp	8000849a <get_arg+0x266>
800082e6:	08 9a       	mov	r10,r4
800082e8:	0e 9b       	mov	r11,r7
800082ea:	a5 aa       	sbr	r10,0x4
800082ec:	17 3c       	ld.ub	r12,r11++
800082ee:	a5 b4       	sbr	r4,0x5
800082f0:	36 ce       	mov	lr,108
800082f2:	fc 0c 18 00 	cp.b	r12,lr
800082f6:	e0 80 00 d3 	breq	8000849c <get_arg+0x268>
800082fa:	14 94       	mov	r4,r10
800082fc:	cc f8       	rjmp	8000849a <get_arg+0x266>
800082fe:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80008302:	36 7c       	mov	r12,103
80008304:	f8 0a 18 00 	cp.b	r10,r12
80008308:	e0 8b 00 27 	brhi	80008356 <get_arg+0x122>
8000830c:	36 5b       	mov	r11,101
8000830e:	f6 0a 18 00 	cp.b	r10,r11
80008312:	c4 82       	brcc	800083a2 <get_arg+0x16e>
80008314:	34 fb       	mov	r11,79
80008316:	f6 0a 18 00 	cp.b	r10,r11
8000831a:	c4 80       	breq	800083aa <get_arg+0x176>
8000831c:	e0 8b 00 0c 	brhi	80008334 <get_arg+0x100>
80008320:	34 5b       	mov	r11,69
80008322:	f6 0a 18 00 	cp.b	r10,r11
80008326:	c3 e0       	breq	800083a2 <get_arg+0x16e>
80008328:	34 7b       	mov	r11,71
8000832a:	f6 0a 18 00 	cp.b	r10,r11
8000832e:	c3 a0       	breq	800083a2 <get_arg+0x16e>
80008330:	34 4b       	mov	r11,68
80008332:	c0 88       	rjmp	80008342 <get_arg+0x10e>
80008334:	35 8b       	mov	r11,88
80008336:	f6 0a 18 00 	cp.b	r10,r11
8000833a:	c2 c0       	breq	80008392 <get_arg+0x15e>
8000833c:	e0 8b 00 07 	brhi	8000834a <get_arg+0x116>
80008340:	35 5b       	mov	r11,85
80008342:	f6 0a 18 00 	cp.b	r10,r11
80008346:	c3 51       	brne	800083b0 <get_arg+0x17c>
80008348:	c3 18       	rjmp	800083aa <get_arg+0x176>
8000834a:	36 3b       	mov	r11,99
8000834c:	f6 0a 18 00 	cp.b	r10,r11
80008350:	c2 f0       	breq	800083ae <get_arg+0x17a>
80008352:	36 4b       	mov	r11,100
80008354:	c0 e8       	rjmp	80008370 <get_arg+0x13c>
80008356:	37 0b       	mov	r11,112
80008358:	f6 0a 18 00 	cp.b	r10,r11
8000835c:	c2 50       	breq	800083a6 <get_arg+0x172>
8000835e:	e0 8b 00 0d 	brhi	80008378 <get_arg+0x144>
80008362:	36 eb       	mov	r11,110
80008364:	f6 0a 18 00 	cp.b	r10,r11
80008368:	c1 f0       	breq	800083a6 <get_arg+0x172>
8000836a:	e0 8b 00 14 	brhi	80008392 <get_arg+0x15e>
8000836e:	36 9b       	mov	r11,105
80008370:	f6 0a 18 00 	cp.b	r10,r11
80008374:	c1 e1       	brne	800083b0 <get_arg+0x17c>
80008376:	c0 e8       	rjmp	80008392 <get_arg+0x15e>
80008378:	37 5b       	mov	r11,117
8000837a:	f6 0a 18 00 	cp.b	r10,r11
8000837e:	c0 a0       	breq	80008392 <get_arg+0x15e>
80008380:	37 8b       	mov	r11,120
80008382:	f6 0a 18 00 	cp.b	r10,r11
80008386:	c0 60       	breq	80008392 <get_arg+0x15e>
80008388:	37 3b       	mov	r11,115
8000838a:	f6 0a 18 00 	cp.b	r10,r11
8000838e:	c1 11       	brne	800083b0 <get_arg+0x17c>
80008390:	c0 b8       	rjmp	800083a6 <get_arg+0x172>
80008392:	ed b4 00 04 	bld	r4,0x4
80008396:	c0 a0       	breq	800083aa <get_arg+0x176>
80008398:	ed b4 00 05 	bld	r4,0x5
8000839c:	c0 91       	brne	800083ae <get_arg+0x17a>
8000839e:	30 20       	mov	r0,2
800083a0:	c0 88       	rjmp	800083b0 <get_arg+0x17c>
800083a2:	30 40       	mov	r0,4
800083a4:	c0 68       	rjmp	800083b0 <get_arg+0x17c>
800083a6:	30 30       	mov	r0,3
800083a8:	c0 48       	rjmp	800083b0 <get_arg+0x17c>
800083aa:	30 10       	mov	r0,1
800083ac:	c0 28       	rjmp	800083b0 <get_arg+0x17c>
800083ae:	30 00       	mov	r0,0
800083b0:	40 3b       	lddsp	r11,sp[0xc]
800083b2:	5b fb       	cp.w	r11,-1
800083b4:	c0 40       	breq	800083bc <get_arg+0x188>
800083b6:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800083ba:	c7 08       	rjmp	8000849a <get_arg+0x266>
800083bc:	58 60       	cp.w	r0,6
800083be:	e0 8b 00 6e 	brhi	8000849a <get_arg+0x266>
800083c2:	6c 0a       	ld.w	r10,r6[0x0]
800083c4:	ea cc ff ff 	sub	r12,r5,-1
800083c8:	fe ce ad a8 	sub	lr,pc,-21080
800083cc:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800083d0:	f4 cb ff f8 	sub	r11,r10,-8
800083d4:	8d 0b       	st.w	r6[0x0],r11
800083d6:	f4 ea 00 00 	ld.d	r10,r10[0]
800083da:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800083de:	c0 f8       	rjmp	800083fc <get_arg+0x1c8>
800083e0:	f4 cb ff fc 	sub	r11,r10,-4
800083e4:	8d 0b       	st.w	r6[0x0],r11
800083e6:	74 0a       	ld.w	r10,r10[0x0]
800083e8:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800083ec:	c0 88       	rjmp	800083fc <get_arg+0x1c8>
800083ee:	f4 cb ff f8 	sub	r11,r10,-8
800083f2:	8d 0b       	st.w	r6[0x0],r11
800083f4:	f4 ea 00 00 	ld.d	r10,r10[0]
800083f8:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800083fc:	0e 9b       	mov	r11,r7
800083fe:	18 95       	mov	r5,r12
80008400:	c4 e8       	rjmp	8000849c <get_arg+0x268>
80008402:	62 0a       	ld.w	r10,r1[0x0]
80008404:	5b fa       	cp.w	r10,-1
80008406:	c0 b1       	brne	8000841c <get_arg+0x1e8>
80008408:	50 19       	stdsp	sp[0x4],r9
8000840a:	50 28       	stdsp	sp[0x8],r8
8000840c:	e0 6a 00 80 	mov	r10,128
80008410:	30 0b       	mov	r11,0
80008412:	02 9c       	mov	r12,r1
80008414:	e0 a0 1a 3e 	rcall	8000b890 <memset>
80008418:	40 28       	lddsp	r8,sp[0x8]
8000841a:	40 19       	lddsp	r9,sp[0x4]
8000841c:	e4 cc 00 01 	sub	r12,r2,1
80008420:	0e 9b       	mov	r11,r7
80008422:	50 3c       	stdsp	sp[0xc],r12
80008424:	f2 0c 0c 49 	max	r9,r9,r12
80008428:	c3 a8       	rjmp	8000849c <get_arg+0x268>
8000842a:	62 0a       	ld.w	r10,r1[0x0]
8000842c:	5b fa       	cp.w	r10,-1
8000842e:	c0 b1       	brne	80008444 <get_arg+0x210>
80008430:	50 19       	stdsp	sp[0x4],r9
80008432:	50 28       	stdsp	sp[0x8],r8
80008434:	e0 6a 00 80 	mov	r10,128
80008438:	30 0b       	mov	r11,0
8000843a:	02 9c       	mov	r12,r1
8000843c:	e0 a0 1a 2a 	rcall	8000b890 <memset>
80008440:	40 28       	lddsp	r8,sp[0x8]
80008442:	40 19       	lddsp	r9,sp[0x4]
80008444:	20 12       	sub	r2,1
80008446:	30 0a       	mov	r10,0
80008448:	0e 9b       	mov	r11,r7
8000844a:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000844e:	f2 02 0c 49 	max	r9,r9,r2
80008452:	c2 58       	rjmp	8000849c <get_arg+0x268>
80008454:	16 97       	mov	r7,r11
80008456:	6c 0a       	ld.w	r10,r6[0x0]
80008458:	f4 cb ff fc 	sub	r11,r10,-4
8000845c:	8d 0b       	st.w	r6[0x0],r11
8000845e:	74 0a       	ld.w	r10,r10[0x0]
80008460:	0e 9b       	mov	r11,r7
80008462:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80008466:	2f f5       	sub	r5,-1
80008468:	c1 a8       	rjmp	8000849c <get_arg+0x268>
8000846a:	f4 c2 00 30 	sub	r2,r10,48
8000846e:	c0 68       	rjmp	8000847a <get_arg+0x246>
80008470:	e4 02 00 22 	add	r2,r2,r2<<0x2
80008474:	2f f7       	sub	r7,-1
80008476:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000847a:	0f 8a       	ld.ub	r10,r7[0x0]
8000847c:	58 0a       	cp.w	r10,0
8000847e:	c0 e0       	breq	8000849a <get_arg+0x266>
80008480:	23 0a       	sub	r10,48
80008482:	58 9a       	cp.w	r10,9
80008484:	fe 98 ff f6 	brls	80008470 <get_arg+0x23c>
80008488:	c0 98       	rjmp	8000849a <get_arg+0x266>
8000848a:	2f f7       	sub	r7,-1
8000848c:	0f 8a       	ld.ub	r10,r7[0x0]
8000848e:	58 0a       	cp.w	r10,0
80008490:	c0 50       	breq	8000849a <get_arg+0x266>
80008492:	23 0a       	sub	r10,48
80008494:	58 9a       	cp.w	r10,9
80008496:	fe 98 ff fa 	brls	8000848a <get_arg+0x256>
8000849a:	0e 9b       	mov	r11,r7
8000849c:	40 7c       	lddsp	r12,sp[0x1c]
8000849e:	30 ba       	mov	r10,11
800084a0:	f4 0c 18 00 	cp.b	r12,r10
800084a4:	fe 91 fe f2 	brne	80008288 <get_arg+0x54>
800084a8:	40 42       	lddsp	r2,sp[0x10]
800084aa:	17 8c       	ld.ub	r12,r11[0x0]
800084ac:	0a 32       	cp.w	r2,r5
800084ae:	5f 4a       	srge	r10
800084b0:	f0 0c 18 00 	cp.b	r12,r8
800084b4:	5f 1c       	srne	r12
800084b6:	f9 ea 00 0a 	and	r10,r12,r10
800084ba:	f0 0a 18 00 	cp.b	r10,r8
800084be:	fe 91 fe cf 	brne	8000825c <get_arg+0x28>
800084c2:	30 08       	mov	r8,0
800084c4:	40 4e       	lddsp	lr,sp[0x10]
800084c6:	17 8a       	ld.ub	r10,r11[0x0]
800084c8:	e2 05 00 21 	add	r1,r1,r5<<0x2
800084cc:	f0 0a 18 00 	cp.b	r10,r8
800084d0:	fc 09 17 10 	movne	r9,lr
800084d4:	e6 05 00 38 	add	r8,r3,r5<<0x3
800084d8:	06 9e       	mov	lr,r3
800084da:	c2 a8       	rjmp	8000852e <get_arg+0x2fa>
800084dc:	62 0a       	ld.w	r10,r1[0x0]
800084de:	58 3a       	cp.w	r10,3
800084e0:	c1 e0       	breq	8000851c <get_arg+0x2e8>
800084e2:	e0 89 00 07 	brgt	800084f0 <get_arg+0x2bc>
800084e6:	58 1a       	cp.w	r10,1
800084e8:	c1 a0       	breq	8000851c <get_arg+0x2e8>
800084ea:	58 2a       	cp.w	r10,2
800084ec:	c1 81       	brne	8000851c <get_arg+0x2e8>
800084ee:	c0 58       	rjmp	800084f8 <get_arg+0x2c4>
800084f0:	58 5a       	cp.w	r10,5
800084f2:	c0 c0       	breq	8000850a <get_arg+0x2d6>
800084f4:	c0 b5       	brlt	8000850a <get_arg+0x2d6>
800084f6:	c1 38       	rjmp	8000851c <get_arg+0x2e8>
800084f8:	6c 0a       	ld.w	r10,r6[0x0]
800084fa:	f4 cc ff f8 	sub	r12,r10,-8
800084fe:	8d 0c       	st.w	r6[0x0],r12
80008500:	f4 e2 00 00 	ld.d	r2,r10[0]
80008504:	f0 e3 00 00 	st.d	r8[0],r2
80008508:	c1 08       	rjmp	80008528 <get_arg+0x2f4>
8000850a:	6c 0a       	ld.w	r10,r6[0x0]
8000850c:	f4 cc ff f8 	sub	r12,r10,-8
80008510:	8d 0c       	st.w	r6[0x0],r12
80008512:	f4 e2 00 00 	ld.d	r2,r10[0]
80008516:	f0 e3 00 00 	st.d	r8[0],r2
8000851a:	c0 78       	rjmp	80008528 <get_arg+0x2f4>
8000851c:	6c 0a       	ld.w	r10,r6[0x0]
8000851e:	f4 cc ff fc 	sub	r12,r10,-4
80008522:	8d 0c       	st.w	r6[0x0],r12
80008524:	74 0a       	ld.w	r10,r10[0x0]
80008526:	91 0a       	st.w	r8[0x0],r10
80008528:	2f f5       	sub	r5,-1
8000852a:	2f 88       	sub	r8,-8
8000852c:	2f c1       	sub	r1,-4
8000852e:	12 35       	cp.w	r5,r9
80008530:	fe 9a ff d6 	brle	800084dc <get_arg+0x2a8>
80008534:	1c 93       	mov	r3,lr
80008536:	40 52       	lddsp	r2,sp[0x14]
80008538:	40 6e       	lddsp	lr,sp[0x18]
8000853a:	85 05       	st.w	r2[0x0],r5
8000853c:	9d 0b       	st.w	lr[0x0],r11
8000853e:	40 4b       	lddsp	r11,sp[0x10]
80008540:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80008544:	2f 8d       	sub	sp,-32
80008546:	d8 32       	popm	r0-r7,pc

80008548 <__sprint_r>:
80008548:	d4 21       	pushm	r4-r7,lr
8000854a:	14 97       	mov	r7,r10
8000854c:	74 28       	ld.w	r8,r10[0x8]
8000854e:	58 08       	cp.w	r8,0
80008550:	c0 41       	brne	80008558 <__sprint_r+0x10>
80008552:	95 18       	st.w	r10[0x4],r8
80008554:	10 9c       	mov	r12,r8
80008556:	d8 22       	popm	r4-r7,pc
80008558:	e0 a0 17 a2 	rcall	8000b49c <__sfvwrite_r>
8000855c:	30 08       	mov	r8,0
8000855e:	8f 18       	st.w	r7[0x4],r8
80008560:	8f 28       	st.w	r7[0x8],r8
80008562:	d8 22       	popm	r4-r7,pc

80008564 <_vfprintf_r>:
80008564:	d4 31       	pushm	r0-r7,lr
80008566:	fa cd 06 bc 	sub	sp,sp,1724
8000856a:	51 09       	stdsp	sp[0x40],r9
8000856c:	16 91       	mov	r1,r11
8000856e:	14 97       	mov	r7,r10
80008570:	18 95       	mov	r5,r12
80008572:	e0 a0 19 03 	rcall	8000b778 <_localeconv_r>
80008576:	78 0c       	ld.w	r12,r12[0x0]
80008578:	50 cc       	stdsp	sp[0x30],r12
8000857a:	58 05       	cp.w	r5,0
8000857c:	c0 70       	breq	8000858a <_vfprintf_r+0x26>
8000857e:	6a 68       	ld.w	r8,r5[0x18]
80008580:	58 08       	cp.w	r8,0
80008582:	c0 41       	brne	8000858a <_vfprintf_r+0x26>
80008584:	0a 9c       	mov	r12,r5
80008586:	e0 a0 17 3d 	rcall	8000b400 <__sinit>
8000858a:	fe c8 ab a6 	sub	r8,pc,-21594
8000858e:	10 31       	cp.w	r1,r8
80008590:	c0 31       	brne	80008596 <_vfprintf_r+0x32>
80008592:	6a 01       	ld.w	r1,r5[0x0]
80008594:	c0 c8       	rjmp	800085ac <_vfprintf_r+0x48>
80008596:	fe c8 ab 92 	sub	r8,pc,-21614
8000859a:	10 31       	cp.w	r1,r8
8000859c:	c0 31       	brne	800085a2 <_vfprintf_r+0x3e>
8000859e:	6a 11       	ld.w	r1,r5[0x4]
800085a0:	c0 68       	rjmp	800085ac <_vfprintf_r+0x48>
800085a2:	fe c8 ab 7e 	sub	r8,pc,-21634
800085a6:	10 31       	cp.w	r1,r8
800085a8:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800085ac:	82 68       	ld.sh	r8,r1[0xc]
800085ae:	ed b8 00 03 	bld	r8,0x3
800085b2:	c0 41       	brne	800085ba <_vfprintf_r+0x56>
800085b4:	62 48       	ld.w	r8,r1[0x10]
800085b6:	58 08       	cp.w	r8,0
800085b8:	c0 71       	brne	800085c6 <_vfprintf_r+0x62>
800085ba:	02 9b       	mov	r11,r1
800085bc:	0a 9c       	mov	r12,r5
800085be:	e0 a0 0f 5d 	rcall	8000a478 <__swsetup_r>
800085c2:	e0 81 0f 54 	brne	8000a46a <_vfprintf_r+0x1f06>
800085c6:	82 68       	ld.sh	r8,r1[0xc]
800085c8:	10 99       	mov	r9,r8
800085ca:	e2 19 00 1a 	andl	r9,0x1a,COH
800085ce:	58 a9       	cp.w	r9,10
800085d0:	c3 c1       	brne	80008648 <_vfprintf_r+0xe4>
800085d2:	82 79       	ld.sh	r9,r1[0xe]
800085d4:	30 0a       	mov	r10,0
800085d6:	f4 09 19 00 	cp.h	r9,r10
800085da:	c3 75       	brlt	80008648 <_vfprintf_r+0xe4>
800085dc:	a1 d8       	cbr	r8,0x1
800085de:	fb 58 05 d0 	st.h	sp[1488],r8
800085e2:	62 88       	ld.w	r8,r1[0x20]
800085e4:	fb 48 05 e4 	st.w	sp[1508],r8
800085e8:	62 a8       	ld.w	r8,r1[0x28]
800085ea:	fb 48 05 ec 	st.w	sp[1516],r8
800085ee:	fa c8 ff bc 	sub	r8,sp,-68
800085f2:	fb 48 05 d4 	st.w	sp[1492],r8
800085f6:	fb 48 05 c4 	st.w	sp[1476],r8
800085fa:	e0 68 04 00 	mov	r8,1024
800085fe:	fb 48 05 d8 	st.w	sp[1496],r8
80008602:	fb 48 05 cc 	st.w	sp[1484],r8
80008606:	30 08       	mov	r8,0
80008608:	fb 59 05 d2 	st.h	sp[1490],r9
8000860c:	0e 9a       	mov	r10,r7
8000860e:	41 09       	lddsp	r9,sp[0x40]
80008610:	fa c7 fa 3c 	sub	r7,sp,-1476
80008614:	fb 48 05 dc 	st.w	sp[1500],r8
80008618:	0a 9c       	mov	r12,r5
8000861a:	0e 9b       	mov	r11,r7
8000861c:	ca 4f       	rcall	80008564 <_vfprintf_r>
8000861e:	50 bc       	stdsp	sp[0x2c],r12
80008620:	c0 95       	brlt	80008632 <_vfprintf_r+0xce>
80008622:	0e 9b       	mov	r11,r7
80008624:	0a 9c       	mov	r12,r5
80008626:	e0 a0 16 15 	rcall	8000b250 <_fflush_r>
8000862a:	40 be       	lddsp	lr,sp[0x2c]
8000862c:	f9 be 01 ff 	movne	lr,-1
80008630:	50 be       	stdsp	sp[0x2c],lr
80008632:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80008636:	ed b8 00 06 	bld	r8,0x6
8000863a:	e0 81 0f 1a 	brne	8000a46e <_vfprintf_r+0x1f0a>
8000863e:	82 68       	ld.sh	r8,r1[0xc]
80008640:	a7 a8       	sbr	r8,0x6
80008642:	a2 68       	st.h	r1[0xc],r8
80008644:	e0 8f 0f 15 	bral	8000a46e <_vfprintf_r+0x1f0a>
80008648:	30 08       	mov	r8,0
8000864a:	fb 48 06 b4 	st.w	sp[1716],r8
8000864e:	fb 48 06 90 	st.w	sp[1680],r8
80008652:	fb 48 06 8c 	st.w	sp[1676],r8
80008656:	fb 48 06 b0 	st.w	sp[1712],r8
8000865a:	30 08       	mov	r8,0
8000865c:	30 09       	mov	r9,0
8000865e:	50 a7       	stdsp	sp[0x28],r7
80008660:	50 78       	stdsp	sp[0x1c],r8
80008662:	fa c3 f9 e0 	sub	r3,sp,-1568
80008666:	3f f8       	mov	r8,-1
80008668:	50 59       	stdsp	sp[0x14],r9
8000866a:	fb 43 06 88 	st.w	sp[1672],r3
8000866e:	fb 48 05 44 	st.w	sp[1348],r8
80008672:	12 9c       	mov	r12,r9
80008674:	50 69       	stdsp	sp[0x18],r9
80008676:	50 d9       	stdsp	sp[0x34],r9
80008678:	50 e9       	stdsp	sp[0x38],r9
8000867a:	50 b9       	stdsp	sp[0x2c],r9
8000867c:	12 97       	mov	r7,r9
8000867e:	0a 94       	mov	r4,r5
80008680:	40 a2       	lddsp	r2,sp[0x28]
80008682:	32 5a       	mov	r10,37
80008684:	30 08       	mov	r8,0
80008686:	c0 28       	rjmp	8000868a <_vfprintf_r+0x126>
80008688:	2f f2       	sub	r2,-1
8000868a:	05 89       	ld.ub	r9,r2[0x0]
8000868c:	f0 09 18 00 	cp.b	r9,r8
80008690:	5f 1b       	srne	r11
80008692:	f4 09 18 00 	cp.b	r9,r10
80008696:	5f 19       	srne	r9
80008698:	f3 eb 00 0b 	and	r11,r9,r11
8000869c:	f0 0b 18 00 	cp.b	r11,r8
800086a0:	cf 41       	brne	80008688 <_vfprintf_r+0x124>
800086a2:	40 ab       	lddsp	r11,sp[0x28]
800086a4:	e4 0b 01 06 	sub	r6,r2,r11
800086a8:	c1 e0       	breq	800086e4 <_vfprintf_r+0x180>
800086aa:	fa f8 06 90 	ld.w	r8,sp[1680]
800086ae:	0c 08       	add	r8,r6
800086b0:	87 0b       	st.w	r3[0x0],r11
800086b2:	fb 48 06 90 	st.w	sp[1680],r8
800086b6:	87 16       	st.w	r3[0x4],r6
800086b8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800086bc:	2f f8       	sub	r8,-1
800086be:	fb 48 06 8c 	st.w	sp[1676],r8
800086c2:	58 78       	cp.w	r8,7
800086c4:	e0 89 00 04 	brgt	800086cc <_vfprintf_r+0x168>
800086c8:	2f 83       	sub	r3,-8
800086ca:	c0 a8       	rjmp	800086de <_vfprintf_r+0x17a>
800086cc:	fa ca f9 78 	sub	r10,sp,-1672
800086d0:	02 9b       	mov	r11,r1
800086d2:	08 9c       	mov	r12,r4
800086d4:	c3 af       	rcall	80008548 <__sprint_r>
800086d6:	e0 81 0e c6 	brne	8000a462 <_vfprintf_r+0x1efe>
800086da:	fa c3 f9 e0 	sub	r3,sp,-1568
800086de:	40 ba       	lddsp	r10,sp[0x2c]
800086e0:	0c 0a       	add	r10,r6
800086e2:	50 ba       	stdsp	sp[0x2c],r10
800086e4:	05 89       	ld.ub	r9,r2[0x0]
800086e6:	30 08       	mov	r8,0
800086e8:	f0 09 18 00 	cp.b	r9,r8
800086ec:	e0 80 0e aa 	breq	8000a440 <_vfprintf_r+0x1edc>
800086f0:	30 09       	mov	r9,0
800086f2:	fb 68 06 bb 	st.b	sp[1723],r8
800086f6:	0e 96       	mov	r6,r7
800086f8:	e4 c8 ff ff 	sub	r8,r2,-1
800086fc:	3f fe       	mov	lr,-1
800086fe:	50 93       	stdsp	sp[0x24],r3
80008700:	50 41       	stdsp	sp[0x10],r1
80008702:	0e 93       	mov	r3,r7
80008704:	04 91       	mov	r1,r2
80008706:	50 89       	stdsp	sp[0x20],r9
80008708:	50 a8       	stdsp	sp[0x28],r8
8000870a:	50 2e       	stdsp	sp[0x8],lr
8000870c:	50 39       	stdsp	sp[0xc],r9
8000870e:	12 95       	mov	r5,r9
80008710:	12 90       	mov	r0,r9
80008712:	10 97       	mov	r7,r8
80008714:	08 92       	mov	r2,r4
80008716:	c0 78       	rjmp	80008724 <_vfprintf_r+0x1c0>
80008718:	3f fc       	mov	r12,-1
8000871a:	08 97       	mov	r7,r4
8000871c:	50 2c       	stdsp	sp[0x8],r12
8000871e:	c0 38       	rjmp	80008724 <_vfprintf_r+0x1c0>
80008720:	30 0b       	mov	r11,0
80008722:	50 3b       	stdsp	sp[0xc],r11
80008724:	0f 38       	ld.ub	r8,r7++
80008726:	c0 28       	rjmp	8000872a <_vfprintf_r+0x1c6>
80008728:	12 90       	mov	r0,r9
8000872a:	f0 c9 00 20 	sub	r9,r8,32
8000872e:	e0 49 00 58 	cp.w	r9,88
80008732:	e0 8b 0a 30 	brhi	80009b92 <_vfprintf_r+0x162e>
80008736:	fe ca b0 fa 	sub	r10,pc,-20230
8000873a:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000873e:	50 a7       	stdsp	sp[0x28],r7
80008740:	50 80       	stdsp	sp[0x20],r0
80008742:	0c 97       	mov	r7,r6
80008744:	04 94       	mov	r4,r2
80008746:	06 96       	mov	r6,r3
80008748:	02 92       	mov	r2,r1
8000874a:	fe c9 ae d2 	sub	r9,pc,-20782
8000874e:	40 93       	lddsp	r3,sp[0x24]
80008750:	10 90       	mov	r0,r8
80008752:	40 41       	lddsp	r1,sp[0x10]
80008754:	50 d9       	stdsp	sp[0x34],r9
80008756:	e0 8f 08 8e 	bral	80009872 <_vfprintf_r+0x130e>
8000875a:	30 08       	mov	r8,0
8000875c:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80008760:	f0 09 18 00 	cp.b	r9,r8
80008764:	ce 01       	brne	80008724 <_vfprintf_r+0x1c0>
80008766:	32 08       	mov	r8,32
80008768:	c6 e8       	rjmp	80008844 <_vfprintf_r+0x2e0>
8000876a:	a1 a5       	sbr	r5,0x0
8000876c:	cd cb       	rjmp	80008724 <_vfprintf_r+0x1c0>
8000876e:	0f 89       	ld.ub	r9,r7[0x0]
80008770:	f2 c8 00 30 	sub	r8,r9,48
80008774:	58 98       	cp.w	r8,9
80008776:	e0 8b 00 1d 	brhi	800087b0 <_vfprintf_r+0x24c>
8000877a:	ee c8 ff ff 	sub	r8,r7,-1
8000877e:	30 0b       	mov	r11,0
80008780:	23 09       	sub	r9,48
80008782:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80008786:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000878a:	11 39       	ld.ub	r9,r8++
8000878c:	f2 ca 00 30 	sub	r10,r9,48
80008790:	58 9a       	cp.w	r10,9
80008792:	fe 98 ff f7 	brls	80008780 <_vfprintf_r+0x21c>
80008796:	e0 49 00 24 	cp.w	r9,36
8000879a:	cc 31       	brne	80008720 <_vfprintf_r+0x1bc>
8000879c:	e0 4b 00 20 	cp.w	r11,32
800087a0:	e0 89 0e 60 	brgt	8000a460 <_vfprintf_r+0x1efc>
800087a4:	20 1b       	sub	r11,1
800087a6:	fa f9 06 b4 	ld.w	r9,sp[1716]
800087aa:	12 3b       	cp.w	r11,r9
800087ac:	c0 95       	brlt	800087be <_vfprintf_r+0x25a>
800087ae:	c1 08       	rjmp	800087ce <_vfprintf_r+0x26a>
800087b0:	fa f9 06 b4 	ld.w	r9,sp[1716]
800087b4:	ec ca ff ff 	sub	r10,r6,-1
800087b8:	12 36       	cp.w	r6,r9
800087ba:	c1 f5       	brlt	800087f8 <_vfprintf_r+0x294>
800087bc:	c2 68       	rjmp	80008808 <_vfprintf_r+0x2a4>
800087be:	fa ce f9 44 	sub	lr,sp,-1724
800087c2:	10 97       	mov	r7,r8
800087c4:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
800087c8:	f6 f0 fd 88 	ld.w	r0,r11[-632]
800087cc:	c3 58       	rjmp	80008836 <_vfprintf_r+0x2d2>
800087ce:	10 97       	mov	r7,r8
800087d0:	fa c8 f9 50 	sub	r8,sp,-1712
800087d4:	1a d8       	st.w	--sp,r8
800087d6:	fa c8 fa b8 	sub	r8,sp,-1352
800087da:	1a d8       	st.w	--sp,r8
800087dc:	fa c8 fb b4 	sub	r8,sp,-1100
800087e0:	02 9a       	mov	r10,r1
800087e2:	1a d8       	st.w	--sp,r8
800087e4:	04 9c       	mov	r12,r2
800087e6:	fa c8 f9 40 	sub	r8,sp,-1728
800087ea:	fa c9 ff b4 	sub	r9,sp,-76
800087ee:	fe b0 fd 23 	rcall	80008234 <get_arg>
800087f2:	2f dd       	sub	sp,-12
800087f4:	78 00       	ld.w	r0,r12[0x0]
800087f6:	c2 08       	rjmp	80008836 <_vfprintf_r+0x2d2>
800087f8:	fa cc f9 44 	sub	r12,sp,-1724
800087fc:	14 96       	mov	r6,r10
800087fe:	f8 03 00 38 	add	r8,r12,r3<<0x3
80008802:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80008806:	c1 88       	rjmp	80008836 <_vfprintf_r+0x2d2>
80008808:	41 08       	lddsp	r8,sp[0x40]
8000880a:	59 f9       	cp.w	r9,31
8000880c:	e0 89 00 11 	brgt	8000882e <_vfprintf_r+0x2ca>
80008810:	f0 cb ff fc 	sub	r11,r8,-4
80008814:	51 0b       	stdsp	sp[0x40],r11
80008816:	70 00       	ld.w	r0,r8[0x0]
80008818:	fa cb f9 44 	sub	r11,sp,-1724
8000881c:	f6 09 00 38 	add	r8,r11,r9<<0x3
80008820:	f1 40 fd 88 	st.w	r8[-632],r0
80008824:	2f f9       	sub	r9,-1
80008826:	14 96       	mov	r6,r10
80008828:	fb 49 06 b4 	st.w	sp[1716],r9
8000882c:	c0 58       	rjmp	80008836 <_vfprintf_r+0x2d2>
8000882e:	70 00       	ld.w	r0,r8[0x0]
80008830:	14 96       	mov	r6,r10
80008832:	2f c8       	sub	r8,-4
80008834:	51 08       	stdsp	sp[0x40],r8
80008836:	58 00       	cp.w	r0,0
80008838:	fe 94 ff 76 	brge	80008724 <_vfprintf_r+0x1c0>
8000883c:	5c 30       	neg	r0
8000883e:	a3 a5       	sbr	r5,0x2
80008840:	c7 2b       	rjmp	80008724 <_vfprintf_r+0x1c0>
80008842:	32 b8       	mov	r8,43
80008844:	fb 68 06 bb 	st.b	sp[1723],r8
80008848:	c6 eb       	rjmp	80008724 <_vfprintf_r+0x1c0>
8000884a:	0f 38       	ld.ub	r8,r7++
8000884c:	e0 48 00 2a 	cp.w	r8,42
80008850:	c0 30       	breq	80008856 <_vfprintf_r+0x2f2>
80008852:	30 09       	mov	r9,0
80008854:	c7 98       	rjmp	80008946 <_vfprintf_r+0x3e2>
80008856:	0f 88       	ld.ub	r8,r7[0x0]
80008858:	f0 c9 00 30 	sub	r9,r8,48
8000885c:	58 99       	cp.w	r9,9
8000885e:	e0 8b 00 1f 	brhi	8000889c <_vfprintf_r+0x338>
80008862:	ee c4 ff ff 	sub	r4,r7,-1
80008866:	30 0b       	mov	r11,0
80008868:	23 08       	sub	r8,48
8000886a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000886e:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80008872:	09 38       	ld.ub	r8,r4++
80008874:	f0 c9 00 30 	sub	r9,r8,48
80008878:	58 99       	cp.w	r9,9
8000887a:	fe 98 ff f7 	brls	80008868 <_vfprintf_r+0x304>
8000887e:	e0 48 00 24 	cp.w	r8,36
80008882:	fe 91 ff 4f 	brne	80008720 <_vfprintf_r+0x1bc>
80008886:	e0 4b 00 20 	cp.w	r11,32
8000888a:	e0 89 0d eb 	brgt	8000a460 <_vfprintf_r+0x1efc>
8000888e:	20 1b       	sub	r11,1
80008890:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008894:	10 3b       	cp.w	r11,r8
80008896:	c0 a5       	brlt	800088aa <_vfprintf_r+0x346>
80008898:	c1 18       	rjmp	800088ba <_vfprintf_r+0x356>
8000889a:	d7 03       	nop
8000889c:	fa fa 06 b4 	ld.w	r10,sp[1716]
800088a0:	ec c9 ff ff 	sub	r9,r6,-1
800088a4:	14 36       	cp.w	r6,r10
800088a6:	c1 f5       	brlt	800088e4 <_vfprintf_r+0x380>
800088a8:	c2 88       	rjmp	800088f8 <_vfprintf_r+0x394>
800088aa:	fa ca f9 44 	sub	r10,sp,-1724
800088ae:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
800088b2:	f6 fb fd 88 	ld.w	r11,r11[-632]
800088b6:	50 2b       	stdsp	sp[0x8],r11
800088b8:	c3 c8       	rjmp	80008930 <_vfprintf_r+0x3cc>
800088ba:	fa c8 f9 50 	sub	r8,sp,-1712
800088be:	1a d8       	st.w	--sp,r8
800088c0:	fa c8 fa b8 	sub	r8,sp,-1352
800088c4:	1a d8       	st.w	--sp,r8
800088c6:	fa c8 fb b4 	sub	r8,sp,-1100
800088ca:	02 9a       	mov	r10,r1
800088cc:	1a d8       	st.w	--sp,r8
800088ce:	04 9c       	mov	r12,r2
800088d0:	fa c8 f9 40 	sub	r8,sp,-1728
800088d4:	fa c9 ff b4 	sub	r9,sp,-76
800088d8:	fe b0 fc ae 	rcall	80008234 <get_arg>
800088dc:	2f dd       	sub	sp,-12
800088de:	78 0c       	ld.w	r12,r12[0x0]
800088e0:	50 2c       	stdsp	sp[0x8],r12
800088e2:	c2 78       	rjmp	80008930 <_vfprintf_r+0x3cc>
800088e4:	12 96       	mov	r6,r9
800088e6:	0e 94       	mov	r4,r7
800088e8:	fa c9 f9 44 	sub	r9,sp,-1724
800088ec:	f2 03 00 38 	add	r8,r9,r3<<0x3
800088f0:	f0 f8 fd 88 	ld.w	r8,r8[-632]
800088f4:	50 28       	stdsp	sp[0x8],r8
800088f6:	c1 d8       	rjmp	80008930 <_vfprintf_r+0x3cc>
800088f8:	41 08       	lddsp	r8,sp[0x40]
800088fa:	59 fa       	cp.w	r10,31
800088fc:	e0 89 00 14 	brgt	80008924 <_vfprintf_r+0x3c0>
80008900:	f0 cb ff fc 	sub	r11,r8,-4
80008904:	70 08       	ld.w	r8,r8[0x0]
80008906:	51 0b       	stdsp	sp[0x40],r11
80008908:	50 28       	stdsp	sp[0x8],r8
8000890a:	fa c6 f9 44 	sub	r6,sp,-1724
8000890e:	40 2e       	lddsp	lr,sp[0x8]
80008910:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80008914:	f1 4e fd 88 	st.w	r8[-632],lr
80008918:	2f fa       	sub	r10,-1
8000891a:	0e 94       	mov	r4,r7
8000891c:	fb 4a 06 b4 	st.w	sp[1716],r10
80008920:	12 96       	mov	r6,r9
80008922:	c0 78       	rjmp	80008930 <_vfprintf_r+0x3cc>
80008924:	70 0c       	ld.w	r12,r8[0x0]
80008926:	0e 94       	mov	r4,r7
80008928:	2f c8       	sub	r8,-4
8000892a:	50 2c       	stdsp	sp[0x8],r12
8000892c:	12 96       	mov	r6,r9
8000892e:	51 08       	stdsp	sp[0x40],r8
80008930:	40 2b       	lddsp	r11,sp[0x8]
80008932:	58 0b       	cp.w	r11,0
80008934:	fe 95 fe f2 	brlt	80008718 <_vfprintf_r+0x1b4>
80008938:	08 97       	mov	r7,r4
8000893a:	cf 5a       	rjmp	80008724 <_vfprintf_r+0x1c0>
8000893c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80008940:	0f 38       	ld.ub	r8,r7++
80008942:	f4 09 00 19 	add	r9,r10,r9<<0x1
80008946:	f0 ca 00 30 	sub	r10,r8,48
8000894a:	58 9a       	cp.w	r10,9
8000894c:	fe 98 ff f8 	brls	8000893c <_vfprintf_r+0x3d8>
80008950:	3f fa       	mov	r10,-1
80008952:	f2 0a 0c 49 	max	r9,r9,r10
80008956:	50 29       	stdsp	sp[0x8],r9
80008958:	ce 9a       	rjmp	8000872a <_vfprintf_r+0x1c6>
8000895a:	a7 b5       	sbr	r5,0x7
8000895c:	ce 4a       	rjmp	80008724 <_vfprintf_r+0x1c0>
8000895e:	30 09       	mov	r9,0
80008960:	23 08       	sub	r8,48
80008962:	f2 09 00 29 	add	r9,r9,r9<<0x2
80008966:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000896a:	0f 38       	ld.ub	r8,r7++
8000896c:	f0 ca 00 30 	sub	r10,r8,48
80008970:	58 9a       	cp.w	r10,9
80008972:	fe 98 ff f7 	brls	80008960 <_vfprintf_r+0x3fc>
80008976:	e0 48 00 24 	cp.w	r8,36
8000897a:	fe 91 fe d7 	brne	80008728 <_vfprintf_r+0x1c4>
8000897e:	e0 49 00 20 	cp.w	r9,32
80008982:	e0 89 0d 6f 	brgt	8000a460 <_vfprintf_r+0x1efc>
80008986:	f2 c3 00 01 	sub	r3,r9,1
8000898a:	30 19       	mov	r9,1
8000898c:	50 39       	stdsp	sp[0xc],r9
8000898e:	cc ba       	rjmp	80008724 <_vfprintf_r+0x1c0>
80008990:	a3 b5       	sbr	r5,0x3
80008992:	cc 9a       	rjmp	80008724 <_vfprintf_r+0x1c0>
80008994:	a7 a5       	sbr	r5,0x6
80008996:	cc 7a       	rjmp	80008724 <_vfprintf_r+0x1c0>
80008998:	0a 98       	mov	r8,r5
8000899a:	a5 b5       	sbr	r5,0x5
8000899c:	a5 a8       	sbr	r8,0x4
8000899e:	0f 89       	ld.ub	r9,r7[0x0]
800089a0:	36 ce       	mov	lr,108
800089a2:	fc 09 18 00 	cp.b	r9,lr
800089a6:	f7 b7 00 ff 	subeq	r7,-1
800089aa:	f0 05 17 10 	movne	r5,r8
800089ae:	cb ba       	rjmp	80008724 <_vfprintf_r+0x1c0>
800089b0:	a5 b5       	sbr	r5,0x5
800089b2:	cb 9a       	rjmp	80008724 <_vfprintf_r+0x1c0>
800089b4:	50 a7       	stdsp	sp[0x28],r7
800089b6:	50 80       	stdsp	sp[0x20],r0
800089b8:	0c 97       	mov	r7,r6
800089ba:	10 90       	mov	r0,r8
800089bc:	06 96       	mov	r6,r3
800089be:	04 94       	mov	r4,r2
800089c0:	40 93       	lddsp	r3,sp[0x24]
800089c2:	02 92       	mov	r2,r1
800089c4:	0e 99       	mov	r9,r7
800089c6:	40 41       	lddsp	r1,sp[0x10]
800089c8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800089cc:	40 3c       	lddsp	r12,sp[0xc]
800089ce:	58 0c       	cp.w	r12,0
800089d0:	c1 d0       	breq	80008a0a <_vfprintf_r+0x4a6>
800089d2:	10 36       	cp.w	r6,r8
800089d4:	c0 64       	brge	800089e0 <_vfprintf_r+0x47c>
800089d6:	fa cb f9 44 	sub	r11,sp,-1724
800089da:	f6 06 00 36 	add	r6,r11,r6<<0x3
800089de:	c1 d8       	rjmp	80008a18 <_vfprintf_r+0x4b4>
800089e0:	fa c8 f9 50 	sub	r8,sp,-1712
800089e4:	1a d8       	st.w	--sp,r8
800089e6:	fa c8 fa b8 	sub	r8,sp,-1352
800089ea:	1a d8       	st.w	--sp,r8
800089ec:	fa c8 fb b4 	sub	r8,sp,-1100
800089f0:	1a d8       	st.w	--sp,r8
800089f2:	fa c8 f9 40 	sub	r8,sp,-1728
800089f6:	fa c9 ff b4 	sub	r9,sp,-76
800089fa:	04 9a       	mov	r10,r2
800089fc:	0c 9b       	mov	r11,r6
800089fe:	08 9c       	mov	r12,r4
80008a00:	fe b0 fc 1a 	rcall	80008234 <get_arg>
80008a04:	2f dd       	sub	sp,-12
80008a06:	19 b8       	ld.ub	r8,r12[0x3]
80008a08:	c2 28       	rjmp	80008a4c <_vfprintf_r+0x4e8>
80008a0a:	2f f7       	sub	r7,-1
80008a0c:	10 39       	cp.w	r9,r8
80008a0e:	c0 84       	brge	80008a1e <_vfprintf_r+0x4ba>
80008a10:	fa ca f9 44 	sub	r10,sp,-1724
80008a14:	f4 06 00 36 	add	r6,r10,r6<<0x3
80008a18:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80008a1c:	c1 88       	rjmp	80008a4c <_vfprintf_r+0x4e8>
80008a1e:	41 09       	lddsp	r9,sp[0x40]
80008a20:	59 f8       	cp.w	r8,31
80008a22:	e0 89 00 12 	brgt	80008a46 <_vfprintf_r+0x4e2>
80008a26:	f2 ca ff fc 	sub	r10,r9,-4
80008a2a:	51 0a       	stdsp	sp[0x40],r10
80008a2c:	72 09       	ld.w	r9,r9[0x0]
80008a2e:	fa c6 f9 44 	sub	r6,sp,-1724
80008a32:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80008a36:	2f f8       	sub	r8,-1
80008a38:	f5 49 fd 88 	st.w	r10[-632],r9
80008a3c:	fb 48 06 b4 	st.w	sp[1716],r8
80008a40:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80008a44:	c0 48       	rjmp	80008a4c <_vfprintf_r+0x4e8>
80008a46:	13 b8       	ld.ub	r8,r9[0x3]
80008a48:	2f c9       	sub	r9,-4
80008a4a:	51 09       	stdsp	sp[0x40],r9
80008a4c:	fb 68 06 60 	st.b	sp[1632],r8
80008a50:	30 0e       	mov	lr,0
80008a52:	30 08       	mov	r8,0
80008a54:	30 12       	mov	r2,1
80008a56:	fb 68 06 bb 	st.b	sp[1723],r8
80008a5a:	50 2e       	stdsp	sp[0x8],lr
80008a5c:	e0 8f 08 ad 	bral	80009bb6 <_vfprintf_r+0x1652>
80008a60:	50 a7       	stdsp	sp[0x28],r7
80008a62:	50 80       	stdsp	sp[0x20],r0
80008a64:	0c 97       	mov	r7,r6
80008a66:	04 94       	mov	r4,r2
80008a68:	06 96       	mov	r6,r3
80008a6a:	02 92       	mov	r2,r1
80008a6c:	40 93       	lddsp	r3,sp[0x24]
80008a6e:	10 90       	mov	r0,r8
80008a70:	40 41       	lddsp	r1,sp[0x10]
80008a72:	a5 a5       	sbr	r5,0x4
80008a74:	c0 a8       	rjmp	80008a88 <_vfprintf_r+0x524>
80008a76:	50 a7       	stdsp	sp[0x28],r7
80008a78:	50 80       	stdsp	sp[0x20],r0
80008a7a:	0c 97       	mov	r7,r6
80008a7c:	04 94       	mov	r4,r2
80008a7e:	06 96       	mov	r6,r3
80008a80:	02 92       	mov	r2,r1
80008a82:	40 93       	lddsp	r3,sp[0x24]
80008a84:	10 90       	mov	r0,r8
80008a86:	40 41       	lddsp	r1,sp[0x10]
80008a88:	ed b5 00 05 	bld	r5,0x5
80008a8c:	c5 11       	brne	80008b2e <_vfprintf_r+0x5ca>
80008a8e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008a92:	40 3c       	lddsp	r12,sp[0xc]
80008a94:	58 0c       	cp.w	r12,0
80008a96:	c1 e0       	breq	80008ad2 <_vfprintf_r+0x56e>
80008a98:	10 36       	cp.w	r6,r8
80008a9a:	c0 64       	brge	80008aa6 <_vfprintf_r+0x542>
80008a9c:	fa cb f9 44 	sub	r11,sp,-1724
80008aa0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008aa4:	c2 08       	rjmp	80008ae4 <_vfprintf_r+0x580>
80008aa6:	fa c8 f9 50 	sub	r8,sp,-1712
80008aaa:	1a d8       	st.w	--sp,r8
80008aac:	fa c8 fa b8 	sub	r8,sp,-1352
80008ab0:	0c 9b       	mov	r11,r6
80008ab2:	1a d8       	st.w	--sp,r8
80008ab4:	fa c8 fb b4 	sub	r8,sp,-1100
80008ab8:	1a d8       	st.w	--sp,r8
80008aba:	fa c9 ff b4 	sub	r9,sp,-76
80008abe:	fa c8 f9 40 	sub	r8,sp,-1728
80008ac2:	04 9a       	mov	r10,r2
80008ac4:	08 9c       	mov	r12,r4
80008ac6:	fe b0 fb b7 	rcall	80008234 <get_arg>
80008aca:	2f dd       	sub	sp,-12
80008acc:	78 1b       	ld.w	r11,r12[0x4]
80008ace:	78 09       	ld.w	r9,r12[0x0]
80008ad0:	c2 b8       	rjmp	80008b26 <_vfprintf_r+0x5c2>
80008ad2:	ee ca ff ff 	sub	r10,r7,-1
80008ad6:	10 37       	cp.w	r7,r8
80008ad8:	c0 b4       	brge	80008aee <_vfprintf_r+0x58a>
80008ada:	fa c9 f9 44 	sub	r9,sp,-1724
80008ade:	14 97       	mov	r7,r10
80008ae0:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008ae4:	ec fb fd 8c 	ld.w	r11,r6[-628]
80008ae8:	ec f9 fd 88 	ld.w	r9,r6[-632]
80008aec:	c1 d8       	rjmp	80008b26 <_vfprintf_r+0x5c2>
80008aee:	41 09       	lddsp	r9,sp[0x40]
80008af0:	59 f8       	cp.w	r8,31
80008af2:	e0 89 00 14 	brgt	80008b1a <_vfprintf_r+0x5b6>
80008af6:	f2 cb ff f8 	sub	r11,r9,-8
80008afa:	51 0b       	stdsp	sp[0x40],r11
80008afc:	fa c6 f9 44 	sub	r6,sp,-1724
80008b00:	72 1b       	ld.w	r11,r9[0x4]
80008b02:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80008b06:	72 09       	ld.w	r9,r9[0x0]
80008b08:	f9 4b fd 8c 	st.w	r12[-628],r11
80008b0c:	f9 49 fd 88 	st.w	r12[-632],r9
80008b10:	2f f8       	sub	r8,-1
80008b12:	14 97       	mov	r7,r10
80008b14:	fb 48 06 b4 	st.w	sp[1716],r8
80008b18:	c0 78       	rjmp	80008b26 <_vfprintf_r+0x5c2>
80008b1a:	f2 c8 ff f8 	sub	r8,r9,-8
80008b1e:	72 1b       	ld.w	r11,r9[0x4]
80008b20:	14 97       	mov	r7,r10
80008b22:	51 08       	stdsp	sp[0x40],r8
80008b24:	72 09       	ld.w	r9,r9[0x0]
80008b26:	16 98       	mov	r8,r11
80008b28:	fa e9 00 00 	st.d	sp[0],r8
80008b2c:	ca e8       	rjmp	80008c88 <_vfprintf_r+0x724>
80008b2e:	ed b5 00 04 	bld	r5,0x4
80008b32:	c1 71       	brne	80008b60 <_vfprintf_r+0x5fc>
80008b34:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008b38:	40 3e       	lddsp	lr,sp[0xc]
80008b3a:	58 0e       	cp.w	lr,0
80008b3c:	c0 80       	breq	80008b4c <_vfprintf_r+0x5e8>
80008b3e:	10 36       	cp.w	r6,r8
80008b40:	c6 94       	brge	80008c12 <_vfprintf_r+0x6ae>
80008b42:	fa cc f9 44 	sub	r12,sp,-1724
80008b46:	f8 06 00 36 	add	r6,r12,r6<<0x3
80008b4a:	c8 28       	rjmp	80008c4e <_vfprintf_r+0x6ea>
80008b4c:	ee ca ff ff 	sub	r10,r7,-1
80008b50:	10 37       	cp.w	r7,r8
80008b52:	e0 84 00 81 	brge	80008c54 <_vfprintf_r+0x6f0>
80008b56:	fa cb f9 44 	sub	r11,sp,-1724
80008b5a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008b5e:	c7 78       	rjmp	80008c4c <_vfprintf_r+0x6e8>
80008b60:	ed b5 00 06 	bld	r5,0x6
80008b64:	c4 b1       	brne	80008bfa <_vfprintf_r+0x696>
80008b66:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008b6a:	40 3c       	lddsp	r12,sp[0xc]
80008b6c:	58 0c       	cp.w	r12,0
80008b6e:	c1 d0       	breq	80008ba8 <_vfprintf_r+0x644>
80008b70:	10 36       	cp.w	r6,r8
80008b72:	c0 64       	brge	80008b7e <_vfprintf_r+0x61a>
80008b74:	fa cb f9 44 	sub	r11,sp,-1724
80008b78:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008b7c:	c1 f8       	rjmp	80008bba <_vfprintf_r+0x656>
80008b7e:	fa c8 f9 50 	sub	r8,sp,-1712
80008b82:	1a d8       	st.w	--sp,r8
80008b84:	fa c8 fa b8 	sub	r8,sp,-1352
80008b88:	1a d8       	st.w	--sp,r8
80008b8a:	fa c8 fb b4 	sub	r8,sp,-1100
80008b8e:	1a d8       	st.w	--sp,r8
80008b90:	fa c8 f9 40 	sub	r8,sp,-1728
80008b94:	fa c9 ff b4 	sub	r9,sp,-76
80008b98:	04 9a       	mov	r10,r2
80008b9a:	0c 9b       	mov	r11,r6
80008b9c:	08 9c       	mov	r12,r4
80008b9e:	fe b0 fb 4b 	rcall	80008234 <get_arg>
80008ba2:	2f dd       	sub	sp,-12
80008ba4:	98 18       	ld.sh	r8,r12[0x2]
80008ba6:	c2 68       	rjmp	80008bf2 <_vfprintf_r+0x68e>
80008ba8:	ee ca ff ff 	sub	r10,r7,-1
80008bac:	10 37       	cp.w	r7,r8
80008bae:	c0 94       	brge	80008bc0 <_vfprintf_r+0x65c>
80008bb0:	fa c9 f9 44 	sub	r9,sp,-1724
80008bb4:	14 97       	mov	r7,r10
80008bb6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008bba:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80008bbe:	c1 a8       	rjmp	80008bf2 <_vfprintf_r+0x68e>
80008bc0:	41 09       	lddsp	r9,sp[0x40]
80008bc2:	59 f8       	cp.w	r8,31
80008bc4:	e0 89 00 13 	brgt	80008bea <_vfprintf_r+0x686>
80008bc8:	f2 cb ff fc 	sub	r11,r9,-4
80008bcc:	51 0b       	stdsp	sp[0x40],r11
80008bce:	72 09       	ld.w	r9,r9[0x0]
80008bd0:	fa c6 f9 44 	sub	r6,sp,-1724
80008bd4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80008bd8:	2f f8       	sub	r8,-1
80008bda:	f7 49 fd 88 	st.w	r11[-632],r9
80008bde:	fb 48 06 b4 	st.w	sp[1716],r8
80008be2:	14 97       	mov	r7,r10
80008be4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80008be8:	c0 58       	rjmp	80008bf2 <_vfprintf_r+0x68e>
80008bea:	92 18       	ld.sh	r8,r9[0x2]
80008bec:	14 97       	mov	r7,r10
80008bee:	2f c9       	sub	r9,-4
80008bf0:	51 09       	stdsp	sp[0x40],r9
80008bf2:	50 18       	stdsp	sp[0x4],r8
80008bf4:	bf 58       	asr	r8,0x1f
80008bf6:	50 08       	stdsp	sp[0x0],r8
80008bf8:	c4 88       	rjmp	80008c88 <_vfprintf_r+0x724>
80008bfa:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008bfe:	40 3c       	lddsp	r12,sp[0xc]
80008c00:	58 0c       	cp.w	r12,0
80008c02:	c1 d0       	breq	80008c3c <_vfprintf_r+0x6d8>
80008c04:	10 36       	cp.w	r6,r8
80008c06:	c0 64       	brge	80008c12 <_vfprintf_r+0x6ae>
80008c08:	fa cb f9 44 	sub	r11,sp,-1724
80008c0c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008c10:	c1 f8       	rjmp	80008c4e <_vfprintf_r+0x6ea>
80008c12:	fa c8 f9 50 	sub	r8,sp,-1712
80008c16:	1a d8       	st.w	--sp,r8
80008c18:	fa c8 fa b8 	sub	r8,sp,-1352
80008c1c:	0c 9b       	mov	r11,r6
80008c1e:	1a d8       	st.w	--sp,r8
80008c20:	fa c8 fb b4 	sub	r8,sp,-1100
80008c24:	04 9a       	mov	r10,r2
80008c26:	1a d8       	st.w	--sp,r8
80008c28:	08 9c       	mov	r12,r4
80008c2a:	fa c8 f9 40 	sub	r8,sp,-1728
80008c2e:	fa c9 ff b4 	sub	r9,sp,-76
80008c32:	fe b0 fb 01 	rcall	80008234 <get_arg>
80008c36:	2f dd       	sub	sp,-12
80008c38:	78 0b       	ld.w	r11,r12[0x0]
80008c3a:	c2 48       	rjmp	80008c82 <_vfprintf_r+0x71e>
80008c3c:	ee ca ff ff 	sub	r10,r7,-1
80008c40:	10 37       	cp.w	r7,r8
80008c42:	c0 94       	brge	80008c54 <_vfprintf_r+0x6f0>
80008c44:	fa c9 f9 44 	sub	r9,sp,-1724
80008c48:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008c4c:	14 97       	mov	r7,r10
80008c4e:	ec fb fd 88 	ld.w	r11,r6[-632]
80008c52:	c1 88       	rjmp	80008c82 <_vfprintf_r+0x71e>
80008c54:	41 09       	lddsp	r9,sp[0x40]
80008c56:	59 f8       	cp.w	r8,31
80008c58:	e0 89 00 11 	brgt	80008c7a <_vfprintf_r+0x716>
80008c5c:	f2 cb ff fc 	sub	r11,r9,-4
80008c60:	51 0b       	stdsp	sp[0x40],r11
80008c62:	fa c6 f9 44 	sub	r6,sp,-1724
80008c66:	72 0b       	ld.w	r11,r9[0x0]
80008c68:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008c6c:	f3 4b fd 88 	st.w	r9[-632],r11
80008c70:	2f f8       	sub	r8,-1
80008c72:	14 97       	mov	r7,r10
80008c74:	fb 48 06 b4 	st.w	sp[1716],r8
80008c78:	c0 58       	rjmp	80008c82 <_vfprintf_r+0x71e>
80008c7a:	72 0b       	ld.w	r11,r9[0x0]
80008c7c:	14 97       	mov	r7,r10
80008c7e:	2f c9       	sub	r9,-4
80008c80:	51 09       	stdsp	sp[0x40],r9
80008c82:	50 1b       	stdsp	sp[0x4],r11
80008c84:	bf 5b       	asr	r11,0x1f
80008c86:	50 0b       	stdsp	sp[0x0],r11
80008c88:	fa ea 00 00 	ld.d	r10,sp[0]
80008c8c:	58 0a       	cp.w	r10,0
80008c8e:	5c 2b       	cpc	r11
80008c90:	c0 e4       	brge	80008cac <_vfprintf_r+0x748>
80008c92:	30 08       	mov	r8,0
80008c94:	fa ea 00 00 	ld.d	r10,sp[0]
80008c98:	30 09       	mov	r9,0
80008c9a:	f0 0a 01 0a 	sub	r10,r8,r10
80008c9e:	f2 0b 01 4b 	sbc	r11,r9,r11
80008ca2:	32 d8       	mov	r8,45
80008ca4:	fa eb 00 00 	st.d	sp[0],r10
80008ca8:	fb 68 06 bb 	st.b	sp[1723],r8
80008cac:	30 18       	mov	r8,1
80008cae:	e0 8f 06 fa 	bral	80009aa2 <_vfprintf_r+0x153e>
80008cb2:	50 a7       	stdsp	sp[0x28],r7
80008cb4:	50 80       	stdsp	sp[0x20],r0
80008cb6:	0c 97       	mov	r7,r6
80008cb8:	04 94       	mov	r4,r2
80008cba:	06 96       	mov	r6,r3
80008cbc:	02 92       	mov	r2,r1
80008cbe:	40 93       	lddsp	r3,sp[0x24]
80008cc0:	10 90       	mov	r0,r8
80008cc2:	40 41       	lddsp	r1,sp[0x10]
80008cc4:	0e 99       	mov	r9,r7
80008cc6:	ed b5 00 03 	bld	r5,0x3
80008cca:	c4 11       	brne	80008d4c <_vfprintf_r+0x7e8>
80008ccc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008cd0:	40 3a       	lddsp	r10,sp[0xc]
80008cd2:	58 0a       	cp.w	r10,0
80008cd4:	c1 90       	breq	80008d06 <_vfprintf_r+0x7a2>
80008cd6:	10 36       	cp.w	r6,r8
80008cd8:	c6 45       	brlt	80008da0 <_vfprintf_r+0x83c>
80008cda:	fa c8 f9 50 	sub	r8,sp,-1712
80008cde:	1a d8       	st.w	--sp,r8
80008ce0:	fa c8 fa b8 	sub	r8,sp,-1352
80008ce4:	1a d8       	st.w	--sp,r8
80008ce6:	fa c8 fb b4 	sub	r8,sp,-1100
80008cea:	0c 9b       	mov	r11,r6
80008cec:	1a d8       	st.w	--sp,r8
80008cee:	04 9a       	mov	r10,r2
80008cf0:	fa c8 f9 40 	sub	r8,sp,-1728
80008cf4:	fa c9 ff b4 	sub	r9,sp,-76
80008cf8:	08 9c       	mov	r12,r4
80008cfa:	fe b0 fa 9d 	rcall	80008234 <get_arg>
80008cfe:	2f dd       	sub	sp,-12
80008d00:	78 16       	ld.w	r6,r12[0x4]
80008d02:	50 76       	stdsp	sp[0x1c],r6
80008d04:	c4 88       	rjmp	80008d94 <_vfprintf_r+0x830>
80008d06:	2f f7       	sub	r7,-1
80008d08:	10 39       	cp.w	r9,r8
80008d0a:	c0 c4       	brge	80008d22 <_vfprintf_r+0x7be>
80008d0c:	fa ce f9 44 	sub	lr,sp,-1724
80008d10:	fc 06 00 36 	add	r6,lr,r6<<0x3
80008d14:	ec fc fd 8c 	ld.w	r12,r6[-628]
80008d18:	50 7c       	stdsp	sp[0x1c],r12
80008d1a:	ec f6 fd 88 	ld.w	r6,r6[-632]
80008d1e:	50 56       	stdsp	sp[0x14],r6
80008d20:	c6 68       	rjmp	80008dec <_vfprintf_r+0x888>
80008d22:	41 09       	lddsp	r9,sp[0x40]
80008d24:	59 f8       	cp.w	r8,31
80008d26:	e0 89 00 10 	brgt	80008d46 <_vfprintf_r+0x7e2>
80008d2a:	f2 ca ff f8 	sub	r10,r9,-8
80008d2e:	72 1b       	ld.w	r11,r9[0x4]
80008d30:	51 0a       	stdsp	sp[0x40],r10
80008d32:	72 09       	ld.w	r9,r9[0x0]
80008d34:	fa ca f9 44 	sub	r10,sp,-1724
80008d38:	50 7b       	stdsp	sp[0x1c],r11
80008d3a:	50 59       	stdsp	sp[0x14],r9
80008d3c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80008d40:	40 5b       	lddsp	r11,sp[0x14]
80008d42:	40 7a       	lddsp	r10,sp[0x1c]
80008d44:	c4 78       	rjmp	80008dd2 <_vfprintf_r+0x86e>
80008d46:	72 18       	ld.w	r8,r9[0x4]
80008d48:	50 78       	stdsp	sp[0x1c],r8
80008d4a:	c4 c8       	rjmp	80008de2 <_vfprintf_r+0x87e>
80008d4c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008d50:	40 3e       	lddsp	lr,sp[0xc]
80008d52:	58 0e       	cp.w	lr,0
80008d54:	c2 30       	breq	80008d9a <_vfprintf_r+0x836>
80008d56:	10 36       	cp.w	r6,r8
80008d58:	c0 94       	brge	80008d6a <_vfprintf_r+0x806>
80008d5a:	fa cc f9 44 	sub	r12,sp,-1724
80008d5e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80008d62:	ec fb fd 8c 	ld.w	r11,r6[-628]
80008d66:	50 7b       	stdsp	sp[0x1c],r11
80008d68:	cd 9b       	rjmp	80008d1a <_vfprintf_r+0x7b6>
80008d6a:	fa c8 f9 50 	sub	r8,sp,-1712
80008d6e:	1a d8       	st.w	--sp,r8
80008d70:	fa c8 fa b8 	sub	r8,sp,-1352
80008d74:	04 9a       	mov	r10,r2
80008d76:	1a d8       	st.w	--sp,r8
80008d78:	fa c8 fb b4 	sub	r8,sp,-1100
80008d7c:	0c 9b       	mov	r11,r6
80008d7e:	1a d8       	st.w	--sp,r8
80008d80:	08 9c       	mov	r12,r4
80008d82:	fa c8 f9 40 	sub	r8,sp,-1728
80008d86:	fa c9 ff b4 	sub	r9,sp,-76
80008d8a:	fe b0 fa 55 	rcall	80008234 <get_arg>
80008d8e:	2f dd       	sub	sp,-12
80008d90:	78 1a       	ld.w	r10,r12[0x4]
80008d92:	50 7a       	stdsp	sp[0x1c],r10
80008d94:	78 0c       	ld.w	r12,r12[0x0]
80008d96:	50 5c       	stdsp	sp[0x14],r12
80008d98:	c2 a8       	rjmp	80008dec <_vfprintf_r+0x888>
80008d9a:	2f f7       	sub	r7,-1
80008d9c:	10 39       	cp.w	r9,r8
80008d9e:	c0 94       	brge	80008db0 <_vfprintf_r+0x84c>
80008da0:	fa c9 f9 44 	sub	r9,sp,-1724
80008da4:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008da8:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80008dac:	50 78       	stdsp	sp[0x1c],r8
80008dae:	cb 6b       	rjmp	80008d1a <_vfprintf_r+0x7b6>
80008db0:	41 09       	lddsp	r9,sp[0x40]
80008db2:	59 f8       	cp.w	r8,31
80008db4:	e0 89 00 15 	brgt	80008dde <_vfprintf_r+0x87a>
80008db8:	f2 ca ff f8 	sub	r10,r9,-8
80008dbc:	72 16       	ld.w	r6,r9[0x4]
80008dbe:	72 09       	ld.w	r9,r9[0x0]
80008dc0:	51 0a       	stdsp	sp[0x40],r10
80008dc2:	50 59       	stdsp	sp[0x14],r9
80008dc4:	fa ce f9 44 	sub	lr,sp,-1724
80008dc8:	50 76       	stdsp	sp[0x1c],r6
80008dca:	fc 08 00 39 	add	r9,lr,r8<<0x3
80008dce:	40 5b       	lddsp	r11,sp[0x14]
80008dd0:	0c 9a       	mov	r10,r6
80008dd2:	f2 eb fd 88 	st.d	r9[-632],r10
80008dd6:	2f f8       	sub	r8,-1
80008dd8:	fb 48 06 b4 	st.w	sp[1716],r8
80008ddc:	c0 88       	rjmp	80008dec <_vfprintf_r+0x888>
80008dde:	72 1c       	ld.w	r12,r9[0x4]
80008de0:	50 7c       	stdsp	sp[0x1c],r12
80008de2:	f2 c8 ff f8 	sub	r8,r9,-8
80008de6:	51 08       	stdsp	sp[0x40],r8
80008de8:	72 09       	ld.w	r9,r9[0x0]
80008dea:	50 59       	stdsp	sp[0x14],r9
80008dec:	40 5b       	lddsp	r11,sp[0x14]
80008dee:	40 7a       	lddsp	r10,sp[0x1c]
80008df0:	e0 a0 19 a2 	rcall	8000c134 <__isinfd>
80008df4:	18 96       	mov	r6,r12
80008df6:	c1 70       	breq	80008e24 <_vfprintf_r+0x8c0>
80008df8:	30 08       	mov	r8,0
80008dfa:	30 09       	mov	r9,0
80008dfc:	40 5b       	lddsp	r11,sp[0x14]
80008dfe:	40 7a       	lddsp	r10,sp[0x1c]
80008e00:	e0 a0 1e 02 	rcall	8000ca04 <__avr32_f64_cmp_lt>
80008e04:	c0 40       	breq	80008e0c <_vfprintf_r+0x8a8>
80008e06:	32 d8       	mov	r8,45
80008e08:	fb 68 06 bb 	st.b	sp[1723],r8
80008e0c:	fe c8 b5 80 	sub	r8,pc,-19072
80008e10:	fe c6 b5 80 	sub	r6,pc,-19072
80008e14:	a7 d5       	cbr	r5,0x7
80008e16:	e0 40 00 47 	cp.w	r0,71
80008e1a:	f0 06 17 a0 	movle	r6,r8
80008e1e:	30 32       	mov	r2,3
80008e20:	e0 8f 06 ce 	bral	80009bbc <_vfprintf_r+0x1658>
80008e24:	40 5b       	lddsp	r11,sp[0x14]
80008e26:	40 7a       	lddsp	r10,sp[0x1c]
80008e28:	e0 a0 19 9b 	rcall	8000c15e <__isnand>
80008e2c:	c0 e0       	breq	80008e48 <_vfprintf_r+0x8e4>
80008e2e:	50 26       	stdsp	sp[0x8],r6
80008e30:	fe c8 b5 9c 	sub	r8,pc,-19044
80008e34:	fe c6 b5 9c 	sub	r6,pc,-19044
80008e38:	a7 d5       	cbr	r5,0x7
80008e3a:	e0 40 00 47 	cp.w	r0,71
80008e3e:	f0 06 17 a0 	movle	r6,r8
80008e42:	30 32       	mov	r2,3
80008e44:	e0 8f 06 c2 	bral	80009bc8 <_vfprintf_r+0x1664>
80008e48:	40 2a       	lddsp	r10,sp[0x8]
80008e4a:	5b fa       	cp.w	r10,-1
80008e4c:	c0 41       	brne	80008e54 <_vfprintf_r+0x8f0>
80008e4e:	30 69       	mov	r9,6
80008e50:	50 29       	stdsp	sp[0x8],r9
80008e52:	c1 18       	rjmp	80008e74 <_vfprintf_r+0x910>
80008e54:	e0 40 00 47 	cp.w	r0,71
80008e58:	5f 09       	sreq	r9
80008e5a:	e0 40 00 67 	cp.w	r0,103
80008e5e:	5f 08       	sreq	r8
80008e60:	f3 e8 10 08 	or	r8,r9,r8
80008e64:	f8 08 18 00 	cp.b	r8,r12
80008e68:	c0 60       	breq	80008e74 <_vfprintf_r+0x910>
80008e6a:	40 28       	lddsp	r8,sp[0x8]
80008e6c:	58 08       	cp.w	r8,0
80008e6e:	f9 b8 00 01 	moveq	r8,1
80008e72:	50 28       	stdsp	sp[0x8],r8
80008e74:	40 78       	lddsp	r8,sp[0x1c]
80008e76:	40 59       	lddsp	r9,sp[0x14]
80008e78:	fa e9 06 94 	st.d	sp[1684],r8
80008e7c:	a9 a5       	sbr	r5,0x8
80008e7e:	fa f8 06 94 	ld.w	r8,sp[1684]
80008e82:	58 08       	cp.w	r8,0
80008e84:	c0 65       	brlt	80008e90 <_vfprintf_r+0x92c>
80008e86:	40 5e       	lddsp	lr,sp[0x14]
80008e88:	30 0c       	mov	r12,0
80008e8a:	50 6e       	stdsp	sp[0x18],lr
80008e8c:	50 9c       	stdsp	sp[0x24],r12
80008e8e:	c0 78       	rjmp	80008e9c <_vfprintf_r+0x938>
80008e90:	40 5b       	lddsp	r11,sp[0x14]
80008e92:	32 da       	mov	r10,45
80008e94:	ee 1b 80 00 	eorh	r11,0x8000
80008e98:	50 9a       	stdsp	sp[0x24],r10
80008e9a:	50 6b       	stdsp	sp[0x18],r11
80008e9c:	e0 40 00 46 	cp.w	r0,70
80008ea0:	5f 09       	sreq	r9
80008ea2:	e0 40 00 66 	cp.w	r0,102
80008ea6:	5f 08       	sreq	r8
80008ea8:	f3 e8 10 08 	or	r8,r9,r8
80008eac:	50 48       	stdsp	sp[0x10],r8
80008eae:	c0 40       	breq	80008eb6 <_vfprintf_r+0x952>
80008eb0:	40 22       	lddsp	r2,sp[0x8]
80008eb2:	30 39       	mov	r9,3
80008eb4:	c1 08       	rjmp	80008ed4 <_vfprintf_r+0x970>
80008eb6:	e0 40 00 45 	cp.w	r0,69
80008eba:	5f 09       	sreq	r9
80008ebc:	e0 40 00 65 	cp.w	r0,101
80008ec0:	5f 08       	sreq	r8
80008ec2:	40 22       	lddsp	r2,sp[0x8]
80008ec4:	10 49       	or	r9,r8
80008ec6:	2f f2       	sub	r2,-1
80008ec8:	40 46       	lddsp	r6,sp[0x10]
80008eca:	ec 09 18 00 	cp.b	r9,r6
80008ece:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80008ed2:	30 29       	mov	r9,2
80008ed4:	fa c8 f9 5c 	sub	r8,sp,-1700
80008ed8:	1a d8       	st.w	--sp,r8
80008eda:	fa c8 f9 54 	sub	r8,sp,-1708
80008ede:	1a d8       	st.w	--sp,r8
80008ee0:	fa c8 f9 4c 	sub	r8,sp,-1716
80008ee4:	08 9c       	mov	r12,r4
80008ee6:	1a d8       	st.w	--sp,r8
80008ee8:	04 98       	mov	r8,r2
80008eea:	40 9b       	lddsp	r11,sp[0x24]
80008eec:	40 aa       	lddsp	r10,sp[0x28]
80008eee:	e0 a0 0b c3 	rcall	8000a674 <_dtoa_r>
80008ef2:	e0 40 00 47 	cp.w	r0,71
80008ef6:	5f 19       	srne	r9
80008ef8:	e0 40 00 67 	cp.w	r0,103
80008efc:	5f 18       	srne	r8
80008efe:	18 96       	mov	r6,r12
80008f00:	2f dd       	sub	sp,-12
80008f02:	f3 e8 00 08 	and	r8,r9,r8
80008f06:	c0 41       	brne	80008f0e <_vfprintf_r+0x9aa>
80008f08:	ed b5 00 00 	bld	r5,0x0
80008f0c:	c3 01       	brne	80008f6c <_vfprintf_r+0xa08>
80008f0e:	ec 02 00 0e 	add	lr,r6,r2
80008f12:	50 3e       	stdsp	sp[0xc],lr
80008f14:	40 4c       	lddsp	r12,sp[0x10]
80008f16:	58 0c       	cp.w	r12,0
80008f18:	c1 50       	breq	80008f42 <_vfprintf_r+0x9de>
80008f1a:	0d 89       	ld.ub	r9,r6[0x0]
80008f1c:	33 08       	mov	r8,48
80008f1e:	f0 09 18 00 	cp.b	r9,r8
80008f22:	c0 b1       	brne	80008f38 <_vfprintf_r+0x9d4>
80008f24:	30 08       	mov	r8,0
80008f26:	30 09       	mov	r9,0
80008f28:	40 6b       	lddsp	r11,sp[0x18]
80008f2a:	40 7a       	lddsp	r10,sp[0x1c]
80008f2c:	e0 a0 1d 25 	rcall	8000c976 <__avr32_f64_cmp_eq>
80008f30:	fb b2 00 01 	rsubeq	r2,1
80008f34:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80008f38:	40 3b       	lddsp	r11,sp[0xc]
80008f3a:	fa f8 06 ac 	ld.w	r8,sp[1708]
80008f3e:	10 0b       	add	r11,r8
80008f40:	50 3b       	stdsp	sp[0xc],r11
80008f42:	40 6b       	lddsp	r11,sp[0x18]
80008f44:	30 08       	mov	r8,0
80008f46:	30 09       	mov	r9,0
80008f48:	40 7a       	lddsp	r10,sp[0x1c]
80008f4a:	e0 a0 1d 16 	rcall	8000c976 <__avr32_f64_cmp_eq>
80008f4e:	c0 90       	breq	80008f60 <_vfprintf_r+0x9fc>
80008f50:	40 3a       	lddsp	r10,sp[0xc]
80008f52:	fb 4a 06 a4 	st.w	sp[1700],r10
80008f56:	c0 58       	rjmp	80008f60 <_vfprintf_r+0x9fc>
80008f58:	10 c9       	st.b	r8++,r9
80008f5a:	fb 48 06 a4 	st.w	sp[1700],r8
80008f5e:	c0 28       	rjmp	80008f62 <_vfprintf_r+0x9fe>
80008f60:	33 09       	mov	r9,48
80008f62:	fa f8 06 a4 	ld.w	r8,sp[1700]
80008f66:	40 3e       	lddsp	lr,sp[0xc]
80008f68:	1c 38       	cp.w	r8,lr
80008f6a:	cf 73       	brcs	80008f58 <_vfprintf_r+0x9f4>
80008f6c:	e0 40 00 47 	cp.w	r0,71
80008f70:	5f 09       	sreq	r9
80008f72:	e0 40 00 67 	cp.w	r0,103
80008f76:	5f 08       	sreq	r8
80008f78:	f3 e8 10 08 	or	r8,r9,r8
80008f7c:	fa f9 06 a4 	ld.w	r9,sp[1700]
80008f80:	0c 19       	sub	r9,r6
80008f82:	50 69       	stdsp	sp[0x18],r9
80008f84:	58 08       	cp.w	r8,0
80008f86:	c0 b0       	breq	80008f9c <_vfprintf_r+0xa38>
80008f88:	fa f8 06 ac 	ld.w	r8,sp[1708]
80008f8c:	5b d8       	cp.w	r8,-3
80008f8e:	c0 55       	brlt	80008f98 <_vfprintf_r+0xa34>
80008f90:	40 2c       	lddsp	r12,sp[0x8]
80008f92:	18 38       	cp.w	r8,r12
80008f94:	e0 8a 00 6a 	brle	80009068 <_vfprintf_r+0xb04>
80008f98:	20 20       	sub	r0,2
80008f9a:	c0 58       	rjmp	80008fa4 <_vfprintf_r+0xa40>
80008f9c:	e0 40 00 65 	cp.w	r0,101
80008fa0:	e0 89 00 46 	brgt	8000902c <_vfprintf_r+0xac8>
80008fa4:	fa fb 06 ac 	ld.w	r11,sp[1708]
80008fa8:	fb 60 06 9c 	st.b	sp[1692],r0
80008fac:	20 1b       	sub	r11,1
80008fae:	fb 4b 06 ac 	st.w	sp[1708],r11
80008fb2:	c0 47       	brpl	80008fba <_vfprintf_r+0xa56>
80008fb4:	5c 3b       	neg	r11
80008fb6:	32 d8       	mov	r8,45
80008fb8:	c0 28       	rjmp	80008fbc <_vfprintf_r+0xa58>
80008fba:	32 b8       	mov	r8,43
80008fbc:	fb 68 06 9d 	st.b	sp[1693],r8
80008fc0:	58 9b       	cp.w	r11,9
80008fc2:	e0 8a 00 1d 	brle	80008ffc <_vfprintf_r+0xa98>
80008fc6:	fa c9 fa 35 	sub	r9,sp,-1483
80008fca:	30 aa       	mov	r10,10
80008fcc:	12 98       	mov	r8,r9
80008fce:	0e 9c       	mov	r12,r7
80008fd0:	0c 92       	mov	r2,r6
80008fd2:	f6 0a 0c 06 	divs	r6,r11,r10
80008fd6:	0e 9b       	mov	r11,r7
80008fd8:	2d 0b       	sub	r11,-48
80008fda:	10 fb       	st.b	--r8,r11
80008fdc:	0c 9b       	mov	r11,r6
80008fde:	58 96       	cp.w	r6,9
80008fe0:	fe 99 ff f9 	brgt	80008fd2 <_vfprintf_r+0xa6e>
80008fe4:	2d 0b       	sub	r11,-48
80008fe6:	18 97       	mov	r7,r12
80008fe8:	04 96       	mov	r6,r2
80008fea:	10 fb       	st.b	--r8,r11
80008fec:	fa ca f9 62 	sub	r10,sp,-1694
80008ff0:	c0 38       	rjmp	80008ff6 <_vfprintf_r+0xa92>
80008ff2:	11 3b       	ld.ub	r11,r8++
80008ff4:	14 cb       	st.b	r10++,r11
80008ff6:	12 38       	cp.w	r8,r9
80008ff8:	cf d3       	brcs	80008ff2 <_vfprintf_r+0xa8e>
80008ffa:	c0 98       	rjmp	8000900c <_vfprintf_r+0xaa8>
80008ffc:	2d 0b       	sub	r11,-48
80008ffe:	33 08       	mov	r8,48
80009000:	fb 6b 06 9f 	st.b	sp[1695],r11
80009004:	fb 68 06 9e 	st.b	sp[1694],r8
80009008:	fa ca f9 60 	sub	r10,sp,-1696
8000900c:	fa c8 f9 64 	sub	r8,sp,-1692
80009010:	f4 08 01 08 	sub	r8,r10,r8
80009014:	50 e8       	stdsp	sp[0x38],r8
80009016:	10 92       	mov	r2,r8
80009018:	40 6b       	lddsp	r11,sp[0x18]
8000901a:	16 02       	add	r2,r11
8000901c:	58 1b       	cp.w	r11,1
8000901e:	e0 89 00 05 	brgt	80009028 <_vfprintf_r+0xac4>
80009022:	ed b5 00 00 	bld	r5,0x0
80009026:	c3 51       	brne	80009090 <_vfprintf_r+0xb2c>
80009028:	2f f2       	sub	r2,-1
8000902a:	c3 38       	rjmp	80009090 <_vfprintf_r+0xb2c>
8000902c:	e0 40 00 66 	cp.w	r0,102
80009030:	c1 c1       	brne	80009068 <_vfprintf_r+0xb04>
80009032:	fa f2 06 ac 	ld.w	r2,sp[1708]
80009036:	58 02       	cp.w	r2,0
80009038:	e0 8a 00 0c 	brle	80009050 <_vfprintf_r+0xaec>
8000903c:	40 2a       	lddsp	r10,sp[0x8]
8000903e:	58 0a       	cp.w	r10,0
80009040:	c0 41       	brne	80009048 <_vfprintf_r+0xae4>
80009042:	ed b5 00 00 	bld	r5,0x0
80009046:	c2 51       	brne	80009090 <_vfprintf_r+0xb2c>
80009048:	2f f2       	sub	r2,-1
8000904a:	40 29       	lddsp	r9,sp[0x8]
8000904c:	12 02       	add	r2,r9
8000904e:	c0 b8       	rjmp	80009064 <_vfprintf_r+0xb00>
80009050:	40 28       	lddsp	r8,sp[0x8]
80009052:	58 08       	cp.w	r8,0
80009054:	c0 61       	brne	80009060 <_vfprintf_r+0xafc>
80009056:	ed b5 00 00 	bld	r5,0x0
8000905a:	c0 30       	breq	80009060 <_vfprintf_r+0xafc>
8000905c:	30 12       	mov	r2,1
8000905e:	c1 98       	rjmp	80009090 <_vfprintf_r+0xb2c>
80009060:	40 22       	lddsp	r2,sp[0x8]
80009062:	2f e2       	sub	r2,-2
80009064:	36 60       	mov	r0,102
80009066:	c1 58       	rjmp	80009090 <_vfprintf_r+0xb2c>
80009068:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000906c:	40 6e       	lddsp	lr,sp[0x18]
8000906e:	1c 32       	cp.w	r2,lr
80009070:	c0 65       	brlt	8000907c <_vfprintf_r+0xb18>
80009072:	ed b5 00 00 	bld	r5,0x0
80009076:	f7 b2 00 ff 	subeq	r2,-1
8000907a:	c0 a8       	rjmp	8000908e <_vfprintf_r+0xb2a>
8000907c:	e4 08 11 02 	rsub	r8,r2,2
80009080:	40 6c       	lddsp	r12,sp[0x18]
80009082:	58 02       	cp.w	r2,0
80009084:	f0 02 17 a0 	movle	r2,r8
80009088:	f9 b2 09 01 	movgt	r2,1
8000908c:	18 02       	add	r2,r12
8000908e:	36 70       	mov	r0,103
80009090:	40 9b       	lddsp	r11,sp[0x24]
80009092:	58 0b       	cp.w	r11,0
80009094:	e0 80 05 94 	breq	80009bbc <_vfprintf_r+0x1658>
80009098:	32 d8       	mov	r8,45
8000909a:	fb 68 06 bb 	st.b	sp[1723],r8
8000909e:	e0 8f 05 93 	bral	80009bc4 <_vfprintf_r+0x1660>
800090a2:	50 a7       	stdsp	sp[0x28],r7
800090a4:	04 94       	mov	r4,r2
800090a6:	0c 97       	mov	r7,r6
800090a8:	02 92       	mov	r2,r1
800090aa:	06 96       	mov	r6,r3
800090ac:	40 41       	lddsp	r1,sp[0x10]
800090ae:	40 93       	lddsp	r3,sp[0x24]
800090b0:	0e 99       	mov	r9,r7
800090b2:	ed b5 00 05 	bld	r5,0x5
800090b6:	c4 81       	brne	80009146 <_vfprintf_r+0xbe2>
800090b8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800090bc:	40 3e       	lddsp	lr,sp[0xc]
800090be:	58 0e       	cp.w	lr,0
800090c0:	c1 d0       	breq	800090fa <_vfprintf_r+0xb96>
800090c2:	10 36       	cp.w	r6,r8
800090c4:	c0 64       	brge	800090d0 <_vfprintf_r+0xb6c>
800090c6:	fa cc f9 44 	sub	r12,sp,-1724
800090ca:	f8 06 00 36 	add	r6,r12,r6<<0x3
800090ce:	c1 d8       	rjmp	80009108 <_vfprintf_r+0xba4>
800090d0:	fa c8 f9 50 	sub	r8,sp,-1712
800090d4:	1a d8       	st.w	--sp,r8
800090d6:	fa c8 fa b8 	sub	r8,sp,-1352
800090da:	04 9a       	mov	r10,r2
800090dc:	1a d8       	st.w	--sp,r8
800090de:	fa c8 fb b4 	sub	r8,sp,-1100
800090e2:	0c 9b       	mov	r11,r6
800090e4:	1a d8       	st.w	--sp,r8
800090e6:	08 9c       	mov	r12,r4
800090e8:	fa c8 f9 40 	sub	r8,sp,-1728
800090ec:	fa c9 ff b4 	sub	r9,sp,-76
800090f0:	fe b0 f8 a2 	rcall	80008234 <get_arg>
800090f4:	2f dd       	sub	sp,-12
800090f6:	78 0a       	ld.w	r10,r12[0x0]
800090f8:	c2 08       	rjmp	80009138 <_vfprintf_r+0xbd4>
800090fa:	2f f7       	sub	r7,-1
800090fc:	10 39       	cp.w	r9,r8
800090fe:	c0 84       	brge	8000910e <_vfprintf_r+0xbaa>
80009100:	fa cb f9 44 	sub	r11,sp,-1724
80009104:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009108:	ec fa fd 88 	ld.w	r10,r6[-632]
8000910c:	c1 68       	rjmp	80009138 <_vfprintf_r+0xbd4>
8000910e:	41 09       	lddsp	r9,sp[0x40]
80009110:	59 f8       	cp.w	r8,31
80009112:	e0 89 00 10 	brgt	80009132 <_vfprintf_r+0xbce>
80009116:	f2 ca ff fc 	sub	r10,r9,-4
8000911a:	51 0a       	stdsp	sp[0x40],r10
8000911c:	fa c6 f9 44 	sub	r6,sp,-1724
80009120:	72 0a       	ld.w	r10,r9[0x0]
80009122:	ec 08 00 39 	add	r9,r6,r8<<0x3
80009126:	f3 4a fd 88 	st.w	r9[-632],r10
8000912a:	2f f8       	sub	r8,-1
8000912c:	fb 48 06 b4 	st.w	sp[1716],r8
80009130:	c0 48       	rjmp	80009138 <_vfprintf_r+0xbd4>
80009132:	72 0a       	ld.w	r10,r9[0x0]
80009134:	2f c9       	sub	r9,-4
80009136:	51 09       	stdsp	sp[0x40],r9
80009138:	40 be       	lddsp	lr,sp[0x2c]
8000913a:	1c 98       	mov	r8,lr
8000913c:	95 1e       	st.w	r10[0x4],lr
8000913e:	bf 58       	asr	r8,0x1f
80009140:	95 08       	st.w	r10[0x0],r8
80009142:	fe 9f fa 9f 	bral	80008680 <_vfprintf_r+0x11c>
80009146:	ed b5 00 04 	bld	r5,0x4
8000914a:	c4 80       	breq	800091da <_vfprintf_r+0xc76>
8000914c:	e2 15 00 40 	andl	r5,0x40,COH
80009150:	c4 50       	breq	800091da <_vfprintf_r+0xc76>
80009152:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009156:	40 3c       	lddsp	r12,sp[0xc]
80009158:	58 0c       	cp.w	r12,0
8000915a:	c1 d0       	breq	80009194 <_vfprintf_r+0xc30>
8000915c:	10 36       	cp.w	r6,r8
8000915e:	c0 64       	brge	8000916a <_vfprintf_r+0xc06>
80009160:	fa cb f9 44 	sub	r11,sp,-1724
80009164:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009168:	c1 d8       	rjmp	800091a2 <_vfprintf_r+0xc3e>
8000916a:	fa c8 f9 50 	sub	r8,sp,-1712
8000916e:	1a d8       	st.w	--sp,r8
80009170:	fa c8 fa b8 	sub	r8,sp,-1352
80009174:	04 9a       	mov	r10,r2
80009176:	1a d8       	st.w	--sp,r8
80009178:	fa c8 fb b4 	sub	r8,sp,-1100
8000917c:	0c 9b       	mov	r11,r6
8000917e:	1a d8       	st.w	--sp,r8
80009180:	08 9c       	mov	r12,r4
80009182:	fa c8 f9 40 	sub	r8,sp,-1728
80009186:	fa c9 ff b4 	sub	r9,sp,-76
8000918a:	fe b0 f8 55 	rcall	80008234 <get_arg>
8000918e:	2f dd       	sub	sp,-12
80009190:	78 0a       	ld.w	r10,r12[0x0]
80009192:	c2 08       	rjmp	800091d2 <_vfprintf_r+0xc6e>
80009194:	2f f7       	sub	r7,-1
80009196:	10 39       	cp.w	r9,r8
80009198:	c0 84       	brge	800091a8 <_vfprintf_r+0xc44>
8000919a:	fa ca f9 44 	sub	r10,sp,-1724
8000919e:	f4 06 00 36 	add	r6,r10,r6<<0x3
800091a2:	ec fa fd 88 	ld.w	r10,r6[-632]
800091a6:	c1 68       	rjmp	800091d2 <_vfprintf_r+0xc6e>
800091a8:	41 09       	lddsp	r9,sp[0x40]
800091aa:	59 f8       	cp.w	r8,31
800091ac:	e0 89 00 10 	brgt	800091cc <_vfprintf_r+0xc68>
800091b0:	f2 ca ff fc 	sub	r10,r9,-4
800091b4:	51 0a       	stdsp	sp[0x40],r10
800091b6:	fa c6 f9 44 	sub	r6,sp,-1724
800091ba:	72 0a       	ld.w	r10,r9[0x0]
800091bc:	ec 08 00 39 	add	r9,r6,r8<<0x3
800091c0:	f3 4a fd 88 	st.w	r9[-632],r10
800091c4:	2f f8       	sub	r8,-1
800091c6:	fb 48 06 b4 	st.w	sp[1716],r8
800091ca:	c0 48       	rjmp	800091d2 <_vfprintf_r+0xc6e>
800091cc:	72 0a       	ld.w	r10,r9[0x0]
800091ce:	2f c9       	sub	r9,-4
800091d0:	51 09       	stdsp	sp[0x40],r9
800091d2:	40 be       	lddsp	lr,sp[0x2c]
800091d4:	b4 0e       	st.h	r10[0x0],lr
800091d6:	fe 9f fa 55 	bral	80008680 <_vfprintf_r+0x11c>
800091da:	fa f8 06 b4 	ld.w	r8,sp[1716]
800091de:	40 3c       	lddsp	r12,sp[0xc]
800091e0:	58 0c       	cp.w	r12,0
800091e2:	c1 d0       	breq	8000921c <_vfprintf_r+0xcb8>
800091e4:	10 36       	cp.w	r6,r8
800091e6:	c0 64       	brge	800091f2 <_vfprintf_r+0xc8e>
800091e8:	fa cb f9 44 	sub	r11,sp,-1724
800091ec:	f6 06 00 36 	add	r6,r11,r6<<0x3
800091f0:	c1 d8       	rjmp	8000922a <_vfprintf_r+0xcc6>
800091f2:	fa c8 f9 50 	sub	r8,sp,-1712
800091f6:	1a d8       	st.w	--sp,r8
800091f8:	fa c8 fa b8 	sub	r8,sp,-1352
800091fc:	04 9a       	mov	r10,r2
800091fe:	1a d8       	st.w	--sp,r8
80009200:	fa c8 fb b4 	sub	r8,sp,-1100
80009204:	0c 9b       	mov	r11,r6
80009206:	1a d8       	st.w	--sp,r8
80009208:	08 9c       	mov	r12,r4
8000920a:	fa c8 f9 40 	sub	r8,sp,-1728
8000920e:	fa c9 ff b4 	sub	r9,sp,-76
80009212:	fe b0 f8 11 	rcall	80008234 <get_arg>
80009216:	2f dd       	sub	sp,-12
80009218:	78 0a       	ld.w	r10,r12[0x0]
8000921a:	c2 08       	rjmp	8000925a <_vfprintf_r+0xcf6>
8000921c:	2f f7       	sub	r7,-1
8000921e:	10 39       	cp.w	r9,r8
80009220:	c0 84       	brge	80009230 <_vfprintf_r+0xccc>
80009222:	fa ca f9 44 	sub	r10,sp,-1724
80009226:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000922a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000922e:	c1 68       	rjmp	8000925a <_vfprintf_r+0xcf6>
80009230:	41 09       	lddsp	r9,sp[0x40]
80009232:	59 f8       	cp.w	r8,31
80009234:	e0 89 00 10 	brgt	80009254 <_vfprintf_r+0xcf0>
80009238:	f2 ca ff fc 	sub	r10,r9,-4
8000923c:	51 0a       	stdsp	sp[0x40],r10
8000923e:	fa c6 f9 44 	sub	r6,sp,-1724
80009242:	72 0a       	ld.w	r10,r9[0x0]
80009244:	ec 08 00 39 	add	r9,r6,r8<<0x3
80009248:	f3 4a fd 88 	st.w	r9[-632],r10
8000924c:	2f f8       	sub	r8,-1
8000924e:	fb 48 06 b4 	st.w	sp[1716],r8
80009252:	c0 48       	rjmp	8000925a <_vfprintf_r+0xcf6>
80009254:	72 0a       	ld.w	r10,r9[0x0]
80009256:	2f c9       	sub	r9,-4
80009258:	51 09       	stdsp	sp[0x40],r9
8000925a:	40 be       	lddsp	lr,sp[0x2c]
8000925c:	95 0e       	st.w	r10[0x0],lr
8000925e:	fe 9f fa 11 	bral	80008680 <_vfprintf_r+0x11c>
80009262:	50 a7       	stdsp	sp[0x28],r7
80009264:	50 80       	stdsp	sp[0x20],r0
80009266:	0c 97       	mov	r7,r6
80009268:	04 94       	mov	r4,r2
8000926a:	06 96       	mov	r6,r3
8000926c:	02 92       	mov	r2,r1
8000926e:	40 93       	lddsp	r3,sp[0x24]
80009270:	10 90       	mov	r0,r8
80009272:	40 41       	lddsp	r1,sp[0x10]
80009274:	a5 a5       	sbr	r5,0x4
80009276:	c0 a8       	rjmp	8000928a <_vfprintf_r+0xd26>
80009278:	50 a7       	stdsp	sp[0x28],r7
8000927a:	50 80       	stdsp	sp[0x20],r0
8000927c:	0c 97       	mov	r7,r6
8000927e:	04 94       	mov	r4,r2
80009280:	06 96       	mov	r6,r3
80009282:	02 92       	mov	r2,r1
80009284:	40 93       	lddsp	r3,sp[0x24]
80009286:	10 90       	mov	r0,r8
80009288:	40 41       	lddsp	r1,sp[0x10]
8000928a:	ed b5 00 05 	bld	r5,0x5
8000928e:	c5 d1       	brne	80009348 <_vfprintf_r+0xde4>
80009290:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009294:	40 3c       	lddsp	r12,sp[0xc]
80009296:	58 0c       	cp.w	r12,0
80009298:	c2 60       	breq	800092e4 <_vfprintf_r+0xd80>
8000929a:	10 36       	cp.w	r6,r8
8000929c:	c0 a4       	brge	800092b0 <_vfprintf_r+0xd4c>
8000929e:	fa cb f9 44 	sub	r11,sp,-1724
800092a2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800092a6:	ec e8 fd 88 	ld.d	r8,r6[-632]
800092aa:	fa e9 00 00 	st.d	sp[0],r8
800092ae:	c1 88       	rjmp	800092de <_vfprintf_r+0xd7a>
800092b0:	fa c8 f9 50 	sub	r8,sp,-1712
800092b4:	1a d8       	st.w	--sp,r8
800092b6:	fa c8 fa b8 	sub	r8,sp,-1352
800092ba:	04 9a       	mov	r10,r2
800092bc:	1a d8       	st.w	--sp,r8
800092be:	0c 9b       	mov	r11,r6
800092c0:	fa c8 fb b4 	sub	r8,sp,-1100
800092c4:	08 9c       	mov	r12,r4
800092c6:	1a d8       	st.w	--sp,r8
800092c8:	fa c8 f9 40 	sub	r8,sp,-1728
800092cc:	fa c9 ff b4 	sub	r9,sp,-76
800092d0:	fe b0 f7 b2 	rcall	80008234 <get_arg>
800092d4:	2f dd       	sub	sp,-12
800092d6:	f8 ea 00 00 	ld.d	r10,r12[0]
800092da:	fa eb 00 00 	st.d	sp[0],r10
800092de:	30 08       	mov	r8,0
800092e0:	e0 8f 03 de 	bral	80009a9c <_vfprintf_r+0x1538>
800092e4:	ee ca ff ff 	sub	r10,r7,-1
800092e8:	10 37       	cp.w	r7,r8
800092ea:	c0 b4       	brge	80009300 <_vfprintf_r+0xd9c>
800092ec:	fa c9 f9 44 	sub	r9,sp,-1724
800092f0:	14 97       	mov	r7,r10
800092f2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800092f6:	ec ea fd 88 	ld.d	r10,r6[-632]
800092fa:	fa eb 00 00 	st.d	sp[0],r10
800092fe:	c1 88       	rjmp	8000932e <_vfprintf_r+0xdca>
80009300:	41 09       	lddsp	r9,sp[0x40]
80009302:	59 f8       	cp.w	r8,31
80009304:	e0 89 00 18 	brgt	80009334 <_vfprintf_r+0xdd0>
80009308:	f2 e6 00 00 	ld.d	r6,r9[0]
8000930c:	f2 cb ff f8 	sub	r11,r9,-8
80009310:	fa e7 00 00 	st.d	sp[0],r6
80009314:	51 0b       	stdsp	sp[0x40],r11
80009316:	fa c6 f9 44 	sub	r6,sp,-1724
8000931a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000931e:	fa e6 00 00 	ld.d	r6,sp[0]
80009322:	f2 e7 fd 88 	st.d	r9[-632],r6
80009326:	2f f8       	sub	r8,-1
80009328:	14 97       	mov	r7,r10
8000932a:	fb 48 06 b4 	st.w	sp[1716],r8
8000932e:	40 38       	lddsp	r8,sp[0xc]
80009330:	e0 8f 03 b6 	bral	80009a9c <_vfprintf_r+0x1538>
80009334:	f2 e6 00 00 	ld.d	r6,r9[0]
80009338:	40 38       	lddsp	r8,sp[0xc]
8000933a:	fa e7 00 00 	st.d	sp[0],r6
8000933e:	2f 89       	sub	r9,-8
80009340:	14 97       	mov	r7,r10
80009342:	51 09       	stdsp	sp[0x40],r9
80009344:	e0 8f 03 ac 	bral	80009a9c <_vfprintf_r+0x1538>
80009348:	ed b5 00 04 	bld	r5,0x4
8000934c:	c1 61       	brne	80009378 <_vfprintf_r+0xe14>
8000934e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009352:	40 3e       	lddsp	lr,sp[0xc]
80009354:	58 0e       	cp.w	lr,0
80009356:	c0 80       	breq	80009366 <_vfprintf_r+0xe02>
80009358:	10 36       	cp.w	r6,r8
8000935a:	c6 74       	brge	80009428 <_vfprintf_r+0xec4>
8000935c:	fa cc f9 44 	sub	r12,sp,-1724
80009360:	f8 06 00 36 	add	r6,r12,r6<<0x3
80009364:	c8 08       	rjmp	80009464 <_vfprintf_r+0xf00>
80009366:	ee ca ff ff 	sub	r10,r7,-1
8000936a:	10 37       	cp.w	r7,r8
8000936c:	c7 f4       	brge	8000946a <_vfprintf_r+0xf06>
8000936e:	fa cb f9 44 	sub	r11,sp,-1724
80009372:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009376:	c7 68       	rjmp	80009462 <_vfprintf_r+0xefe>
80009378:	ed b5 00 06 	bld	r5,0x6
8000937c:	c4 a1       	brne	80009410 <_vfprintf_r+0xeac>
8000937e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009382:	40 3c       	lddsp	r12,sp[0xc]
80009384:	58 0c       	cp.w	r12,0
80009386:	c1 d0       	breq	800093c0 <_vfprintf_r+0xe5c>
80009388:	10 36       	cp.w	r6,r8
8000938a:	c0 64       	brge	80009396 <_vfprintf_r+0xe32>
8000938c:	fa cb f9 44 	sub	r11,sp,-1724
80009390:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009394:	c1 f8       	rjmp	800093d2 <_vfprintf_r+0xe6e>
80009396:	fa c8 f9 50 	sub	r8,sp,-1712
8000939a:	1a d8       	st.w	--sp,r8
8000939c:	fa c8 fa b8 	sub	r8,sp,-1352
800093a0:	1a d8       	st.w	--sp,r8
800093a2:	fa c8 fb b4 	sub	r8,sp,-1100
800093a6:	1a d8       	st.w	--sp,r8
800093a8:	fa c8 f9 40 	sub	r8,sp,-1728
800093ac:	fa c9 ff b4 	sub	r9,sp,-76
800093b0:	04 9a       	mov	r10,r2
800093b2:	0c 9b       	mov	r11,r6
800093b4:	08 9c       	mov	r12,r4
800093b6:	fe b0 f7 3f 	rcall	80008234 <get_arg>
800093ba:	2f dd       	sub	sp,-12
800093bc:	98 18       	ld.sh	r8,r12[0x2]
800093be:	c2 68       	rjmp	8000940a <_vfprintf_r+0xea6>
800093c0:	ee ca ff ff 	sub	r10,r7,-1
800093c4:	10 37       	cp.w	r7,r8
800093c6:	c0 94       	brge	800093d8 <_vfprintf_r+0xe74>
800093c8:	fa c9 f9 44 	sub	r9,sp,-1724
800093cc:	14 97       	mov	r7,r10
800093ce:	f2 06 00 36 	add	r6,r9,r6<<0x3
800093d2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800093d6:	c1 a8       	rjmp	8000940a <_vfprintf_r+0xea6>
800093d8:	41 09       	lddsp	r9,sp[0x40]
800093da:	59 f8       	cp.w	r8,31
800093dc:	e0 89 00 13 	brgt	80009402 <_vfprintf_r+0xe9e>
800093e0:	f2 cb ff fc 	sub	r11,r9,-4
800093e4:	51 0b       	stdsp	sp[0x40],r11
800093e6:	72 09       	ld.w	r9,r9[0x0]
800093e8:	fa c6 f9 44 	sub	r6,sp,-1724
800093ec:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800093f0:	2f f8       	sub	r8,-1
800093f2:	f7 49 fd 88 	st.w	r11[-632],r9
800093f6:	fb 48 06 b4 	st.w	sp[1716],r8
800093fa:	14 97       	mov	r7,r10
800093fc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80009400:	c0 58       	rjmp	8000940a <_vfprintf_r+0xea6>
80009402:	92 18       	ld.sh	r8,r9[0x2]
80009404:	14 97       	mov	r7,r10
80009406:	2f c9       	sub	r9,-4
80009408:	51 09       	stdsp	sp[0x40],r9
8000940a:	5c 78       	castu.h	r8
8000940c:	50 18       	stdsp	sp[0x4],r8
8000940e:	c4 68       	rjmp	8000949a <_vfprintf_r+0xf36>
80009410:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009414:	40 3c       	lddsp	r12,sp[0xc]
80009416:	58 0c       	cp.w	r12,0
80009418:	c1 d0       	breq	80009452 <_vfprintf_r+0xeee>
8000941a:	10 36       	cp.w	r6,r8
8000941c:	c0 64       	brge	80009428 <_vfprintf_r+0xec4>
8000941e:	fa cb f9 44 	sub	r11,sp,-1724
80009422:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009426:	c1 f8       	rjmp	80009464 <_vfprintf_r+0xf00>
80009428:	fa c8 f9 50 	sub	r8,sp,-1712
8000942c:	1a d8       	st.w	--sp,r8
8000942e:	fa c8 fa b8 	sub	r8,sp,-1352
80009432:	0c 9b       	mov	r11,r6
80009434:	1a d8       	st.w	--sp,r8
80009436:	fa c8 fb b4 	sub	r8,sp,-1100
8000943a:	04 9a       	mov	r10,r2
8000943c:	1a d8       	st.w	--sp,r8
8000943e:	08 9c       	mov	r12,r4
80009440:	fa c8 f9 40 	sub	r8,sp,-1728
80009444:	fa c9 ff b4 	sub	r9,sp,-76
80009448:	fe b0 f6 f6 	rcall	80008234 <get_arg>
8000944c:	2f dd       	sub	sp,-12
8000944e:	78 0b       	ld.w	r11,r12[0x0]
80009450:	c2 48       	rjmp	80009498 <_vfprintf_r+0xf34>
80009452:	ee ca ff ff 	sub	r10,r7,-1
80009456:	10 37       	cp.w	r7,r8
80009458:	c0 94       	brge	8000946a <_vfprintf_r+0xf06>
8000945a:	fa c9 f9 44 	sub	r9,sp,-1724
8000945e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80009462:	14 97       	mov	r7,r10
80009464:	ec fb fd 88 	ld.w	r11,r6[-632]
80009468:	c1 88       	rjmp	80009498 <_vfprintf_r+0xf34>
8000946a:	41 09       	lddsp	r9,sp[0x40]
8000946c:	59 f8       	cp.w	r8,31
8000946e:	e0 89 00 11 	brgt	80009490 <_vfprintf_r+0xf2c>
80009472:	f2 cb ff fc 	sub	r11,r9,-4
80009476:	51 0b       	stdsp	sp[0x40],r11
80009478:	fa c6 f9 44 	sub	r6,sp,-1724
8000947c:	72 0b       	ld.w	r11,r9[0x0]
8000947e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80009482:	f3 4b fd 88 	st.w	r9[-632],r11
80009486:	2f f8       	sub	r8,-1
80009488:	14 97       	mov	r7,r10
8000948a:	fb 48 06 b4 	st.w	sp[1716],r8
8000948e:	c0 58       	rjmp	80009498 <_vfprintf_r+0xf34>
80009490:	72 0b       	ld.w	r11,r9[0x0]
80009492:	14 97       	mov	r7,r10
80009494:	2f c9       	sub	r9,-4
80009496:	51 09       	stdsp	sp[0x40],r9
80009498:	50 1b       	stdsp	sp[0x4],r11
8000949a:	30 0e       	mov	lr,0
8000949c:	50 0e       	stdsp	sp[0x0],lr
8000949e:	1c 98       	mov	r8,lr
800094a0:	e0 8f 02 fe 	bral	80009a9c <_vfprintf_r+0x1538>
800094a4:	50 a7       	stdsp	sp[0x28],r7
800094a6:	50 80       	stdsp	sp[0x20],r0
800094a8:	0c 97       	mov	r7,r6
800094aa:	04 94       	mov	r4,r2
800094ac:	06 96       	mov	r6,r3
800094ae:	02 92       	mov	r2,r1
800094b0:	40 93       	lddsp	r3,sp[0x24]
800094b2:	40 41       	lddsp	r1,sp[0x10]
800094b4:	0e 99       	mov	r9,r7
800094b6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800094ba:	40 3c       	lddsp	r12,sp[0xc]
800094bc:	58 0c       	cp.w	r12,0
800094be:	c1 d0       	breq	800094f8 <_vfprintf_r+0xf94>
800094c0:	10 36       	cp.w	r6,r8
800094c2:	c0 64       	brge	800094ce <_vfprintf_r+0xf6a>
800094c4:	fa cb f9 44 	sub	r11,sp,-1724
800094c8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800094cc:	c1 d8       	rjmp	80009506 <_vfprintf_r+0xfa2>
800094ce:	fa c8 f9 50 	sub	r8,sp,-1712
800094d2:	1a d8       	st.w	--sp,r8
800094d4:	fa c8 fa b8 	sub	r8,sp,-1352
800094d8:	1a d8       	st.w	--sp,r8
800094da:	fa c8 fb b4 	sub	r8,sp,-1100
800094de:	1a d8       	st.w	--sp,r8
800094e0:	fa c9 ff b4 	sub	r9,sp,-76
800094e4:	fa c8 f9 40 	sub	r8,sp,-1728
800094e8:	04 9a       	mov	r10,r2
800094ea:	0c 9b       	mov	r11,r6
800094ec:	08 9c       	mov	r12,r4
800094ee:	fe b0 f6 a3 	rcall	80008234 <get_arg>
800094f2:	2f dd       	sub	sp,-12
800094f4:	78 09       	ld.w	r9,r12[0x0]
800094f6:	c2 18       	rjmp	80009538 <_vfprintf_r+0xfd4>
800094f8:	2f f7       	sub	r7,-1
800094fa:	10 39       	cp.w	r9,r8
800094fc:	c0 84       	brge	8000950c <_vfprintf_r+0xfa8>
800094fe:	fa ca f9 44 	sub	r10,sp,-1724
80009502:	f4 06 00 36 	add	r6,r10,r6<<0x3
80009506:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000950a:	c1 78       	rjmp	80009538 <_vfprintf_r+0xfd4>
8000950c:	41 09       	lddsp	r9,sp[0x40]
8000950e:	59 f8       	cp.w	r8,31
80009510:	e0 89 00 10 	brgt	80009530 <_vfprintf_r+0xfcc>
80009514:	f2 ca ff fc 	sub	r10,r9,-4
80009518:	51 0a       	stdsp	sp[0x40],r10
8000951a:	fa c6 f9 44 	sub	r6,sp,-1724
8000951e:	72 09       	ld.w	r9,r9[0x0]
80009520:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80009524:	f5 49 fd 88 	st.w	r10[-632],r9
80009528:	2f f8       	sub	r8,-1
8000952a:	fb 48 06 b4 	st.w	sp[1716],r8
8000952e:	c0 58       	rjmp	80009538 <_vfprintf_r+0xfd4>
80009530:	f2 c8 ff fc 	sub	r8,r9,-4
80009534:	51 08       	stdsp	sp[0x40],r8
80009536:	72 09       	ld.w	r9,r9[0x0]
80009538:	33 08       	mov	r8,48
8000953a:	fb 68 06 b8 	st.b	sp[1720],r8
8000953e:	37 88       	mov	r8,120
80009540:	30 0e       	mov	lr,0
80009542:	fb 68 06 b9 	st.b	sp[1721],r8
80009546:	fe cc bc aa 	sub	r12,pc,-17238
8000954a:	50 19       	stdsp	sp[0x4],r9
8000954c:	a1 b5       	sbr	r5,0x1
8000954e:	50 0e       	stdsp	sp[0x0],lr
80009550:	50 dc       	stdsp	sp[0x34],r12
80009552:	30 28       	mov	r8,2
80009554:	37 80       	mov	r0,120
80009556:	e0 8f 02 a3 	bral	80009a9c <_vfprintf_r+0x1538>
8000955a:	50 a7       	stdsp	sp[0x28],r7
8000955c:	50 80       	stdsp	sp[0x20],r0
8000955e:	10 90       	mov	r0,r8
80009560:	30 08       	mov	r8,0
80009562:	fb 68 06 bb 	st.b	sp[1723],r8
80009566:	0c 97       	mov	r7,r6
80009568:	04 94       	mov	r4,r2
8000956a:	06 96       	mov	r6,r3
8000956c:	02 92       	mov	r2,r1
8000956e:	40 93       	lddsp	r3,sp[0x24]
80009570:	40 41       	lddsp	r1,sp[0x10]
80009572:	0e 99       	mov	r9,r7
80009574:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009578:	40 3b       	lddsp	r11,sp[0xc]
8000957a:	58 0b       	cp.w	r11,0
8000957c:	c1 d0       	breq	800095b6 <_vfprintf_r+0x1052>
8000957e:	10 36       	cp.w	r6,r8
80009580:	c0 64       	brge	8000958c <_vfprintf_r+0x1028>
80009582:	fa ca f9 44 	sub	r10,sp,-1724
80009586:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000958a:	c1 d8       	rjmp	800095c4 <_vfprintf_r+0x1060>
8000958c:	fa c8 f9 50 	sub	r8,sp,-1712
80009590:	1a d8       	st.w	--sp,r8
80009592:	fa c8 fa b8 	sub	r8,sp,-1352
80009596:	1a d8       	st.w	--sp,r8
80009598:	fa c8 fb b4 	sub	r8,sp,-1100
8000959c:	0c 9b       	mov	r11,r6
8000959e:	1a d8       	st.w	--sp,r8
800095a0:	04 9a       	mov	r10,r2
800095a2:	fa c8 f9 40 	sub	r8,sp,-1728
800095a6:	fa c9 ff b4 	sub	r9,sp,-76
800095aa:	08 9c       	mov	r12,r4
800095ac:	fe b0 f6 44 	rcall	80008234 <get_arg>
800095b0:	2f dd       	sub	sp,-12
800095b2:	78 06       	ld.w	r6,r12[0x0]
800095b4:	c2 08       	rjmp	800095f4 <_vfprintf_r+0x1090>
800095b6:	2f f7       	sub	r7,-1
800095b8:	10 39       	cp.w	r9,r8
800095ba:	c0 84       	brge	800095ca <_vfprintf_r+0x1066>
800095bc:	fa c9 f9 44 	sub	r9,sp,-1724
800095c0:	f2 06 00 36 	add	r6,r9,r6<<0x3
800095c4:	ec f6 fd 88 	ld.w	r6,r6[-632]
800095c8:	c1 68       	rjmp	800095f4 <_vfprintf_r+0x1090>
800095ca:	41 09       	lddsp	r9,sp[0x40]
800095cc:	59 f8       	cp.w	r8,31
800095ce:	e0 89 00 10 	brgt	800095ee <_vfprintf_r+0x108a>
800095d2:	f2 ca ff fc 	sub	r10,r9,-4
800095d6:	51 0a       	stdsp	sp[0x40],r10
800095d8:	72 06       	ld.w	r6,r9[0x0]
800095da:	fa ce f9 44 	sub	lr,sp,-1724
800095de:	fc 08 00 39 	add	r9,lr,r8<<0x3
800095e2:	f3 46 fd 88 	st.w	r9[-632],r6
800095e6:	2f f8       	sub	r8,-1
800095e8:	fb 48 06 b4 	st.w	sp[1716],r8
800095ec:	c0 48       	rjmp	800095f4 <_vfprintf_r+0x1090>
800095ee:	72 06       	ld.w	r6,r9[0x0]
800095f0:	2f c9       	sub	r9,-4
800095f2:	51 09       	stdsp	sp[0x40],r9
800095f4:	40 2c       	lddsp	r12,sp[0x8]
800095f6:	58 0c       	cp.w	r12,0
800095f8:	c1 05       	brlt	80009618 <_vfprintf_r+0x10b4>
800095fa:	18 9a       	mov	r10,r12
800095fc:	30 0b       	mov	r11,0
800095fe:	0c 9c       	mov	r12,r6
80009600:	e0 a0 11 1e 	rcall	8000b83c <memchr>
80009604:	e0 80 02 df 	breq	80009bc2 <_vfprintf_r+0x165e>
80009608:	f8 06 01 02 	sub	r2,r12,r6
8000960c:	40 2b       	lddsp	r11,sp[0x8]
8000960e:	16 32       	cp.w	r2,r11
80009610:	e0 89 02 d9 	brgt	80009bc2 <_vfprintf_r+0x165e>
80009614:	e0 8f 02 d4 	bral	80009bbc <_vfprintf_r+0x1658>
80009618:	30 0a       	mov	r10,0
8000961a:	0c 9c       	mov	r12,r6
8000961c:	50 2a       	stdsp	sp[0x8],r10
8000961e:	e0 a0 15 e7 	rcall	8000c1ec <strlen>
80009622:	18 92       	mov	r2,r12
80009624:	e0 8f 02 d2 	bral	80009bc8 <_vfprintf_r+0x1664>
80009628:	50 a7       	stdsp	sp[0x28],r7
8000962a:	50 80       	stdsp	sp[0x20],r0
8000962c:	0c 97       	mov	r7,r6
8000962e:	04 94       	mov	r4,r2
80009630:	06 96       	mov	r6,r3
80009632:	02 92       	mov	r2,r1
80009634:	40 93       	lddsp	r3,sp[0x24]
80009636:	10 90       	mov	r0,r8
80009638:	40 41       	lddsp	r1,sp[0x10]
8000963a:	a5 a5       	sbr	r5,0x4
8000963c:	c0 a8       	rjmp	80009650 <_vfprintf_r+0x10ec>
8000963e:	50 a7       	stdsp	sp[0x28],r7
80009640:	50 80       	stdsp	sp[0x20],r0
80009642:	0c 97       	mov	r7,r6
80009644:	04 94       	mov	r4,r2
80009646:	06 96       	mov	r6,r3
80009648:	02 92       	mov	r2,r1
8000964a:	40 93       	lddsp	r3,sp[0x24]
8000964c:	10 90       	mov	r0,r8
8000964e:	40 41       	lddsp	r1,sp[0x10]
80009650:	ed b5 00 05 	bld	r5,0x5
80009654:	c5 61       	brne	80009700 <_vfprintf_r+0x119c>
80009656:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000965a:	40 39       	lddsp	r9,sp[0xc]
8000965c:	58 09       	cp.w	r9,0
8000965e:	c2 10       	breq	800096a0 <_vfprintf_r+0x113c>
80009660:	10 36       	cp.w	r6,r8
80009662:	c0 74       	brge	80009670 <_vfprintf_r+0x110c>
80009664:	fa c8 f9 44 	sub	r8,sp,-1724
80009668:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000966c:	c2 38       	rjmp	800096b2 <_vfprintf_r+0x114e>
8000966e:	d7 03       	nop
80009670:	fa c8 f9 50 	sub	r8,sp,-1712
80009674:	1a d8       	st.w	--sp,r8
80009676:	fa c8 fa b8 	sub	r8,sp,-1352
8000967a:	1a d8       	st.w	--sp,r8
8000967c:	fa c8 fb b4 	sub	r8,sp,-1100
80009680:	1a d8       	st.w	--sp,r8
80009682:	fa c8 f9 40 	sub	r8,sp,-1728
80009686:	fa c9 ff b4 	sub	r9,sp,-76
8000968a:	04 9a       	mov	r10,r2
8000968c:	0c 9b       	mov	r11,r6
8000968e:	08 9c       	mov	r12,r4
80009690:	fe b0 f5 d2 	rcall	80008234 <get_arg>
80009694:	2f dd       	sub	sp,-12
80009696:	f8 e8 00 00 	ld.d	r8,r12[0]
8000969a:	fa e9 00 00 	st.d	sp[0],r8
8000969e:	c2 e8       	rjmp	800096fa <_vfprintf_r+0x1196>
800096a0:	ee ca ff ff 	sub	r10,r7,-1
800096a4:	10 37       	cp.w	r7,r8
800096a6:	c0 b4       	brge	800096bc <_vfprintf_r+0x1158>
800096a8:	fa c8 f9 44 	sub	r8,sp,-1724
800096ac:	14 97       	mov	r7,r10
800096ae:	f0 06 00 36 	add	r6,r8,r6<<0x3
800096b2:	ec ea fd 88 	ld.d	r10,r6[-632]
800096b6:	fa eb 00 00 	st.d	sp[0],r10
800096ba:	c2 08       	rjmp	800096fa <_vfprintf_r+0x1196>
800096bc:	41 09       	lddsp	r9,sp[0x40]
800096be:	59 f8       	cp.w	r8,31
800096c0:	e0 89 00 16 	brgt	800096ec <_vfprintf_r+0x1188>
800096c4:	f2 e6 00 00 	ld.d	r6,r9[0]
800096c8:	f2 cb ff f8 	sub	r11,r9,-8
800096cc:	fa e7 00 00 	st.d	sp[0],r6
800096d0:	51 0b       	stdsp	sp[0x40],r11
800096d2:	fa c6 f9 44 	sub	r6,sp,-1724
800096d6:	ec 08 00 39 	add	r9,r6,r8<<0x3
800096da:	fa e6 00 00 	ld.d	r6,sp[0]
800096de:	f2 e7 fd 88 	st.d	r9[-632],r6
800096e2:	2f f8       	sub	r8,-1
800096e4:	14 97       	mov	r7,r10
800096e6:	fb 48 06 b4 	st.w	sp[1716],r8
800096ea:	c0 88       	rjmp	800096fa <_vfprintf_r+0x1196>
800096ec:	f2 e6 00 00 	ld.d	r6,r9[0]
800096f0:	2f 89       	sub	r9,-8
800096f2:	fa e7 00 00 	st.d	sp[0],r6
800096f6:	51 09       	stdsp	sp[0x40],r9
800096f8:	14 97       	mov	r7,r10
800096fa:	30 18       	mov	r8,1
800096fc:	e0 8f 01 d0 	bral	80009a9c <_vfprintf_r+0x1538>
80009700:	ed b5 00 04 	bld	r5,0x4
80009704:	c1 61       	brne	80009730 <_vfprintf_r+0x11cc>
80009706:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000970a:	40 3e       	lddsp	lr,sp[0xc]
8000970c:	58 0e       	cp.w	lr,0
8000970e:	c0 80       	breq	8000971e <_vfprintf_r+0x11ba>
80009710:	10 36       	cp.w	r6,r8
80009712:	c6 74       	brge	800097e0 <_vfprintf_r+0x127c>
80009714:	fa cc f9 44 	sub	r12,sp,-1724
80009718:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000971c:	c8 08       	rjmp	8000981c <_vfprintf_r+0x12b8>
8000971e:	ee ca ff ff 	sub	r10,r7,-1
80009722:	10 37       	cp.w	r7,r8
80009724:	c7 f4       	brge	80009822 <_vfprintf_r+0x12be>
80009726:	fa cb f9 44 	sub	r11,sp,-1724
8000972a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000972e:	c7 68       	rjmp	8000981a <_vfprintf_r+0x12b6>
80009730:	ed b5 00 06 	bld	r5,0x6
80009734:	c4 a1       	brne	800097c8 <_vfprintf_r+0x1264>
80009736:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000973a:	40 3c       	lddsp	r12,sp[0xc]
8000973c:	58 0c       	cp.w	r12,0
8000973e:	c1 d0       	breq	80009778 <_vfprintf_r+0x1214>
80009740:	10 36       	cp.w	r6,r8
80009742:	c0 64       	brge	8000974e <_vfprintf_r+0x11ea>
80009744:	fa cb f9 44 	sub	r11,sp,-1724
80009748:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000974c:	c1 f8       	rjmp	8000978a <_vfprintf_r+0x1226>
8000974e:	fa c8 f9 50 	sub	r8,sp,-1712
80009752:	1a d8       	st.w	--sp,r8
80009754:	fa c8 fa b8 	sub	r8,sp,-1352
80009758:	1a d8       	st.w	--sp,r8
8000975a:	fa c8 fb b4 	sub	r8,sp,-1100
8000975e:	1a d8       	st.w	--sp,r8
80009760:	fa c8 f9 40 	sub	r8,sp,-1728
80009764:	fa c9 ff b4 	sub	r9,sp,-76
80009768:	04 9a       	mov	r10,r2
8000976a:	0c 9b       	mov	r11,r6
8000976c:	08 9c       	mov	r12,r4
8000976e:	fe b0 f5 63 	rcall	80008234 <get_arg>
80009772:	2f dd       	sub	sp,-12
80009774:	98 18       	ld.sh	r8,r12[0x2]
80009776:	c2 68       	rjmp	800097c2 <_vfprintf_r+0x125e>
80009778:	ee ca ff ff 	sub	r10,r7,-1
8000977c:	10 37       	cp.w	r7,r8
8000977e:	c0 94       	brge	80009790 <_vfprintf_r+0x122c>
80009780:	fa c9 f9 44 	sub	r9,sp,-1724
80009784:	14 97       	mov	r7,r10
80009786:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000978a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000978e:	c1 a8       	rjmp	800097c2 <_vfprintf_r+0x125e>
80009790:	41 09       	lddsp	r9,sp[0x40]
80009792:	59 f8       	cp.w	r8,31
80009794:	e0 89 00 13 	brgt	800097ba <_vfprintf_r+0x1256>
80009798:	f2 cb ff fc 	sub	r11,r9,-4
8000979c:	51 0b       	stdsp	sp[0x40],r11
8000979e:	72 09       	ld.w	r9,r9[0x0]
800097a0:	fa c6 f9 44 	sub	r6,sp,-1724
800097a4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800097a8:	2f f8       	sub	r8,-1
800097aa:	f7 49 fd 88 	st.w	r11[-632],r9
800097ae:	fb 48 06 b4 	st.w	sp[1716],r8
800097b2:	14 97       	mov	r7,r10
800097b4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800097b8:	c0 58       	rjmp	800097c2 <_vfprintf_r+0x125e>
800097ba:	92 18       	ld.sh	r8,r9[0x2]
800097bc:	14 97       	mov	r7,r10
800097be:	2f c9       	sub	r9,-4
800097c0:	51 09       	stdsp	sp[0x40],r9
800097c2:	5c 78       	castu.h	r8
800097c4:	50 18       	stdsp	sp[0x4],r8
800097c6:	c4 68       	rjmp	80009852 <_vfprintf_r+0x12ee>
800097c8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800097cc:	40 3c       	lddsp	r12,sp[0xc]
800097ce:	58 0c       	cp.w	r12,0
800097d0:	c1 d0       	breq	8000980a <_vfprintf_r+0x12a6>
800097d2:	10 36       	cp.w	r6,r8
800097d4:	c0 64       	brge	800097e0 <_vfprintf_r+0x127c>
800097d6:	fa cb f9 44 	sub	r11,sp,-1724
800097da:	f6 06 00 36 	add	r6,r11,r6<<0x3
800097de:	c1 f8       	rjmp	8000981c <_vfprintf_r+0x12b8>
800097e0:	fa c8 f9 50 	sub	r8,sp,-1712
800097e4:	1a d8       	st.w	--sp,r8
800097e6:	fa c8 fa b8 	sub	r8,sp,-1352
800097ea:	0c 9b       	mov	r11,r6
800097ec:	1a d8       	st.w	--sp,r8
800097ee:	fa c8 fb b4 	sub	r8,sp,-1100
800097f2:	04 9a       	mov	r10,r2
800097f4:	1a d8       	st.w	--sp,r8
800097f6:	08 9c       	mov	r12,r4
800097f8:	fa c8 f9 40 	sub	r8,sp,-1728
800097fc:	fa c9 ff b4 	sub	r9,sp,-76
80009800:	fe b0 f5 1a 	rcall	80008234 <get_arg>
80009804:	2f dd       	sub	sp,-12
80009806:	78 0b       	ld.w	r11,r12[0x0]
80009808:	c2 48       	rjmp	80009850 <_vfprintf_r+0x12ec>
8000980a:	ee ca ff ff 	sub	r10,r7,-1
8000980e:	10 37       	cp.w	r7,r8
80009810:	c0 94       	brge	80009822 <_vfprintf_r+0x12be>
80009812:	fa c9 f9 44 	sub	r9,sp,-1724
80009816:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000981a:	14 97       	mov	r7,r10
8000981c:	ec fb fd 88 	ld.w	r11,r6[-632]
80009820:	c1 88       	rjmp	80009850 <_vfprintf_r+0x12ec>
80009822:	41 09       	lddsp	r9,sp[0x40]
80009824:	59 f8       	cp.w	r8,31
80009826:	e0 89 00 11 	brgt	80009848 <_vfprintf_r+0x12e4>
8000982a:	f2 cb ff fc 	sub	r11,r9,-4
8000982e:	51 0b       	stdsp	sp[0x40],r11
80009830:	fa c6 f9 44 	sub	r6,sp,-1724
80009834:	72 0b       	ld.w	r11,r9[0x0]
80009836:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000983a:	f3 4b fd 88 	st.w	r9[-632],r11
8000983e:	2f f8       	sub	r8,-1
80009840:	14 97       	mov	r7,r10
80009842:	fb 48 06 b4 	st.w	sp[1716],r8
80009846:	c0 58       	rjmp	80009850 <_vfprintf_r+0x12ec>
80009848:	72 0b       	ld.w	r11,r9[0x0]
8000984a:	14 97       	mov	r7,r10
8000984c:	2f c9       	sub	r9,-4
8000984e:	51 09       	stdsp	sp[0x40],r9
80009850:	50 1b       	stdsp	sp[0x4],r11
80009852:	30 0e       	mov	lr,0
80009854:	30 18       	mov	r8,1
80009856:	50 0e       	stdsp	sp[0x0],lr
80009858:	c2 29       	rjmp	80009a9c <_vfprintf_r+0x1538>
8000985a:	50 a7       	stdsp	sp[0x28],r7
8000985c:	50 80       	stdsp	sp[0x20],r0
8000985e:	0c 97       	mov	r7,r6
80009860:	04 94       	mov	r4,r2
80009862:	06 96       	mov	r6,r3
80009864:	02 92       	mov	r2,r1
80009866:	fe cc bf ca 	sub	r12,pc,-16438
8000986a:	40 93       	lddsp	r3,sp[0x24]
8000986c:	10 90       	mov	r0,r8
8000986e:	40 41       	lddsp	r1,sp[0x10]
80009870:	50 dc       	stdsp	sp[0x34],r12
80009872:	ed b5 00 05 	bld	r5,0x5
80009876:	c5 51       	brne	80009920 <_vfprintf_r+0x13bc>
80009878:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000987c:	40 3b       	lddsp	r11,sp[0xc]
8000987e:	58 0b       	cp.w	r11,0
80009880:	c2 20       	breq	800098c4 <_vfprintf_r+0x1360>
80009882:	10 36       	cp.w	r6,r8
80009884:	c0 a4       	brge	80009898 <_vfprintf_r+0x1334>
80009886:	fa ca f9 44 	sub	r10,sp,-1724
8000988a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000988e:	ec e8 fd 88 	ld.d	r8,r6[-632]
80009892:	fa e9 00 00 	st.d	sp[0],r8
80009896:	cf 28       	rjmp	80009a7a <_vfprintf_r+0x1516>
80009898:	fa c8 f9 50 	sub	r8,sp,-1712
8000989c:	1a d8       	st.w	--sp,r8
8000989e:	fa c8 fa b8 	sub	r8,sp,-1352
800098a2:	04 9a       	mov	r10,r2
800098a4:	1a d8       	st.w	--sp,r8
800098a6:	0c 9b       	mov	r11,r6
800098a8:	fa c8 fb b4 	sub	r8,sp,-1100
800098ac:	08 9c       	mov	r12,r4
800098ae:	1a d8       	st.w	--sp,r8
800098b0:	fa c8 f9 40 	sub	r8,sp,-1728
800098b4:	fa c9 ff b4 	sub	r9,sp,-76
800098b8:	fe b0 f4 be 	rcall	80008234 <get_arg>
800098bc:	2f dd       	sub	sp,-12
800098be:	f8 ea 00 00 	ld.d	r10,r12[0]
800098c2:	c0 c8       	rjmp	800098da <_vfprintf_r+0x1376>
800098c4:	ee ca ff ff 	sub	r10,r7,-1
800098c8:	10 37       	cp.w	r7,r8
800098ca:	c0 b4       	brge	800098e0 <_vfprintf_r+0x137c>
800098cc:	fa c9 f9 44 	sub	r9,sp,-1724
800098d0:	14 97       	mov	r7,r10
800098d2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800098d6:	ec ea fd 88 	ld.d	r10,r6[-632]
800098da:	fa eb 00 00 	st.d	sp[0],r10
800098de:	cc e8       	rjmp	80009a7a <_vfprintf_r+0x1516>
800098e0:	41 09       	lddsp	r9,sp[0x40]
800098e2:	59 f8       	cp.w	r8,31
800098e4:	e0 89 00 16 	brgt	80009910 <_vfprintf_r+0x13ac>
800098e8:	f2 e6 00 00 	ld.d	r6,r9[0]
800098ec:	f2 cb ff f8 	sub	r11,r9,-8
800098f0:	fa e7 00 00 	st.d	sp[0],r6
800098f4:	51 0b       	stdsp	sp[0x40],r11
800098f6:	fa c6 f9 44 	sub	r6,sp,-1724
800098fa:	ec 08 00 39 	add	r9,r6,r8<<0x3
800098fe:	fa e6 00 00 	ld.d	r6,sp[0]
80009902:	f2 e7 fd 88 	st.d	r9[-632],r6
80009906:	2f f8       	sub	r8,-1
80009908:	14 97       	mov	r7,r10
8000990a:	fb 48 06 b4 	st.w	sp[1716],r8
8000990e:	cb 68       	rjmp	80009a7a <_vfprintf_r+0x1516>
80009910:	f2 e6 00 00 	ld.d	r6,r9[0]
80009914:	2f 89       	sub	r9,-8
80009916:	fa e7 00 00 	st.d	sp[0],r6
8000991a:	51 09       	stdsp	sp[0x40],r9
8000991c:	14 97       	mov	r7,r10
8000991e:	ca e8       	rjmp	80009a7a <_vfprintf_r+0x1516>
80009920:	ed b5 00 04 	bld	r5,0x4
80009924:	c1 71       	brne	80009952 <_vfprintf_r+0x13ee>
80009926:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000992a:	40 3e       	lddsp	lr,sp[0xc]
8000992c:	58 0e       	cp.w	lr,0
8000992e:	c0 80       	breq	8000993e <_vfprintf_r+0x13da>
80009930:	10 36       	cp.w	r6,r8
80009932:	c6 94       	brge	80009a04 <_vfprintf_r+0x14a0>
80009934:	fa cc f9 44 	sub	r12,sp,-1724
80009938:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000993c:	c8 28       	rjmp	80009a40 <_vfprintf_r+0x14dc>
8000993e:	ee ca ff ff 	sub	r10,r7,-1
80009942:	10 37       	cp.w	r7,r8
80009944:	e0 84 00 81 	brge	80009a46 <_vfprintf_r+0x14e2>
80009948:	fa cb f9 44 	sub	r11,sp,-1724
8000994c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009950:	c7 78       	rjmp	80009a3e <_vfprintf_r+0x14da>
80009952:	ed b5 00 06 	bld	r5,0x6
80009956:	c4 b1       	brne	800099ec <_vfprintf_r+0x1488>
80009958:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000995c:	40 3c       	lddsp	r12,sp[0xc]
8000995e:	58 0c       	cp.w	r12,0
80009960:	c1 d0       	breq	8000999a <_vfprintf_r+0x1436>
80009962:	10 36       	cp.w	r6,r8
80009964:	c0 64       	brge	80009970 <_vfprintf_r+0x140c>
80009966:	fa cb f9 44 	sub	r11,sp,-1724
8000996a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000996e:	c1 f8       	rjmp	800099ac <_vfprintf_r+0x1448>
80009970:	fa c8 f9 50 	sub	r8,sp,-1712
80009974:	1a d8       	st.w	--sp,r8
80009976:	fa c8 fa b8 	sub	r8,sp,-1352
8000997a:	1a d8       	st.w	--sp,r8
8000997c:	fa c8 fb b4 	sub	r8,sp,-1100
80009980:	1a d8       	st.w	--sp,r8
80009982:	fa c8 f9 40 	sub	r8,sp,-1728
80009986:	fa c9 ff b4 	sub	r9,sp,-76
8000998a:	04 9a       	mov	r10,r2
8000998c:	0c 9b       	mov	r11,r6
8000998e:	08 9c       	mov	r12,r4
80009990:	fe b0 f4 52 	rcall	80008234 <get_arg>
80009994:	2f dd       	sub	sp,-12
80009996:	98 18       	ld.sh	r8,r12[0x2]
80009998:	c2 78       	rjmp	800099e6 <_vfprintf_r+0x1482>
8000999a:	ee ca ff ff 	sub	r10,r7,-1
8000999e:	10 37       	cp.w	r7,r8
800099a0:	c0 a4       	brge	800099b4 <_vfprintf_r+0x1450>
800099a2:	fa c9 f9 44 	sub	r9,sp,-1724
800099a6:	14 97       	mov	r7,r10
800099a8:	f2 06 00 36 	add	r6,r9,r6<<0x3
800099ac:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800099b0:	c1 b8       	rjmp	800099e6 <_vfprintf_r+0x1482>
800099b2:	d7 03       	nop
800099b4:	41 09       	lddsp	r9,sp[0x40]
800099b6:	59 f8       	cp.w	r8,31
800099b8:	e0 89 00 13 	brgt	800099de <_vfprintf_r+0x147a>
800099bc:	f2 cb ff fc 	sub	r11,r9,-4
800099c0:	51 0b       	stdsp	sp[0x40],r11
800099c2:	72 09       	ld.w	r9,r9[0x0]
800099c4:	fa c6 f9 44 	sub	r6,sp,-1724
800099c8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800099cc:	2f f8       	sub	r8,-1
800099ce:	f7 49 fd 88 	st.w	r11[-632],r9
800099d2:	fb 48 06 b4 	st.w	sp[1716],r8
800099d6:	14 97       	mov	r7,r10
800099d8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800099dc:	c0 58       	rjmp	800099e6 <_vfprintf_r+0x1482>
800099de:	92 18       	ld.sh	r8,r9[0x2]
800099e0:	14 97       	mov	r7,r10
800099e2:	2f c9       	sub	r9,-4
800099e4:	51 09       	stdsp	sp[0x40],r9
800099e6:	5c 78       	castu.h	r8
800099e8:	50 18       	stdsp	sp[0x4],r8
800099ea:	c4 68       	rjmp	80009a76 <_vfprintf_r+0x1512>
800099ec:	fa f8 06 b4 	ld.w	r8,sp[1716]
800099f0:	40 3c       	lddsp	r12,sp[0xc]
800099f2:	58 0c       	cp.w	r12,0
800099f4:	c1 d0       	breq	80009a2e <_vfprintf_r+0x14ca>
800099f6:	10 36       	cp.w	r6,r8
800099f8:	c0 64       	brge	80009a04 <_vfprintf_r+0x14a0>
800099fa:	fa cb f9 44 	sub	r11,sp,-1724
800099fe:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009a02:	c1 f8       	rjmp	80009a40 <_vfprintf_r+0x14dc>
80009a04:	fa c8 f9 50 	sub	r8,sp,-1712
80009a08:	1a d8       	st.w	--sp,r8
80009a0a:	fa c8 fa b8 	sub	r8,sp,-1352
80009a0e:	0c 9b       	mov	r11,r6
80009a10:	1a d8       	st.w	--sp,r8
80009a12:	fa c8 fb b4 	sub	r8,sp,-1100
80009a16:	04 9a       	mov	r10,r2
80009a18:	1a d8       	st.w	--sp,r8
80009a1a:	08 9c       	mov	r12,r4
80009a1c:	fa c8 f9 40 	sub	r8,sp,-1728
80009a20:	fa c9 ff b4 	sub	r9,sp,-76
80009a24:	fe b0 f4 08 	rcall	80008234 <get_arg>
80009a28:	2f dd       	sub	sp,-12
80009a2a:	78 0b       	ld.w	r11,r12[0x0]
80009a2c:	c2 48       	rjmp	80009a74 <_vfprintf_r+0x1510>
80009a2e:	ee ca ff ff 	sub	r10,r7,-1
80009a32:	10 37       	cp.w	r7,r8
80009a34:	c0 94       	brge	80009a46 <_vfprintf_r+0x14e2>
80009a36:	fa c9 f9 44 	sub	r9,sp,-1724
80009a3a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80009a3e:	14 97       	mov	r7,r10
80009a40:	ec fb fd 88 	ld.w	r11,r6[-632]
80009a44:	c1 88       	rjmp	80009a74 <_vfprintf_r+0x1510>
80009a46:	41 09       	lddsp	r9,sp[0x40]
80009a48:	59 f8       	cp.w	r8,31
80009a4a:	e0 89 00 11 	brgt	80009a6c <_vfprintf_r+0x1508>
80009a4e:	f2 cb ff fc 	sub	r11,r9,-4
80009a52:	51 0b       	stdsp	sp[0x40],r11
80009a54:	fa c6 f9 44 	sub	r6,sp,-1724
80009a58:	72 0b       	ld.w	r11,r9[0x0]
80009a5a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80009a5e:	f3 4b fd 88 	st.w	r9[-632],r11
80009a62:	2f f8       	sub	r8,-1
80009a64:	14 97       	mov	r7,r10
80009a66:	fb 48 06 b4 	st.w	sp[1716],r8
80009a6a:	c0 58       	rjmp	80009a74 <_vfprintf_r+0x1510>
80009a6c:	72 0b       	ld.w	r11,r9[0x0]
80009a6e:	14 97       	mov	r7,r10
80009a70:	2f c9       	sub	r9,-4
80009a72:	51 09       	stdsp	sp[0x40],r9
80009a74:	50 1b       	stdsp	sp[0x4],r11
80009a76:	30 0e       	mov	lr,0
80009a78:	50 0e       	stdsp	sp[0x0],lr
80009a7a:	40 08       	lddsp	r8,sp[0x0]
80009a7c:	40 1c       	lddsp	r12,sp[0x4]
80009a7e:	18 48       	or	r8,r12
80009a80:	5f 19       	srne	r9
80009a82:	0a 98       	mov	r8,r5
80009a84:	eb e9 00 09 	and	r9,r5,r9
80009a88:	a1 b8       	sbr	r8,0x1
80009a8a:	58 09       	cp.w	r9,0
80009a8c:	c0 70       	breq	80009a9a <_vfprintf_r+0x1536>
80009a8e:	10 95       	mov	r5,r8
80009a90:	fb 60 06 b9 	st.b	sp[1721],r0
80009a94:	33 08       	mov	r8,48
80009a96:	fb 68 06 b8 	st.b	sp[1720],r8
80009a9a:	30 28       	mov	r8,2
80009a9c:	30 09       	mov	r9,0
80009a9e:	fb 69 06 bb 	st.b	sp[1723],r9
80009aa2:	0a 99       	mov	r9,r5
80009aa4:	a7 d9       	cbr	r9,0x7
80009aa6:	40 2b       	lddsp	r11,sp[0x8]
80009aa8:	40 16       	lddsp	r6,sp[0x4]
80009aaa:	58 0b       	cp.w	r11,0
80009aac:	5f 1a       	srne	r10
80009aae:	f2 05 17 40 	movge	r5,r9
80009ab2:	fa c2 f9 78 	sub	r2,sp,-1672
80009ab6:	40 09       	lddsp	r9,sp[0x0]
80009ab8:	0c 49       	or	r9,r6
80009aba:	5f 19       	srne	r9
80009abc:	f5 e9 10 09 	or	r9,r10,r9
80009ac0:	c5 c0       	breq	80009b78 <_vfprintf_r+0x1614>
80009ac2:	30 19       	mov	r9,1
80009ac4:	f2 08 18 00 	cp.b	r8,r9
80009ac8:	c0 60       	breq	80009ad4 <_vfprintf_r+0x1570>
80009aca:	30 29       	mov	r9,2
80009acc:	f2 08 18 00 	cp.b	r8,r9
80009ad0:	c0 41       	brne	80009ad8 <_vfprintf_r+0x1574>
80009ad2:	c3 c8       	rjmp	80009b4a <_vfprintf_r+0x15e6>
80009ad4:	04 96       	mov	r6,r2
80009ad6:	c3 08       	rjmp	80009b36 <_vfprintf_r+0x15d2>
80009ad8:	04 96       	mov	r6,r2
80009ada:	fa e8 00 00 	ld.d	r8,sp[0]
80009ade:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80009ae2:	2d 0a       	sub	r10,-48
80009ae4:	0c fa       	st.b	--r6,r10
80009ae6:	f0 0b 16 03 	lsr	r11,r8,0x3
80009aea:	f2 0c 16 03 	lsr	r12,r9,0x3
80009aee:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80009af2:	18 99       	mov	r9,r12
80009af4:	16 98       	mov	r8,r11
80009af6:	58 08       	cp.w	r8,0
80009af8:	5c 29       	cpc	r9
80009afa:	cf 21       	brne	80009ade <_vfprintf_r+0x157a>
80009afc:	fa e9 00 00 	st.d	sp[0],r8
80009b00:	ed b5 00 00 	bld	r5,0x0
80009b04:	c4 51       	brne	80009b8e <_vfprintf_r+0x162a>
80009b06:	33 09       	mov	r9,48
80009b08:	f2 0a 18 00 	cp.b	r10,r9
80009b0c:	c4 10       	breq	80009b8e <_vfprintf_r+0x162a>
80009b0e:	0c f9       	st.b	--r6,r9
80009b10:	c3 f8       	rjmp	80009b8e <_vfprintf_r+0x162a>
80009b12:	fa ea 00 00 	ld.d	r10,sp[0]
80009b16:	30 a8       	mov	r8,10
80009b18:	30 09       	mov	r9,0
80009b1a:	e0 a0 1a 67 	rcall	8000cfe8 <__avr32_umod64>
80009b1e:	30 a8       	mov	r8,10
80009b20:	2d 0a       	sub	r10,-48
80009b22:	30 09       	mov	r9,0
80009b24:	ac 8a       	st.b	r6[0x0],r10
80009b26:	fa ea 00 00 	ld.d	r10,sp[0]
80009b2a:	e0 a0 19 2d 	rcall	8000cd84 <__avr32_udiv64>
80009b2e:	16 99       	mov	r9,r11
80009b30:	14 98       	mov	r8,r10
80009b32:	fa e9 00 00 	st.d	sp[0],r8
80009b36:	20 16       	sub	r6,1
80009b38:	fa ea 00 00 	ld.d	r10,sp[0]
80009b3c:	58 9a       	cp.w	r10,9
80009b3e:	5c 2b       	cpc	r11
80009b40:	fe 9b ff e9 	brhi	80009b12 <_vfprintf_r+0x15ae>
80009b44:	1b f8       	ld.ub	r8,sp[0x7]
80009b46:	2d 08       	sub	r8,-48
80009b48:	c2 08       	rjmp	80009b88 <_vfprintf_r+0x1624>
80009b4a:	04 96       	mov	r6,r2
80009b4c:	fa e8 00 00 	ld.d	r8,sp[0]
80009b50:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80009b54:	40 de       	lddsp	lr,sp[0x34]
80009b56:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80009b5a:	0c fa       	st.b	--r6,r10
80009b5c:	f2 0b 16 04 	lsr	r11,r9,0x4
80009b60:	f0 0a 16 04 	lsr	r10,r8,0x4
80009b64:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80009b68:	16 99       	mov	r9,r11
80009b6a:	14 98       	mov	r8,r10
80009b6c:	58 08       	cp.w	r8,0
80009b6e:	5c 29       	cpc	r9
80009b70:	cf 01       	brne	80009b50 <_vfprintf_r+0x15ec>
80009b72:	fa e9 00 00 	st.d	sp[0],r8
80009b76:	c0 c8       	rjmp	80009b8e <_vfprintf_r+0x162a>
80009b78:	58 08       	cp.w	r8,0
80009b7a:	c0 91       	brne	80009b8c <_vfprintf_r+0x1628>
80009b7c:	ed b5 00 00 	bld	r5,0x0
80009b80:	c0 61       	brne	80009b8c <_vfprintf_r+0x1628>
80009b82:	fa c6 f9 79 	sub	r6,sp,-1671
80009b86:	33 08       	mov	r8,48
80009b88:	ac 88       	st.b	r6[0x0],r8
80009b8a:	c0 28       	rjmp	80009b8e <_vfprintf_r+0x162a>
80009b8c:	04 96       	mov	r6,r2
80009b8e:	0c 12       	sub	r2,r6
80009b90:	c1 c8       	rjmp	80009bc8 <_vfprintf_r+0x1664>
80009b92:	50 a7       	stdsp	sp[0x28],r7
80009b94:	50 80       	stdsp	sp[0x20],r0
80009b96:	40 93       	lddsp	r3,sp[0x24]
80009b98:	0c 97       	mov	r7,r6
80009b9a:	10 90       	mov	r0,r8
80009b9c:	04 94       	mov	r4,r2
80009b9e:	40 41       	lddsp	r1,sp[0x10]
80009ba0:	58 08       	cp.w	r8,0
80009ba2:	e0 80 04 4f 	breq	8000a440 <_vfprintf_r+0x1edc>
80009ba6:	fb 68 06 60 	st.b	sp[1632],r8
80009baa:	30 0c       	mov	r12,0
80009bac:	30 08       	mov	r8,0
80009bae:	30 12       	mov	r2,1
80009bb0:	fb 68 06 bb 	st.b	sp[1723],r8
80009bb4:	50 2c       	stdsp	sp[0x8],r12
80009bb6:	fa c6 f9 a0 	sub	r6,sp,-1632
80009bba:	c0 78       	rjmp	80009bc8 <_vfprintf_r+0x1664>
80009bbc:	30 0b       	mov	r11,0
80009bbe:	50 2b       	stdsp	sp[0x8],r11
80009bc0:	c0 48       	rjmp	80009bc8 <_vfprintf_r+0x1664>
80009bc2:	40 22       	lddsp	r2,sp[0x8]
80009bc4:	30 0a       	mov	r10,0
80009bc6:	50 2a       	stdsp	sp[0x8],r10
80009bc8:	40 29       	lddsp	r9,sp[0x8]
80009bca:	e4 09 0c 49 	max	r9,r2,r9
80009bce:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80009bd2:	50 39       	stdsp	sp[0xc],r9
80009bd4:	0a 9e       	mov	lr,r5
80009bd6:	30 09       	mov	r9,0
80009bd8:	e2 1e 00 02 	andl	lr,0x2,COH
80009bdc:	f2 08 18 00 	cp.b	r8,r9
80009be0:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80009be4:	f7 b8 01 ff 	subne	r8,-1
80009be8:	fb f8 1a 03 	st.wne	sp[0xc],r8
80009bec:	0a 9b       	mov	r11,r5
80009bee:	58 0e       	cp.w	lr,0
80009bf0:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80009bf4:	f7 bc 01 fe 	subne	r12,-2
80009bf8:	fb fc 1a 03 	st.wne	sp[0xc],r12
80009bfc:	e2 1b 00 84 	andl	r11,0x84,COH
80009c00:	50 fe       	stdsp	sp[0x3c],lr
80009c02:	50 9b       	stdsp	sp[0x24],r11
80009c04:	c4 71       	brne	80009c92 <_vfprintf_r+0x172e>
80009c06:	40 8a       	lddsp	r10,sp[0x20]
80009c08:	40 39       	lddsp	r9,sp[0xc]
80009c0a:	12 1a       	sub	r10,r9
80009c0c:	50 4a       	stdsp	sp[0x10],r10
80009c0e:	58 0a       	cp.w	r10,0
80009c10:	e0 89 00 20 	brgt	80009c50 <_vfprintf_r+0x16ec>
80009c14:	c3 f8       	rjmp	80009c92 <_vfprintf_r+0x172e>
80009c16:	2f 09       	sub	r9,-16
80009c18:	2f f8       	sub	r8,-1
80009c1a:	fe ce c3 66 	sub	lr,pc,-15514
80009c1e:	31 0c       	mov	r12,16
80009c20:	fb 49 06 90 	st.w	sp[1680],r9
80009c24:	87 0e       	st.w	r3[0x0],lr
80009c26:	87 1c       	st.w	r3[0x4],r12
80009c28:	fb 48 06 8c 	st.w	sp[1676],r8
80009c2c:	58 78       	cp.w	r8,7
80009c2e:	e0 89 00 04 	brgt	80009c36 <_vfprintf_r+0x16d2>
80009c32:	2f 83       	sub	r3,-8
80009c34:	c0 b8       	rjmp	80009c4a <_vfprintf_r+0x16e6>
80009c36:	fa ca f9 78 	sub	r10,sp,-1672
80009c3a:	02 9b       	mov	r11,r1
80009c3c:	08 9c       	mov	r12,r4
80009c3e:	fe b0 f4 85 	rcall	80008548 <__sprint_r>
80009c42:	e0 81 04 10 	brne	8000a462 <_vfprintf_r+0x1efe>
80009c46:	fa c3 f9 e0 	sub	r3,sp,-1568
80009c4a:	40 4b       	lddsp	r11,sp[0x10]
80009c4c:	21 0b       	sub	r11,16
80009c4e:	50 4b       	stdsp	sp[0x10],r11
80009c50:	fa f9 06 90 	ld.w	r9,sp[1680]
80009c54:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009c58:	fe ca c3 a4 	sub	r10,pc,-15452
80009c5c:	40 4e       	lddsp	lr,sp[0x10]
80009c5e:	59 0e       	cp.w	lr,16
80009c60:	fe 99 ff db 	brgt	80009c16 <_vfprintf_r+0x16b2>
80009c64:	1c 09       	add	r9,lr
80009c66:	2f f8       	sub	r8,-1
80009c68:	87 0a       	st.w	r3[0x0],r10
80009c6a:	fb 49 06 90 	st.w	sp[1680],r9
80009c6e:	87 1e       	st.w	r3[0x4],lr
80009c70:	fb 48 06 8c 	st.w	sp[1676],r8
80009c74:	58 78       	cp.w	r8,7
80009c76:	e0 89 00 04 	brgt	80009c7e <_vfprintf_r+0x171a>
80009c7a:	2f 83       	sub	r3,-8
80009c7c:	c0 b8       	rjmp	80009c92 <_vfprintf_r+0x172e>
80009c7e:	fa ca f9 78 	sub	r10,sp,-1672
80009c82:	02 9b       	mov	r11,r1
80009c84:	08 9c       	mov	r12,r4
80009c86:	fe b0 f4 61 	rcall	80008548 <__sprint_r>
80009c8a:	e0 81 03 ec 	brne	8000a462 <_vfprintf_r+0x1efe>
80009c8e:	fa c3 f9 e0 	sub	r3,sp,-1568
80009c92:	30 09       	mov	r9,0
80009c94:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80009c98:	f2 08 18 00 	cp.b	r8,r9
80009c9c:	c1 f0       	breq	80009cda <_vfprintf_r+0x1776>
80009c9e:	fa f8 06 90 	ld.w	r8,sp[1680]
80009ca2:	fa c9 f9 45 	sub	r9,sp,-1723
80009ca6:	2f f8       	sub	r8,-1
80009ca8:	87 09       	st.w	r3[0x0],r9
80009caa:	fb 48 06 90 	st.w	sp[1680],r8
80009cae:	30 19       	mov	r9,1
80009cb0:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009cb4:	87 19       	st.w	r3[0x4],r9
80009cb6:	2f f8       	sub	r8,-1
80009cb8:	fb 48 06 8c 	st.w	sp[1676],r8
80009cbc:	58 78       	cp.w	r8,7
80009cbe:	e0 89 00 04 	brgt	80009cc6 <_vfprintf_r+0x1762>
80009cc2:	2f 83       	sub	r3,-8
80009cc4:	c0 b8       	rjmp	80009cda <_vfprintf_r+0x1776>
80009cc6:	fa ca f9 78 	sub	r10,sp,-1672
80009cca:	02 9b       	mov	r11,r1
80009ccc:	08 9c       	mov	r12,r4
80009cce:	fe b0 f4 3d 	rcall	80008548 <__sprint_r>
80009cd2:	e0 81 03 c8 	brne	8000a462 <_vfprintf_r+0x1efe>
80009cd6:	fa c3 f9 e0 	sub	r3,sp,-1568
80009cda:	40 fc       	lddsp	r12,sp[0x3c]
80009cdc:	58 0c       	cp.w	r12,0
80009cde:	c1 f0       	breq	80009d1c <_vfprintf_r+0x17b8>
80009ce0:	fa f8 06 90 	ld.w	r8,sp[1680]
80009ce4:	fa c9 f9 48 	sub	r9,sp,-1720
80009ce8:	2f e8       	sub	r8,-2
80009cea:	87 09       	st.w	r3[0x0],r9
80009cec:	fb 48 06 90 	st.w	sp[1680],r8
80009cf0:	30 29       	mov	r9,2
80009cf2:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009cf6:	87 19       	st.w	r3[0x4],r9
80009cf8:	2f f8       	sub	r8,-1
80009cfa:	fb 48 06 8c 	st.w	sp[1676],r8
80009cfe:	58 78       	cp.w	r8,7
80009d00:	e0 89 00 04 	brgt	80009d08 <_vfprintf_r+0x17a4>
80009d04:	2f 83       	sub	r3,-8
80009d06:	c0 b8       	rjmp	80009d1c <_vfprintf_r+0x17b8>
80009d08:	fa ca f9 78 	sub	r10,sp,-1672
80009d0c:	02 9b       	mov	r11,r1
80009d0e:	08 9c       	mov	r12,r4
80009d10:	fe b0 f4 1c 	rcall	80008548 <__sprint_r>
80009d14:	e0 81 03 a7 	brne	8000a462 <_vfprintf_r+0x1efe>
80009d18:	fa c3 f9 e0 	sub	r3,sp,-1568
80009d1c:	40 9b       	lddsp	r11,sp[0x24]
80009d1e:	e0 4b 00 80 	cp.w	r11,128
80009d22:	c4 71       	brne	80009db0 <_vfprintf_r+0x184c>
80009d24:	40 8a       	lddsp	r10,sp[0x20]
80009d26:	40 39       	lddsp	r9,sp[0xc]
80009d28:	12 1a       	sub	r10,r9
80009d2a:	50 4a       	stdsp	sp[0x10],r10
80009d2c:	58 0a       	cp.w	r10,0
80009d2e:	e0 89 00 20 	brgt	80009d6e <_vfprintf_r+0x180a>
80009d32:	c3 f8       	rjmp	80009db0 <_vfprintf_r+0x184c>
80009d34:	2f 09       	sub	r9,-16
80009d36:	2f f8       	sub	r8,-1
80009d38:	fe ce c4 74 	sub	lr,pc,-15244
80009d3c:	31 0c       	mov	r12,16
80009d3e:	fb 49 06 90 	st.w	sp[1680],r9
80009d42:	87 0e       	st.w	r3[0x0],lr
80009d44:	87 1c       	st.w	r3[0x4],r12
80009d46:	fb 48 06 8c 	st.w	sp[1676],r8
80009d4a:	58 78       	cp.w	r8,7
80009d4c:	e0 89 00 04 	brgt	80009d54 <_vfprintf_r+0x17f0>
80009d50:	2f 83       	sub	r3,-8
80009d52:	c0 b8       	rjmp	80009d68 <_vfprintf_r+0x1804>
80009d54:	fa ca f9 78 	sub	r10,sp,-1672
80009d58:	02 9b       	mov	r11,r1
80009d5a:	08 9c       	mov	r12,r4
80009d5c:	fe b0 f3 f6 	rcall	80008548 <__sprint_r>
80009d60:	e0 81 03 81 	brne	8000a462 <_vfprintf_r+0x1efe>
80009d64:	fa c3 f9 e0 	sub	r3,sp,-1568
80009d68:	40 4b       	lddsp	r11,sp[0x10]
80009d6a:	21 0b       	sub	r11,16
80009d6c:	50 4b       	stdsp	sp[0x10],r11
80009d6e:	fa f9 06 90 	ld.w	r9,sp[1680]
80009d72:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009d76:	fe ca c4 b2 	sub	r10,pc,-15182
80009d7a:	40 4e       	lddsp	lr,sp[0x10]
80009d7c:	59 0e       	cp.w	lr,16
80009d7e:	fe 99 ff db 	brgt	80009d34 <_vfprintf_r+0x17d0>
80009d82:	1c 09       	add	r9,lr
80009d84:	2f f8       	sub	r8,-1
80009d86:	87 0a       	st.w	r3[0x0],r10
80009d88:	fb 49 06 90 	st.w	sp[1680],r9
80009d8c:	87 1e       	st.w	r3[0x4],lr
80009d8e:	fb 48 06 8c 	st.w	sp[1676],r8
80009d92:	58 78       	cp.w	r8,7
80009d94:	e0 89 00 04 	brgt	80009d9c <_vfprintf_r+0x1838>
80009d98:	2f 83       	sub	r3,-8
80009d9a:	c0 b8       	rjmp	80009db0 <_vfprintf_r+0x184c>
80009d9c:	fa ca f9 78 	sub	r10,sp,-1672
80009da0:	02 9b       	mov	r11,r1
80009da2:	08 9c       	mov	r12,r4
80009da4:	fe b0 f3 d2 	rcall	80008548 <__sprint_r>
80009da8:	e0 81 03 5d 	brne	8000a462 <_vfprintf_r+0x1efe>
80009dac:	fa c3 f9 e0 	sub	r3,sp,-1568
80009db0:	40 2c       	lddsp	r12,sp[0x8]
80009db2:	04 1c       	sub	r12,r2
80009db4:	50 2c       	stdsp	sp[0x8],r12
80009db6:	58 0c       	cp.w	r12,0
80009db8:	e0 89 00 20 	brgt	80009df8 <_vfprintf_r+0x1894>
80009dbc:	c3 f8       	rjmp	80009e3a <_vfprintf_r+0x18d6>
80009dbe:	2f 09       	sub	r9,-16
80009dc0:	2f f8       	sub	r8,-1
80009dc2:	fe cb c4 fe 	sub	r11,pc,-15106
80009dc6:	31 0a       	mov	r10,16
80009dc8:	fb 49 06 90 	st.w	sp[1680],r9
80009dcc:	87 0b       	st.w	r3[0x0],r11
80009dce:	87 1a       	st.w	r3[0x4],r10
80009dd0:	fb 48 06 8c 	st.w	sp[1676],r8
80009dd4:	58 78       	cp.w	r8,7
80009dd6:	e0 89 00 04 	brgt	80009dde <_vfprintf_r+0x187a>
80009dda:	2f 83       	sub	r3,-8
80009ddc:	c0 b8       	rjmp	80009df2 <_vfprintf_r+0x188e>
80009dde:	fa ca f9 78 	sub	r10,sp,-1672
80009de2:	02 9b       	mov	r11,r1
80009de4:	08 9c       	mov	r12,r4
80009de6:	fe b0 f3 b1 	rcall	80008548 <__sprint_r>
80009dea:	e0 81 03 3c 	brne	8000a462 <_vfprintf_r+0x1efe>
80009dee:	fa c3 f9 e0 	sub	r3,sp,-1568
80009df2:	40 29       	lddsp	r9,sp[0x8]
80009df4:	21 09       	sub	r9,16
80009df6:	50 29       	stdsp	sp[0x8],r9
80009df8:	fa f9 06 90 	ld.w	r9,sp[1680]
80009dfc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009e00:	fe ca c5 3c 	sub	r10,pc,-15044
80009e04:	40 2e       	lddsp	lr,sp[0x8]
80009e06:	59 0e       	cp.w	lr,16
80009e08:	fe 99 ff db 	brgt	80009dbe <_vfprintf_r+0x185a>
80009e0c:	1c 09       	add	r9,lr
80009e0e:	2f f8       	sub	r8,-1
80009e10:	87 0a       	st.w	r3[0x0],r10
80009e12:	fb 49 06 90 	st.w	sp[1680],r9
80009e16:	87 1e       	st.w	r3[0x4],lr
80009e18:	fb 48 06 8c 	st.w	sp[1676],r8
80009e1c:	58 78       	cp.w	r8,7
80009e1e:	e0 89 00 04 	brgt	80009e26 <_vfprintf_r+0x18c2>
80009e22:	2f 83       	sub	r3,-8
80009e24:	c0 b8       	rjmp	80009e3a <_vfprintf_r+0x18d6>
80009e26:	fa ca f9 78 	sub	r10,sp,-1672
80009e2a:	02 9b       	mov	r11,r1
80009e2c:	08 9c       	mov	r12,r4
80009e2e:	fe b0 f3 8d 	rcall	80008548 <__sprint_r>
80009e32:	e0 81 03 18 	brne	8000a462 <_vfprintf_r+0x1efe>
80009e36:	fa c3 f9 e0 	sub	r3,sp,-1568
80009e3a:	ed b5 00 08 	bld	r5,0x8
80009e3e:	c0 b0       	breq	80009e54 <_vfprintf_r+0x18f0>
80009e40:	fa f8 06 90 	ld.w	r8,sp[1680]
80009e44:	87 12       	st.w	r3[0x4],r2
80009e46:	87 06       	st.w	r3[0x0],r6
80009e48:	f0 02 00 02 	add	r2,r8,r2
80009e4c:	fb 42 06 90 	st.w	sp[1680],r2
80009e50:	e0 8f 01 d4 	bral	8000a1f8 <_vfprintf_r+0x1c94>
80009e54:	e0 40 00 65 	cp.w	r0,101
80009e58:	e0 8a 01 d6 	brle	8000a204 <_vfprintf_r+0x1ca0>
80009e5c:	30 08       	mov	r8,0
80009e5e:	30 09       	mov	r9,0
80009e60:	40 5b       	lddsp	r11,sp[0x14]
80009e62:	40 7a       	lddsp	r10,sp[0x1c]
80009e64:	e0 a0 15 89 	rcall	8000c976 <__avr32_f64_cmp_eq>
80009e68:	c7 90       	breq	80009f5a <_vfprintf_r+0x19f6>
80009e6a:	fa f8 06 90 	ld.w	r8,sp[1680]
80009e6e:	fe c9 c5 be 	sub	r9,pc,-14914
80009e72:	2f f8       	sub	r8,-1
80009e74:	87 09       	st.w	r3[0x0],r9
80009e76:	fb 48 06 90 	st.w	sp[1680],r8
80009e7a:	30 19       	mov	r9,1
80009e7c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009e80:	87 19       	st.w	r3[0x4],r9
80009e82:	2f f8       	sub	r8,-1
80009e84:	fb 48 06 8c 	st.w	sp[1676],r8
80009e88:	58 78       	cp.w	r8,7
80009e8a:	e0 89 00 05 	brgt	80009e94 <_vfprintf_r+0x1930>
80009e8e:	2f 83       	sub	r3,-8
80009e90:	c0 c8       	rjmp	80009ea8 <_vfprintf_r+0x1944>
80009e92:	d7 03       	nop
80009e94:	fa ca f9 78 	sub	r10,sp,-1672
80009e98:	02 9b       	mov	r11,r1
80009e9a:	08 9c       	mov	r12,r4
80009e9c:	fe b0 f3 56 	rcall	80008548 <__sprint_r>
80009ea0:	e0 81 02 e1 	brne	8000a462 <_vfprintf_r+0x1efe>
80009ea4:	fa c3 f9 e0 	sub	r3,sp,-1568
80009ea8:	fa f8 06 ac 	ld.w	r8,sp[1708]
80009eac:	40 6c       	lddsp	r12,sp[0x18]
80009eae:	18 38       	cp.w	r8,r12
80009eb0:	c0 55       	brlt	80009eba <_vfprintf_r+0x1956>
80009eb2:	ed b5 00 00 	bld	r5,0x0
80009eb6:	e0 81 02 6b 	brne	8000a38c <_vfprintf_r+0x1e28>
80009eba:	fa f8 06 90 	ld.w	r8,sp[1680]
80009ebe:	2f f8       	sub	r8,-1
80009ec0:	40 cb       	lddsp	r11,sp[0x30]
80009ec2:	fb 48 06 90 	st.w	sp[1680],r8
80009ec6:	30 19       	mov	r9,1
80009ec8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009ecc:	87 0b       	st.w	r3[0x0],r11
80009ece:	2f f8       	sub	r8,-1
80009ed0:	87 19       	st.w	r3[0x4],r9
80009ed2:	fb 48 06 8c 	st.w	sp[1676],r8
80009ed6:	58 78       	cp.w	r8,7
80009ed8:	e0 89 00 04 	brgt	80009ee0 <_vfprintf_r+0x197c>
80009edc:	2f 83       	sub	r3,-8
80009ede:	c0 b8       	rjmp	80009ef4 <_vfprintf_r+0x1990>
80009ee0:	fa ca f9 78 	sub	r10,sp,-1672
80009ee4:	02 9b       	mov	r11,r1
80009ee6:	08 9c       	mov	r12,r4
80009ee8:	fe b0 f3 30 	rcall	80008548 <__sprint_r>
80009eec:	e0 81 02 bb 	brne	8000a462 <_vfprintf_r+0x1efe>
80009ef0:	fa c3 f9 e0 	sub	r3,sp,-1568
80009ef4:	40 66       	lddsp	r6,sp[0x18]
80009ef6:	20 16       	sub	r6,1
80009ef8:	58 06       	cp.w	r6,0
80009efa:	e0 89 00 1d 	brgt	80009f34 <_vfprintf_r+0x19d0>
80009efe:	e0 8f 02 47 	bral	8000a38c <_vfprintf_r+0x1e28>
80009f02:	2f 09       	sub	r9,-16
80009f04:	2f f8       	sub	r8,-1
80009f06:	fb 49 06 90 	st.w	sp[1680],r9
80009f0a:	87 02       	st.w	r3[0x0],r2
80009f0c:	87 10       	st.w	r3[0x4],r0
80009f0e:	fb 48 06 8c 	st.w	sp[1676],r8
80009f12:	58 78       	cp.w	r8,7
80009f14:	e0 89 00 04 	brgt	80009f1c <_vfprintf_r+0x19b8>
80009f18:	2f 83       	sub	r3,-8
80009f1a:	c0 b8       	rjmp	80009f30 <_vfprintf_r+0x19cc>
80009f1c:	fa ca f9 78 	sub	r10,sp,-1672
80009f20:	02 9b       	mov	r11,r1
80009f22:	08 9c       	mov	r12,r4
80009f24:	fe b0 f3 12 	rcall	80008548 <__sprint_r>
80009f28:	e0 81 02 9d 	brne	8000a462 <_vfprintf_r+0x1efe>
80009f2c:	fa c3 f9 e0 	sub	r3,sp,-1568
80009f30:	21 06       	sub	r6,16
80009f32:	c0 48       	rjmp	80009f3a <_vfprintf_r+0x19d6>
80009f34:	fe c2 c6 70 	sub	r2,pc,-14736
80009f38:	31 00       	mov	r0,16
80009f3a:	fa f9 06 90 	ld.w	r9,sp[1680]
80009f3e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009f42:	fe ca c6 7e 	sub	r10,pc,-14722
80009f46:	59 06       	cp.w	r6,16
80009f48:	fe 99 ff dd 	brgt	80009f02 <_vfprintf_r+0x199e>
80009f4c:	0c 09       	add	r9,r6
80009f4e:	87 0a       	st.w	r3[0x0],r10
80009f50:	fb 49 06 90 	st.w	sp[1680],r9
80009f54:	2f f8       	sub	r8,-1
80009f56:	87 16       	st.w	r3[0x4],r6
80009f58:	c5 39       	rjmp	8000a1fe <_vfprintf_r+0x1c9a>
80009f5a:	fa fa 06 ac 	ld.w	r10,sp[1708]
80009f5e:	58 0a       	cp.w	r10,0
80009f60:	e0 89 00 92 	brgt	8000a084 <_vfprintf_r+0x1b20>
80009f64:	fa f8 06 90 	ld.w	r8,sp[1680]
80009f68:	fe c9 c6 b8 	sub	r9,pc,-14664
80009f6c:	2f f8       	sub	r8,-1
80009f6e:	87 09       	st.w	r3[0x0],r9
80009f70:	fb 48 06 90 	st.w	sp[1680],r8
80009f74:	30 19       	mov	r9,1
80009f76:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009f7a:	87 19       	st.w	r3[0x4],r9
80009f7c:	2f f8       	sub	r8,-1
80009f7e:	fb 48 06 8c 	st.w	sp[1676],r8
80009f82:	58 78       	cp.w	r8,7
80009f84:	e0 89 00 04 	brgt	80009f8c <_vfprintf_r+0x1a28>
80009f88:	2f 83       	sub	r3,-8
80009f8a:	c0 b8       	rjmp	80009fa0 <_vfprintf_r+0x1a3c>
80009f8c:	fa ca f9 78 	sub	r10,sp,-1672
80009f90:	02 9b       	mov	r11,r1
80009f92:	08 9c       	mov	r12,r4
80009f94:	fe b0 f2 da 	rcall	80008548 <__sprint_r>
80009f98:	e0 81 02 65 	brne	8000a462 <_vfprintf_r+0x1efe>
80009f9c:	fa c3 f9 e0 	sub	r3,sp,-1568
80009fa0:	fa f8 06 ac 	ld.w	r8,sp[1708]
80009fa4:	58 08       	cp.w	r8,0
80009fa6:	c0 81       	brne	80009fb6 <_vfprintf_r+0x1a52>
80009fa8:	40 6a       	lddsp	r10,sp[0x18]
80009faa:	58 0a       	cp.w	r10,0
80009fac:	c0 51       	brne	80009fb6 <_vfprintf_r+0x1a52>
80009fae:	ed b5 00 00 	bld	r5,0x0
80009fb2:	e0 81 01 ed 	brne	8000a38c <_vfprintf_r+0x1e28>
80009fb6:	40 c9       	lddsp	r9,sp[0x30]
80009fb8:	fa f8 06 90 	ld.w	r8,sp[1680]
80009fbc:	2f f8       	sub	r8,-1
80009fbe:	87 09       	st.w	r3[0x0],r9
80009fc0:	fb 48 06 90 	st.w	sp[1680],r8
80009fc4:	30 19       	mov	r9,1
80009fc6:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009fca:	87 19       	st.w	r3[0x4],r9
80009fcc:	2f f8       	sub	r8,-1
80009fce:	fb 48 06 8c 	st.w	sp[1676],r8
80009fd2:	58 78       	cp.w	r8,7
80009fd4:	e0 89 00 04 	brgt	80009fdc <_vfprintf_r+0x1a78>
80009fd8:	2f 83       	sub	r3,-8
80009fda:	c0 b8       	rjmp	80009ff0 <_vfprintf_r+0x1a8c>
80009fdc:	fa ca f9 78 	sub	r10,sp,-1672
80009fe0:	02 9b       	mov	r11,r1
80009fe2:	08 9c       	mov	r12,r4
80009fe4:	fe b0 f2 b2 	rcall	80008548 <__sprint_r>
80009fe8:	e0 81 02 3d 	brne	8000a462 <_vfprintf_r+0x1efe>
80009fec:	fa c3 f9 e0 	sub	r3,sp,-1568
80009ff0:	fa f2 06 ac 	ld.w	r2,sp[1708]
80009ff4:	5c 32       	neg	r2
80009ff6:	58 02       	cp.w	r2,0
80009ff8:	e0 89 00 1d 	brgt	8000a032 <_vfprintf_r+0x1ace>
80009ffc:	c3 d8       	rjmp	8000a076 <_vfprintf_r+0x1b12>
80009ffe:	2f 09       	sub	r9,-16
8000a000:	2f f8       	sub	r8,-1
8000a002:	31 0e       	mov	lr,16
8000a004:	fb 49 06 90 	st.w	sp[1680],r9
8000a008:	87 00       	st.w	r3[0x0],r0
8000a00a:	87 1e       	st.w	r3[0x4],lr
8000a00c:	fb 48 06 8c 	st.w	sp[1676],r8
8000a010:	58 78       	cp.w	r8,7
8000a012:	e0 89 00 04 	brgt	8000a01a <_vfprintf_r+0x1ab6>
8000a016:	2f 83       	sub	r3,-8
8000a018:	c0 b8       	rjmp	8000a02e <_vfprintf_r+0x1aca>
8000a01a:	fa ca f9 78 	sub	r10,sp,-1672
8000a01e:	02 9b       	mov	r11,r1
8000a020:	08 9c       	mov	r12,r4
8000a022:	fe b0 f2 93 	rcall	80008548 <__sprint_r>
8000a026:	e0 81 02 1e 	brne	8000a462 <_vfprintf_r+0x1efe>
8000a02a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a02e:	21 02       	sub	r2,16
8000a030:	c0 38       	rjmp	8000a036 <_vfprintf_r+0x1ad2>
8000a032:	fe c0 c7 6e 	sub	r0,pc,-14482
8000a036:	fa f9 06 90 	ld.w	r9,sp[1680]
8000a03a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a03e:	fe ca c7 7a 	sub	r10,pc,-14470
8000a042:	59 02       	cp.w	r2,16
8000a044:	fe 99 ff dd 	brgt	80009ffe <_vfprintf_r+0x1a9a>
8000a048:	04 09       	add	r9,r2
8000a04a:	2f f8       	sub	r8,-1
8000a04c:	87 0a       	st.w	r3[0x0],r10
8000a04e:	fb 49 06 90 	st.w	sp[1680],r9
8000a052:	87 12       	st.w	r3[0x4],r2
8000a054:	fb 48 06 8c 	st.w	sp[1676],r8
8000a058:	58 78       	cp.w	r8,7
8000a05a:	e0 89 00 04 	brgt	8000a062 <_vfprintf_r+0x1afe>
8000a05e:	2f 83       	sub	r3,-8
8000a060:	c0 b8       	rjmp	8000a076 <_vfprintf_r+0x1b12>
8000a062:	fa ca f9 78 	sub	r10,sp,-1672
8000a066:	02 9b       	mov	r11,r1
8000a068:	08 9c       	mov	r12,r4
8000a06a:	fe b0 f2 6f 	rcall	80008548 <__sprint_r>
8000a06e:	e0 81 01 fa 	brne	8000a462 <_vfprintf_r+0x1efe>
8000a072:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a076:	40 6c       	lddsp	r12,sp[0x18]
8000a078:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a07c:	87 06       	st.w	r3[0x0],r6
8000a07e:	87 1c       	st.w	r3[0x4],r12
8000a080:	18 08       	add	r8,r12
8000a082:	cb 98       	rjmp	8000a1f4 <_vfprintf_r+0x1c90>
8000a084:	fa f9 06 90 	ld.w	r9,sp[1680]
8000a088:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a08c:	40 6b       	lddsp	r11,sp[0x18]
8000a08e:	16 3a       	cp.w	r10,r11
8000a090:	c6 f5       	brlt	8000a16e <_vfprintf_r+0x1c0a>
8000a092:	16 09       	add	r9,r11
8000a094:	2f f8       	sub	r8,-1
8000a096:	87 06       	st.w	r3[0x0],r6
8000a098:	fb 49 06 90 	st.w	sp[1680],r9
8000a09c:	87 1b       	st.w	r3[0x4],r11
8000a09e:	fb 48 06 8c 	st.w	sp[1676],r8
8000a0a2:	58 78       	cp.w	r8,7
8000a0a4:	e0 89 00 04 	brgt	8000a0ac <_vfprintf_r+0x1b48>
8000a0a8:	2f 83       	sub	r3,-8
8000a0aa:	c0 b8       	rjmp	8000a0c0 <_vfprintf_r+0x1b5c>
8000a0ac:	fa ca f9 78 	sub	r10,sp,-1672
8000a0b0:	02 9b       	mov	r11,r1
8000a0b2:	08 9c       	mov	r12,r4
8000a0b4:	fe b0 f2 4a 	rcall	80008548 <__sprint_r>
8000a0b8:	e0 81 01 d5 	brne	8000a462 <_vfprintf_r+0x1efe>
8000a0bc:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a0c0:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000a0c4:	40 6a       	lddsp	r10,sp[0x18]
8000a0c6:	14 16       	sub	r6,r10
8000a0c8:	58 06       	cp.w	r6,0
8000a0ca:	e0 89 00 1c 	brgt	8000a102 <_vfprintf_r+0x1b9e>
8000a0ce:	c3 d8       	rjmp	8000a148 <_vfprintf_r+0x1be4>
8000a0d0:	2f 09       	sub	r9,-16
8000a0d2:	2f f8       	sub	r8,-1
8000a0d4:	fb 49 06 90 	st.w	sp[1680],r9
8000a0d8:	87 02       	st.w	r3[0x0],r2
8000a0da:	87 10       	st.w	r3[0x4],r0
8000a0dc:	fb 48 06 8c 	st.w	sp[1676],r8
8000a0e0:	58 78       	cp.w	r8,7
8000a0e2:	e0 89 00 04 	brgt	8000a0ea <_vfprintf_r+0x1b86>
8000a0e6:	2f 83       	sub	r3,-8
8000a0e8:	c0 b8       	rjmp	8000a0fe <_vfprintf_r+0x1b9a>
8000a0ea:	fa ca f9 78 	sub	r10,sp,-1672
8000a0ee:	02 9b       	mov	r11,r1
8000a0f0:	08 9c       	mov	r12,r4
8000a0f2:	fe b0 f2 2b 	rcall	80008548 <__sprint_r>
8000a0f6:	e0 81 01 b6 	brne	8000a462 <_vfprintf_r+0x1efe>
8000a0fa:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a0fe:	21 06       	sub	r6,16
8000a100:	c0 48       	rjmp	8000a108 <_vfprintf_r+0x1ba4>
8000a102:	fe c2 c8 3e 	sub	r2,pc,-14274
8000a106:	31 00       	mov	r0,16
8000a108:	fa f9 06 90 	ld.w	r9,sp[1680]
8000a10c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a110:	fe ca c8 4c 	sub	r10,pc,-14260
8000a114:	59 06       	cp.w	r6,16
8000a116:	fe 99 ff dd 	brgt	8000a0d0 <_vfprintf_r+0x1b6c>
8000a11a:	0c 09       	add	r9,r6
8000a11c:	2f f8       	sub	r8,-1
8000a11e:	87 0a       	st.w	r3[0x0],r10
8000a120:	fb 49 06 90 	st.w	sp[1680],r9
8000a124:	87 16       	st.w	r3[0x4],r6
8000a126:	fb 48 06 8c 	st.w	sp[1676],r8
8000a12a:	58 78       	cp.w	r8,7
8000a12c:	e0 89 00 04 	brgt	8000a134 <_vfprintf_r+0x1bd0>
8000a130:	2f 83       	sub	r3,-8
8000a132:	c0 b8       	rjmp	8000a148 <_vfprintf_r+0x1be4>
8000a134:	fa ca f9 78 	sub	r10,sp,-1672
8000a138:	02 9b       	mov	r11,r1
8000a13a:	08 9c       	mov	r12,r4
8000a13c:	fe b0 f2 06 	rcall	80008548 <__sprint_r>
8000a140:	e0 81 01 91 	brne	8000a462 <_vfprintf_r+0x1efe>
8000a144:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a148:	ed b5 00 00 	bld	r5,0x0
8000a14c:	e0 81 01 20 	brne	8000a38c <_vfprintf_r+0x1e28>
8000a150:	40 c9       	lddsp	r9,sp[0x30]
8000a152:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a156:	2f f8       	sub	r8,-1
8000a158:	87 09       	st.w	r3[0x0],r9
8000a15a:	fb 48 06 90 	st.w	sp[1680],r8
8000a15e:	30 19       	mov	r9,1
8000a160:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a164:	87 19       	st.w	r3[0x4],r9
8000a166:	2f f8       	sub	r8,-1
8000a168:	fb 48 06 8c 	st.w	sp[1676],r8
8000a16c:	c0 29       	rjmp	8000a370 <_vfprintf_r+0x1e0c>
8000a16e:	14 09       	add	r9,r10
8000a170:	2f f8       	sub	r8,-1
8000a172:	fb 49 06 90 	st.w	sp[1680],r9
8000a176:	87 06       	st.w	r3[0x0],r6
8000a178:	87 1a       	st.w	r3[0x4],r10
8000a17a:	fb 48 06 8c 	st.w	sp[1676],r8
8000a17e:	58 78       	cp.w	r8,7
8000a180:	e0 89 00 04 	brgt	8000a188 <_vfprintf_r+0x1c24>
8000a184:	2f 83       	sub	r3,-8
8000a186:	c0 b8       	rjmp	8000a19c <_vfprintf_r+0x1c38>
8000a188:	fa ca f9 78 	sub	r10,sp,-1672
8000a18c:	02 9b       	mov	r11,r1
8000a18e:	08 9c       	mov	r12,r4
8000a190:	fe b0 f1 dc 	rcall	80008548 <__sprint_r>
8000a194:	e0 81 01 67 	brne	8000a462 <_vfprintf_r+0x1efe>
8000a198:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a19c:	40 c8       	lddsp	r8,sp[0x30]
8000a19e:	87 08       	st.w	r3[0x0],r8
8000a1a0:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a1a4:	2f f8       	sub	r8,-1
8000a1a6:	30 19       	mov	r9,1
8000a1a8:	fb 48 06 90 	st.w	sp[1680],r8
8000a1ac:	87 19       	st.w	r3[0x4],r9
8000a1ae:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a1b2:	2f f8       	sub	r8,-1
8000a1b4:	fb 48 06 8c 	st.w	sp[1676],r8
8000a1b8:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000a1bc:	58 78       	cp.w	r8,7
8000a1be:	e0 89 00 04 	brgt	8000a1c6 <_vfprintf_r+0x1c62>
8000a1c2:	2f 83       	sub	r3,-8
8000a1c4:	c0 b8       	rjmp	8000a1da <_vfprintf_r+0x1c76>
8000a1c6:	fa ca f9 78 	sub	r10,sp,-1672
8000a1ca:	02 9b       	mov	r11,r1
8000a1cc:	08 9c       	mov	r12,r4
8000a1ce:	fe b0 f1 bd 	rcall	80008548 <__sprint_r>
8000a1d2:	e0 81 01 48 	brne	8000a462 <_vfprintf_r+0x1efe>
8000a1d6:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a1da:	04 06       	add	r6,r2
8000a1dc:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000a1e0:	87 06       	st.w	r3[0x0],r6
8000a1e2:	fa f9 06 90 	ld.w	r9,sp[1680]
8000a1e6:	40 66       	lddsp	r6,sp[0x18]
8000a1e8:	40 6e       	lddsp	lr,sp[0x18]
8000a1ea:	10 16       	sub	r6,r8
8000a1ec:	f2 08 01 08 	sub	r8,r9,r8
8000a1f0:	87 16       	st.w	r3[0x4],r6
8000a1f2:	1c 08       	add	r8,lr
8000a1f4:	fb 48 06 90 	st.w	sp[1680],r8
8000a1f8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a1fc:	2f f8       	sub	r8,-1
8000a1fe:	fb 48 06 8c 	st.w	sp[1676],r8
8000a202:	cb 78       	rjmp	8000a370 <_vfprintf_r+0x1e0c>
8000a204:	40 6c       	lddsp	r12,sp[0x18]
8000a206:	58 1c       	cp.w	r12,1
8000a208:	e0 89 00 06 	brgt	8000a214 <_vfprintf_r+0x1cb0>
8000a20c:	ed b5 00 00 	bld	r5,0x0
8000a210:	e0 81 00 85 	brne	8000a31a <_vfprintf_r+0x1db6>
8000a214:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a218:	2f f8       	sub	r8,-1
8000a21a:	30 19       	mov	r9,1
8000a21c:	fb 48 06 90 	st.w	sp[1680],r8
8000a220:	87 06       	st.w	r3[0x0],r6
8000a222:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a226:	87 19       	st.w	r3[0x4],r9
8000a228:	2f f8       	sub	r8,-1
8000a22a:	fb 48 06 8c 	st.w	sp[1676],r8
8000a22e:	58 78       	cp.w	r8,7
8000a230:	e0 89 00 04 	brgt	8000a238 <_vfprintf_r+0x1cd4>
8000a234:	2f 83       	sub	r3,-8
8000a236:	c0 b8       	rjmp	8000a24c <_vfprintf_r+0x1ce8>
8000a238:	fa ca f9 78 	sub	r10,sp,-1672
8000a23c:	02 9b       	mov	r11,r1
8000a23e:	08 9c       	mov	r12,r4
8000a240:	fe b0 f1 84 	rcall	80008548 <__sprint_r>
8000a244:	e0 81 01 0f 	brne	8000a462 <_vfprintf_r+0x1efe>
8000a248:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a24c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a250:	2f f8       	sub	r8,-1
8000a252:	40 cb       	lddsp	r11,sp[0x30]
8000a254:	fb 48 06 90 	st.w	sp[1680],r8
8000a258:	30 19       	mov	r9,1
8000a25a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a25e:	87 0b       	st.w	r3[0x0],r11
8000a260:	2f f8       	sub	r8,-1
8000a262:	87 19       	st.w	r3[0x4],r9
8000a264:	fb 48 06 8c 	st.w	sp[1676],r8
8000a268:	58 78       	cp.w	r8,7
8000a26a:	e0 89 00 05 	brgt	8000a274 <_vfprintf_r+0x1d10>
8000a26e:	2f 83       	sub	r3,-8
8000a270:	c0 c8       	rjmp	8000a288 <_vfprintf_r+0x1d24>
8000a272:	d7 03       	nop
8000a274:	fa ca f9 78 	sub	r10,sp,-1672
8000a278:	02 9b       	mov	r11,r1
8000a27a:	08 9c       	mov	r12,r4
8000a27c:	fe b0 f1 66 	rcall	80008548 <__sprint_r>
8000a280:	e0 81 00 f1 	brne	8000a462 <_vfprintf_r+0x1efe>
8000a284:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a288:	30 08       	mov	r8,0
8000a28a:	30 09       	mov	r9,0
8000a28c:	40 5b       	lddsp	r11,sp[0x14]
8000a28e:	40 7a       	lddsp	r10,sp[0x1c]
8000a290:	e0 a0 13 73 	rcall	8000c976 <__avr32_f64_cmp_eq>
8000a294:	40 68       	lddsp	r8,sp[0x18]
8000a296:	20 18       	sub	r8,1
8000a298:	58 0c       	cp.w	r12,0
8000a29a:	c0 d1       	brne	8000a2b4 <_vfprintf_r+0x1d50>
8000a29c:	2f f6       	sub	r6,-1
8000a29e:	87 18       	st.w	r3[0x4],r8
8000a2a0:	87 06       	st.w	r3[0x0],r6
8000a2a2:	fa f6 06 90 	ld.w	r6,sp[1680]
8000a2a6:	10 06       	add	r6,r8
8000a2a8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a2ac:	fb 46 06 90 	st.w	sp[1680],r6
8000a2b0:	2f f8       	sub	r8,-1
8000a2b2:	c3 18       	rjmp	8000a314 <_vfprintf_r+0x1db0>
8000a2b4:	10 96       	mov	r6,r8
8000a2b6:	58 08       	cp.w	r8,0
8000a2b8:	e0 89 00 1c 	brgt	8000a2f0 <_vfprintf_r+0x1d8c>
8000a2bc:	c4 b8       	rjmp	8000a352 <_vfprintf_r+0x1dee>
8000a2be:	2f 09       	sub	r9,-16
8000a2c0:	2f f8       	sub	r8,-1
8000a2c2:	fb 49 06 90 	st.w	sp[1680],r9
8000a2c6:	87 02       	st.w	r3[0x0],r2
8000a2c8:	87 10       	st.w	r3[0x4],r0
8000a2ca:	fb 48 06 8c 	st.w	sp[1676],r8
8000a2ce:	58 78       	cp.w	r8,7
8000a2d0:	e0 89 00 04 	brgt	8000a2d8 <_vfprintf_r+0x1d74>
8000a2d4:	2f 83       	sub	r3,-8
8000a2d6:	c0 b8       	rjmp	8000a2ec <_vfprintf_r+0x1d88>
8000a2d8:	fa ca f9 78 	sub	r10,sp,-1672
8000a2dc:	02 9b       	mov	r11,r1
8000a2de:	08 9c       	mov	r12,r4
8000a2e0:	fe b0 f1 34 	rcall	80008548 <__sprint_r>
8000a2e4:	e0 81 00 bf 	brne	8000a462 <_vfprintf_r+0x1efe>
8000a2e8:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a2ec:	21 06       	sub	r6,16
8000a2ee:	c0 48       	rjmp	8000a2f6 <_vfprintf_r+0x1d92>
8000a2f0:	fe c2 ca 2c 	sub	r2,pc,-13780
8000a2f4:	31 00       	mov	r0,16
8000a2f6:	fa f9 06 90 	ld.w	r9,sp[1680]
8000a2fa:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a2fe:	fe ca ca 3a 	sub	r10,pc,-13766
8000a302:	59 06       	cp.w	r6,16
8000a304:	fe 99 ff dd 	brgt	8000a2be <_vfprintf_r+0x1d5a>
8000a308:	0c 09       	add	r9,r6
8000a30a:	87 0a       	st.w	r3[0x0],r10
8000a30c:	fb 49 06 90 	st.w	sp[1680],r9
8000a310:	2f f8       	sub	r8,-1
8000a312:	87 16       	st.w	r3[0x4],r6
8000a314:	fb 48 06 8c 	st.w	sp[1676],r8
8000a318:	c0 e8       	rjmp	8000a334 <_vfprintf_r+0x1dd0>
8000a31a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a31e:	2f f8       	sub	r8,-1
8000a320:	30 19       	mov	r9,1
8000a322:	fb 48 06 90 	st.w	sp[1680],r8
8000a326:	87 06       	st.w	r3[0x0],r6
8000a328:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a32c:	87 19       	st.w	r3[0x4],r9
8000a32e:	2f f8       	sub	r8,-1
8000a330:	fb 48 06 8c 	st.w	sp[1676],r8
8000a334:	58 78       	cp.w	r8,7
8000a336:	e0 89 00 04 	brgt	8000a33e <_vfprintf_r+0x1dda>
8000a33a:	2f 83       	sub	r3,-8
8000a33c:	c0 b8       	rjmp	8000a352 <_vfprintf_r+0x1dee>
8000a33e:	fa ca f9 78 	sub	r10,sp,-1672
8000a342:	02 9b       	mov	r11,r1
8000a344:	08 9c       	mov	r12,r4
8000a346:	fe b0 f1 01 	rcall	80008548 <__sprint_r>
8000a34a:	e0 81 00 8c 	brne	8000a462 <_vfprintf_r+0x1efe>
8000a34e:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a352:	40 ea       	lddsp	r10,sp[0x38]
8000a354:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a358:	14 08       	add	r8,r10
8000a35a:	fa c9 f9 64 	sub	r9,sp,-1692
8000a35e:	fb 48 06 90 	st.w	sp[1680],r8
8000a362:	87 1a       	st.w	r3[0x4],r10
8000a364:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a368:	87 09       	st.w	r3[0x0],r9
8000a36a:	2f f8       	sub	r8,-1
8000a36c:	fb 48 06 8c 	st.w	sp[1676],r8
8000a370:	58 78       	cp.w	r8,7
8000a372:	e0 89 00 04 	brgt	8000a37a <_vfprintf_r+0x1e16>
8000a376:	2f 83       	sub	r3,-8
8000a378:	c0 a8       	rjmp	8000a38c <_vfprintf_r+0x1e28>
8000a37a:	fa ca f9 78 	sub	r10,sp,-1672
8000a37e:	02 9b       	mov	r11,r1
8000a380:	08 9c       	mov	r12,r4
8000a382:	fe b0 f0 e3 	rcall	80008548 <__sprint_r>
8000a386:	c6 e1       	brne	8000a462 <_vfprintf_r+0x1efe>
8000a388:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a38c:	e2 15 00 04 	andl	r5,0x4,COH
8000a390:	c3 f0       	breq	8000a40e <_vfprintf_r+0x1eaa>
8000a392:	40 86       	lddsp	r6,sp[0x20]
8000a394:	40 39       	lddsp	r9,sp[0xc]
8000a396:	12 16       	sub	r6,r9
8000a398:	58 06       	cp.w	r6,0
8000a39a:	e0 89 00 1a 	brgt	8000a3ce <_vfprintf_r+0x1e6a>
8000a39e:	c3 88       	rjmp	8000a40e <_vfprintf_r+0x1eaa>
8000a3a0:	2f 09       	sub	r9,-16
8000a3a2:	2f f8       	sub	r8,-1
8000a3a4:	fb 49 06 90 	st.w	sp[1680],r9
8000a3a8:	87 05       	st.w	r3[0x0],r5
8000a3aa:	87 12       	st.w	r3[0x4],r2
8000a3ac:	fb 48 06 8c 	st.w	sp[1676],r8
8000a3b0:	58 78       	cp.w	r8,7
8000a3b2:	e0 89 00 04 	brgt	8000a3ba <_vfprintf_r+0x1e56>
8000a3b6:	2f 83       	sub	r3,-8
8000a3b8:	c0 98       	rjmp	8000a3ca <_vfprintf_r+0x1e66>
8000a3ba:	00 9a       	mov	r10,r0
8000a3bc:	02 9b       	mov	r11,r1
8000a3be:	08 9c       	mov	r12,r4
8000a3c0:	fe b0 f0 c4 	rcall	80008548 <__sprint_r>
8000a3c4:	c4 f1       	brne	8000a462 <_vfprintf_r+0x1efe>
8000a3c6:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a3ca:	21 06       	sub	r6,16
8000a3cc:	c0 68       	rjmp	8000a3d8 <_vfprintf_r+0x1e74>
8000a3ce:	fe c5 cb 1a 	sub	r5,pc,-13542
8000a3d2:	31 02       	mov	r2,16
8000a3d4:	fa c0 f9 78 	sub	r0,sp,-1672
8000a3d8:	fa f9 06 90 	ld.w	r9,sp[1680]
8000a3dc:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a3e0:	fe ca cb 2c 	sub	r10,pc,-13524
8000a3e4:	59 06       	cp.w	r6,16
8000a3e6:	fe 99 ff dd 	brgt	8000a3a0 <_vfprintf_r+0x1e3c>
8000a3ea:	0c 09       	add	r9,r6
8000a3ec:	2f f8       	sub	r8,-1
8000a3ee:	87 0a       	st.w	r3[0x0],r10
8000a3f0:	87 16       	st.w	r3[0x4],r6
8000a3f2:	fb 49 06 90 	st.w	sp[1680],r9
8000a3f6:	fb 48 06 8c 	st.w	sp[1676],r8
8000a3fa:	58 78       	cp.w	r8,7
8000a3fc:	e0 8a 00 09 	brle	8000a40e <_vfprintf_r+0x1eaa>
8000a400:	fa ca f9 78 	sub	r10,sp,-1672
8000a404:	02 9b       	mov	r11,r1
8000a406:	08 9c       	mov	r12,r4
8000a408:	fe b0 f0 a0 	rcall	80008548 <__sprint_r>
8000a40c:	c2 b1       	brne	8000a462 <_vfprintf_r+0x1efe>
8000a40e:	40 bc       	lddsp	r12,sp[0x2c]
8000a410:	40 36       	lddsp	r6,sp[0xc]
8000a412:	40 8e       	lddsp	lr,sp[0x20]
8000a414:	ec 0e 0c 48 	max	r8,r6,lr
8000a418:	10 0c       	add	r12,r8
8000a41a:	50 bc       	stdsp	sp[0x2c],r12
8000a41c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a420:	58 08       	cp.w	r8,0
8000a422:	c0 80       	breq	8000a432 <_vfprintf_r+0x1ece>
8000a424:	fa ca f9 78 	sub	r10,sp,-1672
8000a428:	02 9b       	mov	r11,r1
8000a42a:	08 9c       	mov	r12,r4
8000a42c:	fe b0 f0 8e 	rcall	80008548 <__sprint_r>
8000a430:	c1 91       	brne	8000a462 <_vfprintf_r+0x1efe>
8000a432:	30 0b       	mov	r11,0
8000a434:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a438:	fb 4b 06 8c 	st.w	sp[1676],r11
8000a43c:	fe 9f f1 22 	bral	80008680 <_vfprintf_r+0x11c>
8000a440:	08 95       	mov	r5,r4
8000a442:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a446:	58 08       	cp.w	r8,0
8000a448:	c0 80       	breq	8000a458 <_vfprintf_r+0x1ef4>
8000a44a:	08 9c       	mov	r12,r4
8000a44c:	fa ca f9 78 	sub	r10,sp,-1672
8000a450:	02 9b       	mov	r11,r1
8000a452:	fe b0 f0 7b 	rcall	80008548 <__sprint_r>
8000a456:	c0 61       	brne	8000a462 <_vfprintf_r+0x1efe>
8000a458:	30 08       	mov	r8,0
8000a45a:	fb 48 06 8c 	st.w	sp[1676],r8
8000a45e:	c0 28       	rjmp	8000a462 <_vfprintf_r+0x1efe>
8000a460:	40 41       	lddsp	r1,sp[0x10]
8000a462:	82 68       	ld.sh	r8,r1[0xc]
8000a464:	ed b8 00 06 	bld	r8,0x6
8000a468:	c0 31       	brne	8000a46e <_vfprintf_r+0x1f0a>
8000a46a:	3f fa       	mov	r10,-1
8000a46c:	50 ba       	stdsp	sp[0x2c],r10
8000a46e:	40 bc       	lddsp	r12,sp[0x2c]
8000a470:	fe 3d f9 44 	sub	sp,-1724
8000a474:	d8 32       	popm	r0-r7,pc
8000a476:	d7 03       	nop

8000a478 <__swsetup_r>:
8000a478:	d4 21       	pushm	r4-r7,lr
8000a47a:	e0 68 08 cc 	mov	r8,2252
8000a47e:	18 96       	mov	r6,r12
8000a480:	16 97       	mov	r7,r11
8000a482:	70 0c       	ld.w	r12,r8[0x0]
8000a484:	58 0c       	cp.w	r12,0
8000a486:	c0 60       	breq	8000a492 <__swsetup_r+0x1a>
8000a488:	78 68       	ld.w	r8,r12[0x18]
8000a48a:	58 08       	cp.w	r8,0
8000a48c:	c0 31       	brne	8000a492 <__swsetup_r+0x1a>
8000a48e:	e0 a0 07 b9 	rcall	8000b400 <__sinit>
8000a492:	fe c8 ca ae 	sub	r8,pc,-13650
8000a496:	10 37       	cp.w	r7,r8
8000a498:	c0 61       	brne	8000a4a4 <__swsetup_r+0x2c>
8000a49a:	e0 68 08 cc 	mov	r8,2252
8000a49e:	70 08       	ld.w	r8,r8[0x0]
8000a4a0:	70 07       	ld.w	r7,r8[0x0]
8000a4a2:	c1 28       	rjmp	8000a4c6 <__swsetup_r+0x4e>
8000a4a4:	fe c8 ca a0 	sub	r8,pc,-13664
8000a4a8:	10 37       	cp.w	r7,r8
8000a4aa:	c0 61       	brne	8000a4b6 <__swsetup_r+0x3e>
8000a4ac:	e0 68 08 cc 	mov	r8,2252
8000a4b0:	70 08       	ld.w	r8,r8[0x0]
8000a4b2:	70 17       	ld.w	r7,r8[0x4]
8000a4b4:	c0 98       	rjmp	8000a4c6 <__swsetup_r+0x4e>
8000a4b6:	fe c8 ca 92 	sub	r8,pc,-13678
8000a4ba:	10 37       	cp.w	r7,r8
8000a4bc:	c0 51       	brne	8000a4c6 <__swsetup_r+0x4e>
8000a4be:	e0 68 08 cc 	mov	r8,2252
8000a4c2:	70 08       	ld.w	r8,r8[0x0]
8000a4c4:	70 27       	ld.w	r7,r8[0x8]
8000a4c6:	8e 68       	ld.sh	r8,r7[0xc]
8000a4c8:	ed b8 00 03 	bld	r8,0x3
8000a4cc:	c1 e0       	breq	8000a508 <__swsetup_r+0x90>
8000a4ce:	ed b8 00 04 	bld	r8,0x4
8000a4d2:	c3 e1       	brne	8000a54e <__swsetup_r+0xd6>
8000a4d4:	ed b8 00 02 	bld	r8,0x2
8000a4d8:	c1 51       	brne	8000a502 <__swsetup_r+0x8a>
8000a4da:	6e db       	ld.w	r11,r7[0x34]
8000a4dc:	58 0b       	cp.w	r11,0
8000a4de:	c0 a0       	breq	8000a4f2 <__swsetup_r+0x7a>
8000a4e0:	ee c8 ff bc 	sub	r8,r7,-68
8000a4e4:	10 3b       	cp.w	r11,r8
8000a4e6:	c0 40       	breq	8000a4ee <__swsetup_r+0x76>
8000a4e8:	0c 9c       	mov	r12,r6
8000a4ea:	fe b0 ed e3 	rcall	800080b0 <_free_r>
8000a4ee:	30 08       	mov	r8,0
8000a4f0:	8f d8       	st.w	r7[0x34],r8
8000a4f2:	8e 68       	ld.sh	r8,r7[0xc]
8000a4f4:	e0 18 ff db 	andl	r8,0xffdb
8000a4f8:	ae 68       	st.h	r7[0xc],r8
8000a4fa:	30 08       	mov	r8,0
8000a4fc:	8f 18       	st.w	r7[0x4],r8
8000a4fe:	6e 48       	ld.w	r8,r7[0x10]
8000a500:	8f 08       	st.w	r7[0x0],r8
8000a502:	8e 68       	ld.sh	r8,r7[0xc]
8000a504:	a3 b8       	sbr	r8,0x3
8000a506:	ae 68       	st.h	r7[0xc],r8
8000a508:	6e 48       	ld.w	r8,r7[0x10]
8000a50a:	58 08       	cp.w	r8,0
8000a50c:	c0 b1       	brne	8000a522 <__swsetup_r+0xaa>
8000a50e:	8e 68       	ld.sh	r8,r7[0xc]
8000a510:	e2 18 02 80 	andl	r8,0x280,COH
8000a514:	e0 48 02 00 	cp.w	r8,512
8000a518:	c0 50       	breq	8000a522 <__swsetup_r+0xaa>
8000a51a:	0c 9c       	mov	r12,r6
8000a51c:	0e 9b       	mov	r11,r7
8000a51e:	e0 a0 09 31 	rcall	8000b780 <__smakebuf_r>
8000a522:	8e 69       	ld.sh	r9,r7[0xc]
8000a524:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000a528:	c0 70       	breq	8000a536 <__swsetup_r+0xbe>
8000a52a:	30 08       	mov	r8,0
8000a52c:	8f 28       	st.w	r7[0x8],r8
8000a52e:	6e 58       	ld.w	r8,r7[0x14]
8000a530:	5c 38       	neg	r8
8000a532:	8f 68       	st.w	r7[0x18],r8
8000a534:	c0 68       	rjmp	8000a540 <__swsetup_r+0xc8>
8000a536:	ed b9 00 01 	bld	r9,0x1
8000a53a:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000a53e:	8f 28       	st.w	r7[0x8],r8
8000a540:	6e 48       	ld.w	r8,r7[0x10]
8000a542:	58 08       	cp.w	r8,0
8000a544:	c0 61       	brne	8000a550 <__swsetup_r+0xd8>
8000a546:	8e 68       	ld.sh	r8,r7[0xc]
8000a548:	ed b8 00 07 	bld	r8,0x7
8000a54c:	c0 21       	brne	8000a550 <__swsetup_r+0xd8>
8000a54e:	dc 2a       	popm	r4-r7,pc,r12=-1
8000a550:	d8 2a       	popm	r4-r7,pc,r12=0
8000a552:	d7 03       	nop

8000a554 <quorem>:
8000a554:	d4 31       	pushm	r0-r7,lr
8000a556:	20 2d       	sub	sp,8
8000a558:	18 97       	mov	r7,r12
8000a55a:	78 48       	ld.w	r8,r12[0x10]
8000a55c:	76 46       	ld.w	r6,r11[0x10]
8000a55e:	0c 38       	cp.w	r8,r6
8000a560:	c0 34       	brge	8000a566 <quorem+0x12>
8000a562:	30 0c       	mov	r12,0
8000a564:	c8 58       	rjmp	8000a66e <quorem+0x11a>
8000a566:	ec c2 ff fc 	sub	r2,r6,-4
8000a56a:	f6 c3 ff ec 	sub	r3,r11,-20
8000a56e:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000a572:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000a576:	2f f9       	sub	r9,-1
8000a578:	20 16       	sub	r6,1
8000a57a:	f8 09 0d 08 	divu	r8,r12,r9
8000a57e:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000a582:	ee c4 ff ec 	sub	r4,r7,-20
8000a586:	10 95       	mov	r5,r8
8000a588:	58 08       	cp.w	r8,0
8000a58a:	c4 10       	breq	8000a60c <quorem+0xb8>
8000a58c:	30 09       	mov	r9,0
8000a58e:	06 9a       	mov	r10,r3
8000a590:	08 98       	mov	r8,r4
8000a592:	12 91       	mov	r1,r9
8000a594:	50 0b       	stdsp	sp[0x0],r11
8000a596:	70 0e       	ld.w	lr,r8[0x0]
8000a598:	b1 8e       	lsr	lr,0x10
8000a59a:	50 1e       	stdsp	sp[0x4],lr
8000a59c:	15 0e       	ld.w	lr,r10++
8000a59e:	fc 00 16 10 	lsr	r0,lr,0x10
8000a5a2:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000a5a6:	ea 0e 03 41 	mac	r1,r5,lr
8000a5aa:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000a5ae:	b1 81       	lsr	r1,0x10
8000a5b0:	40 1b       	lddsp	r11,sp[0x4]
8000a5b2:	ea 00 02 40 	mul	r0,r5,r0
8000a5b6:	e2 00 00 00 	add	r0,r1,r0
8000a5ba:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000a5be:	02 1b       	sub	r11,r1
8000a5c0:	50 1b       	stdsp	sp[0x4],r11
8000a5c2:	70 0b       	ld.w	r11,r8[0x0]
8000a5c4:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
8000a5c8:	02 09       	add	r9,r1
8000a5ca:	f2 0e 01 0e 	sub	lr,r9,lr
8000a5ce:	b0 1e       	st.h	r8[0x2],lr
8000a5d0:	fc 09 14 10 	asr	r9,lr,0x10
8000a5d4:	40 1e       	lddsp	lr,sp[0x4]
8000a5d6:	fc 09 00 09 	add	r9,lr,r9
8000a5da:	b0 09       	st.h	r8[0x0],r9
8000a5dc:	e0 01 16 10 	lsr	r1,r0,0x10
8000a5e0:	2f c8       	sub	r8,-4
8000a5e2:	b1 49       	asr	r9,0x10
8000a5e4:	04 3a       	cp.w	r10,r2
8000a5e6:	fe 98 ff d8 	brls	8000a596 <quorem+0x42>
8000a5ea:	40 0b       	lddsp	r11,sp[0x0]
8000a5ec:	58 0c       	cp.w	r12,0
8000a5ee:	c0 f1       	brne	8000a60c <quorem+0xb8>
8000a5f0:	ec c8 ff fb 	sub	r8,r6,-5
8000a5f4:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000a5f8:	c0 28       	rjmp	8000a5fc <quorem+0xa8>
8000a5fa:	20 16       	sub	r6,1
8000a5fc:	20 48       	sub	r8,4
8000a5fe:	08 38       	cp.w	r8,r4
8000a600:	e0 88 00 05 	brls	8000a60a <quorem+0xb6>
8000a604:	70 09       	ld.w	r9,r8[0x0]
8000a606:	58 09       	cp.w	r9,0
8000a608:	cf 90       	breq	8000a5fa <quorem+0xa6>
8000a60a:	8f 46       	st.w	r7[0x10],r6
8000a60c:	0e 9c       	mov	r12,r7
8000a60e:	e0 a0 09 bf 	rcall	8000b98c <__mcmp>
8000a612:	c2 d5       	brlt	8000a66c <quorem+0x118>
8000a614:	2f f5       	sub	r5,-1
8000a616:	08 98       	mov	r8,r4
8000a618:	30 09       	mov	r9,0
8000a61a:	07 0b       	ld.w	r11,r3++
8000a61c:	f6 0a 16 10 	lsr	r10,r11,0x10
8000a620:	70 0c       	ld.w	r12,r8[0x0]
8000a622:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000a626:	f8 0e 16 10 	lsr	lr,r12,0x10
8000a62a:	14 1e       	sub	lr,r10
8000a62c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000a630:	16 1a       	sub	r10,r11
8000a632:	12 0a       	add	r10,r9
8000a634:	b0 1a       	st.h	r8[0x2],r10
8000a636:	b1 4a       	asr	r10,0x10
8000a638:	fc 0a 00 09 	add	r9,lr,r10
8000a63c:	b0 09       	st.h	r8[0x0],r9
8000a63e:	2f c8       	sub	r8,-4
8000a640:	b1 49       	asr	r9,0x10
8000a642:	04 33       	cp.w	r3,r2
8000a644:	fe 98 ff eb 	brls	8000a61a <quorem+0xc6>
8000a648:	ec c8 ff fb 	sub	r8,r6,-5
8000a64c:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000a650:	58 09       	cp.w	r9,0
8000a652:	c0 d1       	brne	8000a66c <quorem+0x118>
8000a654:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000a658:	c0 28       	rjmp	8000a65c <quorem+0x108>
8000a65a:	20 16       	sub	r6,1
8000a65c:	20 48       	sub	r8,4
8000a65e:	08 38       	cp.w	r8,r4
8000a660:	e0 88 00 05 	brls	8000a66a <quorem+0x116>
8000a664:	70 09       	ld.w	r9,r8[0x0]
8000a666:	58 09       	cp.w	r9,0
8000a668:	cf 90       	breq	8000a65a <quorem+0x106>
8000a66a:	8f 46       	st.w	r7[0x10],r6
8000a66c:	0a 9c       	mov	r12,r5
8000a66e:	2f ed       	sub	sp,-8
8000a670:	d8 32       	popm	r0-r7,pc
8000a672:	d7 03       	nop

8000a674 <_dtoa_r>:
8000a674:	d4 31       	pushm	r0-r7,lr
8000a676:	21 ad       	sub	sp,104
8000a678:	fa c4 ff 74 	sub	r4,sp,-140
8000a67c:	18 97       	mov	r7,r12
8000a67e:	16 95       	mov	r5,r11
8000a680:	68 2c       	ld.w	r12,r4[0x8]
8000a682:	50 c9       	stdsp	sp[0x30],r9
8000a684:	68 16       	ld.w	r6,r4[0x4]
8000a686:	68 09       	ld.w	r9,r4[0x0]
8000a688:	50 e8       	stdsp	sp[0x38],r8
8000a68a:	14 94       	mov	r4,r10
8000a68c:	51 2c       	stdsp	sp[0x48],r12
8000a68e:	fa e5 00 08 	st.d	sp[8],r4
8000a692:	51 59       	stdsp	sp[0x54],r9
8000a694:	6e 95       	ld.w	r5,r7[0x24]
8000a696:	58 05       	cp.w	r5,0
8000a698:	c0 91       	brne	8000a6aa <_dtoa_r+0x36>
8000a69a:	31 0c       	mov	r12,16
8000a69c:	fe b0 e9 4c 	rcall	80007934 <malloc>
8000a6a0:	99 35       	st.w	r12[0xc],r5
8000a6a2:	8f 9c       	st.w	r7[0x24],r12
8000a6a4:	99 15       	st.w	r12[0x4],r5
8000a6a6:	99 25       	st.w	r12[0x8],r5
8000a6a8:	99 05       	st.w	r12[0x0],r5
8000a6aa:	6e 99       	ld.w	r9,r7[0x24]
8000a6ac:	72 08       	ld.w	r8,r9[0x0]
8000a6ae:	58 08       	cp.w	r8,0
8000a6b0:	c0 f0       	breq	8000a6ce <_dtoa_r+0x5a>
8000a6b2:	72 1a       	ld.w	r10,r9[0x4]
8000a6b4:	91 1a       	st.w	r8[0x4],r10
8000a6b6:	30 1a       	mov	r10,1
8000a6b8:	72 19       	ld.w	r9,r9[0x4]
8000a6ba:	f4 09 09 49 	lsl	r9,r10,r9
8000a6be:	10 9b       	mov	r11,r8
8000a6c0:	91 29       	st.w	r8[0x8],r9
8000a6c2:	0e 9c       	mov	r12,r7
8000a6c4:	e0 a0 09 7e 	rcall	8000b9c0 <_Bfree>
8000a6c8:	6e 98       	ld.w	r8,r7[0x24]
8000a6ca:	30 09       	mov	r9,0
8000a6cc:	91 09       	st.w	r8[0x0],r9
8000a6ce:	40 28       	lddsp	r8,sp[0x8]
8000a6d0:	10 94       	mov	r4,r8
8000a6d2:	58 08       	cp.w	r8,0
8000a6d4:	c0 64       	brge	8000a6e0 <_dtoa_r+0x6c>
8000a6d6:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000a6da:	50 28       	stdsp	sp[0x8],r8
8000a6dc:	30 18       	mov	r8,1
8000a6de:	c0 28       	rjmp	8000a6e2 <_dtoa_r+0x6e>
8000a6e0:	30 08       	mov	r8,0
8000a6e2:	8d 08       	st.w	r6[0x0],r8
8000a6e4:	fc 1c 7f f0 	movh	r12,0x7ff0
8000a6e8:	40 26       	lddsp	r6,sp[0x8]
8000a6ea:	0c 98       	mov	r8,r6
8000a6ec:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000a6f0:	18 38       	cp.w	r8,r12
8000a6f2:	c2 01       	brne	8000a732 <_dtoa_r+0xbe>
8000a6f4:	e0 68 27 0f 	mov	r8,9999
8000a6f8:	41 5b       	lddsp	r11,sp[0x54]
8000a6fa:	97 08       	st.w	r11[0x0],r8
8000a6fc:	40 3a       	lddsp	r10,sp[0xc]
8000a6fe:	58 0a       	cp.w	r10,0
8000a700:	c0 71       	brne	8000a70e <_dtoa_r+0x9a>
8000a702:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000a706:	c0 41       	brne	8000a70e <_dtoa_r+0x9a>
8000a708:	fe cc cd 34 	sub	r12,pc,-13004
8000a70c:	c0 38       	rjmp	8000a712 <_dtoa_r+0x9e>
8000a70e:	fe cc cd 2e 	sub	r12,pc,-13010
8000a712:	41 29       	lddsp	r9,sp[0x48]
8000a714:	58 09       	cp.w	r9,0
8000a716:	e0 80 05 9a 	breq	8000b24a <_dtoa_r+0xbd6>
8000a71a:	f8 c8 ff fd 	sub	r8,r12,-3
8000a71e:	f8 c9 ff f8 	sub	r9,r12,-8
8000a722:	11 8b       	ld.ub	r11,r8[0x0]
8000a724:	30 0a       	mov	r10,0
8000a726:	41 25       	lddsp	r5,sp[0x48]
8000a728:	f4 0b 18 00 	cp.b	r11,r10
8000a72c:	f2 08 17 10 	movne	r8,r9
8000a730:	c1 68       	rjmp	8000a75c <_dtoa_r+0xe8>
8000a732:	fa ea 00 08 	ld.d	r10,sp[8]
8000a736:	30 08       	mov	r8,0
8000a738:	fa eb 00 3c 	st.d	sp[60],r10
8000a73c:	30 09       	mov	r9,0
8000a73e:	e0 a0 11 1c 	rcall	8000c976 <__avr32_f64_cmp_eq>
8000a742:	c1 00       	breq	8000a762 <_dtoa_r+0xee>
8000a744:	30 18       	mov	r8,1
8000a746:	41 5a       	lddsp	r10,sp[0x54]
8000a748:	95 08       	st.w	r10[0x0],r8
8000a74a:	fe cc ce 9a 	sub	r12,pc,-12646
8000a74e:	41 29       	lddsp	r9,sp[0x48]
8000a750:	f8 08 00 08 	add	r8,r12,r8
8000a754:	58 09       	cp.w	r9,0
8000a756:	e0 80 05 7a 	breq	8000b24a <_dtoa_r+0xbd6>
8000a75a:	12 95       	mov	r5,r9
8000a75c:	8b 08       	st.w	r5[0x0],r8
8000a75e:	e0 8f 05 76 	bral	8000b24a <_dtoa_r+0xbd6>
8000a762:	fa c8 ff 9c 	sub	r8,sp,-100
8000a766:	fa c9 ff a0 	sub	r9,sp,-96
8000a76a:	fa ea 00 3c 	ld.d	r10,sp[60]
8000a76e:	0e 9c       	mov	r12,r7
8000a770:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
8000a774:	e0 a0 09 78 	rcall	8000ba64 <__d2b>
8000a778:	18 93       	mov	r3,r12
8000a77a:	58 05       	cp.w	r5,0
8000a77c:	c0 d0       	breq	8000a796 <_dtoa_r+0x122>
8000a77e:	fa ea 00 3c 	ld.d	r10,sp[60]
8000a782:	30 04       	mov	r4,0
8000a784:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000a788:	ea c5 03 ff 	sub	r5,r5,1023
8000a78c:	10 9b       	mov	r11,r8
8000a78e:	51 74       	stdsp	sp[0x5c],r4
8000a790:	ea 1b 3f f0 	orh	r11,0x3ff0
8000a794:	c2 58       	rjmp	8000a7de <_dtoa_r+0x16a>
8000a796:	41 88       	lddsp	r8,sp[0x60]
8000a798:	41 9c       	lddsp	r12,sp[0x64]
8000a79a:	10 0c       	add	r12,r8
8000a79c:	f8 c5 fb ce 	sub	r5,r12,-1074
8000a7a0:	e0 45 00 20 	cp.w	r5,32
8000a7a4:	e0 8a 00 0e 	brle	8000a7c0 <_dtoa_r+0x14c>
8000a7a8:	f8 cc fb ee 	sub	r12,r12,-1042
8000a7ac:	40 3b       	lddsp	r11,sp[0xc]
8000a7ae:	ea 08 11 40 	rsub	r8,r5,64
8000a7b2:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000a7b6:	ec 08 09 46 	lsl	r6,r6,r8
8000a7ba:	0c 4c       	or	r12,r6
8000a7bc:	c0 78       	rjmp	8000a7ca <_dtoa_r+0x156>
8000a7be:	d7 03       	nop
8000a7c0:	ea 0c 11 20 	rsub	r12,r5,32
8000a7c4:	40 3a       	lddsp	r10,sp[0xc]
8000a7c6:	f4 0c 09 4c 	lsl	r12,r10,r12
8000a7ca:	e0 a0 10 62 	rcall	8000c88e <__avr32_u32_to_f64>
8000a7ce:	fc 18 fe 10 	movh	r8,0xfe10
8000a7d2:	30 19       	mov	r9,1
8000a7d4:	ea c5 04 33 	sub	r5,r5,1075
8000a7d8:	f0 0b 00 0b 	add	r11,r8,r11
8000a7dc:	51 79       	stdsp	sp[0x5c],r9
8000a7de:	30 08       	mov	r8,0
8000a7e0:	fc 19 3f f8 	movh	r9,0x3ff8
8000a7e4:	e0 a0 0e ea 	rcall	8000c5b8 <__avr32_f64_sub>
8000a7e8:	e0 68 43 61 	mov	r8,17249
8000a7ec:	ea 18 63 6f 	orh	r8,0x636f
8000a7f0:	e0 69 87 a7 	mov	r9,34727
8000a7f4:	ea 19 3f d2 	orh	r9,0x3fd2
8000a7f8:	e0 a0 0d f4 	rcall	8000c3e0 <__avr32_f64_mul>
8000a7fc:	e0 68 c8 b3 	mov	r8,51379
8000a800:	ea 18 8b 60 	orh	r8,0x8b60
8000a804:	e0 69 8a 28 	mov	r9,35368
8000a808:	ea 19 3f c6 	orh	r9,0x3fc6
8000a80c:	e0 a0 0f a4 	rcall	8000c754 <__avr32_f64_add>
8000a810:	0a 9c       	mov	r12,r5
8000a812:	14 90       	mov	r0,r10
8000a814:	16 91       	mov	r1,r11
8000a816:	e0 a0 10 40 	rcall	8000c896 <__avr32_s32_to_f64>
8000a81a:	e0 68 79 fb 	mov	r8,31227
8000a81e:	ea 18 50 9f 	orh	r8,0x509f
8000a822:	e0 69 44 13 	mov	r9,17427
8000a826:	ea 19 3f d3 	orh	r9,0x3fd3
8000a82a:	e0 a0 0d db 	rcall	8000c3e0 <__avr32_f64_mul>
8000a82e:	14 98       	mov	r8,r10
8000a830:	16 99       	mov	r9,r11
8000a832:	00 9a       	mov	r10,r0
8000a834:	02 9b       	mov	r11,r1
8000a836:	e0 a0 0f 8f 	rcall	8000c754 <__avr32_f64_add>
8000a83a:	14 90       	mov	r0,r10
8000a83c:	16 91       	mov	r1,r11
8000a83e:	e0 a0 10 15 	rcall	8000c868 <__avr32_f64_to_s32>
8000a842:	30 08       	mov	r8,0
8000a844:	18 96       	mov	r6,r12
8000a846:	30 09       	mov	r9,0
8000a848:	00 9a       	mov	r10,r0
8000a84a:	02 9b       	mov	r11,r1
8000a84c:	e0 a0 10 dc 	rcall	8000ca04 <__avr32_f64_cmp_lt>
8000a850:	c0 c0       	breq	8000a868 <_dtoa_r+0x1f4>
8000a852:	0c 9c       	mov	r12,r6
8000a854:	e0 a0 10 21 	rcall	8000c896 <__avr32_s32_to_f64>
8000a858:	14 98       	mov	r8,r10
8000a85a:	16 99       	mov	r9,r11
8000a85c:	00 9a       	mov	r10,r0
8000a85e:	02 9b       	mov	r11,r1
8000a860:	e0 a0 10 8b 	rcall	8000c976 <__avr32_f64_cmp_eq>
8000a864:	f7 b6 00 01 	subeq	r6,1
8000a868:	59 66       	cp.w	r6,22
8000a86a:	e0 88 00 05 	brls	8000a874 <_dtoa_r+0x200>
8000a86e:	30 18       	mov	r8,1
8000a870:	51 48       	stdsp	sp[0x50],r8
8000a872:	c1 38       	rjmp	8000a898 <_dtoa_r+0x224>
8000a874:	fe c8 cd e4 	sub	r8,pc,-12828
8000a878:	fa ea 00 3c 	ld.d	r10,sp[60]
8000a87c:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000a880:	e0 a0 10 c2 	rcall	8000ca04 <__avr32_f64_cmp_lt>
8000a884:	f9 b4 00 00 	moveq	r4,0
8000a888:	fb f4 0a 14 	st.weq	sp[0x50],r4
8000a88c:	f7 b6 01 01 	subne	r6,1
8000a890:	f9 bc 01 00 	movne	r12,0
8000a894:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000a898:	41 90       	lddsp	r0,sp[0x64]
8000a89a:	20 10       	sub	r0,1
8000a89c:	0a 10       	sub	r0,r5
8000a89e:	c0 46       	brmi	8000a8a6 <_dtoa_r+0x232>
8000a8a0:	50 40       	stdsp	sp[0x10],r0
8000a8a2:	30 00       	mov	r0,0
8000a8a4:	c0 48       	rjmp	8000a8ac <_dtoa_r+0x238>
8000a8a6:	30 0b       	mov	r11,0
8000a8a8:	5c 30       	neg	r0
8000a8aa:	50 4b       	stdsp	sp[0x10],r11
8000a8ac:	ec 02 11 00 	rsub	r2,r6,0
8000a8b0:	58 06       	cp.w	r6,0
8000a8b2:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000a8b6:	f5 d6 e4 0a 	addge	r10,r10,r6
8000a8ba:	fb fa 4a 04 	st.wge	sp[0x10],r10
8000a8be:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000a8c2:	f9 b2 04 00 	movge	r2,0
8000a8c6:	e1 d6 e5 10 	sublt	r0,r0,r6
8000a8ca:	f9 b9 05 00 	movlt	r9,0
8000a8ce:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000a8d2:	40 c8       	lddsp	r8,sp[0x30]
8000a8d4:	58 98       	cp.w	r8,9
8000a8d6:	e0 8b 00 20 	brhi	8000a916 <_dtoa_r+0x2a2>
8000a8da:	58 58       	cp.w	r8,5
8000a8dc:	f9 b4 0a 01 	movle	r4,1
8000a8e0:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000a8e4:	f7 b5 09 04 	subgt	r5,4
8000a8e8:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000a8ec:	f9 b4 09 00 	movgt	r4,0
8000a8f0:	40 cc       	lddsp	r12,sp[0x30]
8000a8f2:	58 3c       	cp.w	r12,3
8000a8f4:	c2 d0       	breq	8000a94e <_dtoa_r+0x2da>
8000a8f6:	e0 89 00 05 	brgt	8000a900 <_dtoa_r+0x28c>
8000a8fa:	58 2c       	cp.w	r12,2
8000a8fc:	c1 01       	brne	8000a91c <_dtoa_r+0x2a8>
8000a8fe:	c1 88       	rjmp	8000a92e <_dtoa_r+0x2ba>
8000a900:	40 cb       	lddsp	r11,sp[0x30]
8000a902:	58 4b       	cp.w	r11,4
8000a904:	c0 60       	breq	8000a910 <_dtoa_r+0x29c>
8000a906:	58 5b       	cp.w	r11,5
8000a908:	c0 a1       	brne	8000a91c <_dtoa_r+0x2a8>
8000a90a:	30 1a       	mov	r10,1
8000a90c:	50 da       	stdsp	sp[0x34],r10
8000a90e:	c2 28       	rjmp	8000a952 <_dtoa_r+0x2de>
8000a910:	30 19       	mov	r9,1
8000a912:	50 d9       	stdsp	sp[0x34],r9
8000a914:	c0 f8       	rjmp	8000a932 <_dtoa_r+0x2be>
8000a916:	30 08       	mov	r8,0
8000a918:	30 14       	mov	r4,1
8000a91a:	50 c8       	stdsp	sp[0x30],r8
8000a91c:	3f f5       	mov	r5,-1
8000a91e:	30 1c       	mov	r12,1
8000a920:	30 0b       	mov	r11,0
8000a922:	50 95       	stdsp	sp[0x24],r5
8000a924:	50 dc       	stdsp	sp[0x34],r12
8000a926:	0a 91       	mov	r1,r5
8000a928:	31 28       	mov	r8,18
8000a92a:	50 eb       	stdsp	sp[0x38],r11
8000a92c:	c2 08       	rjmp	8000a96c <_dtoa_r+0x2f8>
8000a92e:	30 0a       	mov	r10,0
8000a930:	50 da       	stdsp	sp[0x34],r10
8000a932:	40 e9       	lddsp	r9,sp[0x38]
8000a934:	58 09       	cp.w	r9,0
8000a936:	e0 89 00 07 	brgt	8000a944 <_dtoa_r+0x2d0>
8000a93a:	30 18       	mov	r8,1
8000a93c:	50 98       	stdsp	sp[0x24],r8
8000a93e:	10 91       	mov	r1,r8
8000a940:	50 e8       	stdsp	sp[0x38],r8
8000a942:	c1 58       	rjmp	8000a96c <_dtoa_r+0x2f8>
8000a944:	40 e5       	lddsp	r5,sp[0x38]
8000a946:	50 95       	stdsp	sp[0x24],r5
8000a948:	0a 91       	mov	r1,r5
8000a94a:	0a 98       	mov	r8,r5
8000a94c:	c1 08       	rjmp	8000a96c <_dtoa_r+0x2f8>
8000a94e:	30 0c       	mov	r12,0
8000a950:	50 dc       	stdsp	sp[0x34],r12
8000a952:	40 eb       	lddsp	r11,sp[0x38]
8000a954:	ec 0b 00 0b 	add	r11,r6,r11
8000a958:	50 9b       	stdsp	sp[0x24],r11
8000a95a:	16 98       	mov	r8,r11
8000a95c:	2f f8       	sub	r8,-1
8000a95e:	58 08       	cp.w	r8,0
8000a960:	e0 89 00 05 	brgt	8000a96a <_dtoa_r+0x2f6>
8000a964:	10 91       	mov	r1,r8
8000a966:	30 18       	mov	r8,1
8000a968:	c0 28       	rjmp	8000a96c <_dtoa_r+0x2f8>
8000a96a:	10 91       	mov	r1,r8
8000a96c:	30 09       	mov	r9,0
8000a96e:	6e 9a       	ld.w	r10,r7[0x24]
8000a970:	95 19       	st.w	r10[0x4],r9
8000a972:	30 49       	mov	r9,4
8000a974:	c0 68       	rjmp	8000a980 <_dtoa_r+0x30c>
8000a976:	d7 03       	nop
8000a978:	6a 1a       	ld.w	r10,r5[0x4]
8000a97a:	a1 79       	lsl	r9,0x1
8000a97c:	2f fa       	sub	r10,-1
8000a97e:	8b 1a       	st.w	r5[0x4],r10
8000a980:	6e 95       	ld.w	r5,r7[0x24]
8000a982:	f2 ca ff ec 	sub	r10,r9,-20
8000a986:	10 3a       	cp.w	r10,r8
8000a988:	fe 98 ff f8 	brls	8000a978 <_dtoa_r+0x304>
8000a98c:	6a 1b       	ld.w	r11,r5[0x4]
8000a98e:	0e 9c       	mov	r12,r7
8000a990:	e0 a0 08 32 	rcall	8000b9f4 <_Balloc>
8000a994:	58 e1       	cp.w	r1,14
8000a996:	5f 88       	srls	r8
8000a998:	8b 0c       	st.w	r5[0x0],r12
8000a99a:	f1 e4 00 04 	and	r4,r8,r4
8000a99e:	6e 98       	ld.w	r8,r7[0x24]
8000a9a0:	70 08       	ld.w	r8,r8[0x0]
8000a9a2:	50 88       	stdsp	sp[0x20],r8
8000a9a4:	e0 80 01 82 	breq	8000aca8 <_dtoa_r+0x634>
8000a9a8:	58 06       	cp.w	r6,0
8000a9aa:	e0 8a 00 43 	brle	8000aa30 <_dtoa_r+0x3bc>
8000a9ae:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000a9b2:	fe c8 cf 22 	sub	r8,pc,-12510
8000a9b6:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000a9ba:	fa e5 00 18 	st.d	sp[24],r4
8000a9be:	ec 04 14 04 	asr	r4,r6,0x4
8000a9c2:	ed b4 00 04 	bld	r4,0x4
8000a9c6:	c0 30       	breq	8000a9cc <_dtoa_r+0x358>
8000a9c8:	30 25       	mov	r5,2
8000a9ca:	c1 08       	rjmp	8000a9ea <_dtoa_r+0x376>
8000a9cc:	fe c8 ce 74 	sub	r8,pc,-12684
8000a9d0:	f0 e8 00 20 	ld.d	r8,r8[32]
8000a9d4:	fa ea 00 3c 	ld.d	r10,sp[60]
8000a9d8:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
8000a9dc:	e0 a0 10 48 	rcall	8000ca6c <__avr32_f64_div>
8000a9e0:	30 35       	mov	r5,3
8000a9e2:	14 98       	mov	r8,r10
8000a9e4:	16 99       	mov	r9,r11
8000a9e6:	fa e9 00 08 	st.d	sp[8],r8
8000a9ea:	fe cc ce 92 	sub	r12,pc,-12654
8000a9ee:	50 a3       	stdsp	sp[0x28],r3
8000a9f0:	0c 93       	mov	r3,r6
8000a9f2:	18 96       	mov	r6,r12
8000a9f4:	c0 f8       	rjmp	8000aa12 <_dtoa_r+0x39e>
8000a9f6:	fa ea 00 18 	ld.d	r10,sp[24]
8000a9fa:	ed b4 00 00 	bld	r4,0x0
8000a9fe:	c0 81       	brne	8000aa0e <_dtoa_r+0x39a>
8000aa00:	ec e8 00 00 	ld.d	r8,r6[0]
8000aa04:	2f f5       	sub	r5,-1
8000aa06:	e0 a0 0c ed 	rcall	8000c3e0 <__avr32_f64_mul>
8000aa0a:	fa eb 00 18 	st.d	sp[24],r10
8000aa0e:	a1 54       	asr	r4,0x1
8000aa10:	2f 86       	sub	r6,-8
8000aa12:	58 04       	cp.w	r4,0
8000aa14:	cf 11       	brne	8000a9f6 <_dtoa_r+0x382>
8000aa16:	fa e8 00 18 	ld.d	r8,sp[24]
8000aa1a:	fa ea 00 08 	ld.d	r10,sp[8]
8000aa1e:	06 96       	mov	r6,r3
8000aa20:	e0 a0 10 26 	rcall	8000ca6c <__avr32_f64_div>
8000aa24:	40 a3       	lddsp	r3,sp[0x28]
8000aa26:	14 98       	mov	r8,r10
8000aa28:	16 99       	mov	r9,r11
8000aa2a:	fa e9 00 08 	st.d	sp[8],r8
8000aa2e:	c2 f8       	rjmp	8000aa8c <_dtoa_r+0x418>
8000aa30:	ec 08 11 00 	rsub	r8,r6,0
8000aa34:	c0 31       	brne	8000aa3a <_dtoa_r+0x3c6>
8000aa36:	30 25       	mov	r5,2
8000aa38:	c2 a8       	rjmp	8000aa8c <_dtoa_r+0x418>
8000aa3a:	fe cc ce e2 	sub	r12,pc,-12574
8000aa3e:	f0 04 14 04 	asr	r4,r8,0x4
8000aa42:	50 1c       	stdsp	sp[0x4],r12
8000aa44:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000aa48:	fe c9 cf b8 	sub	r9,pc,-12360
8000aa4c:	fa ea 00 3c 	ld.d	r10,sp[60]
8000aa50:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000aa54:	e0 a0 0c c6 	rcall	8000c3e0 <__avr32_f64_mul>
8000aa58:	40 1c       	lddsp	r12,sp[0x4]
8000aa5a:	50 63       	stdsp	sp[0x18],r3
8000aa5c:	30 25       	mov	r5,2
8000aa5e:	0c 93       	mov	r3,r6
8000aa60:	fa eb 00 08 	st.d	sp[8],r10
8000aa64:	18 96       	mov	r6,r12
8000aa66:	c0 f8       	rjmp	8000aa84 <_dtoa_r+0x410>
8000aa68:	fa ea 00 08 	ld.d	r10,sp[8]
8000aa6c:	ed b4 00 00 	bld	r4,0x0
8000aa70:	c0 81       	brne	8000aa80 <_dtoa_r+0x40c>
8000aa72:	ec e8 00 00 	ld.d	r8,r6[0]
8000aa76:	2f f5       	sub	r5,-1
8000aa78:	e0 a0 0c b4 	rcall	8000c3e0 <__avr32_f64_mul>
8000aa7c:	fa eb 00 08 	st.d	sp[8],r10
8000aa80:	a1 54       	asr	r4,0x1
8000aa82:	2f 86       	sub	r6,-8
8000aa84:	58 04       	cp.w	r4,0
8000aa86:	cf 11       	brne	8000aa68 <_dtoa_r+0x3f4>
8000aa88:	06 96       	mov	r6,r3
8000aa8a:	40 63       	lddsp	r3,sp[0x18]
8000aa8c:	41 4a       	lddsp	r10,sp[0x50]
8000aa8e:	58 0a       	cp.w	r10,0
8000aa90:	c2 a0       	breq	8000aae4 <_dtoa_r+0x470>
8000aa92:	fa e8 00 08 	ld.d	r8,sp[8]
8000aa96:	58 01       	cp.w	r1,0
8000aa98:	5f 94       	srgt	r4
8000aa9a:	fa e9 00 18 	st.d	sp[24],r8
8000aa9e:	30 08       	mov	r8,0
8000aaa0:	fc 19 3f f0 	movh	r9,0x3ff0
8000aaa4:	fa ea 00 18 	ld.d	r10,sp[24]
8000aaa8:	e0 a0 0f ae 	rcall	8000ca04 <__avr32_f64_cmp_lt>
8000aaac:	f9 bc 00 00 	moveq	r12,0
8000aab0:	f9 bc 01 01 	movne	r12,1
8000aab4:	e9 ec 00 0c 	and	r12,r4,r12
8000aab8:	c1 60       	breq	8000aae4 <_dtoa_r+0x470>
8000aaba:	40 98       	lddsp	r8,sp[0x24]
8000aabc:	58 08       	cp.w	r8,0
8000aabe:	e0 8a 00 f1 	brle	8000aca0 <_dtoa_r+0x62c>
8000aac2:	30 08       	mov	r8,0
8000aac4:	fc 19 40 24 	movh	r9,0x4024
8000aac8:	ec c4 00 01 	sub	r4,r6,1
8000aacc:	fa ea 00 18 	ld.d	r10,sp[24]
8000aad0:	2f f5       	sub	r5,-1
8000aad2:	50 64       	stdsp	sp[0x18],r4
8000aad4:	e0 a0 0c 86 	rcall	8000c3e0 <__avr32_f64_mul>
8000aad8:	40 94       	lddsp	r4,sp[0x24]
8000aada:	14 98       	mov	r8,r10
8000aadc:	16 99       	mov	r9,r11
8000aade:	fa e9 00 08 	st.d	sp[8],r8
8000aae2:	c0 38       	rjmp	8000aae8 <_dtoa_r+0x474>
8000aae4:	50 66       	stdsp	sp[0x18],r6
8000aae6:	02 94       	mov	r4,r1
8000aae8:	0a 9c       	mov	r12,r5
8000aaea:	e0 a0 0e d6 	rcall	8000c896 <__avr32_s32_to_f64>
8000aaee:	fa e8 00 08 	ld.d	r8,sp[8]
8000aaf2:	e0 a0 0c 77 	rcall	8000c3e0 <__avr32_f64_mul>
8000aaf6:	30 08       	mov	r8,0
8000aaf8:	fc 19 40 1c 	movh	r9,0x401c
8000aafc:	e0 a0 0e 2c 	rcall	8000c754 <__avr32_f64_add>
8000ab00:	14 98       	mov	r8,r10
8000ab02:	16 99       	mov	r9,r11
8000ab04:	fa e9 00 28 	st.d	sp[40],r8
8000ab08:	fc 18 fc c0 	movh	r8,0xfcc0
8000ab0c:	40 a5       	lddsp	r5,sp[0x28]
8000ab0e:	10 05       	add	r5,r8
8000ab10:	50 a5       	stdsp	sp[0x28],r5
8000ab12:	58 04       	cp.w	r4,0
8000ab14:	c2 11       	brne	8000ab56 <_dtoa_r+0x4e2>
8000ab16:	fa ea 00 08 	ld.d	r10,sp[8]
8000ab1a:	30 08       	mov	r8,0
8000ab1c:	fc 19 40 14 	movh	r9,0x4014
8000ab20:	e0 a0 0d 4c 	rcall	8000c5b8 <__avr32_f64_sub>
8000ab24:	40 bc       	lddsp	r12,sp[0x2c]
8000ab26:	fa eb 00 08 	st.d	sp[8],r10
8000ab2a:	14 98       	mov	r8,r10
8000ab2c:	16 99       	mov	r9,r11
8000ab2e:	18 9a       	mov	r10,r12
8000ab30:	0a 9b       	mov	r11,r5
8000ab32:	e0 a0 0f 69 	rcall	8000ca04 <__avr32_f64_cmp_lt>
8000ab36:	e0 81 02 54 	brne	8000afde <_dtoa_r+0x96a>
8000ab3a:	0a 98       	mov	r8,r5
8000ab3c:	40 b9       	lddsp	r9,sp[0x2c]
8000ab3e:	ee 18 80 00 	eorh	r8,0x8000
8000ab42:	fa ea 00 08 	ld.d	r10,sp[8]
8000ab46:	10 95       	mov	r5,r8
8000ab48:	12 98       	mov	r8,r9
8000ab4a:	0a 99       	mov	r9,r5
8000ab4c:	e0 a0 0f 5c 	rcall	8000ca04 <__avr32_f64_cmp_lt>
8000ab50:	e0 81 02 3e 	brne	8000afcc <_dtoa_r+0x958>
8000ab54:	ca 68       	rjmp	8000aca0 <_dtoa_r+0x62c>
8000ab56:	fe c9 d0 c6 	sub	r9,pc,-12090
8000ab5a:	e8 c8 00 01 	sub	r8,r4,1
8000ab5e:	40 d5       	lddsp	r5,sp[0x34]
8000ab60:	58 05       	cp.w	r5,0
8000ab62:	c4 f0       	breq	8000ac00 <_dtoa_r+0x58c>
8000ab64:	30 0c       	mov	r12,0
8000ab66:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000ab6a:	51 3c       	stdsp	sp[0x4c],r12
8000ab6c:	30 0a       	mov	r10,0
8000ab6e:	fc 1b 3f e0 	movh	r11,0x3fe0
8000ab72:	e0 a0 0f 7d 	rcall	8000ca6c <__avr32_f64_div>
8000ab76:	fa e8 00 28 	ld.d	r8,sp[40]
8000ab7a:	40 85       	lddsp	r5,sp[0x20]
8000ab7c:	e0 a0 0d 1e 	rcall	8000c5b8 <__avr32_f64_sub>
8000ab80:	fa eb 00 28 	st.d	sp[40],r10
8000ab84:	fa ea 00 08 	ld.d	r10,sp[8]
8000ab88:	e0 a0 0e 70 	rcall	8000c868 <__avr32_f64_to_s32>
8000ab8c:	51 6c       	stdsp	sp[0x58],r12
8000ab8e:	e0 a0 0e 84 	rcall	8000c896 <__avr32_s32_to_f64>
8000ab92:	14 98       	mov	r8,r10
8000ab94:	16 99       	mov	r9,r11
8000ab96:	fa ea 00 08 	ld.d	r10,sp[8]
8000ab9a:	e0 a0 0d 0f 	rcall	8000c5b8 <__avr32_f64_sub>
8000ab9e:	fa eb 00 08 	st.d	sp[8],r10
8000aba2:	41 68       	lddsp	r8,sp[0x58]
8000aba4:	2d 08       	sub	r8,-48
8000aba6:	0a c8       	st.b	r5++,r8
8000aba8:	41 39       	lddsp	r9,sp[0x4c]
8000abaa:	2f f9       	sub	r9,-1
8000abac:	51 39       	stdsp	sp[0x4c],r9
8000abae:	fa e8 00 28 	ld.d	r8,sp[40]
8000abb2:	e0 a0 0f 29 	rcall	8000ca04 <__avr32_f64_cmp_lt>
8000abb6:	e0 81 03 39 	brne	8000b228 <_dtoa_r+0xbb4>
8000abba:	fa e8 00 08 	ld.d	r8,sp[8]
8000abbe:	30 0a       	mov	r10,0
8000abc0:	fc 1b 3f f0 	movh	r11,0x3ff0
8000abc4:	e0 a0 0c fa 	rcall	8000c5b8 <__avr32_f64_sub>
8000abc8:	fa e8 00 28 	ld.d	r8,sp[40]
8000abcc:	e0 a0 0f 1c 	rcall	8000ca04 <__avr32_f64_cmp_lt>
8000abd0:	fa ea 00 28 	ld.d	r10,sp[40]
8000abd4:	30 08       	mov	r8,0
8000abd6:	fc 19 40 24 	movh	r9,0x4024
8000abda:	e0 81 00 da 	brne	8000ad8e <_dtoa_r+0x71a>
8000abde:	41 3c       	lddsp	r12,sp[0x4c]
8000abe0:	08 3c       	cp.w	r12,r4
8000abe2:	c5 f4       	brge	8000aca0 <_dtoa_r+0x62c>
8000abe4:	e0 a0 0b fe 	rcall	8000c3e0 <__avr32_f64_mul>
8000abe8:	30 08       	mov	r8,0
8000abea:	fa eb 00 28 	st.d	sp[40],r10
8000abee:	fc 19 40 24 	movh	r9,0x4024
8000abf2:	fa ea 00 08 	ld.d	r10,sp[8]
8000abf6:	e0 a0 0b f5 	rcall	8000c3e0 <__avr32_f64_mul>
8000abfa:	fa eb 00 08 	st.d	sp[8],r10
8000abfe:	cc 3b       	rjmp	8000ab84 <_dtoa_r+0x510>
8000ac00:	40 85       	lddsp	r5,sp[0x20]
8000ac02:	08 05       	add	r5,r4
8000ac04:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000ac08:	51 35       	stdsp	sp[0x4c],r5
8000ac0a:	fa e8 00 28 	ld.d	r8,sp[40]
8000ac0e:	40 85       	lddsp	r5,sp[0x20]
8000ac10:	e0 a0 0b e8 	rcall	8000c3e0 <__avr32_f64_mul>
8000ac14:	fa eb 00 28 	st.d	sp[40],r10
8000ac18:	fa ea 00 08 	ld.d	r10,sp[8]
8000ac1c:	e0 a0 0e 26 	rcall	8000c868 <__avr32_f64_to_s32>
8000ac20:	51 6c       	stdsp	sp[0x58],r12
8000ac22:	e0 a0 0e 3a 	rcall	8000c896 <__avr32_s32_to_f64>
8000ac26:	14 98       	mov	r8,r10
8000ac28:	16 99       	mov	r9,r11
8000ac2a:	fa ea 00 08 	ld.d	r10,sp[8]
8000ac2e:	e0 a0 0c c5 	rcall	8000c5b8 <__avr32_f64_sub>
8000ac32:	fa eb 00 08 	st.d	sp[8],r10
8000ac36:	41 68       	lddsp	r8,sp[0x58]
8000ac38:	2d 08       	sub	r8,-48
8000ac3a:	0a c8       	st.b	r5++,r8
8000ac3c:	41 3c       	lddsp	r12,sp[0x4c]
8000ac3e:	18 35       	cp.w	r5,r12
8000ac40:	c2 81       	brne	8000ac90 <_dtoa_r+0x61c>
8000ac42:	30 08       	mov	r8,0
8000ac44:	fc 19 3f e0 	movh	r9,0x3fe0
8000ac48:	fa ea 00 28 	ld.d	r10,sp[40]
8000ac4c:	e0 a0 0d 84 	rcall	8000c754 <__avr32_f64_add>
8000ac50:	40 85       	lddsp	r5,sp[0x20]
8000ac52:	fa e8 00 08 	ld.d	r8,sp[8]
8000ac56:	08 05       	add	r5,r4
8000ac58:	e0 a0 0e d6 	rcall	8000ca04 <__avr32_f64_cmp_lt>
8000ac5c:	e0 81 00 99 	brne	8000ad8e <_dtoa_r+0x71a>
8000ac60:	fa e8 00 28 	ld.d	r8,sp[40]
8000ac64:	30 0a       	mov	r10,0
8000ac66:	fc 1b 3f e0 	movh	r11,0x3fe0
8000ac6a:	e0 a0 0c a7 	rcall	8000c5b8 <__avr32_f64_sub>
8000ac6e:	14 98       	mov	r8,r10
8000ac70:	16 99       	mov	r9,r11
8000ac72:	fa ea 00 08 	ld.d	r10,sp[8]
8000ac76:	e0 a0 0e c7 	rcall	8000ca04 <__avr32_f64_cmp_lt>
8000ac7a:	c1 30       	breq	8000aca0 <_dtoa_r+0x62c>
8000ac7c:	33 09       	mov	r9,48
8000ac7e:	0a 98       	mov	r8,r5
8000ac80:	11 7a       	ld.ub	r10,--r8
8000ac82:	f2 0a 18 00 	cp.b	r10,r9
8000ac86:	e0 81 02 d1 	brne	8000b228 <_dtoa_r+0xbb4>
8000ac8a:	10 95       	mov	r5,r8
8000ac8c:	cf 9b       	rjmp	8000ac7e <_dtoa_r+0x60a>
8000ac8e:	d7 03       	nop
8000ac90:	30 08       	mov	r8,0
8000ac92:	fc 19 40 24 	movh	r9,0x4024
8000ac96:	e0 a0 0b a5 	rcall	8000c3e0 <__avr32_f64_mul>
8000ac9a:	fa eb 00 08 	st.d	sp[8],r10
8000ac9e:	cb db       	rjmp	8000ac18 <_dtoa_r+0x5a4>
8000aca0:	fa ea 00 3c 	ld.d	r10,sp[60]
8000aca4:	fa eb 00 08 	st.d	sp[8],r10
8000aca8:	58 e6       	cp.w	r6,14
8000acaa:	5f ab       	srle	r11
8000acac:	41 8a       	lddsp	r10,sp[0x60]
8000acae:	30 08       	mov	r8,0
8000acb0:	f4 09 11 ff 	rsub	r9,r10,-1
8000acb4:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000acb8:	f0 09 18 00 	cp.b	r9,r8
8000acbc:	e0 80 00 82 	breq	8000adc0 <_dtoa_r+0x74c>
8000acc0:	40 ea       	lddsp	r10,sp[0x38]
8000acc2:	58 01       	cp.w	r1,0
8000acc4:	5f a9       	srle	r9
8000acc6:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000acca:	fe ca d2 3a 	sub	r10,pc,-11718
8000acce:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000acd2:	fa e5 00 10 	st.d	sp[16],r4
8000acd6:	f0 09 18 00 	cp.b	r9,r8
8000acda:	c1 40       	breq	8000ad02 <_dtoa_r+0x68e>
8000acdc:	58 01       	cp.w	r1,0
8000acde:	e0 81 01 77 	brne	8000afcc <_dtoa_r+0x958>
8000ace2:	30 08       	mov	r8,0
8000ace4:	fc 19 40 14 	movh	r9,0x4014
8000ace8:	08 9a       	mov	r10,r4
8000acea:	0a 9b       	mov	r11,r5
8000acec:	e0 a0 0b 7a 	rcall	8000c3e0 <__avr32_f64_mul>
8000acf0:	fa e8 00 08 	ld.d	r8,sp[8]
8000acf4:	e0 a0 0e 54 	rcall	8000c99c <__avr32_f64_cmp_ge>
8000acf8:	e0 81 01 6a 	brne	8000afcc <_dtoa_r+0x958>
8000acfc:	02 92       	mov	r2,r1
8000acfe:	e0 8f 01 72 	bral	8000afe2 <_dtoa_r+0x96e>
8000ad02:	40 85       	lddsp	r5,sp[0x20]
8000ad04:	30 14       	mov	r4,1
8000ad06:	fa e8 00 10 	ld.d	r8,sp[16]
8000ad0a:	fa ea 00 08 	ld.d	r10,sp[8]
8000ad0e:	e0 a0 0e af 	rcall	8000ca6c <__avr32_f64_div>
8000ad12:	e0 a0 0d ab 	rcall	8000c868 <__avr32_f64_to_s32>
8000ad16:	18 92       	mov	r2,r12
8000ad18:	e0 a0 0d bf 	rcall	8000c896 <__avr32_s32_to_f64>
8000ad1c:	fa e8 00 10 	ld.d	r8,sp[16]
8000ad20:	e0 a0 0b 60 	rcall	8000c3e0 <__avr32_f64_mul>
8000ad24:	14 98       	mov	r8,r10
8000ad26:	16 99       	mov	r9,r11
8000ad28:	fa ea 00 08 	ld.d	r10,sp[8]
8000ad2c:	e0 a0 0c 46 	rcall	8000c5b8 <__avr32_f64_sub>
8000ad30:	fa eb 00 08 	st.d	sp[8],r10
8000ad34:	e4 c8 ff d0 	sub	r8,r2,-48
8000ad38:	0a c8       	st.b	r5++,r8
8000ad3a:	fc 19 40 24 	movh	r9,0x4024
8000ad3e:	30 08       	mov	r8,0
8000ad40:	02 34       	cp.w	r4,r1
8000ad42:	c3 31       	brne	8000ada8 <_dtoa_r+0x734>
8000ad44:	fa e8 00 08 	ld.d	r8,sp[8]
8000ad48:	e0 a0 0d 06 	rcall	8000c754 <__avr32_f64_add>
8000ad4c:	16 91       	mov	r1,r11
8000ad4e:	14 90       	mov	r0,r10
8000ad50:	14 98       	mov	r8,r10
8000ad52:	02 99       	mov	r9,r1
8000ad54:	fa ea 00 10 	ld.d	r10,sp[16]
8000ad58:	e0 a0 0e 56 	rcall	8000ca04 <__avr32_f64_cmp_lt>
8000ad5c:	c1 a1       	brne	8000ad90 <_dtoa_r+0x71c>
8000ad5e:	fa e8 00 10 	ld.d	r8,sp[16]
8000ad62:	00 9a       	mov	r10,r0
8000ad64:	02 9b       	mov	r11,r1
8000ad66:	e0 a0 0e 08 	rcall	8000c976 <__avr32_f64_cmp_eq>
8000ad6a:	e0 80 02 5e 	breq	8000b226 <_dtoa_r+0xbb2>
8000ad6e:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000ad72:	c0 f1       	brne	8000ad90 <_dtoa_r+0x71c>
8000ad74:	e0 8f 02 59 	bral	8000b226 <_dtoa_r+0xbb2>
8000ad78:	40 8a       	lddsp	r10,sp[0x20]
8000ad7a:	14 38       	cp.w	r8,r10
8000ad7c:	c0 30       	breq	8000ad82 <_dtoa_r+0x70e>
8000ad7e:	10 95       	mov	r5,r8
8000ad80:	c0 98       	rjmp	8000ad92 <_dtoa_r+0x71e>
8000ad82:	33 08       	mov	r8,48
8000ad84:	40 89       	lddsp	r9,sp[0x20]
8000ad86:	2f f6       	sub	r6,-1
8000ad88:	b2 88       	st.b	r9[0x0],r8
8000ad8a:	40 88       	lddsp	r8,sp[0x20]
8000ad8c:	c0 88       	rjmp	8000ad9c <_dtoa_r+0x728>
8000ad8e:	40 66       	lddsp	r6,sp[0x18]
8000ad90:	33 99       	mov	r9,57
8000ad92:	0a 98       	mov	r8,r5
8000ad94:	11 7a       	ld.ub	r10,--r8
8000ad96:	f2 0a 18 00 	cp.b	r10,r9
8000ad9a:	ce f0       	breq	8000ad78 <_dtoa_r+0x704>
8000ad9c:	50 66       	stdsp	sp[0x18],r6
8000ad9e:	11 89       	ld.ub	r9,r8[0x0]
8000ada0:	2f f9       	sub	r9,-1
8000ada2:	b0 89       	st.b	r8[0x0],r9
8000ada4:	e0 8f 02 42 	bral	8000b228 <_dtoa_r+0xbb4>
8000ada8:	e0 a0 0b 1c 	rcall	8000c3e0 <__avr32_f64_mul>
8000adac:	2f f4       	sub	r4,-1
8000adae:	fa eb 00 08 	st.d	sp[8],r10
8000adb2:	30 08       	mov	r8,0
8000adb4:	30 09       	mov	r9,0
8000adb6:	e0 a0 0d e0 	rcall	8000c976 <__avr32_f64_cmp_eq>
8000adba:	ca 60       	breq	8000ad06 <_dtoa_r+0x692>
8000adbc:	e0 8f 02 35 	bral	8000b226 <_dtoa_r+0xbb2>
8000adc0:	40 d8       	lddsp	r8,sp[0x34]
8000adc2:	58 08       	cp.w	r8,0
8000adc4:	c0 51       	brne	8000adce <_dtoa_r+0x75a>
8000adc6:	04 98       	mov	r8,r2
8000adc8:	00 95       	mov	r5,r0
8000adca:	40 d4       	lddsp	r4,sp[0x34]
8000adcc:	c3 78       	rjmp	8000ae3a <_dtoa_r+0x7c6>
8000adce:	40 c5       	lddsp	r5,sp[0x30]
8000add0:	58 15       	cp.w	r5,1
8000add2:	e0 89 00 0f 	brgt	8000adf0 <_dtoa_r+0x77c>
8000add6:	41 74       	lddsp	r4,sp[0x5c]
8000add8:	58 04       	cp.w	r4,0
8000adda:	c0 40       	breq	8000ade2 <_dtoa_r+0x76e>
8000addc:	f4 c9 fb cd 	sub	r9,r10,-1075
8000ade0:	c0 48       	rjmp	8000ade8 <_dtoa_r+0x774>
8000ade2:	41 99       	lddsp	r9,sp[0x64]
8000ade4:	f2 09 11 36 	rsub	r9,r9,54
8000ade8:	04 98       	mov	r8,r2
8000adea:	00 95       	mov	r5,r0
8000adec:	c1 c8       	rjmp	8000ae24 <_dtoa_r+0x7b0>
8000adee:	d7 03       	nop
8000adf0:	e2 c8 00 01 	sub	r8,r1,1
8000adf4:	58 01       	cp.w	r1,0
8000adf6:	e0 05 17 40 	movge	r5,r0
8000adfa:	e2 09 17 40 	movge	r9,r1
8000adfe:	e1 d1 e5 15 	sublt	r5,r0,r1
8000ae02:	f9 b9 05 00 	movlt	r9,0
8000ae06:	10 32       	cp.w	r2,r8
8000ae08:	e5 d8 e4 18 	subge	r8,r2,r8
8000ae0c:	f1 d2 e5 18 	sublt	r8,r8,r2
8000ae10:	e5 d8 e5 02 	addlt	r2,r2,r8
8000ae14:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000ae18:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000ae1c:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000ae20:	f9 b8 05 00 	movlt	r8,0
8000ae24:	40 4b       	lddsp	r11,sp[0x10]
8000ae26:	12 0b       	add	r11,r9
8000ae28:	50 08       	stdsp	sp[0x0],r8
8000ae2a:	50 4b       	stdsp	sp[0x10],r11
8000ae2c:	12 00       	add	r0,r9
8000ae2e:	30 1b       	mov	r11,1
8000ae30:	0e 9c       	mov	r12,r7
8000ae32:	e0 a0 07 95 	rcall	8000bd5c <__i2b>
8000ae36:	40 08       	lddsp	r8,sp[0x0]
8000ae38:	18 94       	mov	r4,r12
8000ae3a:	40 4a       	lddsp	r10,sp[0x10]
8000ae3c:	58 05       	cp.w	r5,0
8000ae3e:	5f 99       	srgt	r9
8000ae40:	58 0a       	cp.w	r10,0
8000ae42:	5f 9a       	srgt	r10
8000ae44:	f5 e9 00 09 	and	r9,r10,r9
8000ae48:	c0 80       	breq	8000ae58 <_dtoa_r+0x7e4>
8000ae4a:	40 4c       	lddsp	r12,sp[0x10]
8000ae4c:	f8 05 0d 49 	min	r9,r12,r5
8000ae50:	12 1c       	sub	r12,r9
8000ae52:	12 10       	sub	r0,r9
8000ae54:	50 4c       	stdsp	sp[0x10],r12
8000ae56:	12 15       	sub	r5,r9
8000ae58:	58 02       	cp.w	r2,0
8000ae5a:	e0 8a 00 27 	brle	8000aea8 <_dtoa_r+0x834>
8000ae5e:	40 db       	lddsp	r11,sp[0x34]
8000ae60:	58 0b       	cp.w	r11,0
8000ae62:	c1 d0       	breq	8000ae9c <_dtoa_r+0x828>
8000ae64:	58 08       	cp.w	r8,0
8000ae66:	e0 8a 00 17 	brle	8000ae94 <_dtoa_r+0x820>
8000ae6a:	10 9a       	mov	r10,r8
8000ae6c:	50 08       	stdsp	sp[0x0],r8
8000ae6e:	08 9b       	mov	r11,r4
8000ae70:	0e 9c       	mov	r12,r7
8000ae72:	e0 a0 07 bb 	rcall	8000bde8 <__pow5mult>
8000ae76:	06 9a       	mov	r10,r3
8000ae78:	18 9b       	mov	r11,r12
8000ae7a:	18 94       	mov	r4,r12
8000ae7c:	0e 9c       	mov	r12,r7
8000ae7e:	e0 a0 06 ef 	rcall	8000bc5c <__multiply>
8000ae82:	18 99       	mov	r9,r12
8000ae84:	06 9b       	mov	r11,r3
8000ae86:	50 19       	stdsp	sp[0x4],r9
8000ae88:	0e 9c       	mov	r12,r7
8000ae8a:	e0 a0 05 9b 	rcall	8000b9c0 <_Bfree>
8000ae8e:	40 19       	lddsp	r9,sp[0x4]
8000ae90:	40 08       	lddsp	r8,sp[0x0]
8000ae92:	12 93       	mov	r3,r9
8000ae94:	e4 08 01 0a 	sub	r10,r2,r8
8000ae98:	c0 80       	breq	8000aea8 <_dtoa_r+0x834>
8000ae9a:	c0 28       	rjmp	8000ae9e <_dtoa_r+0x82a>
8000ae9c:	04 9a       	mov	r10,r2
8000ae9e:	06 9b       	mov	r11,r3
8000aea0:	0e 9c       	mov	r12,r7
8000aea2:	e0 a0 07 a3 	rcall	8000bde8 <__pow5mult>
8000aea6:	18 93       	mov	r3,r12
8000aea8:	30 1b       	mov	r11,1
8000aeaa:	0e 9c       	mov	r12,r7
8000aeac:	e0 a0 07 58 	rcall	8000bd5c <__i2b>
8000aeb0:	41 1a       	lddsp	r10,sp[0x44]
8000aeb2:	18 92       	mov	r2,r12
8000aeb4:	58 0a       	cp.w	r10,0
8000aeb6:	e0 8a 00 07 	brle	8000aec4 <_dtoa_r+0x850>
8000aeba:	18 9b       	mov	r11,r12
8000aebc:	0e 9c       	mov	r12,r7
8000aebe:	e0 a0 07 95 	rcall	8000bde8 <__pow5mult>
8000aec2:	18 92       	mov	r2,r12
8000aec4:	40 c9       	lddsp	r9,sp[0x30]
8000aec6:	58 19       	cp.w	r9,1
8000aec8:	e0 89 00 14 	brgt	8000aef0 <_dtoa_r+0x87c>
8000aecc:	40 38       	lddsp	r8,sp[0xc]
8000aece:	58 08       	cp.w	r8,0
8000aed0:	c1 01       	brne	8000aef0 <_dtoa_r+0x87c>
8000aed2:	40 29       	lddsp	r9,sp[0x8]
8000aed4:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000aed8:	c0 c1       	brne	8000aef0 <_dtoa_r+0x87c>
8000aeda:	12 98       	mov	r8,r9
8000aedc:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000aee0:	c0 80       	breq	8000aef0 <_dtoa_r+0x87c>
8000aee2:	40 4c       	lddsp	r12,sp[0x10]
8000aee4:	30 1b       	mov	r11,1
8000aee6:	2f fc       	sub	r12,-1
8000aee8:	2f f0       	sub	r0,-1
8000aeea:	50 4c       	stdsp	sp[0x10],r12
8000aeec:	50 6b       	stdsp	sp[0x18],r11
8000aeee:	c0 38       	rjmp	8000aef4 <_dtoa_r+0x880>
8000aef0:	30 0a       	mov	r10,0
8000aef2:	50 6a       	stdsp	sp[0x18],r10
8000aef4:	41 19       	lddsp	r9,sp[0x44]
8000aef6:	58 09       	cp.w	r9,0
8000aef8:	c0 31       	brne	8000aefe <_dtoa_r+0x88a>
8000aefa:	30 1c       	mov	r12,1
8000aefc:	c0 98       	rjmp	8000af0e <_dtoa_r+0x89a>
8000aefe:	64 48       	ld.w	r8,r2[0x10]
8000af00:	2f c8       	sub	r8,-4
8000af02:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000af06:	e0 a0 04 cc 	rcall	8000b89e <__hi0bits>
8000af0a:	f8 0c 11 20 	rsub	r12,r12,32
8000af0e:	40 4b       	lddsp	r11,sp[0x10]
8000af10:	f8 0b 00 08 	add	r8,r12,r11
8000af14:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000af18:	c0 c0       	breq	8000af30 <_dtoa_r+0x8bc>
8000af1a:	f0 08 11 20 	rsub	r8,r8,32
8000af1e:	58 48       	cp.w	r8,4
8000af20:	e0 8a 00 06 	brle	8000af2c <_dtoa_r+0x8b8>
8000af24:	20 48       	sub	r8,4
8000af26:	10 0b       	add	r11,r8
8000af28:	50 4b       	stdsp	sp[0x10],r11
8000af2a:	c0 78       	rjmp	8000af38 <_dtoa_r+0x8c4>
8000af2c:	58 48       	cp.w	r8,4
8000af2e:	c0 70       	breq	8000af3c <_dtoa_r+0x8c8>
8000af30:	40 4a       	lddsp	r10,sp[0x10]
8000af32:	2e 48       	sub	r8,-28
8000af34:	10 0a       	add	r10,r8
8000af36:	50 4a       	stdsp	sp[0x10],r10
8000af38:	10 00       	add	r0,r8
8000af3a:	10 05       	add	r5,r8
8000af3c:	58 00       	cp.w	r0,0
8000af3e:	e0 8a 00 08 	brle	8000af4e <_dtoa_r+0x8da>
8000af42:	06 9b       	mov	r11,r3
8000af44:	00 9a       	mov	r10,r0
8000af46:	0e 9c       	mov	r12,r7
8000af48:	e0 a0 06 46 	rcall	8000bbd4 <__lshift>
8000af4c:	18 93       	mov	r3,r12
8000af4e:	40 49       	lddsp	r9,sp[0x10]
8000af50:	58 09       	cp.w	r9,0
8000af52:	e0 8a 00 08 	brle	8000af62 <_dtoa_r+0x8ee>
8000af56:	04 9b       	mov	r11,r2
8000af58:	12 9a       	mov	r10,r9
8000af5a:	0e 9c       	mov	r12,r7
8000af5c:	e0 a0 06 3c 	rcall	8000bbd4 <__lshift>
8000af60:	18 92       	mov	r2,r12
8000af62:	41 48       	lddsp	r8,sp[0x50]
8000af64:	58 08       	cp.w	r8,0
8000af66:	c1 b0       	breq	8000af9c <_dtoa_r+0x928>
8000af68:	04 9b       	mov	r11,r2
8000af6a:	06 9c       	mov	r12,r3
8000af6c:	e0 a0 05 10 	rcall	8000b98c <__mcmp>
8000af70:	c1 64       	brge	8000af9c <_dtoa_r+0x928>
8000af72:	06 9b       	mov	r11,r3
8000af74:	30 09       	mov	r9,0
8000af76:	30 aa       	mov	r10,10
8000af78:	0e 9c       	mov	r12,r7
8000af7a:	e0 a0 06 f9 	rcall	8000bd6c <__multadd>
8000af7e:	20 16       	sub	r6,1
8000af80:	18 93       	mov	r3,r12
8000af82:	40 dc       	lddsp	r12,sp[0x34]
8000af84:	58 0c       	cp.w	r12,0
8000af86:	c0 31       	brne	8000af8c <_dtoa_r+0x918>
8000af88:	40 91       	lddsp	r1,sp[0x24]
8000af8a:	c0 98       	rjmp	8000af9c <_dtoa_r+0x928>
8000af8c:	08 9b       	mov	r11,r4
8000af8e:	40 91       	lddsp	r1,sp[0x24]
8000af90:	30 09       	mov	r9,0
8000af92:	30 aa       	mov	r10,10
8000af94:	0e 9c       	mov	r12,r7
8000af96:	e0 a0 06 eb 	rcall	8000bd6c <__multadd>
8000af9a:	18 94       	mov	r4,r12
8000af9c:	58 01       	cp.w	r1,0
8000af9e:	5f a9       	srle	r9
8000afa0:	40 cb       	lddsp	r11,sp[0x30]
8000afa2:	58 2b       	cp.w	r11,2
8000afa4:	5f 98       	srgt	r8
8000afa6:	f3 e8 00 08 	and	r8,r9,r8
8000afaa:	c2 50       	breq	8000aff4 <_dtoa_r+0x980>
8000afac:	58 01       	cp.w	r1,0
8000afae:	c1 11       	brne	8000afd0 <_dtoa_r+0x95c>
8000afb0:	04 9b       	mov	r11,r2
8000afb2:	02 99       	mov	r9,r1
8000afb4:	30 5a       	mov	r10,5
8000afb6:	0e 9c       	mov	r12,r7
8000afb8:	e0 a0 06 da 	rcall	8000bd6c <__multadd>
8000afbc:	18 92       	mov	r2,r12
8000afbe:	18 9b       	mov	r11,r12
8000afc0:	06 9c       	mov	r12,r3
8000afc2:	e0 a0 04 e5 	rcall	8000b98c <__mcmp>
8000afc6:	e0 89 00 0f 	brgt	8000afe4 <_dtoa_r+0x970>
8000afca:	c0 38       	rjmp	8000afd0 <_dtoa_r+0x95c>
8000afcc:	30 02       	mov	r2,0
8000afce:	04 94       	mov	r4,r2
8000afd0:	40 ea       	lddsp	r10,sp[0x38]
8000afd2:	30 09       	mov	r9,0
8000afd4:	5c da       	com	r10
8000afd6:	40 85       	lddsp	r5,sp[0x20]
8000afd8:	50 6a       	stdsp	sp[0x18],r10
8000afda:	50 49       	stdsp	sp[0x10],r9
8000afdc:	c0 f9       	rjmp	8000b1fa <_dtoa_r+0xb86>
8000afde:	08 92       	mov	r2,r4
8000afe0:	40 66       	lddsp	r6,sp[0x18]
8000afe2:	04 94       	mov	r4,r2
8000afe4:	2f f6       	sub	r6,-1
8000afe6:	50 66       	stdsp	sp[0x18],r6
8000afe8:	33 18       	mov	r8,49
8000afea:	40 85       	lddsp	r5,sp[0x20]
8000afec:	0a c8       	st.b	r5++,r8
8000afee:	30 08       	mov	r8,0
8000aff0:	50 48       	stdsp	sp[0x10],r8
8000aff2:	c0 49       	rjmp	8000b1fa <_dtoa_r+0xb86>
8000aff4:	40 dc       	lddsp	r12,sp[0x34]
8000aff6:	58 0c       	cp.w	r12,0
8000aff8:	e0 80 00 b5 	breq	8000b162 <_dtoa_r+0xaee>
8000affc:	58 05       	cp.w	r5,0
8000affe:	e0 8a 00 08 	brle	8000b00e <_dtoa_r+0x99a>
8000b002:	08 9b       	mov	r11,r4
8000b004:	0a 9a       	mov	r10,r5
8000b006:	0e 9c       	mov	r12,r7
8000b008:	e0 a0 05 e6 	rcall	8000bbd4 <__lshift>
8000b00c:	18 94       	mov	r4,r12
8000b00e:	40 6b       	lddsp	r11,sp[0x18]
8000b010:	58 0b       	cp.w	r11,0
8000b012:	c0 31       	brne	8000b018 <_dtoa_r+0x9a4>
8000b014:	08 9c       	mov	r12,r4
8000b016:	c1 38       	rjmp	8000b03c <_dtoa_r+0x9c8>
8000b018:	68 1b       	ld.w	r11,r4[0x4]
8000b01a:	0e 9c       	mov	r12,r7
8000b01c:	e0 a0 04 ec 	rcall	8000b9f4 <_Balloc>
8000b020:	68 4a       	ld.w	r10,r4[0x10]
8000b022:	18 95       	mov	r5,r12
8000b024:	e8 cb ff f4 	sub	r11,r4,-12
8000b028:	2f ea       	sub	r10,-2
8000b02a:	2f 4c       	sub	r12,-12
8000b02c:	a3 6a       	lsl	r10,0x2
8000b02e:	fe b0 e6 9f 	rcall	80007d6c <memcpy>
8000b032:	0a 9b       	mov	r11,r5
8000b034:	30 1a       	mov	r10,1
8000b036:	0e 9c       	mov	r12,r7
8000b038:	e0 a0 05 ce 	rcall	8000bbd4 <__lshift>
8000b03c:	50 44       	stdsp	sp[0x10],r4
8000b03e:	40 3a       	lddsp	r10,sp[0xc]
8000b040:	30 19       	mov	r9,1
8000b042:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000b046:	18 94       	mov	r4,r12
8000b048:	50 da       	stdsp	sp[0x34],r10
8000b04a:	40 85       	lddsp	r5,sp[0x20]
8000b04c:	50 99       	stdsp	sp[0x24],r9
8000b04e:	50 26       	stdsp	sp[0x8],r6
8000b050:	50 e1       	stdsp	sp[0x38],r1
8000b052:	04 9b       	mov	r11,r2
8000b054:	06 9c       	mov	r12,r3
8000b056:	fe b0 fa 7f 	rcall	8000a554 <quorem>
8000b05a:	40 4b       	lddsp	r11,sp[0x10]
8000b05c:	f8 c0 ff d0 	sub	r0,r12,-48
8000b060:	06 9c       	mov	r12,r3
8000b062:	e0 a0 04 95 	rcall	8000b98c <__mcmp>
8000b066:	08 9a       	mov	r10,r4
8000b068:	50 6c       	stdsp	sp[0x18],r12
8000b06a:	04 9b       	mov	r11,r2
8000b06c:	0e 9c       	mov	r12,r7
8000b06e:	e0 a0 05 4b 	rcall	8000bb04 <__mdiff>
8000b072:	18 91       	mov	r1,r12
8000b074:	78 38       	ld.w	r8,r12[0xc]
8000b076:	58 08       	cp.w	r8,0
8000b078:	c0 30       	breq	8000b07e <_dtoa_r+0xa0a>
8000b07a:	30 16       	mov	r6,1
8000b07c:	c0 68       	rjmp	8000b088 <_dtoa_r+0xa14>
8000b07e:	18 9b       	mov	r11,r12
8000b080:	06 9c       	mov	r12,r3
8000b082:	e0 a0 04 85 	rcall	8000b98c <__mcmp>
8000b086:	18 96       	mov	r6,r12
8000b088:	0e 9c       	mov	r12,r7
8000b08a:	02 9b       	mov	r11,r1
8000b08c:	e0 a0 04 9a 	rcall	8000b9c0 <_Bfree>
8000b090:	40 cc       	lddsp	r12,sp[0x30]
8000b092:	ed ec 10 08 	or	r8,r6,r12
8000b096:	c0 d1       	brne	8000b0b0 <_dtoa_r+0xa3c>
8000b098:	40 db       	lddsp	r11,sp[0x34]
8000b09a:	58 0b       	cp.w	r11,0
8000b09c:	c0 a1       	brne	8000b0b0 <_dtoa_r+0xa3c>
8000b09e:	40 26       	lddsp	r6,sp[0x8]
8000b0a0:	e0 40 00 39 	cp.w	r0,57
8000b0a4:	c3 00       	breq	8000b104 <_dtoa_r+0xa90>
8000b0a6:	40 6a       	lddsp	r10,sp[0x18]
8000b0a8:	58 0a       	cp.w	r10,0
8000b0aa:	e0 89 00 24 	brgt	8000b0f2 <_dtoa_r+0xa7e>
8000b0ae:	c2 f8       	rjmp	8000b10c <_dtoa_r+0xa98>
8000b0b0:	40 69       	lddsp	r9,sp[0x18]
8000b0b2:	58 09       	cp.w	r9,0
8000b0b4:	c0 85       	brlt	8000b0c4 <_dtoa_r+0xa50>
8000b0b6:	12 98       	mov	r8,r9
8000b0b8:	40 cc       	lddsp	r12,sp[0x30]
8000b0ba:	18 48       	or	r8,r12
8000b0bc:	c1 d1       	brne	8000b0f6 <_dtoa_r+0xa82>
8000b0be:	40 db       	lddsp	r11,sp[0x34]
8000b0c0:	58 0b       	cp.w	r11,0
8000b0c2:	c1 a1       	brne	8000b0f6 <_dtoa_r+0xa82>
8000b0c4:	0c 99       	mov	r9,r6
8000b0c6:	40 26       	lddsp	r6,sp[0x8]
8000b0c8:	58 09       	cp.w	r9,0
8000b0ca:	e0 8a 00 21 	brle	8000b10c <_dtoa_r+0xa98>
8000b0ce:	06 9b       	mov	r11,r3
8000b0d0:	30 1a       	mov	r10,1
8000b0d2:	0e 9c       	mov	r12,r7
8000b0d4:	e0 a0 05 80 	rcall	8000bbd4 <__lshift>
8000b0d8:	04 9b       	mov	r11,r2
8000b0da:	18 93       	mov	r3,r12
8000b0dc:	e0 a0 04 58 	rcall	8000b98c <__mcmp>
8000b0e0:	e0 89 00 06 	brgt	8000b0ec <_dtoa_r+0xa78>
8000b0e4:	c1 41       	brne	8000b10c <_dtoa_r+0xa98>
8000b0e6:	ed b0 00 00 	bld	r0,0x0
8000b0ea:	c1 11       	brne	8000b10c <_dtoa_r+0xa98>
8000b0ec:	e0 40 00 39 	cp.w	r0,57
8000b0f0:	c0 a0       	breq	8000b104 <_dtoa_r+0xa90>
8000b0f2:	2f f0       	sub	r0,-1
8000b0f4:	c0 c8       	rjmp	8000b10c <_dtoa_r+0xa98>
8000b0f6:	58 06       	cp.w	r6,0
8000b0f8:	e0 8a 00 0c 	brle	8000b110 <_dtoa_r+0xa9c>
8000b0fc:	40 26       	lddsp	r6,sp[0x8]
8000b0fe:	e0 40 00 39 	cp.w	r0,57
8000b102:	c0 41       	brne	8000b10a <_dtoa_r+0xa96>
8000b104:	33 98       	mov	r8,57
8000b106:	0a c8       	st.b	r5++,r8
8000b108:	c6 78       	rjmp	8000b1d6 <_dtoa_r+0xb62>
8000b10a:	2f f0       	sub	r0,-1
8000b10c:	0a c0       	st.b	r5++,r0
8000b10e:	c7 58       	rjmp	8000b1f8 <_dtoa_r+0xb84>
8000b110:	0a c0       	st.b	r5++,r0
8000b112:	40 9a       	lddsp	r10,sp[0x24]
8000b114:	40 e9       	lddsp	r9,sp[0x38]
8000b116:	12 3a       	cp.w	r10,r9
8000b118:	c4 30       	breq	8000b19e <_dtoa_r+0xb2a>
8000b11a:	06 9b       	mov	r11,r3
8000b11c:	30 09       	mov	r9,0
8000b11e:	30 aa       	mov	r10,10
8000b120:	0e 9c       	mov	r12,r7
8000b122:	e0 a0 06 25 	rcall	8000bd6c <__multadd>
8000b126:	40 48       	lddsp	r8,sp[0x10]
8000b128:	18 93       	mov	r3,r12
8000b12a:	08 38       	cp.w	r8,r4
8000b12c:	c0 91       	brne	8000b13e <_dtoa_r+0xaca>
8000b12e:	10 9b       	mov	r11,r8
8000b130:	30 09       	mov	r9,0
8000b132:	30 aa       	mov	r10,10
8000b134:	0e 9c       	mov	r12,r7
8000b136:	e0 a0 06 1b 	rcall	8000bd6c <__multadd>
8000b13a:	50 4c       	stdsp	sp[0x10],r12
8000b13c:	c0 e8       	rjmp	8000b158 <_dtoa_r+0xae4>
8000b13e:	40 4b       	lddsp	r11,sp[0x10]
8000b140:	30 09       	mov	r9,0
8000b142:	30 aa       	mov	r10,10
8000b144:	0e 9c       	mov	r12,r7
8000b146:	e0 a0 06 13 	rcall	8000bd6c <__multadd>
8000b14a:	08 9b       	mov	r11,r4
8000b14c:	50 4c       	stdsp	sp[0x10],r12
8000b14e:	30 09       	mov	r9,0
8000b150:	30 aa       	mov	r10,10
8000b152:	0e 9c       	mov	r12,r7
8000b154:	e0 a0 06 0c 	rcall	8000bd6c <__multadd>
8000b158:	18 94       	mov	r4,r12
8000b15a:	40 9c       	lddsp	r12,sp[0x24]
8000b15c:	2f fc       	sub	r12,-1
8000b15e:	50 9c       	stdsp	sp[0x24],r12
8000b160:	c7 9b       	rjmp	8000b052 <_dtoa_r+0x9de>
8000b162:	30 18       	mov	r8,1
8000b164:	06 90       	mov	r0,r3
8000b166:	40 85       	lddsp	r5,sp[0x20]
8000b168:	08 93       	mov	r3,r4
8000b16a:	0c 94       	mov	r4,r6
8000b16c:	10 96       	mov	r6,r8
8000b16e:	04 9b       	mov	r11,r2
8000b170:	00 9c       	mov	r12,r0
8000b172:	fe b0 f9 f1 	rcall	8000a554 <quorem>
8000b176:	2d 0c       	sub	r12,-48
8000b178:	0a cc       	st.b	r5++,r12
8000b17a:	02 36       	cp.w	r6,r1
8000b17c:	c0 a4       	brge	8000b190 <_dtoa_r+0xb1c>
8000b17e:	00 9b       	mov	r11,r0
8000b180:	30 09       	mov	r9,0
8000b182:	30 aa       	mov	r10,10
8000b184:	0e 9c       	mov	r12,r7
8000b186:	2f f6       	sub	r6,-1
8000b188:	e0 a0 05 f2 	rcall	8000bd6c <__multadd>
8000b18c:	18 90       	mov	r0,r12
8000b18e:	cf 0b       	rjmp	8000b16e <_dtoa_r+0xafa>
8000b190:	08 96       	mov	r6,r4
8000b192:	30 0b       	mov	r11,0
8000b194:	06 94       	mov	r4,r3
8000b196:	50 4b       	stdsp	sp[0x10],r11
8000b198:	00 93       	mov	r3,r0
8000b19a:	18 90       	mov	r0,r12
8000b19c:	c0 28       	rjmp	8000b1a0 <_dtoa_r+0xb2c>
8000b19e:	40 26       	lddsp	r6,sp[0x8]
8000b1a0:	06 9b       	mov	r11,r3
8000b1a2:	30 1a       	mov	r10,1
8000b1a4:	0e 9c       	mov	r12,r7
8000b1a6:	e0 a0 05 17 	rcall	8000bbd4 <__lshift>
8000b1aa:	04 9b       	mov	r11,r2
8000b1ac:	18 93       	mov	r3,r12
8000b1ae:	e0 a0 03 ef 	rcall	8000b98c <__mcmp>
8000b1b2:	e0 89 00 12 	brgt	8000b1d6 <_dtoa_r+0xb62>
8000b1b6:	c1 b1       	brne	8000b1ec <_dtoa_r+0xb78>
8000b1b8:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000b1bc:	c0 d1       	brne	8000b1d6 <_dtoa_r+0xb62>
8000b1be:	c1 78       	rjmp	8000b1ec <_dtoa_r+0xb78>
8000b1c0:	40 89       	lddsp	r9,sp[0x20]
8000b1c2:	12 38       	cp.w	r8,r9
8000b1c4:	c0 30       	breq	8000b1ca <_dtoa_r+0xb56>
8000b1c6:	10 95       	mov	r5,r8
8000b1c8:	c0 88       	rjmp	8000b1d8 <_dtoa_r+0xb64>
8000b1ca:	2f f6       	sub	r6,-1
8000b1cc:	50 66       	stdsp	sp[0x18],r6
8000b1ce:	33 18       	mov	r8,49
8000b1d0:	40 8c       	lddsp	r12,sp[0x20]
8000b1d2:	b8 88       	st.b	r12[0x0],r8
8000b1d4:	c1 38       	rjmp	8000b1fa <_dtoa_r+0xb86>
8000b1d6:	33 9a       	mov	r10,57
8000b1d8:	0a 98       	mov	r8,r5
8000b1da:	11 79       	ld.ub	r9,--r8
8000b1dc:	f4 09 18 00 	cp.b	r9,r10
8000b1e0:	cf 00       	breq	8000b1c0 <_dtoa_r+0xb4c>
8000b1e2:	2f f9       	sub	r9,-1
8000b1e4:	b0 89       	st.b	r8[0x0],r9
8000b1e6:	c0 98       	rjmp	8000b1f8 <_dtoa_r+0xb84>
8000b1e8:	10 95       	mov	r5,r8
8000b1ea:	c0 28       	rjmp	8000b1ee <_dtoa_r+0xb7a>
8000b1ec:	33 09       	mov	r9,48
8000b1ee:	0a 98       	mov	r8,r5
8000b1f0:	11 7a       	ld.ub	r10,--r8
8000b1f2:	f2 0a 18 00 	cp.b	r10,r9
8000b1f6:	cf 90       	breq	8000b1e8 <_dtoa_r+0xb74>
8000b1f8:	50 66       	stdsp	sp[0x18],r6
8000b1fa:	04 9b       	mov	r11,r2
8000b1fc:	0e 9c       	mov	r12,r7
8000b1fe:	e0 a0 03 e1 	rcall	8000b9c0 <_Bfree>
8000b202:	58 04       	cp.w	r4,0
8000b204:	c1 20       	breq	8000b228 <_dtoa_r+0xbb4>
8000b206:	40 4b       	lddsp	r11,sp[0x10]
8000b208:	08 3b       	cp.w	r11,r4
8000b20a:	5f 19       	srne	r9
8000b20c:	58 0b       	cp.w	r11,0
8000b20e:	5f 18       	srne	r8
8000b210:	f3 e8 00 08 	and	r8,r9,r8
8000b214:	c0 40       	breq	8000b21c <_dtoa_r+0xba8>
8000b216:	0e 9c       	mov	r12,r7
8000b218:	e0 a0 03 d4 	rcall	8000b9c0 <_Bfree>
8000b21c:	08 9b       	mov	r11,r4
8000b21e:	0e 9c       	mov	r12,r7
8000b220:	e0 a0 03 d0 	rcall	8000b9c0 <_Bfree>
8000b224:	c0 28       	rjmp	8000b228 <_dtoa_r+0xbb4>
8000b226:	50 66       	stdsp	sp[0x18],r6
8000b228:	0e 9c       	mov	r12,r7
8000b22a:	06 9b       	mov	r11,r3
8000b22c:	e0 a0 03 ca 	rcall	8000b9c0 <_Bfree>
8000b230:	30 08       	mov	r8,0
8000b232:	aa 88       	st.b	r5[0x0],r8
8000b234:	40 68       	lddsp	r8,sp[0x18]
8000b236:	41 5a       	lddsp	r10,sp[0x54]
8000b238:	2f f8       	sub	r8,-1
8000b23a:	41 29       	lddsp	r9,sp[0x48]
8000b23c:	95 08       	st.w	r10[0x0],r8
8000b23e:	40 8c       	lddsp	r12,sp[0x20]
8000b240:	58 09       	cp.w	r9,0
8000b242:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000b246:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000b24a:	2e 6d       	sub	sp,-104
8000b24c:	d8 32       	popm	r0-r7,pc
8000b24e:	d7 03       	nop

8000b250 <_fflush_r>:
8000b250:	d4 21       	pushm	r4-r7,lr
8000b252:	16 97       	mov	r7,r11
8000b254:	18 96       	mov	r6,r12
8000b256:	76 48       	ld.w	r8,r11[0x10]
8000b258:	58 08       	cp.w	r8,0
8000b25a:	c7 f0       	breq	8000b358 <_fflush_r+0x108>
8000b25c:	58 0c       	cp.w	r12,0
8000b25e:	c0 50       	breq	8000b268 <_fflush_r+0x18>
8000b260:	78 68       	ld.w	r8,r12[0x18]
8000b262:	58 08       	cp.w	r8,0
8000b264:	c0 21       	brne	8000b268 <_fflush_r+0x18>
8000b266:	cc dc       	rcall	8000b400 <__sinit>
8000b268:	fe c8 d8 84 	sub	r8,pc,-10108
8000b26c:	10 37       	cp.w	r7,r8
8000b26e:	c0 31       	brne	8000b274 <_fflush_r+0x24>
8000b270:	6c 07       	ld.w	r7,r6[0x0]
8000b272:	c0 c8       	rjmp	8000b28a <_fflush_r+0x3a>
8000b274:	fe c8 d8 70 	sub	r8,pc,-10128
8000b278:	10 37       	cp.w	r7,r8
8000b27a:	c0 31       	brne	8000b280 <_fflush_r+0x30>
8000b27c:	6c 17       	ld.w	r7,r6[0x4]
8000b27e:	c0 68       	rjmp	8000b28a <_fflush_r+0x3a>
8000b280:	fe c8 d8 5c 	sub	r8,pc,-10148
8000b284:	10 37       	cp.w	r7,r8
8000b286:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000b28a:	8e 6a       	ld.sh	r10,r7[0xc]
8000b28c:	14 98       	mov	r8,r10
8000b28e:	ed ba 00 03 	bld	r10,0x3
8000b292:	c4 20       	breq	8000b316 <_fflush_r+0xc6>
8000b294:	ab ba       	sbr	r10,0xb
8000b296:	ae 6a       	st.h	r7[0xc],r10
8000b298:	6e 18       	ld.w	r8,r7[0x4]
8000b29a:	58 08       	cp.w	r8,0
8000b29c:	e0 89 00 06 	brgt	8000b2a8 <_fflush_r+0x58>
8000b2a0:	6f 08       	ld.w	r8,r7[0x40]
8000b2a2:	58 08       	cp.w	r8,0
8000b2a4:	e0 8a 00 5a 	brle	8000b358 <_fflush_r+0x108>
8000b2a8:	6e b8       	ld.w	r8,r7[0x2c]
8000b2aa:	58 08       	cp.w	r8,0
8000b2ac:	c5 60       	breq	8000b358 <_fflush_r+0x108>
8000b2ae:	e2 1a 10 00 	andl	r10,0x1000,COH
8000b2b2:	c0 30       	breq	8000b2b8 <_fflush_r+0x68>
8000b2b4:	6f 55       	ld.w	r5,r7[0x54]
8000b2b6:	c0 f8       	rjmp	8000b2d4 <_fflush_r+0x84>
8000b2b8:	30 19       	mov	r9,1
8000b2ba:	6e 8b       	ld.w	r11,r7[0x20]
8000b2bc:	0c 9c       	mov	r12,r6
8000b2be:	5d 18       	icall	r8
8000b2c0:	18 95       	mov	r5,r12
8000b2c2:	5b fc       	cp.w	r12,-1
8000b2c4:	c0 81       	brne	8000b2d4 <_fflush_r+0x84>
8000b2c6:	6c 38       	ld.w	r8,r6[0xc]
8000b2c8:	59 d8       	cp.w	r8,29
8000b2ca:	c4 70       	breq	8000b358 <_fflush_r+0x108>
8000b2cc:	8e 68       	ld.sh	r8,r7[0xc]
8000b2ce:	a7 a8       	sbr	r8,0x6
8000b2d0:	ae 68       	st.h	r7[0xc],r8
8000b2d2:	d8 22       	popm	r4-r7,pc
8000b2d4:	8e 68       	ld.sh	r8,r7[0xc]
8000b2d6:	ed b8 00 02 	bld	r8,0x2
8000b2da:	c0 91       	brne	8000b2ec <_fflush_r+0x9c>
8000b2dc:	6e 18       	ld.w	r8,r7[0x4]
8000b2de:	10 15       	sub	r5,r8
8000b2e0:	6e d8       	ld.w	r8,r7[0x34]
8000b2e2:	58 08       	cp.w	r8,0
8000b2e4:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000b2e8:	eb d8 e1 15 	subne	r5,r5,r8
8000b2ec:	6e b8       	ld.w	r8,r7[0x2c]
8000b2ee:	0c 9c       	mov	r12,r6
8000b2f0:	30 09       	mov	r9,0
8000b2f2:	0a 9a       	mov	r10,r5
8000b2f4:	6e 8b       	ld.w	r11,r7[0x20]
8000b2f6:	5d 18       	icall	r8
8000b2f8:	8e 68       	ld.sh	r8,r7[0xc]
8000b2fa:	0a 3c       	cp.w	r12,r5
8000b2fc:	c2 61       	brne	8000b348 <_fflush_r+0xf8>
8000b2fe:	ab d8       	cbr	r8,0xb
8000b300:	30 0c       	mov	r12,0
8000b302:	6e 49       	ld.w	r9,r7[0x10]
8000b304:	ae 68       	st.h	r7[0xc],r8
8000b306:	8f 1c       	st.w	r7[0x4],r12
8000b308:	8f 09       	st.w	r7[0x0],r9
8000b30a:	ed b8 00 0c 	bld	r8,0xc
8000b30e:	c2 51       	brne	8000b358 <_fflush_r+0x108>
8000b310:	ef 45 00 54 	st.w	r7[84],r5
8000b314:	d8 22       	popm	r4-r7,pc
8000b316:	6e 45       	ld.w	r5,r7[0x10]
8000b318:	58 05       	cp.w	r5,0
8000b31a:	c1 f0       	breq	8000b358 <_fflush_r+0x108>
8000b31c:	6e 04       	ld.w	r4,r7[0x0]
8000b31e:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000b322:	8f 05       	st.w	r7[0x0],r5
8000b324:	f9 b8 01 00 	movne	r8,0
8000b328:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000b32c:	0a 14       	sub	r4,r5
8000b32e:	8f 28       	st.w	r7[0x8],r8
8000b330:	c1 18       	rjmp	8000b352 <_fflush_r+0x102>
8000b332:	08 99       	mov	r9,r4
8000b334:	0a 9a       	mov	r10,r5
8000b336:	6e a8       	ld.w	r8,r7[0x28]
8000b338:	6e 8b       	ld.w	r11,r7[0x20]
8000b33a:	0c 9c       	mov	r12,r6
8000b33c:	5d 18       	icall	r8
8000b33e:	18 14       	sub	r4,r12
8000b340:	58 0c       	cp.w	r12,0
8000b342:	e0 89 00 07 	brgt	8000b350 <_fflush_r+0x100>
8000b346:	8e 68       	ld.sh	r8,r7[0xc]
8000b348:	a7 a8       	sbr	r8,0x6
8000b34a:	3f fc       	mov	r12,-1
8000b34c:	ae 68       	st.h	r7[0xc],r8
8000b34e:	d8 22       	popm	r4-r7,pc
8000b350:	18 05       	add	r5,r12
8000b352:	58 04       	cp.w	r4,0
8000b354:	fe 99 ff ef 	brgt	8000b332 <_fflush_r+0xe2>
8000b358:	d8 2a       	popm	r4-r7,pc,r12=0
8000b35a:	d7 03       	nop

8000b35c <__sfp_lock_acquire>:
8000b35c:	5e fc       	retal	r12

8000b35e <__sfp_lock_release>:
8000b35e:	5e fc       	retal	r12

8000b360 <_cleanup_r>:
8000b360:	d4 01       	pushm	lr
8000b362:	fe cb f0 06 	sub	r11,pc,-4090
8000b366:	ce 5d       	rcall	8000b730 <_fwalk>
8000b368:	d8 02       	popm	pc
8000b36a:	d7 03       	nop

8000b36c <__sfmoreglue>:
8000b36c:	d4 21       	pushm	r4-r7,lr
8000b36e:	16 95       	mov	r5,r11
8000b370:	f6 06 10 5c 	mul	r6,r11,92
8000b374:	ec cb ff f4 	sub	r11,r6,-12
8000b378:	fe b0 e2 e6 	rcall	80007944 <_malloc_r>
8000b37c:	18 97       	mov	r7,r12
8000b37e:	c0 90       	breq	8000b390 <__sfmoreglue+0x24>
8000b380:	99 15       	st.w	r12[0x4],r5
8000b382:	30 0b       	mov	r11,0
8000b384:	2f 4c       	sub	r12,-12
8000b386:	0c 9a       	mov	r10,r6
8000b388:	8f 2c       	st.w	r7[0x8],r12
8000b38a:	8f 0b       	st.w	r7[0x0],r11
8000b38c:	e0 a0 02 82 	rcall	8000b890 <memset>
8000b390:	0e 9c       	mov	r12,r7
8000b392:	d8 22       	popm	r4-r7,pc

8000b394 <__sfp>:
8000b394:	d4 21       	pushm	r4-r7,lr
8000b396:	fe c8 dd 9a 	sub	r8,pc,-8806
8000b39a:	18 96       	mov	r6,r12
8000b39c:	70 07       	ld.w	r7,r8[0x0]
8000b39e:	6e 68       	ld.w	r8,r7[0x18]
8000b3a0:	58 08       	cp.w	r8,0
8000b3a2:	c0 31       	brne	8000b3a8 <__sfp+0x14>
8000b3a4:	0e 9c       	mov	r12,r7
8000b3a6:	c2 dc       	rcall	8000b400 <__sinit>
8000b3a8:	ee c7 ff 28 	sub	r7,r7,-216
8000b3ac:	30 05       	mov	r5,0
8000b3ae:	6e 2c       	ld.w	r12,r7[0x8]
8000b3b0:	6e 18       	ld.w	r8,r7[0x4]
8000b3b2:	c0 68       	rjmp	8000b3be <__sfp+0x2a>
8000b3b4:	98 69       	ld.sh	r9,r12[0xc]
8000b3b6:	ea 09 19 00 	cp.h	r9,r5
8000b3ba:	c1 10       	breq	8000b3dc <__sfp+0x48>
8000b3bc:	2a 4c       	sub	r12,-92
8000b3be:	20 18       	sub	r8,1
8000b3c0:	cf a7       	brpl	8000b3b4 <__sfp+0x20>
8000b3c2:	6e 08       	ld.w	r8,r7[0x0]
8000b3c4:	58 08       	cp.w	r8,0
8000b3c6:	c0 61       	brne	8000b3d2 <__sfp+0x3e>
8000b3c8:	30 4b       	mov	r11,4
8000b3ca:	0c 9c       	mov	r12,r6
8000b3cc:	cd 0f       	rcall	8000b36c <__sfmoreglue>
8000b3ce:	8f 0c       	st.w	r7[0x0],r12
8000b3d0:	c0 30       	breq	8000b3d6 <__sfp+0x42>
8000b3d2:	6e 07       	ld.w	r7,r7[0x0]
8000b3d4:	ce db       	rjmp	8000b3ae <__sfp+0x1a>
8000b3d6:	30 c8       	mov	r8,12
8000b3d8:	8d 38       	st.w	r6[0xc],r8
8000b3da:	d8 22       	popm	r4-r7,pc
8000b3dc:	30 08       	mov	r8,0
8000b3de:	f9 48 00 4c 	st.w	r12[76],r8
8000b3e2:	99 08       	st.w	r12[0x0],r8
8000b3e4:	99 28       	st.w	r12[0x8],r8
8000b3e6:	99 18       	st.w	r12[0x4],r8
8000b3e8:	99 48       	st.w	r12[0x10],r8
8000b3ea:	99 58       	st.w	r12[0x14],r8
8000b3ec:	99 68       	st.w	r12[0x18],r8
8000b3ee:	99 d8       	st.w	r12[0x34],r8
8000b3f0:	99 e8       	st.w	r12[0x38],r8
8000b3f2:	f9 48 00 48 	st.w	r12[72],r8
8000b3f6:	3f f8       	mov	r8,-1
8000b3f8:	b8 78       	st.h	r12[0xe],r8
8000b3fa:	30 18       	mov	r8,1
8000b3fc:	b8 68       	st.h	r12[0xc],r8
8000b3fe:	d8 22       	popm	r4-r7,pc

8000b400 <__sinit>:
8000b400:	d4 21       	pushm	r4-r7,lr
8000b402:	18 96       	mov	r6,r12
8000b404:	78 67       	ld.w	r7,r12[0x18]
8000b406:	58 07       	cp.w	r7,0
8000b408:	c4 91       	brne	8000b49a <__sinit+0x9a>
8000b40a:	fe c8 00 aa 	sub	r8,pc,170
8000b40e:	30 15       	mov	r5,1
8000b410:	99 a8       	st.w	r12[0x28],r8
8000b412:	f9 47 00 d8 	st.w	r12[216],r7
8000b416:	f9 47 00 dc 	st.w	r12[220],r7
8000b41a:	f9 47 00 e0 	st.w	r12[224],r7
8000b41e:	99 65       	st.w	r12[0x18],r5
8000b420:	cb af       	rcall	8000b394 <__sfp>
8000b422:	8d 0c       	st.w	r6[0x0],r12
8000b424:	0c 9c       	mov	r12,r6
8000b426:	cb 7f       	rcall	8000b394 <__sfp>
8000b428:	8d 1c       	st.w	r6[0x4],r12
8000b42a:	0c 9c       	mov	r12,r6
8000b42c:	cb 4f       	rcall	8000b394 <__sfp>
8000b42e:	6c 09       	ld.w	r9,r6[0x0]
8000b430:	30 48       	mov	r8,4
8000b432:	93 07       	st.w	r9[0x0],r7
8000b434:	b2 68       	st.h	r9[0xc],r8
8000b436:	93 17       	st.w	r9[0x4],r7
8000b438:	93 27       	st.w	r9[0x8],r7
8000b43a:	6c 18       	ld.w	r8,r6[0x4]
8000b43c:	b2 77       	st.h	r9[0xe],r7
8000b43e:	93 47       	st.w	r9[0x10],r7
8000b440:	93 57       	st.w	r9[0x14],r7
8000b442:	93 67       	st.w	r9[0x18],r7
8000b444:	93 89       	st.w	r9[0x20],r9
8000b446:	91 07       	st.w	r8[0x0],r7
8000b448:	91 17       	st.w	r8[0x4],r7
8000b44a:	91 27       	st.w	r8[0x8],r7
8000b44c:	fe ce f2 7c 	sub	lr,pc,-3460
8000b450:	fe cb f2 ac 	sub	r11,pc,-3412
8000b454:	93 9e       	st.w	r9[0x24],lr
8000b456:	93 ab       	st.w	r9[0x28],r11
8000b458:	fe ca f2 d4 	sub	r10,pc,-3372
8000b45c:	fe c4 f2 e0 	sub	r4,pc,-3360
8000b460:	93 ba       	st.w	r9[0x2c],r10
8000b462:	93 c4       	st.w	r9[0x30],r4
8000b464:	30 99       	mov	r9,9
8000b466:	b0 69       	st.h	r8[0xc],r9
8000b468:	b0 75       	st.h	r8[0xe],r5
8000b46a:	91 c4       	st.w	r8[0x30],r4
8000b46c:	91 47       	st.w	r8[0x10],r7
8000b46e:	91 57       	st.w	r8[0x14],r7
8000b470:	91 67       	st.w	r8[0x18],r7
8000b472:	91 88       	st.w	r8[0x20],r8
8000b474:	91 9e       	st.w	r8[0x24],lr
8000b476:	91 ab       	st.w	r8[0x28],r11
8000b478:	91 ba       	st.w	r8[0x2c],r10
8000b47a:	8d 2c       	st.w	r6[0x8],r12
8000b47c:	31 28       	mov	r8,18
8000b47e:	99 07       	st.w	r12[0x0],r7
8000b480:	b8 68       	st.h	r12[0xc],r8
8000b482:	99 17       	st.w	r12[0x4],r7
8000b484:	99 27       	st.w	r12[0x8],r7
8000b486:	30 28       	mov	r8,2
8000b488:	b8 78       	st.h	r12[0xe],r8
8000b48a:	99 c4       	st.w	r12[0x30],r4
8000b48c:	99 67       	st.w	r12[0x18],r7
8000b48e:	99 9e       	st.w	r12[0x24],lr
8000b490:	99 ab       	st.w	r12[0x28],r11
8000b492:	99 ba       	st.w	r12[0x2c],r10
8000b494:	99 47       	st.w	r12[0x10],r7
8000b496:	99 57       	st.w	r12[0x14],r7
8000b498:	99 8c       	st.w	r12[0x20],r12
8000b49a:	d8 22       	popm	r4-r7,pc

8000b49c <__sfvwrite_r>:
8000b49c:	d4 31       	pushm	r0-r7,lr
8000b49e:	20 3d       	sub	sp,12
8000b4a0:	14 94       	mov	r4,r10
8000b4a2:	18 95       	mov	r5,r12
8000b4a4:	16 97       	mov	r7,r11
8000b4a6:	74 28       	ld.w	r8,r10[0x8]
8000b4a8:	58 08       	cp.w	r8,0
8000b4aa:	e0 80 01 40 	breq	8000b72a <__sfvwrite_r+0x28e>
8000b4ae:	96 68       	ld.sh	r8,r11[0xc]
8000b4b0:	ed b8 00 03 	bld	r8,0x3
8000b4b4:	c0 41       	brne	8000b4bc <__sfvwrite_r+0x20>
8000b4b6:	76 48       	ld.w	r8,r11[0x10]
8000b4b8:	58 08       	cp.w	r8,0
8000b4ba:	c0 c1       	brne	8000b4d2 <__sfvwrite_r+0x36>
8000b4bc:	0e 9b       	mov	r11,r7
8000b4be:	0a 9c       	mov	r12,r5
8000b4c0:	fe b0 f7 dc 	rcall	8000a478 <__swsetup_r>
8000b4c4:	c0 70       	breq	8000b4d2 <__sfvwrite_r+0x36>
8000b4c6:	8e 68       	ld.sh	r8,r7[0xc]
8000b4c8:	a7 a8       	sbr	r8,0x6
8000b4ca:	ae 68       	st.h	r7[0xc],r8
8000b4cc:	30 98       	mov	r8,9
8000b4ce:	8b 38       	st.w	r5[0xc],r8
8000b4d0:	c2 b9       	rjmp	8000b726 <__sfvwrite_r+0x28a>
8000b4d2:	8e 63       	ld.sh	r3,r7[0xc]
8000b4d4:	68 00       	ld.w	r0,r4[0x0]
8000b4d6:	06 96       	mov	r6,r3
8000b4d8:	e2 16 00 02 	andl	r6,0x2,COH
8000b4dc:	c2 10       	breq	8000b51e <__sfvwrite_r+0x82>
8000b4de:	30 03       	mov	r3,0
8000b4e0:	e0 62 04 00 	mov	r2,1024
8000b4e4:	06 96       	mov	r6,r3
8000b4e6:	c0 48       	rjmp	8000b4ee <__sfvwrite_r+0x52>
8000b4e8:	60 03       	ld.w	r3,r0[0x0]
8000b4ea:	60 16       	ld.w	r6,r0[0x4]
8000b4ec:	2f 80       	sub	r0,-8
8000b4ee:	58 06       	cp.w	r6,0
8000b4f0:	cf c0       	breq	8000b4e8 <__sfvwrite_r+0x4c>
8000b4f2:	e0 46 04 00 	cp.w	r6,1024
8000b4f6:	ec 09 17 80 	movls	r9,r6
8000b4fa:	e4 09 17 b0 	movhi	r9,r2
8000b4fe:	06 9a       	mov	r10,r3
8000b500:	6e a8       	ld.w	r8,r7[0x28]
8000b502:	6e 8b       	ld.w	r11,r7[0x20]
8000b504:	0a 9c       	mov	r12,r5
8000b506:	5d 18       	icall	r8
8000b508:	18 16       	sub	r6,r12
8000b50a:	58 0c       	cp.w	r12,0
8000b50c:	e0 8a 01 0a 	brle	8000b720 <__sfvwrite_r+0x284>
8000b510:	68 28       	ld.w	r8,r4[0x8]
8000b512:	18 18       	sub	r8,r12
8000b514:	89 28       	st.w	r4[0x8],r8
8000b516:	e0 80 01 0a 	breq	8000b72a <__sfvwrite_r+0x28e>
8000b51a:	18 03       	add	r3,r12
8000b51c:	ce 9b       	rjmp	8000b4ee <__sfvwrite_r+0x52>
8000b51e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000b522:	c0 70       	breq	8000b530 <__sfvwrite_r+0x94>
8000b524:	50 06       	stdsp	sp[0x0],r6
8000b526:	0c 93       	mov	r3,r6
8000b528:	0c 91       	mov	r1,r6
8000b52a:	50 15       	stdsp	sp[0x4],r5
8000b52c:	08 92       	mov	r2,r4
8000b52e:	c9 c8       	rjmp	8000b666 <__sfvwrite_r+0x1ca>
8000b530:	06 96       	mov	r6,r3
8000b532:	08 91       	mov	r1,r4
8000b534:	c0 48       	rjmp	8000b53c <__sfvwrite_r+0xa0>
8000b536:	60 03       	ld.w	r3,r0[0x0]
8000b538:	60 16       	ld.w	r6,r0[0x4]
8000b53a:	2f 80       	sub	r0,-8
8000b53c:	58 06       	cp.w	r6,0
8000b53e:	cf c0       	breq	8000b536 <__sfvwrite_r+0x9a>
8000b540:	8e 68       	ld.sh	r8,r7[0xc]
8000b542:	6e 24       	ld.w	r4,r7[0x8]
8000b544:	10 99       	mov	r9,r8
8000b546:	e2 19 02 00 	andl	r9,0x200,COH
8000b54a:	c5 60       	breq	8000b5f6 <__sfvwrite_r+0x15a>
8000b54c:	08 36       	cp.w	r6,r4
8000b54e:	c4 53       	brcs	8000b5d8 <__sfvwrite_r+0x13c>
8000b550:	10 99       	mov	r9,r8
8000b552:	e2 19 04 80 	andl	r9,0x480,COH
8000b556:	c4 10       	breq	8000b5d8 <__sfvwrite_r+0x13c>
8000b558:	6e 4b       	ld.w	r11,r7[0x10]
8000b55a:	6e 09       	ld.w	r9,r7[0x0]
8000b55c:	16 19       	sub	r9,r11
8000b55e:	50 09       	stdsp	sp[0x0],r9
8000b560:	6e 59       	ld.w	r9,r7[0x14]
8000b562:	10 9c       	mov	r12,r8
8000b564:	f2 09 00 1a 	add	r10,r9,r9<<0x1
8000b568:	30 28       	mov	r8,2
8000b56a:	f4 08 0c 08 	divs	r8,r10,r8
8000b56e:	fa e9 00 04 	st.d	sp[4],r8
8000b572:	10 94       	mov	r4,r8
8000b574:	40 09       	lddsp	r9,sp[0x0]
8000b576:	e2 1c 04 00 	andl	r12,0x400,COH
8000b57a:	2f f9       	sub	r9,-1
8000b57c:	0c 09       	add	r9,r6
8000b57e:	12 38       	cp.w	r8,r9
8000b580:	f2 04 17 30 	movlo	r4,r9
8000b584:	58 0c       	cp.w	r12,0
8000b586:	c1 10       	breq	8000b5a8 <__sfvwrite_r+0x10c>
8000b588:	08 9b       	mov	r11,r4
8000b58a:	0a 9c       	mov	r12,r5
8000b58c:	fe b0 e1 dc 	rcall	80007944 <_malloc_r>
8000b590:	18 92       	mov	r2,r12
8000b592:	c1 50       	breq	8000b5bc <__sfvwrite_r+0x120>
8000b594:	40 0a       	lddsp	r10,sp[0x0]
8000b596:	6e 4b       	ld.w	r11,r7[0x10]
8000b598:	fe b0 e3 ea 	rcall	80007d6c <memcpy>
8000b59c:	8e 68       	ld.sh	r8,r7[0xc]
8000b59e:	e0 18 fb 7f 	andl	r8,0xfb7f
8000b5a2:	a7 b8       	sbr	r8,0x7
8000b5a4:	ae 68       	st.h	r7[0xc],r8
8000b5a6:	c0 e8       	rjmp	8000b5c2 <__sfvwrite_r+0x126>
8000b5a8:	08 9a       	mov	r10,r4
8000b5aa:	0a 9c       	mov	r12,r5
8000b5ac:	e0 a0 04 64 	rcall	8000be74 <_realloc_r>
8000b5b0:	18 92       	mov	r2,r12
8000b5b2:	c0 81       	brne	8000b5c2 <__sfvwrite_r+0x126>
8000b5b4:	6e 4b       	ld.w	r11,r7[0x10]
8000b5b6:	0a 9c       	mov	r12,r5
8000b5b8:	fe b0 e5 7c 	rcall	800080b0 <_free_r>
8000b5bc:	30 c8       	mov	r8,12
8000b5be:	8b 38       	st.w	r5[0xc],r8
8000b5c0:	cb 08       	rjmp	8000b720 <__sfvwrite_r+0x284>
8000b5c2:	40 0a       	lddsp	r10,sp[0x0]
8000b5c4:	40 09       	lddsp	r9,sp[0x0]
8000b5c6:	e8 0a 01 0a 	sub	r10,r4,r10
8000b5ca:	e4 09 00 08 	add	r8,r2,r9
8000b5ce:	8f 54       	st.w	r7[0x14],r4
8000b5d0:	8f 2a       	st.w	r7[0x8],r10
8000b5d2:	8f 08       	st.w	r7[0x0],r8
8000b5d4:	8f 42       	st.w	r7[0x10],r2
8000b5d6:	0c 94       	mov	r4,r6
8000b5d8:	08 36       	cp.w	r6,r4
8000b5da:	ec 04 17 30 	movlo	r4,r6
8000b5de:	06 9b       	mov	r11,r3
8000b5e0:	08 9a       	mov	r10,r4
8000b5e2:	6e 0c       	ld.w	r12,r7[0x0]
8000b5e4:	c3 7d       	rcall	8000b852 <memmove>
8000b5e6:	6e 08       	ld.w	r8,r7[0x0]
8000b5e8:	08 08       	add	r8,r4
8000b5ea:	8f 08       	st.w	r7[0x0],r8
8000b5ec:	6e 28       	ld.w	r8,r7[0x8]
8000b5ee:	08 18       	sub	r8,r4
8000b5f0:	0c 94       	mov	r4,r6
8000b5f2:	8f 28       	st.w	r7[0x8],r8
8000b5f4:	c2 d8       	rjmp	8000b64e <__sfvwrite_r+0x1b2>
8000b5f6:	08 36       	cp.w	r6,r4
8000b5f8:	5f ba       	srhi	r10
8000b5fa:	6e 0c       	ld.w	r12,r7[0x0]
8000b5fc:	6e 48       	ld.w	r8,r7[0x10]
8000b5fe:	10 3c       	cp.w	r12,r8
8000b600:	5f b8       	srhi	r8
8000b602:	f5 e8 00 08 	and	r8,r10,r8
8000b606:	f2 08 18 00 	cp.b	r8,r9
8000b60a:	c0 c0       	breq	8000b622 <__sfvwrite_r+0x186>
8000b60c:	06 9b       	mov	r11,r3
8000b60e:	08 9a       	mov	r10,r4
8000b610:	c2 1d       	rcall	8000b852 <memmove>
8000b612:	6e 08       	ld.w	r8,r7[0x0]
8000b614:	08 08       	add	r8,r4
8000b616:	0e 9b       	mov	r11,r7
8000b618:	8f 08       	st.w	r7[0x0],r8
8000b61a:	0a 9c       	mov	r12,r5
8000b61c:	c1 ae       	rcall	8000b250 <_fflush_r>
8000b61e:	c1 80       	breq	8000b64e <__sfvwrite_r+0x1b2>
8000b620:	c8 08       	rjmp	8000b720 <__sfvwrite_r+0x284>
8000b622:	6e 59       	ld.w	r9,r7[0x14]
8000b624:	12 36       	cp.w	r6,r9
8000b626:	c0 a3       	brcs	8000b63a <__sfvwrite_r+0x19e>
8000b628:	6e a8       	ld.w	r8,r7[0x28]
8000b62a:	06 9a       	mov	r10,r3
8000b62c:	6e 8b       	ld.w	r11,r7[0x20]
8000b62e:	0a 9c       	mov	r12,r5
8000b630:	5d 18       	icall	r8
8000b632:	18 94       	mov	r4,r12
8000b634:	e0 89 00 0d 	brgt	8000b64e <__sfvwrite_r+0x1b2>
8000b638:	c7 48       	rjmp	8000b720 <__sfvwrite_r+0x284>
8000b63a:	0c 9a       	mov	r10,r6
8000b63c:	06 9b       	mov	r11,r3
8000b63e:	c0 ad       	rcall	8000b852 <memmove>
8000b640:	6e 08       	ld.w	r8,r7[0x0]
8000b642:	0c 08       	add	r8,r6
8000b644:	0c 94       	mov	r4,r6
8000b646:	8f 08       	st.w	r7[0x0],r8
8000b648:	6e 28       	ld.w	r8,r7[0x8]
8000b64a:	0c 18       	sub	r8,r6
8000b64c:	8f 28       	st.w	r7[0x8],r8
8000b64e:	62 28       	ld.w	r8,r1[0x8]
8000b650:	08 18       	sub	r8,r4
8000b652:	83 28       	st.w	r1[0x8],r8
8000b654:	c6 b0       	breq	8000b72a <__sfvwrite_r+0x28e>
8000b656:	08 16       	sub	r6,r4
8000b658:	08 03       	add	r3,r4
8000b65a:	c7 1b       	rjmp	8000b53c <__sfvwrite_r+0xa0>
8000b65c:	60 03       	ld.w	r3,r0[0x0]
8000b65e:	60 11       	ld.w	r1,r0[0x4]
8000b660:	30 08       	mov	r8,0
8000b662:	2f 80       	sub	r0,-8
8000b664:	50 08       	stdsp	sp[0x0],r8
8000b666:	58 01       	cp.w	r1,0
8000b668:	cf a0       	breq	8000b65c <__sfvwrite_r+0x1c0>
8000b66a:	40 0a       	lddsp	r10,sp[0x0]
8000b66c:	58 0a       	cp.w	r10,0
8000b66e:	c1 41       	brne	8000b696 <__sfvwrite_r+0x1fa>
8000b670:	e2 c6 ff ff 	sub	r6,r1,-1
8000b674:	02 9a       	mov	r10,r1
8000b676:	30 ab       	mov	r11,10
8000b678:	06 9c       	mov	r12,r3
8000b67a:	ce 1c       	rcall	8000b83c <memchr>
8000b67c:	f8 c8 ff ff 	sub	r8,r12,-1
8000b680:	58 0c       	cp.w	r12,0
8000b682:	f1 d3 e1 16 	subne	r6,r8,r3
8000b686:	f9 b9 01 01 	movne	r9,1
8000b68a:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000b68e:	f9 b8 00 01 	moveq	r8,1
8000b692:	fb f8 0a 00 	st.weq	sp[0x0],r8
8000b696:	02 36       	cp.w	r6,r1
8000b698:	ec 04 17 80 	movls	r4,r6
8000b69c:	e2 04 17 b0 	movhi	r4,r1
8000b6a0:	6e 59       	ld.w	r9,r7[0x14]
8000b6a2:	6e 25       	ld.w	r5,r7[0x8]
8000b6a4:	f2 05 00 05 	add	r5,r9,r5
8000b6a8:	0a 34       	cp.w	r4,r5
8000b6aa:	5f 9a       	srgt	r10
8000b6ac:	6e 0c       	ld.w	r12,r7[0x0]
8000b6ae:	6e 48       	ld.w	r8,r7[0x10]
8000b6b0:	10 3c       	cp.w	r12,r8
8000b6b2:	5f b8       	srhi	r8
8000b6b4:	f5 e8 00 08 	and	r8,r10,r8
8000b6b8:	30 0a       	mov	r10,0
8000b6ba:	f4 08 18 00 	cp.b	r8,r10
8000b6be:	c0 d0       	breq	8000b6d8 <__sfvwrite_r+0x23c>
8000b6c0:	06 9b       	mov	r11,r3
8000b6c2:	0a 9a       	mov	r10,r5
8000b6c4:	cc 7c       	rcall	8000b852 <memmove>
8000b6c6:	6e 08       	ld.w	r8,r7[0x0]
8000b6c8:	0a 08       	add	r8,r5
8000b6ca:	0e 9b       	mov	r11,r7
8000b6cc:	8f 08       	st.w	r7[0x0],r8
8000b6ce:	40 1c       	lddsp	r12,sp[0x4]
8000b6d0:	fe b0 fd c0 	rcall	8000b250 <_fflush_r>
8000b6d4:	c1 70       	breq	8000b702 <__sfvwrite_r+0x266>
8000b6d6:	c2 58       	rjmp	8000b720 <__sfvwrite_r+0x284>
8000b6d8:	12 34       	cp.w	r4,r9
8000b6da:	c0 a5       	brlt	8000b6ee <__sfvwrite_r+0x252>
8000b6dc:	6e a8       	ld.w	r8,r7[0x28]
8000b6de:	06 9a       	mov	r10,r3
8000b6e0:	6e 8b       	ld.w	r11,r7[0x20]
8000b6e2:	40 1c       	lddsp	r12,sp[0x4]
8000b6e4:	5d 18       	icall	r8
8000b6e6:	18 95       	mov	r5,r12
8000b6e8:	e0 89 00 0d 	brgt	8000b702 <__sfvwrite_r+0x266>
8000b6ec:	c1 a8       	rjmp	8000b720 <__sfvwrite_r+0x284>
8000b6ee:	08 9a       	mov	r10,r4
8000b6f0:	06 9b       	mov	r11,r3
8000b6f2:	cb 0c       	rcall	8000b852 <memmove>
8000b6f4:	6e 08       	ld.w	r8,r7[0x0]
8000b6f6:	08 08       	add	r8,r4
8000b6f8:	08 95       	mov	r5,r4
8000b6fa:	8f 08       	st.w	r7[0x0],r8
8000b6fc:	6e 28       	ld.w	r8,r7[0x8]
8000b6fe:	08 18       	sub	r8,r4
8000b700:	8f 28       	st.w	r7[0x8],r8
8000b702:	0a 16       	sub	r6,r5
8000b704:	c0 71       	brne	8000b712 <__sfvwrite_r+0x276>
8000b706:	0e 9b       	mov	r11,r7
8000b708:	40 1c       	lddsp	r12,sp[0x4]
8000b70a:	fe b0 fd a3 	rcall	8000b250 <_fflush_r>
8000b70e:	c0 91       	brne	8000b720 <__sfvwrite_r+0x284>
8000b710:	50 06       	stdsp	sp[0x0],r6
8000b712:	64 28       	ld.w	r8,r2[0x8]
8000b714:	0a 18       	sub	r8,r5
8000b716:	85 28       	st.w	r2[0x8],r8
8000b718:	c0 90       	breq	8000b72a <__sfvwrite_r+0x28e>
8000b71a:	0a 11       	sub	r1,r5
8000b71c:	0a 03       	add	r3,r5
8000b71e:	ca 4b       	rjmp	8000b666 <__sfvwrite_r+0x1ca>
8000b720:	8e 68       	ld.sh	r8,r7[0xc]
8000b722:	a7 a8       	sbr	r8,0x6
8000b724:	ae 68       	st.h	r7[0xc],r8
8000b726:	3f fc       	mov	r12,-1
8000b728:	c0 28       	rjmp	8000b72c <__sfvwrite_r+0x290>
8000b72a:	30 0c       	mov	r12,0
8000b72c:	2f dd       	sub	sp,-12
8000b72e:	d8 32       	popm	r0-r7,pc

8000b730 <_fwalk>:
8000b730:	d4 31       	pushm	r0-r7,lr
8000b732:	30 05       	mov	r5,0
8000b734:	16 91       	mov	r1,r11
8000b736:	f8 c7 ff 28 	sub	r7,r12,-216
8000b73a:	0a 92       	mov	r2,r5
8000b73c:	c1 0e       	rcall	8000b35c <__sfp_lock_acquire>
8000b73e:	3f f3       	mov	r3,-1
8000b740:	c1 68       	rjmp	8000b76c <_fwalk+0x3c>
8000b742:	6e 26       	ld.w	r6,r7[0x8]
8000b744:	6e 14       	ld.w	r4,r7[0x4]
8000b746:	2f 46       	sub	r6,-12
8000b748:	c0 c8       	rjmp	8000b760 <_fwalk+0x30>
8000b74a:	8c 08       	ld.sh	r8,r6[0x0]
8000b74c:	e4 08 19 00 	cp.h	r8,r2
8000b750:	c0 70       	breq	8000b75e <_fwalk+0x2e>
8000b752:	8c 18       	ld.sh	r8,r6[0x2]
8000b754:	e6 08 19 00 	cp.h	r8,r3
8000b758:	c0 30       	breq	8000b75e <_fwalk+0x2e>
8000b75a:	5d 11       	icall	r1
8000b75c:	18 45       	or	r5,r12
8000b75e:	2a 46       	sub	r6,-92
8000b760:	20 14       	sub	r4,1
8000b762:	ec cc 00 0c 	sub	r12,r6,12
8000b766:	58 04       	cp.w	r4,0
8000b768:	cf 14       	brge	8000b74a <_fwalk+0x1a>
8000b76a:	6e 07       	ld.w	r7,r7[0x0]
8000b76c:	58 07       	cp.w	r7,0
8000b76e:	ce a1       	brne	8000b742 <_fwalk+0x12>
8000b770:	fe b0 fd f7 	rcall	8000b35e <__sfp_lock_release>
8000b774:	0a 9c       	mov	r12,r5
8000b776:	d8 32       	popm	r0-r7,pc

8000b778 <_localeconv_r>:
8000b778:	fe cc dd 34 	sub	r12,pc,-8908
8000b77c:	5e fc       	retal	r12
8000b77e:	d7 03       	nop

8000b780 <__smakebuf_r>:
8000b780:	d4 21       	pushm	r4-r7,lr
8000b782:	20 fd       	sub	sp,60
8000b784:	96 68       	ld.sh	r8,r11[0xc]
8000b786:	16 97       	mov	r7,r11
8000b788:	18 96       	mov	r6,r12
8000b78a:	e2 18 00 02 	andl	r8,0x2,COH
8000b78e:	c3 d1       	brne	8000b808 <__smakebuf_r+0x88>
8000b790:	96 7b       	ld.sh	r11,r11[0xe]
8000b792:	f0 0b 19 00 	cp.h	r11,r8
8000b796:	c0 55       	brlt	8000b7a0 <__smakebuf_r+0x20>
8000b798:	1a 9a       	mov	r10,sp
8000b79a:	e0 a0 05 e9 	rcall	8000c36c <_fstat_r>
8000b79e:	c0 f4       	brge	8000b7bc <__smakebuf_r+0x3c>
8000b7a0:	8e 65       	ld.sh	r5,r7[0xc]
8000b7a2:	0a 98       	mov	r8,r5
8000b7a4:	ab b8       	sbr	r8,0xb
8000b7a6:	e2 15 00 80 	andl	r5,0x80,COH
8000b7aa:	ae 68       	st.h	r7[0xc],r8
8000b7ac:	30 04       	mov	r4,0
8000b7ae:	e0 68 04 00 	mov	r8,1024
8000b7b2:	f9 b5 01 40 	movne	r5,64
8000b7b6:	f0 05 17 00 	moveq	r5,r8
8000b7ba:	c1 c8       	rjmp	8000b7f2 <__smakebuf_r+0x72>
8000b7bc:	40 18       	lddsp	r8,sp[0x4]
8000b7be:	e2 18 f0 00 	andl	r8,0xf000,COH
8000b7c2:	e0 48 20 00 	cp.w	r8,8192
8000b7c6:	5f 04       	sreq	r4
8000b7c8:	e0 48 80 00 	cp.w	r8,32768
8000b7cc:	c0 e1       	brne	8000b7e8 <__smakebuf_r+0x68>
8000b7ce:	6e b9       	ld.w	r9,r7[0x2c]
8000b7d0:	fe c8 f6 4c 	sub	r8,pc,-2484
8000b7d4:	10 39       	cp.w	r9,r8
8000b7d6:	c0 91       	brne	8000b7e8 <__smakebuf_r+0x68>
8000b7d8:	8e 68       	ld.sh	r8,r7[0xc]
8000b7da:	e0 65 04 00 	mov	r5,1024
8000b7de:	ab a8       	sbr	r8,0xa
8000b7e0:	ef 45 00 50 	st.w	r7[80],r5
8000b7e4:	ae 68       	st.h	r7[0xc],r8
8000b7e6:	c0 68       	rjmp	8000b7f2 <__smakebuf_r+0x72>
8000b7e8:	8e 68       	ld.sh	r8,r7[0xc]
8000b7ea:	e0 65 04 00 	mov	r5,1024
8000b7ee:	ab b8       	sbr	r8,0xb
8000b7f0:	ae 68       	st.h	r7[0xc],r8
8000b7f2:	0a 9b       	mov	r11,r5
8000b7f4:	0c 9c       	mov	r12,r6
8000b7f6:	fe b0 e0 a7 	rcall	80007944 <_malloc_r>
8000b7fa:	8e 68       	ld.sh	r8,r7[0xc]
8000b7fc:	c0 d1       	brne	8000b816 <__smakebuf_r+0x96>
8000b7fe:	ed b8 00 09 	bld	r8,0x9
8000b802:	c1 b0       	breq	8000b838 <__smakebuf_r+0xb8>
8000b804:	a1 b8       	sbr	r8,0x1
8000b806:	ae 68       	st.h	r7[0xc],r8
8000b808:	ee c8 ff b9 	sub	r8,r7,-71
8000b80c:	8f 48       	st.w	r7[0x10],r8
8000b80e:	8f 08       	st.w	r7[0x0],r8
8000b810:	30 18       	mov	r8,1
8000b812:	8f 58       	st.w	r7[0x14],r8
8000b814:	c1 28       	rjmp	8000b838 <__smakebuf_r+0xb8>
8000b816:	a7 b8       	sbr	r8,0x7
8000b818:	8f 4c       	st.w	r7[0x10],r12
8000b81a:	ae 68       	st.h	r7[0xc],r8
8000b81c:	8f 55       	st.w	r7[0x14],r5
8000b81e:	fe c8 04 be 	sub	r8,pc,1214
8000b822:	8f 0c       	st.w	r7[0x0],r12
8000b824:	8d a8       	st.w	r6[0x28],r8
8000b826:	58 04       	cp.w	r4,0
8000b828:	c0 80       	breq	8000b838 <__smakebuf_r+0xb8>
8000b82a:	8e 7c       	ld.sh	r12,r7[0xe]
8000b82c:	fe b0 e3 7e 	rcall	80007f28 <isatty>
8000b830:	c0 40       	breq	8000b838 <__smakebuf_r+0xb8>
8000b832:	8e 68       	ld.sh	r8,r7[0xc]
8000b834:	a1 a8       	sbr	r8,0x0
8000b836:	ae 68       	st.h	r7[0xc],r8
8000b838:	2f 1d       	sub	sp,-60
8000b83a:	d8 22       	popm	r4-r7,pc

8000b83c <memchr>:
8000b83c:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000b840:	c0 68       	rjmp	8000b84c <memchr+0x10>
8000b842:	20 1a       	sub	r10,1
8000b844:	19 88       	ld.ub	r8,r12[0x0]
8000b846:	16 38       	cp.w	r8,r11
8000b848:	5e 0c       	reteq	r12
8000b84a:	2f fc       	sub	r12,-1
8000b84c:	58 0a       	cp.w	r10,0
8000b84e:	cf a1       	brne	8000b842 <memchr+0x6>
8000b850:	5e fa       	retal	r10

8000b852 <memmove>:
8000b852:	d4 01       	pushm	lr
8000b854:	18 3b       	cp.w	r11,r12
8000b856:	c1 92       	brcc	8000b888 <memmove+0x36>
8000b858:	f6 0a 00 09 	add	r9,r11,r10
8000b85c:	12 3c       	cp.w	r12,r9
8000b85e:	c1 52       	brcc	8000b888 <memmove+0x36>
8000b860:	f8 0a 00 0b 	add	r11,r12,r10
8000b864:	30 08       	mov	r8,0
8000b866:	c0 68       	rjmp	8000b872 <memmove+0x20>
8000b868:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000b86c:	20 1a       	sub	r10,1
8000b86e:	f6 08 0b 0e 	st.b	r11[r8],lr
8000b872:	20 18       	sub	r8,1
8000b874:	58 0a       	cp.w	r10,0
8000b876:	cf 91       	brne	8000b868 <memmove+0x16>
8000b878:	d8 02       	popm	pc
8000b87a:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000b87e:	20 1a       	sub	r10,1
8000b880:	f8 08 0b 09 	st.b	r12[r8],r9
8000b884:	2f f8       	sub	r8,-1
8000b886:	c0 28       	rjmp	8000b88a <memmove+0x38>
8000b888:	30 08       	mov	r8,0
8000b88a:	58 0a       	cp.w	r10,0
8000b88c:	cf 71       	brne	8000b87a <memmove+0x28>
8000b88e:	d8 02       	popm	pc

8000b890 <memset>:
8000b890:	18 98       	mov	r8,r12
8000b892:	c0 38       	rjmp	8000b898 <memset+0x8>
8000b894:	10 cb       	st.b	r8++,r11
8000b896:	20 1a       	sub	r10,1
8000b898:	58 0a       	cp.w	r10,0
8000b89a:	cf d1       	brne	8000b894 <memset+0x4>
8000b89c:	5e fc       	retal	r12

8000b89e <__hi0bits>:
8000b89e:	18 98       	mov	r8,r12
8000b8a0:	e0 1c 00 00 	andl	r12,0x0
8000b8a4:	f0 09 15 10 	lsl	r9,r8,0x10
8000b8a8:	58 0c       	cp.w	r12,0
8000b8aa:	f2 08 17 00 	moveq	r8,r9
8000b8ae:	f9 bc 00 10 	moveq	r12,16
8000b8b2:	f9 bc 01 00 	movne	r12,0
8000b8b6:	10 9a       	mov	r10,r8
8000b8b8:	f0 09 15 08 	lsl	r9,r8,0x8
8000b8bc:	e6 1a ff 00 	andh	r10,0xff00,COH
8000b8c0:	f7 bc 00 f8 	subeq	r12,-8
8000b8c4:	f2 08 17 00 	moveq	r8,r9
8000b8c8:	10 9a       	mov	r10,r8
8000b8ca:	f0 09 15 04 	lsl	r9,r8,0x4
8000b8ce:	e6 1a f0 00 	andh	r10,0xf000,COH
8000b8d2:	f7 bc 00 fc 	subeq	r12,-4
8000b8d6:	f2 08 17 00 	moveq	r8,r9
8000b8da:	10 9a       	mov	r10,r8
8000b8dc:	f0 09 15 02 	lsl	r9,r8,0x2
8000b8e0:	e6 1a c0 00 	andh	r10,0xc000,COH
8000b8e4:	f7 bc 00 fe 	subeq	r12,-2
8000b8e8:	f2 08 17 00 	moveq	r8,r9
8000b8ec:	58 08       	cp.w	r8,0
8000b8ee:	5e 5c       	retlt	r12
8000b8f0:	ed b8 00 1e 	bld	r8,0x1e
8000b8f4:	f9 bc 01 20 	movne	r12,32
8000b8f8:	f7 bc 00 ff 	subeq	r12,-1
8000b8fc:	5e fc       	retal	r12

8000b8fe <__lo0bits>:
8000b8fe:	18 99       	mov	r9,r12
8000b900:	78 08       	ld.w	r8,r12[0x0]
8000b902:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000b906:	c1 50       	breq	8000b930 <__lo0bits+0x32>
8000b908:	ed b8 00 00 	bld	r8,0x0
8000b90c:	c0 21       	brne	8000b910 <__lo0bits+0x12>
8000b90e:	5e fd       	retal	0
8000b910:	10 9b       	mov	r11,r8
8000b912:	f0 0a 16 01 	lsr	r10,r8,0x1
8000b916:	e2 1b 00 02 	andl	r11,0x2,COH
8000b91a:	a3 88       	lsr	r8,0x2
8000b91c:	58 0b       	cp.w	r11,0
8000b91e:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000b922:	f9 bc 01 01 	movne	r12,1
8000b926:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000b92a:	f9 bc 00 02 	moveq	r12,2
8000b92e:	5e fc       	retal	r12
8000b930:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000b934:	f0 0b 16 10 	lsr	r11,r8,0x10
8000b938:	58 0a       	cp.w	r10,0
8000b93a:	f6 08 17 00 	moveq	r8,r11
8000b93e:	f9 bc 00 10 	moveq	r12,16
8000b942:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000b946:	f0 0a 16 08 	lsr	r10,r8,0x8
8000b94a:	58 0b       	cp.w	r11,0
8000b94c:	f7 bc 00 f8 	subeq	r12,-8
8000b950:	f4 08 17 00 	moveq	r8,r10
8000b954:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000b958:	f0 0a 16 04 	lsr	r10,r8,0x4
8000b95c:	58 0b       	cp.w	r11,0
8000b95e:	f7 bc 00 fc 	subeq	r12,-4
8000b962:	f4 08 17 00 	moveq	r8,r10
8000b966:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000b96a:	f0 0a 16 02 	lsr	r10,r8,0x2
8000b96e:	58 0b       	cp.w	r11,0
8000b970:	f7 bc 00 fe 	subeq	r12,-2
8000b974:	f4 08 17 00 	moveq	r8,r10
8000b978:	ed b8 00 00 	bld	r8,0x0
8000b97c:	c0 60       	breq	8000b988 <__lo0bits+0x8a>
8000b97e:	a1 98       	lsr	r8,0x1
8000b980:	c0 31       	brne	8000b986 <__lo0bits+0x88>
8000b982:	32 0c       	mov	r12,32
8000b984:	5e fc       	retal	r12
8000b986:	2f fc       	sub	r12,-1
8000b988:	93 08       	st.w	r9[0x0],r8
8000b98a:	5e fc       	retal	r12

8000b98c <__mcmp>:
8000b98c:	d4 01       	pushm	lr
8000b98e:	18 98       	mov	r8,r12
8000b990:	76 49       	ld.w	r9,r11[0x10]
8000b992:	78 4c       	ld.w	r12,r12[0x10]
8000b994:	12 1c       	sub	r12,r9
8000b996:	c1 31       	brne	8000b9bc <__mcmp+0x30>
8000b998:	2f b9       	sub	r9,-5
8000b99a:	a3 69       	lsl	r9,0x2
8000b99c:	12 0b       	add	r11,r9
8000b99e:	f0 09 00 09 	add	r9,r8,r9
8000b9a2:	2e c8       	sub	r8,-20
8000b9a4:	13 4e       	ld.w	lr,--r9
8000b9a6:	17 4a       	ld.w	r10,--r11
8000b9a8:	14 3e       	cp.w	lr,r10
8000b9aa:	c0 60       	breq	8000b9b6 <__mcmp+0x2a>
8000b9ac:	f9 bc 03 ff 	movlo	r12,-1
8000b9b0:	f9 bc 02 01 	movhs	r12,1
8000b9b4:	d8 02       	popm	pc
8000b9b6:	10 39       	cp.w	r9,r8
8000b9b8:	fe 9b ff f6 	brhi	8000b9a4 <__mcmp+0x18>
8000b9bc:	d8 02       	popm	pc
8000b9be:	d7 03       	nop

8000b9c0 <_Bfree>:
8000b9c0:	d4 21       	pushm	r4-r7,lr
8000b9c2:	18 97       	mov	r7,r12
8000b9c4:	16 95       	mov	r5,r11
8000b9c6:	78 96       	ld.w	r6,r12[0x24]
8000b9c8:	58 06       	cp.w	r6,0
8000b9ca:	c0 91       	brne	8000b9dc <_Bfree+0x1c>
8000b9cc:	31 0c       	mov	r12,16
8000b9ce:	fe b0 df b3 	rcall	80007934 <malloc>
8000b9d2:	99 36       	st.w	r12[0xc],r6
8000b9d4:	8f 9c       	st.w	r7[0x24],r12
8000b9d6:	99 16       	st.w	r12[0x4],r6
8000b9d8:	99 26       	st.w	r12[0x8],r6
8000b9da:	99 06       	st.w	r12[0x0],r6
8000b9dc:	58 05       	cp.w	r5,0
8000b9de:	c0 90       	breq	8000b9f0 <_Bfree+0x30>
8000b9e0:	6a 19       	ld.w	r9,r5[0x4]
8000b9e2:	6e 98       	ld.w	r8,r7[0x24]
8000b9e4:	70 38       	ld.w	r8,r8[0xc]
8000b9e6:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000b9ea:	8b 0a       	st.w	r5[0x0],r10
8000b9ec:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000b9f0:	d8 22       	popm	r4-r7,pc
8000b9f2:	d7 03       	nop

8000b9f4 <_Balloc>:
8000b9f4:	d4 21       	pushm	r4-r7,lr
8000b9f6:	18 97       	mov	r7,r12
8000b9f8:	16 96       	mov	r6,r11
8000b9fa:	78 95       	ld.w	r5,r12[0x24]
8000b9fc:	58 05       	cp.w	r5,0
8000b9fe:	c0 91       	brne	8000ba10 <_Balloc+0x1c>
8000ba00:	31 0c       	mov	r12,16
8000ba02:	fe b0 df 99 	rcall	80007934 <malloc>
8000ba06:	99 35       	st.w	r12[0xc],r5
8000ba08:	8f 9c       	st.w	r7[0x24],r12
8000ba0a:	99 15       	st.w	r12[0x4],r5
8000ba0c:	99 25       	st.w	r12[0x8],r5
8000ba0e:	99 05       	st.w	r12[0x0],r5
8000ba10:	6e 95       	ld.w	r5,r7[0x24]
8000ba12:	6a 38       	ld.w	r8,r5[0xc]
8000ba14:	58 08       	cp.w	r8,0
8000ba16:	c0 b1       	brne	8000ba2c <_Balloc+0x38>
8000ba18:	31 0a       	mov	r10,16
8000ba1a:	30 4b       	mov	r11,4
8000ba1c:	0e 9c       	mov	r12,r7
8000ba1e:	e0 a0 04 07 	rcall	8000c22c <_calloc_r>
8000ba22:	8b 3c       	st.w	r5[0xc],r12
8000ba24:	6e 98       	ld.w	r8,r7[0x24]
8000ba26:	70 3c       	ld.w	r12,r8[0xc]
8000ba28:	58 0c       	cp.w	r12,0
8000ba2a:	c1 b0       	breq	8000ba60 <_Balloc+0x6c>
8000ba2c:	6e 98       	ld.w	r8,r7[0x24]
8000ba2e:	70 38       	ld.w	r8,r8[0xc]
8000ba30:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000ba34:	70 0c       	ld.w	r12,r8[0x0]
8000ba36:	58 0c       	cp.w	r12,0
8000ba38:	c0 40       	breq	8000ba40 <_Balloc+0x4c>
8000ba3a:	78 09       	ld.w	r9,r12[0x0]
8000ba3c:	91 09       	st.w	r8[0x0],r9
8000ba3e:	c0 e8       	rjmp	8000ba5a <_Balloc+0x66>
8000ba40:	0e 9c       	mov	r12,r7
8000ba42:	30 17       	mov	r7,1
8000ba44:	0e 9b       	mov	r11,r7
8000ba46:	ee 06 09 47 	lsl	r7,r7,r6
8000ba4a:	ee ca ff fb 	sub	r10,r7,-5
8000ba4e:	a3 6a       	lsl	r10,0x2
8000ba50:	e0 a0 03 ee 	rcall	8000c22c <_calloc_r>
8000ba54:	c0 60       	breq	8000ba60 <_Balloc+0x6c>
8000ba56:	99 16       	st.w	r12[0x4],r6
8000ba58:	99 27       	st.w	r12[0x8],r7
8000ba5a:	30 08       	mov	r8,0
8000ba5c:	99 38       	st.w	r12[0xc],r8
8000ba5e:	99 48       	st.w	r12[0x10],r8
8000ba60:	d8 22       	popm	r4-r7,pc
8000ba62:	d7 03       	nop

8000ba64 <__d2b>:
8000ba64:	d4 31       	pushm	r0-r7,lr
8000ba66:	20 2d       	sub	sp,8
8000ba68:	16 93       	mov	r3,r11
8000ba6a:	12 96       	mov	r6,r9
8000ba6c:	10 95       	mov	r5,r8
8000ba6e:	14 92       	mov	r2,r10
8000ba70:	30 1b       	mov	r11,1
8000ba72:	cc 1f       	rcall	8000b9f4 <_Balloc>
8000ba74:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000ba78:	50 09       	stdsp	sp[0x0],r9
8000ba7a:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000ba7e:	b5 a9       	sbr	r9,0x14
8000ba80:	f0 01 16 14 	lsr	r1,r8,0x14
8000ba84:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000ba88:	18 94       	mov	r4,r12
8000ba8a:	58 02       	cp.w	r2,0
8000ba8c:	c1 d0       	breq	8000bac6 <__d2b+0x62>
8000ba8e:	fa cc ff f8 	sub	r12,sp,-8
8000ba92:	18 d2       	st.w	--r12,r2
8000ba94:	c3 5f       	rcall	8000b8fe <__lo0bits>
8000ba96:	40 18       	lddsp	r8,sp[0x4]
8000ba98:	c0 d0       	breq	8000bab2 <__d2b+0x4e>
8000ba9a:	40 09       	lddsp	r9,sp[0x0]
8000ba9c:	f8 0a 11 20 	rsub	r10,r12,32
8000baa0:	f2 0a 09 4a 	lsl	r10,r9,r10
8000baa4:	f5 e8 10 08 	or	r8,r10,r8
8000baa8:	89 58       	st.w	r4[0x14],r8
8000baaa:	f2 0c 0a 49 	lsr	r9,r9,r12
8000baae:	50 09       	stdsp	sp[0x0],r9
8000bab0:	c0 28       	rjmp	8000bab4 <__d2b+0x50>
8000bab2:	89 58       	st.w	r4[0x14],r8
8000bab4:	40 08       	lddsp	r8,sp[0x0]
8000bab6:	58 08       	cp.w	r8,0
8000bab8:	f9 b3 01 02 	movne	r3,2
8000babc:	f9 b3 00 01 	moveq	r3,1
8000bac0:	89 68       	st.w	r4[0x18],r8
8000bac2:	89 43       	st.w	r4[0x10],r3
8000bac4:	c0 88       	rjmp	8000bad4 <__d2b+0x70>
8000bac6:	1a 9c       	mov	r12,sp
8000bac8:	c1 bf       	rcall	8000b8fe <__lo0bits>
8000baca:	30 13       	mov	r3,1
8000bacc:	40 08       	lddsp	r8,sp[0x0]
8000bace:	2e 0c       	sub	r12,-32
8000bad0:	89 43       	st.w	r4[0x10],r3
8000bad2:	89 58       	st.w	r4[0x14],r8
8000bad4:	58 01       	cp.w	r1,0
8000bad6:	c0 90       	breq	8000bae8 <__d2b+0x84>
8000bad8:	e2 c1 04 33 	sub	r1,r1,1075
8000badc:	18 01       	add	r1,r12
8000bade:	8d 01       	st.w	r6[0x0],r1
8000bae0:	f8 0c 11 35 	rsub	r12,r12,53
8000bae4:	8b 0c       	st.w	r5[0x0],r12
8000bae6:	c0 c8       	rjmp	8000bafe <__d2b+0x9a>
8000bae8:	e6 c8 ff fc 	sub	r8,r3,-4
8000baec:	f8 cc 04 32 	sub	r12,r12,1074
8000baf0:	a5 73       	lsl	r3,0x5
8000baf2:	8d 0c       	st.w	r6[0x0],r12
8000baf4:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000baf8:	cd 3e       	rcall	8000b89e <__hi0bits>
8000bafa:	18 13       	sub	r3,r12
8000bafc:	8b 03       	st.w	r5[0x0],r3
8000bafe:	08 9c       	mov	r12,r4
8000bb00:	2f ed       	sub	sp,-8
8000bb02:	d8 32       	popm	r0-r7,pc

8000bb04 <__mdiff>:
8000bb04:	d4 31       	pushm	r0-r7,lr
8000bb06:	74 48       	ld.w	r8,r10[0x10]
8000bb08:	76 45       	ld.w	r5,r11[0x10]
8000bb0a:	16 97       	mov	r7,r11
8000bb0c:	14 96       	mov	r6,r10
8000bb0e:	10 15       	sub	r5,r8
8000bb10:	c1 31       	brne	8000bb36 <__mdiff+0x32>
8000bb12:	2f b8       	sub	r8,-5
8000bb14:	ee ce ff ec 	sub	lr,r7,-20
8000bb18:	a3 68       	lsl	r8,0x2
8000bb1a:	f4 08 00 0b 	add	r11,r10,r8
8000bb1e:	ee 08 00 08 	add	r8,r7,r8
8000bb22:	11 4a       	ld.w	r10,--r8
8000bb24:	17 49       	ld.w	r9,--r11
8000bb26:	12 3a       	cp.w	r10,r9
8000bb28:	c0 30       	breq	8000bb2e <__mdiff+0x2a>
8000bb2a:	c0 e2       	brcc	8000bb46 <__mdiff+0x42>
8000bb2c:	c0 78       	rjmp	8000bb3a <__mdiff+0x36>
8000bb2e:	1c 38       	cp.w	r8,lr
8000bb30:	fe 9b ff f9 	brhi	8000bb22 <__mdiff+0x1e>
8000bb34:	c4 98       	rjmp	8000bbc6 <__mdiff+0xc2>
8000bb36:	58 05       	cp.w	r5,0
8000bb38:	c0 64       	brge	8000bb44 <__mdiff+0x40>
8000bb3a:	0e 98       	mov	r8,r7
8000bb3c:	30 15       	mov	r5,1
8000bb3e:	0c 97       	mov	r7,r6
8000bb40:	10 96       	mov	r6,r8
8000bb42:	c0 28       	rjmp	8000bb46 <__mdiff+0x42>
8000bb44:	30 05       	mov	r5,0
8000bb46:	6e 1b       	ld.w	r11,r7[0x4]
8000bb48:	c5 6f       	rcall	8000b9f4 <_Balloc>
8000bb4a:	6e 49       	ld.w	r9,r7[0x10]
8000bb4c:	6c 44       	ld.w	r4,r6[0x10]
8000bb4e:	99 35       	st.w	r12[0xc],r5
8000bb50:	2f b4       	sub	r4,-5
8000bb52:	f2 c5 ff fb 	sub	r5,r9,-5
8000bb56:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000bb5a:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000bb5e:	2e c6       	sub	r6,-20
8000bb60:	2e c7       	sub	r7,-20
8000bb62:	f8 c8 ff ec 	sub	r8,r12,-20
8000bb66:	30 0a       	mov	r10,0
8000bb68:	0f 0e       	ld.w	lr,r7++
8000bb6a:	0d 0b       	ld.w	r11,r6++
8000bb6c:	fc 02 16 10 	lsr	r2,lr,0x10
8000bb70:	f6 03 16 10 	lsr	r3,r11,0x10
8000bb74:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000bb78:	e4 03 01 03 	sub	r3,r2,r3
8000bb7c:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000bb80:	fc 0b 01 0b 	sub	r11,lr,r11
8000bb84:	f6 0a 00 0a 	add	r10,r11,r10
8000bb88:	b0 1a       	st.h	r8[0x2],r10
8000bb8a:	b1 4a       	asr	r10,0x10
8000bb8c:	e6 0a 00 0a 	add	r10,r3,r10
8000bb90:	b0 0a       	st.h	r8[0x0],r10
8000bb92:	2f c8       	sub	r8,-4
8000bb94:	b1 4a       	asr	r10,0x10
8000bb96:	08 36       	cp.w	r6,r4
8000bb98:	ce 83       	brcs	8000bb68 <__mdiff+0x64>
8000bb9a:	c0 d8       	rjmp	8000bbb4 <__mdiff+0xb0>
8000bb9c:	0f 0b       	ld.w	r11,r7++
8000bb9e:	f6 0e 16 10 	lsr	lr,r11,0x10
8000bba2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000bba6:	16 0a       	add	r10,r11
8000bba8:	b0 1a       	st.h	r8[0x2],r10
8000bbaa:	b1 4a       	asr	r10,0x10
8000bbac:	1c 0a       	add	r10,lr
8000bbae:	b0 0a       	st.h	r8[0x0],r10
8000bbb0:	2f c8       	sub	r8,-4
8000bbb2:	b1 4a       	asr	r10,0x10
8000bbb4:	0a 37       	cp.w	r7,r5
8000bbb6:	cf 33       	brcs	8000bb9c <__mdiff+0x98>
8000bbb8:	c0 28       	rjmp	8000bbbc <__mdiff+0xb8>
8000bbba:	20 19       	sub	r9,1
8000bbbc:	11 4a       	ld.w	r10,--r8
8000bbbe:	58 0a       	cp.w	r10,0
8000bbc0:	cf d0       	breq	8000bbba <__mdiff+0xb6>
8000bbc2:	99 49       	st.w	r12[0x10],r9
8000bbc4:	d8 32       	popm	r0-r7,pc
8000bbc6:	30 0b       	mov	r11,0
8000bbc8:	c1 6f       	rcall	8000b9f4 <_Balloc>
8000bbca:	30 18       	mov	r8,1
8000bbcc:	99 48       	st.w	r12[0x10],r8
8000bbce:	30 08       	mov	r8,0
8000bbd0:	99 58       	st.w	r12[0x14],r8
8000bbd2:	d8 32       	popm	r0-r7,pc

8000bbd4 <__lshift>:
8000bbd4:	d4 31       	pushm	r0-r7,lr
8000bbd6:	16 97       	mov	r7,r11
8000bbd8:	76 46       	ld.w	r6,r11[0x10]
8000bbda:	f4 02 14 05 	asr	r2,r10,0x5
8000bbde:	2f f6       	sub	r6,-1
8000bbe0:	14 93       	mov	r3,r10
8000bbe2:	18 94       	mov	r4,r12
8000bbe4:	04 06       	add	r6,r2
8000bbe6:	76 1b       	ld.w	r11,r11[0x4]
8000bbe8:	6e 28       	ld.w	r8,r7[0x8]
8000bbea:	c0 38       	rjmp	8000bbf0 <__lshift+0x1c>
8000bbec:	2f fb       	sub	r11,-1
8000bbee:	a1 78       	lsl	r8,0x1
8000bbf0:	10 36       	cp.w	r6,r8
8000bbf2:	fe 99 ff fd 	brgt	8000bbec <__lshift+0x18>
8000bbf6:	08 9c       	mov	r12,r4
8000bbf8:	cf ee       	rcall	8000b9f4 <_Balloc>
8000bbfa:	30 09       	mov	r9,0
8000bbfc:	18 95       	mov	r5,r12
8000bbfe:	f8 c8 ff ec 	sub	r8,r12,-20
8000bc02:	12 9a       	mov	r10,r9
8000bc04:	c0 38       	rjmp	8000bc0a <__lshift+0x36>
8000bc06:	10 aa       	st.w	r8++,r10
8000bc08:	2f f9       	sub	r9,-1
8000bc0a:	04 39       	cp.w	r9,r2
8000bc0c:	cf d5       	brlt	8000bc06 <__lshift+0x32>
8000bc0e:	6e 4b       	ld.w	r11,r7[0x10]
8000bc10:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000bc14:	2f bb       	sub	r11,-5
8000bc16:	ee c9 ff ec 	sub	r9,r7,-20
8000bc1a:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000bc1e:	58 03       	cp.w	r3,0
8000bc20:	c1 30       	breq	8000bc46 <__lshift+0x72>
8000bc22:	e6 0c 11 20 	rsub	r12,r3,32
8000bc26:	30 0a       	mov	r10,0
8000bc28:	72 02       	ld.w	r2,r9[0x0]
8000bc2a:	e4 03 09 42 	lsl	r2,r2,r3
8000bc2e:	04 4a       	or	r10,r2
8000bc30:	10 aa       	st.w	r8++,r10
8000bc32:	13 0a       	ld.w	r10,r9++
8000bc34:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000bc38:	16 39       	cp.w	r9,r11
8000bc3a:	cf 73       	brcs	8000bc28 <__lshift+0x54>
8000bc3c:	91 0a       	st.w	r8[0x0],r10
8000bc3e:	58 0a       	cp.w	r10,0
8000bc40:	c0 70       	breq	8000bc4e <__lshift+0x7a>
8000bc42:	2f f6       	sub	r6,-1
8000bc44:	c0 58       	rjmp	8000bc4e <__lshift+0x7a>
8000bc46:	13 0a       	ld.w	r10,r9++
8000bc48:	10 aa       	st.w	r8++,r10
8000bc4a:	16 39       	cp.w	r9,r11
8000bc4c:	cf d3       	brcs	8000bc46 <__lshift+0x72>
8000bc4e:	08 9c       	mov	r12,r4
8000bc50:	20 16       	sub	r6,1
8000bc52:	0e 9b       	mov	r11,r7
8000bc54:	8b 46       	st.w	r5[0x10],r6
8000bc56:	cb 5e       	rcall	8000b9c0 <_Bfree>
8000bc58:	0a 9c       	mov	r12,r5
8000bc5a:	d8 32       	popm	r0-r7,pc

8000bc5c <__multiply>:
8000bc5c:	d4 31       	pushm	r0-r7,lr
8000bc5e:	20 2d       	sub	sp,8
8000bc60:	76 49       	ld.w	r9,r11[0x10]
8000bc62:	74 48       	ld.w	r8,r10[0x10]
8000bc64:	16 96       	mov	r6,r11
8000bc66:	14 95       	mov	r5,r10
8000bc68:	10 39       	cp.w	r9,r8
8000bc6a:	ec 08 17 50 	movlt	r8,r6
8000bc6e:	ea 06 17 50 	movlt	r6,r5
8000bc72:	f0 05 17 50 	movlt	r5,r8
8000bc76:	6c 28       	ld.w	r8,r6[0x8]
8000bc78:	76 43       	ld.w	r3,r11[0x10]
8000bc7a:	74 42       	ld.w	r2,r10[0x10]
8000bc7c:	76 1b       	ld.w	r11,r11[0x4]
8000bc7e:	e4 03 00 07 	add	r7,r2,r3
8000bc82:	10 37       	cp.w	r7,r8
8000bc84:	f7 bb 09 ff 	subgt	r11,-1
8000bc88:	cb 6e       	rcall	8000b9f4 <_Balloc>
8000bc8a:	ee c4 ff fb 	sub	r4,r7,-5
8000bc8e:	f8 c9 ff ec 	sub	r9,r12,-20
8000bc92:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000bc96:	30 0a       	mov	r10,0
8000bc98:	12 98       	mov	r8,r9
8000bc9a:	c0 28       	rjmp	8000bc9e <__multiply+0x42>
8000bc9c:	10 aa       	st.w	r8++,r10
8000bc9e:	08 38       	cp.w	r8,r4
8000bca0:	cf e3       	brcs	8000bc9c <__multiply+0x40>
8000bca2:	2f b3       	sub	r3,-5
8000bca4:	2f b2       	sub	r2,-5
8000bca6:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000bcaa:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000bcae:	ec cb ff ec 	sub	r11,r6,-20
8000bcb2:	50 12       	stdsp	sp[0x4],r2
8000bcb4:	ea ca ff ec 	sub	r10,r5,-20
8000bcb8:	c4 48       	rjmp	8000bd40 <__multiply+0xe4>
8000bcba:	94 95       	ld.uh	r5,r10[0x2]
8000bcbc:	58 05       	cp.w	r5,0
8000bcbe:	c2 00       	breq	8000bcfe <__multiply+0xa2>
8000bcc0:	12 98       	mov	r8,r9
8000bcc2:	16 96       	mov	r6,r11
8000bcc4:	30 0e       	mov	lr,0
8000bcc6:	50 09       	stdsp	sp[0x0],r9
8000bcc8:	0d 02       	ld.w	r2,r6++
8000bcca:	e4 00 16 10 	lsr	r0,r2,0x10
8000bcce:	70 01       	ld.w	r1,r8[0x0]
8000bcd0:	70 09       	ld.w	r9,r8[0x0]
8000bcd2:	b1 81       	lsr	r1,0x10
8000bcd4:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000bcd8:	e0 05 03 41 	mac	r1,r0,r5
8000bcdc:	ab 32       	mul	r2,r5
8000bcde:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000bce2:	00 02       	add	r2,r0
8000bce4:	e4 0e 00 0e 	add	lr,r2,lr
8000bce8:	b0 1e       	st.h	r8[0x2],lr
8000bcea:	b1 8e       	lsr	lr,0x10
8000bcec:	1c 01       	add	r1,lr
8000bcee:	b0 01       	st.h	r8[0x0],r1
8000bcf0:	e2 0e 16 10 	lsr	lr,r1,0x10
8000bcf4:	2f c8       	sub	r8,-4
8000bcf6:	06 36       	cp.w	r6,r3
8000bcf8:	ce 83       	brcs	8000bcc8 <__multiply+0x6c>
8000bcfa:	40 09       	lddsp	r9,sp[0x0]
8000bcfc:	91 0e       	st.w	r8[0x0],lr
8000bcfe:	94 86       	ld.uh	r6,r10[0x0]
8000bd00:	58 06       	cp.w	r6,0
8000bd02:	c1 d0       	breq	8000bd3c <__multiply+0xe0>
8000bd04:	72 02       	ld.w	r2,r9[0x0]
8000bd06:	12 98       	mov	r8,r9
8000bd08:	16 9e       	mov	lr,r11
8000bd0a:	30 05       	mov	r5,0
8000bd0c:	b0 12       	st.h	r8[0x2],r2
8000bd0e:	1d 01       	ld.w	r1,lr++
8000bd10:	90 82       	ld.uh	r2,r8[0x0]
8000bd12:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000bd16:	ad 30       	mul	r0,r6
8000bd18:	e0 02 00 02 	add	r2,r0,r2
8000bd1c:	e4 05 00 05 	add	r5,r2,r5
8000bd20:	b0 05       	st.h	r8[0x0],r5
8000bd22:	b1 85       	lsr	r5,0x10
8000bd24:	b1 81       	lsr	r1,0x10
8000bd26:	2f c8       	sub	r8,-4
8000bd28:	ad 31       	mul	r1,r6
8000bd2a:	90 92       	ld.uh	r2,r8[0x2]
8000bd2c:	e2 02 00 02 	add	r2,r1,r2
8000bd30:	0a 02       	add	r2,r5
8000bd32:	e4 05 16 10 	lsr	r5,r2,0x10
8000bd36:	06 3e       	cp.w	lr,r3
8000bd38:	ce a3       	brcs	8000bd0c <__multiply+0xb0>
8000bd3a:	91 02       	st.w	r8[0x0],r2
8000bd3c:	2f ca       	sub	r10,-4
8000bd3e:	2f c9       	sub	r9,-4
8000bd40:	40 18       	lddsp	r8,sp[0x4]
8000bd42:	10 3a       	cp.w	r10,r8
8000bd44:	cb b3       	brcs	8000bcba <__multiply+0x5e>
8000bd46:	c0 28       	rjmp	8000bd4a <__multiply+0xee>
8000bd48:	20 17       	sub	r7,1
8000bd4a:	58 07       	cp.w	r7,0
8000bd4c:	e0 8a 00 05 	brle	8000bd56 <__multiply+0xfa>
8000bd50:	09 48       	ld.w	r8,--r4
8000bd52:	58 08       	cp.w	r8,0
8000bd54:	cf a0       	breq	8000bd48 <__multiply+0xec>
8000bd56:	99 47       	st.w	r12[0x10],r7
8000bd58:	2f ed       	sub	sp,-8
8000bd5a:	d8 32       	popm	r0-r7,pc

8000bd5c <__i2b>:
8000bd5c:	d4 21       	pushm	r4-r7,lr
8000bd5e:	16 97       	mov	r7,r11
8000bd60:	30 1b       	mov	r11,1
8000bd62:	c4 9e       	rcall	8000b9f4 <_Balloc>
8000bd64:	30 19       	mov	r9,1
8000bd66:	99 57       	st.w	r12[0x14],r7
8000bd68:	99 49       	st.w	r12[0x10],r9
8000bd6a:	d8 22       	popm	r4-r7,pc

8000bd6c <__multadd>:
8000bd6c:	d4 31       	pushm	r0-r7,lr
8000bd6e:	30 08       	mov	r8,0
8000bd70:	12 95       	mov	r5,r9
8000bd72:	16 97       	mov	r7,r11
8000bd74:	18 96       	mov	r6,r12
8000bd76:	76 44       	ld.w	r4,r11[0x10]
8000bd78:	f6 c9 ff ec 	sub	r9,r11,-20
8000bd7c:	72 0b       	ld.w	r11,r9[0x0]
8000bd7e:	f6 0c 16 10 	lsr	r12,r11,0x10
8000bd82:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000bd86:	f4 0c 02 4c 	mul	r12,r10,r12
8000bd8a:	f4 0b 03 45 	mac	r5,r10,r11
8000bd8e:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000bd92:	b1 85       	lsr	r5,0x10
8000bd94:	18 05       	add	r5,r12
8000bd96:	ea 0c 15 10 	lsl	r12,r5,0x10
8000bd9a:	f8 0b 00 0b 	add	r11,r12,r11
8000bd9e:	12 ab       	st.w	r9++,r11
8000bda0:	2f f8       	sub	r8,-1
8000bda2:	b1 85       	lsr	r5,0x10
8000bda4:	08 38       	cp.w	r8,r4
8000bda6:	ce b5       	brlt	8000bd7c <__multadd+0x10>
8000bda8:	58 05       	cp.w	r5,0
8000bdaa:	c1 c0       	breq	8000bde2 <__multadd+0x76>
8000bdac:	6e 28       	ld.w	r8,r7[0x8]
8000bdae:	10 34       	cp.w	r4,r8
8000bdb0:	c1 35       	brlt	8000bdd6 <__multadd+0x6a>
8000bdb2:	6e 1b       	ld.w	r11,r7[0x4]
8000bdb4:	0c 9c       	mov	r12,r6
8000bdb6:	2f fb       	sub	r11,-1
8000bdb8:	c1 ee       	rcall	8000b9f4 <_Balloc>
8000bdba:	6e 4a       	ld.w	r10,r7[0x10]
8000bdbc:	ee cb ff f4 	sub	r11,r7,-12
8000bdc0:	18 93       	mov	r3,r12
8000bdc2:	2f ea       	sub	r10,-2
8000bdc4:	2f 4c       	sub	r12,-12
8000bdc6:	a3 6a       	lsl	r10,0x2
8000bdc8:	fe b0 df d2 	rcall	80007d6c <memcpy>
8000bdcc:	0e 9b       	mov	r11,r7
8000bdce:	0c 9c       	mov	r12,r6
8000bdd0:	fe b0 fd f8 	rcall	8000b9c0 <_Bfree>
8000bdd4:	06 97       	mov	r7,r3
8000bdd6:	e8 c8 ff ff 	sub	r8,r4,-1
8000bdda:	2f b4       	sub	r4,-5
8000bddc:	8f 48       	st.w	r7[0x10],r8
8000bdde:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000bde2:	0e 9c       	mov	r12,r7
8000bde4:	d8 32       	popm	r0-r7,pc
8000bde6:	d7 03       	nop

8000bde8 <__pow5mult>:
8000bde8:	d4 31       	pushm	r0-r7,lr
8000bdea:	14 96       	mov	r6,r10
8000bdec:	18 97       	mov	r7,r12
8000bdee:	16 94       	mov	r4,r11
8000bdf0:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000bdf4:	c0 90       	breq	8000be06 <__pow5mult+0x1e>
8000bdf6:	20 18       	sub	r8,1
8000bdf8:	fe c9 e3 74 	sub	r9,pc,-7308
8000bdfc:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000be00:	30 09       	mov	r9,0
8000be02:	cb 5f       	rcall	8000bd6c <__multadd>
8000be04:	18 94       	mov	r4,r12
8000be06:	a3 46       	asr	r6,0x2
8000be08:	c3 40       	breq	8000be70 <__pow5mult+0x88>
8000be0a:	6e 95       	ld.w	r5,r7[0x24]
8000be0c:	58 05       	cp.w	r5,0
8000be0e:	c0 91       	brne	8000be20 <__pow5mult+0x38>
8000be10:	31 0c       	mov	r12,16
8000be12:	fe b0 dd 91 	rcall	80007934 <malloc>
8000be16:	99 35       	st.w	r12[0xc],r5
8000be18:	8f 9c       	st.w	r7[0x24],r12
8000be1a:	99 15       	st.w	r12[0x4],r5
8000be1c:	99 25       	st.w	r12[0x8],r5
8000be1e:	99 05       	st.w	r12[0x0],r5
8000be20:	6e 93       	ld.w	r3,r7[0x24]
8000be22:	66 25       	ld.w	r5,r3[0x8]
8000be24:	58 05       	cp.w	r5,0
8000be26:	c0 c1       	brne	8000be3e <__pow5mult+0x56>
8000be28:	e0 6b 02 71 	mov	r11,625
8000be2c:	0e 9c       	mov	r12,r7
8000be2e:	c9 7f       	rcall	8000bd5c <__i2b>
8000be30:	87 2c       	st.w	r3[0x8],r12
8000be32:	30 08       	mov	r8,0
8000be34:	18 95       	mov	r5,r12
8000be36:	99 08       	st.w	r12[0x0],r8
8000be38:	c0 38       	rjmp	8000be3e <__pow5mult+0x56>
8000be3a:	06 9c       	mov	r12,r3
8000be3c:	18 95       	mov	r5,r12
8000be3e:	ed b6 00 00 	bld	r6,0x0
8000be42:	c0 b1       	brne	8000be58 <__pow5mult+0x70>
8000be44:	08 9b       	mov	r11,r4
8000be46:	0a 9a       	mov	r10,r5
8000be48:	0e 9c       	mov	r12,r7
8000be4a:	c0 9f       	rcall	8000bc5c <__multiply>
8000be4c:	08 9b       	mov	r11,r4
8000be4e:	18 93       	mov	r3,r12
8000be50:	0e 9c       	mov	r12,r7
8000be52:	06 94       	mov	r4,r3
8000be54:	fe b0 fd b6 	rcall	8000b9c0 <_Bfree>
8000be58:	a1 56       	asr	r6,0x1
8000be5a:	c0 b0       	breq	8000be70 <__pow5mult+0x88>
8000be5c:	6a 03       	ld.w	r3,r5[0x0]
8000be5e:	58 03       	cp.w	r3,0
8000be60:	ce d1       	brne	8000be3a <__pow5mult+0x52>
8000be62:	0a 9a       	mov	r10,r5
8000be64:	0a 9b       	mov	r11,r5
8000be66:	0e 9c       	mov	r12,r7
8000be68:	cf ae       	rcall	8000bc5c <__multiply>
8000be6a:	8b 0c       	st.w	r5[0x0],r12
8000be6c:	99 03       	st.w	r12[0x0],r3
8000be6e:	ce 7b       	rjmp	8000be3c <__pow5mult+0x54>
8000be70:	08 9c       	mov	r12,r4
8000be72:	d8 32       	popm	r0-r7,pc

8000be74 <_realloc_r>:
8000be74:	d4 31       	pushm	r0-r7,lr
8000be76:	20 1d       	sub	sp,4
8000be78:	16 94       	mov	r4,r11
8000be7a:	18 92       	mov	r2,r12
8000be7c:	14 9b       	mov	r11,r10
8000be7e:	58 04       	cp.w	r4,0
8000be80:	c0 51       	brne	8000be8a <_realloc_r+0x16>
8000be82:	fe b0 dd 61 	rcall	80007944 <_malloc_r>
8000be86:	18 95       	mov	r5,r12
8000be88:	c5 39       	rjmp	8000c12e <_realloc_r+0x2ba>
8000be8a:	50 0a       	stdsp	sp[0x0],r10
8000be8c:	fe b0 e0 14 	rcall	80007eb4 <__malloc_lock>
8000be90:	40 0b       	lddsp	r11,sp[0x0]
8000be92:	f6 c8 ff f5 	sub	r8,r11,-11
8000be96:	e8 c1 00 08 	sub	r1,r4,8
8000be9a:	10 96       	mov	r6,r8
8000be9c:	62 1c       	ld.w	r12,r1[0x4]
8000be9e:	e0 16 ff f8 	andl	r6,0xfff8
8000bea2:	59 68       	cp.w	r8,22
8000bea4:	f9 b6 08 10 	movls	r6,16
8000bea8:	16 36       	cp.w	r6,r11
8000beaa:	5f 38       	srlo	r8
8000beac:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000beb0:	c0 50       	breq	8000beba <_realloc_r+0x46>
8000beb2:	30 c8       	mov	r8,12
8000beb4:	30 05       	mov	r5,0
8000beb6:	85 38       	st.w	r2[0xc],r8
8000beb8:	c3 b9       	rjmp	8000c12e <_realloc_r+0x2ba>
8000beba:	18 90       	mov	r0,r12
8000bebc:	e0 10 ff fc 	andl	r0,0xfffc
8000bec0:	0c 30       	cp.w	r0,r6
8000bec2:	e0 84 01 0b 	brge	8000c0d8 <_realloc_r+0x264>
8000bec6:	e0 68 03 cc 	mov	r8,972
8000beca:	e2 00 00 09 	add	r9,r1,r0
8000bece:	70 25       	ld.w	r5,r8[0x8]
8000bed0:	0a 39       	cp.w	r9,r5
8000bed2:	c0 90       	breq	8000bee4 <_realloc_r+0x70>
8000bed4:	72 1a       	ld.w	r10,r9[0x4]
8000bed6:	a1 ca       	cbr	r10,0x0
8000bed8:	f2 0a 00 0a 	add	r10,r9,r10
8000bedc:	74 1a       	ld.w	r10,r10[0x4]
8000bede:	ed ba 00 00 	bld	r10,0x0
8000bee2:	c2 20       	breq	8000bf26 <_realloc_r+0xb2>
8000bee4:	72 1a       	ld.w	r10,r9[0x4]
8000bee6:	e0 1a ff fc 	andl	r10,0xfffc
8000beea:	f4 00 00 03 	add	r3,r10,r0
8000beee:	0a 39       	cp.w	r9,r5
8000bef0:	c1 31       	brne	8000bf16 <_realloc_r+0xa2>
8000bef2:	ec c7 ff f0 	sub	r7,r6,-16
8000bef6:	0e 33       	cp.w	r3,r7
8000bef8:	c1 95       	brlt	8000bf2a <_realloc_r+0xb6>
8000befa:	e2 06 00 09 	add	r9,r1,r6
8000befe:	0c 13       	sub	r3,r6
8000bf00:	a1 a3       	sbr	r3,0x0
8000bf02:	93 13       	st.w	r9[0x4],r3
8000bf04:	91 29       	st.w	r8[0x8],r9
8000bf06:	04 9c       	mov	r12,r2
8000bf08:	62 18       	ld.w	r8,r1[0x4]
8000bf0a:	08 95       	mov	r5,r4
8000bf0c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000bf10:	10 46       	or	r6,r8
8000bf12:	83 16       	st.w	r1[0x4],r6
8000bf14:	c0 b9       	rjmp	8000c12a <_realloc_r+0x2b6>
8000bf16:	0c 33       	cp.w	r3,r6
8000bf18:	c0 95       	brlt	8000bf2a <_realloc_r+0xb6>
8000bf1a:	72 28       	ld.w	r8,r9[0x8]
8000bf1c:	02 97       	mov	r7,r1
8000bf1e:	72 39       	ld.w	r9,r9[0xc]
8000bf20:	93 28       	st.w	r9[0x8],r8
8000bf22:	91 39       	st.w	r8[0xc],r9
8000bf24:	cd c8       	rjmp	8000c0dc <_realloc_r+0x268>
8000bf26:	30 0a       	mov	r10,0
8000bf28:	14 99       	mov	r9,r10
8000bf2a:	ed bc 00 00 	bld	r12,0x0
8000bf2e:	e0 80 00 95 	breq	8000c058 <_realloc_r+0x1e4>
8000bf32:	62 07       	ld.w	r7,r1[0x0]
8000bf34:	e2 07 01 07 	sub	r7,r1,r7
8000bf38:	6e 1c       	ld.w	r12,r7[0x4]
8000bf3a:	e0 1c ff fc 	andl	r12,0xfffc
8000bf3e:	58 09       	cp.w	r9,0
8000bf40:	c5 60       	breq	8000bfec <_realloc_r+0x178>
8000bf42:	f8 00 00 03 	add	r3,r12,r0
8000bf46:	0a 39       	cp.w	r9,r5
8000bf48:	c4 81       	brne	8000bfd8 <_realloc_r+0x164>
8000bf4a:	14 03       	add	r3,r10
8000bf4c:	ec c9 ff f0 	sub	r9,r6,-16
8000bf50:	12 33       	cp.w	r3,r9
8000bf52:	c4 d5       	brlt	8000bfec <_realloc_r+0x178>
8000bf54:	6e 3a       	ld.w	r10,r7[0xc]
8000bf56:	6e 29       	ld.w	r9,r7[0x8]
8000bf58:	95 29       	st.w	r10[0x8],r9
8000bf5a:	93 3a       	st.w	r9[0xc],r10
8000bf5c:	ee c5 ff f8 	sub	r5,r7,-8
8000bf60:	e0 ca 00 04 	sub	r10,r0,4
8000bf64:	e0 4a 00 24 	cp.w	r10,36
8000bf68:	e0 8b 00 25 	brhi	8000bfb2 <_realloc_r+0x13e>
8000bf6c:	0a 99       	mov	r9,r5
8000bf6e:	59 3a       	cp.w	r10,19
8000bf70:	e0 88 00 1a 	brls	8000bfa4 <_realloc_r+0x130>
8000bf74:	09 09       	ld.w	r9,r4++
8000bf76:	8b 09       	st.w	r5[0x0],r9
8000bf78:	09 09       	ld.w	r9,r4++
8000bf7a:	8f 39       	st.w	r7[0xc],r9
8000bf7c:	ee c9 ff f0 	sub	r9,r7,-16
8000bf80:	59 ba       	cp.w	r10,27
8000bf82:	e0 88 00 11 	brls	8000bfa4 <_realloc_r+0x130>
8000bf86:	09 0b       	ld.w	r11,r4++
8000bf88:	93 0b       	st.w	r9[0x0],r11
8000bf8a:	09 09       	ld.w	r9,r4++
8000bf8c:	8f 59       	st.w	r7[0x14],r9
8000bf8e:	ee c9 ff e8 	sub	r9,r7,-24
8000bf92:	e0 4a 00 24 	cp.w	r10,36
8000bf96:	c0 71       	brne	8000bfa4 <_realloc_r+0x130>
8000bf98:	09 0a       	ld.w	r10,r4++
8000bf9a:	93 0a       	st.w	r9[0x0],r10
8000bf9c:	ee c9 ff e0 	sub	r9,r7,-32
8000bfa0:	09 0a       	ld.w	r10,r4++
8000bfa2:	8f 7a       	st.w	r7[0x1c],r10
8000bfa4:	09 0a       	ld.w	r10,r4++
8000bfa6:	12 aa       	st.w	r9++,r10
8000bfa8:	68 0a       	ld.w	r10,r4[0x0]
8000bfaa:	93 0a       	st.w	r9[0x0],r10
8000bfac:	68 1a       	ld.w	r10,r4[0x4]
8000bfae:	93 1a       	st.w	r9[0x4],r10
8000bfb0:	c0 78       	rjmp	8000bfbe <_realloc_r+0x14a>
8000bfb2:	50 08       	stdsp	sp[0x0],r8
8000bfb4:	08 9b       	mov	r11,r4
8000bfb6:	0a 9c       	mov	r12,r5
8000bfb8:	fe b0 fc 4d 	rcall	8000b852 <memmove>
8000bfbc:	40 08       	lddsp	r8,sp[0x0]
8000bfbe:	ee 06 00 09 	add	r9,r7,r6
8000bfc2:	0c 13       	sub	r3,r6
8000bfc4:	a1 a3       	sbr	r3,0x0
8000bfc6:	93 13       	st.w	r9[0x4],r3
8000bfc8:	91 29       	st.w	r8[0x8],r9
8000bfca:	04 9c       	mov	r12,r2
8000bfcc:	6e 18       	ld.w	r8,r7[0x4]
8000bfce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000bfd2:	10 46       	or	r6,r8
8000bfd4:	8f 16       	st.w	r7[0x4],r6
8000bfd6:	ca a8       	rjmp	8000c12a <_realloc_r+0x2b6>
8000bfd8:	14 03       	add	r3,r10
8000bfda:	0c 33       	cp.w	r3,r6
8000bfdc:	c0 85       	brlt	8000bfec <_realloc_r+0x178>
8000bfde:	72 28       	ld.w	r8,r9[0x8]
8000bfe0:	72 39       	ld.w	r9,r9[0xc]
8000bfe2:	93 28       	st.w	r9[0x8],r8
8000bfe4:	91 39       	st.w	r8[0xc],r9
8000bfe6:	6e 28       	ld.w	r8,r7[0x8]
8000bfe8:	6e 39       	ld.w	r9,r7[0xc]
8000bfea:	c0 78       	rjmp	8000bff8 <_realloc_r+0x184>
8000bfec:	f8 00 00 03 	add	r3,r12,r0
8000bff0:	0c 33       	cp.w	r3,r6
8000bff2:	c3 35       	brlt	8000c058 <_realloc_r+0x1e4>
8000bff4:	6e 39       	ld.w	r9,r7[0xc]
8000bff6:	6e 28       	ld.w	r8,r7[0x8]
8000bff8:	93 28       	st.w	r9[0x8],r8
8000bffa:	91 39       	st.w	r8[0xc],r9
8000bffc:	e0 ca 00 04 	sub	r10,r0,4
8000c000:	ee cc ff f8 	sub	r12,r7,-8
8000c004:	e0 4a 00 24 	cp.w	r10,36
8000c008:	e0 8b 00 24 	brhi	8000c050 <_realloc_r+0x1dc>
8000c00c:	59 3a       	cp.w	r10,19
8000c00e:	e0 88 00 1a 	brls	8000c042 <_realloc_r+0x1ce>
8000c012:	09 08       	ld.w	r8,r4++
8000c014:	99 08       	st.w	r12[0x0],r8
8000c016:	09 08       	ld.w	r8,r4++
8000c018:	8f 38       	st.w	r7[0xc],r8
8000c01a:	ee cc ff f0 	sub	r12,r7,-16
8000c01e:	59 ba       	cp.w	r10,27
8000c020:	e0 88 00 11 	brls	8000c042 <_realloc_r+0x1ce>
8000c024:	09 08       	ld.w	r8,r4++
8000c026:	99 08       	st.w	r12[0x0],r8
8000c028:	09 08       	ld.w	r8,r4++
8000c02a:	8f 58       	st.w	r7[0x14],r8
8000c02c:	ee cc ff e8 	sub	r12,r7,-24
8000c030:	e0 4a 00 24 	cp.w	r10,36
8000c034:	c0 71       	brne	8000c042 <_realloc_r+0x1ce>
8000c036:	09 08       	ld.w	r8,r4++
8000c038:	99 08       	st.w	r12[0x0],r8
8000c03a:	ee cc ff e0 	sub	r12,r7,-32
8000c03e:	09 08       	ld.w	r8,r4++
8000c040:	8f 78       	st.w	r7[0x1c],r8
8000c042:	09 08       	ld.w	r8,r4++
8000c044:	18 a8       	st.w	r12++,r8
8000c046:	68 08       	ld.w	r8,r4[0x0]
8000c048:	99 08       	st.w	r12[0x0],r8
8000c04a:	68 18       	ld.w	r8,r4[0x4]
8000c04c:	99 18       	st.w	r12[0x4],r8
8000c04e:	c4 78       	rjmp	8000c0dc <_realloc_r+0x268>
8000c050:	08 9b       	mov	r11,r4
8000c052:	fe b0 fc 00 	rcall	8000b852 <memmove>
8000c056:	c4 38       	rjmp	8000c0dc <_realloc_r+0x268>
8000c058:	04 9c       	mov	r12,r2
8000c05a:	fe b0 dc 75 	rcall	80007944 <_malloc_r>
8000c05e:	18 95       	mov	r5,r12
8000c060:	c3 a0       	breq	8000c0d4 <_realloc_r+0x260>
8000c062:	62 18       	ld.w	r8,r1[0x4]
8000c064:	f8 c9 00 08 	sub	r9,r12,8
8000c068:	a1 c8       	cbr	r8,0x0
8000c06a:	e2 08 00 08 	add	r8,r1,r8
8000c06e:	10 39       	cp.w	r9,r8
8000c070:	c0 71       	brne	8000c07e <_realloc_r+0x20a>
8000c072:	72 13       	ld.w	r3,r9[0x4]
8000c074:	02 97       	mov	r7,r1
8000c076:	e0 13 ff fc 	andl	r3,0xfffc
8000c07a:	00 03       	add	r3,r0
8000c07c:	c3 08       	rjmp	8000c0dc <_realloc_r+0x268>
8000c07e:	e0 ca 00 04 	sub	r10,r0,4
8000c082:	e0 4a 00 24 	cp.w	r10,36
8000c086:	e0 8b 00 20 	brhi	8000c0c6 <_realloc_r+0x252>
8000c08a:	08 99       	mov	r9,r4
8000c08c:	18 98       	mov	r8,r12
8000c08e:	59 3a       	cp.w	r10,19
8000c090:	e0 88 00 14 	brls	8000c0b8 <_realloc_r+0x244>
8000c094:	13 0b       	ld.w	r11,r9++
8000c096:	10 ab       	st.w	r8++,r11
8000c098:	13 0b       	ld.w	r11,r9++
8000c09a:	10 ab       	st.w	r8++,r11
8000c09c:	59 ba       	cp.w	r10,27
8000c09e:	e0 88 00 0d 	brls	8000c0b8 <_realloc_r+0x244>
8000c0a2:	13 0b       	ld.w	r11,r9++
8000c0a4:	10 ab       	st.w	r8++,r11
8000c0a6:	13 0b       	ld.w	r11,r9++
8000c0a8:	10 ab       	st.w	r8++,r11
8000c0aa:	e0 4a 00 24 	cp.w	r10,36
8000c0ae:	c0 51       	brne	8000c0b8 <_realloc_r+0x244>
8000c0b0:	13 0a       	ld.w	r10,r9++
8000c0b2:	10 aa       	st.w	r8++,r10
8000c0b4:	13 0a       	ld.w	r10,r9++
8000c0b6:	10 aa       	st.w	r8++,r10
8000c0b8:	13 0a       	ld.w	r10,r9++
8000c0ba:	10 aa       	st.w	r8++,r10
8000c0bc:	72 0a       	ld.w	r10,r9[0x0]
8000c0be:	91 0a       	st.w	r8[0x0],r10
8000c0c0:	72 19       	ld.w	r9,r9[0x4]
8000c0c2:	91 19       	st.w	r8[0x4],r9
8000c0c4:	c0 48       	rjmp	8000c0cc <_realloc_r+0x258>
8000c0c6:	08 9b       	mov	r11,r4
8000c0c8:	fe b0 fb c5 	rcall	8000b852 <memmove>
8000c0cc:	08 9b       	mov	r11,r4
8000c0ce:	04 9c       	mov	r12,r2
8000c0d0:	fe b0 df f0 	rcall	800080b0 <_free_r>
8000c0d4:	04 9c       	mov	r12,r2
8000c0d6:	c2 a8       	rjmp	8000c12a <_realloc_r+0x2b6>
8000c0d8:	00 93       	mov	r3,r0
8000c0da:	02 97       	mov	r7,r1
8000c0dc:	e6 06 01 09 	sub	r9,r3,r6
8000c0e0:	6e 18       	ld.w	r8,r7[0x4]
8000c0e2:	58 f9       	cp.w	r9,15
8000c0e4:	e0 88 00 16 	brls	8000c110 <_realloc_r+0x29c>
8000c0e8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000c0ec:	ed e8 10 08 	or	r8,r6,r8
8000c0f0:	8f 18       	st.w	r7[0x4],r8
8000c0f2:	12 98       	mov	r8,r9
8000c0f4:	a1 a8       	sbr	r8,0x0
8000c0f6:	ee 06 00 0b 	add	r11,r7,r6
8000c0fa:	f6 09 00 09 	add	r9,r11,r9
8000c0fe:	97 18       	st.w	r11[0x4],r8
8000c100:	72 18       	ld.w	r8,r9[0x4]
8000c102:	a1 a8       	sbr	r8,0x0
8000c104:	2f 8b       	sub	r11,-8
8000c106:	93 18       	st.w	r9[0x4],r8
8000c108:	04 9c       	mov	r12,r2
8000c10a:	fe b0 df d3 	rcall	800080b0 <_free_r>
8000c10e:	c0 b8       	rjmp	8000c124 <_realloc_r+0x2b0>
8000c110:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000c114:	e7 e8 10 08 	or	r8,r3,r8
8000c118:	8f 18       	st.w	r7[0x4],r8
8000c11a:	ee 03 00 03 	add	r3,r7,r3
8000c11e:	66 18       	ld.w	r8,r3[0x4]
8000c120:	a1 a8       	sbr	r8,0x0
8000c122:	87 18       	st.w	r3[0x4],r8
8000c124:	04 9c       	mov	r12,r2
8000c126:	ee c5 ff f8 	sub	r5,r7,-8
8000c12a:	fe b0 de c6 	rcall	80007eb6 <__malloc_unlock>
8000c12e:	0a 9c       	mov	r12,r5
8000c130:	2f fd       	sub	sp,-4
8000c132:	d8 32       	popm	r0-r7,pc

8000c134 <__isinfd>:
8000c134:	14 98       	mov	r8,r10
8000c136:	fc 19 7f f0 	movh	r9,0x7ff0
8000c13a:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000c13e:	f0 0b 11 00 	rsub	r11,r8,0
8000c142:	f7 e8 10 08 	or	r8,r11,r8
8000c146:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000c14a:	f2 08 01 08 	sub	r8,r9,r8
8000c14e:	f0 0c 11 00 	rsub	r12,r8,0
8000c152:	f9 e8 10 08 	or	r8,r12,r8
8000c156:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000c15a:	2f fc       	sub	r12,-1
8000c15c:	5e fc       	retal	r12

8000c15e <__isnand>:
8000c15e:	14 98       	mov	r8,r10
8000c160:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000c164:	f0 0c 11 00 	rsub	r12,r8,0
8000c168:	10 4c       	or	r12,r8
8000c16a:	fc 18 7f f0 	movh	r8,0x7ff0
8000c16e:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000c172:	f0 0c 01 0c 	sub	r12,r8,r12
8000c176:	bf 9c       	lsr	r12,0x1f
8000c178:	5e fc       	retal	r12
8000c17a:	d7 03       	nop

8000c17c <__sclose>:
8000c17c:	d4 01       	pushm	lr
8000c17e:	96 7b       	ld.sh	r11,r11[0xe]
8000c180:	c8 2c       	rcall	8000c284 <_close_r>
8000c182:	d8 02       	popm	pc

8000c184 <__sseek>:
8000c184:	d4 21       	pushm	r4-r7,lr
8000c186:	16 97       	mov	r7,r11
8000c188:	96 7b       	ld.sh	r11,r11[0xe]
8000c18a:	c0 3d       	rcall	8000c390 <_lseek_r>
8000c18c:	8e 68       	ld.sh	r8,r7[0xc]
8000c18e:	10 99       	mov	r9,r8
8000c190:	ad c8       	cbr	r8,0xc
8000c192:	ad a9       	sbr	r9,0xc
8000c194:	5b fc       	cp.w	r12,-1
8000c196:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000c19a:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000c19e:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000c1a2:	d8 22       	popm	r4-r7,pc

8000c1a4 <__swrite>:
8000c1a4:	d4 21       	pushm	r4-r7,lr
8000c1a6:	96 68       	ld.sh	r8,r11[0xc]
8000c1a8:	16 97       	mov	r7,r11
8000c1aa:	14 95       	mov	r5,r10
8000c1ac:	12 94       	mov	r4,r9
8000c1ae:	e2 18 01 00 	andl	r8,0x100,COH
8000c1b2:	18 96       	mov	r6,r12
8000c1b4:	c0 50       	breq	8000c1be <__swrite+0x1a>
8000c1b6:	30 29       	mov	r9,2
8000c1b8:	30 0a       	mov	r10,0
8000c1ba:	96 7b       	ld.sh	r11,r11[0xe]
8000c1bc:	ce ac       	rcall	8000c390 <_lseek_r>
8000c1be:	8e 68       	ld.sh	r8,r7[0xc]
8000c1c0:	ad c8       	cbr	r8,0xc
8000c1c2:	08 99       	mov	r9,r4
8000c1c4:	0a 9a       	mov	r10,r5
8000c1c6:	8e 7b       	ld.sh	r11,r7[0xe]
8000c1c8:	0c 9c       	mov	r12,r6
8000c1ca:	ae 68       	st.h	r7[0xc],r8
8000c1cc:	c1 cc       	rcall	8000c204 <_write_r>
8000c1ce:	d8 22       	popm	r4-r7,pc

8000c1d0 <__sread>:
8000c1d0:	d4 21       	pushm	r4-r7,lr
8000c1d2:	16 97       	mov	r7,r11
8000c1d4:	96 7b       	ld.sh	r11,r11[0xe]
8000c1d6:	cf 1c       	rcall	8000c3b8 <_read_r>
8000c1d8:	c0 65       	brlt	8000c1e4 <__sread+0x14>
8000c1da:	6f 58       	ld.w	r8,r7[0x54]
8000c1dc:	18 08       	add	r8,r12
8000c1de:	ef 48 00 54 	st.w	r7[84],r8
8000c1e2:	d8 22       	popm	r4-r7,pc
8000c1e4:	8e 68       	ld.sh	r8,r7[0xc]
8000c1e6:	ad c8       	cbr	r8,0xc
8000c1e8:	ae 68       	st.h	r7[0xc],r8
8000c1ea:	d8 22       	popm	r4-r7,pc

8000c1ec <strlen>:
8000c1ec:	30 09       	mov	r9,0
8000c1ee:	18 98       	mov	r8,r12
8000c1f0:	c0 28       	rjmp	8000c1f4 <strlen+0x8>
8000c1f2:	2f f8       	sub	r8,-1
8000c1f4:	11 8a       	ld.ub	r10,r8[0x0]
8000c1f6:	f2 0a 18 00 	cp.b	r10,r9
8000c1fa:	cf c1       	brne	8000c1f2 <strlen+0x6>
8000c1fc:	f0 0c 01 0c 	sub	r12,r8,r12
8000c200:	5e fc       	retal	r12
8000c202:	d7 03       	nop

8000c204 <_write_r>:
8000c204:	d4 21       	pushm	r4-r7,lr
8000c206:	16 98       	mov	r8,r11
8000c208:	18 97       	mov	r7,r12
8000c20a:	10 9c       	mov	r12,r8
8000c20c:	30 08       	mov	r8,0
8000c20e:	14 9b       	mov	r11,r10
8000c210:	e0 66 0c 40 	mov	r6,3136
8000c214:	12 9a       	mov	r10,r9
8000c216:	8d 08       	st.w	r6[0x0],r8
8000c218:	fe b0 de 7e 	rcall	80007f14 <_write>
8000c21c:	5b fc       	cp.w	r12,-1
8000c21e:	c0 51       	brne	8000c228 <_write_r+0x24>
8000c220:	6c 08       	ld.w	r8,r6[0x0]
8000c222:	58 08       	cp.w	r8,0
8000c224:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c228:	d8 22       	popm	r4-r7,pc
8000c22a:	d7 03       	nop

8000c22c <_calloc_r>:
8000c22c:	d4 21       	pushm	r4-r7,lr
8000c22e:	f4 0b 02 4b 	mul	r11,r10,r11
8000c232:	fe b0 db 89 	rcall	80007944 <_malloc_r>
8000c236:	18 97       	mov	r7,r12
8000c238:	c2 30       	breq	8000c27e <_calloc_r+0x52>
8000c23a:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000c23e:	e0 1a ff fc 	andl	r10,0xfffc
8000c242:	20 4a       	sub	r10,4
8000c244:	e0 4a 00 24 	cp.w	r10,36
8000c248:	e0 8b 00 18 	brhi	8000c278 <_calloc_r+0x4c>
8000c24c:	18 98       	mov	r8,r12
8000c24e:	59 3a       	cp.w	r10,19
8000c250:	e0 88 00 0f 	brls	8000c26e <_calloc_r+0x42>
8000c254:	30 09       	mov	r9,0
8000c256:	10 a9       	st.w	r8++,r9
8000c258:	10 a9       	st.w	r8++,r9
8000c25a:	59 ba       	cp.w	r10,27
8000c25c:	e0 88 00 09 	brls	8000c26e <_calloc_r+0x42>
8000c260:	10 a9       	st.w	r8++,r9
8000c262:	10 a9       	st.w	r8++,r9
8000c264:	e0 4a 00 24 	cp.w	r10,36
8000c268:	c0 31       	brne	8000c26e <_calloc_r+0x42>
8000c26a:	10 a9       	st.w	r8++,r9
8000c26c:	10 a9       	st.w	r8++,r9
8000c26e:	30 09       	mov	r9,0
8000c270:	10 a9       	st.w	r8++,r9
8000c272:	91 19       	st.w	r8[0x4],r9
8000c274:	91 09       	st.w	r8[0x0],r9
8000c276:	c0 48       	rjmp	8000c27e <_calloc_r+0x52>
8000c278:	30 0b       	mov	r11,0
8000c27a:	fe b0 fb 0b 	rcall	8000b890 <memset>
8000c27e:	0e 9c       	mov	r12,r7
8000c280:	d8 22       	popm	r4-r7,pc
8000c282:	d7 03       	nop

8000c284 <_close_r>:
8000c284:	d4 21       	pushm	r4-r7,lr
8000c286:	30 08       	mov	r8,0
8000c288:	18 97       	mov	r7,r12
8000c28a:	e0 66 0c 40 	mov	r6,3136
8000c28e:	16 9c       	mov	r12,r11
8000c290:	8d 08       	st.w	r6[0x0],r8
8000c292:	fe b0 de 23 	rcall	80007ed8 <_close>
8000c296:	5b fc       	cp.w	r12,-1
8000c298:	c0 51       	brne	8000c2a2 <_close_r+0x1e>
8000c29a:	6c 08       	ld.w	r8,r6[0x0]
8000c29c:	58 08       	cp.w	r8,0
8000c29e:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c2a2:	d8 22       	popm	r4-r7,pc

8000c2a4 <_fclose_r>:
8000c2a4:	d4 21       	pushm	r4-r7,lr
8000c2a6:	18 96       	mov	r6,r12
8000c2a8:	16 97       	mov	r7,r11
8000c2aa:	58 0b       	cp.w	r11,0
8000c2ac:	c0 31       	brne	8000c2b2 <_fclose_r+0xe>
8000c2ae:	16 95       	mov	r5,r11
8000c2b0:	c5 38       	rjmp	8000c356 <_fclose_r+0xb2>
8000c2b2:	fe b0 f8 55 	rcall	8000b35c <__sfp_lock_acquire>
8000c2b6:	58 06       	cp.w	r6,0
8000c2b8:	c0 70       	breq	8000c2c6 <_fclose_r+0x22>
8000c2ba:	6c 68       	ld.w	r8,r6[0x18]
8000c2bc:	58 08       	cp.w	r8,0
8000c2be:	c0 41       	brne	8000c2c6 <_fclose_r+0x22>
8000c2c0:	0c 9c       	mov	r12,r6
8000c2c2:	fe b0 f8 9f 	rcall	8000b400 <__sinit>
8000c2c6:	fe c8 e8 e2 	sub	r8,pc,-5918
8000c2ca:	10 37       	cp.w	r7,r8
8000c2cc:	c0 31       	brne	8000c2d2 <_fclose_r+0x2e>
8000c2ce:	6c 07       	ld.w	r7,r6[0x0]
8000c2d0:	c0 c8       	rjmp	8000c2e8 <_fclose_r+0x44>
8000c2d2:	fe c8 e8 ce 	sub	r8,pc,-5938
8000c2d6:	10 37       	cp.w	r7,r8
8000c2d8:	c0 31       	brne	8000c2de <_fclose_r+0x3a>
8000c2da:	6c 17       	ld.w	r7,r6[0x4]
8000c2dc:	c0 68       	rjmp	8000c2e8 <_fclose_r+0x44>
8000c2de:	fe c8 e8 ba 	sub	r8,pc,-5958
8000c2e2:	10 37       	cp.w	r7,r8
8000c2e4:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000c2e8:	8e 69       	ld.sh	r9,r7[0xc]
8000c2ea:	30 08       	mov	r8,0
8000c2ec:	f0 09 19 00 	cp.h	r9,r8
8000c2f0:	c0 51       	brne	8000c2fa <_fclose_r+0x56>
8000c2f2:	fe b0 f8 36 	rcall	8000b35e <__sfp_lock_release>
8000c2f6:	30 05       	mov	r5,0
8000c2f8:	c2 f8       	rjmp	8000c356 <_fclose_r+0xb2>
8000c2fa:	0e 9b       	mov	r11,r7
8000c2fc:	0c 9c       	mov	r12,r6
8000c2fe:	fe b0 f7 a9 	rcall	8000b250 <_fflush_r>
8000c302:	6e c8       	ld.w	r8,r7[0x30]
8000c304:	18 95       	mov	r5,r12
8000c306:	58 08       	cp.w	r8,0
8000c308:	c0 60       	breq	8000c314 <_fclose_r+0x70>
8000c30a:	6e 8b       	ld.w	r11,r7[0x20]
8000c30c:	0c 9c       	mov	r12,r6
8000c30e:	5d 18       	icall	r8
8000c310:	f9 b5 05 ff 	movlt	r5,-1
8000c314:	8e 68       	ld.sh	r8,r7[0xc]
8000c316:	ed b8 00 07 	bld	r8,0x7
8000c31a:	c0 51       	brne	8000c324 <_fclose_r+0x80>
8000c31c:	6e 4b       	ld.w	r11,r7[0x10]
8000c31e:	0c 9c       	mov	r12,r6
8000c320:	fe b0 de c8 	rcall	800080b0 <_free_r>
8000c324:	6e db       	ld.w	r11,r7[0x34]
8000c326:	58 0b       	cp.w	r11,0
8000c328:	c0 a0       	breq	8000c33c <_fclose_r+0x98>
8000c32a:	ee c8 ff bc 	sub	r8,r7,-68
8000c32e:	10 3b       	cp.w	r11,r8
8000c330:	c0 40       	breq	8000c338 <_fclose_r+0x94>
8000c332:	0c 9c       	mov	r12,r6
8000c334:	fe b0 de be 	rcall	800080b0 <_free_r>
8000c338:	30 08       	mov	r8,0
8000c33a:	8f d8       	st.w	r7[0x34],r8
8000c33c:	6f 2b       	ld.w	r11,r7[0x48]
8000c33e:	58 0b       	cp.w	r11,0
8000c340:	c0 70       	breq	8000c34e <_fclose_r+0xaa>
8000c342:	0c 9c       	mov	r12,r6
8000c344:	fe b0 de b6 	rcall	800080b0 <_free_r>
8000c348:	30 08       	mov	r8,0
8000c34a:	ef 48 00 48 	st.w	r7[72],r8
8000c34e:	30 08       	mov	r8,0
8000c350:	ae 68       	st.h	r7[0xc],r8
8000c352:	fe b0 f8 06 	rcall	8000b35e <__sfp_lock_release>
8000c356:	0a 9c       	mov	r12,r5
8000c358:	d8 22       	popm	r4-r7,pc
8000c35a:	d7 03       	nop

8000c35c <fclose>:
8000c35c:	d4 01       	pushm	lr
8000c35e:	e0 68 08 cc 	mov	r8,2252
8000c362:	18 9b       	mov	r11,r12
8000c364:	70 0c       	ld.w	r12,r8[0x0]
8000c366:	c9 ff       	rcall	8000c2a4 <_fclose_r>
8000c368:	d8 02       	popm	pc
8000c36a:	d7 03       	nop

8000c36c <_fstat_r>:
8000c36c:	d4 21       	pushm	r4-r7,lr
8000c36e:	16 98       	mov	r8,r11
8000c370:	18 97       	mov	r7,r12
8000c372:	10 9c       	mov	r12,r8
8000c374:	30 08       	mov	r8,0
8000c376:	e0 66 0c 40 	mov	r6,3136
8000c37a:	14 9b       	mov	r11,r10
8000c37c:	8d 08       	st.w	r6[0x0],r8
8000c37e:	fe b0 dd e9 	rcall	80007f50 <_fstat>
8000c382:	5b fc       	cp.w	r12,-1
8000c384:	c0 51       	brne	8000c38e <_fstat_r+0x22>
8000c386:	6c 08       	ld.w	r8,r6[0x0]
8000c388:	58 08       	cp.w	r8,0
8000c38a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c38e:	d8 22       	popm	r4-r7,pc

8000c390 <_lseek_r>:
8000c390:	d4 21       	pushm	r4-r7,lr
8000c392:	16 98       	mov	r8,r11
8000c394:	18 97       	mov	r7,r12
8000c396:	10 9c       	mov	r12,r8
8000c398:	30 08       	mov	r8,0
8000c39a:	14 9b       	mov	r11,r10
8000c39c:	e0 66 0c 40 	mov	r6,3136
8000c3a0:	12 9a       	mov	r10,r9
8000c3a2:	8d 08       	st.w	r6[0x0],r8
8000c3a4:	fe b0 dd a4 	rcall	80007eec <_lseek>
8000c3a8:	5b fc       	cp.w	r12,-1
8000c3aa:	c0 51       	brne	8000c3b4 <_lseek_r+0x24>
8000c3ac:	6c 08       	ld.w	r8,r6[0x0]
8000c3ae:	58 08       	cp.w	r8,0
8000c3b0:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c3b4:	d8 22       	popm	r4-r7,pc
8000c3b6:	d7 03       	nop

8000c3b8 <_read_r>:
8000c3b8:	d4 21       	pushm	r4-r7,lr
8000c3ba:	16 98       	mov	r8,r11
8000c3bc:	18 97       	mov	r7,r12
8000c3be:	10 9c       	mov	r12,r8
8000c3c0:	30 08       	mov	r8,0
8000c3c2:	14 9b       	mov	r11,r10
8000c3c4:	e0 66 0c 40 	mov	r6,3136
8000c3c8:	12 9a       	mov	r10,r9
8000c3ca:	8d 08       	st.w	r6[0x0],r8
8000c3cc:	fe b0 dd 9a 	rcall	80007f00 <_read>
8000c3d0:	5b fc       	cp.w	r12,-1
8000c3d2:	c0 51       	brne	8000c3dc <_read_r+0x24>
8000c3d4:	6c 08       	ld.w	r8,r6[0x0]
8000c3d6:	58 08       	cp.w	r8,0
8000c3d8:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c3dc:	d8 22       	popm	r4-r7,pc
8000c3de:	d7 03       	nop

8000c3e0 <__avr32_f64_mul>:
8000c3e0:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000c3e4:	e0 80 00 dc 	breq	8000c59c <__avr32_f64_mul_op1_zero>
8000c3e8:	d4 21       	pushm	r4-r7,lr
8000c3ea:	f7 e9 20 0e 	eor	lr,r11,r9
8000c3ee:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000c3f2:	30 15       	mov	r5,1
8000c3f4:	c4 30       	breq	8000c47a <__avr32_f64_mul_op1_subnormal>
8000c3f6:	ab 6b       	lsl	r11,0xa
8000c3f8:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000c3fc:	ab 6a       	lsl	r10,0xa
8000c3fe:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000c402:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000c406:	c5 c0       	breq	8000c4be <__avr32_f64_mul_op2_subnormal>
8000c408:	a1 78       	lsl	r8,0x1
8000c40a:	5c f9       	rol	r9
8000c40c:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000c410:	e0 47 07 ff 	cp.w	r7,2047
8000c414:	c7 70       	breq	8000c502 <__avr32_f64_mul_op_nan_or_inf>
8000c416:	e0 46 07 ff 	cp.w	r6,2047
8000c41a:	c7 40       	breq	8000c502 <__avr32_f64_mul_op_nan_or_inf>
8000c41c:	ee 06 00 0c 	add	r12,r7,r6
8000c420:	e0 2c 03 fe 	sub	r12,1022
8000c424:	f6 08 06 44 	mulu.d	r4,r11,r8
8000c428:	f4 09 07 44 	macu.d	r4,r10,r9
8000c42c:	f4 08 06 46 	mulu.d	r6,r10,r8
8000c430:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000c434:	08 07       	add	r7,r4
8000c436:	f4 05 00 4a 	adc	r10,r10,r5
8000c43a:	5c 0b       	acr	r11
8000c43c:	ed bb 00 14 	bld	r11,0x14
8000c440:	c0 50       	breq	8000c44a <__avr32_f64_mul+0x6a>
8000c442:	a1 77       	lsl	r7,0x1
8000c444:	5c fa       	rol	r10
8000c446:	5c fb       	rol	r11
8000c448:	20 1c       	sub	r12,1
8000c44a:	58 0c       	cp.w	r12,0
8000c44c:	e0 8a 00 6f 	brle	8000c52a <__avr32_f64_mul_res_subnormal>
8000c450:	e0 4c 07 ff 	cp.w	r12,2047
8000c454:	e0 84 00 9c 	brge	8000c58c <__avr32_f64_mul_res_inf>
8000c458:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000c45c:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000c460:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000c464:	ee 17 80 00 	eorh	r7,0x8000
8000c468:	f1 b7 04 20 	satu	r7,0x1
8000c46c:	0e 0a       	add	r10,r7
8000c46e:	5c 0b       	acr	r11
8000c470:	ed be 00 1f 	bld	lr,0x1f
8000c474:	ef bb 00 1f 	bst	r11,0x1f
8000c478:	d8 22       	popm	r4-r7,pc

8000c47a <__avr32_f64_mul_op1_subnormal>:
8000c47a:	e4 1b 00 0f 	andh	r11,0xf
8000c47e:	f4 0c 12 00 	clz	r12,r10
8000c482:	f6 06 12 00 	clz	r6,r11
8000c486:	f7 bc 03 e1 	sublo	r12,-31
8000c48a:	f8 06 17 30 	movlo	r6,r12
8000c48e:	f7 b6 02 01 	subhs	r6,1
8000c492:	e0 46 00 20 	cp.w	r6,32
8000c496:	c0 d4       	brge	8000c4b0 <__avr32_f64_mul_op1_subnormal+0x36>
8000c498:	ec 0c 11 20 	rsub	r12,r6,32
8000c49c:	f6 06 09 4b 	lsl	r11,r11,r6
8000c4a0:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000c4a4:	18 4b       	or	r11,r12
8000c4a6:	f4 06 09 4a 	lsl	r10,r10,r6
8000c4aa:	20 b6       	sub	r6,11
8000c4ac:	0c 17       	sub	r7,r6
8000c4ae:	ca ab       	rjmp	8000c402 <__avr32_f64_mul+0x22>
8000c4b0:	f4 06 09 4b 	lsl	r11,r10,r6
8000c4b4:	c6 40       	breq	8000c57c <__avr32_f64_mul_res_zero>
8000c4b6:	30 0a       	mov	r10,0
8000c4b8:	20 b6       	sub	r6,11
8000c4ba:	0c 17       	sub	r7,r6
8000c4bc:	ca 3b       	rjmp	8000c402 <__avr32_f64_mul+0x22>

8000c4be <__avr32_f64_mul_op2_subnormal>:
8000c4be:	e4 19 00 0f 	andh	r9,0xf
8000c4c2:	f0 0c 12 00 	clz	r12,r8
8000c4c6:	f2 05 12 00 	clz	r5,r9
8000c4ca:	f7 bc 03 ea 	sublo	r12,-22
8000c4ce:	f8 05 17 30 	movlo	r5,r12
8000c4d2:	f7 b5 02 0a 	subhs	r5,10
8000c4d6:	e0 45 00 20 	cp.w	r5,32
8000c4da:	c0 d4       	brge	8000c4f4 <__avr32_f64_mul_op2_subnormal+0x36>
8000c4dc:	ea 0c 11 20 	rsub	r12,r5,32
8000c4e0:	f2 05 09 49 	lsl	r9,r9,r5
8000c4e4:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000c4e8:	18 49       	or	r9,r12
8000c4ea:	f0 05 09 48 	lsl	r8,r8,r5
8000c4ee:	20 25       	sub	r5,2
8000c4f0:	0a 16       	sub	r6,r5
8000c4f2:	c8 fb       	rjmp	8000c410 <__avr32_f64_mul+0x30>
8000c4f4:	f0 05 09 49 	lsl	r9,r8,r5
8000c4f8:	c4 20       	breq	8000c57c <__avr32_f64_mul_res_zero>
8000c4fa:	30 08       	mov	r8,0
8000c4fc:	20 25       	sub	r5,2
8000c4fe:	0a 16       	sub	r6,r5
8000c500:	c8 8b       	rjmp	8000c410 <__avr32_f64_mul+0x30>

8000c502 <__avr32_f64_mul_op_nan_or_inf>:
8000c502:	e4 19 00 0f 	andh	r9,0xf
8000c506:	e4 1b 00 0f 	andh	r11,0xf
8000c50a:	14 4b       	or	r11,r10
8000c50c:	10 49       	or	r9,r8
8000c50e:	e0 47 07 ff 	cp.w	r7,2047
8000c512:	c0 91       	brne	8000c524 <__avr32_f64_mul_op1_not_naninf>
8000c514:	58 0b       	cp.w	r11,0
8000c516:	c3 81       	brne	8000c586 <__avr32_f64_mul_res_nan>
8000c518:	e0 46 07 ff 	cp.w	r6,2047
8000c51c:	c3 81       	brne	8000c58c <__avr32_f64_mul_res_inf>
8000c51e:	58 09       	cp.w	r9,0
8000c520:	c3 60       	breq	8000c58c <__avr32_f64_mul_res_inf>
8000c522:	c3 28       	rjmp	8000c586 <__avr32_f64_mul_res_nan>

8000c524 <__avr32_f64_mul_op1_not_naninf>:
8000c524:	58 09       	cp.w	r9,0
8000c526:	c3 30       	breq	8000c58c <__avr32_f64_mul_res_inf>
8000c528:	c2 f8       	rjmp	8000c586 <__avr32_f64_mul_res_nan>

8000c52a <__avr32_f64_mul_res_subnormal>:
8000c52a:	5c 3c       	neg	r12
8000c52c:	2f fc       	sub	r12,-1
8000c52e:	f1 bc 04 c0 	satu	r12,0x6
8000c532:	e0 4c 00 20 	cp.w	r12,32
8000c536:	c1 14       	brge	8000c558 <__avr32_f64_mul_res_subnormal+0x2e>
8000c538:	f8 08 11 20 	rsub	r8,r12,32
8000c53c:	0e 46       	or	r6,r7
8000c53e:	ee 0c 0a 47 	lsr	r7,r7,r12
8000c542:	f4 08 09 49 	lsl	r9,r10,r8
8000c546:	12 47       	or	r7,r9
8000c548:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000c54c:	f6 08 09 49 	lsl	r9,r11,r8
8000c550:	12 4a       	or	r10,r9
8000c552:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000c556:	c8 3b       	rjmp	8000c45c <__avr32_f64_mul+0x7c>
8000c558:	f8 08 11 20 	rsub	r8,r12,32
8000c55c:	f9 b9 00 00 	moveq	r9,0
8000c560:	c0 30       	breq	8000c566 <__avr32_f64_mul_res_subnormal+0x3c>
8000c562:	f6 08 09 49 	lsl	r9,r11,r8
8000c566:	0e 46       	or	r6,r7
8000c568:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000c56c:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000c570:	f3 ea 10 07 	or	r7,r9,r10
8000c574:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000c578:	30 0b       	mov	r11,0
8000c57a:	c7 1b       	rjmp	8000c45c <__avr32_f64_mul+0x7c>

8000c57c <__avr32_f64_mul_res_zero>:
8000c57c:	1c 9b       	mov	r11,lr
8000c57e:	e6 1b 80 00 	andh	r11,0x8000,COH
8000c582:	30 0a       	mov	r10,0
8000c584:	d8 22       	popm	r4-r7,pc

8000c586 <__avr32_f64_mul_res_nan>:
8000c586:	3f fb       	mov	r11,-1
8000c588:	3f fa       	mov	r10,-1
8000c58a:	d8 22       	popm	r4-r7,pc

8000c58c <__avr32_f64_mul_res_inf>:
8000c58c:	f0 6b 00 00 	mov	r11,-1048576
8000c590:	ed be 00 1f 	bld	lr,0x1f
8000c594:	ef bb 00 1f 	bst	r11,0x1f
8000c598:	30 0a       	mov	r10,0
8000c59a:	d8 22       	popm	r4-r7,pc

8000c59c <__avr32_f64_mul_op1_zero>:
8000c59c:	f7 e9 20 0b 	eor	r11,r11,r9
8000c5a0:	e6 1b 80 00 	andh	r11,0x8000,COH
8000c5a4:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000c5a8:	e0 4c 07 ff 	cp.w	r12,2047
8000c5ac:	5e 1c       	retne	r12
8000c5ae:	3f fa       	mov	r10,-1
8000c5b0:	3f fb       	mov	r11,-1
8000c5b2:	5e fc       	retal	r12

8000c5b4 <__avr32_f64_sub_from_add>:
8000c5b4:	ee 19 80 00 	eorh	r9,0x8000

8000c5b8 <__avr32_f64_sub>:
8000c5b8:	f7 e9 20 0c 	eor	r12,r11,r9
8000c5bc:	e0 86 00 ca 	brmi	8000c750 <__avr32_f64_add_from_sub>
8000c5c0:	eb cd 40 e0 	pushm	r5-r7,lr
8000c5c4:	16 9c       	mov	r12,r11
8000c5c6:	e6 1c 80 00 	andh	r12,0x8000,COH
8000c5ca:	bf db       	cbr	r11,0x1f
8000c5cc:	bf d9       	cbr	r9,0x1f
8000c5ce:	10 3a       	cp.w	r10,r8
8000c5d0:	f2 0b 13 00 	cpc	r11,r9
8000c5d4:	c0 92       	brcc	8000c5e6 <__avr32_f64_sub+0x2e>
8000c5d6:	16 97       	mov	r7,r11
8000c5d8:	12 9b       	mov	r11,r9
8000c5da:	0e 99       	mov	r9,r7
8000c5dc:	14 97       	mov	r7,r10
8000c5de:	10 9a       	mov	r10,r8
8000c5e0:	0e 98       	mov	r8,r7
8000c5e2:	ee 1c 80 00 	eorh	r12,0x8000
8000c5e6:	f6 07 16 14 	lsr	r7,r11,0x14
8000c5ea:	ab 7b       	lsl	r11,0xb
8000c5ec:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000c5f0:	ab 7a       	lsl	r10,0xb
8000c5f2:	bf bb       	sbr	r11,0x1f
8000c5f4:	f2 06 16 14 	lsr	r6,r9,0x14
8000c5f8:	c4 40       	breq	8000c680 <__avr32_f64_sub_opL_subnormal>
8000c5fa:	ab 79       	lsl	r9,0xb
8000c5fc:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000c600:	ab 78       	lsl	r8,0xb
8000c602:	bf b9       	sbr	r9,0x1f

8000c604 <__avr32_f64_sub_opL_subnormal_done>:
8000c604:	e0 47 07 ff 	cp.w	r7,2047
8000c608:	c4 f0       	breq	8000c6a6 <__avr32_f64_sub_opH_nan_or_inf>
8000c60a:	0e 26       	rsub	r6,r7
8000c60c:	c1 20       	breq	8000c630 <__avr32_f64_sub_shift_done>
8000c60e:	ec 05 11 20 	rsub	r5,r6,32
8000c612:	e0 46 00 20 	cp.w	r6,32
8000c616:	c7 c2       	brcc	8000c70e <__avr32_f64_sub_longshift>
8000c618:	f0 05 09 4e 	lsl	lr,r8,r5
8000c61c:	f2 05 09 45 	lsl	r5,r9,r5
8000c620:	f0 06 0a 48 	lsr	r8,r8,r6
8000c624:	f2 06 0a 49 	lsr	r9,r9,r6
8000c628:	0a 48       	or	r8,r5
8000c62a:	58 0e       	cp.w	lr,0
8000c62c:	5f 1e       	srne	lr
8000c62e:	1c 48       	or	r8,lr

8000c630 <__avr32_f64_sub_shift_done>:
8000c630:	10 1a       	sub	r10,r8
8000c632:	f6 09 01 4b 	sbc	r11,r11,r9
8000c636:	f6 06 12 00 	clz	r6,r11
8000c63a:	c0 e0       	breq	8000c656 <__avr32_f64_sub_longnormalize_done>
8000c63c:	c7 83       	brcs	8000c72c <__avr32_f64_sub_longnormalize>
8000c63e:	ec 0e 11 20 	rsub	lr,r6,32
8000c642:	f6 06 09 4b 	lsl	r11,r11,r6
8000c646:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000c64a:	1c 4b       	or	r11,lr
8000c64c:	f4 06 09 4a 	lsl	r10,r10,r6
8000c650:	0c 17       	sub	r7,r6
8000c652:	e0 8a 00 39 	brle	8000c6c4 <__avr32_f64_sub_subnormal_result>

8000c656 <__avr32_f64_sub_longnormalize_done>:
8000c656:	f4 09 15 15 	lsl	r9,r10,0x15
8000c65a:	ab 9a       	lsr	r10,0xb
8000c65c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000c660:	ab 9b       	lsr	r11,0xb
8000c662:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000c666:	18 4b       	or	r11,r12

8000c668 <__avr32_f64_sub_round>:
8000c668:	fc 17 80 00 	movh	r7,0x8000
8000c66c:	ed ba 00 00 	bld	r10,0x0
8000c670:	f7 b7 01 ff 	subne	r7,-1
8000c674:	0e 39       	cp.w	r9,r7
8000c676:	5f 29       	srhs	r9
8000c678:	12 0a       	add	r10,r9
8000c67a:	5c 0b       	acr	r11
8000c67c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c680 <__avr32_f64_sub_opL_subnormal>:
8000c680:	ab 79       	lsl	r9,0xb
8000c682:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000c686:	ab 78       	lsl	r8,0xb
8000c688:	f3 e8 10 0e 	or	lr,r9,r8
8000c68c:	f9 b6 01 01 	movne	r6,1
8000c690:	ee 0e 11 00 	rsub	lr,r7,0
8000c694:	f9 b7 00 01 	moveq	r7,1
8000c698:	ef bb 00 1f 	bst	r11,0x1f
8000c69c:	f7 ea 10 0e 	or	lr,r11,r10
8000c6a0:	f9 b7 00 00 	moveq	r7,0
8000c6a4:	cb 0b       	rjmp	8000c604 <__avr32_f64_sub_opL_subnormal_done>

8000c6a6 <__avr32_f64_sub_opH_nan_or_inf>:
8000c6a6:	bf db       	cbr	r11,0x1f
8000c6a8:	f7 ea 10 0e 	or	lr,r11,r10
8000c6ac:	c0 81       	brne	8000c6bc <__avr32_f64_sub_return_nan>
8000c6ae:	e0 46 07 ff 	cp.w	r6,2047
8000c6b2:	c0 50       	breq	8000c6bc <__avr32_f64_sub_return_nan>
8000c6b4:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000c6b8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c6bc <__avr32_f64_sub_return_nan>:
8000c6bc:	3f fa       	mov	r10,-1
8000c6be:	3f fb       	mov	r11,-1
8000c6c0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c6c4 <__avr32_f64_sub_subnormal_result>:
8000c6c4:	5c 37       	neg	r7
8000c6c6:	2f f7       	sub	r7,-1
8000c6c8:	f1 b7 04 c0 	satu	r7,0x6
8000c6cc:	e0 47 00 20 	cp.w	r7,32
8000c6d0:	c1 14       	brge	8000c6f2 <__avr32_f64_sub_subnormal_result+0x2e>
8000c6d2:	ee 08 11 20 	rsub	r8,r7,32
8000c6d6:	f4 08 09 49 	lsl	r9,r10,r8
8000c6da:	5f 16       	srne	r6
8000c6dc:	f4 07 0a 4a 	lsr	r10,r10,r7
8000c6e0:	0c 4a       	or	r10,r6
8000c6e2:	f6 08 09 49 	lsl	r9,r11,r8
8000c6e6:	f5 e9 10 0a 	or	r10,r10,r9
8000c6ea:	f4 07 0a 4b 	lsr	r11,r10,r7
8000c6ee:	30 07       	mov	r7,0
8000c6f0:	cb 3b       	rjmp	8000c656 <__avr32_f64_sub_longnormalize_done>
8000c6f2:	ee 08 11 40 	rsub	r8,r7,64
8000c6f6:	f6 08 09 49 	lsl	r9,r11,r8
8000c6fa:	14 49       	or	r9,r10
8000c6fc:	5f 16       	srne	r6
8000c6fe:	f6 07 0a 4a 	lsr	r10,r11,r7
8000c702:	0c 4a       	or	r10,r6
8000c704:	30 0b       	mov	r11,0
8000c706:	30 07       	mov	r7,0
8000c708:	ca 7b       	rjmp	8000c656 <__avr32_f64_sub_longnormalize_done>
8000c70a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c70e <__avr32_f64_sub_longshift>:
8000c70e:	f1 b6 04 c0 	satu	r6,0x6
8000c712:	f0 0e 17 00 	moveq	lr,r8
8000c716:	c0 40       	breq	8000c71e <__avr32_f64_sub_longshift+0x10>
8000c718:	f2 05 09 4e 	lsl	lr,r9,r5
8000c71c:	10 4e       	or	lr,r8
8000c71e:	f2 06 0a 48 	lsr	r8,r9,r6
8000c722:	30 09       	mov	r9,0
8000c724:	58 0e       	cp.w	lr,0
8000c726:	5f 1e       	srne	lr
8000c728:	1c 48       	or	r8,lr
8000c72a:	c8 3b       	rjmp	8000c630 <__avr32_f64_sub_shift_done>

8000c72c <__avr32_f64_sub_longnormalize>:
8000c72c:	f4 06 12 00 	clz	r6,r10
8000c730:	f9 b7 03 00 	movlo	r7,0
8000c734:	f9 b6 03 00 	movlo	r6,0
8000c738:	f9 bc 03 00 	movlo	r12,0
8000c73c:	f7 b6 02 e0 	subhs	r6,-32
8000c740:	f4 06 09 4b 	lsl	r11,r10,r6
8000c744:	30 0a       	mov	r10,0
8000c746:	0c 17       	sub	r7,r6
8000c748:	fe 9a ff be 	brle	8000c6c4 <__avr32_f64_sub_subnormal_result>
8000c74c:	c8 5b       	rjmp	8000c656 <__avr32_f64_sub_longnormalize_done>
8000c74e:	d7 03       	nop

8000c750 <__avr32_f64_add_from_sub>:
8000c750:	ee 19 80 00 	eorh	r9,0x8000

8000c754 <__avr32_f64_add>:
8000c754:	f7 e9 20 0c 	eor	r12,r11,r9
8000c758:	fe 96 ff 2e 	brmi	8000c5b4 <__avr32_f64_sub_from_add>
8000c75c:	eb cd 40 e0 	pushm	r5-r7,lr
8000c760:	16 9c       	mov	r12,r11
8000c762:	e6 1c 80 00 	andh	r12,0x8000,COH
8000c766:	bf db       	cbr	r11,0x1f
8000c768:	bf d9       	cbr	r9,0x1f
8000c76a:	12 3b       	cp.w	r11,r9
8000c76c:	c0 72       	brcc	8000c77a <__avr32_f64_add+0x26>
8000c76e:	16 97       	mov	r7,r11
8000c770:	12 9b       	mov	r11,r9
8000c772:	0e 99       	mov	r9,r7
8000c774:	14 97       	mov	r7,r10
8000c776:	10 9a       	mov	r10,r8
8000c778:	0e 98       	mov	r8,r7
8000c77a:	30 0e       	mov	lr,0
8000c77c:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000c780:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000c784:	b5 ab       	sbr	r11,0x14
8000c786:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000c78a:	c6 20       	breq	8000c84e <__avr32_f64_add_op2_subnormal>
8000c78c:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000c790:	b5 a9       	sbr	r9,0x14
8000c792:	e0 47 07 ff 	cp.w	r7,2047
8000c796:	c2 80       	breq	8000c7e6 <__avr32_f64_add_opH_nan_or_inf>
8000c798:	0e 26       	rsub	r6,r7
8000c79a:	c1 20       	breq	8000c7be <__avr32_f64_add_shift_done>
8000c79c:	e0 46 00 36 	cp.w	r6,54
8000c7a0:	c1 52       	brcc	8000c7ca <__avr32_f64_add_res_of_done>
8000c7a2:	ec 05 11 20 	rsub	r5,r6,32
8000c7a6:	e0 46 00 20 	cp.w	r6,32
8000c7aa:	c3 52       	brcc	8000c814 <__avr32_f64_add_longshift>
8000c7ac:	f0 05 09 4e 	lsl	lr,r8,r5
8000c7b0:	f2 05 09 45 	lsl	r5,r9,r5
8000c7b4:	f0 06 0a 48 	lsr	r8,r8,r6
8000c7b8:	f2 06 0a 49 	lsr	r9,r9,r6
8000c7bc:	0a 48       	or	r8,r5

8000c7be <__avr32_f64_add_shift_done>:
8000c7be:	10 0a       	add	r10,r8
8000c7c0:	f6 09 00 4b 	adc	r11,r11,r9
8000c7c4:	ed bb 00 15 	bld	r11,0x15
8000c7c8:	c3 40       	breq	8000c830 <__avr32_f64_add_res_of>

8000c7ca <__avr32_f64_add_res_of_done>:
8000c7ca:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000c7ce:	18 4b       	or	r11,r12

8000c7d0 <__avr32_f64_add_round>:
8000c7d0:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000c7d4:	18 4e       	or	lr,r12
8000c7d6:	ee 1e 80 00 	eorh	lr,0x8000
8000c7da:	f1 be 04 20 	satu	lr,0x1
8000c7de:	1c 0a       	add	r10,lr
8000c7e0:	5c 0b       	acr	r11
8000c7e2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c7e6 <__avr32_f64_add_opH_nan_or_inf>:
8000c7e6:	b5 cb       	cbr	r11,0x14
8000c7e8:	f7 ea 10 0e 	or	lr,r11,r10
8000c7ec:	c1 01       	brne	8000c80c <__avr32_f64_add_return_nan>
8000c7ee:	e0 46 07 ff 	cp.w	r6,2047
8000c7f2:	c0 30       	breq	8000c7f8 <__avr32_f64_add_opL_nan_or_inf>
8000c7f4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c7f8 <__avr32_f64_add_opL_nan_or_inf>:
8000c7f8:	b5 c9       	cbr	r9,0x14
8000c7fa:	f3 e8 10 0e 	or	lr,r9,r8
8000c7fe:	c0 71       	brne	8000c80c <__avr32_f64_add_return_nan>
8000c800:	30 0a       	mov	r10,0
8000c802:	fc 1b 7f f0 	movh	r11,0x7ff0
8000c806:	18 4b       	or	r11,r12
8000c808:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c80c <__avr32_f64_add_return_nan>:
8000c80c:	3f fa       	mov	r10,-1
8000c80e:	3f fb       	mov	r11,-1
8000c810:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c814 <__avr32_f64_add_longshift>:
8000c814:	f1 b6 04 c0 	satu	r6,0x6
8000c818:	f0 0e 17 00 	moveq	lr,r8
8000c81c:	c0 60       	breq	8000c828 <__avr32_f64_add_longshift+0x14>
8000c81e:	f2 05 09 4e 	lsl	lr,r9,r5
8000c822:	58 08       	cp.w	r8,0
8000c824:	5f 18       	srne	r8
8000c826:	10 4e       	or	lr,r8
8000c828:	f2 06 0a 48 	lsr	r8,r9,r6
8000c82c:	30 09       	mov	r9,0
8000c82e:	cc 8b       	rjmp	8000c7be <__avr32_f64_add_shift_done>

8000c830 <__avr32_f64_add_res_of>:
8000c830:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000c834:	a1 9b       	lsr	r11,0x1
8000c836:	5d 0a       	ror	r10
8000c838:	5d 0e       	ror	lr
8000c83a:	2f f7       	sub	r7,-1
8000c83c:	e0 47 07 ff 	cp.w	r7,2047
8000c840:	f9 ba 00 00 	moveq	r10,0
8000c844:	f9 bb 00 00 	moveq	r11,0
8000c848:	f9 be 00 00 	moveq	lr,0
8000c84c:	cb fb       	rjmp	8000c7ca <__avr32_f64_add_res_of_done>

8000c84e <__avr32_f64_add_op2_subnormal>:
8000c84e:	30 16       	mov	r6,1
8000c850:	58 07       	cp.w	r7,0
8000c852:	ca 01       	brne	8000c792 <__avr32_f64_add+0x3e>
8000c854:	b5 cb       	cbr	r11,0x14
8000c856:	10 0a       	add	r10,r8
8000c858:	f6 09 00 4b 	adc	r11,r11,r9
8000c85c:	18 4b       	or	r11,r12
8000c85e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000c862:	d7 03       	nop

8000c864 <__avr32_f64_to_u32>:
8000c864:	58 0b       	cp.w	r11,0
8000c866:	5e 6d       	retmi	0

8000c868 <__avr32_f64_to_s32>:
8000c868:	f6 0c 15 01 	lsl	r12,r11,0x1
8000c86c:	b5 9c       	lsr	r12,0x15
8000c86e:	e0 2c 03 ff 	sub	r12,1023
8000c872:	5e 3d       	retlo	0
8000c874:	f8 0c 11 1f 	rsub	r12,r12,31
8000c878:	16 99       	mov	r9,r11
8000c87a:	ab 7b       	lsl	r11,0xb
8000c87c:	bf bb       	sbr	r11,0x1f
8000c87e:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000c882:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000c886:	a1 79       	lsl	r9,0x1
8000c888:	5e 2b       	reths	r11
8000c88a:	5c 3b       	neg	r11
8000c88c:	5e fb       	retal	r11

8000c88e <__avr32_u32_to_f64>:
8000c88e:	f8 cb 00 00 	sub	r11,r12,0
8000c892:	30 0c       	mov	r12,0
8000c894:	c0 38       	rjmp	8000c89a <__avr32_s32_to_f64+0x4>

8000c896 <__avr32_s32_to_f64>:
8000c896:	18 9b       	mov	r11,r12
8000c898:	5c 4b       	abs	r11
8000c89a:	30 0a       	mov	r10,0
8000c89c:	5e 0b       	reteq	r11
8000c89e:	d4 01       	pushm	lr
8000c8a0:	e0 69 04 1e 	mov	r9,1054
8000c8a4:	f6 08 12 00 	clz	r8,r11
8000c8a8:	c1 70       	breq	8000c8d6 <__avr32_s32_to_f64+0x40>
8000c8aa:	c0 c3       	brcs	8000c8c2 <__avr32_s32_to_f64+0x2c>
8000c8ac:	f0 0e 11 20 	rsub	lr,r8,32
8000c8b0:	f6 08 09 4b 	lsl	r11,r11,r8
8000c8b4:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000c8b8:	1c 4b       	or	r11,lr
8000c8ba:	f4 08 09 4a 	lsl	r10,r10,r8
8000c8be:	10 19       	sub	r9,r8
8000c8c0:	c0 b8       	rjmp	8000c8d6 <__avr32_s32_to_f64+0x40>
8000c8c2:	f4 08 12 00 	clz	r8,r10
8000c8c6:	f9 b8 03 00 	movlo	r8,0
8000c8ca:	f7 b8 02 e0 	subhs	r8,-32
8000c8ce:	f4 08 09 4b 	lsl	r11,r10,r8
8000c8d2:	30 0a       	mov	r10,0
8000c8d4:	10 19       	sub	r9,r8
8000c8d6:	58 09       	cp.w	r9,0
8000c8d8:	e0 89 00 30 	brgt	8000c938 <__avr32_s32_to_f64+0xa2>
8000c8dc:	5c 39       	neg	r9
8000c8de:	2f f9       	sub	r9,-1
8000c8e0:	e0 49 00 36 	cp.w	r9,54
8000c8e4:	c0 43       	brcs	8000c8ec <__avr32_s32_to_f64+0x56>
8000c8e6:	30 0b       	mov	r11,0
8000c8e8:	30 0a       	mov	r10,0
8000c8ea:	c2 68       	rjmp	8000c936 <__avr32_s32_to_f64+0xa0>
8000c8ec:	2f 69       	sub	r9,-10
8000c8ee:	f2 08 11 20 	rsub	r8,r9,32
8000c8f2:	e0 49 00 20 	cp.w	r9,32
8000c8f6:	c0 b2       	brcc	8000c90c <__avr32_s32_to_f64+0x76>
8000c8f8:	f4 08 09 4e 	lsl	lr,r10,r8
8000c8fc:	f6 08 09 48 	lsl	r8,r11,r8
8000c900:	f4 09 0a 4a 	lsr	r10,r10,r9
8000c904:	f6 09 0a 4b 	lsr	r11,r11,r9
8000c908:	10 4b       	or	r11,r8
8000c90a:	c0 88       	rjmp	8000c91a <__avr32_s32_to_f64+0x84>
8000c90c:	f6 08 09 4e 	lsl	lr,r11,r8
8000c910:	14 4e       	or	lr,r10
8000c912:	16 9a       	mov	r10,r11
8000c914:	30 0b       	mov	r11,0
8000c916:	f4 09 0a 4a 	lsr	r10,r10,r9
8000c91a:	ed ba 00 00 	bld	r10,0x0
8000c91e:	c0 92       	brcc	8000c930 <__avr32_s32_to_f64+0x9a>
8000c920:	1c 7e       	tst	lr,lr
8000c922:	c0 41       	brne	8000c92a <__avr32_s32_to_f64+0x94>
8000c924:	ed ba 00 01 	bld	r10,0x1
8000c928:	c0 42       	brcc	8000c930 <__avr32_s32_to_f64+0x9a>
8000c92a:	2f fa       	sub	r10,-1
8000c92c:	f7 bb 02 ff 	subhs	r11,-1
8000c930:	5c fc       	rol	r12
8000c932:	5d 0b       	ror	r11
8000c934:	5d 0a       	ror	r10
8000c936:	d8 02       	popm	pc
8000c938:	e0 68 03 ff 	mov	r8,1023
8000c93c:	ed ba 00 0b 	bld	r10,0xb
8000c940:	f7 b8 00 ff 	subeq	r8,-1
8000c944:	10 0a       	add	r10,r8
8000c946:	5c 0b       	acr	r11
8000c948:	f7 b9 03 fe 	sublo	r9,-2
8000c94c:	e0 49 07 ff 	cp.w	r9,2047
8000c950:	c0 55       	brlt	8000c95a <__avr32_s32_to_f64+0xc4>
8000c952:	30 0a       	mov	r10,0
8000c954:	fc 1b ff e0 	movh	r11,0xffe0
8000c958:	c0 c8       	rjmp	8000c970 <__floatsidf_return_op1>
8000c95a:	ed bb 00 1f 	bld	r11,0x1f
8000c95e:	f7 b9 01 01 	subne	r9,1
8000c962:	ab 9a       	lsr	r10,0xb
8000c964:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000c968:	a1 7b       	lsl	r11,0x1
8000c96a:	ab 9b       	lsr	r11,0xb
8000c96c:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000c970 <__floatsidf_return_op1>:
8000c970:	a1 7c       	lsl	r12,0x1
8000c972:	5d 0b       	ror	r11
8000c974:	d8 02       	popm	pc

8000c976 <__avr32_f64_cmp_eq>:
8000c976:	10 3a       	cp.w	r10,r8
8000c978:	f2 0b 13 00 	cpc	r11,r9
8000c97c:	c0 80       	breq	8000c98c <__avr32_f64_cmp_eq+0x16>
8000c97e:	a1 7b       	lsl	r11,0x1
8000c980:	a1 79       	lsl	r9,0x1
8000c982:	14 4b       	or	r11,r10
8000c984:	12 4b       	or	r11,r9
8000c986:	10 4b       	or	r11,r8
8000c988:	5e 0f       	reteq	1
8000c98a:	5e fd       	retal	0
8000c98c:	a1 7b       	lsl	r11,0x1
8000c98e:	fc 1c ff e0 	movh	r12,0xffe0
8000c992:	58 0a       	cp.w	r10,0
8000c994:	f8 0b 13 00 	cpc	r11,r12
8000c998:	5e 8f       	retls	1
8000c99a:	5e fd       	retal	0

8000c99c <__avr32_f64_cmp_ge>:
8000c99c:	1a de       	st.w	--sp,lr
8000c99e:	1a d7       	st.w	--sp,r7
8000c9a0:	a1 7b       	lsl	r11,0x1
8000c9a2:	5f 3c       	srlo	r12
8000c9a4:	a1 79       	lsl	r9,0x1
8000c9a6:	5f 37       	srlo	r7
8000c9a8:	5c fc       	rol	r12
8000c9aa:	fc 1e ff e0 	movh	lr,0xffe0
8000c9ae:	58 0a       	cp.w	r10,0
8000c9b0:	fc 0b 13 00 	cpc	r11,lr
8000c9b4:	e0 8b 00 1d 	brhi	8000c9ee <__avr32_f64_cmp_ge+0x52>
8000c9b8:	58 08       	cp.w	r8,0
8000c9ba:	fc 09 13 00 	cpc	r9,lr
8000c9be:	e0 8b 00 18 	brhi	8000c9ee <__avr32_f64_cmp_ge+0x52>
8000c9c2:	58 0b       	cp.w	r11,0
8000c9c4:	f5 ba 00 00 	subfeq	r10,0
8000c9c8:	c1 50       	breq	8000c9f2 <__avr32_f64_cmp_ge+0x56>
8000c9ca:	1b 07       	ld.w	r7,sp++
8000c9cc:	1b 0e       	ld.w	lr,sp++
8000c9ce:	58 3c       	cp.w	r12,3
8000c9d0:	c0 a0       	breq	8000c9e4 <__avr32_f64_cmp_ge+0x48>
8000c9d2:	58 1c       	cp.w	r12,1
8000c9d4:	c0 33       	brcs	8000c9da <__avr32_f64_cmp_ge+0x3e>
8000c9d6:	5e 0f       	reteq	1
8000c9d8:	5e 1d       	retne	0
8000c9da:	10 3a       	cp.w	r10,r8
8000c9dc:	f2 0b 13 00 	cpc	r11,r9
8000c9e0:	5e 2f       	reths	1
8000c9e2:	5e 3d       	retlo	0
8000c9e4:	14 38       	cp.w	r8,r10
8000c9e6:	f6 09 13 00 	cpc	r9,r11
8000c9ea:	5e 2f       	reths	1
8000c9ec:	5e 3d       	retlo	0
8000c9ee:	1b 07       	ld.w	r7,sp++
8000c9f0:	d8 0a       	popm	pc,r12=0
8000c9f2:	58 17       	cp.w	r7,1
8000c9f4:	5f 0c       	sreq	r12
8000c9f6:	58 09       	cp.w	r9,0
8000c9f8:	f5 b8 00 00 	subfeq	r8,0
8000c9fc:	1b 07       	ld.w	r7,sp++
8000c9fe:	1b 0e       	ld.w	lr,sp++
8000ca00:	5e 0f       	reteq	1
8000ca02:	5e fc       	retal	r12

8000ca04 <__avr32_f64_cmp_lt>:
8000ca04:	1a de       	st.w	--sp,lr
8000ca06:	1a d7       	st.w	--sp,r7
8000ca08:	a1 7b       	lsl	r11,0x1
8000ca0a:	5f 3c       	srlo	r12
8000ca0c:	a1 79       	lsl	r9,0x1
8000ca0e:	5f 37       	srlo	r7
8000ca10:	5c fc       	rol	r12
8000ca12:	fc 1e ff e0 	movh	lr,0xffe0
8000ca16:	58 0a       	cp.w	r10,0
8000ca18:	fc 0b 13 00 	cpc	r11,lr
8000ca1c:	e0 8b 00 1d 	brhi	8000ca56 <__avr32_f64_cmp_lt+0x52>
8000ca20:	58 08       	cp.w	r8,0
8000ca22:	fc 09 13 00 	cpc	r9,lr
8000ca26:	e0 8b 00 18 	brhi	8000ca56 <__avr32_f64_cmp_lt+0x52>
8000ca2a:	58 0b       	cp.w	r11,0
8000ca2c:	f5 ba 00 00 	subfeq	r10,0
8000ca30:	c1 50       	breq	8000ca5a <__avr32_f64_cmp_lt+0x56>
8000ca32:	1b 07       	ld.w	r7,sp++
8000ca34:	1b 0e       	ld.w	lr,sp++
8000ca36:	58 3c       	cp.w	r12,3
8000ca38:	c0 a0       	breq	8000ca4c <__avr32_f64_cmp_lt+0x48>
8000ca3a:	58 1c       	cp.w	r12,1
8000ca3c:	c0 33       	brcs	8000ca42 <__avr32_f64_cmp_lt+0x3e>
8000ca3e:	5e 0d       	reteq	0
8000ca40:	5e 1f       	retne	1
8000ca42:	10 3a       	cp.w	r10,r8
8000ca44:	f2 0b 13 00 	cpc	r11,r9
8000ca48:	5e 2d       	reths	0
8000ca4a:	5e 3f       	retlo	1
8000ca4c:	14 38       	cp.w	r8,r10
8000ca4e:	f6 09 13 00 	cpc	r9,r11
8000ca52:	5e 2d       	reths	0
8000ca54:	5e 3f       	retlo	1
8000ca56:	1b 07       	ld.w	r7,sp++
8000ca58:	d8 0a       	popm	pc,r12=0
8000ca5a:	58 17       	cp.w	r7,1
8000ca5c:	5f 1c       	srne	r12
8000ca5e:	58 09       	cp.w	r9,0
8000ca60:	f5 b8 00 00 	subfeq	r8,0
8000ca64:	1b 07       	ld.w	r7,sp++
8000ca66:	1b 0e       	ld.w	lr,sp++
8000ca68:	5e 0d       	reteq	0
8000ca6a:	5e fc       	retal	r12

8000ca6c <__avr32_f64_div>:
8000ca6c:	eb cd 40 ff 	pushm	r0-r7,lr
8000ca70:	f7 e9 20 0e 	eor	lr,r11,r9
8000ca74:	f6 07 16 14 	lsr	r7,r11,0x14
8000ca78:	a9 7b       	lsl	r11,0x9
8000ca7a:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000ca7e:	a9 7a       	lsl	r10,0x9
8000ca80:	bd bb       	sbr	r11,0x1d
8000ca82:	e4 1b 3f ff 	andh	r11,0x3fff
8000ca86:	ab d7       	cbr	r7,0xb
8000ca88:	e0 80 00 cc 	breq	8000cc20 <__avr32_f64_div_round_subnormal+0x54>
8000ca8c:	e0 47 07 ff 	cp.w	r7,2047
8000ca90:	e0 84 00 b5 	brge	8000cbfa <__avr32_f64_div_round_subnormal+0x2e>
8000ca94:	f2 06 16 14 	lsr	r6,r9,0x14
8000ca98:	a9 79       	lsl	r9,0x9
8000ca9a:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000ca9e:	a9 78       	lsl	r8,0x9
8000caa0:	bd b9       	sbr	r9,0x1d
8000caa2:	e4 19 3f ff 	andh	r9,0x3fff
8000caa6:	ab d6       	cbr	r6,0xb
8000caa8:	e0 80 00 e2 	breq	8000cc6c <__avr32_f64_div_round_subnormal+0xa0>
8000caac:	e0 46 07 ff 	cp.w	r6,2047
8000cab0:	e0 84 00 b2 	brge	8000cc14 <__avr32_f64_div_round_subnormal+0x48>
8000cab4:	0c 17       	sub	r7,r6
8000cab6:	fe 37 fc 01 	sub	r7,-1023
8000caba:	fc 1c 80 00 	movh	r12,0x8000
8000cabe:	f8 03 16 01 	lsr	r3,r12,0x1
8000cac2:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000cac6:	5c d4       	com	r4
8000cac8:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000cacc:	e6 09 06 44 	mulu.d	r4,r3,r9
8000cad0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000cad4:	e6 05 06 44 	mulu.d	r4,r3,r5
8000cad8:	ea 03 15 02 	lsl	r3,r5,0x2
8000cadc:	e6 09 06 44 	mulu.d	r4,r3,r9
8000cae0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000cae4:	e6 05 06 44 	mulu.d	r4,r3,r5
8000cae8:	ea 03 15 02 	lsl	r3,r5,0x2
8000caec:	e6 09 06 44 	mulu.d	r4,r3,r9
8000caf0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000caf4:	e6 05 06 44 	mulu.d	r4,r3,r5
8000caf8:	ea 03 15 02 	lsl	r3,r5,0x2
8000cafc:	e6 08 06 40 	mulu.d	r0,r3,r8
8000cb00:	e4 09 07 40 	macu.d	r0,r2,r9
8000cb04:	e6 09 06 44 	mulu.d	r4,r3,r9
8000cb08:	02 04       	add	r4,r1
8000cb0a:	5c 05       	acr	r5
8000cb0c:	a3 65       	lsl	r5,0x2
8000cb0e:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000cb12:	a3 64       	lsl	r4,0x2
8000cb14:	5c 34       	neg	r4
8000cb16:	f8 05 01 45 	sbc	r5,r12,r5
8000cb1a:	e6 04 06 40 	mulu.d	r0,r3,r4
8000cb1e:	e4 05 07 40 	macu.d	r0,r2,r5
8000cb22:	e6 05 06 44 	mulu.d	r4,r3,r5
8000cb26:	02 04       	add	r4,r1
8000cb28:	5c 05       	acr	r5
8000cb2a:	ea 03 15 02 	lsl	r3,r5,0x2
8000cb2e:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000cb32:	e8 02 15 02 	lsl	r2,r4,0x2
8000cb36:	e6 08 06 40 	mulu.d	r0,r3,r8
8000cb3a:	e4 09 07 40 	macu.d	r0,r2,r9
8000cb3e:	e6 09 06 44 	mulu.d	r4,r3,r9
8000cb42:	02 04       	add	r4,r1
8000cb44:	5c 05       	acr	r5
8000cb46:	a3 65       	lsl	r5,0x2
8000cb48:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000cb4c:	a3 64       	lsl	r4,0x2
8000cb4e:	5c 34       	neg	r4
8000cb50:	f8 05 01 45 	sbc	r5,r12,r5
8000cb54:	e6 04 06 40 	mulu.d	r0,r3,r4
8000cb58:	e4 05 07 40 	macu.d	r0,r2,r5
8000cb5c:	e6 05 06 44 	mulu.d	r4,r3,r5
8000cb60:	02 04       	add	r4,r1
8000cb62:	5c 05       	acr	r5
8000cb64:	ea 03 15 02 	lsl	r3,r5,0x2
8000cb68:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000cb6c:	e8 02 15 02 	lsl	r2,r4,0x2
8000cb70:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000cb74:	e4 0b 07 40 	macu.d	r0,r2,r11
8000cb78:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000cb7c:	02 02       	add	r2,r1
8000cb7e:	5c 03       	acr	r3
8000cb80:	ed b3 00 1c 	bld	r3,0x1c
8000cb84:	c0 90       	breq	8000cb96 <__avr32_f64_div+0x12a>
8000cb86:	a1 72       	lsl	r2,0x1
8000cb88:	5c f3       	rol	r3
8000cb8a:	20 17       	sub	r7,1
8000cb8c:	a3 9a       	lsr	r10,0x3
8000cb8e:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000cb92:	a3 9b       	lsr	r11,0x3
8000cb94:	c0 58       	rjmp	8000cb9e <__avr32_f64_div+0x132>
8000cb96:	a5 8a       	lsr	r10,0x4
8000cb98:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000cb9c:	a5 8b       	lsr	r11,0x4
8000cb9e:	58 07       	cp.w	r7,0
8000cba0:	e0 8a 00 8b 	brle	8000ccb6 <__avr32_f64_div_res_subnormal>
8000cba4:	e0 12 ff 00 	andl	r2,0xff00
8000cba8:	e8 12 00 80 	orl	r2,0x80
8000cbac:	e6 08 06 40 	mulu.d	r0,r3,r8
8000cbb0:	e4 09 07 40 	macu.d	r0,r2,r9
8000cbb4:	e4 08 06 44 	mulu.d	r4,r2,r8
8000cbb8:	e6 09 06 48 	mulu.d	r8,r3,r9
8000cbbc:	00 05       	add	r5,r0
8000cbbe:	f0 01 00 48 	adc	r8,r8,r1
8000cbc2:	5c 09       	acr	r9
8000cbc4:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000cbc8:	58 04       	cp.w	r4,0
8000cbca:	5c 25       	cpc	r5

8000cbcc <__avr32_f64_div_round_subnormal>:
8000cbcc:	f4 08 13 00 	cpc	r8,r10
8000cbd0:	f6 09 13 00 	cpc	r9,r11
8000cbd4:	5f 36       	srlo	r6
8000cbd6:	f8 06 17 00 	moveq	r6,r12
8000cbda:	e4 0a 16 08 	lsr	r10,r2,0x8
8000cbde:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000cbe2:	e6 0b 16 08 	lsr	r11,r3,0x8
8000cbe6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000cbea:	ed be 00 1f 	bld	lr,0x1f
8000cbee:	ef bb 00 1f 	bst	r11,0x1f
8000cbf2:	0c 0a       	add	r10,r6
8000cbf4:	5c 0b       	acr	r11
8000cbf6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000cbfa:	e4 1b 00 0f 	andh	r11,0xf
8000cbfe:	14 4b       	or	r11,r10
8000cc00:	e0 81 00 a7 	brne	8000cd4e <__avr32_f64_div_res_subnormal+0x98>
8000cc04:	f2 06 16 14 	lsr	r6,r9,0x14
8000cc08:	ab d6       	cbr	r6,0xb
8000cc0a:	e0 46 07 ff 	cp.w	r6,2047
8000cc0e:	e0 81 00 a4 	brne	8000cd56 <__avr32_f64_div_res_subnormal+0xa0>
8000cc12:	c9 e8       	rjmp	8000cd4e <__avr32_f64_div_res_subnormal+0x98>
8000cc14:	e4 19 00 0f 	andh	r9,0xf
8000cc18:	10 49       	or	r9,r8
8000cc1a:	e0 81 00 9a 	brne	8000cd4e <__avr32_f64_div_res_subnormal+0x98>
8000cc1e:	c9 28       	rjmp	8000cd42 <__avr32_f64_div_res_subnormal+0x8c>
8000cc20:	a3 7b       	lsl	r11,0x3
8000cc22:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000cc26:	a3 7a       	lsl	r10,0x3
8000cc28:	f5 eb 10 04 	or	r4,r10,r11
8000cc2c:	e0 80 00 a0 	breq	8000cd6c <__avr32_f64_div_op1_zero>
8000cc30:	f6 04 12 00 	clz	r4,r11
8000cc34:	c1 70       	breq	8000cc62 <__avr32_f64_div_round_subnormal+0x96>
8000cc36:	c0 c3       	brcs	8000cc4e <__avr32_f64_div_round_subnormal+0x82>
8000cc38:	e8 05 11 20 	rsub	r5,r4,32
8000cc3c:	f6 04 09 4b 	lsl	r11,r11,r4
8000cc40:	f4 05 0a 45 	lsr	r5,r10,r5
8000cc44:	0a 4b       	or	r11,r5
8000cc46:	f4 04 09 4a 	lsl	r10,r10,r4
8000cc4a:	08 17       	sub	r7,r4
8000cc4c:	c0 b8       	rjmp	8000cc62 <__avr32_f64_div_round_subnormal+0x96>
8000cc4e:	f4 04 12 00 	clz	r4,r10
8000cc52:	f9 b4 03 00 	movlo	r4,0
8000cc56:	f7 b4 02 e0 	subhs	r4,-32
8000cc5a:	f4 04 09 4b 	lsl	r11,r10,r4
8000cc5e:	30 0a       	mov	r10,0
8000cc60:	08 17       	sub	r7,r4
8000cc62:	a3 8a       	lsr	r10,0x2
8000cc64:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000cc68:	a3 8b       	lsr	r11,0x2
8000cc6a:	c1 1b       	rjmp	8000ca8c <__avr32_f64_div+0x20>
8000cc6c:	a3 79       	lsl	r9,0x3
8000cc6e:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000cc72:	a3 78       	lsl	r8,0x3
8000cc74:	f3 e8 10 04 	or	r4,r9,r8
8000cc78:	c6 f0       	breq	8000cd56 <__avr32_f64_div_res_subnormal+0xa0>
8000cc7a:	f2 04 12 00 	clz	r4,r9
8000cc7e:	c1 70       	breq	8000ccac <__avr32_f64_div_round_subnormal+0xe0>
8000cc80:	c0 c3       	brcs	8000cc98 <__avr32_f64_div_round_subnormal+0xcc>
8000cc82:	e8 05 11 20 	rsub	r5,r4,32
8000cc86:	f2 04 09 49 	lsl	r9,r9,r4
8000cc8a:	f0 05 0a 45 	lsr	r5,r8,r5
8000cc8e:	0a 49       	or	r9,r5
8000cc90:	f0 04 09 48 	lsl	r8,r8,r4
8000cc94:	08 16       	sub	r6,r4
8000cc96:	c0 b8       	rjmp	8000ccac <__avr32_f64_div_round_subnormal+0xe0>
8000cc98:	f0 04 12 00 	clz	r4,r8
8000cc9c:	f9 b4 03 00 	movlo	r4,0
8000cca0:	f7 b4 02 e0 	subhs	r4,-32
8000cca4:	f0 04 09 49 	lsl	r9,r8,r4
8000cca8:	30 08       	mov	r8,0
8000ccaa:	08 16       	sub	r6,r4
8000ccac:	a3 88       	lsr	r8,0x2
8000ccae:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000ccb2:	a3 89       	lsr	r9,0x2
8000ccb4:	cf ca       	rjmp	8000caac <__avr32_f64_div+0x40>

8000ccb6 <__avr32_f64_div_res_subnormal>:
8000ccb6:	5c 37       	neg	r7
8000ccb8:	2f f7       	sub	r7,-1
8000ccba:	f1 b7 04 c0 	satu	r7,0x6
8000ccbe:	e0 47 00 20 	cp.w	r7,32
8000ccc2:	c1 54       	brge	8000ccec <__avr32_f64_div_res_subnormal+0x36>
8000ccc4:	ee 06 11 20 	rsub	r6,r7,32
8000ccc8:	e4 07 0a 42 	lsr	r2,r2,r7
8000cccc:	e6 06 09 4c 	lsl	r12,r3,r6
8000ccd0:	18 42       	or	r2,r12
8000ccd2:	e6 07 0a 43 	lsr	r3,r3,r7
8000ccd6:	f4 06 09 41 	lsl	r1,r10,r6
8000ccda:	f4 07 0a 4a 	lsr	r10,r10,r7
8000ccde:	f6 06 09 4c 	lsl	r12,r11,r6
8000cce2:	18 4a       	or	r10,r12
8000cce4:	f6 07 0a 4b 	lsr	r11,r11,r7
8000cce8:	30 00       	mov	r0,0
8000ccea:	c1 58       	rjmp	8000cd14 <__avr32_f64_div_res_subnormal+0x5e>
8000ccec:	ee 06 11 20 	rsub	r6,r7,32
8000ccf0:	f9 b0 00 00 	moveq	r0,0
8000ccf4:	f9 bc 00 00 	moveq	r12,0
8000ccf8:	c0 50       	breq	8000cd02 <__avr32_f64_div_res_subnormal+0x4c>
8000ccfa:	f4 06 09 40 	lsl	r0,r10,r6
8000ccfe:	f6 06 09 4c 	lsl	r12,r11,r6
8000cd02:	e6 07 0a 42 	lsr	r2,r3,r7
8000cd06:	30 03       	mov	r3,0
8000cd08:	f4 07 0a 41 	lsr	r1,r10,r7
8000cd0c:	18 41       	or	r1,r12
8000cd0e:	f6 07 0a 4a 	lsr	r10,r11,r7
8000cd12:	30 0b       	mov	r11,0
8000cd14:	e0 12 ff 00 	andl	r2,0xff00
8000cd18:	e8 12 00 80 	orl	r2,0x80
8000cd1c:	e6 08 06 46 	mulu.d	r6,r3,r8
8000cd20:	e4 09 07 46 	macu.d	r6,r2,r9
8000cd24:	e4 08 06 44 	mulu.d	r4,r2,r8
8000cd28:	e6 09 06 48 	mulu.d	r8,r3,r9
8000cd2c:	0c 05       	add	r5,r6
8000cd2e:	f0 07 00 48 	adc	r8,r8,r7
8000cd32:	5c 09       	acr	r9
8000cd34:	30 07       	mov	r7,0
8000cd36:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000cd3a:	00 34       	cp.w	r4,r0
8000cd3c:	e2 05 13 00 	cpc	r5,r1
8000cd40:	c4 6b       	rjmp	8000cbcc <__avr32_f64_div_round_subnormal>
8000cd42:	1c 9b       	mov	r11,lr
8000cd44:	e6 1b 80 00 	andh	r11,0x8000,COH
8000cd48:	30 0a       	mov	r10,0
8000cd4a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000cd4e:	3f fb       	mov	r11,-1
8000cd50:	30 0a       	mov	r10,0
8000cd52:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000cd56:	f5 eb 10 04 	or	r4,r10,r11
8000cd5a:	c0 90       	breq	8000cd6c <__avr32_f64_div_op1_zero>
8000cd5c:	1c 9b       	mov	r11,lr
8000cd5e:	e6 1b 80 00 	andh	r11,0x8000,COH
8000cd62:	ea 1b 7f f0 	orh	r11,0x7ff0
8000cd66:	30 0a       	mov	r10,0
8000cd68:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000cd6c <__avr32_f64_div_op1_zero>:
8000cd6c:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000cd70:	ce f0       	breq	8000cd4e <__avr32_f64_div_res_subnormal+0x98>
8000cd72:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000cd76:	e0 44 07 ff 	cp.w	r4,2047
8000cd7a:	ce 41       	brne	8000cd42 <__avr32_f64_div_res_subnormal+0x8c>
8000cd7c:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000cd80:	ce 10       	breq	8000cd42 <__avr32_f64_div_res_subnormal+0x8c>
8000cd82:	ce 6b       	rjmp	8000cd4e <__avr32_f64_div_res_subnormal+0x98>

8000cd84 <__avr32_udiv64>:
8000cd84:	d4 31       	pushm	r0-r7,lr
8000cd86:	1a 97       	mov	r7,sp
8000cd88:	20 3d       	sub	sp,12
8000cd8a:	10 9c       	mov	r12,r8
8000cd8c:	12 9e       	mov	lr,r9
8000cd8e:	14 93       	mov	r3,r10
8000cd90:	58 09       	cp.w	r9,0
8000cd92:	e0 81 00 bd 	brne	8000cf0c <__avr32_udiv64+0x188>
8000cd96:	16 38       	cp.w	r8,r11
8000cd98:	e0 88 00 40 	brls	8000ce18 <__avr32_udiv64+0x94>
8000cd9c:	f0 08 12 00 	clz	r8,r8
8000cda0:	c0 d0       	breq	8000cdba <__avr32_udiv64+0x36>
8000cda2:	f6 08 09 4b 	lsl	r11,r11,r8
8000cda6:	f0 09 11 20 	rsub	r9,r8,32
8000cdaa:	f8 08 09 4c 	lsl	r12,r12,r8
8000cdae:	f4 09 0a 49 	lsr	r9,r10,r9
8000cdb2:	f4 08 09 43 	lsl	r3,r10,r8
8000cdb6:	f3 eb 10 0b 	or	r11,r9,r11
8000cdba:	f8 0e 16 10 	lsr	lr,r12,0x10
8000cdbe:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000cdc2:	f6 0e 0d 00 	divu	r0,r11,lr
8000cdc6:	e6 0b 16 10 	lsr	r11,r3,0x10
8000cdca:	00 99       	mov	r9,r0
8000cdcc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000cdd0:	e0 0a 02 48 	mul	r8,r0,r10
8000cdd4:	10 3b       	cp.w	r11,r8
8000cdd6:	c0 a2       	brcc	8000cdea <__avr32_udiv64+0x66>
8000cdd8:	20 19       	sub	r9,1
8000cdda:	18 0b       	add	r11,r12
8000cddc:	18 3b       	cp.w	r11,r12
8000cdde:	c0 63       	brcs	8000cdea <__avr32_udiv64+0x66>
8000cde0:	10 3b       	cp.w	r11,r8
8000cde2:	f7 b9 03 01 	sublo	r9,1
8000cde6:	f7 dc e3 0b 	addcs	r11,r11,r12
8000cdea:	f6 08 01 01 	sub	r1,r11,r8
8000cdee:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000cdf2:	e2 0e 0d 00 	divu	r0,r1,lr
8000cdf6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000cdfa:	00 98       	mov	r8,r0
8000cdfc:	e0 0a 02 4a 	mul	r10,r0,r10
8000ce00:	14 33       	cp.w	r3,r10
8000ce02:	c0 82       	brcc	8000ce12 <__avr32_udiv64+0x8e>
8000ce04:	20 18       	sub	r8,1
8000ce06:	18 03       	add	r3,r12
8000ce08:	18 33       	cp.w	r3,r12
8000ce0a:	c0 43       	brcs	8000ce12 <__avr32_udiv64+0x8e>
8000ce0c:	14 33       	cp.w	r3,r10
8000ce0e:	f7 b8 03 01 	sublo	r8,1
8000ce12:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000ce16:	cd f8       	rjmp	8000cfd4 <__avr32_udiv64+0x250>
8000ce18:	58 08       	cp.w	r8,0
8000ce1a:	c0 51       	brne	8000ce24 <__avr32_udiv64+0xa0>
8000ce1c:	30 19       	mov	r9,1
8000ce1e:	f2 08 0d 08 	divu	r8,r9,r8
8000ce22:	10 9c       	mov	r12,r8
8000ce24:	f8 06 12 00 	clz	r6,r12
8000ce28:	c0 41       	brne	8000ce30 <__avr32_udiv64+0xac>
8000ce2a:	18 1b       	sub	r11,r12
8000ce2c:	30 19       	mov	r9,1
8000ce2e:	c4 08       	rjmp	8000ceae <__avr32_udiv64+0x12a>
8000ce30:	ec 01 11 20 	rsub	r1,r6,32
8000ce34:	f4 01 0a 49 	lsr	r9,r10,r1
8000ce38:	f8 06 09 4c 	lsl	r12,r12,r6
8000ce3c:	f6 06 09 48 	lsl	r8,r11,r6
8000ce40:	f6 01 0a 41 	lsr	r1,r11,r1
8000ce44:	f3 e8 10 08 	or	r8,r9,r8
8000ce48:	f8 03 16 10 	lsr	r3,r12,0x10
8000ce4c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000ce50:	e2 03 0d 00 	divu	r0,r1,r3
8000ce54:	f0 0b 16 10 	lsr	r11,r8,0x10
8000ce58:	00 9e       	mov	lr,r0
8000ce5a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000ce5e:	e0 05 02 49 	mul	r9,r0,r5
8000ce62:	12 3b       	cp.w	r11,r9
8000ce64:	c0 a2       	brcc	8000ce78 <__avr32_udiv64+0xf4>
8000ce66:	20 1e       	sub	lr,1
8000ce68:	18 0b       	add	r11,r12
8000ce6a:	18 3b       	cp.w	r11,r12
8000ce6c:	c0 63       	brcs	8000ce78 <__avr32_udiv64+0xf4>
8000ce6e:	12 3b       	cp.w	r11,r9
8000ce70:	f7 be 03 01 	sublo	lr,1
8000ce74:	f7 dc e3 0b 	addcs	r11,r11,r12
8000ce78:	12 1b       	sub	r11,r9
8000ce7a:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000ce7e:	f6 03 0d 02 	divu	r2,r11,r3
8000ce82:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000ce86:	04 99       	mov	r9,r2
8000ce88:	e4 05 02 4b 	mul	r11,r2,r5
8000ce8c:	16 38       	cp.w	r8,r11
8000ce8e:	c0 a2       	brcc	8000cea2 <__avr32_udiv64+0x11e>
8000ce90:	20 19       	sub	r9,1
8000ce92:	18 08       	add	r8,r12
8000ce94:	18 38       	cp.w	r8,r12
8000ce96:	c0 63       	brcs	8000cea2 <__avr32_udiv64+0x11e>
8000ce98:	16 38       	cp.w	r8,r11
8000ce9a:	f7 b9 03 01 	sublo	r9,1
8000ce9e:	f1 dc e3 08 	addcs	r8,r8,r12
8000cea2:	f4 06 09 43 	lsl	r3,r10,r6
8000cea6:	f0 0b 01 0b 	sub	r11,r8,r11
8000ceaa:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000ceae:	f8 06 16 10 	lsr	r6,r12,0x10
8000ceb2:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000ceb6:	f6 06 0d 00 	divu	r0,r11,r6
8000ceba:	e6 0b 16 10 	lsr	r11,r3,0x10
8000cebe:	00 9a       	mov	r10,r0
8000cec0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000cec4:	e0 0e 02 48 	mul	r8,r0,lr
8000cec8:	10 3b       	cp.w	r11,r8
8000ceca:	c0 a2       	brcc	8000cede <__avr32_udiv64+0x15a>
8000cecc:	20 1a       	sub	r10,1
8000cece:	18 0b       	add	r11,r12
8000ced0:	18 3b       	cp.w	r11,r12
8000ced2:	c0 63       	brcs	8000cede <__avr32_udiv64+0x15a>
8000ced4:	10 3b       	cp.w	r11,r8
8000ced6:	f7 ba 03 01 	sublo	r10,1
8000ceda:	f7 dc e3 0b 	addcs	r11,r11,r12
8000cede:	f6 08 01 01 	sub	r1,r11,r8
8000cee2:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000cee6:	e2 06 0d 00 	divu	r0,r1,r6
8000ceea:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000ceee:	00 98       	mov	r8,r0
8000cef0:	e0 0e 02 4b 	mul	r11,r0,lr
8000cef4:	16 33       	cp.w	r3,r11
8000cef6:	c0 82       	brcc	8000cf06 <__avr32_udiv64+0x182>
8000cef8:	20 18       	sub	r8,1
8000cefa:	18 03       	add	r3,r12
8000cefc:	18 33       	cp.w	r3,r12
8000cefe:	c0 43       	brcs	8000cf06 <__avr32_udiv64+0x182>
8000cf00:	16 33       	cp.w	r3,r11
8000cf02:	f7 b8 03 01 	sublo	r8,1
8000cf06:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000cf0a:	c6 98       	rjmp	8000cfdc <__avr32_udiv64+0x258>
8000cf0c:	16 39       	cp.w	r9,r11
8000cf0e:	e0 8b 00 65 	brhi	8000cfd8 <__avr32_udiv64+0x254>
8000cf12:	f2 09 12 00 	clz	r9,r9
8000cf16:	c0 b1       	brne	8000cf2c <__avr32_udiv64+0x1a8>
8000cf18:	10 3a       	cp.w	r10,r8
8000cf1a:	5f 2a       	srhs	r10
8000cf1c:	1c 3b       	cp.w	r11,lr
8000cf1e:	5f b8       	srhi	r8
8000cf20:	10 4a       	or	r10,r8
8000cf22:	f2 0a 18 00 	cp.b	r10,r9
8000cf26:	c5 90       	breq	8000cfd8 <__avr32_udiv64+0x254>
8000cf28:	30 18       	mov	r8,1
8000cf2a:	c5 98       	rjmp	8000cfdc <__avr32_udiv64+0x258>
8000cf2c:	f0 09 09 46 	lsl	r6,r8,r9
8000cf30:	f2 03 11 20 	rsub	r3,r9,32
8000cf34:	fc 09 09 4e 	lsl	lr,lr,r9
8000cf38:	f0 03 0a 48 	lsr	r8,r8,r3
8000cf3c:	f6 09 09 4c 	lsl	r12,r11,r9
8000cf40:	f4 03 0a 42 	lsr	r2,r10,r3
8000cf44:	ef 46 ff f4 	st.w	r7[-12],r6
8000cf48:	f6 03 0a 43 	lsr	r3,r11,r3
8000cf4c:	18 42       	or	r2,r12
8000cf4e:	f1 ee 10 0c 	or	r12,r8,lr
8000cf52:	f8 01 16 10 	lsr	r1,r12,0x10
8000cf56:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000cf5a:	e6 01 0d 04 	divu	r4,r3,r1
8000cf5e:	e4 03 16 10 	lsr	r3,r2,0x10
8000cf62:	08 9e       	mov	lr,r4
8000cf64:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000cf68:	e8 06 02 48 	mul	r8,r4,r6
8000cf6c:	10 33       	cp.w	r3,r8
8000cf6e:	c0 a2       	brcc	8000cf82 <__avr32_udiv64+0x1fe>
8000cf70:	20 1e       	sub	lr,1
8000cf72:	18 03       	add	r3,r12
8000cf74:	18 33       	cp.w	r3,r12
8000cf76:	c0 63       	brcs	8000cf82 <__avr32_udiv64+0x1fe>
8000cf78:	10 33       	cp.w	r3,r8
8000cf7a:	f7 be 03 01 	sublo	lr,1
8000cf7e:	e7 dc e3 03 	addcs	r3,r3,r12
8000cf82:	10 13       	sub	r3,r8
8000cf84:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000cf88:	e6 01 0d 00 	divu	r0,r3,r1
8000cf8c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000cf90:	00 98       	mov	r8,r0
8000cf92:	e0 06 02 46 	mul	r6,r0,r6
8000cf96:	0c 3b       	cp.w	r11,r6
8000cf98:	c0 a2       	brcc	8000cfac <__avr32_udiv64+0x228>
8000cf9a:	20 18       	sub	r8,1
8000cf9c:	18 0b       	add	r11,r12
8000cf9e:	18 3b       	cp.w	r11,r12
8000cfa0:	c0 63       	brcs	8000cfac <__avr32_udiv64+0x228>
8000cfa2:	0c 3b       	cp.w	r11,r6
8000cfa4:	f7 dc e3 0b 	addcs	r11,r11,r12
8000cfa8:	f7 b8 03 01 	sublo	r8,1
8000cfac:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000cfb0:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000cfb4:	0c 1b       	sub	r11,r6
8000cfb6:	f0 04 06 42 	mulu.d	r2,r8,r4
8000cfba:	06 95       	mov	r5,r3
8000cfbc:	16 35       	cp.w	r5,r11
8000cfbe:	e0 8b 00 0a 	brhi	8000cfd2 <__avr32_udiv64+0x24e>
8000cfc2:	5f 0b       	sreq	r11
8000cfc4:	f4 09 09 49 	lsl	r9,r10,r9
8000cfc8:	12 32       	cp.w	r2,r9
8000cfca:	5f b9       	srhi	r9
8000cfcc:	f7 e9 00 09 	and	r9,r11,r9
8000cfd0:	c0 60       	breq	8000cfdc <__avr32_udiv64+0x258>
8000cfd2:	20 18       	sub	r8,1
8000cfd4:	30 09       	mov	r9,0
8000cfd6:	c0 38       	rjmp	8000cfdc <__avr32_udiv64+0x258>
8000cfd8:	30 09       	mov	r9,0
8000cfda:	12 98       	mov	r8,r9
8000cfdc:	10 9a       	mov	r10,r8
8000cfde:	12 93       	mov	r3,r9
8000cfe0:	10 92       	mov	r2,r8
8000cfe2:	12 9b       	mov	r11,r9
8000cfe4:	2f dd       	sub	sp,-12
8000cfe6:	d8 32       	popm	r0-r7,pc

8000cfe8 <__avr32_umod64>:
8000cfe8:	d4 31       	pushm	r0-r7,lr
8000cfea:	1a 97       	mov	r7,sp
8000cfec:	20 3d       	sub	sp,12
8000cfee:	10 9c       	mov	r12,r8
8000cff0:	12 95       	mov	r5,r9
8000cff2:	14 9e       	mov	lr,r10
8000cff4:	16 91       	mov	r1,r11
8000cff6:	16 96       	mov	r6,r11
8000cff8:	58 09       	cp.w	r9,0
8000cffa:	e0 81 00 81 	brne	8000d0fc <__avr32_umod64+0x114>
8000cffe:	16 38       	cp.w	r8,r11
8000d000:	e0 88 00 12 	brls	8000d024 <__avr32_umod64+0x3c>
8000d004:	f0 08 12 00 	clz	r8,r8
8000d008:	c4 e0       	breq	8000d0a4 <__avr32_umod64+0xbc>
8000d00a:	f6 08 09 46 	lsl	r6,r11,r8
8000d00e:	f8 08 09 4c 	lsl	r12,r12,r8
8000d012:	f0 0b 11 20 	rsub	r11,r8,32
8000d016:	f4 08 09 4e 	lsl	lr,r10,r8
8000d01a:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000d01e:	f7 e6 10 06 	or	r6,r11,r6
8000d022:	c4 18       	rjmp	8000d0a4 <__avr32_umod64+0xbc>
8000d024:	58 08       	cp.w	r8,0
8000d026:	c0 51       	brne	8000d030 <__avr32_umod64+0x48>
8000d028:	30 19       	mov	r9,1
8000d02a:	f2 08 0d 08 	divu	r8,r9,r8
8000d02e:	10 9c       	mov	r12,r8
8000d030:	f8 08 12 00 	clz	r8,r12
8000d034:	c0 31       	brne	8000d03a <__avr32_umod64+0x52>
8000d036:	18 16       	sub	r6,r12
8000d038:	c3 68       	rjmp	8000d0a4 <__avr32_umod64+0xbc>
8000d03a:	f0 03 11 20 	rsub	r3,r8,32
8000d03e:	f4 03 0a 4b 	lsr	r11,r10,r3
8000d042:	f8 08 09 4c 	lsl	r12,r12,r8
8000d046:	ec 08 09 49 	lsl	r9,r6,r8
8000d04a:	ec 03 0a 43 	lsr	r3,r6,r3
8000d04e:	f7 e9 10 09 	or	r9,r11,r9
8000d052:	f8 05 16 10 	lsr	r5,r12,0x10
8000d056:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000d05a:	e6 05 0d 02 	divu	r2,r3,r5
8000d05e:	f2 0e 16 10 	lsr	lr,r9,0x10
8000d062:	ec 02 02 4b 	mul	r11,r6,r2
8000d066:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000d06a:	16 3e       	cp.w	lr,r11
8000d06c:	c0 72       	brcc	8000d07a <__avr32_umod64+0x92>
8000d06e:	18 0e       	add	lr,r12
8000d070:	18 3e       	cp.w	lr,r12
8000d072:	c0 43       	brcs	8000d07a <__avr32_umod64+0x92>
8000d074:	16 3e       	cp.w	lr,r11
8000d076:	fd dc e3 0e 	addcs	lr,lr,r12
8000d07a:	fc 0b 01 03 	sub	r3,lr,r11
8000d07e:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000d082:	e6 05 0d 02 	divu	r2,r3,r5
8000d086:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000d08a:	a5 36       	mul	r6,r2
8000d08c:	0c 39       	cp.w	r9,r6
8000d08e:	c0 72       	brcc	8000d09c <__avr32_umod64+0xb4>
8000d090:	18 09       	add	r9,r12
8000d092:	18 39       	cp.w	r9,r12
8000d094:	c0 43       	brcs	8000d09c <__avr32_umod64+0xb4>
8000d096:	0c 39       	cp.w	r9,r6
8000d098:	f3 dc e3 09 	addcs	r9,r9,r12
8000d09c:	f2 06 01 06 	sub	r6,r9,r6
8000d0a0:	f4 08 09 4e 	lsl	lr,r10,r8
8000d0a4:	f8 0a 16 10 	lsr	r10,r12,0x10
8000d0a8:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000d0ac:	ec 0a 0d 02 	divu	r2,r6,r10
8000d0b0:	fc 09 16 10 	lsr	r9,lr,0x10
8000d0b4:	ea 02 02 4b 	mul	r11,r5,r2
8000d0b8:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000d0bc:	16 39       	cp.w	r9,r11
8000d0be:	c0 72       	brcc	8000d0cc <__avr32_umod64+0xe4>
8000d0c0:	18 09       	add	r9,r12
8000d0c2:	18 39       	cp.w	r9,r12
8000d0c4:	c0 43       	brcs	8000d0cc <__avr32_umod64+0xe4>
8000d0c6:	16 39       	cp.w	r9,r11
8000d0c8:	f3 dc e3 09 	addcs	r9,r9,r12
8000d0cc:	f2 0b 01 0b 	sub	r11,r9,r11
8000d0d0:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000d0d4:	f6 0a 0d 0a 	divu	r10,r11,r10
8000d0d8:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000d0dc:	ea 0a 02 4a 	mul	r10,r5,r10
8000d0e0:	14 3e       	cp.w	lr,r10
8000d0e2:	c0 72       	brcc	8000d0f0 <__avr32_umod64+0x108>
8000d0e4:	18 0e       	add	lr,r12
8000d0e6:	18 3e       	cp.w	lr,r12
8000d0e8:	c0 43       	brcs	8000d0f0 <__avr32_umod64+0x108>
8000d0ea:	14 3e       	cp.w	lr,r10
8000d0ec:	fd dc e3 0e 	addcs	lr,lr,r12
8000d0f0:	fc 0a 01 0a 	sub	r10,lr,r10
8000d0f4:	30 0b       	mov	r11,0
8000d0f6:	f4 08 0a 4a 	lsr	r10,r10,r8
8000d0fa:	c7 b8       	rjmp	8000d1f0 <__avr32_umod64+0x208>
8000d0fc:	16 39       	cp.w	r9,r11
8000d0fe:	e0 8b 00 79 	brhi	8000d1f0 <__avr32_umod64+0x208>
8000d102:	f2 09 12 00 	clz	r9,r9
8000d106:	c1 21       	brne	8000d12a <__avr32_umod64+0x142>
8000d108:	10 3a       	cp.w	r10,r8
8000d10a:	5f 2b       	srhs	r11
8000d10c:	0a 31       	cp.w	r1,r5
8000d10e:	5f ba       	srhi	r10
8000d110:	f7 ea 10 0a 	or	r10,r11,r10
8000d114:	f2 0a 18 00 	cp.b	r10,r9
8000d118:	c0 60       	breq	8000d124 <__avr32_umod64+0x13c>
8000d11a:	fc 08 01 0c 	sub	r12,lr,r8
8000d11e:	e2 05 01 46 	sbc	r6,r1,r5
8000d122:	18 9e       	mov	lr,r12
8000d124:	0c 9b       	mov	r11,r6
8000d126:	1c 9a       	mov	r10,lr
8000d128:	c6 48       	rjmp	8000d1f0 <__avr32_umod64+0x208>
8000d12a:	ea 09 09 4c 	lsl	r12,r5,r9
8000d12e:	f2 06 11 20 	rsub	r6,r9,32
8000d132:	f6 09 09 4b 	lsl	r11,r11,r9
8000d136:	f0 09 09 42 	lsl	r2,r8,r9
8000d13a:	ef 46 ff f4 	st.w	r7[-12],r6
8000d13e:	f0 06 0a 48 	lsr	r8,r8,r6
8000d142:	18 48       	or	r8,r12
8000d144:	e2 06 0a 4c 	lsr	r12,r1,r6
8000d148:	f4 09 09 43 	lsl	r3,r10,r9
8000d14c:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000d150:	f4 06 0a 4a 	lsr	r10,r10,r6
8000d154:	16 4a       	or	r10,r11
8000d156:	f0 0b 16 10 	lsr	r11,r8,0x10
8000d15a:	f8 0b 0d 04 	divu	r4,r12,r11
8000d15e:	f4 0c 16 10 	lsr	r12,r10,0x10
8000d162:	08 91       	mov	r1,r4
8000d164:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000d168:	e8 0e 02 46 	mul	r6,r4,lr
8000d16c:	0c 3c       	cp.w	r12,r6
8000d16e:	c0 a2       	brcc	8000d182 <__avr32_umod64+0x19a>
8000d170:	20 11       	sub	r1,1
8000d172:	10 0c       	add	r12,r8
8000d174:	10 3c       	cp.w	r12,r8
8000d176:	c0 63       	brcs	8000d182 <__avr32_umod64+0x19a>
8000d178:	0c 3c       	cp.w	r12,r6
8000d17a:	f7 b1 03 01 	sublo	r1,1
8000d17e:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000d182:	0c 1c       	sub	r12,r6
8000d184:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000d188:	f8 0b 0d 04 	divu	r4,r12,r11
8000d18c:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000d190:	08 96       	mov	r6,r4
8000d192:	e8 0e 02 4e 	mul	lr,r4,lr
8000d196:	1c 3b       	cp.w	r11,lr
8000d198:	c0 a2       	brcc	8000d1ac <__avr32_umod64+0x1c4>
8000d19a:	20 16       	sub	r6,1
8000d19c:	10 0b       	add	r11,r8
8000d19e:	10 3b       	cp.w	r11,r8
8000d1a0:	c0 63       	brcs	8000d1ac <__avr32_umod64+0x1c4>
8000d1a2:	1c 3b       	cp.w	r11,lr
8000d1a4:	f7 b6 03 01 	sublo	r6,1
8000d1a8:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000d1ac:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000d1b0:	1c 1b       	sub	r11,lr
8000d1b2:	e2 02 06 40 	mulu.d	r0,r1,r2
8000d1b6:	00 9e       	mov	lr,r0
8000d1b8:	02 9c       	mov	r12,r1
8000d1ba:	16 3c       	cp.w	r12,r11
8000d1bc:	e0 8b 00 08 	brhi	8000d1cc <__avr32_umod64+0x1e4>
8000d1c0:	5f 06       	sreq	r6
8000d1c2:	06 30       	cp.w	r0,r3
8000d1c4:	5f ba       	srhi	r10
8000d1c6:	ed ea 00 0a 	and	r10,r6,r10
8000d1ca:	c0 60       	breq	8000d1d6 <__avr32_umod64+0x1ee>
8000d1cc:	fc 02 01 04 	sub	r4,lr,r2
8000d1d0:	f8 08 01 4c 	sbc	r12,r12,r8
8000d1d4:	08 9e       	mov	lr,r4
8000d1d6:	e6 0e 01 0a 	sub	r10,r3,lr
8000d1da:	f6 0c 01 4c 	sbc	r12,r11,r12
8000d1de:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000d1e2:	f8 09 0a 4b 	lsr	r11,r12,r9
8000d1e6:	f4 09 0a 4a 	lsr	r10,r10,r9
8000d1ea:	f8 01 09 4c 	lsl	r12,r12,r1
8000d1ee:	18 4a       	or	r10,r12
8000d1f0:	2f dd       	sub	sp,-12
8000d1f2:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

8000d200 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000d200:	c0 08       	rjmp	8000d200 <_evba>
	...

8000d204 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000d204:	c0 08       	rjmp	8000d204 <_handle_TLB_Multiple_Hit>
	...

8000d208 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000d208:	c0 08       	rjmp	8000d208 <_handle_Bus_Error_Data_Fetch>
	...

8000d20c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000d20c:	c0 08       	rjmp	8000d20c <_handle_Bus_Error_Instruction_Fetch>
	...

8000d210 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000d210:	c0 08       	rjmp	8000d210 <_handle_NMI>
	...

8000d214 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000d214:	c0 08       	rjmp	8000d214 <_handle_Instruction_Address>
	...

8000d218 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000d218:	c0 08       	rjmp	8000d218 <_handle_ITLB_Protection>
	...

8000d21c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000d21c:	c0 08       	rjmp	8000d21c <_handle_Breakpoint>
	...

8000d220 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000d220:	c0 08       	rjmp	8000d220 <_handle_Illegal_Opcode>
	...

8000d224 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000d224:	c0 08       	rjmp	8000d224 <_handle_Unimplemented_Instruction>
	...

8000d228 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000d228:	c0 08       	rjmp	8000d228 <_handle_Privilege_Violation>
	...

8000d22c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000d22c:	c0 08       	rjmp	8000d22c <_handle_Floating_Point>
	...

8000d230 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000d230:	c0 08       	rjmp	8000d230 <_handle_Coprocessor_Absent>
	...

8000d234 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000d234:	c0 08       	rjmp	8000d234 <_handle_Data_Address_Read>
	...

8000d238 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000d238:	c0 08       	rjmp	8000d238 <_handle_Data_Address_Write>
	...

8000d23c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000d23c:	c0 08       	rjmp	8000d23c <_handle_DTLB_Protection_Read>
	...

8000d240 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000d240:	c0 08       	rjmp	8000d240 <_handle_DTLB_Protection_Write>
	...

8000d244 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000d244:	c0 08       	rjmp	8000d244 <_handle_DTLB_Modified>
	...

8000d250 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000d250:	c0 08       	rjmp	8000d250 <_handle_ITLB_Miss>
	...

8000d260 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000d260:	c0 08       	rjmp	8000d260 <_handle_DTLB_Miss_Read>
	...

8000d270 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000d270:	c0 08       	rjmp	8000d270 <_handle_DTLB_Miss_Write>
	...

8000d300 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000d300:	c0 08       	rjmp	8000d300 <_handle_Supervisor_Call>
8000d302:	d7 03       	nop

8000d304 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d304:	30 0c       	mov	r12,0
8000d306:	fe b0 b0 79 	rcall	800033f8 <_get_interrupt_handler>
8000d30a:	58 0c       	cp.w	r12,0
8000d30c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d310:	d6 03       	rete

8000d312 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d312:	30 1c       	mov	r12,1
8000d314:	fe b0 b0 72 	rcall	800033f8 <_get_interrupt_handler>
8000d318:	58 0c       	cp.w	r12,0
8000d31a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d31e:	d6 03       	rete

8000d320 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d320:	30 2c       	mov	r12,2
8000d322:	fe b0 b0 6b 	rcall	800033f8 <_get_interrupt_handler>
8000d326:	58 0c       	cp.w	r12,0
8000d328:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d32c:	d6 03       	rete

8000d32e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d32e:	30 3c       	mov	r12,3
8000d330:	fe b0 b0 64 	rcall	800033f8 <_get_interrupt_handler>
8000d334:	58 0c       	cp.w	r12,0
8000d336:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d33a:	d6 03       	rete
8000d33c:	d7 03       	nop
8000d33e:	d7 03       	nop
8000d340:	d7 03       	nop
8000d342:	d7 03       	nop
8000d344:	d7 03       	nop
8000d346:	d7 03       	nop
8000d348:	d7 03       	nop
8000d34a:	d7 03       	nop
8000d34c:	d7 03       	nop
8000d34e:	d7 03       	nop
8000d350:	d7 03       	nop
8000d352:	d7 03       	nop
8000d354:	d7 03       	nop
8000d356:	d7 03       	nop
8000d358:	d7 03       	nop
8000d35a:	d7 03       	nop
8000d35c:	d7 03       	nop
8000d35e:	d7 03       	nop
8000d360:	d7 03       	nop
8000d362:	d7 03       	nop
8000d364:	d7 03       	nop
8000d366:	d7 03       	nop
8000d368:	d7 03       	nop
8000d36a:	d7 03       	nop
8000d36c:	d7 03       	nop
8000d36e:	d7 03       	nop
8000d370:	d7 03       	nop
8000d372:	d7 03       	nop
8000d374:	d7 03       	nop
8000d376:	d7 03       	nop
8000d378:	d7 03       	nop
8000d37a:	d7 03       	nop
8000d37c:	d7 03       	nop
8000d37e:	d7 03       	nop
8000d380:	d7 03       	nop
8000d382:	d7 03       	nop
8000d384:	d7 03       	nop
8000d386:	d7 03       	nop
8000d388:	d7 03       	nop
8000d38a:	d7 03       	nop
8000d38c:	d7 03       	nop
8000d38e:	d7 03       	nop
8000d390:	d7 03       	nop
8000d392:	d7 03       	nop
8000d394:	d7 03       	nop
8000d396:	d7 03       	nop
8000d398:	d7 03       	nop
8000d39a:	d7 03       	nop
8000d39c:	d7 03       	nop
8000d39e:	d7 03       	nop
8000d3a0:	d7 03       	nop
8000d3a2:	d7 03       	nop
8000d3a4:	d7 03       	nop
8000d3a6:	d7 03       	nop
8000d3a8:	d7 03       	nop
8000d3aa:	d7 03       	nop
8000d3ac:	d7 03       	nop
8000d3ae:	d7 03       	nop
8000d3b0:	d7 03       	nop
8000d3b2:	d7 03       	nop
8000d3b4:	d7 03       	nop
8000d3b6:	d7 03       	nop
8000d3b8:	d7 03       	nop
8000d3ba:	d7 03       	nop
8000d3bc:	d7 03       	nop
8000d3be:	d7 03       	nop
8000d3c0:	d7 03       	nop
8000d3c2:	d7 03       	nop
8000d3c4:	d7 03       	nop
8000d3c6:	d7 03       	nop
8000d3c8:	d7 03       	nop
8000d3ca:	d7 03       	nop
8000d3cc:	d7 03       	nop
8000d3ce:	d7 03       	nop
8000d3d0:	d7 03       	nop
8000d3d2:	d7 03       	nop
8000d3d4:	d7 03       	nop
8000d3d6:	d7 03       	nop
8000d3d8:	d7 03       	nop
8000d3da:	d7 03       	nop
8000d3dc:	d7 03       	nop
8000d3de:	d7 03       	nop
8000d3e0:	d7 03       	nop
8000d3e2:	d7 03       	nop
8000d3e4:	d7 03       	nop
8000d3e6:	d7 03       	nop
8000d3e8:	d7 03       	nop
8000d3ea:	d7 03       	nop
8000d3ec:	d7 03       	nop
8000d3ee:	d7 03       	nop
8000d3f0:	d7 03       	nop
8000d3f2:	d7 03       	nop
8000d3f4:	d7 03       	nop
8000d3f6:	d7 03       	nop
8000d3f8:	d7 03       	nop
8000d3fa:	d7 03       	nop
8000d3fc:	d7 03       	nop
8000d3fe:	d7 03       	nop
