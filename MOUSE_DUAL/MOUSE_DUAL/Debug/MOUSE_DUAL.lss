
MOUSE_DUAL.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000d270  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000f400  8000f400  0000f800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000007a8  8000f600  8000f600  0000fa00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000008c4  00000008  8000fda8  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  000008cc  8001066c  00010ccc  2**0
                  ALLOC
  8 .bss          000003f8  000008d0  000008d0  00000000  2**2
                  ALLOC
  9 .heap         0000e338  00000cc8  00000cc8  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  00010ccc  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001340  00000000  00000000  00010d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00002aa1  00000000  00000000  00012040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00042977  00000000  00000000  00014ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000073df  00000000  00000000  00057458  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001c2e8  00000000  00000000  0005e837  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003200  00000000  00000000  0007ab20  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000a513  00000000  00000000  0007dd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000dd2f  00000000  00000000  00088233  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 0147b41f  00000000  00000000  00095f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00004768  00000000  00000000  01511388  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	fe cf 8b f8 	sub	pc,pc,-29704

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
80002004:	fe cf ab fc 	sub	pc,pc,-21508

Disassembly of section .text:

80002008 <dip204_printf_string>:
80002008:	eb cd 40 fe 	pushm	r1-r7,lr
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
8000200c:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
8000200e:	18 9b       	mov	r11,r12
80002010:	fa ca ff c8 	sub	r10,sp,-56
80002014:	1a 9c       	mov	r12,sp
80002016:	e0 a0 40 67 	rcall	8000a0e4 <vsprintf>
  while (i < sizeof(string) - 1) string[i++] = '\0';
8000201a:	31 38       	mov	r8,19
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
8000201c:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
8000201e:	f0 0c 18 00 	cp.b	r12,r8
80002022:	e0 8b 00 0e 	brhi	8000203e <dip204_printf_string+0x36>
80002026:	30 0a       	mov	r10,0
80002028:	31 49       	mov	r9,20
8000202a:	fa c8 ff e8 	sub	r8,sp,-24
8000202e:	18 08       	add	r8,r12
80002030:	f1 6a ff e8 	st.b	r8[-24],r10
80002034:	2f fc       	sub	r12,-1
80002036:	5c 5c       	castu.b	r12
80002038:	f2 0c 18 00 	cp.b	r12,r9
8000203c:	cf 71       	brne	8000202a <dip204_printf_string+0x22>
/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
8000203e:	30 2b       	mov	r11,2
80002040:	fe 7c 28 00 	mov	r12,-55296
80002044:	e0 a0 03 f7 	rcall	80002832 <spi_selectChip>
80002048:	30 04       	mov	r4,0
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
8000204a:	fa c7 ff e8 	sub	r7,sp,-24
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
  unsigned short reverse = 0x00;
8000204e:	08 96       	mov	r6,r4
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002050:	08 07       	add	r7,r4
80002052:	08 93       	mov	r3,r4
 */
static void dip204_write_byte(unsigned char byte)
{
  unsigned char reverse;

  switch (byte)
80002054:	30 62       	mov	r2,6
80002056:	30 11       	mov	r1,1
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
80002058:	08 95       	mov	r5,r4
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
8000205a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000205e:	e6 08 18 00 	cp.b	r8,r3
80002062:	c4 b0       	breq	800020f8 <dip204_printf_string+0xf0>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002064:	e0 6b 00 fa 	mov	r11,250
80002068:	fe 7c 28 00 	mov	r12,-55296
8000206c:	e0 a0 04 7a 	rcall	80002960 <spi_write>
  while(string[i]!='\0')
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
    /* Send byte */
    dip204_write_byte(string[i]);
80002070:	ef 3b ff e8 	ld.ub	r11,r7[-24]
 */
static void dip204_write_byte(unsigned char byte)
{
  unsigned char reverse;

  switch (byte)
80002074:	f6 c8 ff f8 	sub	r8,r11,-8
80002078:	e4 08 18 00 	cp.b	r8,r2
8000207c:	e0 8b 00 07 	brhi	8000208a <dip204_printf_string+0x82>
80002080:	e2 08 09 48 	lsl	r8,r1,r8
80002084:	e2 18 00 55 	andl	r8,0x55,COH
80002088:	c0 f1       	brne	800020a6 <dip204_printf_string+0x9e>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
8000208a:	5c 9b       	brev	r11
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
8000208c:	fe 7c 28 00 	mov	r12,-55296
80002090:	f6 07 16 18 	lsr	r7,r11,0x18
80002094:	0e 9b       	mov	r11,r7
80002096:	e2 1b 00 f0 	andl	r11,0xf0,COH
8000209a:	e0 a0 04 63 	rcall	80002960 <spi_write>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
8000209e:	ee 0b 15 04 	lsl	r11,r7,0x4
800020a2:	e2 1b 00 f0 	andl	r11,0xf0,COH
800020a6:	fe 7c 28 00 	mov	r12,-55296
800020aa:	e0 a0 04 5b 	rcall	80002960 <spi_write>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
800020ae:	e0 6b 00 fc 	mov	r11,252
800020b2:	fe 7c 28 00 	mov	r12,-55296
800020b6:	e0 a0 04 55 	rcall	80002960 <spi_write>
800020ba:	fa c7 ff ea 	sub	r7,sp,-22

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
800020be:	30 0b       	mov	r11,0
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
  unsigned short reverse = 0x00;
800020c0:	fb 56 00 16 	st.h	sp[22],r6

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
800020c4:	fe 7c 28 00 	mov	r12,-55296
800020c8:	e0 a0 04 4c 	rcall	80002960 <spi_write>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
800020cc:	0e 9b       	mov	r11,r7
800020ce:	fe 7c 28 00 	mov	r12,-55296
800020d2:	e0 a0 04 55 	rcall	8000297c <spi_read>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
800020d6:	fb 38 00 17 	ld.ub	r8,sp[23]
800020da:	5c 98       	brev	r8
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
800020dc:	b9 88       	lsr	r8,0x18
800020de:	ea 08 18 00 	cp.b	r8,r5
800020e2:	ce e5       	brlt	800020be <dip204_printf_string+0xb6>
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
    /* Send byte */
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
800020e4:	2f f4       	sub	r4,-1
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
800020e6:	fa c7 ff e8 	sub	r7,sp,-24
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
    /* Send byte */
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
800020ea:	5c 54       	castu.b	r4
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
800020ec:	08 07       	add	r7,r4
800020ee:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800020f2:	e6 08 18 00 	cp.b	r8,r3
800020f6:	cb 71       	brne	80002064 <dip204_printf_string+0x5c>
static void dip204_unselect(void)
{
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
800020f8:	30 2b       	mov	r11,2
800020fa:	fe 7c 28 00 	mov	r12,-55296
800020fe:	e0 a0 03 c2 	rcall	80002882 <spi_unselectChip>
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
}
80002102:	2f ad       	sub	sp,-24
80002104:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc

80002108 <dip204_init>:
80002108:	eb cd 40 e0 	pushm	r5-r7,lr
8000210c:	20 5d       	sub	sp,20
8000210e:	18 97       	mov	r7,r12
80002110:	16 96       	mov	r6,r11
80002112:	58 1c       	cp.w	r12,1
80002114:	e0 80 01 81 	breq	80002416 <dip204_init+0x30e>
80002118:	58 0b       	cp.w	r11,0
8000211a:	e0 81 01 7a 	brne	8000240e <dip204_init+0x306>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
8000211e:	33 2c       	mov	r12,50
80002120:	e0 a0 0e f0 	rcall	80003f00 <gpio_set_gpio_pin>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002124:	e1 b9 00 42 	mfsr	r9,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002128:	e2 78 a9 80 	mov	r8,240000
8000212c:	f2 08 00 0a 	add	r10,r9,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002130:	e1 b8 00 42 	mfsr	r8,0x108
80002134:	14 39       	cp.w	r9,r10
80002136:	e0 8b 01 19 	brhi	80002368 <dip204_init+0x260>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000213a:	12 38       	cp.w	r8,r9
8000213c:	c0 83       	brcs	8000214c <dip204_init+0x44>
8000213e:	14 38       	cp.w	r8,r10
80002140:	e0 8b 00 06 	brhi	8000214c <dip204_init+0x44>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002144:	e1 b8 00 42 	mfsr	r8,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002148:	12 38       	cp.w	r8,r9
8000214a:	cf a2       	brcc	8000213e <dip204_init+0x36>
/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
8000214c:	30 2b       	mov	r11,2
8000214e:	fe 7c 28 00 	mov	r12,-55296
80002152:	e0 a0 03 70 	rcall	80002832 <spi_selectChip>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002156:	e0 6b 00 f8 	mov	r11,248
8000215a:	fe 7c 28 00 	mov	r12,-55296
8000215e:	e0 a0 04 01 	rcall	80002960 <spi_write>
      reverse = bit_reverse8(byte);
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002162:	fe 7c 28 00 	mov	r12,-55296
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002166:	33 47       	mov	r7,52
80002168:	5c 97       	brev	r7
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
8000216a:	b9 87       	lsr	r7,0x18
8000216c:	0e 9b       	mov	r11,r7
8000216e:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002172:	e0 a0 03 f7 	rcall	80002960 <spi_write>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002176:	ee 0b 15 04 	lsl	r11,r7,0x4
8000217a:	fe 7c 28 00 	mov	r12,-55296
8000217e:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002182:	e0 a0 03 ef 	rcall	80002960 <spi_write>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002186:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000218a:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000218e:	e1 b9 00 42 	mfsr	r9,0x108
80002192:	14 38       	cp.w	r8,r10
80002194:	e0 8b 00 f6 	brhi	80002380 <dip204_init+0x278>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002198:	12 38       	cp.w	r8,r9
8000219a:	e0 8b 00 09 	brhi	800021ac <dip204_init+0xa4>
8000219e:	12 3a       	cp.w	r10,r9
800021a0:	c0 63       	brcs	800021ac <dip204_init+0xa4>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800021a2:	e1 b9 00 42 	mfsr	r9,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800021a6:	12 38       	cp.w	r8,r9
800021a8:	fe 98 ff fb 	brls	8000219e <dip204_init+0x96>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
800021ac:	30 97       	mov	r7,9
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
800021ae:	fe 7c 28 00 	mov	r12,-55296
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
800021b2:	5c 97       	brev	r7
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
800021b4:	b9 87       	lsr	r7,0x18
800021b6:	0e 9b       	mov	r11,r7
800021b8:	e2 1b 00 f0 	andl	r11,0xf0,COH
800021bc:	e0 a0 03 d2 	rcall	80002960 <spi_write>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
800021c0:	ee 0b 15 04 	lsl	r11,r7,0x4
800021c4:	fe 7c 28 00 	mov	r12,-55296
800021c8:	e2 1b 00 f0 	andl	r11,0xf0,COH
800021cc:	e0 a0 03 ca 	rcall	80002960 <spi_write>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800021d0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800021d4:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800021d8:	e1 b9 00 42 	mfsr	r9,0x108
800021dc:	14 38       	cp.w	r8,r10
800021de:	e0 8b 00 dd 	brhi	80002398 <dip204_init+0x290>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800021e2:	12 38       	cp.w	r8,r9
800021e4:	e0 8b 00 09 	brhi	800021f6 <dip204_init+0xee>
800021e8:	12 3a       	cp.w	r10,r9
800021ea:	c0 63       	brcs	800021f6 <dip204_init+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800021ec:	e1 b9 00 42 	mfsr	r9,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800021f0:	12 38       	cp.w	r8,r9
800021f2:	fe 98 ff fb 	brls	800021e8 <dip204_init+0xe0>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
800021f6:	33 07       	mov	r7,48
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
800021f8:	fe 7c 28 00 	mov	r12,-55296
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
800021fc:	5c 97       	brev	r7
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
800021fe:	b9 87       	lsr	r7,0x18
80002200:	0e 9b       	mov	r11,r7
80002202:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002206:	e0 a0 03 ad 	rcall	80002960 <spi_write>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
8000220a:	ee 0b 15 04 	lsl	r11,r7,0x4
8000220e:	fe 7c 28 00 	mov	r12,-55296
80002212:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002216:	e0 a0 03 a5 	rcall	80002960 <spi_write>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000221a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000221e:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002222:	e1 b9 00 42 	mfsr	r9,0x108
80002226:	14 38       	cp.w	r8,r10
80002228:	e0 8b 00 c4 	brhi	800023b0 <dip204_init+0x2a8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000222c:	12 38       	cp.w	r8,r9
8000222e:	e0 8b 00 09 	brhi	80002240 <dip204_init+0x138>
80002232:	12 3a       	cp.w	r10,r9
80002234:	c0 63       	brcs	80002240 <dip204_init+0x138>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002236:	e1 b9 00 42 	mfsr	r9,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000223a:	12 38       	cp.w	r8,r9
8000223c:	fe 98 ff fb 	brls	80002232 <dip204_init+0x12a>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002240:	30 f7       	mov	r7,15
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002242:	fe 7c 28 00 	mov	r12,-55296
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002246:	5c 97       	brev	r7
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002248:	b9 87       	lsr	r7,0x18
8000224a:	0e 9b       	mov	r11,r7
8000224c:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002250:	e0 a0 03 88 	rcall	80002960 <spi_write>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002254:	ee 0b 15 04 	lsl	r11,r7,0x4
80002258:	fe 7c 28 00 	mov	r12,-55296
8000225c:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002260:	e0 a0 03 80 	rcall	80002960 <spi_write>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002264:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002268:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000226c:	e1 b9 00 42 	mfsr	r9,0x108
80002270:	14 38       	cp.w	r8,r10
80002272:	e0 8b 00 ab 	brhi	800023c8 <dip204_init+0x2c0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002276:	10 39       	cp.w	r9,r8
80002278:	c0 83       	brcs	80002288 <dip204_init+0x180>
8000227a:	14 39       	cp.w	r9,r10
8000227c:	e0 8b 00 06 	brhi	80002288 <dip204_init+0x180>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002280:	e1 b9 00 42 	mfsr	r9,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002284:	10 39       	cp.w	r9,r8
80002286:	cf a2       	brcc	8000227a <dip204_init+0x172>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002288:	30 17       	mov	r7,1
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
8000228a:	fe 7c 28 00 	mov	r12,-55296
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
8000228e:	5c 97       	brev	r7
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002290:	b9 87       	lsr	r7,0x18
80002292:	0e 9b       	mov	r11,r7
80002294:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002298:	e0 a0 03 64 	rcall	80002960 <spi_write>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
8000229c:	ee 0b 15 04 	lsl	r11,r7,0x4
800022a0:	fe 7c 28 00 	mov	r12,-55296
800022a4:	e2 1b 00 f0 	andl	r11,0xf0,COH
800022a8:	e0 a0 03 5c 	rcall	80002960 <spi_write>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022ac:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022b0:	e0 69 ea 60 	mov	r9,60000
800022b4:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022b8:	e1 b9 00 42 	mfsr	r9,0x108
800022bc:	14 38       	cp.w	r8,r10
800022be:	e0 8b 00 91 	brhi	800023e0 <dip204_init+0x2d8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022c2:	10 39       	cp.w	r9,r8
800022c4:	c0 83       	brcs	800022d4 <dip204_init+0x1cc>
800022c6:	14 39       	cp.w	r9,r10
800022c8:	e0 8b 00 06 	brhi	800022d4 <dip204_init+0x1cc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022cc:	e1 b9 00 42 	mfsr	r9,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022d0:	10 39       	cp.w	r9,r8
800022d2:	cf a2       	brcc	800022c6 <dip204_init+0x1be>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
800022d4:	30 67       	mov	r7,6
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
800022d6:	fe 7c 28 00 	mov	r12,-55296
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
800022da:	5c 97       	brev	r7
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
800022dc:	b9 87       	lsr	r7,0x18
800022de:	0e 9b       	mov	r11,r7
800022e0:	e2 1b 00 f0 	andl	r11,0xf0,COH
800022e4:	e0 a0 03 3e 	rcall	80002960 <spi_write>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
800022e8:	ee 0b 15 04 	lsl	r11,r7,0x4
800022ec:	fe 7c 28 00 	mov	r12,-55296
800022f0:	e2 1b 00 f0 	andl	r11,0xf0,COH
800022f4:	e0 a0 03 36 	rcall	80002960 <spi_write>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022f8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022fc:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002300:	e1 b9 00 42 	mfsr	r9,0x108
80002304:	14 38       	cp.w	r8,r10
80002306:	e0 8b 00 79 	brhi	800023f8 <dip204_init+0x2f0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000230a:	12 38       	cp.w	r8,r9
8000230c:	e0 8b 00 09 	brhi	8000231e <dip204_init+0x216>
80002310:	12 3a       	cp.w	r10,r9
80002312:	c0 63       	brcs	8000231e <dip204_init+0x216>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002314:	e1 b9 00 42 	mfsr	r9,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002318:	12 38       	cp.w	r8,r9
8000231a:	fe 98 ff fb 	brls	80002310 <dip204_init+0x208>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
8000231e:	e0 6b 00 fc 	mov	r11,252
80002322:	fe 7c 28 00 	mov	r12,-55296
80002326:	fa c5 ff ee 	sub	r5,sp,-18
8000232a:	e0 a0 03 1b 	rcall	80002960 <spi_write>
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
  unsigned short reverse = 0x00;
8000232e:	30 07       	mov	r7,0
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
80002330:	0e 96       	mov	r6,r7

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002332:	30 0b       	mov	r11,0
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
  unsigned short reverse = 0x00;
80002334:	fb 57 00 12 	st.h	sp[18],r7

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002338:	fe 7c 28 00 	mov	r12,-55296
8000233c:	e0 a0 03 12 	rcall	80002960 <spi_write>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002340:	0a 9b       	mov	r11,r5
80002342:	fe 7c 28 00 	mov	r12,-55296
80002346:	e0 a0 03 1b 	rcall	8000297c <spi_read>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
8000234a:	fb 38 00 13 	ld.ub	r8,sp[19]
8000234e:	5c 98       	brev	r8
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
80002350:	b9 88       	lsr	r8,0x18
80002352:	ec 08 18 00 	cp.b	r8,r6
80002356:	ce e5       	brlt	80002332 <dip204_init+0x22a>
static void dip204_unselect(void)
{
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002358:	30 2b       	mov	r11,2
8000235a:	fe 7c 28 00 	mov	r12,-55296
8000235e:	e0 a0 02 92 	rcall	80002882 <spi_unselectChip>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
  // unselect chip
  dip204_unselect();
}
80002362:	2f bd       	sub	sp,-20
80002364:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002368:	10 39       	cp.w	r9,r8
8000236a:	e0 88 00 05 	brls	80002374 <dip204_init+0x26c>
8000236e:	10 3a       	cp.w	r10,r8
80002370:	fe 93 fe ee 	brlo	8000214c <dip204_init+0x44>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002374:	e1 b8 00 42 	mfsr	r8,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002378:	10 39       	cp.w	r9,r8
8000237a:	fe 98 ff fd 	brls	80002374 <dip204_init+0x26c>
8000237e:	cf 8b       	rjmp	8000236e <dip204_init+0x266>
80002380:	12 38       	cp.w	r8,r9
80002382:	e0 88 00 05 	brls	8000238c <dip204_init+0x284>
80002386:	12 3a       	cp.w	r10,r9
80002388:	fe 93 ff 12 	brlo	800021ac <dip204_init+0xa4>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000238c:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002390:	12 38       	cp.w	r8,r9
80002392:	fe 98 ff fd 	brls	8000238c <dip204_init+0x284>
80002396:	cf 8b       	rjmp	80002386 <dip204_init+0x27e>
80002398:	12 38       	cp.w	r8,r9
8000239a:	e0 88 00 05 	brls	800023a4 <dip204_init+0x29c>
8000239e:	12 3a       	cp.w	r10,r9
800023a0:	fe 93 ff 2b 	brlo	800021f6 <dip204_init+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023a4:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023a8:	12 38       	cp.w	r8,r9
800023aa:	fe 98 ff fd 	brls	800023a4 <dip204_init+0x29c>
800023ae:	cf 8b       	rjmp	8000239e <dip204_init+0x296>
800023b0:	12 38       	cp.w	r8,r9
800023b2:	e0 88 00 05 	brls	800023bc <dip204_init+0x2b4>
800023b6:	12 3a       	cp.w	r10,r9
800023b8:	fe 93 ff 44 	brlo	80002240 <dip204_init+0x138>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023bc:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023c0:	12 38       	cp.w	r8,r9
800023c2:	fe 98 ff fd 	brls	800023bc <dip204_init+0x2b4>
800023c6:	cf 8b       	rjmp	800023b6 <dip204_init+0x2ae>
800023c8:	12 38       	cp.w	r8,r9
800023ca:	e0 88 00 05 	brls	800023d4 <dip204_init+0x2cc>
800023ce:	12 3a       	cp.w	r10,r9
800023d0:	fe 93 ff 5c 	brlo	80002288 <dip204_init+0x180>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023d4:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023d8:	12 38       	cp.w	r8,r9
800023da:	fe 98 ff fd 	brls	800023d4 <dip204_init+0x2cc>
800023de:	cf 8b       	rjmp	800023ce <dip204_init+0x2c6>
800023e0:	12 38       	cp.w	r8,r9
800023e2:	e0 88 00 05 	brls	800023ec <dip204_init+0x2e4>
800023e6:	12 3a       	cp.w	r10,r9
800023e8:	fe 93 ff 76 	brlo	800022d4 <dip204_init+0x1cc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023ec:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023f0:	12 38       	cp.w	r8,r9
800023f2:	fe 98 ff fd 	brls	800023ec <dip204_init+0x2e4>
800023f6:	cf 8b       	rjmp	800023e6 <dip204_init+0x2de>
800023f8:	12 38       	cp.w	r8,r9
800023fa:	e0 88 00 04 	brls	80002402 <dip204_init+0x2fa>
800023fe:	12 3a       	cp.w	r10,r9
80002400:	c8 f3       	brcs	8000231e <dip204_init+0x216>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002402:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002406:	12 38       	cp.w	r8,r9
80002408:	fe 98 ff fd 	brls	80002402 <dip204_init+0x2fa>
8000240c:	cf 9b       	rjmp	800023fe <dip204_init+0x2f6>
  }
  else
  {
    if (backlight_on)
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
8000240e:	33 2c       	mov	r12,50
80002410:	e0 a0 0d 86 	rcall	80003f1c <gpio_clr_gpio_pin>
80002414:	c8 8a       	rjmp	80002124 <dip204_init+0x1c>
{
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
  {
    channel_id = DIP204_PWM_CHANNEL;
80002416:	30 68       	mov	r8,6
80002418:	30 85       	mov	r5,8
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
8000241a:	30 2b       	mov	r11,2
{
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
  {
    channel_id = DIP204_PWM_CHANNEL;
8000241c:	8b 08       	st.w	r5[0x0],r8
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
8000241e:	33 2c       	mov	r12,50
80002420:	e0 a0 0c bc 	rcall	80003d98 <gpio_enable_module_pin>

    // PWM controller configuration
    pwm_opt.diva=0;
80002424:	30 08       	mov	r8,0
    pwm_opt.divb=0;
    pwm_opt.prea=0;
    pwm_opt.preb=0;

    pwm_init(&pwm_opt);
80002426:	1a 9c       	mov	r12,sp

    // PWM controller configuration
    pwm_opt.diva=0;
    pwm_opt.divb=0;
    pwm_opt.prea=0;
    pwm_opt.preb=0;
80002428:	50 28       	stdsp	sp[0x8],r8
  {
    channel_id = DIP204_PWM_CHANNEL;
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);

    // PWM controller configuration
    pwm_opt.diva=0;
8000242a:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
8000242c:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
8000242e:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;

    pwm_init(&pwm_opt);
80002430:	c9 9d       	rcall	80002762 <pwm_init>
80002432:	e0 6a 08 f0 	mov	r10,2288
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80002436:	e0 68 08 d0 	mov	r8,2256
    pwm_opt.divb=0;
    pwm_opt.prea=0;
    pwm_opt.preb=0;

    pwm_init(&pwm_opt);
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
8000243a:	58 06       	cp.w	r6,0
8000243c:	f9 b7 01 31 	movne	r7,49
80002440:	70 09       	ld.w	r9,r8[0x0]
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80002442:	b4 07       	st.h	r10[0x0],r7
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
80002444:	30 0a       	mov	r10,0
80002446:	e0 19 fc ff 	andl	r9,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
8000244a:	91 4a       	st.w	r8[0x10],r10
8000244c:	ab a9       	sbr	r9,0xa
8000244e:	30 8a       	mov	r10,8
80002450:	f3 da d0 04 	bfins	r9,r10,0x0,0x4
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
80002454:	91 09       	st.w	r8[0x0],r9
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
80002456:	33 29       	mov	r9,50
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
    pwm_channel.cupd = 0;  // channel update is not used here.

    pwm_channel_init(channel_id, &pwm_channel);
80002458:	91 17       	st.w	r8[0x4],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
8000245a:	10 9b       	mov	r11,r8
    pwm_channel.cupd = 0;  // channel update is not used here.

    pwm_channel_init(channel_id, &pwm_channel);
8000245c:	91 29       	st.w	r8[0x8],r9
8000245e:	6a 0c       	ld.w	r12,r5[0x0]
80002460:	c6 0d       	rcall	80002720 <pwm_channel_init>
    // start PWM
    pwm_start_channels(1 << channel_id);
80002462:	6a 08       	ld.w	r8,r5[0x0]

    pwm_init(&pwm_opt);
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
80002464:	30 1c       	mov	r12,1
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
    pwm_channel.cupd = 0;  // channel update is not used here.

    pwm_channel_init(channel_id, &pwm_channel);
    // start PWM
    pwm_start_channels(1 << channel_id);
80002466:	f8 08 09 4c 	lsl	r12,r12,r8
8000246a:	c7 3d       	rcall	80002750 <pwm_start_channels>
8000246c:	fe 9f fe 5c 	bral	80002124 <dip204_init+0x1c>

80002470 <dip204_write_string>:
80002470:	d4 31       	pushm	r0-r7,lr
80002472:	20 1d       	sub	sp,4
80002474:	30 2b       	mov	r11,2
80002476:	18 92       	mov	r2,r12
80002478:	fe 7c 28 00 	mov	r12,-55296
8000247c:	cd bd       	rcall	80002832 <spi_selectChip>
8000247e:	30 04       	mov	r4,0
80002480:	30 61       	mov	r1,6
80002482:	e4 04 00 07 	add	r7,r2,r4
80002486:	08 96       	mov	r6,r4
80002488:	08 93       	mov	r3,r4
8000248a:	30 10       	mov	r0,1
8000248c:	08 95       	mov	r5,r4
8000248e:	0f 88       	ld.ub	r8,r7[0x0]
80002490:	e6 08 18 00 	cp.b	r8,r3
80002494:	c4 60       	breq	80002520 <dip204_write_string+0xb0>
80002496:	e0 6b 00 fa 	mov	r11,250
8000249a:	fe 7c 28 00 	mov	r12,-55296
8000249e:	e0 a0 02 61 	rcall	80002960 <spi_write>
800024a2:	0f 8b       	ld.ub	r11,r7[0x0]
800024a4:	f6 c8 ff f8 	sub	r8,r11,-8
 */
static void dip204_write_byte(unsigned char byte)
{
  unsigned char reverse;

  switch (byte)
800024a8:	e2 08 18 00 	cp.b	r8,r1
800024ac:	e0 8b 00 07 	brhi	800024ba <dip204_write_string+0x4a>
800024b0:	e0 08 09 48 	lsl	r8,r0,r8
800024b4:	e2 18 00 55 	andl	r8,0x55,COH
800024b8:	c0 f1       	brne	800024d6 <dip204_write_string+0x66>
800024ba:	5c 9b       	brev	r11
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
800024bc:	fe 7c 28 00 	mov	r12,-55296
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
800024c0:	f6 07 16 18 	lsr	r7,r11,0x18
800024c4:	0e 9b       	mov	r11,r7
800024c6:	e2 1b 00 f0 	andl	r11,0xf0,COH
800024ca:	e0 a0 02 4b 	rcall	80002960 <spi_write>
800024ce:	ee 0b 15 04 	lsl	r11,r7,0x4
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
800024d2:	e2 1b 00 f0 	andl	r11,0xf0,COH
800024d6:	fe 7c 28 00 	mov	r12,-55296
800024da:	e0 a0 02 43 	rcall	80002960 <spi_write>
800024de:	e0 6b 00 fc 	mov	r11,252
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
800024e2:	fe 7c 28 00 	mov	r12,-55296
800024e6:	e0 a0 02 3d 	rcall	80002960 <spi_write>
800024ea:	fa c7 ff fe 	sub	r7,sp,-2
800024ee:	30 0b       	mov	r11,0

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
800024f0:	ba 16       	st.h	sp[0x2],r6
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
  unsigned short reverse = 0x00;
800024f2:	fe 7c 28 00 	mov	r12,-55296

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
800024f6:	e0 a0 02 35 	rcall	80002960 <spi_write>
800024fa:	0e 9b       	mov	r11,r7
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
800024fc:	fe 7c 28 00 	mov	r12,-55296
80002500:	e0 a0 02 3e 	rcall	8000297c <spi_read>
80002504:	1b b8       	ld.ub	r8,sp[0x3]
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002506:	5c 98       	brev	r8
80002508:	b9 88       	lsr	r8,0x18
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
8000250a:	ea 08 18 00 	cp.b	r8,r5
8000250e:	cf 05       	brlt	800024ee <dip204_write_string+0x7e>
80002510:	2f f4       	sub	r4,-1
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
    /* Send byte */
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
80002512:	5c 54       	castu.b	r4
80002514:	e4 04 00 07 	add	r7,r2,r4
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
80002518:	0f 88       	ld.ub	r8,r7[0x0]
8000251a:	e6 08 18 00 	cp.b	r8,r3
8000251e:	cb c1       	brne	80002496 <dip204_write_string+0x26>
80002520:	30 2b       	mov	r11,2
static void dip204_unselect(void)
{
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002522:	fe 7c 28 00 	mov	r12,-55296
80002526:	ca ed       	rcall	80002882 <spi_unselectChip>
80002528:	2f fd       	sub	sp,-4
8000252a:	d8 32       	popm	r0-r7,pc

8000252c <dip204_set_cursor_position>:
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
}
8000252c:	eb cd 40 e0 	pushm	r5-r7,lr
80002530:	20 1d       	sub	sp,4
80002532:	16 97       	mov	r7,r11
80002534:	18 96       	mov	r6,r12
80002536:	30 2b       	mov	r11,2
80002538:	fe 7c 28 00 	mov	r12,-55296
8000253c:	c7 bd       	rcall	80002832 <spi_selectChip>
8000253e:	30 48       	mov	r8,4
void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
  unsigned char address = 0;

  dip204_select();
  if ((column <= 20) && (line <= 4))
80002540:	f0 07 18 00 	cp.b	r7,r8
80002544:	5f 89       	srls	r9
80002546:	31 48       	mov	r8,20
80002548:	f0 06 18 00 	cp.b	r6,r8
8000254c:	5f 88       	srls	r8
8000254e:	f3 e8 00 08 	and	r8,r9,r8
80002552:	c4 c0       	breq	800025ea <dip204_set_cursor_position+0xbe>
80002554:	28 16       	sub	r6,-127
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002556:	20 17       	sub	r7,1
80002558:	e0 6b 00 f8 	mov	r11,248
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
8000255c:	a5 77       	lsl	r7,0x5

  dip204_select();
  if ((column <= 20) && (line <= 4))
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
8000255e:	fe 7c 28 00 	mov	r12,-55296
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002562:	ec 07 00 07 	add	r7,r6,r7

  dip204_select();
  if ((column <= 20) && (line <= 4))
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002566:	5c 57       	castu.b	r7
80002568:	cf cd       	rcall	80002960 <spi_write>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
8000256a:	0e 98       	mov	r8,r7
8000256c:	30 69       	mov	r9,6
 */
static void dip204_write_byte(unsigned char byte)
{
  unsigned char reverse;

  switch (byte)
8000256e:	2f 88       	sub	r8,-8
80002570:	f2 08 18 00 	cp.b	r8,r9
80002574:	e0 88 00 30 	brls	800025d4 <dip204_set_cursor_position+0xa8>
80002578:	5c 97       	brev	r7
8000257a:	fe 7c 28 00 	mov	r12,-55296
      reverse = bit_reverse8(byte);
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
8000257e:	b9 87       	lsr	r7,0x18
80002580:	0e 9b       	mov	r11,r7
80002582:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002586:	ce dd       	rcall	80002960 <spi_write>
80002588:	ee 0b 15 04 	lsl	r11,r7,0x4
8000258c:	fe 7c 28 00 	mov	r12,-55296
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002590:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002594:	ce 6d       	rcall	80002960 <spi_write>
80002596:	e0 6b 00 fc 	mov	r11,252
8000259a:	fe 7c 28 00 	mov	r12,-55296
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
8000259e:	fa c5 ff fe 	sub	r5,sp,-2
800025a2:	cd fd       	rcall	80002960 <spi_write>
800025a4:	30 07       	mov	r7,0
800025a6:	0e 96       	mov	r6,r7
800025a8:	30 0b       	mov	r11,0
800025aa:	ba 17       	st.h	sp[0x2],r7
800025ac:	fe 7c 28 00 	mov	r12,-55296
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
800025b0:	cd 8d       	rcall	80002960 <spi_write>

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
800025b2:	0a 9b       	mov	r11,r5
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
  unsigned short reverse = 0x00;
800025b4:	fe 7c 28 00 	mov	r12,-55296

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
800025b8:	ce 2d       	rcall	8000297c <spi_read>
800025ba:	1b b8       	ld.ub	r8,sp[0x3]
800025bc:	5c 98       	brev	r8
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
800025be:	b9 88       	lsr	r8,0x18
800025c0:	ec 08 18 00 	cp.b	r8,r6
800025c4:	cf 25       	brlt	800025a8 <dip204_set_cursor_position+0x7c>
800025c6:	30 2b       	mov	r11,2
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
800025c8:	fe 7c 28 00 	mov	r12,-55296
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
800025cc:	c5 bd       	rcall	80002882 <spi_unselectChip>
800025ce:	2f fd       	sub	sp,-4
800025d0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
static void dip204_unselect(void)
{
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
800025d4:	30 19       	mov	r9,1
800025d6:	f2 08 09 48 	lsl	r8,r9,r8
800025da:	e2 18 00 55 	andl	r8,0x55,COH
  dip204_write_byte(DIP204_WRITE_COMMAND);
  /* Send Address lower Nibble */
  dip204_write_byte(address);
  dip204_wait_busy();
  dip204_unselect();
}
800025de:	cc d0       	breq	80002578 <dip204_set_cursor_position+0x4c>
800025e0:	0e 9b       	mov	r11,r7
800025e2:	fe 7c 28 00 	mov	r12,-55296
 */
static void dip204_write_byte(unsigned char byte)
{
  unsigned char reverse;

  switch (byte)
800025e6:	cb dd       	rcall	80002960 <spi_write>
800025e8:	cd 7b       	rjmp	80002596 <dip204_set_cursor_position+0x6a>
800025ea:	e0 6b 00 f8 	mov	r11,248
800025ee:	fe 7c 28 00 	mov	r12,-55296
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
800025f2:	cb 7d       	rcall	80002960 <spi_write>
800025f4:	30 07       	mov	r7,0
800025f6:	cc 1b       	rjmp	80002578 <dip204_set_cursor_position+0x4c>

800025f8 <dip204_hide_cursor>:
800025f8:	eb cd 40 e0 	pushm	r5-r7,lr
800025fc:	20 1d       	sub	sp,4
800025fe:	30 2b       	mov	r11,2
80002600:	fe 7c 28 00 	mov	r12,-55296
80002604:	c1 7d       	rcall	80002832 <spi_selectChip>
80002606:	e0 6b 00 f8 	mov	r11,248
8000260a:	fe 7c 28 00 	mov	r12,-55296
8000260e:	ca 9d       	rcall	80002960 <spi_write>
80002610:	fe 7c 28 00 	mov	r12,-55296
80002614:	30 c7       	mov	r7,12
80002616:	5c 97       	brev	r7
80002618:	b9 87       	lsr	r7,0x18
8000261a:	0e 9b       	mov	r11,r7
      reverse = bit_reverse8(byte);
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
8000261c:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002620:	ca 0d       	rcall	80002960 <spi_write>
80002622:	ee 0b 15 04 	lsl	r11,r7,0x4
80002626:	fe 7c 28 00 	mov	r12,-55296
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
8000262a:	e2 1b 00 f0 	andl	r11,0xf0,COH
8000262e:	c9 9d       	rcall	80002960 <spi_write>
80002630:	e0 6b 00 fc 	mov	r11,252
80002634:	fe 7c 28 00 	mov	r12,-55296
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002638:	fa c5 ff fe 	sub	r5,sp,-2
8000263c:	c9 2d       	rcall	80002960 <spi_write>
8000263e:	30 07       	mov	r7,0
80002640:	0e 96       	mov	r6,r7
80002642:	30 0b       	mov	r11,0
80002644:	ba 17       	st.h	sp[0x2],r7
80002646:	fe 7c 28 00 	mov	r12,-55296
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
8000264a:	c8 bd       	rcall	80002960 <spi_write>

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
8000264c:	0a 9b       	mov	r11,r5
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
  unsigned short reverse = 0x00;
8000264e:	fe 7c 28 00 	mov	r12,-55296

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002652:	c9 5d       	rcall	8000297c <spi_read>
80002654:	1b b8       	ld.ub	r8,sp[0x3]
80002656:	5c 98       	brev	r8
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002658:	b9 88       	lsr	r8,0x18
8000265a:	ec 08 18 00 	cp.b	r8,r6
8000265e:	cf 25       	brlt	80002642 <dip204_hide_cursor+0x4a>
80002660:	30 2b       	mov	r11,2
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002662:	fe 7c 28 00 	mov	r12,-55296
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
80002666:	c0 ed       	rcall	80002882 <spi_unselectChip>
80002668:	2f fd       	sub	sp,-4
8000266a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
static void dip204_unselect(void)
{
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
8000266e:	d7 03       	nop

80002670 <dip204_clear_display>:
80002670:	eb cd 40 e0 	pushm	r5-r7,lr
80002674:	20 1d       	sub	sp,4
80002676:	30 2b       	mov	r11,2
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
  dip204_wait_busy();
  /* unselect chip */
  dip204_unselect();
}
80002678:	fe 7c 28 00 	mov	r12,-55296
8000267c:	cd bc       	rcall	80002832 <spi_selectChip>
8000267e:	e0 6b 00 f8 	mov	r11,248
80002682:	fe 7c 28 00 	mov	r12,-55296
80002686:	c6 dd       	rcall	80002960 <spi_write>
80002688:	fe 7c 28 00 	mov	r12,-55296
8000268c:	30 17       	mov	r7,1
8000268e:	5c 97       	brev	r7
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002690:	b9 87       	lsr	r7,0x18
80002692:	0e 9b       	mov	r11,r7
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002694:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002698:	c6 4d       	rcall	80002960 <spi_write>
8000269a:	ee 0b 15 04 	lsl	r11,r7,0x4
8000269e:	fe 7c 28 00 	mov	r12,-55296
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
800026a2:	e2 1b 00 f0 	andl	r11,0xf0,COH
800026a6:	c5 dd       	rcall	80002960 <spi_write>
800026a8:	e1 b9 00 42 	mfsr	r9,0x108
800026ac:	e0 68 bb 80 	mov	r8,48000
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026b0:	f2 08 00 0a 	add	r10,r9,r8
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800026b4:	e1 b8 00 42 	mfsr	r8,0x108
800026b8:	14 39       	cp.w	r9,r10
800026ba:	e0 8b 00 28 	brhi	8000270a <dip204_clear_display+0x9a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800026be:	10 39       	cp.w	r9,r8
800026c0:	e0 8b 00 04 	brhi	800026c8 <dip204_clear_display+0x58>
800026c4:	10 3a       	cp.w	r10,r8
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800026c6:	c2 a2       	brcc	8000271a <dip204_clear_display+0xaa>
800026c8:	e0 6b 00 fc 	mov	r11,252
800026cc:	fe 7c 28 00 	mov	r12,-55296
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
800026d0:	fa c5 ff fe 	sub	r5,sp,-2
800026d4:	c4 6d       	rcall	80002960 <spi_write>
800026d6:	30 07       	mov	r7,0
800026d8:	0e 96       	mov	r6,r7
800026da:	30 0b       	mov	r11,0
800026dc:	ba 17       	st.h	sp[0x2],r7
800026de:	fe 7c 28 00 	mov	r12,-55296
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
800026e2:	c3 fd       	rcall	80002960 <spi_write>

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
800026e4:	0a 9b       	mov	r11,r5
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
  unsigned short reverse = 0x00;
800026e6:	fe 7c 28 00 	mov	r12,-55296

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
800026ea:	c4 9d       	rcall	8000297c <spi_read>
800026ec:	1b b8       	ld.ub	r8,sp[0x3]
800026ee:	5c 98       	brev	r8
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
800026f0:	b9 88       	lsr	r8,0x18
800026f2:	ec 08 18 00 	cp.b	r8,r6
800026f6:	cf 25       	brlt	800026da <dip204_clear_display+0x6a>
800026f8:	30 2b       	mov	r11,2
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
800026fa:	fe 7c 28 00 	mov	r12,-55296
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
800026fe:	cc 2c       	rcall	80002882 <spi_unselectChip>
80002700:	2f fd       	sub	sp,-4
80002702:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
static void dip204_unselect(void)
{
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002706:	e1 b8 00 42 	mfsr	r8,0x108
8000270a:	10 39       	cp.w	r9,r8
8000270c:	fe 98 ff fd 	brls	80002706 <dip204_clear_display+0x96>
  dip204_write_byte(0x01);
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
  dip204_unselect();
}
80002710:	10 3a       	cp.w	r10,r8
80002712:	cd b3       	brcs	800026c8 <dip204_clear_display+0x58>
80002714:	e1 b8 00 42 	mfsr	r8,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002718:	cf 9b       	rjmp	8000270a <dip204_clear_display+0x9a>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000271a:	e1 b8 00 42 	mfsr	r8,0x108
8000271e:	cd 0b       	rjmp	800026be <dip204_clear_display+0x4e>

80002720 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
80002720:	58 0b       	cp.w	r11,0
80002722:	c1 60       	breq	8000274e <pwm_channel_init+0x2e>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80002724:	58 6c       	cp.w	r12,6
80002726:	e0 8b 00 14 	brhi	8000274e <pwm_channel_init+0x2e>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
8000272a:	76 09       	ld.w	r9,r11[0x0]
8000272c:	f8 08 15 05 	lsl	r8,r12,0x5
80002730:	e0 28 ce 00 	sub	r8,52736
80002734:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80002736:	a5 7c       	lsl	r12,0x5
80002738:	76 19       	ld.w	r9,r11[0x4]
8000273a:	fe 7a 32 04 	mov	r10,-52732
8000273e:	f8 0a 00 08 	add	r8,r12,r10
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80002742:	e0 2c cd f8 	sub	r12,52728
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80002746:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80002748:	76 28       	ld.w	r8,r11[0x8]
8000274a:	99 08       	st.w	r12[0x0],r8
8000274c:	5e fd       	retal	0

  return PWM_SUCCESS;
8000274e:	5e ff       	retal	1

80002750 <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
80002750:	18 98       	mov	r8,r12
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80002752:	e0 1c ff 80 	andl	r12,0xff80
80002756:	c0 51       	brne	80002760 <pwm_start_channels+0x10>
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80002758:	fe 79 30 00 	mov	r9,-53248
8000275c:	93 18       	st.w	r9[0x4],r8

  return PWM_SUCCESS;
}
8000275e:	5e fc       	retal	r12
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80002760:	5e ff       	retal	1

80002762 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002762:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
80002766:	58 0c       	cp.w	r12,0
80002768:	c2 00       	breq	800027a8 <pwm_init+0x46>
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000276a:	ed b8 00 10 	bld	r8,0x10
8000276e:	c1 51       	brne	80002798 <pwm_init+0x36>
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002770:	fe 78 30 00 	mov	r8,-53248
80002774:	37 f9       	mov	r9,127
80002776:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002778:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000277a:	78 28       	ld.w	r8,r12[0x8]
8000277c:	78 0a       	ld.w	r10,r12[0x0]
8000277e:	78 39       	ld.w	r9,r12[0xc]
80002780:	a9 69       	lsl	r9,0x8
80002782:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80002786:	78 1a       	ld.w	r10,r12[0x4]
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80002788:	30 0c       	mov	r12,0
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000278a:	14 49       	or	r9,r10
8000278c:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80002790:	fe 78 30 00 	mov	r8,-53248
80002794:	91 09       	st.w	r8[0x0],r9
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
    ;

  return PWM_SUCCESS;
}
80002796:	5e fc       	retal	r12

  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002798:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
8000279a:	fe 78 30 00 	mov	r8,-53248
8000279e:	37 f9       	mov	r9,127
800027a0:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
800027a2:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
800027a4:	d5 03       	csrf	0x10
800027a6:	ce ab       	rjmp	8000277a <pwm_init+0x18>
int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();

  if (opt == 0 ) // Null pointer.
800027a8:	5e ff       	retal	1

800027aa <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800027aa:	f8 c8 00 01 	sub	r8,r12,1
800027ae:	f0 0b 00 0b 	add	r11,r8,r11
800027b2:	f6 0c 0d 0a 	divu	r10,r11,r12
800027b6:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800027b8:	f4 c8 00 01 	sub	r8,r10,1
800027bc:	e0 48 00 fe 	cp.w	r8,254
800027c0:	e0 8b 00 04 	brhi	800027c8 <getBaudDiv+0x1e>
		return -1;
	}

	return baudDiv;
800027c4:	5c 8c       	casts.h	r12
}
800027c6:	5e fc       	retal	r12

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);

	if (baudDiv <= 0 || baudDiv > 255) {
800027c8:	5e fe       	retal	-1

800027ca <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
800027ca:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800027cc:	30 18       	mov	r8,1
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
800027ce:	18 99       	mov	r9,r12
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800027d0:	f7 3a 00 0d 	ld.ub	r10,r11[13]
800027d4:	f0 0a 18 00 	cp.b	r10,r8
800027d8:	e0 88 00 04 	brls	800027e0 <spi_initMaster+0x16>
800027dc:	30 2c       	mov	r12,2
800027de:	d8 02       	popm	pc

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
	u_avr32_spi_mr.MR.llb = 0;
800027e0:	30 0a       	mov	r10,0
	if (options->modfdis > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800027e2:	e0 68 00 80 	mov	r8,128
800027e6:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
800027e8:	30 1e       	mov	lr,1

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800027ea:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800027ec:	f7 3b 00 0d 	ld.ub	r11,r11[13]
	u_avr32_spi_mr.MR.llb = 0;
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
	spi->mr = u_avr32_spi_mr.mr;
800027f0:	14 9c       	mov	r12,r10
	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
800027f2:	f1 de d0 01 	bfins	r8,lr,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800027f6:	f1 db d0 81 	bfins	r8,r11,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
800027fa:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800027fe:	30 fa       	mov	r10,15
80002800:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80002804:	93 18       	st.w	r9[0x4],r8

	return SPI_OK;
}
80002806:	d8 02       	popm	pc

80002808 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80002808:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
8000280a:	30 18       	mov	r8,1
8000280c:	f0 0b 18 00 	cp.b	r11,r8
80002810:	5f be       	srhi	lr
80002812:	f0 0a 18 00 	cp.b	r10,r8
80002816:	5f b8       	srhi	r8
80002818:	1c 48       	or	r8,lr
8000281a:	c0 a1       	brne	8000282e <spi_selectionMode+0x26>
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
8000281c:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
8000281e:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002822:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80002826:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
8000282a:	99 18       	st.w	r12[0x4],r8
8000282c:	d8 0a       	popm	pc,r12=0
		uint8_t pcs_decode,
		uint8_t delay)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
8000282e:	30 2c       	mov	r12,2
80002830:	d8 02       	popm	pc

80002832 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002832:	78 19       	ld.w	r9,r12[0x4]

	return SPI_OK;
}

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002834:	18 98       	mov	r8,r12
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002836:	ea 19 00 0f 	orh	r9,0xf
8000283a:	99 19       	st.w	r12[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000283c:	78 1c       	ld.w	r12,r12[0x4]
8000283e:	e2 1c 00 04 	andl	r12,0x4,COH
80002842:	c0 80       	breq	80002852 <spi_selectChip+0x20>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80002844:	30 e9       	mov	r9,14
80002846:	f2 0b 18 00 	cp.b	r11,r9
8000284a:	e0 88 00 12 	brls	8000286e <spi_selectChip+0x3c>
	} else {
		if (chip > 3) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000284e:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80002850:	5e fc       	retal	r12
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80002852:	30 39       	mov	r9,3
80002854:	f2 0b 18 00 	cp.b	r11,r9
80002858:	fe 9b ff fb 	brhi	8000284e <spi_selectChip+0x1c>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000285c:	70 19       	ld.w	r9,r8[0x4]
8000285e:	2f 0b       	sub	r11,-16
80002860:	30 1a       	mov	r10,1
80002862:	f4 0b 09 4b 	lsl	r11,r10,r11
80002866:	5c db       	com	r11
80002868:	12 6b       	and	r11,r9
8000286a:	91 1b       	st.w	r8[0x4],r11
8000286c:	5e fc       	retal	r12
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
8000286e:	70 19       	ld.w	r9,r8[0x4]
80002870:	b1 6b       	lsl	r11,0x10
80002872:	30 0c       	mov	r12,0
80002874:	ea 1b ff f0 	orh	r11,0xfff0
80002878:	e8 1b ff ff 	orl	r11,0xffff
8000287c:	12 6b       	and	r11,r9
8000287e:	91 1b       	st.w	r8[0x4],r11
80002880:	5e fc       	retal	r12

80002882 <spi_unselectChip>:

	return SPI_OK;
}

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002882:	30 09       	mov	r9,0
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002884:	c0 58       	rjmp	8000288e <spi_unselectChip+0xc>
80002886:	2f f9       	sub	r9,-1
		if (!timeout--) {
80002888:	e0 49 3a 99 	cp.w	r9,15001
8000288c:	c0 d0       	breq	800028a6 <spi_unselectChip+0x24>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000288e:	78 48       	ld.w	r8,r12[0x10]
80002890:	ed b8 00 09 	bld	r8,0x9
80002894:	cf 91       	brne	80002886 <spi_unselectChip+0x4>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002896:	78 18       	ld.w	r8,r12[0x4]
80002898:	ea 18 00 0f 	orh	r8,0xf
8000289c:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000289e:	fc 18 01 00 	movh	r8,0x100
800028a2:	99 08       	st.w	r12[0x0],r8
800028a4:	5e fd       	retal	0
spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
800028a6:	5e ff       	retal	1

800028a8 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800028a8:	eb cd 40 fe 	pushm	r1-r7,lr
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028ac:	30 34       	mov	r4,3
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800028ae:	16 97       	mov	r7,r11
800028b0:	18 96       	mov	r6,r12
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028b2:	f7 35 00 0c 	ld.ub	r5,r11[12]
800028b6:	e8 05 18 00 	cp.b	r5,r4
800028ba:	e0 8b 00 09 	brhi	800028cc <spi_setupChipReg+0x24>
			options->stay_act > 1 ||
800028be:	f7 32 00 0b 	ld.ub	r2,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028c2:	30 13       	mov	r3,1
800028c4:	e6 02 18 00 	cp.b	r2,r3
800028c8:	e0 88 00 05 	brls	800028d2 <spi_setupChipReg+0x2a>
		spi->csr2 = u_avr32_spi_csr.csr;
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
		break;
800028cc:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
800028ce:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800028d2:	f7 31 00 08 	ld.ub	r1,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800028d6:	30 78       	mov	r8,7
800028d8:	f0 01 18 00 	cp.b	r1,r8
800028dc:	fe 98 ff f8 	brls	800028cc <spi_setupChipReg+0x24>
800028e0:	31 08       	mov	r8,16
800028e2:	f0 01 18 00 	cp.b	r1,r8
800028e6:	fe 9b ff f3 	brhi	800028cc <spi_setupChipReg+0x24>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800028ea:	14 9b       	mov	r11,r10
800028ec:	6e 1c       	ld.w	r12,r7[0x4]
800028ee:	c5 ef       	rcall	800027aa <getBaudDiv>
800028f0:	ce e5       	brlt	800028cc <spi_setupChipReg+0x24>

	if (baudDiv < 0) {
800028f2:	0a 9a       	mov	r10,r5
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800028f4:	ec 1a 00 01 	eorl	r10,0x1
800028f8:	30 08       	mov	r8,0
	if (baudDiv < 0) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800028fa:	a1 95       	lsr	r5,0x1
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800028fc:	f1 d5 d0 01 	bfins	r8,r5,0x0,0x1
80002900:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80002904:	ef 3a 00 09 	ld.ub	r10,r7[9]
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80002908:	20 81       	sub	r1,8
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
8000290a:	f1 d2 d0 61 	bfins	r8,r2,0x3,0x1

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
8000290e:	0f 89       	ld.ub	r9,r7[0x0]
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

	switch (options->reg) {
80002910:	f1 d1 d0 84 	bfins	r8,r1,0x4,0x4
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002914:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80002918:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000291c:	ef 3a 00 0a 	ld.ub	r10,r7[10]
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80002920:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
80002924:	e6 09 18 00 	cp.b	r9,r3

	switch (options->reg) {
80002928:	c0 f0       	breq	80002946 <spi_setupChipReg+0x9e>
8000292a:	c0 b3       	brcs	80002940 <spi_setupChipReg+0x98>
8000292c:	30 2a       	mov	r10,2
8000292e:	f4 09 18 00 	cp.b	r9,r10
80002932:	c0 d0       	breq	8000294c <spi_setupChipReg+0xa4>
80002934:	e8 09 18 00 	cp.b	r9,r4
80002938:	cc a1       	brne	800028cc <spi_setupChipReg+0x24>
8000293a:	8d f8       	st.w	r6[0x3c],r8
	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
8000293c:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002940:	8d c8       	st.w	r6[0x30],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

	switch (options->reg) {
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80002942:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002946:	8d d8       	st.w	r6[0x34],r8
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80002948:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8000294c:	8d e8       	st.w	r6[0x38],r8
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
8000294e:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002952:	d7 03       	nop

80002954 <spi_enable>:
80002954:	30 18       	mov	r8,1
80002956:	99 08       	st.w	r12[0x0],r8
}

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
}
80002958:	5e fc       	retal	r12

8000295a <spi_disable>:

void spi_disable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIDIS_MASK;
8000295a:	30 28       	mov	r8,2
8000295c:	99 08       	st.w	r12[0x0],r8
}
8000295e:	5e fc       	retal	r12

80002960 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80002960:	30 09       	mov	r9,0
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002962:	c0 58       	rjmp	8000296c <spi_write+0xc>
80002964:	2f f9       	sub	r9,-1
		if (!timeout--) {
80002966:	e0 49 3a 99 	cp.w	r9,15001
8000296a:	c0 80       	breq	8000297a <spi_write+0x1a>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000296c:	78 48       	ld.w	r8,r12[0x10]
8000296e:	ed b8 00 01 	bld	r8,0x1
80002972:	cf 91       	brne	80002964 <spi_write+0x4>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002974:	5c 7b       	castu.h	r11
80002976:	99 3b       	st.w	r12[0xc],r11
80002978:	5e fd       	retal	0
spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
		if (!timeout--) {
8000297a:	5e ff       	retal	1

8000297c <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
8000297c:	30 09       	mov	r9,0
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
8000297e:	c0 58       	rjmp	80002988 <spi_read+0xc>
80002980:	2f f9       	sub	r9,-1
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80002982:	e0 49 3a 99 	cp.w	r9,15001
80002986:	c0 b0       	breq	8000299c <spi_read+0x20>

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80002988:	78 48       	ld.w	r8,r12[0x10]
8000298a:	e2 18 02 01 	andl	r8,0x201,COH
8000298e:	e0 48 02 01 	cp.w	r8,513
80002992:	cf 71       	brne	80002980 <spi_read+0x4>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80002994:	78 28       	ld.w	r8,r12[0x8]
80002996:	30 0c       	mov	r12,0
80002998:	b6 08       	st.h	r11[0x0],r8

	return SPI_OK;
}
8000299a:	5e fc       	retal	r12
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
8000299c:	5e ff       	retal	1
8000299e:	d7 03       	nop

800029a0 <udi_hid_mouse_btnmiddle>:
{
	return udi_hid_mouse_move(pos_x, 1);
}

bool udi_hid_mouse_btnmiddle(bool b_state)
{
800029a0:	eb cd 40 c0 	pushm	r6-r7,lr


static bool udi_hid_mouse_btn(bool b_state, uint8_t btn)
{
	// Modify buttons report
	if (HID_MOUSE_BTN_DOWN == b_state)
800029a4:	58 0c       	cp.w	r12,0
800029a6:	c1 d1       	brne	800029e0 <udi_hid_mouse_btnmiddle+0x40>
		udi_hid_mouse_report[0] |= btn;
	else
		udi_hid_mouse_report[0] &= ~(unsigned)btn;
800029a8:	e0 68 08 f4 	mov	r8,2292
800029ac:	11 89       	ld.ub	r9,r8[0x0]
800029ae:	a3 c9       	cbr	r9,0x2

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800029b0:	b0 89       	st.b	r8[0x0],r9
800029b2:	e1 b7 00 00 	mfsr	r7,0x0

	irqflags_t flags = cpu_irq_save();

	// Add position in HID mouse report
	s16_newpos = (int8_t) udi_hid_mouse_report[index_report];
	s16_newpos += pos;
800029b6:	d3 03       	ssrf	0x10
800029b8:	e0 6b 08 f4 	mov	r11,2292
	if ((-127 > s16_newpos) || (127 < s16_newpos)) {
800029bc:	f1 28 00 01 	ld.sb	r8,r8[1]
800029c0:	e0 69 00 fe 	mov	r9,254
800029c4:	f0 ca ff 81 	sub	r10,r8,-127
800029c8:	f2 0a 19 00 	cp.h	r10,r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800029cc:	e0 88 00 10 	brls	800029ec <udi_hid_mouse_btnmiddle+0x4c>
800029d0:	e6 17 00 01 	andh	r7,0x1,COH
      cpu_irq_enable();
   }

	barrier();
800029d4:	c0 30       	breq	800029da <udi_hid_mouse_btnmiddle+0x3a>
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
800029d6:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
   }

	barrier();
800029da:	d5 03       	csrf	0x10

static bool udi_hid_mouse_btn(bool b_state, uint8_t btn)
{
	// Modify buttons report
	if (HID_MOUSE_BTN_DOWN == b_state)
		udi_hid_mouse_report[0] |= btn;
800029dc:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800029e0:	e0 68 08 f4 	mov	r8,2292
800029e4:	11 89       	ld.ub	r9,r8[0x0]
	s16_newpos += pos;
	if ((-127 > s16_newpos) || (127 < s16_newpos)) {
		cpu_irq_restore(flags);
		return false;	// Overflow of report
	}
	udi_hid_mouse_report[index_report] = (uint8_t) s16_newpos;
800029e6:	a3 a9       	sbr	r9,0x2

	// Valid and send report
	udi_hid_mouse_b_report_valid = true;
800029e8:	b0 89       	st.b	r8[0x0],r9
800029ea:	ce 4b       	rjmp	800029b2 <udi_hid_mouse_btnmiddle+0x12>
800029ec:	b6 98       	st.b	r11[0x1],r8
}


static bool udi_hid_mouse_send_report(void)
{
	if (udi_hid_mouse_report_trans_ongoing)
800029ee:	e0 69 09 14 	mov	r9,2324
800029f2:	30 18       	mov	r8,1
800029f4:	b2 88       	st.b	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800029f6:	e0 66 08 f8 	mov	r6,2296
800029fa:	0d 88       	ld.ub	r8,r6[0x0]
      cpu_irq_enable();
   }

	barrier();
800029fc:	58 08       	cp.w	r8,0
800029fe:	c0 60       	breq	80002a0a <udi_hid_mouse_btnmiddle+0x6a>

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;
80002a00:	e6 17 00 01 	andh	r7,0x1,COH
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002a04:	c1 70       	breq	80002a32 <udi_hid_mouse_btnmiddle+0x92>
{
	if (udi_hid_mouse_report_trans_ongoing)
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
80002a06:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002a0a:	b2 88       	st.b	r9[0x0],r8
{
	if (udi_hid_mouse_report_trans_ongoing)
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
80002a0c:	f6 c9 ff ff 	sub	r9,r11,-1
80002a10:	76 0b       	ld.w	r11,r11[0x0]
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_MIDI_EP_IN,
80002a12:	12 c8       	st.b	r9++,r8
80002a14:	12 c8       	st.b	r9++,r8
80002a16:	e0 6a 09 10 	mov	r10,2320
80002a1a:	b2 88       	st.b	r9[0x0],r8
80002a1c:	95 0b       	st.w	r10[0x0],r11
80002a1e:	fe c8 ff e6 	sub	r8,pc,-26
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
80002a22:	30 49       	mov	r9,4
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
80002a24:	30 0b       	mov	r11,0
80002a26:	e0 6c 00 82 	mov	r12,130
80002a2a:	e0 a0 0e b5 	rcall	80004794 <udd_ep_run>
80002a2e:	ac 8c       	st.b	r6[0x0],r12
80002a30:	ce 8b       	rjmp	80002a00 <udi_hid_mouse_btnmiddle+0x60>
80002a32:	d5 03       	csrf	0x10
80002a34:	ce 9b       	rjmp	80002a06 <udi_hid_mouse_btnmiddle+0x66>
80002a36:	d7 03       	nop

80002a38 <udi_hid_mouse_report_sent>:
80002a38:	eb cd 40 80 	pushm	r7,lr
80002a3c:	e0 67 08 f8 	mov	r7,2296
{
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// Valid report sending
	udi_hid_mouse_report_trans_ongoing = false;
80002a40:	30 08       	mov	r8,0
	if (udi_hid_mouse_b_report_valid) {
80002a42:	ae 88       	st.b	r7[0x0],r8
80002a44:	e0 69 09 14 	mov	r9,2324
80002a48:	13 8a       	ld.ub	r10,r9[0x0]
80002a4a:	f0 0a 18 00 	cp.b	r10,r8
{
	if (udi_hid_mouse_report_trans_ongoing)
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
80002a4e:	c1 70       	breq	80002a7c <udi_hid_mouse_report_sent+0x44>
80002a50:	b2 88       	st.b	r9[0x0],r8
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002a52:	e0 6b 09 10 	mov	r11,2320
{
	if (udi_hid_mouse_report_trans_ongoing)
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
80002a56:	e0 6c 08 f4 	mov	r12,2292
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002a5a:	f8 c9 ff ff 	sub	r9,r12,-1
80002a5e:	78 0c       	ld.w	r12,r12[0x0]
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_MIDI_EP_IN,
80002a60:	12 c8       	st.b	r9++,r8
80002a62:	12 c8       	st.b	r9++,r8
80002a64:	97 0c       	st.w	r11[0x0],r12
80002a66:	b2 88       	st.b	r9[0x0],r8
80002a68:	16 9a       	mov	r10,r11
80002a6a:	fe c8 00 32 	sub	r8,pc,50
80002a6e:	30 49       	mov	r9,4
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
80002a70:	30 0b       	mov	r11,0
80002a72:	e0 6c 00 82 	mov	r12,130
80002a76:	e0 a0 0e 8f 	rcall	80004794 <udd_ep_run>
80002a7a:	ae 8c       	st.b	r7[0x0],r12
80002a7c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002a80 <udi_hid_mouse_moveY>:
80002a80:	eb cd 40 c0 	pushm	r6-r7,lr
80002a84:	e1 b7 00 00 	mfsr	r7,0x0
80002a88:	d3 03       	ssrf	0x10
80002a8a:	e0 68 08 f4 	mov	r8,2292
80002a8e:	f1 29 00 02 	ld.sb	r9,r8[2]

	irqflags_t flags = cpu_irq_save();

	// Add position in HID mouse report
	s16_newpos = (int8_t) udi_hid_mouse_report[index_report];
	s16_newpos += pos;
80002a92:	5c 6c       	casts.b	r12
80002a94:	f2 0c 00 0c 	add	r12,r9,r12
	if ((-127 > s16_newpos) || (127 < s16_newpos)) {
80002a98:	e0 69 00 fe 	mov	r9,254
80002a9c:	5c 8c       	casts.h	r12
80002a9e:	f8 ca ff 81 	sub	r10,r12,-127
80002aa2:	f2 0a 19 00 	cp.h	r10,r9
80002aa6:	e0 88 00 0a 	brls	80002aba <udi_hid_mouse_moveY+0x3a>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002aaa:	e6 17 00 01 	andh	r7,0x1,COH
      cpu_irq_enable();
   }

	barrier();
80002aae:	c0 30       	breq	80002ab4 <udi_hid_mouse_moveY+0x34>
80002ab0:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002ab4:	d5 03       	csrf	0x10
80002ab6:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
		return false;	// Overflow of report
	}
	udi_hid_mouse_report[index_report] = (uint8_t) s16_newpos;

	// Valid and send report
	udi_hid_mouse_b_report_valid = true;
80002aba:	30 19       	mov	r9,1
	s16_newpos += pos;
	if ((-127 > s16_newpos) || (127 < s16_newpos)) {
		cpu_irq_restore(flags);
		return false;	// Overflow of report
	}
	udi_hid_mouse_report[index_report] = (uint8_t) s16_newpos;
80002abc:	e0 6a 09 14 	mov	r10,2324
}


static bool udi_hid_mouse_send_report(void)
{
	if (udi_hid_mouse_report_trans_ongoing)
80002ac0:	b0 ac       	st.b	r8[0x2],r12
80002ac2:	b4 89       	st.b	r10[0x0],r9
80002ac4:	e0 66 08 f8 	mov	r6,2296
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002ac8:	0d 89       	ld.ub	r9,r6[0x0]
80002aca:	58 09       	cp.w	r9,0
80002acc:	c0 60       	breq	80002ad8 <udi_hid_mouse_moveY+0x58>
      cpu_irq_enable();
   }

	barrier();
80002ace:	e6 17 00 01 	andh	r7,0x1,COH

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;
80002ad2:	c1 70       	breq	80002b00 <udi_hid_mouse_moveY+0x80>
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002ad4:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
{
	if (udi_hid_mouse_report_trans_ongoing)
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
80002ad8:	b4 89       	st.b	r10[0x0],r9
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002ada:	f0 ca ff ff 	sub	r10,r8,-1
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_MIDI_EP_IN,
80002ade:	70 08       	ld.w	r8,r8[0x0]
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002ae0:	14 c9       	st.b	r10++,r9
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_MIDI_EP_IN,
80002ae2:	14 c9       	st.b	r10++,r9
80002ae4:	30 0b       	mov	r11,0
{
	if (udi_hid_mouse_report_trans_ongoing)
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
80002ae6:	b4 89       	st.b	r10[0x0],r9
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_MIDI_EP_IN,
80002ae8:	e0 6c 00 82 	mov	r12,130
80002aec:	e0 6a 09 10 	mov	r10,2320
80002af0:	30 49       	mov	r9,4
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
80002af2:	95 08       	st.w	r10[0x0],r8
80002af4:	fe c8 00 bc 	sub	r8,pc,188
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
80002af8:	e0 a0 0e 4e 	rcall	80004794 <udd_ep_run>
80002afc:	ac 8c       	st.b	r6[0x0],r12
80002afe:	ce 8b       	rjmp	80002ace <udi_hid_mouse_moveY+0x4e>
80002b00:	d5 03       	csrf	0x10
80002b02:	ce 9b       	rjmp	80002ad4 <udi_hid_mouse_moveY+0x54>

80002b04 <udi_hid_mouse_btnleft>:
80002b04:	eb cd 40 c0 	pushm	r6-r7,lr
80002b08:	58 0c       	cp.w	r12,0
80002b0a:	c1 d1       	brne	80002b44 <udi_hid_mouse_btnleft+0x40>
80002b0c:	e0 68 08 f4 	mov	r8,2292
80002b10:	11 89       	ld.ub	r9,r8[0x0]
80002b12:	a1 c9       	cbr	r9,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002b14:	b0 89       	st.b	r8[0x0],r9
80002b16:	e1 b7 00 00 	mfsr	r7,0x0

	irqflags_t flags = cpu_irq_save();

	// Add position in HID mouse report
	s16_newpos = (int8_t) udi_hid_mouse_report[index_report];
	s16_newpos += pos;
80002b1a:	d3 03       	ssrf	0x10
80002b1c:	e0 6b 08 f4 	mov	r11,2292
	if ((-127 > s16_newpos) || (127 < s16_newpos)) {
80002b20:	f1 28 00 01 	ld.sb	r8,r8[1]
80002b24:	e0 69 00 fe 	mov	r9,254
80002b28:	f0 ca ff 81 	sub	r10,r8,-127
80002b2c:	f2 0a 19 00 	cp.h	r10,r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002b30:	e0 88 00 10 	brls	80002b50 <udi_hid_mouse_btnleft+0x4c>
80002b34:	e6 17 00 01 	andh	r7,0x1,COH
      cpu_irq_enable();
   }

	barrier();
80002b38:	c0 30       	breq	80002b3e <udi_hid_mouse_btnleft+0x3a>
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
80002b3a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
   }

	barrier();
80002b3e:	d5 03       	csrf	0x10

static bool udi_hid_mouse_btn(bool b_state, uint8_t btn)
{
	// Modify buttons report
	if (HID_MOUSE_BTN_DOWN == b_state)
		udi_hid_mouse_report[0] |= btn;
80002b40:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002b44:	e0 68 08 f4 	mov	r8,2292
80002b48:	11 89       	ld.ub	r9,r8[0x0]
	s16_newpos += pos;
	if ((-127 > s16_newpos) || (127 < s16_newpos)) {
		cpu_irq_restore(flags);
		return false;	// Overflow of report
	}
	udi_hid_mouse_report[index_report] = (uint8_t) s16_newpos;
80002b4a:	a1 a9       	sbr	r9,0x0

	// Valid and send report
	udi_hid_mouse_b_report_valid = true;
80002b4c:	b0 89       	st.b	r8[0x0],r9
80002b4e:	ce 4b       	rjmp	80002b16 <udi_hid_mouse_btnleft+0x12>
80002b50:	b6 98       	st.b	r11[0x1],r8
}


static bool udi_hid_mouse_send_report(void)
{
	if (udi_hid_mouse_report_trans_ongoing)
80002b52:	e0 69 09 14 	mov	r9,2324
80002b56:	30 18       	mov	r8,1
80002b58:	b2 88       	st.b	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002b5a:	e0 66 08 f8 	mov	r6,2296
80002b5e:	0d 88       	ld.ub	r8,r6[0x0]
      cpu_irq_enable();
   }

	barrier();
80002b60:	58 08       	cp.w	r8,0
80002b62:	c0 60       	breq	80002b6e <udi_hid_mouse_btnleft+0x6a>

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;
80002b64:	e6 17 00 01 	andh	r7,0x1,COH
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002b68:	c1 70       	breq	80002b96 <udi_hid_mouse_btnleft+0x92>
{
	if (udi_hid_mouse_report_trans_ongoing)
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
80002b6a:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002b6e:	b2 88       	st.b	r9[0x0],r8
{
	if (udi_hid_mouse_report_trans_ongoing)
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
80002b70:	f6 c9 ff ff 	sub	r9,r11,-1
80002b74:	76 0b       	ld.w	r11,r11[0x0]
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_MIDI_EP_IN,
80002b76:	12 c8       	st.b	r9++,r8
80002b78:	12 c8       	st.b	r9++,r8
80002b7a:	e0 6a 09 10 	mov	r10,2320
80002b7e:	b2 88       	st.b	r9[0x0],r8
80002b80:	95 0b       	st.w	r10[0x0],r11
80002b82:	fe c8 01 4a 	sub	r8,pc,330
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
80002b86:	30 49       	mov	r9,4
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
80002b88:	30 0b       	mov	r11,0
80002b8a:	e0 6c 00 82 	mov	r12,130
80002b8e:	e0 a0 0e 03 	rcall	80004794 <udd_ep_run>
80002b92:	ac 8c       	st.b	r6[0x0],r12
80002b94:	ce 8b       	rjmp	80002b64 <udi_hid_mouse_btnleft+0x60>
80002b96:	d5 03       	csrf	0x10
80002b98:	ce 9b       	rjmp	80002b6a <udi_hid_mouse_btnleft+0x66>
80002b9a:	d7 03       	nop

80002b9c <udi_hid_mouse_btnright>:
80002b9c:	eb cd 40 c0 	pushm	r6-r7,lr
80002ba0:	58 0c       	cp.w	r12,0
80002ba2:	c1 d1       	brne	80002bdc <udi_hid_mouse_btnright+0x40>
{
	// Modify buttons report
	if (HID_MOUSE_BTN_DOWN == b_state)
		udi_hid_mouse_report[0] |= btn;
	else
		udi_hid_mouse_report[0] &= ~(unsigned)btn;
80002ba4:	e0 68 08 f4 	mov	r8,2292
80002ba8:	11 89       	ld.ub	r9,r8[0x0]
80002baa:	a1 d9       	cbr	r9,0x1

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002bac:	b0 89       	st.b	r8[0x0],r9
80002bae:	e1 b7 00 00 	mfsr	r7,0x0

	irqflags_t flags = cpu_irq_save();

	// Add position in HID mouse report
	s16_newpos = (int8_t) udi_hid_mouse_report[index_report];
	s16_newpos += pos;
80002bb2:	d3 03       	ssrf	0x10
80002bb4:	e0 6b 08 f4 	mov	r11,2292
	if ((-127 > s16_newpos) || (127 < s16_newpos)) {
80002bb8:	f1 28 00 01 	ld.sb	r8,r8[1]
80002bbc:	e0 69 00 fe 	mov	r9,254
80002bc0:	f0 ca ff 81 	sub	r10,r8,-127
80002bc4:	f2 0a 19 00 	cp.h	r10,r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002bc8:	e0 88 00 10 	brls	80002be8 <udi_hid_mouse_btnright+0x4c>
80002bcc:	e6 17 00 01 	andh	r7,0x1,COH
      cpu_irq_enable();
   }

	barrier();
80002bd0:	c0 30       	breq	80002bd6 <udi_hid_mouse_btnright+0x3a>
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
80002bd2:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
   }

	barrier();
80002bd6:	d5 03       	csrf	0x10

static bool udi_hid_mouse_btn(bool b_state, uint8_t btn)
{
	// Modify buttons report
	if (HID_MOUSE_BTN_DOWN == b_state)
		udi_hid_mouse_report[0] |= btn;
80002bd8:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002bdc:	e0 68 08 f4 	mov	r8,2292
80002be0:	11 89       	ld.ub	r9,r8[0x0]
	s16_newpos += pos;
	if ((-127 > s16_newpos) || (127 < s16_newpos)) {
		cpu_irq_restore(flags);
		return false;	// Overflow of report
	}
	udi_hid_mouse_report[index_report] = (uint8_t) s16_newpos;
80002be2:	a1 b9       	sbr	r9,0x1

	// Valid and send report
	udi_hid_mouse_b_report_valid = true;
80002be4:	b0 89       	st.b	r8[0x0],r9
80002be6:	ce 4b       	rjmp	80002bae <udi_hid_mouse_btnright+0x12>
80002be8:	b6 98       	st.b	r11[0x1],r8
}


static bool udi_hid_mouse_send_report(void)
{
	if (udi_hid_mouse_report_trans_ongoing)
80002bea:	e0 69 09 14 	mov	r9,2324
80002bee:	30 18       	mov	r8,1
80002bf0:	b2 88       	st.b	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002bf2:	e0 66 08 f8 	mov	r6,2296
80002bf6:	0d 88       	ld.ub	r8,r6[0x0]
      cpu_irq_enable();
   }

	barrier();
80002bf8:	58 08       	cp.w	r8,0
80002bfa:	c0 60       	breq	80002c06 <udi_hid_mouse_btnright+0x6a>

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;
80002bfc:	e6 17 00 01 	andh	r7,0x1,COH
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002c00:	c1 70       	breq	80002c2e <udi_hid_mouse_btnright+0x92>
{
	if (udi_hid_mouse_report_trans_ongoing)
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
80002c02:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002c06:	b2 88       	st.b	r9[0x0],r8
{
	if (udi_hid_mouse_report_trans_ongoing)
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
80002c08:	f6 c9 ff ff 	sub	r9,r11,-1
80002c0c:	76 0b       	ld.w	r11,r11[0x0]
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_MIDI_EP_IN,
80002c0e:	12 c8       	st.b	r9++,r8
80002c10:	12 c8       	st.b	r9++,r8
80002c12:	e0 6a 09 10 	mov	r10,2320
80002c16:	b2 88       	st.b	r9[0x0],r8
80002c18:	95 0b       	st.w	r10[0x0],r11
80002c1a:	fe c8 01 e2 	sub	r8,pc,482
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
80002c1e:	30 49       	mov	r9,4
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
80002c20:	30 0b       	mov	r11,0
80002c22:	e0 6c 00 82 	mov	r12,130
80002c26:	e0 a0 0d b7 	rcall	80004794 <udd_ep_run>
80002c2a:	ac 8c       	st.b	r6[0x0],r12
80002c2c:	ce 8b       	rjmp	80002bfc <udi_hid_mouse_btnright+0x60>
80002c2e:	d5 03       	csrf	0x10
80002c30:	ce 9b       	rjmp	80002c02 <udi_hid_mouse_btnright+0x66>
80002c32:	d7 03       	nop

80002c34 <udi_hid_mouse_moveX>:
80002c34:	eb cd 40 c0 	pushm	r6-r7,lr
80002c38:	e1 b7 00 00 	mfsr	r7,0x0
static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
	cpu_irq_disable();
80002c3c:	d3 03       	ssrf	0x10

	irqflags_t flags = cpu_irq_save();

	// Add position in HID mouse report
	s16_newpos = (int8_t) udi_hid_mouse_report[index_report];
	s16_newpos += pos;
80002c3e:	e0 68 08 f4 	mov	r8,2292
80002c42:	f1 29 00 01 	ld.sb	r9,r8[1]
80002c46:	5c 6c       	casts.b	r12
80002c48:	f2 0c 00 0c 	add	r12,r9,r12
	if ((-127 > s16_newpos) || (127 < s16_newpos)) {
80002c4c:	e0 69 00 fe 	mov	r9,254
80002c50:	5c 8c       	casts.h	r12
80002c52:	f8 ca ff 81 	sub	r10,r12,-127
80002c56:	f2 0a 19 00 	cp.h	r10,r9
80002c5a:	e0 88 00 0a 	brls	80002c6e <udi_hid_mouse_moveX+0x3a>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002c5e:	e6 17 00 01 	andh	r7,0x1,COH
      cpu_irq_enable();
   }

	barrier();
80002c62:	c0 30       	breq	80002c68 <udi_hid_mouse_moveX+0x34>
80002c64:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002c68:	d5 03       	csrf	0x10
80002c6a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
		return false;	// Overflow of report
	}
	udi_hid_mouse_report[index_report] = (uint8_t) s16_newpos;

	// Valid and send report
	udi_hid_mouse_b_report_valid = true;
80002c6e:	30 19       	mov	r9,1
	s16_newpos += pos;
	if ((-127 > s16_newpos) || (127 < s16_newpos)) {
		cpu_irq_restore(flags);
		return false;	// Overflow of report
	}
	udi_hid_mouse_report[index_report] = (uint8_t) s16_newpos;
80002c70:	e0 6a 09 14 	mov	r10,2324
}


static bool udi_hid_mouse_send_report(void)
{
	if (udi_hid_mouse_report_trans_ongoing)
80002c74:	b0 9c       	st.b	r8[0x1],r12
80002c76:	b4 89       	st.b	r10[0x0],r9
80002c78:	e0 66 08 f8 	mov	r6,2296
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002c7c:	0d 89       	ld.ub	r9,r6[0x0]
80002c7e:	58 09       	cp.w	r9,0
80002c80:	c0 60       	breq	80002c8c <udi_hid_mouse_moveX+0x58>
      cpu_irq_enable();
   }

	barrier();
80002c82:	e6 17 00 01 	andh	r7,0x1,COH

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;
80002c86:	c1 70       	breq	80002cb4 <udi_hid_mouse_moveX+0x80>
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002c88:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
{
	if (udi_hid_mouse_report_trans_ongoing)
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
80002c8c:	b4 89       	st.b	r10[0x0],r9
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002c8e:	f0 ca ff ff 	sub	r10,r8,-1
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_MIDI_EP_IN,
80002c92:	70 08       	ld.w	r8,r8[0x0]
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002c94:	14 c9       	st.b	r10++,r9
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_MIDI_EP_IN,
80002c96:	14 c9       	st.b	r10++,r9
80002c98:	30 0b       	mov	r11,0
{
	if (udi_hid_mouse_report_trans_ongoing)
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
80002c9a:	b4 89       	st.b	r10[0x0],r9
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_MIDI_EP_IN,
80002c9c:	e0 6c 00 82 	mov	r12,130
80002ca0:	e0 6a 09 10 	mov	r10,2320
80002ca4:	30 49       	mov	r9,4
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
80002ca6:	95 08       	st.w	r10[0x0],r8
80002ca8:	fe c8 02 70 	sub	r8,pc,624
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
80002cac:	e0 a0 0d 74 	rcall	80004794 <udd_ep_run>
80002cb0:	ac 8c       	st.b	r6[0x0],r12
80002cb2:	ce 8b       	rjmp	80002c82 <udi_hid_mouse_moveX+0x4e>
80002cb4:	d5 03       	csrf	0x10
80002cb6:	ce 9b       	rjmp	80002c88 <udi_hid_mouse_moveX+0x54>

80002cb8 <handleKey>:
	}
	return i;
}

static void handleKey(uint8_t ctrlByte, uint8_t msgByte1, uint8_t msgByte2)
{
80002cb8:	d4 01       	pushm	lr
	lcd_clear_line(1);
	dip204_printf_string("control: %u",ctrlByte);
	lcd_clear_line(2);
	dip204_printf_string("note: %u", msgByte1);*/

	switch(control)
80002cba:	39 09       	mov	r9,-112
	}
	return i;
}

static void handleKey(uint8_t ctrlByte, uint8_t msgByte1, uint8_t msgByte2)
{
80002cbc:	16 98       	mov	r8,r11
	lcd_clear_line(1);
	dip204_printf_string("control: %u",ctrlByte);
	lcd_clear_line(2);
	dip204_printf_string("note: %u", msgByte1);*/

	switch(control)
80002cbe:	e0 1c ff f0 	andl	r12,0xfff0
80002cc2:	f2 0c 18 00 	cp.b	r12,r9
80002cc6:	c1 90       	breq	80002cf8 <handleKey+0x40>
80002cc8:	e0 88 00 0e 	brls	80002ce4 <handleKey+0x2c>
80002ccc:	3b 09       	mov	r9,-80
80002cce:	f2 0c 18 00 	cp.b	r12,r9
80002cd2:	c0 e0       	breq	80002cee <handleKey+0x36>
80002cd4:	3c 09       	mov	r9,-64
80002cd6:	f2 0c 18 00 	cp.b	r12,r9
80002cda:	c0 91       	brne	80002cec <handleKey+0x34>
		case 176:
			controlChange(msgByte1,msgByte2);
			break;
		// program change	
		case 192:
			programChange(msgByte1);
80002cdc:	16 9c       	mov	r12,r11
80002cde:	e0 a0 03 db 	rcall	80003494 <programChange>
80002ce2:	d8 02       	popm	pc
	lcd_clear_line(1);
	dip204_printf_string("control: %u",ctrlByte);
	lcd_clear_line(2);
	dip204_printf_string("note: %u", msgByte1);*/

	switch(control)
80002ce4:	38 09       	mov	r9,-128
80002ce6:	f2 0c 18 00 	cp.b	r12,r9
80002cea:	c1 00       	breq	80002d0a <handleKey+0x52>
80002cec:	d8 02       	popm	pc
			noteOut();
			midiVol();
			break;
		// control change
		case 176:
			controlChange(msgByte1,msgByte2);
80002cee:	14 9b       	mov	r11,r10
80002cf0:	10 9c       	mov	r12,r8
80002cf2:	e0 a0 03 cf 	rcall	80003490 <controlChange>
			break;
80002cf6:	d8 02       	popm	pc
	dip204_printf_string("note: %u", msgByte1);*/

	switch(control)
	{
		case 144:
			addNote(msgByte1,msgByte2);
80002cf8:	14 9b       	mov	r11,r10
80002cfa:	10 9c       	mov	r12,r8
80002cfc:	e0 a0 06 5c 	rcall	800039b4 <addNote>

			//DAC16Send(1,calculateDACvalue());
			noteOut();
80002d00:	e0 a0 03 ce 	rcall	8000349c <noteOut>
			midiVol();
80002d04:	e0 a0 04 9a 	rcall	80003638 <midiVol>
			break;
80002d08:	d8 02       	popm	pc
		case 128:
			removeNote(msgByte1);
80002d0a:	16 9c       	mov	r12,r11
80002d0c:	e0 a0 05 26 	rcall	80003758 <removeNote>
			//DAC16Send(1,calculateDACvalue());
			noteOut();
80002d10:	e0 a0 03 c6 	rcall	8000349c <noteOut>
			midiVol();
80002d14:	e0 a0 04 92 	rcall	80003638 <midiVol>
			break;
80002d18:	d8 02       	popm	pc
80002d1a:	d7 03       	nop

80002d1c <uhi_midi_enable>:
80002d1c:	eb cd 40 c0 	pushm	r6-r7,lr
80002d20:	e0 68 09 18 	mov	r8,2328
80002d24:	70 06       	ld.w	r6,r8[0x0]
80002d26:	18 36       	cp.w	r6,r12
80002d28:	c0 30       	breq	80002d2e <uhi_midi_enable+0x12>
80002d2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002d2e:	30 17       	mov	r7,1
80002d30:	b0 d7       	st.b	r8[0x5],r7
80002d32:	e0 a0 04 cb 	rcall	800036c8 <initNoteStack>

	// Init value
	initNoteStack();
	firstMsg = 1;
	//uhi_midi_sof(false);
	UHI_MIDI_CHANGE(dev, true);
80002d36:	e0 68 00 a0 	mov	r8,160
80002d3a:	0c 9c       	mov	r12,r6
80002d3c:	b0 87       	st.b	r8[0x0],r7
80002d3e:	30 1b       	mov	r11,1
80002d40:	ce 4d       	rcall	80003108 <ui_uhi_midi_change>
80002d42:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002d46:	d7 03       	nop

80002d48 <uhi_midi_free_device>:
80002d48:	eb cd 40 80 	pushm	r7,lr
80002d4c:	e0 67 09 18 	mov	r7,2328
80002d50:	6e 5c       	ld.w	r12,r7[0x14]
80002d52:	58 0c       	cp.w	r12,0
//@{

static void uhi_midi_free_device(void)
{
	if(uhi_midi_dev.line_rx.buffer[0].ptr)
		free(uhi_midi_dev.line_rx.buffer[0].ptr);
80002d54:	c0 30       	breq	80002d5a <uhi_midi_free_device+0x12>
80002d56:	e0 a0 36 4d 	rcall	800099f0 <free>
	if (uhi_midi_dev.line_rx.buffer[1].ptr)
80002d5a:	6e 7c       	ld.w	r12,r7[0x1c]
80002d5c:	58 0c       	cp.w	r12,0
		free(uhi_midi_dev.line_rx.buffer[1].ptr);
80002d5e:	c0 30       	breq	80002d64 <uhi_midi_free_device+0x1c>
80002d60:	e0 a0 36 48 	rcall	800099f0 <free>
	if (uhi_midi_dev.line_tx.buffer[0].ptr)
80002d64:	6e bc       	ld.w	r12,r7[0x2c]
80002d66:	58 0c       	cp.w	r12,0
		free(uhi_midi_dev.line_tx.buffer[0].ptr);
80002d68:	c0 30       	breq	80002d6e <uhi_midi_free_device+0x26>
80002d6a:	e0 a0 36 43 	rcall	800099f0 <free>
	if (uhi_midi_dev.line_tx.buffer[1].ptr)
80002d6e:	6e dc       	ld.w	r12,r7[0x34]
80002d70:	58 0c       	cp.w	r12,0
		free(uhi_midi_dev.line_tx.buffer[1].ptr);
80002d72:	c0 30       	breq	80002d78 <uhi_midi_free_device+0x30>
80002d74:	e0 a0 36 3e 	rcall	800099f0 <free>
80002d78:	e3 cd 80 80 	ldm	sp++,r7,pc

80002d7c <uhi_midi_install>:
80002d7c:	d4 31       	pushm	r0-r7,lr
80002d7e:	20 2d       	sub	sp,8
80002d80:	e0 64 09 18 	mov	r4,2328
	uint16_t conf_desc_lgt;
	usb_iface_desc_t *ptr_iface;
	uhi_midi_line_t *ptr_line;
	
	
	if (uhi_midi_dev.dev != NULL) {
80002d84:	18 90       	mov	r0,r12
80002d86:	68 01       	ld.w	r1,r4[0x0]
80002d88:	58 01       	cp.w	r1,0
					ptr_line->buffer[0].pos = 0;
					ptr_line->buffer[0].nb = 0;
					ptr_line->buffer[0].ptr = calloc(buf_size,sizeof(uint8_t));
					if (ptr_line->buffer[0].ptr == NULL) {
						Assert(false);
						uhi_midi_free_device();
80002d8a:	c0 40       	breq	80002d92 <uhi_midi_install+0x16>
		return UHC_ENUM_SUCCESS;
	}
	
	uhi_midi_free_device();
	return UHC_ENUM_UNSUPPORTED; // No interface supported
}
80002d8c:	30 5c       	mov	r12,5
80002d8e:	2f ed       	sub	sp,-8
	
	
	if (uhi_midi_dev.dev != NULL) {
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
80002d90:	d8 32       	popm	r0-r7,pc
80002d92:	78 67       	ld.w	r7,r12[0x18]
80002d94:	0f a6       	ld.ub	r6,r7[0x2]
80002d96:	0f b8       	ld.ub	r8,r7[0x3]
80002d98:	f1 e6 10 86 	or	r6,r8,r6<<0x8
80002d9c:	5c c6       	swap.bh	r6
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	while(conf_desc_lgt) {
80002d9e:	5c 86       	casts.h	r6
		switch (ptr_iface->bDescriptorType) {
80002da0:	c6 50       	breq	80002e6a <uhi_midi_install+0xee>
80002da2:	30 45       	mov	r5,4
					ptr_line->ep_data = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
					ptr_line->b_trans_ongoing = false;
					ptr_line->buf_sel = 0;
					
					// Allocate and initialize buffers
					uint16_t buf_size = Max( le16_to_cpu(
80002da4:	30 52       	mov	r2,5
80002da6:	50 1c       	stdsp	sp[0x4],r12
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	while(conf_desc_lgt) {
		switch (ptr_iface->bDescriptorType) {
80002da8:	c0 98       	rjmp	80002dba <uhi_midi_install+0x3e>
80002daa:	e4 08 18 00 	cp.b	r8,r2
		default:
			// Ignore descriptor
			break;
		}
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
80002dae:	c1 e0       	breq	80002dea <uhi_midi_install+0x6e>
80002db0:	0f 88       	ld.ub	r8,r7[0x0]
80002db2:	10 16       	sub	r6,r8
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	while(conf_desc_lgt) {
80002db4:	5c 86       	casts.h	r6
			// Ignore descriptor
			break;
		}
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
80002db6:	c5 90       	breq	80002e68 <uhi_midi_install+0xec>
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	while(conf_desc_lgt) {
		switch (ptr_iface->bDescriptorType) {
80002db8:	10 07       	add	r7,r8
80002dba:	0f 98       	ld.ub	r8,r7[0x1]
80002dbc:	ea 08 18 00 	cp.b	r8,r5

		case USB_DT_INTERFACE:
			if ((ptr_iface->bInterfaceClass == AUDIO_CLASS)
80002dc0:	cf 51       	brne	80002daa <uhi_midi_install+0x2e>
80002dc2:	0f d8       	ld.ub	r8,r7[0x5]
80002dc4:	30 1a       	mov	r10,1
80002dc6:	f4 08 18 00 	cp.b	r8,r10
					ptr_line->buffer[1].nb = 0;
					ptr_line->buffer[1].ptr = calloc(buf_size,sizeof(uint8_t));
					if (ptr_line->buffer[1].ptr == NULL) {
						Assert(false);
						uhi_midi_free_device();
						return UHC_ENUM_SOFTWARE_LIMIT;
80002dca:	c0 30       	breq	80002dd0 <uhi_midi_install+0x54>
80002dcc:	30 01       	mov	r1,0
	while(conf_desc_lgt) {
		switch (ptr_iface->bDescriptorType) {

		case USB_DT_INTERFACE:
			if ((ptr_iface->bInterfaceClass == AUDIO_CLASS)
			&& (ptr_iface->bInterfaceProtocol == 0) ) {
80002dce:	cf 1b       	rjmp	80002db0 <uhi_midi_install+0x34>
80002dd0:	0f f8       	ld.ub	r8,r7[0x7]
80002dd2:	30 0a       	mov	r10,0
80002dd4:	f4 08 18 00 	cp.b	r8,r10
				// USB MIDI interface found
				// Start allocation endpoint(s)
				b_iface_supported = true;
				uhi_midi_dev.iface_num = ptr_iface->bInterfaceNumber;
80002dd8:	cf a1       	brne	80002dcc <uhi_midi_install+0x50>
				uhi_midi_dev.line_rx.ep_data = 0;
				uhi_midi_dev.line_tx.ep_data = 0;
80002dda:	0f a9       	ld.ub	r9,r7[0x2]
80002ddc:	30 11       	mov	r1,1
80002dde:	e9 68 00 20 	st.b	r4[32],r8
			&& (ptr_iface->bInterfaceProtocol == 0) ) {
				// USB MIDI interface found
				// Start allocation endpoint(s)
				b_iface_supported = true;
				uhi_midi_dev.iface_num = ptr_iface->bInterfaceNumber;
				uhi_midi_dev.line_rx.ep_data = 0;
80002de2:	a8 c9       	st.b	r4[0x4],r9
80002de4:	e9 68 00 08 	st.b	r4[8],r8
			}
			break;

		case USB_DT_ENDPOINT:
			//  Allocation of the endpoint
			if (!b_iface_supported) {
80002de8:	ce 4b       	rjmp	80002db0 <uhi_midi_install+0x34>
80002dea:	58 01       	cp.w	r1,0
				break;
			}
			if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
80002dec:	ce 20       	breq	80002db0 <uhi_midi_install+0x34>
80002dee:	40 19       	lddsp	r9,sp[0x4]
80002df0:	0e 9b       	mov	r11,r7
80002df2:	f3 3c 00 12 	ld.ub	r12,r9[18]
80002df6:	e0 a0 13 65 	rcall	800054c0 <uhd_ep_alloc>
				return UHC_ENUM_HARDWARE_LIMIT; // Endpoint allocation fail
			}
			switch(((usb_ep_desc_t*)ptr_iface)->bmAttributes & USB_EP_TYPE_MASK)
80002dfa:	c4 d0       	breq	80002e94 <uhi_midi_install+0x118>
80002dfc:	0f b8       	ld.ub	r8,r7[0x3]
80002dfe:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002e02:	58 28       	cp.w	r8,2
			{
				case USB_EP_TYPE_BULK:
					if(((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN)
80002e04:	cd 61       	brne	80002db0 <uhi_midi_install+0x34>
80002e06:	0f a8       	ld.ub	r8,r7[0x2]
80002e08:	30 0a       	mov	r10,0
80002e0a:	f4 08 18 00 	cp.b	r8,r10
80002e0e:	c3 d5       	brlt	80002e88 <uhi_midi_install+0x10c>
80002e10:	e8 c3 ff e0 	sub	r3,r4,-32
						ptr_line = &uhi_midi_dev.line_rx;
					else
						ptr_line = &uhi_midi_dev.line_tx;
					ptr_line->ep_data = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
80002e14:	30 09       	mov	r9,0
					ptr_line->b_trans_ongoing = false;
80002e16:	a6 88       	st.b	r3[0x0],r8
					ptr_line->buf_sel = 0;
80002e18:	a6 99       	st.b	r3[0x1],r9
					
					// Allocate and initialize buffers
					uint16_t buf_size = Max( le16_to_cpu(
80002e1a:	a6 c9       	st.b	r3[0x4],r9
80002e1c:	34 0a       	mov	r10,64
80002e1e:	0f c9       	ld.ub	r9,r7[0x4]
80002e20:	0f d8       	ld.ub	r8,r7[0x5]
80002e22:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80002e26:	5c c8       	swap.bh	r8
80002e28:	5c 88       	casts.h	r8
80002e2a:	f4 08 19 00 	cp.h	r8,r10
80002e2e:	e0 8b 00 2a 	brhi	80002e82 <uhi_midi_install+0x106>
80002e32:	34 08       	mov	r8,64
							((usb_ep_desc_t*)ptr_iface)->wMaxPacketSize),
							UHI_MIDI_BUFFER_SIZE );
					ptr_line->buffer_size = buf_size;
80002e34:	10 99       	mov	r9,r8
					ptr_line->buffer[0].pos = 0;
80002e36:	a6 39       	st.h	r3[0x6],r9
80002e38:	30 00       	mov	r0,0
					ptr_line->buffer[0].nb = 0;
80002e3a:	a6 40       	st.h	r3[0x8],r0
					ptr_line->buffer[0].ptr = calloc(buf_size,sizeof(uint8_t));
80002e3c:	a6 50       	st.h	r3[0xa],r0
80002e3e:	10 9c       	mov	r12,r8
80002e40:	50 08       	stdsp	sp[0x0],r8
80002e42:	30 1b       	mov	r11,1
80002e44:	e0 a0 35 a4 	rcall	8000998c <calloc>
					if (ptr_line->buffer[0].ptr == NULL) {
80002e48:	87 3c       	st.w	r3[0xc],r12
80002e4a:	40 08       	lddsp	r8,sp[0x0]
						Assert(false);
						uhi_midi_free_device();
						return UHC_ENUM_SOFTWARE_LIMIT;
					}
					ptr_line->buffer[1].pos = 0;
					ptr_line->buffer[1].nb = 0;
80002e4c:	c2 60       	breq	80002e98 <uhi_midi_install+0x11c>
80002e4e:	e7 50 00 12 	st.h	r3[18],r0
					if (ptr_line->buffer[0].ptr == NULL) {
						Assert(false);
						uhi_midi_free_device();
						return UHC_ENUM_SOFTWARE_LIMIT;
					}
					ptr_line->buffer[1].pos = 0;
80002e52:	e7 50 00 10 	st.h	r3[16],r0
					ptr_line->buffer[1].nb = 0;
					ptr_line->buffer[1].ptr = calloc(buf_size,sizeof(uint8_t));
80002e56:	10 9c       	mov	r12,r8
80002e58:	30 1b       	mov	r11,1
80002e5a:	e0 a0 35 99 	rcall	8000998c <calloc>
					if (ptr_line->buffer[1].ptr == NULL) {
80002e5e:	87 5c       	st.w	r3[0x14],r12
						Assert(false);
						uhi_midi_free_device();
80002e60:	ca 81       	brne	80002db0 <uhi_midi_install+0x34>
80002e62:	c7 3f       	rcall	80002d48 <uhi_midi_free_device>
80002e64:	30 5c       	mov	r12,5
						return UHC_ENUM_SOFTWARE_LIMIT;
80002e66:	c9 4b       	rjmp	80002d8e <uhi_midi_install+0x12>
80002e68:	40 10       	lddsp	r0,sp[0x4]
		conf_desc_lgt -= ptr_iface->bLength;
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
	}
		
	// All endpoints of all interfaces supported allocated
	if(uhi_midi_dev.line_rx.ep_data)
80002e6a:	e9 3a 00 08 	ld.ub	r10,r4[8]
80002e6e:	e0 69 09 18 	mov	r9,2328
80002e72:	30 08       	mov	r8,0
80002e74:	f0 0a 18 00 	cp.b	r10,r8
	{
		uhi_midi_dev.b_enabled = false;
		uhi_midi_dev.dev = dev;
80002e78:	c0 b0       	breq	80002e8e <uhi_midi_install+0x112>
	}
		
	// All endpoints of all interfaces supported allocated
	if(uhi_midi_dev.line_rx.ep_data)
	{
		uhi_midi_dev.b_enabled = false;
80002e7a:	93 00       	st.w	r9[0x0],r0
		uhi_midi_dev.dev = dev;
80002e7c:	b2 d8       	st.b	r9[0x5],r8
			
		return UHC_ENUM_SUCCESS;
80002e7e:	30 0c       	mov	r12,0
					ptr_line->ep_data = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
					ptr_line->b_trans_ongoing = false;
					ptr_line->buf_sel = 0;
					
					// Allocate and initialize buffers
					uint16_t buf_size = Max( le16_to_cpu(
80002e80:	c8 7b       	rjmp	80002d8e <uhi_midi_install+0x12>
80002e82:	10 99       	mov	r9,r8
80002e84:	5c 78       	castu.h	r8
				return UHC_ENUM_HARDWARE_LIMIT; // Endpoint allocation fail
			}
			switch(((usb_ep_desc_t*)ptr_iface)->bmAttributes & USB_EP_TYPE_MASK)
			{
				case USB_EP_TYPE_BULK:
					if(((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN)
80002e86:	cd 8b       	rjmp	80002e36 <uhi_midi_install+0xba>
80002e88:	e8 c3 ff f8 	sub	r3,r4,-8
		uhi_midi_dev.dev = dev;
			
		return UHC_ENUM_SUCCESS;
	}
	
	uhi_midi_free_device();
80002e8c:	cc 4b       	rjmp	80002e14 <uhi_midi_install+0x98>
80002e8e:	c5 df       	rcall	80002d48 <uhi_midi_free_device>
80002e90:	30 1c       	mov	r12,1
	return UHC_ENUM_UNSUPPORTED; // No interface supported
80002e92:	c7 eb       	rjmp	80002d8e <uhi_midi_install+0x12>
		case USB_DT_ENDPOINT:
			//  Allocation of the endpoint
			if (!b_iface_supported) {
				break;
			}
			if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
80002e94:	30 4c       	mov	r12,4
80002e96:	c7 cb       	rjmp	80002d8e <uhi_midi_install+0x12>
					ptr_line->buffer[0].pos = 0;
					ptr_line->buffer[0].nb = 0;
					ptr_line->buffer[0].ptr = calloc(buf_size,sizeof(uint8_t));
					if (ptr_line->buffer[0].ptr == NULL) {
						Assert(false);
						uhi_midi_free_device();
80002e98:	c5 8f       	rcall	80002d48 <uhi_midi_free_device>
80002e9a:	c7 9b       	rjmp	80002d8c <uhi_midi_install+0x10>

80002e9c <T.41>:
80002e9c:	eb cd 40 e0 	pushm	r5-r7,lr
80002ea0:	e1 b6 00 00 	mfsr	r6,0x0
80002ea4:	d3 03       	ssrf	0x10
80002ea6:	e0 67 09 18 	mov	r7,2328
80002eaa:	30 08       	mov	r8,0
80002eac:	ef 39 00 09 	ld.ub	r9,r7[9]
	uhi_midi_buf_t *buf_nosel;
	uhi_midi_buf_t *buf_sel;

	flags = cpu_irq_save();
	// Check if transfer is already on-going
	if (line->b_trans_ongoing) {
80002eb0:	f0 09 18 00 	cp.b	r9,r8
	// Search an empty buffer to start a transfer
	//buf_sel = &line->buffer[line->buf_sel];
	//buf_nosel = &line->buffer[(line->buf_sel == 0)? 1 : 0];
	buf_sel = &line->buffer[0];
	buf_nosel = &line->buffer[0];
	if (buf_sel->pos >= buf_sel->nb) {
80002eb4:	c3 31       	brne	80002f1a <T.41+0x7e>
80002eb6:	ef 08 00 12 	ld.sh	r8,r7[18]
80002eba:	ef 09 00 10 	ld.sh	r9,r7[16]
80002ebe:	f0 09 19 00 	cp.h	r9,r8
		// The current buffer has been read
		// then reset it
		buf_sel->pos = 0;
80002ec2:	c2 a3       	brcs	80002f16 <T.41+0x7a>
		buf_sel->nb = 0;
80002ec4:	30 08       	mov	r8,0
80002ec6:	ef 58 00 12 	st.h	r7[18],r8
	buf_sel = &line->buffer[0];
	buf_nosel = &line->buffer[0];
	if (buf_sel->pos >= buf_sel->nb) {
		// The current buffer has been read
		// then reset it
		buf_sel->pos = 0;
80002eca:	ef 58 00 10 	st.h	r7[16],r8
		cpu_irq_restore(flags);
		return false;
	}

	// Check if transfer must be delayed after the next SOF
	if (uhi_midi_dev.dev->speed == UHD_SPEED_HIGH) {
80002ece:	6e 08       	ld.w	r8,r7[0x0]
80002ed0:	70 59       	ld.w	r9,r8[0x14]
80002ed2:	e0 68 09 18 	mov	r8,2328
		if (line->sof == uhd_get_microframe_number()) {
			cpu_irq_restore(flags);
			return false;
		}
	} else {
		if (line->sof == uhd_get_frame_number()) {
80002ed6:	58 29       	cp.w	r9,2
80002ed8:	c2 70       	breq	80002f26 <T.41+0x8a>
80002eda:	90 55       	ld.sh	r5,r8[0xa]
80002edc:	e0 a0 12 22 	rcall	80005320 <uhd_get_frame_number>
80002ee0:	f8 05 19 00 	cp.h	r5,r12
			return false;
		}
	}

	// Start transfer on empty buffer
	line->b_trans_ongoing = true;
80002ee4:	c1 b0       	breq	80002f1a <T.41+0x7e>
80002ee6:	30 18       	mov	r8,1
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002ee8:	ef 68 00 09 	st.b	r7[9],r8
80002eec:	e6 16 00 01 	andh	r6,0x1,COH
	cpu_irq_restore(flags);

	return uhd_ep_run(
80002ef0:	c2 20       	breq	80002f34 <T.41+0x98>
80002ef2:	fe c9 fe de 	sub	r9,pc,-290
80002ef6:	6e 08       	ld.w	r8,r7[0x0]
80002ef8:	ef 3b 00 08 	ld.ub	r11,r7[8]
80002efc:	1a d9       	st.w	--sp,r9
80002efe:	30 a9       	mov	r9,10
80002f00:	30 1a       	mov	r10,1
80002f02:	1a d9       	st.w	--sp,r9
80002f04:	f1 3c 00 12 	ld.ub	r12,r8[18]
80002f08:	6e 59       	ld.w	r9,r7[0x14]
80002f0a:	8e f8       	ld.uh	r8,r7[0xe]
	true,
	buf_nosel->ptr,
	line->buffer_size,
	10,
	uhi_midi_rx_received);
}
80002f0c:	e0 a0 17 a8 	rcall	80005e5c <uhd_ep_run>
	if (buf_nosel->nb) {
		// No empty buffer available to start a transfer
		cpu_irq_restore(flags);
		return false;
	}*/
	if(buf_sel->nb)
80002f10:	2f ed       	sub	sp,-8
80002f12:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002f16:	58 08       	cp.w	r8,0
80002f18:	cd b0       	breq	80002ece <T.41+0x32>
      cpu_irq_enable();
80002f1a:	e6 16 00 01 	andh	r6,0x1,COH
   }

	barrier();
80002f1e:	c0 21       	brne	80002f22 <T.41+0x86>
		return false;
	}

	// Check if transfer must be delayed after the next SOF
	if (uhi_midi_dev.dev->speed == UHD_SPEED_HIGH) {
		if (line->sof == uhd_get_microframe_number()) {
80002f20:	d5 03       	csrf	0x10
80002f22:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002f26:	90 55       	ld.sh	r5,r8[0xa]
80002f28:	e0 a0 12 02 	rcall	8000532c <uhd_get_microframe_number>
80002f2c:	f8 05 19 00 	cp.h	r5,r12
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
80002f30:	cd b1       	brne	80002ee6 <T.41+0x4a>
80002f32:	cf 4b       	rjmp	80002f1a <T.41+0x7e>
80002f34:	d5 03       	csrf	0x10
80002f36:	cd eb       	rjmp	80002ef2 <T.41+0x56>

80002f38 <uhi_midi_sof>:
80002f38:	d4 21       	pushm	r4-r7,lr
80002f3a:	e0 67 09 18 	mov	r7,2328
80002f3e:	6e 08       	ld.w	r8,r7[0x0]
80002f40:	58 08       	cp.w	r8,0
80002f42:	c0 60       	breq	80002f4e <uhi_midi_sof+0x16>
80002f44:	0f d8       	ld.ub	r8,r7[0x5]
80002f46:	30 05       	mov	r5,0
	UNUSED(b_micro);

	if (uhi_midi_dev.dev == NULL) {
		return; // No interface to installed
	}
	if (!uhi_midi_dev.b_enabled) {
80002f48:	ea 08 18 00 	cp.b	r8,r5
80002f4c:	c0 21       	brne	80002f50 <uhi_midi_sof+0x18>
		return; // Interface not enabled
	}

	// Update transfers
	uhi_midi_line_t *line = &uhi_midi_dev.line_rx;
	uhi_midi_rx_update(line);
80002f4e:	d8 22       	popm	r4-r7,pc
80002f50:	ca 6f       	rcall	80002e9c <T.41>
	uint8_t i;
	
	line = &(uhi_midi_dev.line_rx);
	//buf = &line->buffer[(line->buf_sel == 0) ? 1 : 0];
	buf = &line->buffer[0];
	i = buf->pos;
80002f52:	ef 38 00 11 	ld.ub	r8,r7[17]
	
	ctrlByte = buf->ptr[++i];
80002f56:	6e 59       	ld.w	r9,r7[0x14]
80002f58:	2f f8       	sub	r8,-1
	// Update transfers
	uhi_midi_line_t *line = &uhi_midi_dev.line_rx;
	uhi_midi_rx_update(line);
	//uhi_midi_buf_t *buf = &line->buffer[(line->buf_sel == 0) ? 1 : 0];
	uhi_midi_buf_t *buf = &line->buffer[0];
	parseMIDI(buf->nb);
80002f5a:	ef 04 00 12 	ld.sh	r4,r7[18]
	line = &(uhi_midi_dev.line_rx);
	//buf = &line->buffer[(line->buf_sel == 0) ? 1 : 0];
	buf = &line->buffer[0];
	i = buf->pos;
	
	ctrlByte = buf->ptr[++i];
80002f5e:	5c 58       	castu.b	r8
80002f60:	10 09       	add	r9,r8
80002f62:	13 8c       	ld.ub	r12,r9[0x0]
	buf->ptr[i]=0;  // mark as read
80002f64:	b2 85       	st.b	r9[0x0],r5
	msgByte1 = buf->ptr[++i];
80002f66:	2f f8       	sub	r8,-1
80002f68:	6e 59       	ld.w	r9,r7[0x14]
80002f6a:	5c 58       	castu.b	r8
	msgByte2 = buf->ptr[++i];
80002f6c:	f0 c6 ff ff 	sub	r6,r8,-1
	buf = &line->buffer[0];
	i = buf->pos;
	
	ctrlByte = buf->ptr[++i];
	buf->ptr[i]=0;  // mark as read
	msgByte1 = buf->ptr[++i];
80002f70:	f2 08 07 0b 	ld.ub	r11,r9[r8]
	msgByte2 = buf->ptr[++i];
80002f74:	5c 56       	castu.b	r6
80002f76:	f2 06 07 0a 	ld.ub	r10,r9[r6]

	// throw away first message
	if(ctrlByte != 0 && firstMsg)
80002f7a:	58 0c       	cp.w	r12,0
80002f7c:	c3 90       	breq	80002fee <uhi_midi_sof+0xb6>
80002f7e:	e0 68 00 a0 	mov	r8,160
80002f82:	11 89       	ld.ub	r9,r8[0x0]
80002f84:	ea 09 18 00 	cp.b	r9,r5
		return 0;
	}
	
	if(ctrlByte != 0)
	{
		prevCtrlByte = ctrlByte;
80002f88:	c3 81       	brne	80002ff8 <uhi_midi_sof+0xc0>
80002f8a:	e0 68 09 52 	mov	r8,2386
		prevMsgByte1 = msgByte1;
		prevMsgByte2 = msgByte2;
		i++;
80002f8e:	b0 8c       	st.b	r8[0x0],r12
	}
	
	if(ctrlByte != 0)
	{
		prevCtrlByte = ctrlByte;
		prevMsgByte1 = msgByte1;
80002f90:	e0 68 09 50 	mov	r8,2384
		prevMsgByte2 = msgByte2;
		i++;
		do
		{
			handleKey(ctrlByte,msgByte1,msgByte2);
			ctrlByte = buf->ptr[++i];
80002f94:	2f f6       	sub	r6,-1
	
	if(ctrlByte != 0)
	{
		prevCtrlByte = ctrlByte;
		prevMsgByte1 = msgByte1;
		prevMsgByte2 = msgByte2;
80002f96:	b0 8b       	st.b	r8[0x0],r11
		i++;
		do
		{
			handleKey(ctrlByte,msgByte1,msgByte2);
80002f98:	e0 68 09 51 	mov	r8,2385
			ctrlByte = buf->ptr[++i];
80002f9c:	0e 95       	mov	r5,r7
80002f9e:	b0 8a       	st.b	r8[0x0],r10
80002fa0:	c8 ce       	rcall	80002cb8 <handleKey>
80002fa2:	ec c9 ff ff 	sub	r9,r6,-1
			msgByte1 = buf->ptr[++i];
			msgByte2 = buf->ptr[++i];
80002fa6:	5c 59       	castu.b	r9
		prevMsgByte2 = msgByte2;
		i++;
		do
		{
			handleKey(ctrlByte,msgByte1,msgByte2);
			ctrlByte = buf->ptr[++i];
80002fa8:	6e 58       	ld.w	r8,r7[0x14]
80002faa:	ec ca ff fc 	sub	r10,r6,-4
			msgByte1 = buf->ptr[++i];
80002fae:	f0 09 07 0c 	ld.ub	r12,r8[r9]
80002fb2:	ec c9 ff fe 	sub	r9,r6,-2
			msgByte2 = buf->ptr[++i];
80002fb6:	5c 59       	castu.b	r9
80002fb8:	f0 09 07 0b 	ld.ub	r11,r8[r9]
80002fbc:	ec c9 ff fd 	sub	r9,r6,-3
80002fc0:	ed da c0 08 	bfextu	r6,r10,0x0,0x8
			i++;
		} while(ctrlByte != 0 && i < line->buffer_size);
80002fc4:	5c 59       	castu.b	r9
80002fc6:	f0 09 07 0a 	ld.ub	r10,r8[r9]
80002fca:	58 0c       	cp.w	r12,0
80002fcc:	c0 70       	breq	80002fda <uhi_midi_sof+0xa2>
80002fce:	8a 78       	ld.sh	r8,r5[0xe]
80002fd0:	ec 08 19 00 	cp.h	r8,r6
		if(ctrlByte != 0)
			handleKey(ctrlByte,msgByte1,msgByte2);
80002fd4:	fe 9b ff e6 	brhi	80002fa0 <uhi_midi_sof+0x68>
			
			lcd_clear_line(4);
80002fd8:	c7 0e       	rcall	80002cb8 <handleKey>
80002fda:	30 4c       	mov	r12,4
			dip204_printf_string("%u of %u",i,maxBytes);			
80002fdc:	e0 a0 2f 9e 	rcall	80008f18 <lcd_clear_line>
80002fe0:	5c 54       	castu.b	r4
80002fe2:	48 cc       	lddpc	r12,80003010 <uhi_midi_sof+0xd8>
80002fe4:	1a d4       	st.w	--sp,r4
80002fe6:	1a d6       	st.w	--sp,r6
80002fe8:	fe b0 f8 10 	rcall	80002008 <dip204_printf_string>
	uhi_midi_line_t *line = &uhi_midi_dev.line_rx;
	uhi_midi_rx_update(line);
	//uhi_midi_buf_t *buf = &line->buffer[(line->buf_sel == 0) ? 1 : 0];
	uhi_midi_buf_t *buf = &line->buffer[0];
	parseMIDI(buf->nb);
	buf->pos = buf->nb;
80002fec:	2f ed       	sub	sp,-8
80002fee:	ef 08 00 12 	ld.sh	r8,r7[18]
80002ff2:	ef 58 00 10 	st.h	r7[16],r8

	// throw away first message
	if(ctrlByte != 0 && firstMsg)
	{
		firstMsg = 0;
		prevCtrlByte = ctrlByte;
80002ff6:	d8 22       	popm	r4-r7,pc
80002ff8:	b0 85       	st.b	r8[0x0],r5
		prevMsgByte1 = msgByte1;
80002ffa:	e0 68 09 52 	mov	r8,2386
		prevMsgByte2 = msgByte2;
80002ffe:	b0 8c       	st.b	r8[0x0],r12
80003000:	e0 68 09 50 	mov	r8,2384
80003004:	b0 8b       	st.b	r8[0x0],r11
80003006:	e0 68 09 51 	mov	r8,2385
8000300a:	b0 8a       	st.b	r8[0x0],r10
8000300c:	cf 1b       	rjmp	80002fee <uhi_midi_sof+0xb6>
8000300e:	d7 03       	nop
80003010:	80 00       	ld.sh	r0,r0[0x0]
80003012:	f6 00       	*unknown*

80003014 <uhi_midi_rx_received>:
80003014:	eb cd 40 80 	pushm	r7,lr
80003018:	20 1d       	sub	sp,4
8000301a:	58 7a       	cp.w	r10,7
8000301c:	5f 08       	sreq	r8
8000301e:	58 09       	cp.w	r9,0
80003020:	5f 1b       	srne	r11
80003022:	f7 e8 00 08 	and	r8,r11,r8
80003026:	c0 31       	brne	8000302c <uhi_midi_rx_received+0x18>
80003028:	58 0a       	cp.w	r10,0
8000302a:	c1 a1       	brne	8000305e <uhi_midi_rx_received+0x4a>
		line->b_trans_ongoing  = false;
		return;
	}
	
	// Update SOF tag, if it is a short packet
	if (nb_transferred != line->buffer_size) {
8000302c:	e0 67 09 18 	mov	r7,2328
80003030:	8e f8       	ld.uh	r8,r7[0xe]
80003032:	12 38       	cp.w	r8,r9
		if (uhi_midi_dev.dev->speed == UHD_SPEED_HIGH) {
80003034:	c0 a0       	breq	80003048 <uhi_midi_rx_received+0x34>
80003036:	6e 08       	ld.w	r8,r7[0x0]
80003038:	70 58       	ld.w	r8,r8[0x14]
8000303a:	58 28       	cp.w	r8,2
			line->sof = uhd_get_microframe_number();
			} else {
			line->sof = uhd_get_frame_number();
8000303c:	c1 80       	breq	8000306c <uhi_midi_rx_received+0x58>
8000303e:	50 09       	stdsp	sp[0x0],r9
80003040:	e0 a0 11 70 	rcall	80005320 <uhd_get_frame_number>
80003044:	ae 5c       	st.h	r7[0xa],r12
	}
	
	// Update buffer structure
	//buf = &line->buffer[(line->buf_sel == 0) ? 1 : 0];
	buf = &line->buffer[0];
	buf->pos = 0;
80003046:	40 09       	lddsp	r9,sp[0x0]
	buf->nb = nb_transferred;
80003048:	30 08       	mov	r8,0
8000304a:	ef 59 00 12 	st.h	r7[18],r9
	line->b_trans_ongoing  = false;
8000304e:	ef 68 00 09 	st.b	r7[9],r8
	}
	
	// Update buffer structure
	//buf = &line->buffer[(line->buf_sel == 0) ? 1 : 0];
	buf = &line->buffer[0];
	buf->pos = 0;
80003052:	ef 58 00 10 	st.h	r7[16],r8
	buf->nb = nb_transferred;
	line->b_trans_ongoing  = false;
	
	// Manage new transfer
	uhi_midi_rx_update(line);
80003056:	c2 3f       	rcall	80002e9c <T.41>
}
80003058:	2f fd       	sub	sp,-4
8000305a:	e3 cd 80 80 	ldm	sp++,r7,pc
	if ((UHD_TRANS_TIMEOUT == status) && nb_transferred) {
		// Save transfered
	}
	else if (UHD_TRANS_NOERROR != status) {
		// Abort transfer
		line->b_trans_ongoing  = false;
8000305e:	e0 69 09 18 	mov	r9,2328
80003062:	f3 68 00 09 	st.b	r9[9],r8
	buf->nb = nb_transferred;
	line->b_trans_ongoing  = false;
	
	// Manage new transfer
	uhi_midi_rx_update(line);
}
80003066:	2f fd       	sub	sp,-4
80003068:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	
	// Update SOF tag, if it is a short packet
	if (nb_transferred != line->buffer_size) {
		if (uhi_midi_dev.dev->speed == UHD_SPEED_HIGH) {
			line->sof = uhd_get_microframe_number();
8000306c:	50 09       	stdsp	sp[0x0],r9
8000306e:	e0 a0 11 5f 	rcall	8000532c <uhd_get_microframe_number>
80003072:	ae 5c       	st.h	r7[0xa],r12
80003074:	40 09       	lddsp	r9,sp[0x0]
80003076:	ce 9b       	rjmp	80003048 <uhi_midi_rx_received+0x34>

80003078 <uhi_midi_uninstall>:
80003078:	eb cd 40 c0 	pushm	r6-r7,lr
8000307c:	e0 67 09 18 	mov	r7,2328
80003080:	6e 06       	ld.w	r6,r7[0x0]
80003082:	18 36       	cp.w	r6,r12
80003084:	c0 30       	breq	8000308a <uhi_midi_uninstall+0x12>
80003086:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
void uhi_midi_uninstall(uhc_device_t* dev)
{
	if (uhi_midi_dev.dev != dev) {
		return; // Device not enabled in this interface
	}
	uhi_midi_dev.dev = NULL;
8000308a:	30 08       	mov	r8,0
 */
//@{

static void uhi_midi_free_device(void)
{
	if(uhi_midi_dev.line_rx.buffer[0].ptr)
8000308c:	8f 08       	st.w	r7[0x0],r8
8000308e:	6e 5c       	ld.w	r12,r7[0x14]
80003090:	58 0c       	cp.w	r12,0
		free(uhi_midi_dev.line_rx.buffer[0].ptr);
80003092:	c0 30       	breq	80003098 <uhi_midi_uninstall+0x20>
80003094:	e0 a0 34 ae 	rcall	800099f0 <free>
	if (uhi_midi_dev.line_rx.buffer[1].ptr)
80003098:	6e 7c       	ld.w	r12,r7[0x1c]
8000309a:	58 0c       	cp.w	r12,0
		free(uhi_midi_dev.line_rx.buffer[1].ptr);
8000309c:	c0 30       	breq	800030a2 <uhi_midi_uninstall+0x2a>
8000309e:	e0 a0 34 a9 	rcall	800099f0 <free>
	if (uhi_midi_dev.line_tx.buffer[0].ptr)
800030a2:	6e bc       	ld.w	r12,r7[0x2c]
800030a4:	58 0c       	cp.w	r12,0
		free(uhi_midi_dev.line_tx.buffer[0].ptr);
800030a6:	c0 30       	breq	800030ac <uhi_midi_uninstall+0x34>
800030a8:	e0 a0 34 a4 	rcall	800099f0 <free>
	if (uhi_midi_dev.line_tx.buffer[1].ptr)
800030ac:	6e dc       	ld.w	r12,r7[0x34]
800030ae:	58 0c       	cp.w	r12,0
		free(uhi_midi_dev.line_tx.buffer[1].ptr);
800030b0:	c0 30       	breq	800030b6 <uhi_midi_uninstall+0x3e>
800030b2:	e0 a0 34 9f 	rcall	800099f0 <free>
	if (uhi_midi_dev.dev != dev) {
		return; // Device not enabled in this interface
	}
	uhi_midi_dev.dev = NULL;
	uhi_midi_free_device();
	UHI_MIDI_CHANGE(dev, false);
800030b6:	0c 9c       	mov	r12,r6
800030b8:	30 0b       	mov	r11,0
800030ba:	c2 7c       	rcall	80003108 <ui_uhi_midi_change>
	initNoteStack();
800030bc:	e0 a0 03 06 	rcall	800036c8 <initNoteStack>
800030c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

800030c4 <ui_host_vbus_change>:
bool ui_midi_plug = false;

void ui_host_vbus_change(bool b_vbus_present)
{
	UNUSED(b_vbus_present);
}
800030c4:	5e fc       	retal	r12

800030c6 <ui_host_vbus_error>:

void ui_host_vbus_error(void)
{
}
800030c6:	5e fc       	retal	r12

800030c8 <ui_host_enum_event>:
	}
}

void ui_host_enum_event(uhc_device_t * dev, uhc_enum_status_t status)
{
	ui_enum_status = status;
800030c8:	e0 68 00 a4 	mov	r8,164
	if (ui_enum_status == UHC_ENUM_SUCCESS) {
800030cc:	91 0b       	st.w	r8[0x0],r11
800030ce:	58 0b       	cp.w	r11,0
		switch (dev->speed) {
800030d0:	5e 1c       	retne	r12
800030d2:	78 58       	ld.w	r8,r12[0x14]
800030d4:	58 18       	cp.w	r8,1
800030d6:	c0 90       	breq	800030e8 <ui_host_enum_event+0x20>
800030d8:	58 28       	cp.w	r8,2
		case UHD_SPEED_FULL:
			ui_device_speed_blink = 500;
			break;
		case UHD_SPEED_LOW:
		default:
			ui_device_speed_blink = 1000;
800030da:	c0 d0       	breq	800030f4 <ui_host_enum_event+0x2c>
800030dc:	e0 69 03 e8 	mov	r9,1000
800030e0:	e0 68 09 54 	mov	r8,2388
		switch (dev->speed) {
		case UHD_SPEED_HIGH:
			ui_device_speed_blink = 250;
			break;
		case UHD_SPEED_FULL:
			ui_device_speed_blink = 500;
800030e4:	b0 09       	st.h	r8[0x0],r9
800030e6:	5e fc       	retal	r12
800030e8:	e0 69 01 f4 	mov	r9,500
			break;
800030ec:	e0 68 09 54 	mov	r8,2388
{
	ui_enum_status = status;
	if (ui_enum_status == UHC_ENUM_SUCCESS) {
		switch (dev->speed) {
		case UHD_SPEED_HIGH:
			ui_device_speed_blink = 250;
800030f0:	b0 09       	st.h	r8[0x0],r9
800030f2:	5e fc       	retal	r12
800030f4:	e0 69 00 fa 	mov	r9,250
			break;
800030f8:	e0 68 09 54 	mov	r8,2388
800030fc:	b0 09       	st.h	r8[0x0],r9
800030fe:	5e fc       	retal	r12

80003100 <ui_uhi_hid_mouse_change>:
	}
}

void ui_uhi_hid_mouse_change(uhc_device_t * dev, bool b_plug)
{
	ui_hid_mouse_plug = b_plug;
80003100:	e0 68 09 57 	mov	r8,2391
}
80003104:	b0 8b       	st.b	r8[0x0],r11
80003106:	5e fc       	retal	r12

80003108 <ui_uhi_midi_change>:
80003108:	e0 68 09 53 	mov	r8,2387

void ui_uhi_midi_change(uhc_device_t * dev, bool b_plug)
{
	ui_midi_plug = b_plug;
}
8000310c:	b0 8b       	st.b	r8[0x0],r11
8000310e:	5e fc       	retal	r12

80003110 <ui_device_resume_action>:
80003110:	d4 01       	pushm	lr
80003112:	30 2c       	mov	r12,2
	ui_init();
}

void ui_device_resume_action(void)
{
	LED_On(LED1);
80003114:	e0 a0 05 58 	rcall	80003bc4 <LED_On>
}
80003118:	d8 02       	popm	pc
8000311a:	d7 03       	nop

8000311c <ui_host_hid_mouse_btn_right>:
8000311c:	d4 01       	pushm	lr
8000311e:	58 0c       	cp.w	r12,0
	}
}

void ui_host_hid_mouse_btn_right(bool b_state)
{
	if (b_state) {
80003120:	c0 51       	brne	8000312a <ui_host_hid_mouse_btn_right+0xe>
		LED_On(LED_BI0_RED);
		} else {
		LED_Off(LED_BI0_RED);
80003122:	31 0c       	mov	r12,16
80003124:	e0 a0 05 78 	rcall	80003c14 <LED_Off>
80003128:	d8 02       	popm	pc
}

void ui_host_hid_mouse_btn_right(bool b_state)
{
	if (b_state) {
		LED_On(LED_BI0_RED);
8000312a:	31 0c       	mov	r12,16
8000312c:	e0 a0 05 4c 	rcall	80003bc4 <LED_On>
80003130:	d8 02       	popm	pc
80003132:	d7 03       	nop

80003134 <ui_host_hid_mouse_btn_left>:
80003134:	d4 01       	pushm	lr
80003136:	58 0c       	cp.w	r12,0
80003138:	c0 51       	brne	80003142 <ui_host_hid_mouse_btn_left+0xe>
8000313a:	32 0c       	mov	r12,32
void ui_host_hid_mouse_btn_left(bool b_state)
{
	if (b_state) {
		LED_On(LED_BI0_GREEN);
		} else {
		LED_Off(LED_BI0_GREEN);
8000313c:	e0 a0 05 6c 	rcall	80003c14 <LED_Off>
80003140:	d8 02       	popm	pc
}

void ui_host_hid_mouse_btn_left(bool b_state)
{
	if (b_state) {
		LED_On(LED_BI0_GREEN);
80003142:	32 0c       	mov	r12,32
80003144:	e0 a0 05 40 	rcall	80003bc4 <LED_On>
80003148:	d8 02       	popm	pc
8000314a:	d7 03       	nop

8000314c <ui_host_connection_event>:
8000314c:	eb cd 40 80 	pushm	r7,lr
80003150:	30 2c       	mov	r12,2
80003152:	16 97       	mov	r7,r11
{
}

void ui_host_connection_event(uhc_device_t *dev, bool b_present)
{
	LED_Off(LED1);
80003154:	e0 a0 05 60 	rcall	80003c14 <LED_Off>
	LED_Off(LED2);
80003158:	30 4c       	mov	r12,4
8000315a:	e0 a0 05 5d 	rcall	80003c14 <LED_Off>
	LED_Off(LED3);
8000315e:	30 8c       	mov	r12,8
80003160:	e0 a0 05 5a 	rcall	80003c14 <LED_Off>
	LED_Off(LED_BI0_GREEN);
80003164:	32 0c       	mov	r12,32
80003166:	e0 a0 05 57 	rcall	80003c14 <LED_Off>
	LED_Off(LED_BI0_RED);
8000316a:	31 0c       	mov	r12,16
8000316c:	e0 a0 05 54 	rcall	80003c14 <LED_Off>
	LED_Off(LED_BI1_GREEN);
80003170:	e0 6c 00 80 	mov	r12,128
80003174:	e0 a0 05 50 	rcall	80003c14 <LED_Off>
	LED_Off(LED_BI1_RED);
80003178:	34 0c       	mov	r12,64
8000317a:	e0 a0 05 4d 	rcall	80003c14 <LED_Off>
	if (b_present) {
8000317e:	58 07       	cp.w	r7,0
80003180:	c0 71       	brne	8000318e <ui_host_connection_event+0x42>
		LED_On(LED1);
	} else {
		ui_enum_status = UHC_ENUM_DISCONNECT;
80003182:	30 79       	mov	r9,7
80003184:	e0 68 00 a4 	mov	r8,164
80003188:	91 09       	st.w	r8[0x0],r9
8000318a:	e3 cd 80 80 	ldm	sp++,r7,pc
	LED_Off(LED_BI0_GREEN);
	LED_Off(LED_BI0_RED);
	LED_Off(LED_BI1_GREEN);
	LED_Off(LED_BI1_RED);
	if (b_present) {
		LED_On(LED1);
8000318e:	30 2c       	mov	r12,2
80003190:	e0 a0 05 1a 	rcall	80003bc4 <LED_On>
80003194:	e3 cd 80 80 	ldm	sp++,r7,pc

80003198 <ui_init>:
80003198:	d4 01       	pushm	lr
8000319a:	30 1c       	mov	r12,1
8000319c:	e0 a0 05 3c 	rcall	80003c14 <LED_Off>
800031a0:	30 2c       	mov	r12,2
800031a2:	e0 a0 05 39 	rcall	80003c14 <LED_Off>
 */
void ui_init(void)
{
	LED_Off(LED0);
	LED_Off(LED1);
	LED_Off(LED2);
800031a6:	30 4c       	mov	r12,4
800031a8:	e0 a0 05 36 	rcall	80003c14 <LED_Off>
	LED_Off(LED3);
800031ac:	30 8c       	mov	r12,8
800031ae:	e0 a0 05 33 	rcall	80003c14 <LED_Off>
	LED_Off(LED_BI0_GREEN);
800031b2:	32 0c       	mov	r12,32
800031b4:	e0 a0 05 30 	rcall	80003c14 <LED_Off>
	LED_Off(LED_BI0_RED);
800031b8:	31 0c       	mov	r12,16
800031ba:	e0 a0 05 2d 	rcall	80003c14 <LED_Off>
	LED_Off(LED_BI1_GREEN);
800031be:	e0 6c 00 80 	mov	r12,128
800031c2:	e0 a0 05 29 	rcall	80003c14 <LED_Off>
	LED_Off(LED_BI1_RED);
800031c6:	34 0c       	mov	r12,64
800031c8:	e0 a0 05 26 	rcall	80003c14 <LED_Off>
}
800031cc:	d8 02       	popm	pc
800031ce:	d7 03       	nop

800031d0 <ui_device_suspend_action>:
800031d0:	d4 01       	pushm	lr
800031d2:	ce 3f       	rcall	80003198 <ui_init>
{
}
*/
void ui_device_suspend_action(void)
{
	ui_init();
800031d4:	d8 02       	popm	pc
}
800031d6:	d7 03       	nop

800031d8 <ui_usb_mode_change>:
800031d8:	eb cd 40 80 	pushm	r7,lr
	LED_Off(LED_BI1_GREEN);
	LED_Off(LED_BI1_RED);
}

void ui_usb_mode_change(bool b_host_mode)
{
800031dc:	18 97       	mov	r7,r12
	ui_init();
800031de:	cd df       	rcall	80003198 <ui_init>
800031e0:	58 07       	cp.w	r7,0
	if (b_host_mode) {
800031e2:	c0 40       	breq	800031ea <ui_usb_mode_change+0x12>
800031e4:	30 1c       	mov	r12,1
		LED_On(LED0);
800031e6:	e0 a0 04 ef 	rcall	80003bc4 <LED_On>
800031ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800031ee:	d7 03       	nop

800031f0 <ui_device_sof_action>:
800031f0:	eb cd 40 c0 	pushm	r6-r7,lr
800031f4:	e0 68 09 60 	mov	r8,2400
	static bool btn_left_last_state = HID_MOUSE_BTN_UP;
	static bool btn_right_last_state = HID_MOUSE_BTN_UP;
	static bool btn_middle_last_state = HID_MOUSE_BTN_UP;
	static uint8_t cpt_sof = 0;

	if (!ui_device_b_mouse_enable)
800031f8:	11 89       	ld.ub	r9,r8[0x0]
800031fa:	30 08       	mov	r8,0
800031fc:	f0 09 18 00 	cp.b	r9,r8
80003200:	c0 31       	brne	80003206 <ui_device_sof_action+0x16>
80003202:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	return;

	framenumber = udd_get_frame_number();
80003206:	e0 a0 07 70 	rcall	800040e6 <udd_get_frame_number>
	if ((framenumber % 1000) == 0) {
8000320a:	e0 69 4d d3 	mov	r9,19923
8000320e:	ea 19 10 62 	orh	r9,0x1062
80003212:	5c 7c       	castu.h	r12
80003214:	f8 09 06 48 	mulu.d	r8,r12,r9
80003218:	f2 08 16 06 	lsr	r8,r9,0x6
8000321c:	e0 69 03 e8 	mov	r9,1000
80003220:	b3 38       	mul	r8,r9
80003222:	10 1c       	sub	r12,r8
80003224:	5c 8c       	casts.h	r12
		LED_On(LED2);
	}
	if ((framenumber % 1000) == 500) {
80003226:	c6 50       	breq	800032f0 <ui_device_sof_action+0x100>
80003228:	e0 68 01 f4 	mov	r8,500
8000322c:	f0 0c 19 00 	cp.h	r12,r8
		LED_Off(LED2);
	}
	// Scan process running each 2ms
	cpt_sof++;
80003230:	c6 40       	breq	800032f8 <ui_device_sof_action+0x108>
80003232:	e0 68 09 58 	mov	r8,2392
80003236:	11 89       	ld.ub	r9,r8[0x0]
	if (2 > cpt_sof)
80003238:	2f f9       	sub	r9,-1
8000323a:	b0 89       	st.b	r8[0x0],r9
8000323c:	30 1a       	mov	r10,1
8000323e:	f4 09 18 00 	cp.b	r9,r10
	return;
	cpt_sof = 0;
80003242:	fe 98 ff e0 	brls	80003202 <ui_device_sof_action+0x12>
80003246:	30 09       	mov	r9,0

	// Scan buttons on switch 0 (left), 1 (middle), 2 (right)
	b_btn_state = (!gpio_get_pin_value(GPIO_PUSH_BUTTON_0)) ?
80003248:	35 8c       	mov	r12,88
8000324a:	b0 89       	st.b	r8[0x0],r9
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_left_last_state) {
8000324c:	e0 a0 06 4f 	rcall	80003eea <gpio_get_pin_value>
	if (2 > cpt_sof)
	return;
	cpt_sof = 0;

	// Scan buttons on switch 0 (left), 1 (middle), 2 (right)
	b_btn_state = (!gpio_get_pin_value(GPIO_PUSH_BUTTON_0)) ?
80003250:	e0 66 09 59 	mov	r6,2393
80003254:	ec 1c 00 01 	eorl	r12,0x1
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_left_last_state) {
80003258:	0d 88       	ld.ub	r8,r6[0x0]
8000325a:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
		udi_hid_mouse_btnleft(b_btn_state);
8000325e:	ee 08 18 00 	cp.b	r8,r7
80003262:	c0 50       	breq	8000326c <ui_device_sof_action+0x7c>
		btn_left_last_state = b_btn_state;
80003264:	0e 9c       	mov	r12,r7
	}
	b_btn_state = (!gpio_get_pin_value(GPIO_PUSH_BUTTON_1)) ?
80003266:	fe b0 fc 4f 	rcall	80002b04 <udi_hid_mouse_btnleft>
8000326a:	ac 87       	st.b	r6[0x0],r7
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_middle_last_state) {
8000326c:	35 5c       	mov	r12,85
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_left_last_state) {
		udi_hid_mouse_btnleft(b_btn_state);
		btn_left_last_state = b_btn_state;
	}
	b_btn_state = (!gpio_get_pin_value(GPIO_PUSH_BUTTON_1)) ?
8000326e:	e0 a0 06 3e 	rcall	80003eea <gpio_get_pin_value>
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_middle_last_state) {
80003272:	e0 66 09 5b 	mov	r6,2395
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_left_last_state) {
		udi_hid_mouse_btnleft(b_btn_state);
		btn_left_last_state = b_btn_state;
	}
	b_btn_state = (!gpio_get_pin_value(GPIO_PUSH_BUTTON_1)) ?
80003276:	ec 1c 00 01 	eorl	r12,0x1
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_middle_last_state) {
8000327a:	0d 88       	ld.ub	r8,r6[0x0]
8000327c:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
		udi_hid_mouse_btnmiddle(b_btn_state);
80003280:	ee 08 18 00 	cp.b	r8,r7
		btn_middle_last_state = b_btn_state;
80003284:	c0 50       	breq	8000328e <ui_device_sof_action+0x9e>
	}
	b_btn_state = (!gpio_get_pin_value(GPIO_PUSH_BUTTON_2)) ?
80003286:	0e 9c       	mov	r12,r7
80003288:	fe b0 fb 8c 	rcall	800029a0 <udi_hid_mouse_btnmiddle>
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_right_last_state) {
8000328c:	ac 87       	st.b	r6[0x0],r7
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_middle_last_state) {
		udi_hid_mouse_btnmiddle(b_btn_state);
		btn_middle_last_state = b_btn_state;
	}
	b_btn_state = (!gpio_get_pin_value(GPIO_PUSH_BUTTON_2)) ?
8000328e:	35 2c       	mov	r12,82
80003290:	e0 a0 06 2d 	rcall	80003eea <gpio_get_pin_value>
80003294:	e0 66 09 56 	mov	r6,2390
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_right_last_state) {
80003298:	ec 1c 00 01 	eorl	r12,0x1
8000329c:	0d 88       	ld.ub	r8,r6[0x0]
		udi_hid_mouse_btnright(b_btn_state);
8000329e:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
800032a2:	ee 08 18 00 	cp.b	r8,r7
 *
 * \return \c true if the joystick is on the right, otherwise \c 0.
 */
__always_inline static int is_joystick_right( void )
{
  return (gpio_get_pin_value(GPIO_JOYSTICK_RIGHT)) == GPIO_JOYSTICK_RIGHT_PRESSED;
800032a6:	c0 50       	breq	800032b0 <ui_device_sof_action+0xc0>
800032a8:	0e 9c       	mov	r12,r7
800032aa:	fe b0 fc 79 	rcall	80002b9c <udi_hid_mouse_btnright>
 *
 * \return \c true if the joystick is on the left, otherwise \c 0.
 */
__always_inline static int is_joystick_left( void )
{
  return (gpio_get_pin_value(GPIO_JOYSTICK_LEFT)) == GPIO_JOYSTICK_LEFT_PRESSED;
800032ae:	ac 87       	st.b	r6[0x0],r7
800032b0:	31 cc       	mov	r12,28
800032b2:	e0 a0 06 1c 	rcall	80003eea <gpio_get_pin_value>
 *
 * \return \c true if the joystick is up, otherwise \c 0.
 */
__always_inline static int is_joystick_up( void )
{
  return (gpio_get_pin_value(GPIO_JOYSTICK_UP)) == GPIO_JOYSTICK_UP_PRESSED;
800032b6:	c1 90       	breq	800032e8 <ui_device_sof_action+0xf8>
800032b8:	31 9c       	mov	r12,25
800032ba:	e0 a0 06 18 	rcall	80003eea <gpio_get_pin_value>
 *
 * \return \c true if the joystick is down, otherwise \c 0.
 */
__always_inline static int is_joystick_down( void )
{
  return (gpio_get_pin_value(GPIO_JOYSTICK_DOWN)) == GPIO_JOYSTICK_DOWN_PRESSED;
800032be:	c1 10       	breq	800032e0 <ui_device_sof_action+0xf0>
800032c0:	31 ac       	mov	r12,26
800032c2:	e0 a0 06 14 	rcall	80003eea <gpio_get_pin_value>
	if (is_joystick_left())
	udi_hid_mouse_moveX(-MOUSE_MOVE_RANGE);
	if (is_joystick_up())
	udi_hid_mouse_moveY(-MOUSE_MOVE_RANGE);
	if (is_joystick_down())
	udi_hid_mouse_moveY(MOUSE_MOVE_RANGE);
800032c6:	c0 90       	breq	800032d8 <ui_device_sof_action+0xe8>
800032c8:	31 bc       	mov	r12,27
800032ca:	e0 a0 06 10 	rcall	80003eea <gpio_get_pin_value>
	if (is_joystick_right())
	udi_hid_mouse_moveX(MOUSE_MOVE_RANGE);
	if (is_joystick_left())
	udi_hid_mouse_moveX(-MOUSE_MOVE_RANGE);
	if (is_joystick_up())
	udi_hid_mouse_moveY(-MOUSE_MOVE_RANGE);
800032ce:	c9 a1       	brne	80003202 <ui_device_sof_action+0x12>
800032d0:	30 3c       	mov	r12,3
800032d2:	fe b0 fb d7 	rcall	80002a80 <udi_hid_mouse_moveY>
	}
	// Joystick used to move mouse
	if (is_joystick_right())
	udi_hid_mouse_moveX(MOUSE_MOVE_RANGE);
	if (is_joystick_left())
	udi_hid_mouse_moveX(-MOUSE_MOVE_RANGE);
800032d6:	c9 6b       	rjmp	80003202 <ui_device_sof_action+0x12>
800032d8:	3f dc       	mov	r12,-3
800032da:	fe b0 fb d3 	rcall	80002a80 <udi_hid_mouse_moveY>
		udi_hid_mouse_btnright(b_btn_state);
		btn_right_last_state = b_btn_state;
	}
	// Joystick used to move mouse
	if (is_joystick_right())
	udi_hid_mouse_moveX(MOUSE_MOVE_RANGE);
800032de:	cf 5b       	rjmp	800032c8 <ui_device_sof_action+0xd8>
800032e0:	3f dc       	mov	r12,-3
800032e2:	fe b0 fc a9 	rcall	80002c34 <udi_hid_mouse_moveX>
	if (!ui_device_b_mouse_enable)
	return;

	framenumber = udd_get_frame_number();
	if ((framenumber % 1000) == 0) {
		LED_On(LED2);
800032e6:	ce db       	rjmp	800032c0 <ui_device_sof_action+0xd0>
800032e8:	30 3c       	mov	r12,3
800032ea:	fe b0 fc a5 	rcall	80002c34 <udi_hid_mouse_moveX>
	}
	if ((framenumber % 1000) == 500) {
		LED_Off(LED2);
800032ee:	ce 5b       	rjmp	800032b8 <ui_device_sof_action+0xc8>
800032f0:	30 4c       	mov	r12,4
800032f2:	e0 a0 04 69 	rcall	80003bc4 <LED_On>
800032f6:	c9 eb       	rjmp	80003232 <ui_device_sof_action+0x42>
800032f8:	30 4c       	mov	r12,4
800032fa:	e0 a0 04 8d 	rcall	80003c14 <LED_Off>
800032fe:	c9 ab       	rjmp	80003232 <ui_device_sof_action+0x42>

80003300 <ui_host_wakeup_event>:
80003300:	d4 01       	pushm	lr
80003302:	fe 7c 0d 80 	mov	r12,-62080
80003306:	30 8b       	mov	r11,8
80003308:	e0 a0 05 1d 	rcall	80003d42 <eic_disable_line>
8000330c:	31 4c       	mov	r12,20
8000330e:	e0 a0 06 38 	rcall	80003f7e <gpio_disable_pin_interrupt>
80003312:	d8 02       	popm	pc

80003314 <ui_enable_asynchronous_interrupt>:
80003314:	eb cd 40 c0 	pushm	r6-r7,lr
80003318:	20 2d       	sub	sp,8
8000331a:	30 6a       	mov	r10,6
8000331c:	fa c7 ff fe 	sub	r7,sp,-2
80003320:	49 5b       	lddpc	r11,80003374 <ui_enable_asynchronous_interrupt+0x60>
80003322:	0e 9c       	mov	r12,r7
80003324:	e0 a0 35 8c 	rcall	80009e3c <memcpy>
80003328:	e1 b6 00 00 	mfsr	r6,0x0
8000332c:	d3 03       	ssrf	0x10
8000332e:	30 0a       	mov	r10,0
		.eic_async = EIC_ASYNCH_MODE
	};

	/* register joystick handler on level 0 */
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(ui_wakeup_isr,
80003330:	34 2b       	mov	r11,66
80003332:	fe cc fe ce 	sub	r12,pc,-306
80003336:	e0 a0 06 3b 	rcall	80003fac <INTC_register_interrupt>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000333a:	e6 16 00 01 	andh	r6,0x1,COH
      cpu_irq_enable();
8000333e:	c0 21       	brne	80003342 <ui_enable_asynchronous_interrupt+0x2e>
			AVR32_GPIO_IRQ_0 + (GPIO_JOYSTICK_PUSH / 8), 0);
	cpu_irq_restore(flags);

	/* configure joystick to produce IT on all state change */
	gpio_enable_pin_interrupt(GPIO_JOYSTICK_PUSH, GPIO_PIN_CHANGE);
80003340:	d5 03       	csrf	0x10
80003342:	30 0b       	mov	r11,0
80003344:	31 4c       	mov	r12,20
80003346:	e0 a0 05 f9 	rcall	80003f38 <gpio_enable_pin_interrupt>
	 * wake up from the STATIC sleep mode).
	 *
	 * First, map the interrupt line to the GPIO pin with the right
	 * peripheral function.
	 */
	gpio_enable_module_pin(GPIO_JOYSTICK_PUSH, AVR32_EIC_EXTINT_8_FUNCTION);
8000334a:	30 0b       	mov	r11,0
8000334c:	31 4c       	mov	r12,20
8000334e:	e0 a0 05 25 	rcall	80003d98 <gpio_enable_module_pin>
	/*
	 * Enable the internal pull-up resistor on that pin (because the EIC is
	 * configured such that the interrupt will trigger on low-level, see
	 * eic_options.eic_level).
	 */
	gpio_enable_pin_pull_up(GPIO_JOYSTICK_PUSH);
80003352:	31 4c       	mov	r12,20
80003354:	e0 a0 05 64 	rcall	80003e1c <gpio_enable_pin_pull_up>

	// Init the EIC controller with the set options.
	eic_init(&AVR32_EIC, &eic_options, sizeof(eic_options) /
80003358:	0e 9b       	mov	r11,r7
8000335a:	fe 7c 0d 80 	mov	r12,-62080
8000335e:	30 1a       	mov	r10,1
80003360:	e0 a0 04 84 	rcall	80003c68 <eic_init>
			sizeof(eic_options_t));

	// Enable External Interrupt Controller Line
	eic_enable_line(&AVR32_EIC, EXT_NMI);
80003364:	30 8b       	mov	r11,8
80003366:	fe 7c 0d 80 	mov	r12,-62080
8000336a:	e0 a0 04 e7 	rcall	80003d38 <eic_enable_line>
}
8000336e:	2f ed       	sub	sp,-8
80003370:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003374:	80 00       	ld.sh	r0,r0[0x0]
80003376:	f6 09       	*unknown*

80003378 <ui_host_sof_event>:
80003378:	d4 01       	pushm	lr
8000337a:	e0 68 00 a4 	mov	r8,164
8000337e:	70 08       	ld.w	r8,r8[0x0]
80003380:	58 08       	cp.w	r8,0
80003382:	c3 81       	brne	800033f2 <ui_host_sof_event+0x7a>
80003384:	e0 69 09 5e 	mov	r9,2398
80003388:	92 0a       	ld.sh	r10,r9[0x0]
8000338a:	2f fa       	sub	r10,-1
8000338c:	b2 0a       	st.h	r9[0x0],r10
8000338e:	e0 6b 09 54 	mov	r11,2388
80003392:	96 0b       	ld.sh	r11,r11[0x0]
80003394:	f4 0b 19 00 	cp.h	r11,r10
	if (ui_enum_status == UHC_ENUM_SUCCESS) {

		// Display device enumerated and in active mode
		if (++counter_sof > ui_device_speed_blink) {
			counter_sof = 0;
			if (ui_hid_mouse_plug) {
80003398:	c0 f2       	brcc	800033b6 <ui_host_sof_event+0x3e>
8000339a:	b2 08       	st.h	r9[0x0],r8
8000339c:	e0 69 09 57 	mov	r9,2391
				LED_Toggle(LED2);
			}
			if (ui_midi_plug) {
800033a0:	13 89       	ld.ub	r9,r9[0x0]
800033a2:	f0 09 18 00 	cp.b	r9,r8
800033a6:	c5 b1       	brne	8000345c <ui_host_sof_event+0xe4>
800033a8:	e0 68 09 53 	mov	r8,2387
				LED_Toggle(LED3);
			}
		}
		
		// Scan button to enter in suspend mode
		b_btn_state = !gpio_get_pin_value(GPIO_PUSH_BUTTON_0);
800033ac:	11 89       	ld.ub	r9,r8[0x0]
800033ae:	30 08       	mov	r8,0
800033b0:	f0 09 18 00 	cp.b	r9,r8
800033b4:	c5 01       	brne	80003454 <ui_host_sof_event+0xdc>
800033b6:	35 8c       	mov	r12,88
		if (b_btn_state != btn_suspend) {
800033b8:	e0 a0 05 99 	rcall	80003eea <gpio_get_pin_value>
800033bc:	e0 68 09 5c 	mov	r8,2396
800033c0:	ec 1c 00 01 	eorl	r12,0x1
			// Button have changed
			btn_suspend = b_btn_state;
			if (b_btn_state) {
800033c4:	11 89       	ld.ub	r9,r8[0x0]
800033c6:	5c 5c       	castu.b	r12
				return;
			}
		}

		// Scan button to enter in suspend mode and remote wakeup
		b_btn_state = !gpio_get_pin_value(GPIO_PUSH_BUTTON_1);
800033c8:	f8 09 18 00 	cp.b	r9,r12
800033cc:	c0 40       	breq	800033d4 <ui_host_sof_event+0x5c>
		if (b_btn_state != btn_suspend_and_remotewakeup) {
800033ce:	b0 8c       	st.b	r8[0x0],r12
				return;
			}
		}

		// Scan button to enter in suspend mode and remote wakeup
		b_btn_state = !gpio_get_pin_value(GPIO_PUSH_BUTTON_1);
800033d0:	58 0c       	cp.w	r12,0
800033d2:	c2 91       	brne	80003424 <ui_host_sof_event+0xac>
		if (b_btn_state != btn_suspend_and_remotewakeup) {
800033d4:	35 5c       	mov	r12,85
				return;
			}
		}

		// Scan button to enter in suspend mode and remote wakeup
		b_btn_state = !gpio_get_pin_value(GPIO_PUSH_BUTTON_1);
800033d6:	e0 a0 05 8a 	rcall	80003eea <gpio_get_pin_value>
		if (b_btn_state != btn_suspend_and_remotewakeup) {
800033da:	e0 68 09 5a 	mov	r8,2394
			// Button have changed
			btn_suspend_and_remotewakeup = b_btn_state;
800033de:	ec 1c 00 01 	eorl	r12,0x1
			if (b_btn_state) {
800033e2:	11 89       	ld.ub	r9,r8[0x0]
800033e4:	5c 5c       	castu.b	r12
				// Button has been pressed
				LED_Off(LED2);
800033e6:	f8 09 18 00 	cp.b	r9,r12
800033ea:	c0 40       	breq	800033f2 <ui_host_sof_event+0x7a>
				LED_Off(LED3);
800033ec:	b0 8c       	st.b	r8[0x0],r12
800033ee:	58 0c       	cp.w	r12,0
800033f0:	c0 21       	brne	800033f4 <ui_host_sof_event+0x7c>
				LED_Off(LED_BI0_GREEN);
800033f2:	d8 02       	popm	pc
800033f4:	30 4c       	mov	r12,4
800033f6:	e0 a0 04 0f 	rcall	80003c14 <LED_Off>
				LED_Off(LED_BI0_RED);
800033fa:	30 8c       	mov	r12,8
800033fc:	e0 a0 04 0c 	rcall	80003c14 <LED_Off>
				LED_Off(LED_BI1_GREEN);
80003400:	32 0c       	mov	r12,32
80003402:	e0 a0 04 09 	rcall	80003c14 <LED_Off>
				LED_Off(LED_BI1_RED);
80003406:	31 0c       	mov	r12,16
80003408:	e0 a0 04 06 	rcall	80003c14 <LED_Off>
				ui_enable_asynchronous_interrupt();
8000340c:	e0 6c 00 80 	mov	r12,128
				uhc_suspend(true);
80003410:	e0 a0 04 02 	rcall	80003c14 <LED_Off>
80003414:	34 0c       	mov	r12,64
80003416:	e0 a0 03 ff 	rcall	80003c14 <LED_Off>
		if (b_btn_state != btn_suspend) {
			// Button have changed
			btn_suspend = b_btn_state;
			if (b_btn_state) {
				// Button has been pressed
				LED_Off(LED2);
8000341a:	c7 df       	rcall	80003314 <ui_enable_asynchronous_interrupt>
8000341c:	30 1c       	mov	r12,1
				LED_Off(LED3);
8000341e:	e0 a0 28 77 	rcall	8000850c <uhc_suspend>
80003422:	d8 02       	popm	pc
				LED_Off(LED_BI0_GREEN);
80003424:	30 4c       	mov	r12,4
80003426:	e0 a0 03 f7 	rcall	80003c14 <LED_Off>
				LED_Off(LED_BI0_RED);
8000342a:	30 8c       	mov	r12,8
8000342c:	e0 a0 03 f4 	rcall	80003c14 <LED_Off>
				LED_Off(LED_BI1_GREEN);
80003430:	32 0c       	mov	r12,32
80003432:	e0 a0 03 f1 	rcall	80003c14 <LED_Off>
80003436:	31 0c       	mov	r12,16
				LED_Off(LED_BI1_RED);
80003438:	e0 a0 03 ee 	rcall	80003c14 <LED_Off>
8000343c:	e0 6c 00 80 	mov	r12,128
				ui_enable_asynchronous_interrupt();
80003440:	e0 a0 03 ea 	rcall	80003c14 <LED_Off>
				uhc_suspend(false);
80003444:	34 0c       	mov	r12,64
80003446:	e0 a0 03 e7 	rcall	80003c14 <LED_Off>
			counter_sof = 0;
			if (ui_hid_mouse_plug) {
				LED_Toggle(LED2);
			}
			if (ui_midi_plug) {
				LED_Toggle(LED3);
8000344a:	c6 5f       	rcall	80003314 <ui_enable_asynchronous_interrupt>
8000344c:	30 0c       	mov	r12,0
8000344e:	e0 a0 28 5f 	rcall	8000850c <uhc_suspend>

		// Display device enumerated and in active mode
		if (++counter_sof > ui_device_speed_blink) {
			counter_sof = 0;
			if (ui_hid_mouse_plug) {
				LED_Toggle(LED2);
80003452:	d8 02       	popm	pc
80003454:	30 8c       	mov	r12,8
80003456:	e0 a0 03 8f 	rcall	80003b74 <LED_Toggle>
8000345a:	ca eb       	rjmp	800033b6 <ui_host_sof_event+0x3e>
8000345c:	30 4c       	mov	r12,4
8000345e:	e0 a0 03 8b 	rcall	80003b74 <LED_Toggle>
80003462:	ca 3b       	rjmp	800033a8 <ui_host_sof_event+0x30>

80003464 <ui_wakeup_isr>:
80003464:	d4 01       	pushm	lr
80003466:	31 4c       	mov	r12,20
80003468:	e0 a0 05 96 	rcall	80003f94 <gpio_clear_pin_interrupt_flag>
8000346c:	30 8b       	mov	r11,8
8000346e:	fe 7c 0d 80 	mov	r12,-62080
80003472:	e0 a0 04 6d 	rcall	80003d4c <eic_clear_interrupt_line>
80003476:	30 8b       	mov	r11,8
80003478:	fe 7c 0d 80 	mov	r12,-62080
8000347c:	e0 a0 04 63 	rcall	80003d42 <eic_disable_line>
80003480:	31 4c       	mov	r12,20
80003482:	e0 a0 05 7e 	rcall	80003f7e <gpio_disable_pin_interrupt>
80003486:	e0 a0 29 0b 	rcall	8000869c <uhc_resume>
8000348a:	d4 02       	popm	lr

	ui_disable_asynchronous_interrupt();

	// Wakeup host and device
	uhc_resume();
}
8000348c:	d6 03       	rete
8000348e:	d7 03       	nop

80003490 <controlChange>:
}

void controlChange(uint8_t ctrlNum, uint8_t val)
{
	
}
80003490:	5e fc       	retal	r12
80003492:	d7 03       	nop

80003494 <programChange>:

uint8_t programNum;

void programChange(uint8_t num)
{
	programNum = num;
80003494:	e0 68 0c 4c 	mov	r8,3148
}
80003498:	b0 8c       	st.b	r8[0x0],r12
8000349a:	5e fc       	retal	r12

8000349c <noteOut>:
8000349c:	d4 31       	pushm	r0-r7,lr
8000349e:	20 2d       	sub	sp,8
void noteOut()
{
	int i;
	
	// NOTE: Max polynum = 2 (for Jeff's Synth)	
	if (notehappened == 1)
800034a0:	e0 63 09 6e 	mov	r3,2414
800034a4:	30 18       	mov	r8,1
800034a6:	07 89       	ld.ub	r9,r3[0x0]
800034a8:	f0 09 18 00 	cp.b	r9,r8
				notehappened = 0;
				noteoffhappened = 0;	
			}
		}
	}
800034ac:	c0 30       	breq	800034b2 <noteOut+0x16>
800034ae:	2f ed       	sub	sp,-8
	int i;
	
	// NOTE: Max polynum = 2 (for Jeff's Synth)	
	if (notehappened == 1)
	{
		for (i = 0; i < polynum; i++)
800034b0:	d8 32       	popm	r0-r7,pc
800034b2:	e0 61 00 a8 	mov	r1,168
800034b6:	03 89       	ld.ub	r9,r1[0x0]
800034b8:	58 09       	cp.w	r9,0
800034ba:	cf a0       	breq	800034ae <noteOut+0x12>
800034bc:	30 17       	mov	r7,1
800034be:	e0 66 0c 50 	mov	r6,3152
				{
					DAC16Send(i+1, calculateDACvalue(polyVoiceNote[i]));
					dip204_printf_string("note: %u busy: %u",polyVoiceNote[i],polyVoiceBusy[i]);
				}
				
				changevoice[i] = 0;
800034c2:	e0 65 0c 54 	mov	r5,3156
	// NOTE: Max polynum = 2 (for Jeff's Synth)	
	if (notehappened == 1)
	{
		for (i = 0; i < polynum; i++)
		{
			if (changevoice[i] == 1)
800034c6:	e0 64 0b e8 	mov	r4,3048
800034ca:	0e 92       	mov	r2,r7
					dip204_printf_string("note: %u busy: %u",polyVoiceNote[i],polyVoiceBusy[i]);
				}
				
				changevoice[i] = 0;
				notehappened = 0;
				noteoffhappened = 0;	
800034cc:	30 00       	mov	r0,0
800034ce:	0d 88       	ld.ub	r8,r6[0x0]
800034d0:	e4 08 18 00 	cp.b	r8,r2
800034d4:	c0 d0       	breq	800034ee <noteOut+0x52>
	int i;
	
	// NOTE: Max polynum = 2 (for Jeff's Synth)	
	if (notehappened == 1)
	{
		for (i = 0; i < polynum; i++)
800034d6:	0e 98       	mov	r8,r7
800034d8:	2f f6       	sub	r6,-1
800034da:	2f f5       	sub	r5,-1
		{
			if (changevoice[i] == 1)
800034dc:	2f f4       	sub	r4,-1
800034de:	2f f7       	sub	r7,-1
800034e0:	10 39       	cp.w	r9,r8
800034e2:	fe 9a ff e6 	brle	800034ae <noteOut+0x12>
			{
				lcd_clear_line(i+1);
800034e6:	0d 88       	ld.ub	r8,r6[0x0]
800034e8:	e4 08 18 00 	cp.b	r8,r2
				if (polyVoiceBusy[i] == 1)
800034ec:	cf 51       	brne	800034d6 <noteOut+0x3a>
800034ee:	0e 9c       	mov	r12,r7
800034f0:	e0 a0 2d 14 	rcall	80008f18 <lcd_clear_line>
				{
					DAC16Send(i+1, calculateDACvalue(polyVoiceNote[i]));
					dip204_printf_string("note: %u busy: %u",polyVoiceNote[i],polyVoiceBusy[i]);
				}
				
				changevoice[i] = 0;
800034f4:	0b 88       	ld.ub	r8,r5[0x0]
				notehappened = 0;
				noteoffhappened = 0;	
800034f6:	e4 08 18 00 	cp.b	r8,r2
800034fa:	c0 80       	breq	8000350a <noteOut+0x6e>
800034fc:	e0 69 09 68 	mov	r9,2408
			if (changevoice[i] == 1)
			{
				lcd_clear_line(i+1);
				if (polyVoiceBusy[i] == 1)
				{
					DAC16Send(i+1, calculateDACvalue(polyVoiceNote[i]));
80003500:	ac 80       	st.b	r6[0x0],r0
	unsigned int virtualnote;
	unsigned long templongoctave;
	unsigned short DAC1val;
	unsigned int note;
	
	switch(whichmap)
80003502:	b2 80       	st.b	r9[0x0],r0
80003504:	a6 80       	st.b	r3[0x0],r0
80003506:	03 89       	ld.ub	r9,r1[0x0]
80003508:	ce 7b       	rjmp	800034d6 <noteOut+0x3a>
8000350a:	e0 6c 09 64 	mov	r12,2404
	{
		case WICKI_HAYDEN: note = whmap[noteVal]; break;    // wicki-hayden
		case HARMONIC: note = harmonicmap[noteVal]; break;  // harmonic
8000350e:	09 8a       	ld.ub	r10,r4[0x0]
80003510:	78 08       	ld.w	r8,r12[0x0]
		default: note = noteVal; break;                     // no map
	}
	
	//templong = ((noteval + offset + transpose) * 54612);  // original simple equal temperament
	pitchclass = ((note + transpose + 21) % 12);  // add 21 to make it positive and centered on C
80003512:	58 18       	cp.w	r8,1
80003514:	c5 50       	breq	800035be <noteOut+0x122>
80003516:	58 28       	cp.w	r8,2
80003518:	c0 51       	brne	80003522 <noteOut+0x86>
8000351a:	e0 68 00 ac 	mov	r8,172
8000351e:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80003522:	e0 6b 09 6b 	mov	r11,2411
80003526:	f7 28 00 00 	ld.sb	r8,r11[0]
8000352a:	f4 08 00 0e 	add	lr,r10,r8
8000352e:	e0 6a aa ab 	mov	r10,43691
	virtualnote = (note + 13 + transpose - pitchclass);
	if (tuning == 0)
80003532:	ea 1a aa aa 	orh	r10,0xaaaa
		case HARMONIC: note = harmonicmap[noteVal]; break;  // harmonic
		default: note = noteVal; break;                     // no map
	}
	
	//templong = ((noteval + offset + transpose) * 54612);  // original simple equal temperament
	pitchclass = ((note + transpose + 21) % 12);  // add 21 to make it positive and centered on C
80003536:	fc cb ff eb 	sub	r11,lr,-21
8000353a:	f6 0a 06 48 	mulu.d	r8,r11,r10
	virtualnote = (note + 13 + transpose - pitchclass);
	if (tuning == 0)
8000353e:	e0 6c 09 6c 	mov	r12,2412
	templongnote = (twelvetet[pitchclass] * scaledoctaveDACvalue);
80003542:	f2 08 16 03 	lsr	r8,r9,0x3
	else if (tuning == 3)
	templongnote = (meantone[pitchclass] * scaledoctaveDACvalue);
	else if (tuning == 4)
	templongnote = (werckmeister1[pitchclass] * scaledoctaveDACvalue);
	else if (tuning == 5)
	templongnote = (werckmeister3[pitchclass] * scaledoctaveDACvalue);
80003546:	19 89       	ld.ub	r9,r12[0x0]
80003548:	f0 08 00 18 	add	r8,r8,r8<<0x1
8000354c:	f6 08 01 28 	sub	r8,r11,r8<<0x2
80003550:	58 09       	cp.w	r9,0
80003552:	c3 b1       	brne	800035c8 <noteOut+0x12c>
80003554:	e0 69 01 6c 	mov	r9,364
80003558:	72 0c       	ld.w	r12,r9[0x0]
8000355a:	e0 69 02 60 	mov	r9,608
8000355e:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
80003562:	e0 69 17 59 	mov	r9,5977
	
	templongnote = (templongnote / 10000);
	templongoctave = ((virtualnote + octaveoffset) * scaledoctaveDACvalue);
80003566:	ea 19 d1 b7 	orh	r9,0xd1b7
8000356a:	f8 0b 02 4b 	mul	r11,r12,r11
			if (changevoice[i] == 1)
			{
				lcd_clear_line(i+1);
				if (polyVoiceBusy[i] == 1)
				{
					DAC16Send(i+1, calculateDACvalue(polyVoiceNote[i]));
8000356e:	f6 09 06 4a 	mulu.d	r10,r11,r9
80003572:	fa eb 00 00 	st.d	sp[0],r10
	templongnote = (werckmeister1[pitchclass] * scaledoctaveDACvalue);
	else if (tuning == 5)
	templongnote = (werckmeister3[pitchclass] * scaledoctaveDACvalue);
	
	templongnote = (templongnote / 10000);
	templongoctave = ((virtualnote + octaveoffset) * scaledoctaveDACvalue);
80003576:	40 09       	lddsp	r9,sp[0x0]
80003578:	f7 d9 b1 b0 	bfexts	r11,r9,0xd,0x10
			if (changevoice[i] == 1)
			{
				lcd_clear_line(i+1);
				if (polyVoiceBusy[i] == 1)
				{
					DAC16Send(i+1, calculateDACvalue(polyVoiceNote[i]));
8000357c:	e0 6a 09 6d 	mov	r10,2413
80003580:	15 89       	ld.ub	r9,r10[0x0]
80003582:	2f 39       	sub	r9,-13
80003584:	1c 09       	add	r9,lr
80003586:	10 19       	sub	r9,r8
80003588:	e0 68 85 1f 	mov	r8,34079
8000358c:	ea 18 51 eb 	orh	r8,0x51eb
80003590:	f8 09 02 49 	mul	r9,r12,r9
					dip204_printf_string("note: %u busy: %u",polyVoiceNote[i],polyVoiceBusy[i]);
80003594:	f2 08 06 48 	mulu.d	r8,r9,r8
80003598:	f2 08 16 05 	lsr	r8,r9,0x5
8000359c:	0e 9c       	mov	r12,r7
8000359e:	f0 0b 00 0b 	add	r11,r8,r11
800035a2:	a1 7b       	lsl	r11,0x1
	unsigned short DAC1val;
	unsigned int note;
	
	switch(whichmap)
	{
		case WICKI_HAYDEN: note = whmap[noteVal]; break;    // wicki-hayden
800035a4:	e2 1b ff fe 	andl	r11,0xfffe,COH
800035a8:	e0 a0 31 6a 	rcall	8000987c <DAC16Send>
	//templong = ((noteval + offset + transpose) * 54612);  // original simple equal temperament
	pitchclass = ((note + transpose + 21) % 12);  // add 21 to make it positive and centered on C
	virtualnote = (note + 13 + transpose - pitchclass);
	if (tuning == 0)
	templongnote = (twelvetet[pitchclass] * scaledoctaveDACvalue);
	else if (tuning == 1)
800035ac:	0b 88       	ld.ub	r8,r5[0x0]
800035ae:	1a d8       	st.w	--sp,r8
800035b0:	09 88       	ld.ub	r8,r4[0x0]
	templongnote = (overtonejust[pitchclass] * scaledoctaveDACvalue);
	else if (tuning == 2)
800035b2:	4a 1c       	lddpc	r12,80003634 <noteOut+0x198>
800035b4:	1a d8       	st.w	--sp,r8
800035b6:	fe b0 f5 29 	rcall	80002008 <dip204_printf_string>
	templongnote = (kora1[pitchclass] * scaledoctaveDACvalue);
	else if (tuning == 3)
800035ba:	2f ed       	sub	sp,-8
800035bc:	ca 0b       	rjmp	800034fc <noteOut+0x60>
800035be:	e0 68 02 90 	mov	r8,656
	templongnote = (meantone[pitchclass] * scaledoctaveDACvalue);
	else if (tuning == 4)
800035c2:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800035c6:	ca eb       	rjmp	80003522 <noteOut+0x86>
800035c8:	e4 09 18 00 	cp.b	r9,r2
	templongnote = (werckmeister1[pitchclass] * scaledoctaveDACvalue);
	else if (tuning == 5)
800035cc:	c1 60       	breq	800035f8 <noteOut+0x15c>
800035ce:	30 2b       	mov	r11,2
800035d0:	f6 09 18 00 	cp.b	r9,r11
800035d4:	c1 80       	breq	80003604 <noteOut+0x168>
800035d6:	30 3b       	mov	r11,3
800035d8:	f6 09 18 00 	cp.b	r9,r11
	pitchclass = ((note + transpose + 21) % 12);  // add 21 to make it positive and centered on C
	virtualnote = (note + 13 + transpose - pitchclass);
	if (tuning == 0)
	templongnote = (twelvetet[pitchclass] * scaledoctaveDACvalue);
	else if (tuning == 1)
	templongnote = (overtonejust[pitchclass] * scaledoctaveDACvalue);
800035dc:	c1 a0       	breq	80003610 <noteOut+0x174>
800035de:	30 4b       	mov	r11,4
800035e0:	f6 09 18 00 	cp.b	r9,r11
	else if (tuning == 2)
	templongnote = (kora1[pitchclass] * scaledoctaveDACvalue);
800035e4:	c1 c0       	breq	8000361c <noteOut+0x180>
800035e6:	30 5b       	mov	r11,5
800035e8:	f6 09 18 00 	cp.b	r9,r11
	else if (tuning == 3)
	templongnote = (meantone[pitchclass] * scaledoctaveDACvalue);
800035ec:	c1 e0       	breq	80003628 <noteOut+0x18c>
800035ee:	e0 69 01 6c 	mov	r9,364
	else if (tuning == 4)
	templongnote = (werckmeister1[pitchclass] * scaledoctaveDACvalue);
800035f2:	30 0b       	mov	r11,0
800035f4:	72 0c       	ld.w	r12,r9[0x0]
800035f6:	cc 3b       	rjmp	8000357c <noteOut+0xe0>
800035f8:	e0 69 01 6c 	mov	r9,364
	else if (tuning == 5)
	templongnote = (werckmeister3[pitchclass] * scaledoctaveDACvalue);
800035fc:	72 0c       	ld.w	r12,r9[0x0]
800035fe:	e0 69 01 70 	mov	r9,368
80003602:	ca eb       	rjmp	8000355e <noteOut+0xc2>
80003604:	e0 69 01 6c 	mov	r9,364
80003608:	72 0c       	ld.w	r12,r9[0x0]
8000360a:	e0 69 01 a0 	mov	r9,416
8000360e:	ca 8b       	rjmp	8000355e <noteOut+0xc2>
80003610:	e0 69 01 6c 	mov	r9,364
80003614:	72 0c       	ld.w	r12,r9[0x0]
80003616:	e0 69 02 30 	mov	r9,560
8000361a:	ca 2b       	rjmp	8000355e <noteOut+0xc2>
8000361c:	e0 69 01 6c 	mov	r9,364
80003620:	72 0c       	ld.w	r12,r9[0x0]
80003622:	e0 69 01 d0 	mov	r9,464
80003626:	c9 cb       	rjmp	8000355e <noteOut+0xc2>
80003628:	e0 69 01 6c 	mov	r9,364
8000362c:	72 0c       	ld.w	r12,r9[0x0]
8000362e:	e0 69 02 00 	mov	r9,512
80003632:	c9 6b       	rjmp	8000355e <noteOut+0xc2>
80003634:	80 00       	ld.sh	r0,r0[0x0]
80003636:	f6 10 eb cd 	memc	-20684,0x1

80003638 <midiVol>:
80003638:	eb cd 40 fc 	pushm	r2-r7,lr
8000363c:	e0 68 0b ec 	mov	r8,3052
80003640:	30 1b       	mov	r11,1
80003642:	11 97       	ld.ub	r7,r8[0x1]
80003644:	16 9c       	mov	r12,r11
80003646:	fe b0 f7 73 	rcall	8000252c <dip204_set_cursor_position>
8000364a:	49 ec       	lddpc	r12,800036c0 <midiVol+0x88>
8000364c:	fe b0 f4 de 	rcall	80002008 <dip204_printf_string>
80003650:	30 1b       	mov	r11,1
80003652:	16 9c       	mov	r12,r11
80003654:	fe b0 f7 6c 	rcall	8000252c <dip204_set_cursor_position>
80003658:	ee 02 15 05 	lsl	r2,r7,0x5
8000365c:	f1 d2 c0 0c 	bfextu	r8,r2,0x0,0xc
	uint8_t i;
	uint8_t vol = notestack[0][1];
	dip204_set_cursor_position(1,1);
	dip204_printf_string("                    ");
	dip204_set_cursor_position(1,1);
	dip204_printf_string("vol: %u %u", vol, (vol<<5)&0xFFF);
80003660:	49 9c       	lddpc	r12,800036c4 <midiVol+0x8c>
80003662:	1a d8       	st.w	--sp,r8
80003664:	1a d7       	st.w	--sp,r7
80003666:	fe b0 f4 d1 	rcall	80002008 <dip204_printf_string>
	//vol = (vol<<6)&0xFFF;
	for(i=0; i<polynum; i++)
8000366a:	e0 65 00 a8 	mov	r5,168
8000366e:	2f ed       	sub	sp,-8
80003670:	0b 89       	ld.ub	r9,r5[0x0]
80003672:	30 08       	mov	r8,0
80003674:	f0 09 18 00 	cp.b	r9,r8
	{
		if(polyVoiceBusy[i])
			dacsend(i+2,1,(vol<<5)&0xFFF);
80003678:	c2 20       	breq	800036bc <midiVol+0x84>
8000367a:	30 07       	mov	r7,0
	dip204_set_cursor_position(1,1);
	dip204_printf_string("                    ");
	dip204_set_cursor_position(1,1);
	dip204_printf_string("vol: %u %u", vol, (vol<<5)&0xFFF);
	//vol = (vol<<6)&0xFFF;
	for(i=0; i<polynum; i++)
8000367c:	e2 12 0f e0 	andl	r2,0xfe0,COH
	{
		if(polyVoiceBusy[i])
80003680:	30 26       	mov	r6,2
80003682:	e0 63 0c 54 	mov	r3,3156
			dacsend(i+2,1,(vol<<5)&0xFFF);
80003686:	0e 94       	mov	r4,r7
80003688:	c0 f8       	rjmp	800036a6 <midiVol+0x6e>
8000368a:	04 9a       	mov	r10,r2
8000368c:	30 1b       	mov	r11,1
	dip204_set_cursor_position(1,1);
	dip204_printf_string("                    ");
	dip204_set_cursor_position(1,1);
	dip204_printf_string("vol: %u %u", vol, (vol<<5)&0xFFF);
	//vol = (vol<<6)&0xFFF;
	for(i=0; i<polynum; i++)
8000368e:	0c 9c       	mov	r12,r6
80003690:	e0 a0 2c 56 	rcall	80008f3c <dacsend>
80003694:	2f f7       	sub	r7,-1
80003696:	2f f6       	sub	r6,-1
80003698:	5c 57       	castu.b	r7
8000369a:	5c 56       	castu.b	r6
8000369c:	0b 88       	ld.ub	r8,r5[0x0]
8000369e:	ee 08 18 00 	cp.b	r8,r7
	{
		if(polyVoiceBusy[i])
800036a2:	e0 88 00 0d 	brls	800036bc <midiVol+0x84>
800036a6:	e6 07 07 08 	ld.ub	r8,r3[r7]
			dacsend(i+2,1,(vol<<5)&0xFFF);
		else
			dacsend(i+2,1,0);	
800036aa:	e8 08 18 00 	cp.b	r8,r4
800036ae:	ce e1       	brne	8000368a <midiVol+0x52>
800036b0:	0c 9c       	mov	r12,r6
800036b2:	30 0a       	mov	r10,0
800036b4:	30 1b       	mov	r11,1
800036b6:	e0 a0 2c 43 	rcall	80008f3c <dacsend>
800036ba:	ce db       	rjmp	80003694 <midiVol+0x5c>
800036bc:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800036c0:	80 00       	ld.sh	r0,r0[0x0]
800036c2:	f6 24 80 00 	sub	r4,-622592
800036c6:	f6 3c d4 01 	sub	r12,-535551

800036c8 <initNoteStack>:
800036c8:	d4 01       	pushm	lr
800036ca:	e0 68 0b ec 	mov	r8,3052
800036ce:	3f fa       	mov	r10,-1
800036d0:	f0 c9 ff a0 	sub	r9,r8,-96
800036d4:	b0 8a       	st.b	r8[0x0],r10
800036d6:	2f e8       	sub	r8,-2
800036d8:	12 38       	cp.w	r8,r9
800036da:	cf d1       	brne	800036d4 <initNoteStack+0xc>
void initNoteStack(void)
{
	uint8_t i;
	for(i=0; i<48; i++)
		notestack[i][0] = -1;
	numnotes = 0;
800036dc:	30 09       	mov	r9,0
	for(i=0; i<4; i++)
	{
		dacsend(i,1,0);
800036de:	e0 68 09 69 	mov	r8,2409
800036e2:	30 0a       	mov	r10,0
800036e4:	b0 89       	st.b	r8[0x0],r9
800036e6:	14 9c       	mov	r12,r10
800036e8:	30 1b       	mov	r11,1
		dacsend(i,2,0);
800036ea:	e0 a0 2c 29 	rcall	80008f3c <dacsend>
800036ee:	30 0a       	mov	r10,0
800036f0:	30 2b       	mov	r11,2
800036f2:	14 9c       	mov	r12,r10
		DAC16Send(i,0);
800036f4:	e0 a0 2c 24 	rcall	80008f3c <dacsend>
800036f8:	30 0b       	mov	r11,0
800036fa:	16 9c       	mov	r12,r11
	for(i=0; i<48; i++)
		notestack[i][0] = -1;
	numnotes = 0;
	for(i=0; i<4; i++)
	{
		dacsend(i,1,0);
800036fc:	e0 a0 30 c0 	rcall	8000987c <DAC16Send>
80003700:	30 1b       	mov	r11,1
80003702:	30 0a       	mov	r10,0
80003704:	16 9c       	mov	r12,r11
		dacsend(i,2,0);
80003706:	e0 a0 2c 1b 	rcall	80008f3c <dacsend>
8000370a:	30 0a       	mov	r10,0
8000370c:	30 2b       	mov	r11,2
8000370e:	30 1c       	mov	r12,1
		DAC16Send(i,0);
80003710:	e0 a0 2c 16 	rcall	80008f3c <dacsend>
80003714:	30 0b       	mov	r11,0
80003716:	30 1c       	mov	r12,1
	for(i=0; i<48; i++)
		notestack[i][0] = -1;
	numnotes = 0;
	for(i=0; i<4; i++)
	{
		dacsend(i,1,0);
80003718:	e0 a0 30 b2 	rcall	8000987c <DAC16Send>
8000371c:	30 0a       	mov	r10,0
8000371e:	30 1b       	mov	r11,1
80003720:	30 2c       	mov	r12,2
		dacsend(i,2,0);
80003722:	e0 a0 2c 0d 	rcall	80008f3c <dacsend>
80003726:	30 0a       	mov	r10,0
80003728:	30 2b       	mov	r11,2
8000372a:	16 9c       	mov	r12,r11
		DAC16Send(i,0);
8000372c:	e0 a0 2c 08 	rcall	80008f3c <dacsend>
80003730:	30 0b       	mov	r11,0
80003732:	30 2c       	mov	r12,2
	for(i=0; i<48; i++)
		notestack[i][0] = -1;
	numnotes = 0;
	for(i=0; i<4; i++)
	{
		dacsend(i,1,0);
80003734:	e0 a0 30 a4 	rcall	8000987c <DAC16Send>
80003738:	30 0a       	mov	r10,0
8000373a:	30 1b       	mov	r11,1
8000373c:	30 3c       	mov	r12,3
		dacsend(i,2,0);
8000373e:	e0 a0 2b ff 	rcall	80008f3c <dacsend>
80003742:	30 2b       	mov	r11,2
80003744:	30 3c       	mov	r12,3
80003746:	30 0a       	mov	r10,0
		DAC16Send(i,0);
80003748:	e0 a0 2b fa 	rcall	80008f3c <dacsend>
8000374c:	30 0b       	mov	r11,0
8000374e:	30 3c       	mov	r12,3
	}
}
80003750:	e0 a0 30 96 	rcall	8000987c <DAC16Send>
80003754:	d8 02       	popm	pc
80003756:	d7 03       	nop

80003758 <removeNote>:
80003758:	d4 31       	pushm	r0-r7,lr
8000375a:	20 3d       	sub	sp,12
8000375c:	e0 69 09 69 	mov	r9,2409
80003760:	13 8e       	ld.ub	lr,r9[0x0]
80003762:	58 0e       	cp.w	lr,0
void removeNote(uint8_t noteVal)
{
	uint8_t j,k;
	//it's a note-off, remove it from the stack
	//go through the notes that are currently held down to find the one that released
	for (j = 0; j < numnotes; j++)
80003764:	e0 80 01 23 	breq	800039aa <removeNote+0x252>
80003768:	e0 68 09 6e 	mov	r8,2414
8000376c:	e0 60 09 68 	mov	r0,2408
80003770:	50 08       	stdsp	sp[0x0],r8
80003772:	e0 63 0b ec 	mov	r3,3052
80003776:	11 8a       	ld.ub	r10,r8[0x0]
80003778:	01 89       	ld.ub	r9,r0[0x0]
8000377a:	1c 98       	mov	r8,lr
8000377c:	1c 94       	mov	r4,lr
8000377e:	30 0b       	mov	r11,0
		//if it's the note that just got released
		if (notestack[j][0] == noteVal)
		{
			for (k = 0; k < (numnotes - j); k++)
			{
				notestack[k + j][0] = notestack[k + j + 1][0];
80003780:	06 91       	mov	r1,r3
				//if it's the last one, write negative 1 beyond it (it's already been copied to the position to the left of it)
				if (k == ((numnotes - j) - 1))
					notestack[k + j + 1][0] = -1;
80003782:	3f f2       	mov	r2,-1
80003784:	c0 b8       	rjmp	8000379a <removeNote+0x42>
	//it's a note-off, remove it from the stack
	//go through the notes that are currently held down to find the one that released
	for (j = 0; j < numnotes; j++)
	{
		//if it's the note that just got released
		if (notestack[j][0] == noteVal)
80003786:	1c 97       	mov	r7,lr
void removeNote(uint8_t noteVal)
{
	uint8_t j,k;
	//it's a note-off, remove it from the stack
	//go through the notes that are currently held down to find the one that released
	for (j = 0; j < numnotes; j++)
80003788:	2f fb       	sub	r11,-1
	{
		//if it's the note that just got released
		if (notestack[j][0] == noteVal)
8000378a:	10 9e       	mov	lr,r8
void removeNote(uint8_t noteVal)
{
	uint8_t j,k;
	//it's a note-off, remove it from the stack
	//go through the notes that are currently held down to find the one that released
	for (j = 0; j < numnotes; j++)
8000378c:	5c 5b       	castu.b	r11
8000378e:	fc 0b 18 00 	cp.b	r11,lr
80003792:	c3 42       	brcc	800037fa <removeNote+0xa2>
80003794:	1c 98       	mov	r8,lr
80003796:	0e 9e       	mov	lr,r7
80003798:	10 94       	mov	r4,r8
	{
		//if it's the note that just got released
		if (notestack[j][0] == noteVal)
8000379a:	e6 0b 06 17 	ld.sb	r7,r3[r11<<0x1]
8000379e:	18 37       	cp.w	r7,r12
800037a0:	cf 31       	brne	80003786 <removeNote+0x2e>
		{
			for (k = 0; k < (numnotes - j); k++)
800037a2:	e8 0b 01 06 	sub	r6,r4,r11
800037a6:	58 06       	cp.w	r6,0
800037a8:	e0 8a 00 1d 	brle	800037e2 <removeNote+0x8a>
800037ac:	30 09       	mov	r9,0
800037ae:	ec c5 00 01 	sub	r5,r6,1
800037b2:	12 98       	mov	r8,r9
800037b4:	c0 68       	rjmp	800037c0 <removeNote+0x68>
800037b6:	2f f8       	sub	r8,-1
800037b8:	5c 58       	castu.b	r8
800037ba:	10 99       	mov	r9,r8
800037bc:	0c 38       	cp.w	r8,r6
800037be:	c1 24       	brge	800037e2 <removeNote+0x8a>
			{
				notestack[k + j][0] = notestack[k + j + 1][0];
800037c0:	f2 0b 00 0a 	add	r10,r9,r11
800037c4:	f4 ce ff ff 	sub	lr,r10,-1
800037c8:	e6 0e 07 17 	ld.ub	r7,r3[lr<<0x1]
800037cc:	e6 0a 0b 17 	st.b	r3[r10<<0x1],r7
				//if it's the last one, write negative 1 beyond it (it's already been copied to the position to the left of it)
				if (k == ((numnotes - j) - 1))
800037d0:	12 35       	cp.w	r5,r9
800037d2:	cf 21       	brne	800037b6 <removeNote+0x5e>
					notestack[k + j + 1][0] = -1;
800037d4:	e2 0e 0b 12 	st.b	r1[lr<<0x1],r2
	for (j = 0; j < numnotes; j++)
	{
		//if it's the note that just got released
		if (notestack[j][0] == noteVal)
		{
			for (k = 0; k < (numnotes - j); k++)
800037d8:	2f f8       	sub	r8,-1
800037da:	5c 58       	castu.b	r8
800037dc:	10 99       	mov	r9,r8
800037de:	0c 38       	cp.w	r8,r6
800037e0:	cf 05       	brlt	800037c0 <removeNote+0x68>
				//if it's the last one, write negative 1 beyond it (it's already been copied to the position to the left of it)
				if (k == ((numnotes - j) - 1))
					notestack[k + j + 1][0] = -1;
			}
			// in case it got put on the stack multiple times
			j--;
800037e2:	20 1b       	sub	r11,1
			numnotes--;
800037e4:	08 9e       	mov	lr,r4
800037e6:	20 1e       	sub	lr,1
800037e8:	30 19       	mov	r9,1
800037ea:	5c 5e       	castu.b	lr
void removeNote(uint8_t noteVal)
{
	uint8_t j,k;
	//it's a note-off, remove it from the stack
	//go through the notes that are currently held down to find the one that released
	for (j = 0; j < numnotes; j++)
800037ec:	2f fb       	sub	r11,-1
				if (k == ((numnotes - j) - 1))
					notestack[k + j + 1][0] = -1;
			}
			// in case it got put on the stack multiple times
			j--;
			numnotes--;
800037ee:	1c 97       	mov	r7,lr
800037f0:	12 9a       	mov	r10,r9
void removeNote(uint8_t noteVal)
{
	uint8_t j,k;
	//it's a note-off, remove it from the stack
	//go through the notes that are currently held down to find the one that released
	for (j = 0; j < numnotes; j++)
800037f2:	5c 5b       	castu.b	r11
800037f4:	fc 0b 18 00 	cp.b	r11,lr
800037f8:	cc e3       	brcs	80003794 <removeNote+0x3c>
800037fa:	40 08       	lddsp	r8,sp[0x0]
800037fc:	a0 89       	st.b	r0[0x0],r9
800037fe:	b0 8a       	st.b	r8[0x0],r10
80003800:	e0 69 09 69 	mov	r9,2409
			noteoffhappened = 1;
		}
	}

	//also, remove that note from the polyphony array if it's there.
	for (j = 0; j < polynum; j++)
80003804:	b2 87       	st.b	r9[0x0],r7
80003806:	e0 68 00 a8 	mov	r8,168
8000380a:	11 8a       	ld.ub	r10,r8[0x0]
8000380c:	58 0a       	cp.w	r10,0
8000380e:	e0 80 00 ca 	breq	800039a2 <removeNote+0x24a>
80003812:	e0 68 00 a9 	mov	r8,169
80003816:	e0 6b 0b e8 	mov	r11,3048
	{
		if (polyVoiceNote[j] == noteVal)
		{
			polyVoiceBusy[j] = 0;
8000381a:	50 18       	stdsp	sp[0x4],r8
			noteoffhappened = 1;
		}
	}

	//also, remove that note from the polyphony array if it's there.
	for (j = 0; j < polynum; j++)
8000381c:	e0 62 0c 54 	mov	r2,3156
	{
		if (polyVoiceNote[j] == noteVal)
		{
			polyVoiceBusy[j] = 0;
			changevoice[j] = 1;
80003820:	30 08       	mov	r8,0
80003822:	40 19       	lddsp	r9,sp[0x4]
80003824:	10 94       	mov	r4,r8
			noteoffhappened = 1;
		}
	}

	//also, remove that note from the polyphony array if it's there.
	for (j = 0; j < polynum; j++)
80003826:	13 87       	ld.ub	r7,r9[0x0]
80003828:	e0 65 0c 50 	mov	r5,3152
8000382c:	30 16       	mov	r6,1
	{
		if (polyVoiceNote[j] == noteVal)
8000382e:	c0 68       	rjmp	8000383a <removeNote+0xe2>
80003830:	2f f8       	sub	r8,-1
80003832:	f0 0a 18 00 	cp.b	r10,r8
80003836:	e0 88 00 12 	brls	8000385a <removeNote+0x102>
		{
			polyVoiceBusy[j] = 0;
8000383a:	f6 08 07 09 	ld.ub	r9,r11[r8]
			changevoice[j] = 1;
8000383e:	f8 09 18 00 	cp.b	r9,r12
80003842:	cf 71       	brne	80003830 <removeNote+0xd8>
80003844:	e4 08 0b 04 	st.b	r2[r8],r4
			noteoffhappened = 1;
		}
	}

	//also, remove that note from the polyphony array if it's there.
	for (j = 0; j < polynum; j++)
80003848:	ea 08 0b 06 	st.b	r5[r8],r6
8000384c:	ef d8 c0 08 	bfextu	r7,r8,0x0,0x8
80003850:	2f f8       	sub	r8,-1
			checkstolen = j;
		}
	}
			
	//remove it from the notestack and decrement numnotes
	if (notestack[0][0] != -1)
80003852:	f0 0a 18 00 	cp.b	r10,r8
80003856:	fe 9b ff f2 	brhi	8000383a <removeNote+0xe2>
8000385a:	40 18       	lddsp	r8,sp[0x4]
		currentnote = notestack[0][0];
8000385c:	b0 87       	st.b	r8[0x0],r7
8000385e:	07 86       	ld.ub	r6,r3[0x0]

	// if we removed a note from the polyphony array
	if (checkstolen != -1)
80003860:	3f f8       	mov	r8,-1
80003862:	f0 06 18 00 	cp.b	r6,r8
80003866:	c0 40       	breq	8000386e <removeNote+0x116>
80003868:	e0 68 09 62 	mov	r8,2402
	{
		j = 0;
		//now check if there are any polyphony voices waiting that got stolen.
		while(checkstolen && j < numnotes)
8000386c:	b0 86       	st.b	r8[0x0],r6
8000386e:	40 18       	lddsp	r8,sp[0x4]
80003870:	11 81       	ld.ub	r1,r8[0x0]
80003872:	3f f8       	mov	r8,-1
80003874:	f0 01 18 00 	cp.b	r1,r8
80003878:	c6 60       	breq	80003944 <removeNote+0x1ec>
8000387a:	58 01       	cp.w	r1,0
8000387c:	c6 40       	breq	80003944 <removeNote+0x1ec>
8000387e:	58 0e       	cp.w	lr,0
80003880:	c6 20       	breq	80003944 <removeNote+0x1ec>
80003882:	e0 69 09 6e 	mov	r9,2414
80003886:	30 15       	mov	r5,1
				}
				// if you didn't find it, use the voice that was just released to sound it.
				if (alreadythere == 0)
				{
					polyVoiceNote[checkstolen] = notestack[j][0];
					polyVoiceBusy[checkstolen] = 1;
80003888:	13 88       	ld.ub	r8,r9[0x0]
8000388a:	50 09       	stdsp	sp[0x0],r9
		j = 0;
		//now check if there are any polyphony voices waiting that got stolen.
		while(checkstolen && j < numnotes)
		{
			//if you find a held note in the notestack
			if (notestack[j][0] != -1)
8000388c:	2f e3       	sub	r3,-2
8000388e:	e0 69 09 61 	mov	r9,2401
80003892:	50 28       	stdsp	sp[0x8],r8
			{
				//check if it has no voice associated with it
				alreadythere = 0;
				for (k = 0; k < polynum; k++)
80003894:	13 87       	ld.ub	r7,r9[0x0]
80003896:	e1 d1 c0 08 	bfextu	r0,r1,0x0,0x8
8000389a:	e0 62 0c 54 	mov	r2,3156
8000389e:	0a 94       	mov	r4,r5
800038a0:	3f f8       	mov	r8,-1
800038a2:	f0 06 18 00 	cp.b	r6,r8
800038a6:	c2 00       	breq	800038e6 <removeNote+0x18e>
800038a8:	58 0a       	cp.w	r10,0
800038aa:	c2 d0       	breq	80003904 <removeNote+0x1ac>
800038ac:	30 07       	mov	r7,0
				{
					if ((polyVoiceNote[k] == notestack[j][0]) && (polyVoiceBusy[k] == 1))
800038ae:	f9 d6 b0 08 	bfexts	r12,r6,0x0,0x8
800038b2:	0e 98       	mov	r8,r7
800038b4:	e0 6b 0b e8 	mov	r11,3048
800038b8:	c0 68       	rjmp	800038c4 <removeNote+0x16c>
800038ba:	2f f8       	sub	r8,-1
800038bc:	f0 0a 18 00 	cp.b	r10,r8
800038c0:	e0 88 00 11 	brls	800038e2 <removeNote+0x18a>
			//if you find a held note in the notestack
			if (notestack[j][0] != -1)
			{
				//check if it has no voice associated with it
				alreadythere = 0;
				for (k = 0; k < polynum; k++)
800038c4:	f6 08 07 09 	ld.ub	r9,r11[r8]
800038c8:	18 39       	cp.w	r9,r12
800038ca:	cf 81       	brne	800038ba <removeNote+0x162>
				{
					if ((polyVoiceNote[k] == notestack[j][0]) && (polyVoiceBusy[k] == 1))
						alreadythere = 1;
				}
				// if you didn't find it, use the voice that was just released to sound it.
				if (alreadythere == 0)
800038cc:	e4 08 07 09 	ld.ub	r9,r2[r8]
	// if we removed a note from the polyphony array
	if (checkstolen != -1)
	{
		j = 0;
		//now check if there are any polyphony voices waiting that got stolen.
		while(checkstolen && j < numnotes)
800038d0:	2f f8       	sub	r8,-1
800038d2:	e8 09 18 00 	cp.b	r9,r4
800038d6:	f9 b7 00 01 	moveq	r7,1
800038da:	f0 0a 18 00 	cp.b	r10,r8
800038de:	fe 9b ff f3 	brhi	800038c4 <removeNote+0x16c>
800038e2:	58 07       	cp.w	r7,0
800038e4:	c1 30       	breq	8000390a <removeNote+0x1b2>
800038e6:	58 01       	cp.w	r1,0
800038e8:	c2 60       	breq	80003934 <removeNote+0x1dc>
800038ea:	ea c8 ff ff 	sub	r8,r5,-1
			//if you find a held note in the notestack
			if (notestack[j][0] != -1)
			{
				//check if it has no voice associated with it
				alreadythere = 0;
				for (k = 0; k < polynum; k++)
800038ee:	e1 d1 c0 08 	bfextu	r0,r1,0x0,0x8
						alreadythere = 1;
				}
				// if you didn't find it, use the voice that was just released to sound it.
				if (alreadythere == 0)
				{
					polyVoiceNote[checkstolen] = notestack[j][0];
800038f2:	5c 58       	castu.b	r8
					polyVoiceBusy[checkstolen] = 1;
					changevoice[checkstolen] = 1;
800038f4:	ea 0e 18 00 	cp.b	lr,r5
						alreadythere = 1;
				}
				// if you didn't find it, use the voice that was just released to sound it.
				if (alreadythere == 0)
				{
					polyVoiceNote[checkstolen] = notestack[j][0];
800038f8:	e0 88 00 1e 	brls	80003934 <removeNote+0x1dc>
					polyVoiceBusy[checkstolen] = 1;
					changevoice[checkstolen] = 1;
800038fc:	07 86       	ld.ub	r6,r3[0x0]
				}
				// if you didn't find it, use the voice that was just released to sound it.
				if (alreadythere == 0)
				{
					polyVoiceNote[checkstolen] = notestack[j][0];
					polyVoiceBusy[checkstolen] = 1;
800038fe:	10 95       	mov	r5,r8
80003900:	2f e3       	sub	r3,-2
					changevoice[checkstolen] = 1;
80003902:	cc fb       	rjmp	800038a0 <removeNote+0x148>
80003904:	14 97       	mov	r7,r10
80003906:	e0 6b 0b e8 	mov	r11,3048
	// if we removed a note from the polyphony array
	if (checkstolen != -1)
	{
		j = 0;
		//now check if there are any polyphony voices waiting that got stolen.
		while(checkstolen && j < numnotes)
8000390a:	5c 60       	casts.b	r0
8000390c:	e0 68 0c 50 	mov	r8,3152
80003910:	f6 00 0b 06 	st.b	r11[r0],r6
80003914:	f0 00 0b 04 	st.b	r8[r0],r4
80003918:	e4 00 0b 04 	st.b	r2[r0],r4
8000391c:	30 19       	mov	r9,1
8000391e:	50 29       	stdsp	sp[0x8],r9
80003920:	e0 61 00 ff 	mov	r1,255
80003924:	ea c8 ff ff 	sub	r8,r5,-1
		}
	}

	//if(numnotes == 0)
	//DAC16Send(3,0);
	for(k=0; k<polynum; k++)
80003928:	02 90       	mov	r0,r1
8000392a:	5c 58       	castu.b	r8
8000392c:	ea 0e 18 00 	cp.b	lr,r5
	{
		if(!polyVoiceBusy[k])
80003930:	fe 9b ff e6 	brhi	800038fc <removeNote+0x1a4>
		}
	}

	//if(numnotes == 0)
	//DAC16Send(3,0);
	for(k=0; k<polynum; k++)
80003934:	40 29       	lddsp	r9,sp[0x8]
80003936:	40 08       	lddsp	r8,sp[0x0]
80003938:	b0 89       	st.b	r8[0x0],r9
8000393a:	40 18       	lddsp	r8,sp[0x4]
8000393c:	e0 69 09 61 	mov	r9,2401
	{
		if(!polyVoiceBusy[k])
80003940:	b0 81       	st.b	r8[0x0],r1
80003942:	b2 87       	st.b	r9[0x0],r7
80003944:	58 0a       	cp.w	r10,0
80003946:	c1 f0       	breq	80003984 <removeNote+0x22c>
80003948:	30 07       	mov	r7,0
			dacsend(k,1,0);
8000394a:	e0 65 0c 54 	mov	r5,3156
8000394e:	0e 96       	mov	r6,r7
80003950:	c0 78       	rjmp	8000395e <removeNote+0x206>
80003952:	2f f7       	sub	r7,-1
80003954:	5c 57       	castu.b	r7
		}
	}

	//if(numnotes == 0)
	//DAC16Send(3,0);
	for(k=0; k<polynum; k++)
80003956:	ee 0a 18 00 	cp.b	r10,r7
8000395a:	e0 88 00 15 	brls	80003984 <removeNote+0x22c>
8000395e:	ea 07 07 08 	ld.ub	r8,r5[r7]
80003962:	ec 08 18 00 	cp.b	r8,r6
	{
		if(!polyVoiceBusy[k])
			dacsend(k,1,0);
	}
	
	lcd_clear_line(3);
80003966:	cf 61       	brne	80003952 <removeNote+0x1fa>
80003968:	0e 9c       	mov	r12,r7
	dip204_printf_string("%u notes",numnotes);
8000396a:	30 0a       	mov	r10,0
8000396c:	30 1b       	mov	r11,1
8000396e:	e0 a0 2a e7 	rcall	80008f3c <dacsend>
80003972:	e0 68 00 a8 	mov	r8,168
	dip204_hide_cursor();
80003976:	2f f7       	sub	r7,-1
80003978:	11 8a       	ld.ub	r10,r8[0x0]
8000397a:	5c 57       	castu.b	r7
}
8000397c:	ee 0a 18 00 	cp.b	r10,r7
80003980:	fe 9b ff ef 	brhi	8000395e <removeNote+0x206>
80003984:	30 3c       	mov	r12,3
80003986:	e0 a0 2a c9 	rcall	80008f18 <lcd_clear_line>
8000398a:	e0 69 09 69 	mov	r9,2409
8000398e:	48 9c       	lddpc	r12,800039b0 <removeNote+0x258>
80003990:	13 88       	ld.ub	r8,r9[0x0]
80003992:	1a d8       	st.w	--sp,r8
80003994:	fe b0 f3 3a 	rcall	80002008 <dip204_printf_string>
80003998:	fe b0 f6 30 	rcall	800025f8 <dip204_hide_cursor>
8000399c:	2f fd       	sub	sp,-4
8000399e:	2f dd       	sub	sp,-12
800039a0:	d8 32       	popm	r0-r7,pc
800039a2:	e0 69 00 a9 	mov	r9,169
800039a6:	50 19       	stdsp	sp[0x4],r9
800039a8:	c5 bb       	rjmp	8000385e <removeNote+0x106>
800039aa:	e0 63 0b ec 	mov	r3,3052
800039ae:	c2 cb       	rjmp	80003806 <removeNote+0xae>
800039b0:	80 00       	ld.sh	r0,r0[0x0]
800039b2:	f6 48 d4 31 	cp.w	r8,-601039

800039b4 <addNote>:
800039b4:	d4 31       	pushm	r0-r7,lr
800039b6:	e0 68 00 a9 	mov	r8,169
800039ba:	3f f9       	mov	r9,-1
800039bc:	b0 89       	st.b	r8[0x0],r9
800039be:	e0 6a 09 69 	mov	r10,2409
800039c2:	18 98       	mov	r8,r12
800039c4:	15 80       	ld.ub	r0,r10[0x0]
800039c6:	58 00       	cp.w	r0,0
800039c8:	e0 80 00 91 	breq	80003aea <addNote+0x136>
	//	DAC16Send(3,0xFFFF);

	//first move notes that are already in the stack one position to the right
	for (j = numnotes; j > 0; j--)
	{
		notestack[j][0] = notestack[(j - 1)][0];
800039cc:	00 99       	mov	r9,r0
800039ce:	e0 6a 0b ec 	mov	r10,3052
800039d2:	f2 cc 00 01 	sub	r12,r9,1
800039d6:	f4 0c 07 1e 	ld.ub	lr,r10[r12<<0x1]
		notestack[j][1] = notestack[(j - 1)][0];
800039da:	f4 09 0b 1e 	st.b	r10[r9<<0x1],lr
800039de:	f4 0c 07 1e 	ld.ub	lr,r10[r12<<0x1]
	//it's a note-on -- add it to the monophonic stack
	//if(numnotes == 0)
	//	DAC16Send(3,0xFFFF);

	//first move notes that are already in the stack one position to the right
	for (j = numnotes; j > 0; j--)
800039e2:	f4 09 00 1c 	add	r12,r10,r9<<0x1
800039e6:	b8 9e       	st.b	r12[0x1],lr
		notestack[j][1] = notestack[(j - 1)][0];
	}

	//then, insert the new note into the front of the stack
	notestack[0][0] = noteVal;
	notestack[0][1] = vel;
800039e8:	20 19       	sub	r9,1
		notestack[j][0] = notestack[(j - 1)][0];
		notestack[j][1] = notestack[(j - 1)][0];
	}

	//then, insert the new note into the front of the stack
	notestack[0][0] = noteVal;
800039ea:	5c 59       	castu.b	r9
	notestack[0][1] = vel;

	//also, assign a new polyphony voice to the note on for the polyphony handling
	voicefound = 0;
800039ec:	cf 31       	brne	800039d2 <addNote+0x1e>
800039ee:	b4 9b       	st.b	r10[0x1],r11
800039f0:	b4 88       	st.b	r10[0x0],r8
	voicecounter = 0;
800039f2:	e0 6a 09 6f 	mov	r10,2415
	for (j = 0; j < polynum; j++)
800039f6:	30 09       	mov	r9,0
800039f8:	b4 89       	st.b	r10[0x0],r9
800039fa:	e0 6a 09 6a 	mov	r10,2410
800039fe:	b4 89       	st.b	r10[0x0],r9
80003a00:	e0 66 00 a8 	mov	r6,168
80003a04:	0d 8b       	ld.ub	r11,r6[0x0]
	{
		if ((polyVoiceBusy[j] == 0) && (voicefound == 0))
80003a06:	58 0b       	cp.w	r11,0
		{
			polyVoiceNote[j] = noteVal;  // store the new note in a voice if a voice is free - store it without the offset and transpose (just 0-31).
80003a08:	c3 80       	breq	80003a78 <addNote+0xc4>
			polyVoiceBusy[j] = 1;
80003a0a:	30 09       	mov	r9,0
			changevoice[j] = 1;
80003a0c:	e0 67 0c 54 	mov	r7,3156
		}	
		voicecounter++;
				
		if ((voicecounter == polynum) && (voicefound == 0))
		{
			polyVoiceNote[(polynum - 1)] = noteVal;  // store the new note in a voice if a voice is free - store it without the offset and transpose (just 0-31).
80003a10:	12 9e       	mov	lr,r9
80003a12:	0e 9a       	mov	r10,r7
			polyVoiceBusy[(polynum - 1)] = 1;
			changevoice[(polynum - 1)] = 1;
80003a14:	12 95       	mov	r5,r9
	notestack[0][1] = vel;

	//also, assign a new polyphony voice to the note on for the polyphony handling
	voicefound = 0;
	voicecounter = 0;
	for (j = 0; j < polynum; j++)
80003a16:	e0 61 0b e8 	mov	r1,3048
80003a1a:	30 14       	mov	r4,1
	{
		if ((polyVoiceBusy[j] == 0) && (voicefound == 0))
80003a1c:	e0 62 0c 50 	mov	r2,3152
80003a20:	f6 c3 00 01 	sub	r3,r11,1
80003a24:	c0 58       	rjmp	80003a2e <addNote+0x7a>
80003a26:	2f f9       	sub	r9,-1
		{
			polyVoiceNote[j] = noteVal;  // store the new note in a voice if a voice is free - store it without the offset and transpose (just 0-31).
80003a28:	f6 09 18 00 	cp.b	r9,r11
			polyVoiceBusy[j] = 1;
80003a2c:	c2 02       	brcc	80003a6c <addNote+0xb8>
			changevoice[j] = 1;
80003a2e:	15 8c       	ld.ub	r12,r10[0x0]
80003a30:	ea 0c 18 00 	cp.b	r12,r5
				
		if ((voicecounter == polynum) && (voicefound == 0))
		{
			polyVoiceNote[(polynum - 1)] = noteVal;  // store the new note in a voice if a voice is free - store it without the offset and transpose (just 0-31).
			polyVoiceBusy[(polynum - 1)] = 1;
			changevoice[(polynum - 1)] = 1;
80003a34:	c0 91       	brne	80003a46 <addNote+0x92>
			changevoice[j] = 1;
			voicefound = 1;
		}	
		voicecounter++;
				
		if ((voicecounter == polynum) && (voicefound == 0))
80003a36:	58 0e       	cp.w	lr,0
80003a38:	c0 71       	brne	80003a46 <addNote+0x92>
80003a3a:	e2 09 0b 08 	st.b	r1[r9],r8
80003a3e:	b4 84       	st.b	r10[0x0],r4
80003a40:	e4 09 0b 04 	st.b	r2[r9],r4
		{
			polyVoiceNote[(polynum - 1)] = noteVal;  // store the new note in a voice if a voice is free - store it without the offset and transpose (just 0-31).
80003a44:	30 1e       	mov	lr,1
80003a46:	2f fa       	sub	r10,-1
			polyVoiceBusy[(polynum - 1)] = 1;
80003a48:	f2 cc ff ff 	sub	r12,r9,-1
			changevoice[(polynum - 1)] = 1;
80003a4c:	f6 0c 18 00 	cp.b	r12,r11
80003a50:	ce b1       	brne	80003a26 <addNote+0x72>
80003a52:	58 0e       	cp.w	lr,0
	notestack[0][1] = vel;

	//also, assign a new polyphony voice to the note on for the polyphony handling
	voicefound = 0;
	voicecounter = 0;
	for (j = 0; j < polynum; j++)
80003a54:	ce 91       	brne	80003a26 <addNote+0x72>
80003a56:	e2 03 0b 08 	st.b	r1[r3],r8
80003a5a:	ee 03 0b 04 	st.b	r7[r3],r4
80003a5e:	e4 03 0b 04 	st.b	r2[r3],r4
			polyVoiceBusy[(polynum - 1)] = 1;
			changevoice[(polynum - 1)] = 1;
			voicefound = 1;
		}
	}
	numnotes++;
80003a62:	30 1e       	mov	lr,1
80003a64:	2f f9       	sub	r9,-1
80003a66:	f6 09 18 00 	cp.b	r9,r11
	notehappened = 1;
80003a6a:	ce 23       	brcs	80003a2e <addNote+0x7a>
80003a6c:	e0 69 09 6f 	mov	r9,2415
	currentnote = notestack[0][0];
	lcd_clear_line(3);
80003a70:	e0 6a 09 6a 	mov	r10,2410
80003a74:	b2 8e       	st.b	r9[0x0],lr
80003a76:	b4 8b       	st.b	r10[0x0],r11
	dip204_printf_string("%u notes",numnotes);
80003a78:	e0 69 09 69 	mov	r9,2409
80003a7c:	2f f0       	sub	r0,-1
80003a7e:	b2 80       	st.b	r9[0x0],r0
80003a80:	e0 69 09 6e 	mov	r9,2414
	dip204_hide_cursor();
80003a84:	30 1a       	mov	r10,1
80003a86:	b2 8a       	st.b	r9[0x0],r10
	for(j=0; j<polynum; j++)
80003a88:	e0 69 09 62 	mov	r9,2402
80003a8c:	30 3c       	mov	r12,3
80003a8e:	b2 88       	st.b	r9[0x0],r8
80003a90:	e0 a0 2a 44 	rcall	80008f18 <lcd_clear_line>
	{
		if(polyVoiceBusy[j])
80003a94:	e0 6a 09 69 	mov	r10,2409
	notehappened = 1;
	currentnote = notestack[0][0];
	lcd_clear_line(3);
	dip204_printf_string("%u notes",numnotes);
	dip204_hide_cursor();
	for(j=0; j<polynum; j++)
80003a98:	49 6c       	lddpc	r12,80003af0 <addNote+0x13c>
80003a9a:	15 88       	ld.ub	r8,r10[0x0]
80003a9c:	1a d8       	st.w	--sp,r8
80003a9e:	fe b0 f2 b5 	rcall	80002008 <dip204_printf_string>
80003aa2:	fe b0 f5 ab 	rcall	800025f8 <dip204_hide_cursor>
	{
		if(polyVoiceBusy[j])
80003aa6:	0d 89       	ld.ub	r9,r6[0x0]
80003aa8:	2f fd       	sub	sp,-4
80003aaa:	58 09       	cp.w	r9,0
80003aac:	c1 e0       	breq	80003ae8 <addNote+0x134>
			dacsend(j,1,0xFFF);
80003aae:	30 05       	mov	r5,0
80003ab0:	e0 67 0c 54 	mov	r7,3156
80003ab4:	0a 94       	mov	r4,r5
80003ab6:	c0 78       	rjmp	80003ac4 <addNote+0x110>
80003ab8:	2f f5       	sub	r5,-1
	notehappened = 1;
	currentnote = notestack[0][0];
	lcd_clear_line(3);
	dip204_printf_string("%u notes",numnotes);
	dip204_hide_cursor();
	for(j=0; j<polynum; j++)
80003aba:	5c 55       	castu.b	r5
	{
		if(polyVoiceBusy[j])
			dacsend(j,1,0xFFF);
80003abc:	ea 09 18 00 	cp.b	r9,r5
	notehappened = 1;
	currentnote = notestack[0][0];
	lcd_clear_line(3);
	dip204_printf_string("%u notes",numnotes);
	dip204_hide_cursor();
	for(j=0; j<polynum; j++)
80003ac0:	e0 88 00 14 	brls	80003ae8 <addNote+0x134>
80003ac4:	ee 05 07 08 	ld.ub	r8,r7[r5]
80003ac8:	e8 08 18 00 	cp.b	r8,r4
80003acc:	cf 60       	breq	80003ab8 <addNote+0x104>
80003ace:	0a 9c       	mov	r12,r5
80003ad0:	e0 6a 0f ff 	mov	r10,4095
80003ad4:	30 1b       	mov	r11,1
80003ad6:	e0 a0 2a 33 	rcall	80008f3c <dacsend>
80003ada:	2f f5       	sub	r5,-1
80003adc:	0d 89       	ld.ub	r9,r6[0x0]
80003ade:	5c 55       	castu.b	r5
80003ae0:	ea 09 18 00 	cp.b	r9,r5
80003ae4:	fe 9b ff f0 	brhi	80003ac4 <addNote+0x110>
80003ae8:	d8 32       	popm	r0-r7,pc
80003aea:	e0 6a 0b ec 	mov	r10,3052
80003aee:	c8 0b       	rjmp	800039ee <addNote+0x3a>
80003af0:	80 00       	ld.sh	r0,r0[0x0]
80003af2:	f6 48 d4 01 	cp.w	r8,-601087

80003af4 <board_init>:
80003af4:	d4 01       	pushm	lr
80003af6:	30 3b       	mov	r11,3
80003af8:	33 bc       	mov	r12,59
80003afa:	f0 1f 00 1e 	mcall	80003b70 <board_init+0x7c>
80003afe:	30 3b       	mov	r11,3
80003b00:	33 cc       	mov	r12,60
80003b02:	f0 1f 00 1c 	mcall	80003b70 <board_init+0x7c>
80003b06:	30 3b       	mov	r11,3
80003b08:	33 dc       	mov	r12,61
80003b0a:	f0 1f 00 1a 	mcall	80003b70 <board_init+0x7c>
80003b0e:	30 3b       	mov	r11,3
80003b10:	33 ec       	mov	r12,62
80003b12:	f0 1f 00 18 	mcall	80003b70 <board_init+0x7c>
80003b16:	30 3b       	mov	r11,3
80003b18:	33 3c       	mov	r12,51
80003b1a:	f0 1f 00 16 	mcall	80003b70 <board_init+0x7c>
80003b1e:	30 3b       	mov	r11,3
80003b20:	33 4c       	mov	r12,52
80003b22:	f0 1f 00 14 	mcall	80003b70 <board_init+0x7c>
80003b26:	30 3b       	mov	r11,3
80003b28:	33 5c       	mov	r12,53
80003b2a:	f0 1f 00 12 	mcall	80003b70 <board_init+0x7c>
80003b2e:	30 3b       	mov	r11,3
80003b30:	33 6c       	mov	r12,54
80003b32:	f0 1f 00 10 	mcall	80003b70 <board_init+0x7c>
80003b36:	30 0b       	mov	r11,0
80003b38:	35 8c       	mov	r12,88
80003b3a:	f0 1f 00 0e 	mcall	80003b70 <board_init+0x7c>
80003b3e:	30 0b       	mov	r11,0
80003b40:	35 5c       	mov	r12,85
80003b42:	f0 1f 00 0c 	mcall	80003b70 <board_init+0x7c>
80003b46:	30 0b       	mov	r11,0
80003b48:	35 2c       	mov	r12,82
80003b4a:	f0 1f 00 0a 	mcall	80003b70 <board_init+0x7c>
80003b4e:	30 0b       	mov	r11,0
80003b50:	31 4c       	mov	r12,20
80003b52:	f0 1f 00 08 	mcall	80003b70 <board_init+0x7c>
80003b56:	30 0b       	mov	r11,0
80003b58:	31 9c       	mov	r12,25
80003b5a:	f0 1f 00 06 	mcall	80003b70 <board_init+0x7c>
80003b5e:	30 0b       	mov	r11,0
80003b60:	31 ac       	mov	r12,26
80003b62:	f0 1f 00 04 	mcall	80003b70 <board_init+0x7c>
80003b66:	30 0b       	mov	r11,0
80003b68:	31 bc       	mov	r12,27
80003b6a:	f0 1f 00 02 	mcall	80003b70 <board_init+0x7c>
80003b6e:	d8 02       	popm	pc
80003b70:	80 00       	ld.sh	r0,r0[0x0]
80003b72:	3e 32       	mov	r2,-29

80003b74 <LED_Toggle>:
80003b74:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8
80003b78:	49 18       	lddpc	r8,80003bbc <LED_Toggle+0x48>
80003b7a:	70 09       	ld.w	r9,r8[0x0]
80003b7c:	f9 e9 20 09 	eor	r9,r12,r9
80003b80:	91 09       	st.w	r8[0x0],r9
80003b82:	58 0c       	cp.w	r12,0
80003b84:	5e 0c       	reteq	r12
80003b86:	48 f8       	lddpc	r8,80003bc0 <LED_Toggle+0x4c>
80003b88:	21 08       	sub	r8,16
80003b8a:	18 9a       	mov	r10,r12
80003b8c:	5c 9a       	brev	r10
80003b8e:	f4 0a 12 00 	clz	r10,r10
80003b92:	2f fa       	sub	r10,-1
80003b94:	f4 09 15 04 	lsl	r9,r10,0x4
80003b98:	12 08       	add	r8,r9
80003b9a:	70 09       	ld.w	r9,r8[0x0]
80003b9c:	a9 69       	lsl	r9,0x8
80003b9e:	e0 29 f0 00 	sub	r9,61440
80003ba2:	70 1b       	ld.w	r11,r8[0x4]
80003ba4:	f3 4b 00 5c 	st.w	r9[92],r11
80003ba8:	70 1b       	ld.w	r11,r8[0x4]
80003baa:	f3 4b 00 44 	st.w	r9[68],r11
80003bae:	70 1b       	ld.w	r11,r8[0x4]
80003bb0:	93 1b       	st.w	r9[0x4],r11
80003bb2:	f8 0a 0a 4c 	lsr	r12,r12,r10
80003bb6:	ce a1       	brne	80003b8a <LED_Toggle+0x16>
80003bb8:	5e fc       	retal	r12
80003bba:	00 00       	add	r0,r0
80003bbc:	00 00       	add	r0,r0
80003bbe:	03 50       	ld.sh	r0,--r1
80003bc0:	80 00       	ld.sh	r0,r0[0x0]
80003bc2:	f6 54 f9 dc 	cp.w	r4,-525860

80003bc4 <LED_On>:
80003bc4:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8
80003bc8:	49 18       	lddpc	r8,80003c0c <LED_On+0x48>
80003bca:	70 09       	ld.w	r9,r8[0x0]
80003bcc:	f9 e9 10 09 	or	r9,r12,r9
80003bd0:	91 09       	st.w	r8[0x0],r9
80003bd2:	58 0c       	cp.w	r12,0
80003bd4:	5e 0c       	reteq	r12
80003bd6:	48 f8       	lddpc	r8,80003c10 <LED_On+0x4c>
80003bd8:	21 08       	sub	r8,16
80003bda:	18 9a       	mov	r10,r12
80003bdc:	5c 9a       	brev	r10
80003bde:	f4 0a 12 00 	clz	r10,r10
80003be2:	2f fa       	sub	r10,-1
80003be4:	f4 09 15 04 	lsl	r9,r10,0x4
80003be8:	12 08       	add	r8,r9
80003bea:	70 09       	ld.w	r9,r8[0x0]
80003bec:	a9 69       	lsl	r9,0x8
80003bee:	e0 29 f0 00 	sub	r9,61440
80003bf2:	70 1b       	ld.w	r11,r8[0x4]
80003bf4:	f3 4b 00 58 	st.w	r9[88],r11
80003bf8:	70 1b       	ld.w	r11,r8[0x4]
80003bfa:	f3 4b 00 44 	st.w	r9[68],r11
80003bfe:	70 1b       	ld.w	r11,r8[0x4]
80003c00:	93 1b       	st.w	r9[0x4],r11
80003c02:	f8 0a 0a 4c 	lsr	r12,r12,r10
80003c06:	ce a1       	brne	80003bda <LED_On+0x16>
80003c08:	5e fc       	retal	r12
80003c0a:	00 00       	add	r0,r0
80003c0c:	00 00       	add	r0,r0
80003c0e:	03 50       	ld.sh	r0,--r1
80003c10:	80 00       	ld.sh	r0,r0[0x0]
80003c12:	f6 54 f9 dc 	cp.w	r4,-525860

80003c14 <LED_Off>:
80003c14:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8
80003c18:	49 28       	lddpc	r8,80003c60 <LED_Off+0x4c>
80003c1a:	70 09       	ld.w	r9,r8[0x0]
80003c1c:	f8 0a 11 ff 	rsub	r10,r12,-1
80003c20:	f5 e9 00 09 	and	r9,r10,r9
80003c24:	91 09       	st.w	r8[0x0],r9
80003c26:	58 0c       	cp.w	r12,0
80003c28:	5e 0c       	reteq	r12
80003c2a:	48 f8       	lddpc	r8,80003c64 <LED_Off+0x50>
80003c2c:	21 08       	sub	r8,16
80003c2e:	18 9a       	mov	r10,r12
80003c30:	5c 9a       	brev	r10
80003c32:	f4 0a 12 00 	clz	r10,r10
80003c36:	2f fa       	sub	r10,-1
80003c38:	f4 09 15 04 	lsl	r9,r10,0x4
80003c3c:	12 08       	add	r8,r9
80003c3e:	70 09       	ld.w	r9,r8[0x0]
80003c40:	a9 69       	lsl	r9,0x8
80003c42:	e0 29 f0 00 	sub	r9,61440
80003c46:	70 1b       	ld.w	r11,r8[0x4]
80003c48:	f3 4b 00 54 	st.w	r9[84],r11
80003c4c:	70 1b       	ld.w	r11,r8[0x4]
80003c4e:	f3 4b 00 44 	st.w	r9[68],r11
80003c52:	70 1b       	ld.w	r11,r8[0x4]
80003c54:	93 1b       	st.w	r9[0x4],r11
80003c56:	f8 0a 0a 4c 	lsr	r12,r12,r10
80003c5a:	ce a1       	brne	80003c2e <LED_Off+0x1a>
80003c5c:	5e fc       	retal	r12
80003c5e:	00 00       	add	r0,r0
80003c60:	00 00       	add	r0,r0
80003c62:	03 50       	ld.sh	r0,--r1
80003c64:	80 00       	ld.sh	r0,r0[0x0]
80003c66:	f6 54 eb cd 	cp.w	r4,-529459

80003c68 <eic_init>:
80003c68:	eb cd 40 e0 	pushm	r5-r7,lr
80003c6c:	58 0a       	cp.w	r10,0
80003c6e:	c6 30       	breq	80003d34 <eic_init+0xcc>
80003c70:	30 08       	mov	r8,0
80003c72:	10 97       	mov	r7,r8
80003c74:	30 19       	mov	r9,1
80003c76:	30 1e       	mov	lr,1
80003c78:	f0 08 00 18 	add	r8,r8,r8<<0x1
80003c7c:	f6 08 00 18 	add	r8,r11,r8<<0x1
80003c80:	11 96       	ld.ub	r6,r8[0x1]
80003c82:	f2 06 18 00 	cp.b	r6,r9
80003c86:	c0 71       	brne	80003c94 <eic_init+0x2c>
80003c88:	78 55       	ld.w	r5,r12[0x14]
80003c8a:	11 86       	ld.ub	r6,r8[0x0]
80003c8c:	fc 06 09 46 	lsl	r6,lr,r6
80003c90:	0a 46       	or	r6,r5
80003c92:	c0 78       	rjmp	80003ca0 <eic_init+0x38>
80003c94:	78 55       	ld.w	r5,r12[0x14]
80003c96:	11 86       	ld.ub	r6,r8[0x0]
80003c98:	fc 06 09 46 	lsl	r6,lr,r6
80003c9c:	5c d6       	com	r6
80003c9e:	0a 66       	and	r6,r5
80003ca0:	99 56       	st.w	r12[0x14],r6
80003ca2:	11 a6       	ld.ub	r6,r8[0x2]
80003ca4:	f2 06 18 00 	cp.b	r6,r9
80003ca8:	c0 71       	brne	80003cb6 <eic_init+0x4e>
80003caa:	78 65       	ld.w	r5,r12[0x18]
80003cac:	11 86       	ld.ub	r6,r8[0x0]
80003cae:	fc 06 09 46 	lsl	r6,lr,r6
80003cb2:	0a 46       	or	r6,r5
80003cb4:	c0 78       	rjmp	80003cc2 <eic_init+0x5a>
80003cb6:	78 65       	ld.w	r5,r12[0x18]
80003cb8:	11 86       	ld.ub	r6,r8[0x0]
80003cba:	fc 06 09 46 	lsl	r6,lr,r6
80003cbe:	5c d6       	com	r6
80003cc0:	0a 66       	and	r6,r5
80003cc2:	99 66       	st.w	r12[0x18],r6
80003cc4:	11 b6       	ld.ub	r6,r8[0x3]
80003cc6:	f2 06 18 00 	cp.b	r6,r9
80003cca:	c0 71       	brne	80003cd8 <eic_init+0x70>
80003ccc:	78 75       	ld.w	r5,r12[0x1c]
80003cce:	11 86       	ld.ub	r6,r8[0x0]
80003cd0:	fc 06 09 46 	lsl	r6,lr,r6
80003cd4:	0a 46       	or	r6,r5
80003cd6:	c0 78       	rjmp	80003ce4 <eic_init+0x7c>
80003cd8:	78 75       	ld.w	r5,r12[0x1c]
80003cda:	11 86       	ld.ub	r6,r8[0x0]
80003cdc:	fc 06 09 46 	lsl	r6,lr,r6
80003ce0:	5c d6       	com	r6
80003ce2:	0a 66       	and	r6,r5
80003ce4:	99 76       	st.w	r12[0x1c],r6
80003ce6:	11 c6       	ld.ub	r6,r8[0x4]
80003ce8:	f2 06 18 00 	cp.b	r6,r9
80003cec:	c0 71       	brne	80003cfa <eic_init+0x92>
80003cee:	78 85       	ld.w	r5,r12[0x20]
80003cf0:	11 86       	ld.ub	r6,r8[0x0]
80003cf2:	fc 06 09 46 	lsl	r6,lr,r6
80003cf6:	0a 46       	or	r6,r5
80003cf8:	c0 78       	rjmp	80003d06 <eic_init+0x9e>
80003cfa:	78 85       	ld.w	r5,r12[0x20]
80003cfc:	11 86       	ld.ub	r6,r8[0x0]
80003cfe:	fc 06 09 46 	lsl	r6,lr,r6
80003d02:	5c d6       	com	r6
80003d04:	0a 66       	and	r6,r5
80003d06:	99 86       	st.w	r12[0x20],r6
80003d08:	11 d6       	ld.ub	r6,r8[0x5]
80003d0a:	f2 06 18 00 	cp.b	r6,r9
80003d0e:	c0 71       	brne	80003d1c <eic_init+0xb4>
80003d10:	78 a6       	ld.w	r6,r12[0x28]
80003d12:	11 88       	ld.ub	r8,r8[0x0]
80003d14:	fc 08 09 48 	lsl	r8,lr,r8
80003d18:	0c 48       	or	r8,r6
80003d1a:	c0 78       	rjmp	80003d28 <eic_init+0xc0>
80003d1c:	78 a6       	ld.w	r6,r12[0x28]
80003d1e:	11 88       	ld.ub	r8,r8[0x0]
80003d20:	fc 08 09 48 	lsl	r8,lr,r8
80003d24:	5c d8       	com	r8
80003d26:	0c 68       	and	r8,r6
80003d28:	99 a8       	st.w	r12[0x28],r8
80003d2a:	2f f7       	sub	r7,-1
80003d2c:	0e 98       	mov	r8,r7
80003d2e:	0e 3a       	cp.w	r10,r7
80003d30:	fe 9b ff a4 	brhi	80003c78 <eic_init+0x10>
80003d34:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80003d38 <eic_enable_line>:
80003d38:	30 18       	mov	r8,1
80003d3a:	f0 0b 09 48 	lsl	r8,r8,r11
80003d3e:	99 c8       	st.w	r12[0x30],r8
80003d40:	5e fc       	retal	r12

80003d42 <eic_disable_line>:
80003d42:	30 18       	mov	r8,1
80003d44:	f0 0b 09 48 	lsl	r8,r8,r11
80003d48:	99 d8       	st.w	r12[0x34],r8
80003d4a:	5e fc       	retal	r12

80003d4c <eic_clear_interrupt_line>:
80003d4c:	e1 b8 00 00 	mfsr	r8,0x0
80003d50:	d3 03       	ssrf	0x10
80003d52:	30 19       	mov	r9,1
80003d54:	f2 0b 09 4b 	lsl	r11,r9,r11
80003d58:	99 4b       	st.w	r12[0x10],r11
80003d5a:	78 39       	ld.w	r9,r12[0xc]
80003d5c:	e6 18 00 01 	andh	r8,0x1,COH
80003d60:	c0 21       	brne	80003d64 <eic_clear_interrupt_line+0x18>
80003d62:	d5 03       	csrf	0x10
80003d64:	5e fc       	retal	r12

80003d66 <flashc_set_wait_state>:
80003d66:	fe 68 14 00 	mov	r8,-125952
80003d6a:	70 09       	ld.w	r9,r8[0x0]
80003d6c:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
80003d70:	91 09       	st.w	r8[0x0],r9
80003d72:	5e fc       	retal	r12

80003d74 <flashc_set_bus_freq>:
80003d74:	d4 01       	pushm	lr
80003d76:	e0 68 8a 3f 	mov	r8,35391
80003d7a:	ea 18 01 f7 	orh	r8,0x1f7
80003d7e:	10 3c       	cp.w	r12,r8
80003d80:	e0 88 00 06 	brls	80003d8c <flashc_set_bus_freq+0x18>
80003d84:	30 1c       	mov	r12,1
80003d86:	f0 1f 00 04 	mcall	80003d94 <flashc_set_bus_freq+0x20>
80003d8a:	d8 02       	popm	pc
80003d8c:	30 0c       	mov	r12,0
80003d8e:	f0 1f 00 02 	mcall	80003d94 <flashc_set_bus_freq+0x20>
80003d92:	d8 02       	popm	pc
80003d94:	80 00       	ld.sh	r0,r0[0x0]
80003d96:	3d 66       	mov	r6,-42

80003d98 <gpio_enable_module_pin>:
80003d98:	f8 08 16 05 	lsr	r8,r12,0x5
80003d9c:	a9 68       	lsl	r8,0x8
80003d9e:	e0 28 f0 00 	sub	r8,61440
80003da2:	58 1b       	cp.w	r11,1
80003da4:	c0 d0       	breq	80003dbe <gpio_enable_module_pin+0x26>
80003da6:	c0 63       	brcs	80003db2 <gpio_enable_module_pin+0x1a>
80003da8:	58 2b       	cp.w	r11,2
80003daa:	c1 00       	breq	80003dca <gpio_enable_module_pin+0x32>
80003dac:	58 3b       	cp.w	r11,3
80003dae:	c1 40       	breq	80003dd6 <gpio_enable_module_pin+0x3e>
80003db0:	5e ff       	retal	1
80003db2:	30 19       	mov	r9,1
80003db4:	f2 0c 09 49 	lsl	r9,r9,r12
80003db8:	91 69       	st.w	r8[0x18],r9
80003dba:	91 a9       	st.w	r8[0x28],r9
80003dbc:	c1 28       	rjmp	80003de0 <gpio_enable_module_pin+0x48>
80003dbe:	30 19       	mov	r9,1
80003dc0:	f2 0c 09 49 	lsl	r9,r9,r12
80003dc4:	91 59       	st.w	r8[0x14],r9
80003dc6:	91 a9       	st.w	r8[0x28],r9
80003dc8:	c0 c8       	rjmp	80003de0 <gpio_enable_module_pin+0x48>
80003dca:	30 19       	mov	r9,1
80003dcc:	f2 0c 09 49 	lsl	r9,r9,r12
80003dd0:	91 69       	st.w	r8[0x18],r9
80003dd2:	91 99       	st.w	r8[0x24],r9
80003dd4:	c0 68       	rjmp	80003de0 <gpio_enable_module_pin+0x48>
80003dd6:	30 19       	mov	r9,1
80003dd8:	f2 0c 09 49 	lsl	r9,r9,r12
80003ddc:	91 59       	st.w	r8[0x14],r9
80003dde:	91 99       	st.w	r8[0x24],r9
80003de0:	30 19       	mov	r9,1
80003de2:	f2 0c 09 4c 	lsl	r12,r9,r12
80003de6:	91 2c       	st.w	r8[0x8],r12
80003de8:	5e fd       	retal	0
80003dea:	d7 03       	nop

80003dec <gpio_enable_module>:
80003dec:	d4 21       	pushm	r4-r7,lr
80003dee:	18 97       	mov	r7,r12
80003df0:	16 94       	mov	r4,r11
80003df2:	58 0b       	cp.w	r11,0
80003df4:	c0 31       	brne	80003dfa <gpio_enable_module+0xe>
80003df6:	30 05       	mov	r5,0
80003df8:	c0 d8       	rjmp	80003e12 <gpio_enable_module+0x26>
80003dfa:	30 06       	mov	r6,0
80003dfc:	0c 95       	mov	r5,r6
80003dfe:	6e 1b       	ld.w	r11,r7[0x4]
80003e00:	6e 0c       	ld.w	r12,r7[0x0]
80003e02:	f0 1f 00 06 	mcall	80003e18 <gpio_enable_module+0x2c>
80003e06:	18 45       	or	r5,r12
80003e08:	2f 87       	sub	r7,-8
80003e0a:	2f f6       	sub	r6,-1
80003e0c:	0c 34       	cp.w	r4,r6
80003e0e:	fe 9b ff f8 	brhi	80003dfe <gpio_enable_module+0x12>
80003e12:	0a 9c       	mov	r12,r5
80003e14:	d8 22       	popm	r4-r7,pc
80003e16:	00 00       	add	r0,r0
80003e18:	80 00       	ld.sh	r0,r0[0x0]
80003e1a:	3d 98       	mov	r8,-39

80003e1c <gpio_enable_pin_pull_up>:
80003e1c:	f8 08 16 05 	lsr	r8,r12,0x5
80003e20:	a9 68       	lsl	r8,0x8
80003e22:	e0 28 f0 00 	sub	r8,61440
80003e26:	30 19       	mov	r9,1
80003e28:	f2 0c 09 4c 	lsl	r12,r9,r12
80003e2c:	f1 4c 00 74 	st.w	r8[116],r12
80003e30:	5e fc       	retal	r12

80003e32 <gpio_configure_pin>:
80003e32:	f8 08 16 05 	lsr	r8,r12,0x5
80003e36:	a9 68       	lsl	r8,0x8
80003e38:	e0 28 f0 00 	sub	r8,61440
80003e3c:	16 99       	mov	r9,r11
80003e3e:	e2 19 00 04 	andl	r9,0x4,COH
80003e42:	c0 70       	breq	80003e50 <gpio_configure_pin+0x1e>
80003e44:	30 19       	mov	r9,1
80003e46:	f2 0c 09 49 	lsl	r9,r9,r12
80003e4a:	f1 49 00 74 	st.w	r8[116],r9
80003e4e:	c0 68       	rjmp	80003e5a <gpio_configure_pin+0x28>
80003e50:	30 19       	mov	r9,1
80003e52:	f2 0c 09 49 	lsl	r9,r9,r12
80003e56:	f1 49 00 78 	st.w	r8[120],r9
80003e5a:	16 99       	mov	r9,r11
80003e5c:	e2 19 00 80 	andl	r9,0x80,COH
80003e60:	c2 40       	breq	80003ea8 <gpio_configure_pin+0x76>
80003e62:	16 99       	mov	r9,r11
80003e64:	e2 19 01 80 	andl	r9,0x180,COH
80003e68:	c0 90       	breq	80003e7a <gpio_configure_pin+0x48>
80003e6a:	30 19       	mov	r9,1
80003e6c:	f2 0c 09 49 	lsl	r9,r9,r12
80003e70:	f1 49 00 a8 	st.w	r8[168],r9
80003e74:	f1 49 00 b8 	st.w	r8[184],r9
80003e78:	c1 88       	rjmp	80003ea8 <gpio_configure_pin+0x76>
80003e7a:	16 99       	mov	r9,r11
80003e7c:	e2 19 02 80 	andl	r9,0x280,COH
80003e80:	c0 90       	breq	80003e92 <gpio_configure_pin+0x60>
80003e82:	30 19       	mov	r9,1
80003e84:	f2 0c 09 49 	lsl	r9,r9,r12
80003e88:	f1 49 00 a4 	st.w	r8[164],r9
80003e8c:	f1 49 00 b8 	st.w	r8[184],r9
80003e90:	c0 c8       	rjmp	80003ea8 <gpio_configure_pin+0x76>
80003e92:	16 99       	mov	r9,r11
80003e94:	e2 19 03 80 	andl	r9,0x380,COH
80003e98:	c0 80       	breq	80003ea8 <gpio_configure_pin+0x76>
80003e9a:	30 19       	mov	r9,1
80003e9c:	f2 0c 09 49 	lsl	r9,r9,r12
80003ea0:	f1 49 00 a8 	st.w	r8[168],r9
80003ea4:	f1 49 00 b4 	st.w	r8[180],r9
80003ea8:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80003eac:	c1 50       	breq	80003ed6 <gpio_configure_pin+0xa4>
80003eae:	e2 1b 00 02 	andl	r11,0x2,COH
80003eb2:	c0 70       	breq	80003ec0 <gpio_configure_pin+0x8e>
80003eb4:	30 19       	mov	r9,1
80003eb6:	f2 0c 09 49 	lsl	r9,r9,r12
80003eba:	f1 49 00 54 	st.w	r8[84],r9
80003ebe:	c0 68       	rjmp	80003eca <gpio_configure_pin+0x98>
80003ec0:	30 19       	mov	r9,1
80003ec2:	f2 0c 09 49 	lsl	r9,r9,r12
80003ec6:	f1 49 00 58 	st.w	r8[88],r9
80003eca:	30 19       	mov	r9,1
80003ecc:	f2 0c 09 49 	lsl	r9,r9,r12
80003ed0:	f1 49 00 44 	st.w	r8[68],r9
80003ed4:	c0 68       	rjmp	80003ee0 <gpio_configure_pin+0xae>
80003ed6:	30 19       	mov	r9,1
80003ed8:	f2 0c 09 49 	lsl	r9,r9,r12
80003edc:	f1 49 00 48 	st.w	r8[72],r9
80003ee0:	30 19       	mov	r9,1
80003ee2:	f2 0c 09 4c 	lsl	r12,r9,r12
80003ee6:	91 1c       	st.w	r8[0x4],r12
80003ee8:	5e fc       	retal	r12

80003eea <gpio_get_pin_value>:
80003eea:	f8 08 16 05 	lsr	r8,r12,0x5
80003eee:	a9 68       	lsl	r8,0x8
80003ef0:	e0 28 f0 00 	sub	r8,61440
80003ef4:	71 88       	ld.w	r8,r8[0x60]
80003ef6:	f0 0c 0a 4c 	lsr	r12,r8,r12
80003efa:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80003efe:	5e fc       	retal	r12

80003f00 <gpio_set_gpio_pin>:
80003f00:	f8 08 16 05 	lsr	r8,r12,0x5
80003f04:	a9 68       	lsl	r8,0x8
80003f06:	e0 28 f0 00 	sub	r8,61440
80003f0a:	30 19       	mov	r9,1
80003f0c:	f2 0c 09 4c 	lsl	r12,r9,r12
80003f10:	f1 4c 00 54 	st.w	r8[84],r12
80003f14:	f1 4c 00 44 	st.w	r8[68],r12
80003f18:	91 1c       	st.w	r8[0x4],r12
80003f1a:	5e fc       	retal	r12

80003f1c <gpio_clr_gpio_pin>:
80003f1c:	f8 08 16 05 	lsr	r8,r12,0x5
80003f20:	a9 68       	lsl	r8,0x8
80003f22:	e0 28 f0 00 	sub	r8,61440
80003f26:	30 19       	mov	r9,1
80003f28:	f2 0c 09 4c 	lsl	r12,r9,r12
80003f2c:	f1 4c 00 58 	st.w	r8[88],r12
80003f30:	f1 4c 00 44 	st.w	r8[68],r12
80003f34:	91 1c       	st.w	r8[0x4],r12
80003f36:	5e fc       	retal	r12

80003f38 <gpio_enable_pin_interrupt>:
80003f38:	f8 08 16 05 	lsr	r8,r12,0x5
80003f3c:	a9 68       	lsl	r8,0x8
80003f3e:	e0 28 f0 00 	sub	r8,61440
80003f42:	30 19       	mov	r9,1
80003f44:	f2 0c 09 4c 	lsl	r12,r9,r12
80003f48:	f1 4c 00 c4 	st.w	r8[196],r12
80003f4c:	12 3b       	cp.w	r11,r9
80003f4e:	c0 a0       	breq	80003f62 <gpio_enable_pin_interrupt+0x2a>
80003f50:	c0 43       	brcs	80003f58 <gpio_enable_pin_interrupt+0x20>
80003f52:	58 2b       	cp.w	r11,2
80003f54:	c1 11       	brne	80003f76 <gpio_enable_pin_interrupt+0x3e>
80003f56:	c0 b8       	rjmp	80003f6c <gpio_enable_pin_interrupt+0x34>
80003f58:	f1 4c 00 a8 	st.w	r8[168],r12
80003f5c:	f1 4c 00 b8 	st.w	r8[184],r12
80003f60:	c0 c8       	rjmp	80003f78 <gpio_enable_pin_interrupt+0x40>
80003f62:	f1 4c 00 a4 	st.w	r8[164],r12
80003f66:	f1 4c 00 b8 	st.w	r8[184],r12
80003f6a:	c0 78       	rjmp	80003f78 <gpio_enable_pin_interrupt+0x40>
80003f6c:	f1 4c 00 a8 	st.w	r8[168],r12
80003f70:	f1 4c 00 b4 	st.w	r8[180],r12
80003f74:	c0 28       	rjmp	80003f78 <gpio_enable_pin_interrupt+0x40>
80003f76:	5e ff       	retal	1
80003f78:	f1 4c 00 94 	st.w	r8[148],r12
80003f7c:	5e fd       	retal	0

80003f7e <gpio_disable_pin_interrupt>:
80003f7e:	f8 08 16 05 	lsr	r8,r12,0x5
80003f82:	a9 68       	lsl	r8,0x8
80003f84:	e0 28 f0 00 	sub	r8,61440
80003f88:	30 19       	mov	r9,1
80003f8a:	f2 0c 09 4c 	lsl	r12,r9,r12
80003f8e:	f1 4c 00 98 	st.w	r8[152],r12
80003f92:	5e fc       	retal	r12

80003f94 <gpio_clear_pin_interrupt_flag>:
80003f94:	f8 08 16 05 	lsr	r8,r12,0x5
80003f98:	a9 68       	lsl	r8,0x8
80003f9a:	e0 28 f0 00 	sub	r8,61440
80003f9e:	30 19       	mov	r9,1
80003fa0:	f2 0c 09 4c 	lsl	r12,r9,r12
80003fa4:	f1 4c 00 d8 	st.w	r8[216],r12
80003fa8:	5e fc       	retal	r12

80003faa <_unhandled_interrupt>:
80003faa:	c0 08       	rjmp	80003faa <_unhandled_interrupt>

80003fac <INTC_register_interrupt>:
80003fac:	f6 08 16 05 	lsr	r8,r11,0x5
80003fb0:	49 99       	lddpc	r9,80004014 <INTC_register_interrupt+0x68>
80003fb2:	f2 08 00 39 	add	r9,r9,r8<<0x3
80003fb6:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80003fba:	72 19       	ld.w	r9,r9[0x4]
80003fbc:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
80003fc0:	58 0a       	cp.w	r10,0
80003fc2:	c0 91       	brne	80003fd4 <INTC_register_interrupt+0x28>
80003fc4:	49 59       	lddpc	r9,80004018 <INTC_register_interrupt+0x6c>
80003fc6:	49 6a       	lddpc	r10,8000401c <INTC_register_interrupt+0x70>
80003fc8:	12 1a       	sub	r10,r9
80003fca:	fe 79 08 00 	mov	r9,-63488
80003fce:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003fd2:	5e fc       	retal	r12
80003fd4:	58 1a       	cp.w	r10,1
80003fd6:	c0 a1       	brne	80003fea <INTC_register_interrupt+0x3e>
80003fd8:	49 09       	lddpc	r9,80004018 <INTC_register_interrupt+0x6c>
80003fda:	49 2a       	lddpc	r10,80004020 <INTC_register_interrupt+0x74>
80003fdc:	12 1a       	sub	r10,r9
80003fde:	bf aa       	sbr	r10,0x1e
80003fe0:	fe 79 08 00 	mov	r9,-63488
80003fe4:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003fe8:	5e fc       	retal	r12
80003fea:	58 2a       	cp.w	r10,2
80003fec:	c0 a1       	brne	80004000 <INTC_register_interrupt+0x54>
80003fee:	48 b9       	lddpc	r9,80004018 <INTC_register_interrupt+0x6c>
80003ff0:	48 da       	lddpc	r10,80004024 <INTC_register_interrupt+0x78>
80003ff2:	12 1a       	sub	r10,r9
80003ff4:	bf ba       	sbr	r10,0x1f
80003ff6:	fe 79 08 00 	mov	r9,-63488
80003ffa:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003ffe:	5e fc       	retal	r12
80004000:	48 69       	lddpc	r9,80004018 <INTC_register_interrupt+0x6c>
80004002:	48 aa       	lddpc	r10,80004028 <INTC_register_interrupt+0x7c>
80004004:	12 1a       	sub	r10,r9
80004006:	ea 1a c0 00 	orh	r10,0xc000
8000400a:	fe 79 08 00 	mov	r9,-63488
8000400e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80004012:	5e fc       	retal	r12
80004014:	80 00       	ld.sh	r0,r0[0x0]
80004016:	f6 d4 80 00 	satsub.w	r4,r11,-32768
8000401a:	f4 00       	*unknown*
8000401c:	80 00       	ld.sh	r0,r0[0x0]
8000401e:	f5 04 80 00 	ld.sh	r4,r10[-32768]
80004022:	f5 12 80 00 	ld.uh	r2,r10[-32768]
80004026:	f5 20 80 00 	ld.sb	r0,r10[-32768]
8000402a:	f5 2e d4 21 	ld.sb	lr,r10[-11231]

8000402c <INTC_init_interrupts>:
8000402c:	d4 21       	pushm	r4-r7,lr
8000402e:	49 18       	lddpc	r8,80004070 <INTC_init_interrupts+0x44>
80004030:	e3 b8 00 01 	mtsr	0x4,r8
80004034:	49 0e       	lddpc	lr,80004074 <INTC_init_interrupts+0x48>
80004036:	30 07       	mov	r7,0
80004038:	0e 94       	mov	r4,r7
8000403a:	49 0c       	lddpc	r12,80004078 <INTC_init_interrupts+0x4c>
8000403c:	49 05       	lddpc	r5,8000407c <INTC_init_interrupts+0x50>
8000403e:	10 15       	sub	r5,r8
80004040:	fe 76 08 00 	mov	r6,-63488
80004044:	c1 08       	rjmp	80004064 <INTC_init_interrupts+0x38>
80004046:	08 98       	mov	r8,r4
80004048:	7c 1b       	ld.w	r11,lr[0x4]
8000404a:	7c 0a       	ld.w	r10,lr[0x0]
8000404c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
80004050:	2f f8       	sub	r8,-1
80004052:	10 3a       	cp.w	r10,r8
80004054:	fe 9b ff fc 	brhi	8000404c <INTC_init_interrupts+0x20>
80004058:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
8000405c:	2f f7       	sub	r7,-1
8000405e:	2f 8e       	sub	lr,-8
80004060:	59 47       	cp.w	r7,20
80004062:	c0 50       	breq	8000406c <INTC_init_interrupts+0x40>
80004064:	7c 08       	ld.w	r8,lr[0x0]
80004066:	58 08       	cp.w	r8,0
80004068:	ce f1       	brne	80004046 <INTC_init_interrupts+0x1a>
8000406a:	cf 7b       	rjmp	80004058 <INTC_init_interrupts+0x2c>
8000406c:	d8 22       	popm	r4-r7,pc
8000406e:	00 00       	add	r0,r0
80004070:	80 00       	ld.sh	r0,r0[0x0]
80004072:	f4 00       	*unknown*
80004074:	80 00       	ld.sh	r0,r0[0x0]
80004076:	f6 d4 80 00 	satsub.w	r4,r11,-32768
8000407a:	3f aa       	mov	r10,-6
8000407c:	80 00       	ld.sh	r0,r0[0x0]
8000407e:	f5 04 fe 78 	ld.sh	r4,r10[-392]

80004080 <_get_interrupt_handler>:
80004080:	fe 78 08 00 	mov	r8,-63488
80004084:	e0 69 00 83 	mov	r9,131
80004088:	f2 0c 01 0c 	sub	r12,r9,r12
8000408c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
80004090:	f2 ca ff c0 	sub	r10,r9,-64
80004094:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80004098:	58 08       	cp.w	r8,0
8000409a:	c0 21       	brne	8000409e <_get_interrupt_handler+0x1e>
8000409c:	5e fd       	retal	0
8000409e:	f0 08 12 00 	clz	r8,r8
800040a2:	48 5a       	lddpc	r10,800040b4 <_get_interrupt_handler+0x34>
800040a4:	f4 09 00 39 	add	r9,r10,r9<<0x3
800040a8:	f0 08 11 1f 	rsub	r8,r8,31
800040ac:	72 19       	ld.w	r9,r9[0x4]
800040ae:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
800040b2:	5e fc       	retal	r12
800040b4:	80 00       	ld.sh	r0,r0[0x0]
800040b6:	f6 d4 fe 68 	satsub.w	r4,r11,-408

800040b8 <udd_set_address>:
}


void udd_set_address(uint8_t address)
{
	udd_disable_address();
800040b8:	fe 68 00 00 	mov	r8,-131072
800040bc:	70 09       	ld.w	r9,r8[0x0]
800040be:	a7 d9       	cbr	r9,0x7
800040c0:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
800040c2:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800040c6:	70 09       	ld.w	r9,r8[0x0]
800040c8:	e0 19 ff 80 	andl	r9,0xff80
800040cc:	f9 e9 10 09 	or	r9,r12,r9
800040d0:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800040d2:	70 09       	ld.w	r9,r8[0x0]
800040d4:	a7 b9       	sbr	r9,0x7
800040d6:	91 09       	st.w	r8[0x0],r9
}
800040d8:	5e fc       	retal	r12

800040da <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
800040da:	fe 68 00 00 	mov	r8,-131072
800040de:	70 0c       	ld.w	r12,r8[0x0]
}
800040e0:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800040e4:	5e fc       	retal	r12

800040e6 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
800040e6:	fe 68 00 20 	mov	r8,-131040
800040ea:	70 0c       	ld.w	r12,r8[0x0]
}
800040ec:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
800040f0:	5e fc       	retal	r12
800040f2:	d7 03       	nop

800040f4 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
800040f4:	e0 68 0c 58 	mov	r8,3160
800040f8:	b0 6b       	st.h	r8[0xc],r11
	udd_g_ctrlreq.payload_size = payload_size;
}
800040fa:	91 2c       	st.w	r8[0x8],r12
800040fc:	5e fc       	retal	r12
800040fe:	d7 03       	nop

80004100 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80004100:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80004104:	a3 6c       	lsl	r12,0x2
80004106:	e0 3c fe 40 	sub	r12,130624
8000410a:	78 0c       	ld.w	r12,r12[0x0]
}
8000410c:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80004110:	5e fc       	retal	r12
80004112:	d7 03       	nop

80004114 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
80004114:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index) {
80004116:	30 29       	mov	r9,2


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80004118:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index) {
8000411c:	f2 08 18 00 	cp.b	r8,r9
80004120:	e0 8b 00 35 	brhi	8000418a <udd_ep_set_halt+0x76>
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
80004124:	f0 0a 15 02 	lsl	r10,r8,0x2
80004128:	fe 6e 01 c0 	mov	lr,-130624
8000412c:	f4 0e 00 09 	add	r9,r10,lr
80004130:	72 09       	ld.w	r9,r9[0x0]
80004132:	ed b9 00 13 	bld	r9,0x13
80004136:	c2 90       	breq	80004188 <udd_ep_set_halt+0x74>

	if (USB_DEVICE_MAX_EP < index) {
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];
80004138:	e0 6b 0a 60 	mov	r11,2656
8000413c:	f0 c9 00 01 	sub	r9,r8,1
80004140:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004144:	f6 09 00 29 	add	r9,r11,r9<<0x2

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
80004148:	72 0b       	ld.w	r11,r9[0x0]
8000414a:	16 9e       	mov	lr,r11
8000414c:	e6 1e 20 00 	andh	lr,0x2000,COH
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
80004150:	c1 c1       	brne	80004188 <udd_ep_set_halt+0x74>
80004152:	16 9e       	mov	lr,r11
80004154:	e6 1e 80 00 	andh	lr,0x8000,COH
		return false; // Job on going, stall impossible
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
80004158:	c1 91       	brne	8000418a <udd_ep_set_halt+0x76>
8000415a:	fc 0c 18 00 	cp.b	r12,lr
			udd_enable_endpoint_interrupt(index);
			return true;
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
8000415e:	c1 75       	brlt	8000418c <udd_ep_set_halt+0x78>
80004160:	fe 6b 01 00 	mov	r11,-130816
80004164:	f4 0b 00 09 	add	r9,r10,r11
80004168:	72 08       	ld.w	r8,r9[0x0]
8000416a:	a9 d8       	cbr	r8,0x9
	udd_ack_stall(index);
8000416c:	93 08       	st.w	r9[0x0],r8
8000416e:	fe 69 01 60 	mov	r9,-130720
80004172:	f4 09 00 08 	add	r8,r10,r9
80004176:	34 09       	mov	r9,64
	udd_enable_stall_handshake(index);
80004178:	91 09       	st.w	r8[0x0],r9
8000417a:	e0 3a fe 10 	sub	r10,130576
8000417e:	e8 68 00 00 	mov	r8,524288
80004182:	30 1c       	mov	r12,1
	return true;
80004184:	95 08       	st.w	r10[0x0],r8
80004186:	d8 02       	popm	pc
80004188:	da 0a       	popm	pc,r12=1

	if (ptr_job->busy == true) {
		return false; // Job on going, stall impossible
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
8000418a:	d8 0a       	popm	pc,r12=0
8000418c:	fe 6e 01 30 	mov	lr,-130768
80004190:	f4 0e 00 0c 	add	r12,r10,lr
80004194:	78 0c       	ld.w	r12,r12[0x0]
80004196:	f9 dc c1 82 	bfextu	r12,r12,0xc,0x2
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
8000419a:	ce 30       	breq	80004160 <udd_ep_set_halt+0x4c>
8000419c:	30 1c       	mov	r12,1
8000419e:	f7 dc d3 a1 	bfins	r11,r12,0x1d,0x1
			udd_enable_bank_interrupt(index);
800041a2:	93 0b       	st.w	r9[0x0],r11
800041a4:	e0 3a fe 10 	sub	r10,130576
800041a8:	e0 69 10 00 	mov	r9,4096
			udd_enable_endpoint_interrupt(index);
800041ac:	95 09       	st.w	r10[0x0],r9
800041ae:	f2 08 09 48 	lsl	r8,r9,r8
800041b2:	fe 6a 00 00 	mov	r10,-131072
			return true;
800041b6:	95 68       	st.w	r10[0x18],r8
800041b8:	d8 02       	popm	pc
800041ba:	d7 03       	nop

800041bc <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
800041bc:	d4 01       	pushm	lr
	bool b_stall_cleared = false;
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
800041be:	30 28       	mov	r8,2
bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	bool b_stall_cleared = false;
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
800041c0:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
800041c4:	f0 0c 18 00 	cp.b	r12,r8
800041c8:	e0 8b 00 46 	brhi	80004254 <udd_ep_clear_halt+0x98>
		return false;
	ptr_job = &udd_ep_job[ep - 1];
800041cc:	e0 68 0a 60 	mov	r8,2656
800041d0:	f8 ca 00 01 	sub	r10,r12,1
800041d4:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
800041d8:	f0 0a 00 2a 	add	r10,r8,r10<<0x2

	if (ptr_job->stall_requested) {
800041dc:	74 08       	ld.w	r8,r10[0x0]
800041de:	10 99       	mov	r9,r8
800041e0:	e6 19 20 00 	andh	r9,0x2000,COH
800041e4:	c2 41       	brne	8000422c <udd_ep_clear_halt+0x70>
800041e6:	f8 08 15 02 	lsl	r8,r12,0x2
		ptr_job->stall_requested = false;
		udd_disable_bank_interrupt(ep);
		udd_disable_endpoint_interrupt(ep);
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
800041ea:	12 9c       	mov	r12,r9
800041ec:	fe 69 01 c0 	mov	r9,-130624
800041f0:	f0 09 00 0b 	add	r11,r8,r9
800041f4:	76 09       	ld.w	r9,r11[0x0]
800041f6:	ed b9 00 13 	bld	r9,0x13
		if (Is_udd_stall(ep)) {
800041fa:	c2 e1       	brne	80004256 <udd_ep_clear_halt+0x9a>
800041fc:	fe 6e 01 30 	mov	lr,-130768
80004200:	f0 0e 00 09 	add	r9,r8,lr
80004204:	72 09       	ld.w	r9,r9[0x0]
80004206:	ed b9 00 06 	bld	r9,0x6
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
8000420a:	c2 90       	breq	8000425c <udd_ep_clear_halt+0xa0>
8000420c:	fe 6b 02 20 	mov	r11,-130528
80004210:	f0 0b 00 09 	add	r9,r8,r11
80004214:	e8 6b 00 00 	mov	r11,524288
		udd_enable_endpoint_bank_autoswitch(ep);
80004218:	93 0b       	st.w	r9[0x0],r11
8000421a:	e0 38 ff 00 	sub	r8,130816
8000421e:	70 09       	ld.w	r9,r8[0x0]
80004220:	a9 b9       	sbr	r9,0x9
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
80004222:	91 09       	st.w	r8[0x0],r9
80004224:	74 08       	ld.w	r8,r10[0x0]
80004226:	58 08       	cp.w	r8,0
			ptr_job->busy = false;
			ptr_job->call_nohalt();
80004228:	c2 85       	brlt	80004278 <udd_ep_clear_halt+0xbc>
	ptr_job = &udd_ep_job[ep - 1];

	if (ptr_job->stall_requested) {
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
8000422a:	da 0a       	popm	pc,r12=1
8000422c:	30 09       	mov	r9,0
8000422e:	f1 d9 d3 a1 	bfins	r8,r9,0x1d,0x1
		udd_disable_bank_interrupt(ep);
80004232:	95 08       	st.w	r10[0x0],r8
80004234:	e0 69 10 00 	mov	r9,4096
80004238:	f8 08 15 02 	lsl	r8,r12,0x2
8000423c:	fe 6e 02 20 	mov	lr,-130528
		udd_disable_endpoint_interrupt(ep);
80004240:	f2 0c 09 4c 	lsl	r12,r9,r12

	if (ptr_job->stall_requested) {
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
		udd_disable_bank_interrupt(ep);
80004244:	f0 0e 00 0b 	add	r11,r8,lr
		udd_disable_endpoint_interrupt(ep);
80004248:	97 09       	st.w	r11[0x0],r9
8000424a:	fe 6b 00 00 	mov	r11,-131072
8000424e:	97 5c       	st.w	r11[0x14],r12
80004250:	30 1c       	mov	r12,1
{
	bool b_stall_cleared = false;
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
80004252:	cc db       	rjmp	800041ec <udd_ep_clear_halt+0x30>
		// Disable stall
		udd_disable_stall_handshake(ep);
		udd_enable_endpoint_bank_autoswitch(ep);
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
80004254:	d8 0a       	popm	pc,r12=0
80004256:	58 0c       	cp.w	r12,0
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
80004258:	ce 61       	brne	80004224 <udd_ep_clear_halt+0x68>
		udd_disable_endpoint_interrupt(ep);
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
		if (Is_udd_stall(ep)) {
			udd_ack_stall(ep);
8000425a:	da 0a       	popm	pc,r12=1
8000425c:	fe 6b 01 60 	mov	r11,-130720
80004260:	f0 0b 00 09 	add	r9,r8,r11
80004264:	34 0b       	mov	r11,64
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
80004266:	93 0b       	st.w	r9[0x0],r11
80004268:	fe 6e 01 f0 	mov	lr,-130576
8000426c:	e4 6b 00 00 	mov	r11,262144
80004270:	f0 0e 00 09 	add	r9,r8,lr
80004274:	93 0b       	st.w	r9[0x0],r11
	}
	if (b_stall_cleared) {
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
80004276:	cc bb       	rjmp	8000420c <udd_ep_clear_halt+0x50>
80004278:	10 99       	mov	r9,r8
8000427a:	30 0b       	mov	r11,0
8000427c:	f3 db d3 e1 	bfins	r9,r11,0x1f,0x1
80004280:	74 48       	ld.w	r8,r10[0x10]
			ptr_job->call_nohalt();
80004282:	95 09       	st.w	r10[0x0],r9
80004284:	5d 18       	icall	r8
80004286:	da 0a       	popm	pc,r12=1

80004288 <udd_sleep_mode>:
80004288:	58 0c       	cp.w	r12,0
8000428a:	c0 e1       	brne	800042a6 <udd_sleep_mode+0x1e>
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
8000428c:	e0 68 0a 88 	mov	r8,2696
80004290:	11 8a       	ld.ub	r10,r8[0x0]
80004292:	f8 0a 18 00 	cp.b	r10,r12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
80004296:	c2 00       	breq	800042d6 <udd_sleep_mode+0x4e>
80004298:	e0 6a 0c 84 	mov	r10,3204
8000429c:	15 9b       	ld.ub	r11,r10[0x1]
8000429e:	f8 0b 18 00 	cp.b	r11,r12
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
800042a2:	c1 d1       	brne	800042dc <udd_sleep_mode+0x54>
800042a4:	c0 08       	rjmp	800042a4 <udd_sleep_mode+0x1c>
800042a6:	e0 68 0a 88 	mov	r8,2696
800042aa:	30 09       	mov	r9,0
800042ac:	11 8a       	ld.ub	r10,r8[0x0]
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
800042ae:	f2 0a 18 00 	cp.b	r10,r9
800042b2:	c1 21       	brne	800042d6 <udd_sleep_mode+0x4e>
800042b4:	e0 6a 0c 84 	mov	r10,3204
800042b8:	3f f9       	mov	r9,-1

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800042ba:	15 9b       	ld.ub	r11,r10[0x1]
800042bc:	f2 0b 18 00 	cp.b	r11,r9
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
800042c0:	c0 d0       	breq	800042da <udd_sleep_mode+0x52>
800042c2:	e1 b9 00 00 	mfsr	r9,0x0
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800042c6:	d3 03       	ssrf	0x10
800042c8:	15 9b       	ld.ub	r11,r10[0x1]
800042ca:	2f fb       	sub	r11,-1
      cpu_irq_enable();
800042cc:	b4 9b       	st.b	r10[0x1],r11
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
800042ce:	ed b9 00 10 	bld	r9,0x10
}
800042d2:	c0 20       	breq	800042d6 <udd_sleep_mode+0x4e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800042d4:	d5 03       	csrf	0x10
800042d6:	b0 8c       	st.b	r8[0x0],r12
	cpu_irq_disable();
800042d8:	5e fc       	retal	r12
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
800042da:	c0 08       	rjmp	800042da <udd_sleep_mode+0x52>
800042dc:	e1 b9 00 00 	mfsr	r9,0x0
800042e0:	d3 03       	ssrf	0x10
800042e2:	15 9b       	ld.ub	r11,r10[0x1]
800042e4:	20 1b       	sub	r11,1
800042e6:	cf 3b       	rjmp	800042cc <udd_sleep_mode+0x44>

800042e8 <udd_enable>:
	return true;
}


void udd_enable(void)
{
800042e8:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800042ec:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
800042f0:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

#ifdef UHD_ENABLE
	//* DUAL ROLE INITIALIZATION
	if (otg_dual_enable()) {
800042f2:	e0 a0 0e cd 	rcall	8000608c <otg_dual_enable>
800042f6:	c5 11       	brne	80004398 <udd_enable+0xb0>
	pm_asyn_wake_up_enable(AVR32_PM_AWEN_USB_WAKEN_MASK);
#endif

# if (defined USB_ID) && (defined UHD_ENABLE)
	// Check that the device mode is selected by ID pin
	if (!Is_otg_id_device()) {
800042f8:	fe 6a 08 04 	mov	r10,-129020
800042fc:	74 08       	ld.w	r8,r10[0x0]
800042fe:	ed b8 00 0a 	bld	r8,0xa
80004302:	c4 b1       	brne	80004398 <udd_enable+0xb0>
	otg_disable_id_pin();
	otg_force_device_mode();
# endif

	// Enable USB hardware
	otg_enable_pad();
80004304:	fe 68 08 00 	mov	r8,-129024
80004308:	70 09       	ld.w	r9,r8[0x0]
8000430a:	ad a9       	sbr	r9,0xc
8000430c:	91 09       	st.w	r8[0x0],r9
	otg_enable();
8000430e:	70 09       	ld.w	r9,r8[0x0]
80004310:	af b9       	sbr	r9,0xf
80004312:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80004314:	70 09       	ld.w	r9,r8[0x0]
80004316:	af c9       	cbr	r9,0xe
80004318:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
8000431a:	70 08       	ld.w	r8,r8[0x0]

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
8000431c:	fe 68 00 00 	mov	r8,-131072
80004320:	70 09       	ld.w	r9,r8[0x0]
80004322:	ad c9       	cbr	r9,0xc
80004324:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80004326:	70 09       	ld.w	r9,r8[0x0]
80004328:	e8 19 0c 00 	orl	r9,0xc00
8000432c:	91 09       	st.w	r8[0x0],r9

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
8000432e:	e0 68 0a 60 	mov	r8,2656
80004332:	70 09       	ld.w	r9,r8[0x0]
80004334:	f3 dc d3 e1 	bfins	r9,r12,0x1f,0x1
		udd_ep_job[i].stall_requested = false;
80004338:	f3 dc d3 a1 	bfins	r9,r12,0x1d,0x1

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
8000433c:	91 09       	st.w	r8[0x0],r9
8000433e:	70 59       	ld.w	r9,r8[0x14]
80004340:	f3 dc d3 e1 	bfins	r9,r12,0x1f,0x1
		udd_ep_job[i].stall_requested = false;
80004344:	f3 dc d3 a1 	bfins	r9,r12,0x1d,0x1
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
#  endif
#endif
	otg_ack_vbus_transition();
80004348:	91 59       	st.w	r8[0x14],r9
8000434a:	fe 68 08 08 	mov	r8,-129016
8000434e:	30 29       	mov	r9,2
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80004350:	91 09       	st.w	r8[0x0],r9
80004352:	74 08       	ld.w	r8,r10[0x0]
80004354:	ed b8 00 0b 	bld	r8,0xb
		otg_raise_vbus_transition();
80004358:	c0 41       	brne	80004360 <udd_enable+0x78>
8000435a:	fe 68 08 0c 	mov	r8,-129012
	}
	otg_enable_vbus_interrupt();
8000435e:	91 09       	st.w	r8[0x0],r9
80004360:	fe 68 08 00 	mov	r8,-129024
80004364:	70 09       	ld.w	r9,r8[0x0]
80004366:	a1 b9       	sbr	r9,0x1
	otg_freeze_clock();
80004368:	91 09       	st.w	r8[0x0],r9
8000436a:	70 09       	ld.w	r9,r8[0x0]
8000436c:	af a9       	sbr	r9,0xe

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
8000436e:	91 09       	st.w	r8[0x0],r9
80004370:	30 09       	mov	r9,0
80004372:	e0 68 0a 88 	mov	r8,2696
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
80004376:	b0 89       	st.b	r8[0x0],r9
80004378:	e0 69 0c 84 	mov	r9,3204
8000437c:	3f f8       	mov	r8,-1
8000437e:	13 ba       	ld.ub	r10,r9[0x3]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004380:	f0 0a 18 00 	cp.b	r10,r8
	cpu_irq_disable();
80004384:	c1 00       	breq	800043a4 <udd_enable+0xbc>
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80004386:	e1 b8 00 00 	mfsr	r8,0x0
8000438a:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000438c:	13 ba       	ld.ub	r10,r9[0x3]
8000438e:	2f fa       	sub	r10,-1
80004390:	b2 ba       	st.b	r9[0x3],r10
80004392:	ed b8 00 10 	bld	r8,0x10
80004396:	c0 81       	brne	800043a6 <udd_enable+0xbe>
      cpu_irq_enable();
80004398:	e6 17 00 01 	andh	r7,0x1,COH
   }

	barrier();
8000439c:	c0 21       	brne	800043a0 <udd_enable+0xb8>
8000439e:	d5 03       	csrf	0x10
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
800043a0:	e3 cd 80 80 	ldm	sp++,r7,pc
   }

	barrier();
800043a4:	c0 08       	rjmp	800043a4 <udd_enable+0xbc>
800043a6:	d5 03       	csrf	0x10
800043a8:	cf 8b       	rjmp	80004398 <udd_enable+0xb0>
800043aa:	d7 03       	nop

800043ac <udd_ep_abort>:
800043ac:	eb cd 40 e0 	pushm	r5-r7,lr
800043b0:	fc 18 02 00 	movh	r8,0x200
}


void udd_ep_abort(udd_ep_id_t ep)
{
	uint8_t index = ep & USB_EP_ADDR_MASK;
800043b4:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
800043b8:	f8 c9 00 01 	sub	r9,r12,1
800043bc:	f0 09 09 48 	lsl	r8,r8,r9
800043c0:	fe 6a 00 00 	mov	r10,-131072
800043c4:	95 58       	st.w	r10[0x14],r8
	udd_endpoint_dma_set_control(index, 0);
800043c6:	f8 08 15 04 	lsl	r8,r12,0x4
800043ca:	e0 38 fd 00 	sub	r8,130304
800043ce:	30 0b       	mov	r11,0
800043d0:	91 2b       	st.w	r8[0x8],r11
	// Kill banks
	udd_disable_endpoint_interrupt(index);
800043d2:	e0 68 10 00 	mov	r8,4096
800043d6:	f0 0c 09 48 	lsl	r8,r8,r12
800043da:	95 58       	st.w	r10[0x14],r8
800043dc:	fe 68 01 30 	mov	r8,-130768
800043e0:	f8 05 15 02 	lsl	r5,r12,0x2
800043e4:	ea 08 00 0e 	add	lr,r5,r8
	while (udd_nb_busy_bank(index)) {
		udd_kill_last_in_bank(index);
800043e8:	fe 68 01 f0 	mov	r8,-130576
void udd_ep_abort(udd_ep_id_t ep)
{
	uint8_t index = ep & USB_EP_ADDR_MASK;

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
800043ec:	18 9a       	mov	r10,r12
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
		udd_kill_last_in_bank(index);
800043ee:	ea 08 00 06 	add	r6,r5,r8
800043f2:	e0 67 20 00 	mov	r7,8192
800043f6:	fe 68 01 c0 	mov	r8,-130624
800043fa:	ea 08 00 0b 	add	r11,r5,r8
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
800043fe:	c0 68       	rjmp	8000440a <udd_ep_abort+0x5e>
		udd_kill_last_in_bank(index);
80004400:	8d 07       	st.w	r6[0x0],r7
		while(Is_udd_killing_last_in_bank(index));
80004402:	76 08       	ld.w	r8,r11[0x0]
80004404:	ed b8 00 0d 	bld	r8,0xd
80004408:	cf d0       	breq	80004402 <udd_ep_abort+0x56>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
8000440a:	7c 08       	ld.w	r8,lr[0x0]
8000440c:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80004410:	cf 81       	brne	80004400 <udd_ep_abort+0x54>
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
80004412:	e0 6b 0a 60 	mov	r11,2656
80004416:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000441a:	f6 09 00 29 	add	r9,r11,r9<<0x2
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
8000441e:	72 0b       	ld.w	r11,r9[0x0]
80004420:	58 0b       	cp.w	r11,0
		return; // No on-going job
	}
	ptr_job->busy = false;
80004422:	c1 04       	brge	80004442 <udd_ep_abort+0x96>
80004424:	f7 d8 d3 e1 	bfins	r11,r8,0x1f,0x1
	if (NULL == ptr_job->call_trans) {
80004428:	93 0b       	st.w	r9[0x0],r11
8000442a:	72 48       	ld.w	r8,r9[0x10]
8000442c:	58 08       	cp.w	r8,0
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
8000442e:	c0 a0       	breq	80004442 <udd_ep_abort+0x96>
80004430:	e0 35 ff 00 	sub	r5,130816
80004434:	6a 0b       	ld.w	r11,r5[0x0]
80004436:	ed bb 00 08 	bld	r11,0x8
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
8000443a:	c0 60       	breq	80004446 <udd_ep_abort+0x9a>
8000443c:	72 2b       	ld.w	r11,r9[0x8]
8000443e:	30 1c       	mov	r12,1
80004440:	5d 18       	icall	r8
80004442:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
80004446:	18 9a       	mov	r10,r12
80004448:	a7 ba       	sbr	r10,0x7
8000444a:	cf 9b       	rjmp	8000443c <udd_ep_abort+0x90>

8000444c <udd_ctrl_in_sent>:
8000444c:	eb cd 40 f8 	pushm	r3-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004450:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80004454:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
80004456:	30 1a       	mov	r10,1
80004458:	fe 69 02 20 	mov	r9,-130528
8000445c:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000445e:	ed b8 00 10 	bld	r8,0x10
80004462:	c6 c1       	brne	8000453a <udd_ctrl_in_sent+0xee>
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80004464:	e0 65 0a 90 	mov	r5,2704
80004468:	6a 08       	ld.w	r8,r5[0x0]
8000446a:	58 38       	cp.w	r8,3
		udd_ctrl_init();
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
8000446c:	c6 90       	breq	8000453e <udd_ctrl_in_sent+0xf2>
8000446e:	e0 64 0a 8a 	mov	r4,2698
80004472:	e0 66 0c 58 	mov	r6,3160
80004476:	88 09       	ld.sh	r9,r4[0x0]
	if (0 == nb_remain) {
80004478:	8c 67       	ld.sh	r7,r6[0xc]
8000447a:	12 17       	sub	r7,r9
8000447c:	5c 87       	casts.h	r7
			udd_ctrl_payload_nb_trans = 0;
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
8000447e:	c3 30       	breq	800044e4 <udd_ctrl_in_sent+0x98>
80004480:	5c 79       	castu.h	r9
80004482:	e0 63 0a 8c 	mov	r3,2700
80004486:	30 78       	mov	r8,7
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
80004488:	f0 07 19 00 	cp.h	r7,r8
8000448c:	e0 88 00 7b 	brls	80004582 <udd_ctrl_in_sent+0x136>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004490:	30 08       	mov	r8,0
80004492:	30 87       	mov	r7,8
	cpu_irq_disable();
80004494:	a6 88       	st.b	r3[0x0],r8
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
80004496:	6c 2a       	ld.w	r10,r6[0x8]
80004498:	e1 bb 00 00 	mfsr	r11,0x0
8000449c:	d3 03       	ssrf	0x10
8000449e:	fe 68 01 30 	mov	r8,-130768
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800044a2:	70 08       	ld.w	r8,r8[0x0]
800044a4:	ed b8 00 01 	bld	r8,0x1
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800044a8:	c6 60       	breq	80004574 <udd_ctrl_in_sent+0x128>
800044aa:	58 07       	cp.w	r7,0
800044ac:	c0 c0       	breq	800044c4 <udd_ctrl_in_sent+0x78>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
800044ae:	f4 09 00 09 	add	r9,r10,r9
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800044b2:	fc 18 e0 00 	movh	r8,0xe000
800044b6:	13 3a       	ld.ub	r10,r9++
800044b8:	10 ca       	st.b	r8++,r10
800044ba:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800044be:	ee 0a 19 00 	cp.h	r10,r7
800044c2:	cf a3       	brcs	800044b6 <udd_ctrl_in_sent+0x6a>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800044c4:	30 18       	mov	r8,1
800044c6:	fe 69 01 60 	mov	r9,-130720
800044ca:	93 08       	st.w	r9[0x0],r8

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
	udd_enable_in_send_interrupt(0);
800044cc:	88 09       	ld.sh	r9,r4[0x0]
800044ce:	f2 07 00 07 	add	r7,r9,r7
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800044d2:	a8 07       	st.h	r4[0x0],r7
800044d4:	fe 69 01 f0 	mov	r9,-130576
      cpu_irq_enable();
   }

	barrier();
800044d8:	93 08       	st.w	r9[0x0],r8
800044da:	ed bb 00 10 	bld	r11,0x10

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
	if (0 == nb_remain) {
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
800044de:	c2 b1       	brne	80004534 <udd_ctrl_in_sent+0xe8>
800044e0:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800044e4:	e0 68 0a 5c 	mov	r8,2652
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
800044e8:	90 0a       	ld.sh	r10,r8[0x0]
800044ea:	f4 09 00 09 	add	r9,r10,r9
800044ee:	b0 09       	st.h	r8[0x0],r9
800044f0:	8c 38       	ld.sh	r8,r6[0x6]
800044f2:	f2 08 19 00 	cp.h	r8,r9
800044f6:	c1 00       	breq	80004516 <udd_ctrl_in_sent+0xca>
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
800044f8:	e0 63 0a 8c 	mov	r3,2700
800044fc:	07 89       	ld.ub	r9,r3[0x0]
800044fe:	ee 09 18 00 	cp.b	r9,r7
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
80004502:	c0 a1       	brne	80004516 <udd_ctrl_in_sent+0xca>
			nb_remain = udd_g_ctrlreq.payload_size;
80004504:	6c 5c       	ld.w	r12,r6[0x14]
80004506:	58 0c       	cp.w	r12,0
80004508:	c3 d0       	breq	80004582 <udd_ctrl_in_sent+0x136>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000450a:	5d 1c       	icall	r12
8000450c:	c3 b0       	breq	80004582 <udd_ctrl_in_sent+0x136>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000450e:	a8 07       	st.h	r4[0x0],r7
80004510:	30 09       	mov	r9,0
	cpu_irq_disable();
80004512:	8c 67       	ld.sh	r7,r6[0xc]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80004514:	cb 9b       	rjmp	80004486 <udd_ctrl_in_sent+0x3a>
80004516:	30 48       	mov	r8,4
80004518:	8b 08       	st.w	r5[0x0],r8
8000451a:	e1 b8 00 00 	mfsr	r8,0x0
	udd_enable_nak_in_interrupt(0);
8000451e:	d3 03       	ssrf	0x10
80004520:	31 09       	mov	r9,16
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004522:	fe 6a 01 60 	mov	r10,-130720
80004526:	95 09       	st.w	r10[0x0],r9
      cpu_irq_enable();
80004528:	fe 6a 01 f0 	mov	r10,-130576
   }

	barrier();
8000452c:	95 09       	st.w	r10[0x0],r9
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
8000452e:	ed b8 00 10 	bld	r8,0x10


static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80004532:	cd 70       	breq	800044e0 <udd_ctrl_in_sent+0x94>
80004534:	d5 03       	csrf	0x10
80004536:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
		udd_g_ctrlreq.callback();
8000453a:	d5 03       	csrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000453c:	c9 4b       	rjmp	80004464 <udd_ctrl_in_sent+0x18>
8000453e:	e0 66 0c 58 	mov	r6,3160
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80004542:	6c 48       	ld.w	r8,r6[0x10]
80004544:	58 08       	cp.w	r8,0
80004546:	c0 20       	breq	8000454a <udd_ctrl_in_sent+0xfe>
80004548:	5d 18       	icall	r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000454a:	e1 b8 00 00 	mfsr	r8,0x0
8000454e:	d3 03       	ssrf	0x10
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80004550:	30 1a       	mov	r10,1
80004552:	fe 69 02 20 	mov	r9,-130528
80004556:	93 0a       	st.w	r9[0x0],r10

	udd_g_ctrlreq.callback = NULL;
80004558:	ed b8 00 10 	bld	r8,0x10
	udd_g_ctrlreq.over_under_run = NULL;
	udd_g_ctrlreq.payload_size = 0;
8000455c:	c1 71       	brne	8000458a <udd_ctrl_in_sent+0x13e>
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);

	udd_g_ctrlreq.callback = NULL;
8000455e:	fe 68 01 60 	mov	r8,-130720
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
80004562:	30 29       	mov	r9,2
80004564:	91 09       	st.w	r8[0x0],r9
80004566:	30 08       	mov	r8,0
80004568:	8b 08       	st.w	r5[0x0],r8
8000456a:	ac 68       	st.h	r6[0xc],r8
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000456c:	8d 48       	st.w	r6[0x10],r8
8000456e:	8d 58       	st.w	r6[0x14],r8
		return; // Exit of IN DATA phase
80004570:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
80004574:	ed bb 00 10 	bld	r11,0x10
80004578:	c0 b1       	brne	8000458e <udd_ctrl_in_sent+0x142>
8000457a:	30 48       	mov	r8,4
      cpu_irq_enable();
8000457c:	8b 08       	st.w	r5[0x0],r8
8000457e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80004582:	30 18       	mov	r8,1
80004584:	88 89       	ld.uh	r9,r4[0x0]
		return; // Exit of IN DATA phase
80004586:	a6 88       	st.b	r3[0x0],r8
80004588:	c8 7b       	rjmp	80004496 <udd_ctrl_in_sent+0x4a>
8000458a:	d5 03       	csrf	0x10
8000458c:	ce 9b       	rjmp	8000455e <udd_ctrl_in_sent+0x112>
8000458e:	d5 03       	csrf	0x10
80004590:	30 48       	mov	r8,4
80004592:	8b 08       	st.w	r5[0x0],r8
80004594:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

80004598 <udd_ep_free>:
80004598:	eb cd 40 c0 	pushm	r6-r7,lr
8000459c:	30 28       	mov	r8,2
8000459e:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index) {
800045a2:	f0 0c 18 00 	cp.b	r12,r8
800045a6:	e0 88 00 04 	brls	800045ae <udd_ep_free+0x16>
800045aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return;
	}
	udd_disable_endpoint(index);
800045ae:	fe 68 00 00 	mov	r8,-131072
800045b2:	30 19       	mov	r9,1
800045b4:	70 7a       	ld.w	r10,r8[0x1c]
800045b6:	f2 0c 09 49 	lsl	r9,r9,r12
800045ba:	5c d9       	com	r9
800045bc:	14 69       	and	r9,r10
800045be:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
800045c0:	f8 0a 15 02 	lsl	r10,r12,0x2
800045c4:	e0 3a ff 00 	sub	r10,130816
800045c8:	74 08       	ld.w	r8,r10[0x0]
800045ca:	a1 d8       	cbr	r8,0x1
800045cc:	95 08       	st.w	r10[0x0],r8
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
800045ce:	e0 66 0a 60 	mov	r6,2656
800045d2:	f8 c7 00 01 	sub	r7,r12,1
800045d6:	ee 07 00 29 	add	r9,r7,r7<<0x2
800045da:	ec 09 00 29 	add	r9,r6,r9<<0x2
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
800045de:	72 08       	ld.w	r8,r9[0x0]
800045e0:	58 08       	cp.w	r8,0
		return; // No on-going job
	}
	ptr_job->busy = false;
800045e2:	c1 04       	brge	80004602 <udd_ep_free+0x6a>
800045e4:	30 0b       	mov	r11,0
800045e6:	f1 db d3 e1 	bfins	r8,r11,0x1f,0x1
	if (NULL == ptr_job->call_trans) {
800045ea:	93 08       	st.w	r9[0x0],r8
800045ec:	72 48       	ld.w	r8,r9[0x10]
800045ee:	58 08       	cp.w	r8,0
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
800045f0:	c0 90       	breq	80004602 <udd_ep_free+0x6a>
800045f2:	74 0a       	ld.w	r10,r10[0x0]
800045f4:	ed ba 00 08 	bld	r10,0x8
800045f8:	c1 00       	breq	80004618 <udd_ep_free+0x80>
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
800045fa:	18 9a       	mov	r10,r12
800045fc:	72 2b       	ld.w	r11,r9[0x8]
800045fe:	30 1c       	mov	r12,1
		return;
	}
	udd_disable_endpoint(index);
	udd_unallocate_memory(index);
	udd_ep_abort_job(ep);
	udd_ep_job[index - 1].stall_requested = false;
80004600:	5d 18       	icall	r8
80004602:	ee 07 00 27 	add	r7,r7,r7<<0x2
80004606:	30 09       	mov	r9,0
80004608:	ec 07 00 26 	add	r6,r6,r7<<0x2
8000460c:	6c 08       	ld.w	r8,r6[0x0]
8000460e:	f1 d9 d3 a1 	bfins	r8,r9,0x1d,0x1
80004612:	8d 08       	st.w	r6[0x0],r8
80004614:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
80004618:	18 9a       	mov	r10,r12
8000461a:	a7 ba       	sbr	r10,0x7
8000461c:	cf 0b       	rjmp	800045fc <udd_ep_free+0x64>
8000461e:	d7 03       	nop

80004620 <udd_ep_trans_done>:
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

static void udd_ep_trans_done(udd_ep_id_t ep)
{
80004620:	eb cd 40 f8 	pushm	r3-r7,lr
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
80004624:	f8 c8 00 01 	sub	r8,r12,1
80004628:	f0 08 00 2a 	add	r10,r8,r8<<0x2
8000462c:	e0 69 0a 60 	mov	r9,2656
80004630:	f2 0a 00 29 	add	r9,r9,r10<<0x2

	if (!ptr_job->busy) {
80004634:	72 0a       	ld.w	r10,r9[0x0]
80004636:	58 0a       	cp.w	r10,0
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80004638:	c6 74       	brge	80004706 <udd_ep_trans_done+0xe6>
8000463a:	72 3b       	ld.w	r11,r9[0xc]
8000463c:	72 27       	ld.w	r7,r9[0x8]
8000463e:	0e 3b       	cp.w	r11,r7
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80004640:	c7 00       	breq	80004720 <udd_ep_trans_done+0x100>

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80004642:	16 17       	sub	r7,r11
80004644:	e0 57 00 00 	cp.w	r7,65536
80004648:	e0 88 00 69 	brls	8000471a <udd_ep_trans_done+0xfa>
8000464c:	e0 77 00 00 	mov	r7,65536
		} else {
			udd_dma_ctrl = (next_trans <<
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
80004650:	30 04       	mov	r4,0
80004652:	fe 66 01 00 	mov	r6,-130816
80004656:	f8 05 15 02 	lsl	r5,r12,0x2
8000465a:	ea 06 00 0e 	add	lr,r5,r6
8000465e:	7c 06       	ld.w	r6,lr[0x0]
80004660:	ed b6 00 08 	bld	r6,0x8
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
80004664:	c5 31       	brne	8000470a <udd_ep_trans_done+0xea>
80004666:	7c 06       	ld.w	r6,lr[0x0]
80004668:	30 83       	mov	r3,8
8000466a:	ed d6 c0 83 	bfextu	r6,r6,0x4,0x3
8000466e:	e6 06 09 46 	lsl	r6,r3,r6
80004672:	20 16       	sub	r6,1
80004674:	ef e6 00 06 	and	r6,r7,r6
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80004678:	c7 b1       	brne	8000476e <udd_ep_trans_done+0x14e>
8000467a:	72 1a       	ld.w	r10,r9[0x4]
8000467c:	f4 0b 00 0b 	add	r11,r10,r11
80004680:	f8 0a 15 04 	lsl	r10,r12,0x4
80004684:	e0 3a fd 00 	sub	r10,130304

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004688:	95 1b       	st.w	r10[0x4],r11
8000468a:	e1 b6 00 00 	mfsr	r6,0x0
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if ( !(udd_endpoint_dma_get_status(ep)
8000468e:	d3 03       	ssrf	0x10
80004690:	74 3b       	ld.w	r11,r10[0xc]
80004692:	ed bb 00 04 	bld	r11,0x4
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80004696:	c1 40       	breq	800046be <udd_ep_trans_done+0x9e>
80004698:	e8 14 00 21 	orl	r4,0x21
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if ( !(udd_endpoint_dma_get_status(ep)
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
			ptr_job->nb_trans += next_trans;
8000469c:	95 24       	st.w	r10[0x8],r4
8000469e:	72 3a       	ld.w	r10,r9[0xc]
800046a0:	f4 07 00 07 	add	r7,r10,r7
			udd_enable_endpoint_dma_interrupt(ep);
800046a4:	93 37       	st.w	r9[0xc],r7
800046a6:	fc 19 02 00 	movh	r9,0x200
800046aa:	f2 08 09 48 	lsl	r8,r9,r8
800046ae:	fe 69 00 00 	mov	r9,-131072
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800046b2:	93 68       	st.w	r9[0x18],r8
800046b4:	e6 16 00 01 	andh	r6,0x1,COH
			cpu_irq_restore(flags);
			return;
800046b8:	c6 10       	breq	8000477a <udd_ep_trans_done+0x15a>
800046ba:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800046be:	e6 16 00 01 	andh	r6,0x1,COH
      cpu_irq_enable();
800046c2:	c0 21       	brne	800046c6 <udd_ep_trans_done+0xa6>
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
800046c4:	d5 03       	csrf	0x10
800046c6:	72 38       	ld.w	r8,r9[0xc]
800046c8:	72 0a       	ld.w	r10,r9[0x0]
	}
	if (Is_udd_endpoint_in(ep)) {
800046ca:	93 28       	st.w	r9[0x8],r8
800046cc:	7c 08       	ld.w	r8,lr[0x0]
800046ce:	ed b8 00 08 	bld	r8,0x8
		if (ptr_job->b_shortpacket) {
800046d2:	c0 41       	brne	800046da <udd_ep_trans_done+0xba>
800046d4:	ed ba 00 1e 	bld	r10,0x1e
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
800046d8:	c2 b0       	breq	8000472e <udd_ep_trans_done+0x10e>
800046da:	58 0a       	cp.w	r10,0
		return; // No on-going job
	}
	ptr_job->busy = false;
800046dc:	c1 54       	brge	80004706 <udd_ep_trans_done+0xe6>
800046de:	30 08       	mov	r8,0
800046e0:	f5 d8 d3 e1 	bfins	r10,r8,0x1f,0x1
	if (NULL == ptr_job->call_trans) {
800046e4:	93 0a       	st.w	r9[0x0],r10
800046e6:	72 48       	ld.w	r8,r9[0x10]
800046e8:	58 08       	cp.w	r8,0
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
800046ea:	c0 e0       	breq	80004706 <udd_ep_trans_done+0xe6>
800046ec:	7c 0a       	ld.w	r10,lr[0x0]
800046ee:	ed ba 00 08 	bld	r10,0x8
		ep_num |= USB_EP_DIR_IN;
800046f2:	c0 61       	brne	800046fe <udd_ep_trans_done+0xde>
800046f4:	ea 1c ff ff 	orh	r12,0xffff
800046f8:	e8 1c ff 80 	orl	r12,0xff80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
800046fc:	5c 5c       	castu.b	r12
800046fe:	18 9a       	mov	r10,r12
80004700:	72 2b       	ld.w	r11,r9[0x8]
80004702:	30 0c       	mov	r12,0
80004704:	5d 18       	icall	r8
80004706:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
8000470a:	7c 0a       	ld.w	r10,lr[0x0]
8000470c:	f5 da c1 62 	bfextu	r10,r10,0xb,0x2
80004710:	58 1a       	cp.w	r10,1
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
80004712:	c3 60       	breq	8000477e <udd_ep_trans_done+0x15e>
80004714:	e8 14 00 14 	orl	r4,0x14
			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
80004718:	cb 1b       	rjmp	8000467a <udd_ep_trans_done+0x5a>
8000471a:	ee 04 15 10 	lsl	r4,r7,0x10

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
8000471e:	c9 ab       	rjmp	80004652 <udd_ep_trans_done+0x32>
80004720:	f8 05 15 02 	lsl	r5,r12,0x2
80004724:	fe 68 01 00 	mov	r8,-130816
80004728:	ea 08 00 0e 	add	lr,r5,r8
	}
	if (Is_udd_endpoint_in(ep)) {
		if (ptr_job->b_shortpacket) {
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
8000472c:	cd 0b       	rjmp	800046cc <udd_ep_trans_done+0xac>
8000472e:	fe 6a 01 60 	mov	r10,-130720
80004732:	30 19       	mov	r9,1
80004734:	ea 0a 00 08 	add	r8,r5,r10
			if (Is_udd_write_enabled(ep)) {
80004738:	91 09       	st.w	r8[0x0],r9
8000473a:	fe 66 01 30 	mov	r6,-130768
8000473e:	ea 06 00 08 	add	r8,r5,r6
80004742:	70 08       	ld.w	r8,r8[0x0]
80004744:	ed b8 00 10 	bld	r8,0x10
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
80004748:	c0 61       	brne	80004754 <udd_ep_trans_done+0x134>
8000474a:	fe 6a 01 90 	mov	r10,-130672
8000474e:	ea 0a 00 08 	add	r8,r5,r10
			}
			udd_enable_in_send_interrupt(ep);
80004752:	91 09       	st.w	r8[0x0],r9
80004754:	30 18       	mov	r8,1
80004756:	e0 35 fe 10 	sub	r5,130576
			udd_enable_endpoint_interrupt(ep);
8000475a:	8b 08       	st.w	r5[0x0],r8
8000475c:	e0 68 10 00 	mov	r8,4096
80004760:	f0 0c 09 4c 	lsl	r12,r8,r12
80004764:	fe 68 00 00 	mov	r8,-131072
			return;
80004768:	91 6c       	st.w	r8[0x18],r12
8000476a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
		if (Is_udd_endpoint_in(ep)) {
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
8000476e:	30 06       	mov	r6,0
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80004770:	06 44       	or	r4,r3
80004772:	f5 d6 d3 c1 	bfins	r10,r6,0x1e,0x1
80004776:	93 0a       	st.w	r9[0x0],r10
80004778:	c8 1b       	rjmp	8000467a <udd_ep_trans_done+0x5a>
8000477a:	d5 03       	csrf	0x10
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
					|| (next_trans <= udd_get_endpoint_size(ep))) {
8000477c:	c9 fb       	rjmp	800046ba <udd_ep_trans_done+0x9a>
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
8000477e:	7c 0a       	ld.w	r10,lr[0x0]
80004780:	30 86       	mov	r6,8
80004782:	f5 da c0 83 	bfextu	r10,r10,0x4,0x3
80004786:	ec 0a 09 4a 	lsl	r10,r6,r10
8000478a:	14 37       	cp.w	r7,r10
8000478c:	fe 9b ff 77 	brhi	8000467a <udd_ep_trans_done+0x5a>
80004790:	cc 2b       	rjmp	80004714 <udd_ep_trans_done+0xf4>
80004792:	d7 03       	nop

80004794 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80004794:	eb cd 40 e0 	pushm	r5-r7,lr
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
80004798:	30 2e       	mov	lr,2
		udd_callback_trans_t callback)
{
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
8000479a:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep) {
8000479e:	fc 0c 18 00 	cp.b	r12,lr
800047a2:	e0 8b 00 1f 	brhi	800047e0 <udd_ep_run+0x4c>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800047a6:	fe 6e 00 00 	mov	lr,-131072
800047aa:	7c 7e       	ld.w	lr,lr[0x1c]
800047ac:	30 17       	mov	r7,1
800047ae:	ee 0c 09 46 	lsl	r6,r7,r12
800047b2:	ed ee 00 0e 	and	lr,r6,lr
800047b6:	c1 50       	breq	800047e0 <udd_ep_run+0x4c>
			|| Is_udd_endpoint_stall_requested(ep)
800047b8:	f8 0e 15 02 	lsl	lr,r12,0x2
800047bc:	e0 3e fe 40 	sub	lr,130624
800047c0:	7c 0e       	ld.w	lr,lr[0x0]
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800047c2:	e6 1e 00 08 	andh	lr,0x8,COH
800047c6:	c0 d1       	brne	800047e0 <udd_ep_run+0x4c>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
800047c8:	e0 66 0a 60 	mov	r6,2656
800047cc:	f8 ce 00 01 	sub	lr,r12,1
800047d0:	fc 0e 00 2e 	add	lr,lr,lr<<0x2
800047d4:	ec 0e 00 2e 	add	lr,r6,lr<<0x2

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
800047d8:	7c 06       	ld.w	r6,lr[0x0]
800047da:	e6 16 20 00 	andh	r6,0x2000,COH
	ptr_job->b_shortpacket = b_shortpacket;


	// Request first transfer
	udd_ep_trans_done(ep);
	return true;
800047de:	c0 30       	breq	800047e4 <udd_ep_run+0x50>
800047e0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800047e4:	e1 b5 00 00 	mfsr	r5,0x0
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
800047e8:	d3 03       	ssrf	0x10
800047ea:	7c 06       	ld.w	r6,lr[0x0]
800047ec:	58 06       	cp.w	r6,0
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800047ee:	c0 74       	brge	800047fc <udd_ep_run+0x68>
800047f0:	e6 15 00 01 	andh	r5,0x1,COH
      cpu_irq_enable();
800047f4:	c0 21       	brne	800047f8 <udd_ep_run+0x64>
   }

	barrier();
800047f6:	d5 03       	csrf	0x10
800047f8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
800047fc:	ed d7 d3 e1 	bfins	r6,r7,0x1f,0x1
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004800:	9d 06       	st.w	lr[0x0],r6
80004802:	e6 15 00 01 	andh	r5,0x1,COH
	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->call_trans = callback;
80004806:	c0 d0       	breq	80004820 <udd_ep_run+0x8c>
	ptr_job->b_shortpacket = b_shortpacket;
80004808:	9d 48       	st.w	lr[0x10],r8
8000480a:	7c 08       	ld.w	r8,lr[0x0]
8000480c:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
80004810:	9d 08       	st.w	lr[0x0],r8
	ptr_job->busy = true;
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
80004812:	30 08       	mov	r8,0
	ptr_job->buf_size = buf_size;
80004814:	9d 1a       	st.w	lr[0x4],r10
	ptr_job->nb_trans = 0;
80004816:	9d 29       	st.w	lr[0x8],r9
	ptr_job->call_trans = callback;
	ptr_job->b_shortpacket = b_shortpacket;


	// Request first transfer
	udd_ep_trans_done(ep);
80004818:	9d 38       	st.w	lr[0xc],r8
8000481a:	c0 3f       	rcall	80004620 <udd_ep_trans_done>
8000481c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
      cpu_irq_enable();
80004820:	d5 03       	csrf	0x10
80004822:	cf 3b       	rjmp	80004808 <udd_ep_run+0x74>

80004824 <udd_detach>:
80004824:	fe 68 08 00 	mov	r8,-129024
80004828:	70 09       	ld.w	r9,r8[0x0]
8000482a:	af c9       	cbr	r9,0xe
}


void udd_detach(void)
{
	otg_unfreeze_clock();
8000482c:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
8000482e:	fe 6a 00 00 	mov	r10,-131072
80004832:	74 09       	ld.w	r9,r10[0x0]
80004834:	a9 a9       	sbr	r9,0x8
80004836:	95 09       	st.w	r10[0x0],r9
	otg_freeze_clock();
80004838:	70 09       	ld.w	r9,r8[0x0]
8000483a:	af a9       	sbr	r9,0xe
8000483c:	91 09       	st.w	r8[0x0],r9
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
8000483e:	e0 6a 0a 88 	mov	r10,2696
80004842:	30 08       	mov	r8,0
80004844:	15 89       	ld.ub	r9,r10[0x0]
80004846:	f0 09 18 00 	cp.b	r9,r8
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
8000484a:	c1 20       	breq	8000486e <udd_detach+0x4a>
8000484c:	e0 69 0c 84 	mov	r9,3204
80004850:	13 9b       	ld.ub	r11,r9[0x1]
80004852:	f0 0b 18 00 	cp.b	r11,r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004856:	c0 21       	brne	8000485a <udd_detach+0x36>
80004858:	c0 08       	rjmp	80004858 <udd_detach+0x34>
	cpu_irq_disable();
8000485a:	e1 b8 00 00 	mfsr	r8,0x0
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
8000485e:	d3 03       	ssrf	0x10
80004860:	13 9b       	ld.ub	r11,r9[0x1]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004862:	20 1b       	sub	r11,1
80004864:	b2 9b       	st.b	r9[0x1],r11
80004866:	ed b8 00 10 	bld	r8,0x10
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
8000486a:	c0 20       	breq	8000486e <udd_detach+0x4a>
8000486c:	d5 03       	csrf	0x10

	// Detach device from the bus
	udd_detach_device();
	otg_freeze_clock();
	udd_sleep_mode(false);
}
8000486e:	30 08       	mov	r8,0
80004870:	b4 88       	st.b	r10[0x0],r8
80004872:	5e fc       	retal	r12

80004874 <udd_attach>:
80004874:	d4 01       	pushm	lr
80004876:	e1 be 00 00 	mfsr	lr,0x0
static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
	cpu_irq_disable();
8000487a:	d3 03       	ssrf	0x10
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
8000487c:	e0 6a 0a 88 	mov	r10,2696
80004880:	30 08       	mov	r8,0
80004882:	15 89       	ld.ub	r9,r10[0x0]
80004884:	f0 09 18 00 	cp.b	r9,r8
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
80004888:	c1 11       	brne	800048aa <udd_attach+0x36>
8000488a:	e0 69 0c 84 	mov	r9,3204
8000488e:	3f f8       	mov	r8,-1
80004890:	13 9b       	ld.ub	r11,r9[0x1]
80004892:	f0 0b 18 00 	cp.b	r11,r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004896:	c3 a0       	breq	8000490a <udd_attach+0x96>
	cpu_irq_disable();
80004898:	e1 b8 00 00 	mfsr	r8,0x0
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
8000489c:	d3 03       	ssrf	0x10
8000489e:	13 9b       	ld.ub	r11,r9[0x1]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800048a0:	2f fb       	sub	r11,-1
800048a2:	b2 9b       	st.b	r9[0x1],r11
800048a4:	ed b8 00 10 	bld	r8,0x10
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
	otg_unfreeze_clock();
800048a8:	c3 21       	brne	8000490c <udd_attach+0x98>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
800048aa:	fe 69 08 00 	mov	r9,-129024
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
	otg_unfreeze_clock();
800048ae:	30 18       	mov	r8,1
800048b0:	b4 88       	st.b	r10[0x0],r8
800048b2:	72 08       	ld.w	r8,r9[0x0]
	while( !Is_otg_clock_usable() );
800048b4:	af c8       	cbr	r8,0xe
800048b6:	93 08       	st.w	r9[0x0],r8
800048b8:	fe 69 08 04 	mov	r9,-129020
800048bc:	72 08       	ld.w	r8,r9[0x0]
800048be:	ed b8 00 0e 	bld	r8,0xe

	// Authorize attach if Vbus is present
	udd_attach_device();
800048c2:	cf d1       	brne	800048bc <udd_attach+0x48>
800048c4:	fe 69 00 00 	mov	r9,-131072
800048c8:	72 08       	ld.w	r8,r9[0x0]

	// Enable USB line events
	udd_enable_reset_interrupt();
800048ca:	a9 c8       	cbr	r8,0x8
800048cc:	93 08       	st.w	r9[0x0],r8
800048ce:	30 8c       	mov	r12,8
800048d0:	fe 68 00 18 	mov	r8,-131048
	udd_enable_suspend_interrupt();
800048d4:	91 0c       	st.w	r8[0x0],r12
	udd_enable_wake_up_interrupt();
800048d6:	30 1a       	mov	r10,1
800048d8:	91 0a       	st.w	r8[0x0],r10
	udd_enable_sof_interrupt();
800048da:	31 09       	mov	r9,16
800048dc:	91 09       	st.w	r8[0x0],r9
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interrupts flag
	udd_ack_reset();
800048de:	30 4b       	mov	r11,4
800048e0:	91 0b       	st.w	r8[0x0],r11
800048e2:	fe 68 00 08 	mov	r8,-131064
	udd_ack_sof();
	udd_ack_msof();
800048e6:	91 0c       	st.w	r8[0x0],r12
800048e8:	91 0b       	st.w	r8[0x0],r11
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
800048ea:	30 2b       	mov	r11,2
800048ec:	91 0b       	st.w	r8[0x0],r11
800048ee:	fe 6b 00 0c 	mov	r11,-131060
#endif
	udd_ack_wake_up();
	otg_freeze_clock();
800048f2:	97 0a       	st.w	r11[0x0],r10
800048f4:	91 09       	st.w	r8[0x0],r9
800048f6:	fe 69 08 00 	mov	r9,-129024
800048fa:	72 08       	ld.w	r8,r9[0x0]
800048fc:	af a8       	sbr	r8,0xe
800048fe:	93 08       	st.w	r9[0x0],r8
80004900:	e6 1e 00 01 	andh	lr,0x1,COH
	cpu_irq_restore(flags);
}
80004904:	c0 21       	brne	80004908 <udd_attach+0x94>
80004906:	d5 03       	csrf	0x10
      cpu_irq_enable();
80004908:	d8 02       	popm	pc
8000490a:	c0 08       	rjmp	8000490a <udd_attach+0x96>
8000490c:	d5 03       	csrf	0x10
8000490e:	cc eb       	rjmp	800048aa <udd_attach+0x36>

80004910 <udd_ep_alloc>:
80004910:	d4 31       	pushm	r0-r7,lr
80004912:	20 1d       	sub	sp,4
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
80004914:	30 28       	mov	r8,2
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
80004916:	ef dc c0 04 	bfextu	r7,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP) {
8000491a:	f0 07 18 00 	cp.b	r7,r8
8000491e:	e0 8b 00 c7 	brhi	80004aac <udd_ep_alloc+0x19c>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
80004922:	fe 68 00 00 	mov	r8,-131072
80004926:	70 78       	ld.w	r8,r8[0x1c]
80004928:	30 14       	mov	r4,1
8000492a:	e8 07 09 44 	lsl	r4,r4,r7
8000492e:	e9 e8 00 08 	and	r8,r4,r8
80004932:	e0 81 00 bd 	brne	80004aac <udd_ep_alloc+0x19c>
		return false;
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80004936:	f3 db c0 02 	bfextu	r9,r11,0x0,0x2
8000493a:	58 19       	cp.w	r9,1
8000493c:	e0 85 00 b8 	brlt	80004aac <udd_ep_alloc+0x19c>
80004940:	58 29       	cp.w	r9,2
80004942:	e0 89 00 b2 	brgt	80004aa6 <udd_ep_alloc+0x196>
80004946:	30 48       	mov	r8,4
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80004948:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
8000494c:	ab 7b       	lsl	r11,0xb
8000494e:	e2 1b 18 00 	andl	r11,0x1800,COH
80004952:	f7 ec 10 8b 	or	r11,r11,r12<<0x8
80004956:	f7 e8 10 08 	or	r8,r11,r8
8000495a:	30 8b       	mov	r11,8
8000495c:	5c 7a       	castu.h	r10
8000495e:	ee 09 15 02 	lsl	r9,r7,0x2
80004962:	f4 0b 0c 4a 	max	r10,r10,r11
80004966:	e0 39 ff 00 	sub	r9,130816
8000496a:	e0 6b 04 00 	mov	r11,1024
8000496e:	72 0e       	ld.w	lr,r9[0x0]
80004970:	f4 0b 0d 4a 	min	r10,r10,r11
80004974:	e0 1e e6 83 	andl	lr,0xe683
80004978:	a1 7a       	lsl	r10,0x1
8000497a:	20 1a       	sub	r10,1
8000497c:	f4 0a 12 00 	clz	r10,r10
80004980:	f4 0a 11 1c 	rsub	r10,r10,28
80004984:	f1 ea 10 48 	or	r8,r8,r10<<0x4
80004988:	e2 18 19 7c 	andl	r8,0x197c,COH
8000498c:	f1 ee 10 0e 	or	lr,r8,lr
80004990:	93 0e       	st.w	r9[0x0],lr
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80004992:	5c 84       	casts.h	r4

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80004994:	30 28       	mov	r8,2
80004996:	0e 90       	mov	r0,r7
80004998:	f0 07 18 00 	cp.b	r7,r8
8000499c:	c1 d0       	breq	800049d6 <udd_ep_alloc+0xc6>
8000499e:	fe 6a 01 08 	mov	r10,-130808
800049a2:	30 28       	mov	r8,2
		if (Is_udd_endpoint_enabled(i)) {
800049a4:	fe 6b 00 00 	mov	r11,-131072
800049a8:	30 16       	mov	r6,1
800049aa:	76 7c       	ld.w	r12,r11[0x1c]
800049ac:	ec 08 09 49 	lsl	r9,r6,r8
			ep_allocated |= 1 << i;
			udd_disable_endpoint(i);
800049b0:	f2 0e 11 ff 	rsub	lr,r9,-1
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
800049b4:	f3 ec 00 0c 	and	r12,r9,r12
800049b8:	c0 a0       	breq	800049cc <udd_ep_alloc+0xbc>
			ep_allocated |= 1 << i;
			udd_disable_endpoint(i);
800049ba:	76 7c       	ld.w	r12,r11[0x1c]
800049bc:	18 6e       	and	lr,r12
800049be:	97 7e       	st.w	r11[0x1c],lr
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
800049c0:	f3 e4 10 04 	or	r4,r9,r4
			udd_disable_endpoint(i);
			udd_unallocate_memory(i);
800049c4:	74 0c       	ld.w	r12,r10[0x0]
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
800049c6:	5c 84       	casts.h	r4
			udd_disable_endpoint(i);
			udd_unallocate_memory(i);
800049c8:	a1 dc       	cbr	r12,0x1
800049ca:	95 0c       	st.w	r10[0x0],r12
800049cc:	20 18       	sub	r8,1
800049ce:	20 4a       	sub	r10,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800049d0:	f0 07 18 00 	cp.b	r7,r8
800049d4:	ce b3       	brcs	800049aa <udd_ep_alloc+0x9a>
800049d6:	5c 74       	castu.h	r4
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
800049d8:	e0 62 0a 60 	mov	r2,2656
			bool b_restart = ptr_job->busy;
			ptr_job->busy = false;

			udd_allocate_memory(i);
			udd_enable_endpoint(i);
800049dc:	30 01       	mov	r1,0
800049de:	fe 65 00 00 	mov	r5,-131072
{
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
800049e2:	30 13       	mov	r3,1
800049e4:	30 26       	mov	r6,2
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800049e6:	c0 78       	rjmp	800049f4 <udd_ep_alloc+0xe4>
800049e8:	2f f7       	sub	r7,-1
800049ea:	5c 57       	castu.b	r7
800049ec:	ec 07 18 00 	cp.b	r7,r6
800049f0:	e0 8b 00 61 	brhi	80004ab2 <udd_ep_alloc+0x1a2>
		if (ep_allocated & (1 << i)) {
800049f4:	0e 9a       	mov	r10,r7
800049f6:	e8 07 08 48 	asr	r8,r4,r7
800049fa:	ed b8 00 00 	bld	r8,0x0
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
800049fe:	cf 51       	brne	800049e8 <udd_ep_alloc+0xd8>
80004a00:	ee cc 00 01 	sub	r12,r7,1
80004a04:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80004a08:	e4 0c 00 2c 	add	r12,r2,r12<<0x2
			bool b_restart = ptr_job->busy;
			ptr_job->busy = false;
80004a0c:	78 0b       	ld.w	r11,r12[0x0]
80004a0e:	16 98       	mov	r8,r11
80004a10:	f1 d1 d3 e1 	bfins	r8,r1,0x1f,0x1

			udd_allocate_memory(i);
80004a14:	99 08       	st.w	r12[0x0],r8
80004a16:	fe 68 01 00 	mov	r8,-130816
80004a1a:	ee 0e 15 02 	lsl	lr,r7,0x2
80004a1e:	fc 08 00 09 	add	r9,lr,r8
80004a22:	72 08       	ld.w	r8,r9[0x0]
80004a24:	a1 b8       	sbr	r8,0x1
			udd_enable_endpoint(i);
80004a26:	93 08       	st.w	r9[0x0],r8
80004a28:	e6 07 09 40 	lsl	r0,r3,r7
80004a2c:	6a 78       	ld.w	r8,r5[0x1c]
80004a2e:	e1 e8 10 08 	or	r8,r0,r8
			if (!Is_udd_endpoint_configured(i)) {
80004a32:	8b 78       	st.w	r5[0x1c],r8
80004a34:	e0 3e fe d0 	sub	lr,130768
80004a38:	7c 08       	ld.w	r8,lr[0x0]
80004a3a:	ed b8 00 12 	bld	r8,0x12
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_size, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
80004a3e:	c3 c1       	brne	80004ab6 <udd_ep_alloc+0x1a6>
80004a40:	72 08       	ld.w	r8,r9[0x0]
80004a42:	a9 b8       	sbr	r8,0x9
			if (b_restart) {
80004a44:	93 08       	st.w	r9[0x0],r8
80004a46:	58 0b       	cp.w	r11,0
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
80004a48:	cd 04       	brge	800049e8 <udd_ep_alloc+0xd8>
80004a4a:	78 09       	ld.w	r9,r12[0x0]
80004a4c:	78 4a       	ld.w	r10,r12[0x10]
80004a4e:	78 2b       	ld.w	r11,r12[0x8]
		udd_callback_trans_t callback)
{
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
80004a50:	78 1e       	ld.w	lr,r12[0x4]
80004a52:	f9 d7 c0 04 	bfextu	r12,r7,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep) {
80004a56:	ec 0c 18 00 	cp.b	r12,r6
80004a5a:	fe 9b ff c7 	brhi	800049e8 <udd_ep_alloc+0xd8>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80004a5e:	6a 78       	ld.w	r8,r5[0x1c]
80004a60:	e6 0c 09 40 	lsl	r0,r3,r12
80004a64:	e1 e8 00 08 	and	r8,r0,r8
			|| Is_udd_endpoint_stall_requested(ep)
80004a68:	cc 00       	breq	800049e8 <udd_ep_alloc+0xd8>
80004a6a:	f8 08 15 02 	lsl	r8,r12,0x2
80004a6e:	e0 38 fe 40 	sub	r8,130624
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80004a72:	70 08       	ld.w	r8,r8[0x0]
80004a74:	ed b8 00 13 	bld	r8,0x13
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
80004a78:	cb 80       	breq	800049e8 <udd_ep_alloc+0xd8>
80004a7a:	f8 c8 00 01 	sub	r8,r12,1
80004a7e:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004a82:	e4 08 00 28 	add	r8,r2,r8<<0x2

	if ((!Is_udd_endpoint_enabled(ep))
80004a86:	70 00       	ld.w	r0,r8[0x0]
80004a88:	e6 10 20 00 	andh	r0,0x2000,COH

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004a8c:	ca e1       	brne	800049e8 <udd_ep_alloc+0xd8>
80004a8e:	e1 b0 00 00 	mfsr	r0,0x0
	cpu_irq_disable();
80004a92:	50 00       	stdsp	sp[0x0],r0
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80004a94:	d3 03       	ssrf	0x10
80004a96:	70 00       	ld.w	r0,r8[0x0]
80004a98:	58 00       	cp.w	r0,0
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004a9a:	c1 d4       	brge	80004ad4 <udd_ep_alloc+0x1c4>
80004a9c:	40 08       	lddsp	r8,sp[0x0]
80004a9e:	ed b8 00 10 	bld	r8,0x10
      cpu_irq_enable();
   }

	barrier();
80004aa2:	c1 71       	brne	80004ad0 <udd_ep_alloc+0x1c0>
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80004aa4:	ca 2b       	rjmp	800049e8 <udd_ep_alloc+0xd8>
80004aa6:	58 39       	cp.w	r9,3
80004aa8:	fe 90 ff 50 	breq	80004948 <udd_ep_alloc+0x38>
						ptr_job->call_trans);
			}
		}
	}
	return true;
}
80004aac:	30 0c       	mov	r12,0
80004aae:	2f fd       	sub	sp,-4
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80004ab0:	d8 32       	popm	r0-r7,pc
80004ab2:	2f fd       	sub	sp,-4
			ptr_job->busy = false;

			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
				if (NULL == ptr_job->call_trans) {
80004ab4:	da 3a       	popm	r0-r7,pc,r12=1
80004ab6:	78 48       	ld.w	r8,r12[0x10]
80004ab8:	58 08       	cp.w	r8,0
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
80004aba:	cf 90       	breq	80004aac <udd_ep_alloc+0x19c>
80004abc:	72 09       	ld.w	r9,r9[0x0]
80004abe:	ed b9 00 08 	bld	r9,0x8
80004ac2:	c0 21       	brne	80004ac6 <udd_ep_alloc+0x1b6>
					i |= USB_EP_DIR_IN;
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
80004ac4:	a7 ba       	sbr	r10,0x7
80004ac6:	78 2b       	ld.w	r11,r12[0x8]
80004ac8:	30 1c       	mov	r12,1
80004aca:	5d 18       	icall	r8
						ptr_job->buf_size, i);
				return false;
80004acc:	30 0c       	mov	r12,0
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
80004ace:	cf 0b       	rjmp	80004aae <udd_ep_alloc+0x19e>
   }

	barrier();
80004ad0:	d5 03       	csrf	0x10
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
80004ad2:	c8 bb       	rjmp	800049e8 <udd_ep_alloc+0xd8>
80004ad4:	e1 d3 d3 e1 	bfins	r0,r3,0x1f,0x1
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004ad8:	91 00       	st.w	r8[0x0],r0
80004ada:	40 00       	lddsp	r0,sp[0x0]
80004adc:	e6 10 00 01 	andh	r0,0x1,COH
	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->call_trans = callback;
80004ae0:	c0 e0       	breq	80004afc <udd_ep_alloc+0x1ec>
	ptr_job->b_shortpacket = b_shortpacket;
80004ae2:	91 4a       	st.w	r8[0x10],r10
80004ae4:	f3 d9 c3 c1 	bfextu	r9,r9,0x1e,0x1
80004ae8:	70 0a       	ld.w	r10,r8[0x0]
80004aea:	f5 d9 d3 c1 	bfins	r10,r9,0x1e,0x1
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
80004aee:	91 1e       	st.w	r8[0x4],lr
	ptr_job->nb_trans = 0;
80004af0:	91 2b       	st.w	r8[0x8],r11
	ptr_job->call_trans = callback;
	ptr_job->b_shortpacket = b_shortpacket;
80004af2:	91 31       	st.w	r8[0xc],r1


	// Request first transfer
	udd_ep_trans_done(ep);
80004af4:	91 0a       	st.w	r8[0x0],r10
80004af6:	fe b0 fd 95 	rcall	80004620 <udd_ep_trans_done>
      cpu_irq_enable();
80004afa:	c7 7b       	rjmp	800049e8 <udd_ep_alloc+0xd8>
80004afc:	d5 03       	csrf	0x10
80004afe:	cf 2b       	rjmp	80004ae2 <udd_ep_alloc+0x1d2>

80004b00 <udd_disable>:
80004b00:	fe 68 08 04 	mov	r8,-129020
80004b04:	70 08       	ld.w	r8,r8[0x0]
80004b06:	ed b8 00 0a 	bld	r8,0xa
{
	irqflags_t flags;

#ifdef UHD_ENABLE
# ifdef USB_ID
	if (Is_otg_id_host()) {
80004b0a:	5e 1c       	retne	r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004b0c:	e1 bc 00 00 	mfsr	r12,0x0
	cpu_irq_disable();
80004b10:	d3 03       	ssrf	0x10
	}
# endif
#endif

	flags = cpu_irq_save();
	otg_unfreeze_clock();
80004b12:	fe 68 08 00 	mov	r8,-129024
80004b16:	70 09       	ld.w	r9,r8[0x0]
80004b18:	af c9       	cbr	r9,0xe
80004b1a:	91 09       	st.w	r8[0x0],r9
}


void udd_detach(void)
{
	otg_unfreeze_clock();
80004b1c:	70 09       	ld.w	r9,r8[0x0]
80004b1e:	af c9       	cbr	r9,0xe
80004b20:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
80004b22:	fe 6a 00 00 	mov	r10,-131072
80004b26:	74 09       	ld.w	r9,r10[0x0]
80004b28:	a9 a9       	sbr	r9,0x8
80004b2a:	95 09       	st.w	r10[0x0],r9
	otg_freeze_clock();
80004b2c:	70 09       	ld.w	r9,r8[0x0]
80004b2e:	af a9       	sbr	r9,0xe
80004b30:	91 09       	st.w	r8[0x0],r9
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
80004b32:	e0 6b 0a 88 	mov	r11,2696
80004b36:	30 09       	mov	r9,0
80004b38:	17 88       	ld.ub	r8,r11[0x0]
80004b3a:	f2 08 18 00 	cp.b	r8,r9
80004b3e:	c0 c1       	brne	80004b56 <udd_disable+0x56>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
80004b40:	e0 68 0c 84 	mov	r8,3204
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
80004b44:	30 0a       	mov	r10,0
80004b46:	b6 8a       	st.b	r11[0x0],r10
80004b48:	11 b8       	ld.ub	r8,r8[0x3]
80004b4a:	e0 69 0c 84 	mov	r9,3204
80004b4e:	f4 08 18 00 	cp.b	r8,r10
80004b52:	c0 91       	brne	80004b64 <udd_disable+0x64>
80004b54:	c0 08       	rjmp	80004b54 <udd_disable+0x54>
80004b56:	e0 68 0c 84 	mov	r8,3204
80004b5a:	11 9a       	ld.ub	r10,r8[0x1]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004b5c:	f2 0a 18 00 	cp.b	r10,r9
	cpu_irq_disable();
80004b60:	c1 11       	brne	80004b82 <udd_disable+0x82>
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80004b62:	c0 08       	rjmp	80004b62 <udd_disable+0x62>
80004b64:	e1 b8 00 00 	mfsr	r8,0x0
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004b68:	d3 03       	ssrf	0x10
80004b6a:	13 ba       	ld.ub	r10,r9[0x3]
80004b6c:	20 1a       	sub	r10,1
      cpu_irq_enable();
80004b6e:	b2 ba       	st.b	r9[0x3],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004b70:	ed b8 00 10 	bld	r8,0x10
80004b74:	c0 20       	breq	80004b78 <udd_disable+0x78>
      cpu_irq_enable();
80004b76:	d5 03       	csrf	0x10
   }

	barrier();
80004b78:	ed bc 00 10 	bld	r12,0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004b7c:	c0 20       	breq	80004b80 <udd_disable+0x80>
	cpu_irq_disable();
80004b7e:	d5 03       	csrf	0x10
80004b80:	5e fc       	retal	r12
80004b82:	e1 b9 00 00 	mfsr	r9,0x0
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004b86:	d3 03       	ssrf	0x10
80004b88:	11 9a       	ld.ub	r10,r8[0x1]
80004b8a:	20 1a       	sub	r10,1
      cpu_irq_enable();
80004b8c:	b0 9a       	st.b	r8[0x1],r10
   }

	barrier();
80004b8e:	ed b9 00 10 	bld	r9,0x10
80004b92:	c0 20       	breq	80004b96 <udd_disable+0x96>
80004b94:	d5 03       	csrf	0x10
80004b96:	cd 7b       	rjmp	80004b44 <udd_disable+0x44>

80004b98 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
80004b98:	d4 21       	pushm	r4-r7,lr
	if (Is_udd_sof()) {
80004b9a:	fe 69 00 04 	mov	r9,-131068
80004b9e:	72 08       	ld.w	r8,r9[0x0]
80004ba0:	ed b8 00 02 	bld	r8,0x2
80004ba4:	c1 21       	brne	80004bc8 <udd_interrupt+0x30>
		udd_ack_sof();
80004ba6:	fe 68 00 08 	mov	r8,-131064
80004baa:	30 49       	mov	r9,4
80004bac:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
80004bae:	fe 68 08 04 	mov	r8,-129020
80004bb2:	70 08       	ld.w	r8,r8[0x0]
80004bb4:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80004bb8:	c4 e0       	breq	80004c54 <udd_interrupt+0xbc>
			udc_sof_notify();
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
80004bba:	fe b0 f3 1b 	rcall	800031f0 <ui_device_sof_action>
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80004bbe:	fe 68 00 00 	mov	r8,-131072
80004bc2:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80004bc6:	d8 22       	popm	r4-r7,pc
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_msof()) {
80004bc8:	72 08       	ld.w	r8,r9[0x0]
80004bca:	ed b8 00 01 	bld	r8,0x1
80004bce:	c3 80       	breq	80004c3e <udd_interrupt+0xa6>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80004bd0:	fe 68 00 00 	mov	r8,-131072
80004bd4:	70 18       	ld.w	r8,r8[0x4]
80004bd6:	ed b8 00 0c 	bld	r8,0xc
80004bda:	c4 51       	brne	80004c64 <udd_interrupt+0xcc>
		return false; // No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80004bdc:	fe 68 02 20 	mov	r8,-130528
80004be0:	31 09       	mov	r9,16
80004be2:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80004be4:	30 89       	mov	r9,8
80004be6:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80004be8:	fe 69 01 30 	mov	r9,-130768
80004bec:	72 08       	ld.w	r8,r9[0x0]
80004bee:	ed b8 00 02 	bld	r8,0x2
80004bf2:	e0 80 01 8d 	breq	80004f0c <udd_interrupt+0x374>
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80004bf6:	72 08       	ld.w	r8,r9[0x0]
80004bf8:	ed b8 00 00 	bld	r8,0x0
80004bfc:	c0 81       	brne	80004c0c <udd_interrupt+0x74>
80004bfe:	fe 68 01 c0 	mov	r8,-130624
80004c02:	70 08       	ld.w	r8,r8[0x0]
80004c04:	ed b8 00 00 	bld	r8,0x0
80004c08:	e0 80 02 2c 	breq	80005060 <udd_interrupt+0x4c8>
		// IN packet sent
		udd_ctrl_in_sent();
		return true;
	}
	if (Is_udd_out_received(0)) {
80004c0c:	fe 69 01 30 	mov	r9,-130768
80004c10:	72 08       	ld.w	r8,r9[0x0]
80004c12:	ed b8 00 01 	bld	r8,0x1
80004c16:	e0 80 01 e0 	breq	80004fd6 <udd_interrupt+0x43e>
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80004c1a:	72 08       	ld.w	r8,r9[0x0]
80004c1c:	ed b8 00 03 	bld	r8,0x3
80004c20:	c1 d1       	brne	80004c5a <udd_interrupt+0xc2>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80004c22:	fe 68 01 60 	mov	r8,-130720
80004c26:	30 8a       	mov	r10,8
80004c28:	91 0a       	st.w	r8[0x0],r10
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80004c2a:	72 08       	ld.w	r8,r9[0x0]
80004c2c:	ed b8 00 00 	bld	r8,0x0
80004c30:	cc 70       	breq	80004bbe <udd_interrupt+0x26>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80004c32:	e0 68 0a 90 	mov	r8,2704
80004c36:	70 08       	ld.w	r8,r8[0x0]
80004c38:	58 38       	cp.w	r8,3
80004c3a:	cc 21       	brne	80004bbe <udd_interrupt+0x26>
80004c3c:	c3 69       	rjmp	80004ea8 <udd_interrupt+0x310>
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_msof()) {
		udd_ack_msof();
80004c3e:	fe 68 00 08 	mov	r8,-131064
80004c42:	30 29       	mov	r9,2
80004c44:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
80004c46:	e0 a0 17 e1 	rcall	80007c08 <udc_sof_notify>
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80004c4a:	fe 68 00 00 	mov	r8,-131072
80004c4e:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80004c52:	d8 22       	popm	r4-r7,pc
#endif
{
	if (Is_udd_sof()) {
		udd_ack_sof();
		if (Is_udd_full_speed_mode()) {
			udc_sof_notify();
80004c54:	e0 a0 17 da 	rcall	80007c08 <udc_sof_notify>
80004c58:	cb 1b       	rjmp	80004bba <udd_interrupt+0x22>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80004c5a:	72 08       	ld.w	r8,r9[0x0]
80004c5c:	ed b8 00 04 	bld	r8,0x4
80004c60:	e0 80 01 12 	breq	80004e84 <udd_interrupt+0x2ec>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80004c64:	fe 69 00 00 	mov	r9,-131072
80004c68:	72 48       	ld.w	r8,r9[0x10]
80004c6a:	ed b8 00 19 	bld	r8,0x19
80004c6e:	c0 61       	brne	80004c7a <udd_interrupt+0xe2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80004c70:	72 18       	ld.w	r8,r9[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80004c72:	ed b8 00 19 	bld	r8,0x19
80004c76:	e0 80 03 12 	breq	8000529a <udd_interrupt+0x702>
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80004c7a:	fe 68 00 00 	mov	r8,-131072
80004c7e:	70 48       	ld.w	r8,r8[0x10]
80004c80:	ed b8 00 0d 	bld	r8,0xd
80004c84:	c3 d1       	brne	80004cfe <udd_interrupt+0x166>
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80004c86:	fe 68 01 c4 	mov	r8,-130620
80004c8a:	70 08       	ld.w	r8,r8[0x0]
80004c8c:	ed b8 00 00 	bld	r8,0x0
80004c90:	c3 01       	brne	80004cf0 <udd_interrupt+0x158>
80004c92:	fe 68 01 34 	mov	r8,-130764
80004c96:	70 08       	ld.w	r8,r8[0x0]
80004c98:	ed b8 00 00 	bld	r8,0x0
80004c9c:	c2 a1       	brne	80004cf0 <udd_interrupt+0x158>
80004c9e:	30 1a       	mov	r10,1
80004ca0:	30 4b       	mov	r11,4
80004ca2:	e0 69 0a 60 	mov	r9,2656
				udd_disable_in_send_interrupt(ep);
80004ca6:	30 1c       	mov	r12,1
80004ca8:	fe 6e 02 20 	mov	lr,-130528
80004cac:	f6 0e 00 08 	add	r8,r11,lr
80004cb0:	91 0c       	st.w	r8[0x0],r12
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
80004cb2:	fe 6e 01 60 	mov	lr,-130720
80004cb6:	f6 0e 00 07 	add	r7,r11,lr
80004cba:	8f 0c       	st.w	r7[0x0],r12
				udd_ack_fifocon(ep);
80004cbc:	e0 6c 40 00 	mov	r12,16384
80004cc0:	91 0c       	st.w	r8[0x0],r12
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
80004cc2:	72 08       	ld.w	r8,r9[0x0]
80004cc4:	58 08       	cp.w	r8,0
80004cc6:	fe 94 ff 7c 	brge	80004bbe <udd_interrupt+0x26>
		return; // No on-going job
	}
	ptr_job->busy = false;
80004cca:	30 0c       	mov	r12,0
80004ccc:	f1 dc d3 e1 	bfins	r8,r12,0x1f,0x1
80004cd0:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_trans) {
80004cd2:	72 48       	ld.w	r8,r9[0x10]
80004cd4:	58 08       	cp.w	r8,0
80004cd6:	fe 90 ff 74 	breq	80004bbe <udd_interrupt+0x26>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
80004cda:	e0 3b ff 00 	sub	r11,130816
80004cde:	76 0b       	ld.w	r11,r11[0x0]
80004ce0:	ed bb 00 08 	bld	r11,0x8
80004ce4:	c0 21       	brne	80004ce8 <udd_interrupt+0x150>
80004ce6:	a7 ba       	sbr	r10,0x7
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80004ce8:	72 2b       	ld.w	r11,r9[0x8]
80004cea:	30 0c       	mov	r12,0
80004cec:	5d 18       	icall	r8
80004cee:	c6 8b       	rjmp	80004bbe <udd_interrupt+0x26>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
80004cf0:	fe 68 01 c4 	mov	r8,-130620
80004cf4:	70 08       	ld.w	r8,r8[0x0]
80004cf6:	ed b8 00 0c 	bld	r8,0xc
80004cfa:	e0 80 00 dd 	breq	80004eb4 <udd_interrupt+0x31c>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80004cfe:	fe 69 00 00 	mov	r9,-131072
80004d02:	72 48       	ld.w	r8,r9[0x10]
80004d04:	ed b8 00 1a 	bld	r8,0x1a
80004d08:	c0 61       	brne	80004d14 <udd_interrupt+0x17c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80004d0a:	72 18       	ld.w	r8,r9[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80004d0c:	ed b8 00 1a 	bld	r8,0x1a
80004d10:	e0 80 02 e4 	breq	800052d8 <udd_interrupt+0x740>
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80004d14:	fe 68 00 00 	mov	r8,-131072
80004d18:	70 48       	ld.w	r8,r8[0x10]
80004d1a:	ed b8 00 0e 	bld	r8,0xe
80004d1e:	c2 61       	brne	80004d6a <udd_interrupt+0x1d2>
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80004d20:	fe 68 01 c8 	mov	r8,-130616
80004d24:	70 08       	ld.w	r8,r8[0x0]
80004d26:	ed b8 00 00 	bld	r8,0x0
80004d2a:	c0 d1       	brne	80004d44 <udd_interrupt+0x1ac>
80004d2c:	fe 68 01 38 	mov	r8,-130760
80004d30:	70 08       	ld.w	r8,r8[0x0]
80004d32:	ed b8 00 00 	bld	r8,0x0
80004d36:	c0 71       	brne	80004d44 <udd_interrupt+0x1ac>
80004d38:	e0 69 0a 60 	mov	r9,2656
80004d3c:	30 2a       	mov	r10,2
80004d3e:	2e c9       	sub	r9,-20
80004d40:	30 8b       	mov	r11,8
80004d42:	cb 2b       	rjmp	80004ca6 <udd_interrupt+0x10e>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
80004d44:	fe 68 01 c8 	mov	r8,-130616
80004d48:	70 08       	ld.w	r8,r8[0x0]
80004d4a:	ed b8 00 0c 	bld	r8,0xc
80004d4e:	c0 e1       	brne	80004d6a <udd_interrupt+0x1d2>
80004d50:	fe 68 01 38 	mov	r8,-130760
80004d54:	70 08       	ld.w	r8,r8[0x0]
80004d56:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80004d5a:	c0 81       	brne	80004d6a <udd_interrupt+0x1d2>
80004d5c:	e0 69 0a 60 	mov	r9,2656
80004d60:	30 88       	mov	r8,8
80004d62:	2e c9       	sub	r9,-20
80004d64:	e0 6a 40 00 	mov	r10,16384
80004d68:	cb 28       	rjmp	80004ecc <udd_interrupt+0x334>
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80004d6a:	fe 68 00 04 	mov	r8,-131068
80004d6e:	70 0c       	ld.w	r12,r8[0x0]
80004d70:	e2 1c 00 08 	andl	r12,0x8,COH
80004d74:	e0 80 01 00 	breq	80004f74 <udd_interrupt+0x3dc>
		udd_ack_reset();
80004d78:	fe 68 00 08 	mov	r8,-131064
80004d7c:	30 89       	mov	r9,8
80004d7e:	91 09       	st.w	r8[0x0],r9
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
80004d80:	e0 67 0a 60 	mov	r7,2656
80004d84:	6e 08       	ld.w	r8,r7[0x0]
80004d86:	58 08       	cp.w	r8,0
80004d88:	c1 44       	brge	80004db0 <udd_interrupt+0x218>
		return; // No on-going job
	}
	ptr_job->busy = false;
80004d8a:	30 09       	mov	r9,0
80004d8c:	f1 d9 d3 e1 	bfins	r8,r9,0x1f,0x1
80004d90:	8f 08       	st.w	r7[0x0],r8
	if (NULL == ptr_job->call_trans) {
80004d92:	6e 48       	ld.w	r8,r7[0x10]
80004d94:	58 08       	cp.w	r8,0
80004d96:	c0 d0       	breq	80004db0 <udd_interrupt+0x218>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
80004d98:	fe 69 01 04 	mov	r9,-130812
80004d9c:	72 09       	ld.w	r9,r9[0x0]
80004d9e:	e2 19 01 00 	andl	r9,0x100,COH
80004da2:	e0 6a 00 81 	mov	r10,129
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80004da6:	6e 2b       	ld.w	r11,r7[0x8]
80004da8:	f9 ba 00 01 	moveq	r10,1
80004dac:	30 1c       	mov	r12,1
80004dae:	5d 18       	icall	r8
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
80004db0:	e0 69 0a 60 	mov	r9,2656
80004db4:	6e 58       	ld.w	r8,r7[0x14]
80004db6:	58 08       	cp.w	r8,0
80004db8:	c1 44       	brge	80004de0 <udd_interrupt+0x248>
		return; // No on-going job
	}
	ptr_job->busy = false;
80004dba:	30 0a       	mov	r10,0
80004dbc:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80004dc0:	93 58       	st.w	r9[0x14],r8
	if (NULL == ptr_job->call_trans) {
80004dc2:	72 98       	ld.w	r8,r9[0x24]
80004dc4:	58 08       	cp.w	r8,0
80004dc6:	c0 d0       	breq	80004de0 <udd_interrupt+0x248>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
80004dc8:	fe 69 01 08 	mov	r9,-130808
80004dcc:	72 09       	ld.w	r9,r9[0x0]
80004dce:	e2 19 01 00 	andl	r9,0x100,COH
80004dd2:	e0 6a 00 82 	mov	r10,130
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80004dd6:	6e 7b       	ld.w	r11,r7[0x1c]
80004dd8:	f9 ba 00 02 	moveq	r10,2
80004ddc:	30 1c       	mov	r12,1
80004dde:	5d 18       	icall	r8
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
80004de0:	e0 a0 18 4c 	rcall	80007e78 <udc_reset>
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
80004de4:	fe 68 00 00 	mov	r8,-131072
80004de8:	70 09       	ld.w	r9,r8[0x0]
80004dea:	e0 19 ff 80 	andl	r9,0xff80
80004dee:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80004df0:	30 8a       	mov	r10,8
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
	udd_enable_address();
80004df2:	70 09       	ld.w	r9,r8[0x0]
80004df4:	a7 b9       	sbr	r9,0x7
80004df6:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80004df8:	f4 0a 0c 4b 	max	r11,r10,r10
80004dfc:	fe 69 01 00 	mov	r9,-130816
80004e00:	e0 6c 04 00 	mov	r12,1024
80004e04:	72 0a       	ld.w	r10,r9[0x0]
80004e06:	f6 0c 0d 4b 	min	r11,r11,r12
80004e0a:	e0 1a e6 83 	andl	r10,0xe683
80004e0e:	a1 7b       	lsl	r11,0x1
80004e10:	20 1b       	sub	r11,1
80004e12:	f6 0b 12 00 	clz	r11,r11
80004e16:	f6 0b 11 1c 	rsub	r11,r11,28
80004e1a:	a5 6b       	lsl	r11,0x4
80004e1c:	e2 1b 19 7c 	andl	r11,0x197c,COH
80004e20:	f7 ea 10 0a 	or	r10,r11,r10
80004e24:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80004e26:	72 0a       	ld.w	r10,r9[0x0]
80004e28:	a1 ba       	sbr	r10,0x1
80004e2a:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
80004e2c:	70 79       	ld.w	r9,r8[0x1c]
80004e2e:	a1 a9       	sbr	r9,0x0
80004e30:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004e32:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80004e36:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
80004e38:	fe 6a 01 f0 	mov	r10,-130576
80004e3c:	30 4b       	mov	r11,4
80004e3e:	95 0b       	st.w	r10[0x0],r11
	udd_enable_out_received_interrupt(0);
80004e40:	30 2b       	mov	r11,2
80004e42:	95 0b       	st.w	r10[0x0],r11
	udd_enable_endpoint_interrupt(0);
80004e44:	e0 6a 10 00 	mov	r10,4096
80004e48:	91 6a       	st.w	r8[0x18],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004e4a:	ed b9 00 10 	bld	r9,0x10
80004e4e:	c0 20       	breq	80004e52 <udd_interrupt+0x2ba>
      cpu_irq_enable();
80004e50:	d5 03       	csrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004e52:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80004e56:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80004e58:	30 1a       	mov	r10,1
80004e5a:	fe 69 02 20 	mov	r9,-130528
80004e5e:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004e60:	ed b8 00 10 	bld	r8,0x10
80004e64:	c0 20       	breq	80004e68 <udd_interrupt+0x2d0>
      cpu_irq_enable();
80004e66:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);

	udd_g_ctrlreq.callback = NULL;
80004e68:	e0 69 0c 58 	mov	r9,3160
80004e6c:	30 08       	mov	r8,0
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80004e6e:	30 2a       	mov	r10,2

	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;
	udd_g_ctrlreq.payload_size = 0;
80004e70:	b2 68       	st.h	r9[0xc],r8
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);

	udd_g_ctrlreq.callback = NULL;
80004e72:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80004e74:	93 58       	st.w	r9[0x14],r8
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80004e76:	fe 69 01 60 	mov	r9,-130720
80004e7a:	93 0a       	st.w	r9[0x0],r10

	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;
	udd_g_ctrlreq.payload_size = 0;
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80004e7c:	e0 69 0a 90 	mov	r9,2704
80004e80:	93 08       	st.w	r9[0x0],r8
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
		goto udd_interrupt_end;
80004e82:	c9 ea       	rjmp	80004bbe <udd_interrupt+0x26>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
80004e84:	31 08       	mov	r8,16
80004e86:	fe 6a 01 60 	mov	r10,-130720
80004e8a:	95 08       	st.w	r10[0x0],r8
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80004e8c:	72 08       	ld.w	r8,r9[0x0]
80004e8e:	ed b8 00 01 	bld	r8,0x1
80004e92:	fe 90 fe 96 	breq	80004bbe <udd_interrupt+0x26>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80004e96:	e0 69 0a 90 	mov	r9,2704
80004e9a:	72 08       	ld.w	r8,r9[0x0]
80004e9c:	58 18       	cp.w	r8,1
80004e9e:	e0 80 01 be 	breq	8000521a <udd_interrupt+0x682>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80004ea2:	58 48       	cp.w	r8,4
80004ea4:	fe 91 fe 8d 	brne	80004bbe <udd_interrupt+0x26>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80004ea8:	e8 69 00 00 	mov	r9,524288
80004eac:	fe 68 01 f0 	mov	r8,-130576
80004eb0:	91 09       	st.w	r8[0x0],r9
80004eb2:	c8 6a       	rjmp	80004bbe <udd_interrupt+0x26>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
80004eb4:	fe 68 01 34 	mov	r8,-130764
80004eb8:	70 08       	ld.w	r8,r8[0x0]
80004eba:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80004ebe:	fe 91 ff 20 	brne	80004cfe <udd_interrupt+0x166>
80004ec2:	30 48       	mov	r8,4
80004ec4:	e0 6a 20 00 	mov	r10,8192
80004ec8:	e0 69 0a 60 	mov	r9,2656
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80004ecc:	fe 6c 02 20 	mov	r12,-130528
80004ed0:	f0 0c 00 0b 	add	r11,r8,r12
80004ed4:	e0 6c 10 00 	mov	r12,4096
80004ed8:	97 0c       	st.w	r11[0x0],r12
				udd_disable_endpoint_interrupt(ep);
80004eda:	fe 6b 00 00 	mov	r11,-131072
80004ede:	97 5a       	st.w	r11[0x14],r10

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
80004ee0:	30 0b       	mov	r11,0
80004ee2:	72 0a       	ld.w	r10,r9[0x0]
80004ee4:	f5 db d3 a1 	bfins	r10,r11,0x1d,0x1
80004ee8:	93 0a       	st.w	r9[0x0],r10
				udd_disable_endpoint_bank_autoswitch(ep);
80004eea:	fe 69 01 00 	mov	r9,-130816
80004eee:	f0 09 00 0a 	add	r10,r8,r9
80004ef2:	74 09       	ld.w	r9,r10[0x0]
80004ef4:	a9 d9       	cbr	r9,0x9
80004ef6:	95 09       	st.w	r10[0x0],r9
				udd_enable_stall_handshake(ep);
80004ef8:	e0 38 fe 10 	sub	r8,130576
80004efc:	e8 69 00 00 	mov	r9,524288
80004f00:	91 09       	st.w	r8[0x0],r9
				udd_reset_data_toggle(ep);
80004f02:	e4 69 00 00 	mov	r9,262144
80004f06:	91 09       	st.w	r8[0x0],r9
80004f08:	fe 9f fe 5b 	bral	80004bbe <udd_interrupt+0x26>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80004f0c:	e0 67 0a 90 	mov	r7,2704
80004f10:	6e 08       	ld.w	r8,r7[0x0]
80004f12:	58 08       	cp.w	r8,0
80004f14:	c1 b0       	breq	80004f4a <udd_interrupt+0x3b2>


static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80004f16:	e0 64 0c 58 	mov	r4,3160
80004f1a:	68 48       	ld.w	r8,r4[0x10]
80004f1c:	58 08       	cp.w	r8,0
80004f1e:	c0 20       	breq	80004f22 <udd_interrupt+0x38a>
		udd_g_ctrlreq.callback();
80004f20:	5d 18       	icall	r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004f22:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80004f26:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80004f28:	30 1a       	mov	r10,1
80004f2a:	fe 69 02 20 	mov	r9,-130528
80004f2e:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004f30:	ed b8 00 10 	bld	r8,0x10
80004f34:	c0 20       	breq	80004f38 <udd_interrupt+0x3a0>
      cpu_irq_enable();
80004f36:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80004f38:	fe 68 01 60 	mov	r8,-130720
80004f3c:	30 29       	mov	r9,2
80004f3e:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
80004f40:	30 08       	mov	r8,0
	udd_g_ctrlreq.over_under_run = NULL;
	udd_g_ctrlreq.payload_size = 0;
80004f42:	a8 68       	st.h	r4[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80004f44:	8f 08       	st.w	r7[0x0],r8
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);

	udd_g_ctrlreq.callback = NULL;
80004f46:	89 48       	st.w	r4[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80004f48:	89 58       	st.w	r4[0x14],r8

		// Reinitializes control endpoint management
		udd_ctrl_init();
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80004f4a:	fe 68 01 30 	mov	r8,-130768
80004f4e:	70 05       	ld.w	r5,r8[0x0]
80004f50:	eb d5 c2 8b 	bfextu	r5,r5,0x14,0xb
80004f54:	58 85       	cp.w	r5,8
80004f56:	e0 80 00 89 	breq	80005068 <udd_interrupt+0x4d0>


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80004f5a:	30 58       	mov	r8,5
80004f5c:	8f 08       	st.w	r7[0x0],r8
	udd_enable_stall_handshake(0);
80004f5e:	e8 69 00 00 	mov	r9,524288
80004f62:	fe 68 01 f0 	mov	r8,-130576
80004f66:	91 09       	st.w	r8[0x0],r9

	// Decode setup request
	if (udc_process_setup() == false) {
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
80004f68:	30 49       	mov	r9,4
80004f6a:	fe 68 01 60 	mov	r8,-130720
80004f6e:	91 09       	st.w	r8[0x0],r9
80004f70:	fe 9f fe 27 	bral	80004bbe <udd_interrupt+0x26>
		// Reset endpoint control management
		udd_ctrl_init();
		goto udd_interrupt_end;
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80004f74:	fe 69 00 10 	mov	r9,-131056
80004f78:	72 09       	ld.w	r9,r9[0x0]
80004f7a:	ed b9 00 00 	bld	r9,0x0
80004f7e:	c0 61       	brne	80004f8a <udd_interrupt+0x3f2>
80004f80:	70 08       	ld.w	r8,r8[0x0]
80004f82:	ed b8 00 00 	bld	r8,0x0
80004f86:	e0 80 01 34 	breq	800051ee <udd_interrupt+0x656>
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80004f8a:	fe 68 00 10 	mov	r8,-131056
80004f8e:	70 08       	ld.w	r8,r8[0x0]
80004f90:	ed b8 00 04 	bld	r8,0x4
80004f94:	c4 a1       	brne	80005028 <udd_interrupt+0x490>
80004f96:	fe 68 00 04 	mov	r8,-131068
80004f9a:	70 08       	ld.w	r8,r8[0x0]
80004f9c:	ed b8 00 04 	bld	r8,0x4
80004fa0:	c4 41       	brne	80005028 <udd_interrupt+0x490>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80004fa2:	fe 6a 08 00 	mov	r10,-129024

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );
80004fa6:	fe 69 08 04 	mov	r9,-129020
		goto udd_interrupt_end;
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80004faa:	74 08       	ld.w	r8,r10[0x0]
80004fac:	af c8       	cbr	r8,0xe
80004fae:	95 08       	st.w	r10[0x0],r8

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );
80004fb0:	72 08       	ld.w	r8,r9[0x0]
80004fb2:	ed b8 00 0e 	bld	r8,0xe
80004fb6:	cf d1       	brne	80004fb0 <udd_interrupt+0x418>

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80004fb8:	fe 69 00 14 	mov	r9,-131052
		udd_enable_suspend_interrupt();
80004fbc:	30 18       	mov	r8,1

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80004fbe:	31 0a       	mov	r10,16
		udd_enable_suspend_interrupt();
		udd_sleep_mode(true); // Enter in IDLE mode
80004fc0:	10 9c       	mov	r12,r8

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80004fc2:	93 0a       	st.w	r9[0x0],r10
		udd_enable_suspend_interrupt();
80004fc4:	fe 69 00 18 	mov	r9,-131048
80004fc8:	93 08       	st.w	r9[0x0],r8
		udd_sleep_mode(true); // Enter in IDLE mode
80004fca:	fe b0 f9 5f 	rcall	80004288 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
80004fce:	fe b0 f0 a1 	rcall	80003110 <ui_device_resume_action>
#endif
		goto udd_interrupt_end;
80004fd2:	fe 9f fd f6 	bral	80004bbe <udd_interrupt+0x26>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80004fd6:	e0 67 0a 90 	mov	r7,2704
80004fda:	6e 08       	ld.w	r8,r7[0x0]
80004fdc:	58 18       	cp.w	r8,1
80004fde:	e0 80 00 9c 	breq	80005116 <udd_interrupt+0x57e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80004fe2:	58 28       	cp.w	r8,2
80004fe4:	5f 09       	sreq	r9
80004fe6:	58 48       	cp.w	r8,4
80004fe8:	5f 08       	sreq	r8
80004fea:	12 48       	or	r8,r9
80004fec:	e0 80 00 de 	breq	800051a8 <udd_interrupt+0x610>


static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80004ff0:	e0 64 0c 58 	mov	r4,3160
80004ff4:	68 48       	ld.w	r8,r4[0x10]
80004ff6:	58 08       	cp.w	r8,0
80004ff8:	c0 20       	breq	80004ffc <udd_interrupt+0x464>
		udd_g_ctrlreq.callback();
80004ffa:	5d 18       	icall	r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004ffc:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80005000:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80005002:	30 1a       	mov	r10,1
80005004:	fe 69 02 20 	mov	r9,-130528
80005008:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000500a:	ed b8 00 10 	bld	r8,0x10
8000500e:	c0 20       	breq	80005012 <udd_interrupt+0x47a>
      cpu_irq_enable();
80005010:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80005012:	fe 68 01 60 	mov	r8,-130720
80005016:	30 29       	mov	r9,2
80005018:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
8000501a:	30 08       	mov	r8,0
	udd_g_ctrlreq.over_under_run = NULL;
	udd_g_ctrlreq.payload_size = 0;
	udd_ep_control_state = UDD_EPCTRL_SETUP;
8000501c:	8f 08       	st.w	r7[0x0],r8
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);

	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;
	udd_g_ctrlreq.payload_size = 0;
8000501e:	a8 68       	st.h	r4[0xc],r8
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);

	udd_g_ctrlreq.callback = NULL;
80005020:	89 48       	st.w	r4[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80005022:	89 58       	st.w	r4[0x14],r8
80005024:	fe 9f fd cd 	bral	80004bbe <udd_interrupt+0x26>
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
	}

	if (Is_otg_vbus_transition()) {
80005028:	fe 69 08 04 	mov	r9,-129020
8000502c:	72 08       	ld.w	r8,r9[0x0]
8000502e:	ed b8 00 01 	bld	r8,0x1
80005032:	fe 91 fd c6 	brne	80004bbe <udd_interrupt+0x26>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
80005036:	fe 68 08 00 	mov	r8,-129024
8000503a:	70 0a       	ld.w	r10,r8[0x0]
8000503c:	af ca       	cbr	r10,0xe
8000503e:	91 0a       	st.w	r8[0x0],r10
		otg_ack_vbus_transition();
80005040:	30 2b       	mov	r11,2
80005042:	fe 6a 08 08 	mov	r10,-129016
80005046:	95 0b       	st.w	r10[0x0],r11
		otg_freeze_clock();
80005048:	70 0a       	ld.w	r10,r8[0x0]
8000504a:	af aa       	sbr	r10,0xe
8000504c:	91 0a       	st.w	r8[0x0],r10
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
8000504e:	72 08       	ld.w	r8,r9[0x0]
80005050:	ed b8 00 0b 	bld	r8,0xb
80005054:	e0 80 00 b4 	breq	800051bc <udd_interrupt+0x624>
			udd_attach();
		} else {
			udd_detach();
80005058:	fe b0 fb e6 	rcall	80004824 <udd_detach>
8000505c:	fe 9f fd b1 	bral	80004bbe <udd_interrupt+0x26>
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
		// IN packet sent
		udd_ctrl_in_sent();
80005060:	fe b0 f9 f6 	rcall	8000444c <udd_ctrl_in_sent>
80005064:	fe 9f fd ad 	bral	80004bbe <udd_interrupt+0x26>
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80005068:	fc 18 e0 00 	movh	r8,0xe000
8000506c:	e0 66 0c 58 	mov	r6,3160
80005070:	11 89       	ld.ub	r9,r8[0x0]
80005072:	0c 98       	mov	r8,r6
80005074:	10 c9       	st.b	r8++,r9
80005076:	30 19       	mov	r9,1
80005078:	ea 19 e0 00 	orh	r9,0xe000
8000507c:	13 89       	ld.ub	r9,r9[0x0]
8000507e:	b0 89       	st.b	r8[0x0],r9
80005080:	30 28       	mov	r8,2
80005082:	ea 18 e0 00 	orh	r8,0xe000
80005086:	11 88       	ld.ub	r8,r8[0x0]
80005088:	ac a8       	st.b	r6[0x2],r8
8000508a:	30 38       	mov	r8,3
8000508c:	ea 18 e0 00 	orh	r8,0xe000
80005090:	11 88       	ld.ub	r8,r8[0x0]
80005092:	ac b8       	st.b	r6[0x3],r8
80005094:	30 48       	mov	r8,4
80005096:	ea 18 e0 00 	orh	r8,0xe000
8000509a:	11 88       	ld.ub	r8,r8[0x0]
8000509c:	ac c8       	st.b	r6[0x4],r8
8000509e:	30 58       	mov	r8,5
800050a0:	ea 18 e0 00 	orh	r8,0xe000
800050a4:	11 88       	ld.ub	r8,r8[0x0]
800050a6:	ac d8       	st.b	r6[0x5],r8
800050a8:	30 68       	mov	r8,6
800050aa:	ea 18 e0 00 	orh	r8,0xe000
800050ae:	11 88       	ld.ub	r8,r8[0x0]
800050b0:	ac e8       	st.b	r6[0x6],r8
800050b2:	30 78       	mov	r8,7
800050b4:	ea 18 e0 00 	orh	r8,0xe000
800050b8:	11 88       	ld.ub	r8,r8[0x0]
800050ba:	ac f8       	st.b	r6[0x7],r8
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
800050bc:	8c 18       	ld.sh	r8,r6[0x2]
800050be:	5c c8       	swap.bh	r8
800050c0:	ac 18       	st.h	r6[0x2],r8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
800050c2:	8c 28       	ld.sh	r8,r6[0x4]
800050c4:	5c c8       	swap.bh	r8
800050c6:	ac 28       	st.h	r6[0x4],r8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
800050c8:	8c 38       	ld.sh	r8,r6[0x6]
800050ca:	5c c8       	swap.bh	r8
800050cc:	ac 38       	st.h	r6[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
800050ce:	e0 a0 17 23 	rcall	80007f14 <udc_process_setup>
800050d2:	fe 90 ff 44 	breq	80004f5a <udd_interrupt+0x3c2>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return;
	}
	udd_ack_setup_received(0);
800050d6:	30 49       	mov	r9,4
800050d8:	fe 68 01 60 	mov	r8,-130720
800050dc:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
800050de:	30 09       	mov	r9,0
800050e0:	0d 8a       	ld.ub	r10,r6[0x0]
800050e2:	f2 0a 18 00 	cp.b	r10,r9
800050e6:	e0 85 01 00 	brlt	800052e6 <udd_interrupt+0x74e>
		udd_ctrl_prev_payload_nb_trans = 0;
		udd_ctrl_payload_nb_trans = 0;
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
		udd_ctrl_in_sent(); // Send first data transfer
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
800050ea:	8c 3a       	ld.sh	r10,r6[0x6]
800050ec:	30 09       	mov	r9,0
800050ee:	f2 0a 19 00 	cp.h	r10,r9
800050f2:	c6 91       	brne	800051c4 <udd_interrupt+0x62c>

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
800050f4:	30 39       	mov	r9,3
800050f6:	8f 09       	st.w	r7[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800050f8:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800050fc:	d3 03       	ssrf	0x10

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
800050fe:	30 1b       	mov	r11,1
80005100:	91 0b       	st.w	r8[0x0],r11
	udd_enable_in_send_interrupt(0);
80005102:	fe 6a 01 f0 	mov	r10,-130576
80005106:	95 0b       	st.w	r10[0x0],r11
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80005108:	91 05       	st.w	r8[0x0],r5
	udd_enable_nak_out_interrupt(0);
8000510a:	95 05       	st.w	r10[0x0],r5
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000510c:	ed b9 00 10 	bld	r9,0x10
80005110:	c4 91       	brne	800051a2 <udd_interrupt+0x60a>
      cpu_irq_enable();
   }

	barrier();
80005112:	fe 9f fd 56 	bral	80004bbe <udd_interrupt+0x26>
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80005116:	72 0b       	ld.w	r11,r9[0x0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80005118:	e0 64 0c 58 	mov	r4,3160
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
8000511c:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80005120:	e0 66 0a 8a 	mov	r6,2698
80005124:	88 69       	ld.sh	r9,r4[0xc]
80005126:	8c 0c       	ld.sh	r12,r6[0x0]
80005128:	eb d9 c0 10 	bfextu	r5,r9,0x0,0x10
8000512c:	f1 dc c0 10 	bfextu	r8,r12,0x0,0x10
80005130:	f6 08 00 0a 	add	r10,r11,r8
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80005134:	14 35       	cp.w	r5,r10
80005136:	c0 44       	brge	8000513e <udd_interrupt+0x5a6>
80005138:	18 19       	sub	r9,r12
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000513a:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
	for (i = 0; i < nb_data; i++) {
8000513e:	68 29       	ld.w	r9,r4[0x8]
80005140:	58 0b       	cp.w	r11,0
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80005142:	e0 80 00 df 	breq	80005300 <udd_interrupt+0x768>
80005146:	10 09       	add	r9,r8
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80005148:	fc 18 e0 00 	movh	r8,0xe000
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
8000514c:	11 3a       	ld.ub	r10,r8++
8000514e:	12 ca       	st.b	r9++,r10
80005150:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80005154:	f6 0a 19 00 	cp.h	r10,r11
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80005158:	cf a3       	brcs	8000514c <udd_interrupt+0x5b4>
8000515a:	f6 0c 00 0c 	add	r12,r11,r12

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
8000515e:	5c 8c       	casts.h	r12
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80005160:	ac 0c       	st.h	r6[0x0],r12

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80005162:	30 88       	mov	r8,8
80005164:	e0 66 0a 8a 	mov	r6,2698
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80005168:	f0 0b 19 00 	cp.h	r11,r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
8000516c:	c7 50       	breq	80005256 <udd_interrupt+0x6be>
8000516e:	a8 6c       	st.h	r4[0xc],r12
			if (!udd_g_ctrlreq.over_under_run()) {
80005170:	68 5c       	ld.w	r12,r4[0x14]
80005172:	58 0c       	cp.w	r12,0
				udd_ack_out_received(0);
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80005174:	c0 30       	breq	8000517a <udd_interrupt+0x5e2>
80005176:	5d 1c       	icall	r12
80005178:	c6 20       	breq	8000523c <udd_interrupt+0x6a4>
8000517a:	30 28       	mov	r8,2

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
8000517c:	fe 69 01 60 	mov	r9,-130720

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005180:	93 08       	st.w	r9[0x0],r8
80005182:	30 38       	mov	r8,3
	cpu_irq_disable();
80005184:	8f 08       	st.w	r7[0x0],r8

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80005186:	e1 b8 00 00 	mfsr	r8,0x0
	udd_enable_in_send_interrupt(0);
8000518a:	d3 03       	ssrf	0x10
8000518c:	30 1b       	mov	r11,1
8000518e:	93 0b       	st.w	r9[0x0],r11
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80005190:	fe 6a 01 f0 	mov	r10,-130576
	udd_enable_nak_out_interrupt(0);
80005194:	95 0b       	st.w	r10[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005196:	30 8b       	mov	r11,8
80005198:	93 0b       	st.w	r9[0x0],r11
8000519a:	95 0b       	st.w	r10[0x0],r11
      cpu_irq_enable();
8000519c:	ed b8 00 10 	bld	r8,0x10
   }

	barrier();
800051a0:	cb 90       	breq	80005112 <udd_interrupt+0x57a>


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
800051a2:	d5 03       	csrf	0x10
800051a4:	fe 9f fd 0d 	bral	80004bbe <udd_interrupt+0x26>
	udd_enable_stall_handshake(0);
800051a8:	30 58       	mov	r8,5
800051aa:	8f 08       	st.w	r7[0x0],r8
800051ac:	e8 69 00 00 	mov	r9,524288
800051b0:	fe 68 01 f0 	mov	r8,-130576
		otg_unfreeze_clock();
		otg_ack_vbus_transition();
		otg_freeze_clock();
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
			udd_attach();
800051b4:	e0 64 0c 58 	mov	r4,3160
800051b8:	91 09       	st.w	r8[0x0],r9
800051ba:	c2 1b       	rjmp	80004ffc <udd_interrupt+0x464>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
		udd_ctrl_payload_nb_trans = 0;
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
800051bc:	fe b0 fb 5c 	rcall	80004874 <udd_attach>
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
800051c0:	fe 9f fc ff 	bral	80004bbe <udd_interrupt+0x26>
		udd_ctrl_payload_nb_trans = 0;
800051c4:	30 1a       	mov	r10,1
800051c6:	8f 0a       	st.w	r7[0x0],r10
		udd_ctrl_payload_nb_trans = 0;
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
800051c8:	e0 6a 0a 5c 	mov	r10,2652

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800051cc:	b4 09       	st.h	r10[0x0],r9
800051ce:	e0 6a 0a 8a 	mov	r10,2698
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
800051d2:	b4 09       	st.h	r10[0x0],r9
800051d4:	31 09       	mov	r9,16
800051d6:	91 09       	st.w	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800051d8:	e1 b8 00 00 	mfsr	r8,0x0
800051dc:	d3 03       	ssrf	0x10
      cpu_irq_enable();
   }

	barrier();
800051de:	fe 6a 01 f0 	mov	r10,-130576
		udd_ctrl_init();
		goto udd_interrupt_end;
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
		otg_unfreeze_clock();
800051e2:	95 09       	st.w	r10[0x0],r9
800051e4:	ed b8 00 10 	bld	r8,0x10
800051e8:	cd d1       	brne	800051a2 <udd_interrupt+0x60a>
800051ea:	fe 9f fc ea 	bral	80004bbe <udd_interrupt+0x26>
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
800051ee:	fe 68 08 00 	mov	r8,-129024
800051f2:	70 09       	ld.w	r9,r8[0x0]
		udd_enable_wake_up_interrupt();
800051f4:	af c9       	cbr	r9,0xe
800051f6:	91 09       	st.w	r8[0x0],r9
800051f8:	fe 69 00 14 	mov	r9,-131052
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
800051fc:	30 1a       	mov	r10,1
800051fe:	93 0a       	st.w	r9[0x0],r10
80005200:	fe 69 00 18 	mov	r9,-131048
		udd_sleep_mode(false); // Enter in SUSPEND mode
80005204:	31 0a       	mov	r10,16
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
80005206:	93 0a       	st.w	r9[0x0],r10
80005208:	70 09       	ld.w	r9,r8[0x0]
#endif
		goto udd_interrupt_end;
8000520a:	af a9       	sbr	r9,0xe
8000520c:	91 09       	st.w	r8[0x0],r9

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
8000520e:	fe b0 f8 3d 	rcall	80004288 <udd_sleep_mode>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005212:	fe b0 ef df 	rcall	800031d0 <ui_device_suspend_action>
	cpu_irq_disable();
80005216:	fe 9f fc d4 	bral	80004bbe <udd_interrupt+0x26>

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
	udd_enable_in_send_interrupt(0);
8000521a:	30 3b       	mov	r11,3
8000521c:	93 0b       	st.w	r9[0x0],r11
8000521e:	e1 b9 00 00 	mfsr	r9,0x0
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80005222:	d3 03       	ssrf	0x10
	udd_enable_nak_out_interrupt(0);
80005224:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005226:	fe 6b 01 f0 	mov	r11,-130576
8000522a:	97 08       	st.w	r11[0x0],r8
      cpu_irq_enable();
   }

	barrier();
8000522c:	30 88       	mov	r8,8
8000522e:	95 08       	st.w	r10[0x0],r8


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80005230:	97 08       	st.w	r11[0x0],r8
80005232:	ed b9 00 10 	bld	r9,0x10
	udd_enable_stall_handshake(0);
80005236:	cb 61       	brne	800051a2 <udd_interrupt+0x60a>
80005238:	fe 9f fc c3 	bral	80004bbe <udd_interrupt+0x26>
8000523c:	30 58       	mov	r8,5
		}
		if (!udd_g_ctrlreq.over_under_run()) {
			// No new payload buffer delivered
			udd_ctrl_stall_data();
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
8000523e:	8f 08       	st.w	r7[0x0],r8
80005240:	e8 69 00 00 	mov	r9,524288
80005244:	fe 68 01 f0 	mov	r8,-130576
80005248:	91 09       	st.w	r8[0x0],r9
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
8000524a:	30 29       	mov	r9,2
8000524c:	fe 68 01 60 	mov	r8,-130720
80005250:	91 09       	st.w	r8[0x0],r9
80005252:	fe 9f fc b6 	bral	80004bbe <udd_interrupt+0x26>
80005256:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000525a:	e0 65 0a 5c 	mov	r5,2652
8000525e:	e0 68 0c 58 	mov	r8,3160
		udd_ack_out_received(0);
		udd_ctrl_send_zlp_in();
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80005262:	8a 89       	ld.uh	r9,r5[0x0]
80005264:	f4 09 00 09 	add	r9,r10,r9
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80005268:	88 ba       	ld.uh	r10,r4[0x6]
8000526a:	12 3a       	cp.w	r10,r9
8000526c:	fe 9a ff 81 	brle	8000516e <udd_interrupt+0x5d6>
			udd_ctrl_stall_data();
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80005270:	90 69       	ld.sh	r9,r8[0xc]
			udd_ack_out_received(0);
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80005272:	f8 09 19 00 	cp.h	r9,r12
80005276:	c0 d1       	brne	80005290 <udd_interrupt+0x6f8>
80005278:	70 5c       	ld.w	r12,r8[0x14]
8000527a:	58 0c       	cp.w	r12,0
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
8000527c:	ce 00       	breq	8000523c <udd_interrupt+0x6a4>
8000527e:	5d 1c       	icall	r12
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80005280:	cd e0       	breq	8000523c <udd_interrupt+0x6a4>
80005282:	8c 09       	ld.sh	r9,r6[0x0]
80005284:	8a 08       	ld.sh	r8,r5[0x0]
80005286:	f2 08 00 08 	add	r8,r9,r8
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000528a:	aa 08       	st.h	r5[0x0],r8
8000528c:	30 08       	mov	r8,0
8000528e:	ac 08       	st.h	r6[0x0],r8
80005290:	fe 68 01 60 	mov	r8,-130720
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
80005294:	30 29       	mov	r9,2
80005296:	91 09       	st.w	r8[0x0],r9
80005298:	c9 eb       	rjmp	800051d4 <udd_interrupt+0x63c>
8000529a:	fc 1b 02 00 	movh	r11,0x200
8000529e:	30 1c       	mov	r12,1
800052a0:	e0 69 0a 60 	mov	r9,2656
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
			}
			udd_disable_endpoint_dma_interrupt(ep);
800052a4:	f8 08 15 04 	lsl	r8,r12,0x4
800052a8:	e0 38 fd 00 	sub	r8,130304
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
800052ac:	70 3a       	ld.w	r10,r8[0xc]
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
800052ae:	ed ba 00 00 	bld	r10,0x0
800052b2:	fe 90 fc 86 	breq	80004bbe <udd_interrupt+0x26>
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
800052b6:	fe 6a 00 00 	mov	r10,-131072
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
800052ba:	95 5b       	st.w	r10[0x14],r11
800052bc:	70 38       	ld.w	r8,r8[0xc]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
			}
			udd_ep_trans_done(ep);
800052be:	b1 88       	lsr	r8,0x10
800052c0:	f3 fa 10 03 	ld.wne	r10,r9[0xc]
800052c4:	f5 d8 e1 18 	subne	r8,r10,r8
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
800052c8:	f3 f8 1a 02 	st.wne	r9[0x8],r8
800052cc:	f3 f8 1a 03 	st.wne	r9[0xc],r8
800052d0:	fe b0 f9 a8 	rcall	80004620 <udd_ep_trans_done>
	}
	udd_ack_setup_received(0);

	if (Udd_setup_is_in()) {
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
800052d4:	fe 9f fc 75 	bral	80004bbe <udd_interrupt+0x26>
		udd_ctrl_payload_nb_trans = 0;
800052d8:	e0 69 0a 60 	mov	r9,2656
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
800052dc:	fc 1b 04 00 	movh	r11,0x400
		udd_ctrl_in_sent(); // Send first data transfer
800052e0:	2e c9       	sub	r9,-20
800052e2:	30 2c       	mov	r12,2
800052e4:	ce 0b       	rjmp	800052a4 <udd_interrupt+0x70c>
800052e6:	30 08       	mov	r8,0
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
800052e8:	e0 69 0a 5c 	mov	r9,2652
800052ec:	b2 08       	st.h	r9[0x0],r8
800052ee:	e0 69 0a 8a 	mov	r9,2698
800052f2:	b2 08       	st.h	r9[0x0],r8
800052f4:	30 28       	mov	r8,2
800052f6:	8f 08       	st.w	r7[0x0],r8
800052f8:	fe b0 f8 aa 	rcall	8000444c <udd_ctrl_in_sent>
800052fc:	fe 9f fc 61 	bral	80004bbe <udd_interrupt+0x26>
80005300:	ac 0c       	st.h	r6[0x0],r12
80005302:	c3 6b       	rjmp	8000516e <udd_interrupt+0x5d6>

80005304 <uhd_get_speed>:
	cpu_irq_restore(flags);
}

uhd_speed_t uhd_get_speed(void)
{
	switch (uhd_get_speed_mode()) {
80005304:	fe 68 08 04 	mov	r8,-129020
80005308:	70 08       	ld.w	r8,r8[0x0]
8000530a:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
8000530e:	58 38       	cp.w	r8,3
80005310:	c0 50       	breq	8000531a <uhd_get_speed+0x16>
80005312:	48 39       	lddpc	r9,8000531c <uhd_get_speed+0x18>
80005314:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]

	default:
		Assert(false);
		return UHD_SPEED_LOW;
	}
}
80005318:	5e fc       	retal	r12
	cpu_irq_restore(flags);
}

uhd_speed_t uhd_get_speed(void)
{
	switch (uhd_get_speed_mode()) {
8000531a:	5e fd       	retal	0
8000531c:	80 00       	ld.sh	r0,r0[0x0]
8000531e:	f7 80       	*unknown*

80005320 <uhd_get_frame_number>:
	}
}

uint16_t uhd_get_frame_number(void)
{
	return uhd_get_sof_number();
80005320:	fe 68 04 20 	mov	r8,-130016
80005324:	70 0c       	ld.w	r12,r8[0x0]
}
80005326:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
8000532a:	5e fc       	retal	r12

8000532c <uhd_get_microframe_number>:

uint16_t uhd_get_microframe_number(void)
{
	return uhd_get_microsof_number();
8000532c:	fe 68 00 00 	mov	r8,-131072
80005330:	f0 fc 04 20 	ld.w	r12,r8[1056]
}
80005334:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
80005338:	5e fc       	retal	r12
8000533a:	d7 03       	nop

8000533c <uhd_send_reset>:

void uhd_send_reset(uhd_callback_reset_t callback)
{
	uhd_reset_callback = callback;
8000533c:	e0 69 0a 98 	mov	r9,2712
	uhd_start_reset();
80005340:	93 0c       	st.w	r9[0x0],r12
80005342:	fe 68 04 00 	mov	r8,-130048
80005346:	70 09       	ld.w	r9,r8[0x0]
80005348:	a9 b9       	sbr	r9,0x9
}
8000534a:	91 09       	st.w	r8[0x0],r9
8000534c:	5e fc       	retal	r12
8000534e:	d7 03       	nop

80005350 <uhd_suspend>:

void uhd_suspend(void)
{
80005350:	eb cd 40 80 	pushm	r7,lr
	if (uhd_ctrl_request_timeout) {
80005354:	e0 68 0c 80 	mov	r8,3200
80005358:	90 08       	ld.sh	r8,r8[0x0]
8000535a:	58 08       	cp.w	r8,0
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
8000535c:	c4 d1       	brne	800053f6 <uhd_suspend+0xa6>
8000535e:	fe 69 05 c4 	mov	r9,-129596
		uhd_freeze_pipe(pipe);
80005362:	72 0e       	ld.w	lr,r9[0x0]
80005364:	fe 69 05 f4 	mov	r9,-129548
80005368:	e2 68 00 00 	mov	r8,131072
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
8000536c:	93 08       	st.w	r9[0x0],r8
8000536e:	fe 69 05 c8 	mov	r9,-129592
		uhd_freeze_pipe(pipe);
80005372:	72 0c       	ld.w	r12,r9[0x0]
80005374:	fe 69 05 f8 	mov	r9,-129544
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80005378:	93 08       	st.w	r9[0x0],r8
8000537a:	fe 69 05 cc 	mov	r9,-129588
		uhd_freeze_pipe(pipe);
8000537e:	72 0b       	ld.w	r11,r9[0x0]
80005380:	fe 69 05 fc 	mov	r9,-129540
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80005384:	93 08       	st.w	r9[0x0],r8
80005386:	fe 69 05 d0 	mov	r9,-129584
		uhd_freeze_pipe(pipe);
8000538a:	72 0a       	ld.w	r10,r9[0x0]
8000538c:	fe 69 06 00 	mov	r9,-129536
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80005390:	93 08       	st.w	r9[0x0],r8
80005392:	10 5e       	eor	lr,r8
80005394:	10 5c       	eor	r12,r8
80005396:	10 5b       	eor	r11,r8
80005398:	10 5a       	eor	r10,r8
8000539a:	fe 69 05 d4 	mov	r9,-129580
		uhd_freeze_pipe(pipe);
8000539e:	fe 67 06 04 	mov	r7,-129532
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
800053a2:	72 09       	ld.w	r9,r9[0x0]
800053a4:	fd de c2 21 	bfextu	lr,lr,0x11,0x1
800053a8:	8f 08       	st.w	r7[0x0],r8
800053aa:	10 59       	eor	r9,r8
800053ac:	f9 dc c2 21 	bfextu	r12,r12,0x11,0x1
800053b0:	f3 d9 c2 21 	bfextu	r9,r9,0x11,0x1
800053b4:	a3 6c       	lsl	r12,0x2
800053b6:	f7 db c2 21 	bfextu	r11,r11,0x11,0x1
800053ba:	f9 ee 10 1e 	or	lr,r12,lr<<0x1
800053be:	f5 da c2 21 	bfextu	r10,r10,0x11,0x1
800053c2:	fd eb 10 3b 	or	r11,lr,r11<<0x3
800053c6:	f7 ea 10 4a 	or	r10,r11,r10<<0x4
800053ca:	f5 e9 10 5a 	or	r10,r10,r9<<0x5
800053ce:	fe 69 05 d8 	mov	r9,-129576
800053d2:	72 09       	ld.w	r9,r9[0x0]
800053d4:	10 59       	eor	r9,r8
800053d6:	f3 d9 c2 21 	bfextu	r9,r9,0x11,0x1
800053da:	f5 e9 10 69 	or	r9,r10,r9<<0x6
		uhd_freeze_pipe(pipe);
800053de:	fe 6a 06 08 	mov	r10,-129528
800053e2:	95 08       	st.w	r10[0x0],r8
800053e4:	e0 68 0b 15 	mov	r8,2837
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
800053e8:	b0 89       	st.b	r8[0x0],r9
800053ea:	30 39       	mov	r9,3
800053ec:	e0 68 0b 14 	mov	r8,2836

void uhd_suspend(void)
{
	if (uhd_ctrl_request_timeout) {
		// Delay suspend after setup requests
		uhd_b_suspend_requested = true;
800053f0:	b0 89       	st.b	r8[0x0],r9
800053f2:	e3 cd 80 80 	ldm	sp++,r7,pc
		return;
800053f6:	30 19       	mov	r9,1
800053f8:	e0 68 0b 1c 	mov	r8,2844
800053fc:	b0 89       	st.b	r8[0x0],r9
800053fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80005402:	d7 03       	nop

80005404 <uhd_is_suspend>:
80005404:	fe 68 04 00 	mov	r8,-130048
80005408:	70 0c       	ld.w	r12,r8[0x0]
8000540a:	ec 1c 01 00 	eorl	r12,0x100
}

bool uhd_is_suspend(void)
{
	return !Is_uhd_sof_enabled();
}
8000540e:	f9 dc c1 01 	bfextu	r12,r12,0x8,0x1
80005412:	5e fc       	retal	r12

80005414 <uhd_sleep_mode>:
/*! \brief Manages the sleep mode following the USBB state
 *
 * \param new_state  New USBB state
 */
static void uhd_sleep_mode(enum uhd_usbb_state_enum new_state)
{
80005414:	d4 01       	pushm	lr
80005416:	20 6d       	sub	sp,24
		SLEEPMGR_STOP,   // UHD_STATE_NO_VBUS
#endif
		SLEEPMGR_IDLE,   // UHD_STATE_DISCONNECT
		SLEEPMGR_STATIC, // UHD_STATE_SUSPEND
		SLEEPMGR_IDLE,   // UHD_STATE_IDLE
	};
80005418:	4a 99       	lddpc	r9,800054bc <uhd_sleep_mode+0xa8>
8000541a:	f2 ea 00 10 	ld.d	r10,r9[16]
8000541e:	fa eb 00 10 	st.d	sp[16],r10
80005422:	f2 ea 00 00 	ld.d	r10,r9[0]
80005426:	fa eb 00 00 	st.d	sp[0],r10
8000542a:	f2 ea 00 08 	ld.d	r10,r9[8]
8000542e:	fa eb 00 08 	st.d	sp[8],r10
	static enum uhd_usbb_state_enum uhd_state = UHD_STATE_OFF;

	if (uhd_state == new_state) {
80005432:	e0 69 0b 18 	mov	r9,2840
80005436:	72 08       	ld.w	r8,r9[0x0]
80005438:	18 38       	cp.w	r8,r12
		return; // No change
	}
	if (new_state != UHD_STATE_OFF) {
8000543a:	c3 c0       	breq	800054b2 <uhd_sleep_mode+0x9e>
8000543c:	58 0c       	cp.w	r12,0
		// Lock new limit
		sleepmgr_lock_mode( sleep_mode[new_state] );
8000543e:	c1 b0       	breq	80005474 <uhd_sleep_mode+0x60>
80005440:	fa ca ff e8 	sub	r10,sp,-24
80005444:	f4 0c 00 28 	add	r8,r10,r12<<0x2
80005448:	e0 6b 0c 84 	mov	r11,3204
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
8000544c:	f0 fa ff e8 	ld.w	r10,r8[-24]
80005450:	3f f8       	mov	r8,-1
80005452:	f6 0a 07 0e 	ld.ub	lr,r11[r10]
80005456:	f0 0e 18 00 	cp.b	lr,r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000545a:	c1 e0       	breq	80005496 <uhd_sleep_mode+0x82>
	cpu_irq_disable();
8000545c:	e1 b8 00 00 	mfsr	r8,0x0
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80005460:	d3 03       	ssrf	0x10
80005462:	f6 0a 07 0e 	ld.ub	lr,r11[r10]
80005466:	2f fe       	sub	lr,-1
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005468:	f6 0a 0b 0e 	st.b	r11[r10],lr
8000546c:	ed b8 00 10 	bld	r8,0x10
	}
	if (uhd_state != UHD_STATE_OFF) {
80005470:	c2 31       	brne	800054b6 <uhd_sleep_mode+0xa2>
80005472:	72 08       	ld.w	r8,r9[0x0]
		// Unlock old limit
		sleepmgr_unlock_mode( sleep_mode[uhd_state] );
80005474:	58 08       	cp.w	r8,0
80005476:	c1 d0       	breq	800054b0 <uhd_sleep_mode+0x9c>
80005478:	fa ca ff e8 	sub	r10,sp,-24
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
8000547c:	f4 08 00 28 	add	r8,r10,r8<<0x2
80005480:	e0 6b 0c 84 	mov	r11,3204
80005484:	f0 fa ff e8 	ld.w	r10,r8[-24]
80005488:	30 08       	mov	r8,0
8000548a:	f6 0a 07 0e 	ld.ub	lr,r11[r10]
8000548e:	f0 0e 18 00 	cp.b	lr,r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005492:	c0 31       	brne	80005498 <uhd_sleep_mode+0x84>
80005494:	c0 08       	rjmp	80005494 <uhd_sleep_mode+0x80>
	cpu_irq_disable();
80005496:	c0 08       	rjmp	80005496 <uhd_sleep_mode+0x82>
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80005498:	e1 b8 00 00 	mfsr	r8,0x0
8000549c:	d3 03       	ssrf	0x10
8000549e:	f6 0a 07 0e 	ld.ub	lr,r11[r10]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800054a2:	20 1e       	sub	lr,1
800054a4:	f6 0a 0b 0e 	st.b	r11[r10],lr
      cpu_irq_enable();
800054a8:	ed b8 00 10 	bld	r8,0x10
	}
	uhd_state = new_state;
}
800054ac:	c0 20       	breq	800054b0 <uhd_sleep_mode+0x9c>
800054ae:	d5 03       	csrf	0x10
800054b0:	93 0c       	st.w	r9[0x0],r12
800054b2:	2f ad       	sub	sp,-24
800054b4:	d8 02       	popm	pc
800054b6:	d5 03       	csrf	0x10
800054b8:	cd db       	rjmp	80005472 <uhd_sleep_mode+0x5e>
800054ba:	d7 03       	nop
800054bc:	80 00       	ld.sh	r0,r0[0x0]
800054be:	f7 8c       	*unknown*

800054c0 <uhd_ep_alloc>:
	uhd_enable_pipe_interrupt(0);
	return true;
}

bool uhd_ep_alloc(usb_add_t add, usb_ep_desc_t * ep_desc)
{
800054c0:	d4 21       	pushm	r4-r7,lr
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
800054c2:	fe 69 00 00 	mov	r9,-131072
800054c6:	f2 f8 04 1c 	ld.w	r8,r9[1052]
800054ca:	ed b8 00 01 	bld	r8,0x1
800054ce:	c2 90       	breq	80005520 <uhd_ep_alloc+0x60>
800054d0:	30 2a       	mov	r10,2
800054d2:	30 19       	mov	r9,1
			continue;
		}
		uhd_enable_pipe(pipe);
800054d4:	fe 68 00 00 	mov	r8,-131072
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
800054d8:	e0 67 02 00 	mov	r7,512

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
800054dc:	f0 fe 04 1c 	ld.w	lr,r8[1052]
800054e0:	f5 ee 10 0e 	or	lr,r10,lr
800054e4:	f1 4e 04 1c 	st.w	r8[1052],lr
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
800054e8:	e0 68 01 00 	mov	r8,256
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
800054ec:	17 ae       	ld.ub	lr,r11[0x2]
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
800054ee:	30 06       	mov	r6,0
800054f0:	fc 06 18 00 	cp.b	r6,lr
800054f4:	f0 06 17 90 	movgt	r6,r8
800054f8:	ee 06 17 a0 	movle	r6,r7
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
800054fc:	17 b8       	ld.ub	r8,r11[0x3]
		// Bank choice
		switch(ep_type) {
800054fe:	30 27       	mov	r7,2
		uhd_enable_pipe(pipe);
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
80005500:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
		// Bank choice
		switch(ep_type) {
80005504:	ee 08 18 00 	cp.b	r8,r7
80005508:	e0 80 00 9b 	breq	8000563e <uhd_ep_alloc+0x17e>
8000550c:	30 37       	mov	r7,3
8000550e:	ee 08 18 00 	cp.b	r8,r7
80005512:	c1 d0       	breq	8000554c <uhd_ep_alloc+0x8c>
80005514:	30 17       	mov	r7,1
80005516:	ee 08 18 00 	cp.b	r8,r7
8000551a:	e0 80 00 8e 	breq	80005636 <uhd_ep_alloc+0x176>
		// Enable endpoint interrupts
		uhd_enable_pipe_dma_interrupt(pipe);
		uhd_enable_stall_interrupt(pipe);
		uhd_enable_pipe_error_interrupt(pipe);
		uhd_enable_pipe_interrupt(pipe);
		return true;
8000551e:	d8 2a       	popm	r4-r7,pc,r12=0
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
80005520:	f2 f8 04 1c 	ld.w	r8,r9[1052]
80005524:	ed b8 00 02 	bld	r8,0x2
80005528:	c0 f1       	brne	80005546 <uhd_ep_alloc+0x86>
8000552a:	f2 f8 04 1c 	ld.w	r8,r9[1052]
8000552e:	ed b8 00 03 	bld	r8,0x3
80005532:	c4 c1       	brne	800055ca <uhd_ep_alloc+0x10a>
80005534:	f2 f8 04 1c 	ld.w	r8,r9[1052]
80005538:	ed b8 00 04 	bld	r8,0x4
8000553c:	e0 80 00 84 	breq	80005644 <uhd_ep_alloc+0x184>
80005540:	31 0a       	mov	r10,16
80005542:	30 49       	mov	r9,4
80005544:	cc 8b       	rjmp	800054d4 <uhd_ep_alloc+0x14>
80005546:	30 4a       	mov	r10,4
80005548:	30 29       	mov	r9,2
8000554a:	cc 5b       	rjmp	800054d4 <uhd_ep_alloc+0x14>
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
		// Bank choice
		switch(ep_type) {
8000554c:	17 e5       	ld.ub	r5,r11[0x6]
8000554e:	30 07       	mov	r7,0
80005550:	b9 65       	lsl	r5,0x18
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
80005552:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
80005556:	ad 68       	lsl	r8,0xc
80005558:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000555c:	ab a8       	sbr	r8,0xa
8000555e:	0c 48       	or	r8,r6
80005560:	f1 e5 10 05 	or	r5,r8,r5
80005564:	eb e7 10 06 	or	r6,r5,r7
80005568:	fe 65 05 00 	mov	r5,-129792
8000556c:	17 d4       	ld.ub	r4,r11[0x5]
8000556e:	f2 0e 15 02 	lsl	lr,r9,0x2
80005572:	17 cb       	ld.ub	r11,r11[0x4]
80005574:	fc 05 00 08 	add	r8,lr,r5
80005578:	e9 eb 10 8b 	or	r11,r4,r11<<0x8
8000557c:	30 87       	mov	r7,8
8000557e:	e0 65 04 00 	mov	r5,1024
80005582:	5c cb       	swap.bh	r11
80005584:	5c 7b       	castu.h	r11
80005586:	f6 07 0c 4b 	max	r11,r11,r7
8000558a:	f6 05 0d 45 	min	r5,r11,r5
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
8000558e:	fe 6b 05 30 	mov	r11,-129744
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
80005592:	a1 75       	lsl	r5,0x1
80005594:	20 15       	sub	r5,1
80005596:	ea 05 12 00 	clz	r5,r5
8000559a:	ea 05 11 1c 	rsub	r5,r5,28
8000559e:	ed e5 10 45 	or	r5,r6,r5<<0x4
800055a2:	91 05       	st.w	r8[0x0],r5
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
800055a4:	fc 0b 00 06 	add	r6,lr,r11
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
800055a8:	70 0b       	ld.w	r11,r8[0x0]
800055aa:	a1 bb       	sbr	r11,0x1
800055ac:	91 0b       	st.w	r8[0x0],r11
		if (!Is_uhd_pipe_configured(pipe)) {
800055ae:	6c 08       	ld.w	r8,r6[0x0]
800055b0:	e6 18 00 04 	andh	r8,0x4,COH
800055b4:	c0 e1       	brne	800055d0 <uhd_ep_alloc+0x110>
			uhd_disable_pipe(pipe);
800055b6:	5c da       	com	r10
800055b8:	10 9c       	mov	r12,r8
800055ba:	fe 68 00 00 	mov	r8,-131072
800055be:	f0 f9 04 1c 	ld.w	r9,r8[1052]
800055c2:	12 6a       	and	r10,r9
800055c4:	f1 4a 04 1c 	st.w	r8[1052],r10
			return false;
800055c8:	d8 22       	popm	r4-r7,pc
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
800055ca:	30 8a       	mov	r10,8
800055cc:	30 39       	mov	r9,3
800055ce:	c8 3b       	rjmp	800054d4 <uhd_ep_alloc+0x14>
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
			uhd_disable_pipe(pipe);
			return false;
		}
		uhd_configure_address(pipe, add);
800055d0:	37 f5       	mov	r5,127
800055d2:	12 98       	mov	r8,r9
800055d4:	f7 d9 c0 02 	bfextu	r11,r9,0x0,0x2
800055d8:	e2 18 00 04 	andl	r8,0x4,COH
800055dc:	a3 7b       	lsl	r11,0x3
800055de:	e0 38 fb dc 	sub	r8,130012
800055e2:	ea 0b 09 4b 	lsl	r11,r5,r11
800055e6:	70 06       	ld.w	r6,r8[0x0]
800055e8:	16 95       	mov	r5,r11
800055ea:	5c 95       	brev	r5
800055ec:	ea 05 12 00 	clz	r5,r5
800055f0:	16 86       	andn	r6,r11
800055f2:	f8 05 09 4c 	lsl	r12,r12,r5
800055f6:	f9 eb 00 0b 	and	r11,r12,r11
800055fa:	0c 4b       	or	r11,r6
800055fc:	91 0b       	st.w	r8[0x0],r11
		uhd_enable_pipe(pipe);
800055fe:	fe 68 00 00 	mov	r8,-131072
80005602:	f0 fb 04 1c 	ld.w	r11,r8[1052]
80005606:	16 4a       	or	r10,r11
80005608:	f1 4a 04 1c 	st.w	r8[1052],r10

		// Enable endpoint interrupts
		uhd_enable_pipe_dma_interrupt(pipe);
8000560c:	fc 1b 02 00 	movh	r11,0x200
80005610:	f2 ca 00 01 	sub	r10,r9,1
80005614:	f6 0a 09 4a 	lsl	r10,r11,r10
80005618:	f1 4a 04 18 	st.w	r8[1048],r10
		uhd_enable_stall_interrupt(pipe);
8000561c:	e0 3e fa 10 	sub	lr,129552
80005620:	34 0a       	mov	r10,64
80005622:	9d 0a       	st.w	lr[0x0],r10
		uhd_enable_pipe_error_interrupt(pipe);
80005624:	9d 07       	st.w	lr[0x0],r7
		uhd_enable_pipe_interrupt(pipe);
80005626:	e0 6a 01 00 	mov	r10,256
8000562a:	30 1c       	mov	r12,1
8000562c:	f4 09 09 49 	lsl	r9,r10,r9
80005630:	f1 49 04 18 	st.w	r8[1048],r9
		return true;
80005634:	d8 22       	popm	r4-r7,pc
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
		// Bank choice
		switch(ep_type) {
80005636:	17 e5       	ld.ub	r5,r11[0x6]
80005638:	30 47       	mov	r7,4
8000563a:	b9 65       	lsl	r5,0x18
		case 1:
			bank = AVR32_USBB_UECFG0_EPBK_SINGLE;
			break;
		case 2:
			bank = AVR32_USBB_UECFG0_EPBK_DOUBLE;
			break;
8000563c:	c8 bb       	rjmp	80005552 <uhd_ep_alloc+0x92>
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
		// Bank choice
		switch(ep_type) {
8000563e:	30 05       	mov	r5,0
80005640:	30 47       	mov	r7,4
80005642:	c8 8b       	rjmp	80005552 <uhd_ep_alloc+0x92>
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
80005644:	f2 f8 04 1c 	ld.w	r8,r9[1052]
80005648:	ed b8 00 05 	bld	r8,0x5
8000564c:	c0 a1       	brne	80005660 <uhd_ep_alloc+0x1a0>
8000564e:	f2 f8 04 1c 	ld.w	r8,r9[1052]
80005652:	ed b8 00 06 	bld	r8,0x6
80005656:	fe 90 ff 64 	breq	8000551e <uhd_ep_alloc+0x5e>
8000565a:	34 0a       	mov	r10,64
8000565c:	30 69       	mov	r9,6
8000565e:	c3 bb       	rjmp	800054d4 <uhd_ep_alloc+0x14>
80005660:	32 0a       	mov	r10,32
80005662:	30 59       	mov	r9,5
80005664:	c3 8b       	rjmp	800054d4 <uhd_ep_alloc+0x14>

80005666 <uhd_ep0_alloc>:
	uhd_send_resume();
	uhd_sleep_mode(UHD_STATE_IDLE);
}

bool uhd_ep0_alloc(usb_add_t add, uint8_t ep_size)
{
80005666:	d4 01       	pushm	lr
	if (ep_size < 8) {
80005668:	30 78       	mov	r8,7
8000566a:	f0 0b 18 00 	cp.b	r11,r8
8000566e:	e0 88 00 3f 	brls	800056ec <uhd_ep0_alloc+0x86>
#error TODO Add USB address in a list
		return true;
	}
#endif

	uhd_enable_pipe(0);
80005672:	fe 69 00 00 	mov	r9,-131072
80005676:	f2 f8 04 1c 	ld.w	r8,r9[1052]
8000567a:	a1 a8       	sbr	r8,0x0
8000567c:	f3 48 04 1c 	st.w	r9[1052],r8
	uhd_configure_pipe(0, // Pipe 0
80005680:	30 8e       	mov	lr,8
80005682:	fe 68 05 00 	mov	r8,-129792
80005686:	f6 0e 0c 4b 	max	r11,r11,lr
8000568a:	e0 6a 04 00 	mov	r10,1024
8000568e:	f6 0a 0d 4a 	min	r10,r11,r10
80005692:	a1 7a       	lsl	r10,0x1
80005694:	20 1a       	sub	r10,1
80005696:	f4 0a 12 00 	clz	r10,r10
8000569a:	f4 0a 11 1c 	rsub	r10,r10,28
8000569e:	a5 6a       	lsl	r10,0x4
800056a0:	91 0a       	st.w	r8[0x0],r10
#else
			ep_size,
#endif
			AVR32_USBB_UECFG0_EPBK_SINGLE, 0);

	uhd_allocate_memory(0);
800056a2:	70 0a       	ld.w	r10,r8[0x0]
800056a4:	a1 ba       	sbr	r10,0x1
800056a6:	91 0a       	st.w	r8[0x0],r10
	if (!Is_uhd_pipe_configured(0)) {
800056a8:	fe 68 05 30 	mov	r8,-129744
800056ac:	70 08       	ld.w	r8,r8[0x0]
800056ae:	e6 18 00 04 	andh	r8,0x4,COH
800056b2:	c1 60       	breq	800056de <uhd_ep0_alloc+0x78>
		uhd_disable_pipe(0);
		return false;
	}
	uhd_configure_address(0, add);
800056b4:	fe 6a 04 24 	mov	r10,-130012
800056b8:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800056bc:	74 08       	ld.w	r8,r10[0x0]
800056be:	e0 18 ff 80 	andl	r8,0xff80
800056c2:	f9 e8 10 08 	or	r8,r12,r8
800056c6:	95 08       	st.w	r10[0x0],r8

	// Always enable stall and error interrupts of control endpoint
	uhd_enable_stall_interrupt(0);
800056c8:	fe 68 05 f0 	mov	r8,-129552
800056cc:	34 0a       	mov	r10,64
800056ce:	91 0a       	st.w	r8[0x0],r10
	uhd_enable_pipe_error_interrupt(0);
800056d0:	91 0e       	st.w	r8[0x0],lr
	uhd_enable_pipe_interrupt(0);
800056d2:	30 1c       	mov	r12,1
800056d4:	e0 68 01 00 	mov	r8,256
800056d8:	f3 48 04 18 	st.w	r9[1048],r8
	return true;
}
800056dc:	d8 02       	popm	pc
#endif
			AVR32_USBB_UECFG0_EPBK_SINGLE, 0);

	uhd_allocate_memory(0);
	if (!Is_uhd_pipe_configured(0)) {
		uhd_disable_pipe(0);
800056de:	10 9c       	mov	r12,r8
800056e0:	f2 f8 04 1c 	ld.w	r8,r9[1052]
800056e4:	a1 c8       	cbr	r8,0x0
800056e6:	f3 48 04 1c 	st.w	r9[1052],r8
		return false;
800056ea:	d8 02       	popm	pc
	uhd_sleep_mode(UHD_STATE_IDLE);
}

bool uhd_ep0_alloc(usb_add_t add, uint8_t ep_size)
{
	if (ep_size < 8) {
800056ec:	d8 0a       	popm	pc,r12=0
800056ee:	d7 03       	nop

800056f0 <uhd_ctrl_request_end>:
 * \internal
 * \brief Call the callback linked to control request
 * and start the next request from the queue.
*/
static void uhd_ctrl_request_end(uhd_trans_status_t status)
{
800056f0:	eb cd 40 f8 	pushm	r3-r7,lr
800056f4:	20 2d       	sub	sp,8
	irqflags_t flags;
	uhd_callback_setup_end_t callback_end;
	struct uhd_ctrl_request_t *request_to_free;
	bool b_new_request;

	uhd_ctrl_request_timeout = 0;
800056f6:	30 08       	mov	r8,0
 * \internal
 * \brief Call the callback linked to control request
 * and start the next request from the queue.
*/
static void uhd_ctrl_request_end(uhd_trans_status_t status)
{
800056f8:	18 93       	mov	r3,r12
	irqflags_t flags;
	uhd_callback_setup_end_t callback_end;
	struct uhd_ctrl_request_t *request_to_free;
	bool b_new_request;

	uhd_ctrl_request_timeout = 0;
800056fa:	e0 64 0c 80 	mov	r4,3200
800056fe:	e0 67 0c 74 	mov	r7,3188

	// Remove request from the control request list
	callback_end = uhd_ctrl_request_first->callback_end;
80005702:	a8 08       	st.h	r4[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005704:	6e 0c       	ld.w	r12,r7[0x0]
80005706:	78 65       	ld.w	r5,r12[0x18]
	cpu_irq_disable();
80005708:	e1 b8 00 00 	mfsr	r8,0x0
	request_to_free = uhd_ctrl_request_first;
	flags = cpu_irq_save();
	uhd_ctrl_request_first = uhd_ctrl_request_first->next_request;
8000570c:	d3 03       	ssrf	0x10
8000570e:	6e 09       	ld.w	r9,r7[0x0]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005710:	72 76       	ld.w	r6,r9[0x1c]
80005712:	8f 06       	st.w	r7[0x0],r6
80005714:	ed b8 00 10 	bld	r8,0x10
	b_new_request = (uhd_ctrl_request_first != NULL);
	cpu_irq_restore(flags);
	free(request_to_free);
80005718:	e0 81 00 c2 	brne	8000589c <uhd_ctrl_request_end+0x1ac>

	// Call callback
	if (callback_end != NULL) {
8000571c:	e0 a0 21 6a 	rcall	800099f0 <free>
		callback_end(uhd_get_configured_address(0), status, uhd_ctrl_nb_trans);
80005720:	58 05       	cp.w	r5,0
80005722:	c0 b0       	breq	80005738 <uhd_ctrl_request_end+0x48>
80005724:	fe 68 04 24 	mov	r8,-130012
80005728:	70 0c       	ld.w	r12,r8[0x0]
8000572a:	e0 68 0c 78 	mov	r8,3192
8000572e:	06 9b       	mov	r11,r3
80005730:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
	}

	// If a setup request is pending and no started by previous callback
	if (b_new_request) {
80005734:	90 8a       	ld.uh	r10,r8[0x0]
		usb_setup_req_t req;
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
80005736:	5d 15       	icall	r5
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80005738:	58 06       	cp.w	r6,0
8000573a:	c3 50       	breq	800057a4 <uhd_ctrl_request_end+0xb4>
		usb_setup_req_t req;
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
8000573c:	e0 68 0c 70 	mov	r8,3184
80005740:	6e 0b       	ld.w	r11,r7[0x0]
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80005742:	30 8a       	mov	r10,8
80005744:	30 07       	mov	r7,0
80005746:	2f fb       	sub	r11,-1

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
	uhd_ctrl_nb_trans = 0;
80005748:	91 07       	st.w	r8[0x0],r7
8000574a:	1a 9c       	mov	r12,sp
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
8000574c:	e0 a0 23 78 	rcall	80009e3c <memcpy>
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80005750:	e0 68 0c 78 	mov	r8,3192

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
80005754:	b0 07       	st.h	r8[0x0],r7
80005756:	fe 68 00 00 	mov	r8,-131072
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
8000575a:	40 09       	lddsp	r9,sp[0x0]
8000575c:	f5 d9 b0 10 	bfexts	r10,r9,0x0,0x10

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
80005760:	5c ca       	swap.bh	r10
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80005762:	5c 8a       	casts.h	r10

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
80005764:	f0 fb 04 1c 	ld.w	r11,r8[1052]
80005768:	f3 da d0 10 	bfins	r9,r10,0x0,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
8000576c:	40 18       	lddsp	r8,sp[0x4]
8000576e:	f0 0a 14 10 	asr	r10,r8,0x10
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
80005772:	5c ca       	swap.bh	r10
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80005774:	5c 8a       	casts.h	r10
80005776:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
8000577a:	f1 da d2 10 	bfins	r8,r10,0x10,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
8000577e:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
80005782:	5c ca       	swap.bh	r10
80005784:	5c 8a       	casts.h	r10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80005786:	58 0b       	cp.w	r11,0
80005788:	c0 c0       	breq	800057a0 <uhd_ctrl_request_end+0xb0>
8000578a:	fe 6b 04 24 	mov	r11,-130012
8000578e:	76 0b       	ld.w	r11,r11[0x0]
80005790:	e0 6c 0c 74 	mov	r12,3188
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
		uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
80005794:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7

	// If a setup request is pending and no started by previous callback
	if (b_new_request) {
		uhd_ctrl_phase_setup();
	}
	if (uhd_b_suspend_requested) {
80005798:	78 0c       	ld.w	r12,r12[0x0]
8000579a:	19 8c       	ld.ub	r12,r12[0x0]
8000579c:	16 3c       	cp.w	r12,r11
8000579e:	c0 d0       	breq	800057b8 <uhd_ctrl_request_end+0xc8>
800057a0:	30 1c       	mov	r12,1
800057a2:	ca 7f       	rcall	800056f0 <uhd_ctrl_request_end>
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
		uhd_suspend();
	}
}
800057a4:	e0 68 0b 1c 	mov	r8,2844
800057a8:	30 09       	mov	r9,0
		return; // Endpoint not valid
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
800057aa:	11 8a       	ld.ub	r10,r8[0x0]
800057ac:	f2 0a 18 00 	cp.b	r10,r9
800057b0:	c2 51       	brne	800057fa <uhd_ctrl_request_end+0x10a>
800057b2:	2f ed       	sub	sp,-8
800057b4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
800057b8:	fe 6c 05 00 	mov	r12,-129792
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
800057bc:	78 0b       	ld.w	r11,r12[0x0]
800057be:	e0 1b fc ff 	andl	r11,0xfcff
	Assert(sizeof(setup) == sizeof(uint64_t));
	ptr_ep_data = (volatile uint64_t *)&uhd_get_pipe_fifo_access(0, 64);
	*ptr_ep_data = setup.value64;
800057c2:	99 0b       	st.w	r12[0x0],r11
800057c4:	f1 da d0 10 	bfins	r8,r10,0x0,0x10
800057c8:	30 4c       	mov	r12,4
800057ca:	fe 6b 05 60 	mov	r11,-129696

	uhd_ctrl_request_timeout = 5000;
800057ce:	97 0c       	st.w	r11[0x0],r12
800057d0:	10 9a       	mov	r10,r8
800057d2:	12 9b       	mov	r11,r9
	uhd_enable_setup_ready_interrupt(0);
800057d4:	fc 18 e0 00 	movh	r8,0xe000
800057d8:	f0 eb 00 00 	st.d	r8[0],r10
	uhd_ack_fifocon(0);
800057dc:	e0 68 13 88 	mov	r8,5000
800057e0:	a8 08       	st.h	r4[0x0],r8
800057e2:	fe 68 05 f0 	mov	r8,-129552
	uhd_unfreeze_pipe(0);
800057e6:	91 0c       	st.w	r8[0x0],r12
800057e8:	e0 69 40 00 	mov	r9,16384
	if (b_new_request) {
		uhd_ctrl_phase_setup();
	}
	if (uhd_b_suspend_requested) {
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
800057ec:	fe 68 06 20 	mov	r8,-129504
	uhd_start_reset();
}

void uhd_suspend(void)
{
	if (uhd_ctrl_request_timeout) {
800057f0:	91 09       	st.w	r8[0x0],r9
800057f2:	e2 69 00 00 	mov	r9,131072
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
800057f6:	91 09       	st.w	r8[0x0],r9
800057f8:	cd 6b       	rjmp	800057a4 <uhd_ctrl_request_end+0xb4>
		uhd_freeze_pipe(pipe);
800057fa:	b0 89       	st.b	r8[0x0],r9
800057fc:	88 09       	ld.sh	r9,r4[0x0]
800057fe:	58 09       	cp.w	r9,0
80005800:	c5 01       	brne	800058a0 <uhd_ctrl_request_end+0x1b0>
80005802:	fe 69 05 c4 	mov	r9,-129596
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80005806:	72 07       	ld.w	r7,r9[0x0]
80005808:	fe 69 05 f4 	mov	r9,-129548
		uhd_freeze_pipe(pipe);
8000580c:	e2 68 00 00 	mov	r8,131072
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80005810:	93 08       	st.w	r9[0x0],r8
80005812:	fe 69 05 c8 	mov	r9,-129592
		uhd_freeze_pipe(pipe);
80005816:	72 0c       	ld.w	r12,r9[0x0]
80005818:	fe 69 05 f8 	mov	r9,-129544
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
8000581c:	93 08       	st.w	r9[0x0],r8
8000581e:	fe 69 05 cc 	mov	r9,-129588
		uhd_freeze_pipe(pipe);
80005822:	72 0b       	ld.w	r11,r9[0x0]
80005824:	fe 69 05 fc 	mov	r9,-129540
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80005828:	93 08       	st.w	r9[0x0],r8
8000582a:	fe 69 05 d0 	mov	r9,-129584
8000582e:	72 0a       	ld.w	r10,r9[0x0]
80005830:	fe 69 06 00 	mov	r9,-129536
		uhd_freeze_pipe(pipe);
80005834:	93 08       	st.w	r9[0x0],r8
80005836:	10 57       	eor	r7,r8
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80005838:	10 5c       	eor	r12,r8
8000583a:	10 5b       	eor	r11,r8
8000583c:	10 5a       	eor	r10,r8
		uhd_freeze_pipe(pipe);
8000583e:	fe 69 05 d4 	mov	r9,-129580
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80005842:	fe 66 06 04 	mov	r6,-129532
80005846:	72 09       	ld.w	r9,r9[0x0]
80005848:	ef d7 c2 21 	bfextu	r7,r7,0x11,0x1
8000584c:	8d 08       	st.w	r6[0x0],r8
8000584e:	10 59       	eor	r9,r8
80005850:	f9 dc c2 21 	bfextu	r12,r12,0x11,0x1
80005854:	f3 d9 c2 21 	bfextu	r9,r9,0x11,0x1
80005858:	a3 6c       	lsl	r12,0x2
8000585a:	f7 db c2 21 	bfextu	r11,r11,0x11,0x1
8000585e:	f9 e7 10 17 	or	r7,r12,r7<<0x1
80005862:	f5 da c2 21 	bfextu	r10,r10,0x11,0x1
80005866:	ef eb 10 3b 	or	r11,r7,r11<<0x3
8000586a:	f7 ea 10 4a 	or	r10,r11,r10<<0x4
8000586e:	f5 e9 10 5a 	or	r10,r10,r9<<0x5
80005872:	fe 69 05 d8 	mov	r9,-129576
		uhd_freeze_pipe(pipe);
80005876:	72 09       	ld.w	r9,r9[0x0]
80005878:	10 59       	eor	r9,r8
8000587a:	f3 d9 c2 21 	bfextu	r9,r9,0x11,0x1
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
8000587e:	f5 e9 10 69 	or	r9,r10,r9<<0x6
80005882:	fe 6a 06 08 	mov	r10,-129528
	if (uhd_b_suspend_requested) {
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
		uhd_suspend();
	}
}
80005886:	95 08       	st.w	r10[0x0],r8
80005888:	e0 68 0b 15 	mov	r8,2837
      cpu_irq_enable();
8000588c:	b0 89       	st.b	r8[0x0],r9

void uhd_suspend(void)
{
	if (uhd_ctrl_request_timeout) {
		// Delay suspend after setup requests
		uhd_b_suspend_requested = true;
8000588e:	30 39       	mov	r9,3
80005890:	e0 68 0b 14 	mov	r8,2836
	if (uhd_b_suspend_requested) {
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
		uhd_suspend();
	}
}
80005894:	b0 89       	st.b	r8[0x0],r9
80005896:	2f ed       	sub	sp,-8
80005898:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000589c:	d5 03       	csrf	0x10
8000589e:	c3 fb       	rjmp	8000571c <uhd_ctrl_request_end+0x2c>
800058a0:	30 19       	mov	r9,1
800058a2:	b0 89       	st.b	r8[0x0],r9
800058a4:	2f ed       	sub	sp,-8
800058a6:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800058aa:	d7 03       	nop

800058ac <uhd_setup_request>:
800058ac:	eb cd 40 fc 	pushm	r2-r7,lr
800058b0:	20 3d       	sub	sp,12
800058b2:	18 97       	mov	r7,r12
800058b4:	50 0b       	stdsp	sp[0x0],r11
800058b6:	14 92       	mov	r2,r10
800058b8:	12 96       	mov	r6,r9
800058ba:	10 93       	mov	r3,r8
		usb_setup_req_t *req,
		uint8_t *payload,
		uint16_t payload_size,
		uhd_callback_setup_run_t callback_run,
		uhd_callback_setup_end_t callback_end)
{
800058bc:	40 a4       	lddsp	r4,sp[0x28]
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
800058be:	32 0c       	mov	r12,32
800058c0:	e0 a0 20 a0 	rcall	80009a00 <malloc>
	if (request == NULL) {
800058c4:	40 0b       	lddsp	r11,sp[0x0]
{
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
800058c6:	18 95       	mov	r5,r12
	if (request == NULL) {
800058c8:	c5 c0       	breq	80005980 <uhd_setup_request+0xd4>
		Assert(false);
		return false;
	}

	// Fill structure
	request->add = (uint8_t) add;
800058ca:	18 c7       	st.b	r12++,r7
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
800058cc:	30 8a       	mov	r10,8
800058ce:	e0 a0 22 b7 	rcall	80009e3c <memcpy>
	request->payload = payload;
	request->payload_size = payload_size;
	request->callback_run = callback_run;
	request->callback_end = callback_end;
	request->next_request = NULL;
800058d2:	30 08       	mov	r8,0
	}

	// Fill structure
	request->add = (uint8_t) add;
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
	request->payload = payload;
800058d4:	8b 32       	st.w	r5[0xc],r2
	request->payload_size = payload_size;
800058d6:	eb 56 00 10 	st.h	r5[16],r6
	request->callback_run = callback_run;
800058da:	8b 53       	st.w	r5[0x14],r3
	request->callback_end = callback_end;
800058dc:	8b 64       	st.w	r5[0x18],r4
	request->next_request = NULL;
800058de:	8b 78       	st.w	r5[0x1c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800058e0:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
800058e4:	d3 03       	ssrf	0x10

	// Add this request in the queue
	flags = cpu_irq_save();
	if (uhd_ctrl_request_first == NULL) {
800058e6:	e0 69 0c 74 	mov	r9,3188
800058ea:	72 0a       	ld.w	r10,r9[0x0]
800058ec:	58 0a       	cp.w	r10,0
		uhd_ctrl_request_first = request;
		b_start_request = true;
	} else {
		uhd_ctrl_request_last->next_request = request;
800058ee:	c6 f0       	breq	800059cc <uhd_setup_request+0x120>
800058f0:	10 9a       	mov	r10,r8
800058f2:	e0 68 0c 7c 	mov	r8,3196
	}
	uhd_ctrl_request_last = request;
800058f6:	70 0c       	ld.w	r12,r8[0x0]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800058f8:	99 75       	st.w	r12[0x1c],r5
800058fa:	91 05       	st.w	r8[0x0],r5
800058fc:	ed bb 00 10 	bld	r11,0x10
	cpu_irq_restore(flags);

	if (b_start_request) {
80005900:	c3 e1       	brne	8000597c <uhd_setup_request+0xd0>
	*ptr_ep_data = setup.value64;

	uhd_ctrl_request_timeout = 5000;
	uhd_enable_setup_ready_interrupt(0);
	uhd_ack_fifocon(0);
	uhd_unfreeze_pipe(0);
80005902:	58 0a       	cp.w	r10,0
80005904:	c0 41       	brne	8000590c <uhd_setup_request+0x60>
80005906:	2f dd       	sub	sp,-12
		usb_setup_req_t req;
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
80005908:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
8000590c:	e0 68 0c 70 	mov	r8,3184
80005910:	72 0b       	ld.w	r11,r9[0x0]
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80005912:	30 07       	mov	r7,0
80005914:	2f fb       	sub	r11,-1
80005916:	91 07       	st.w	r8[0x0],r7
80005918:	30 8a       	mov	r10,8
8000591a:	fa cc ff fc 	sub	r12,sp,-4

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
	uhd_ctrl_nb_trans = 0;
8000591e:	e0 a0 22 8f 	rcall	80009e3c <memcpy>
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80005922:	e0 68 0c 78 	mov	r8,3192

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
80005926:	b0 07       	st.h	r8[0x0],r7
80005928:	fe 68 00 00 	mov	r8,-131072
8000592c:	40 19       	lddsp	r9,sp[0x4]
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
8000592e:	f5 d9 b0 10 	bfexts	r10,r9,0x0,0x10

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
80005932:	5c ca       	swap.bh	r10
80005934:	5c 8a       	casts.h	r10
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80005936:	f0 fb 04 1c 	ld.w	r11,r8[1052]

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
8000593a:	f3 da d0 10 	bfins	r9,r10,0x0,0x10
8000593e:	40 28       	lddsp	r8,sp[0x8]
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80005940:	f0 0a 14 10 	asr	r10,r8,0x10
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
80005944:	5c ca       	swap.bh	r10
80005946:	5c 8a       	casts.h	r10
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80005948:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
8000594c:	f1 da d2 10 	bfins	r8,r10,0x10,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80005950:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
80005954:	5c ca       	swap.bh	r10
80005956:	5c 8a       	casts.h	r10
80005958:	58 0b       	cp.w	r11,0
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
8000595a:	c0 c0       	breq	80005972 <uhd_setup_request+0xc6>
8000595c:	fe 6b 04 24 	mov	r11,-130012
80005960:	76 0b       	ld.w	r11,r11[0x0]
80005962:	e0 6c 0c 74 	mov	r12,3188
80005966:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
		uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
8000596a:	78 0c       	ld.w	r12,r12[0x0]
8000596c:	19 8c       	ld.ub	r12,r12[0x0]
8000596e:	16 3c       	cp.w	r12,r11
80005970:	c0 b0       	breq	80005986 <uhd_setup_request+0xda>
80005972:	30 1c       	mov	r12,1
      cpu_irq_enable();
80005974:	cb ee       	rcall	800056f0 <uhd_ctrl_request_end>
80005976:	2f dd       	sub	sp,-12
	if (b_start_request) {
		// Start immediately request
		uhd_ctrl_phase_setup();
	}
	return true;
}
80005978:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
8000597c:	d5 03       	csrf	0x10
		return; // Endpoint not valid
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
8000597e:	cc 2b       	rjmp	80005902 <uhd_setup_request+0x56>
80005980:	2f dd       	sub	sp,-12
80005982:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80005986:	fe 6c 05 00 	mov	r12,-129792
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
8000598a:	78 0b       	ld.w	r11,r12[0x0]
8000598c:	e0 1b fc ff 	andl	r11,0xfcff
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
80005990:	99 0b       	st.w	r12[0x0],r11
80005992:	f1 da d0 10 	bfins	r8,r10,0x0,0x10
	Assert(sizeof(setup) == sizeof(uint64_t));
	ptr_ep_data = (volatile uint64_t *)&uhd_get_pipe_fifo_access(0, 64);
	*ptr_ep_data = setup.value64;
80005996:	30 4c       	mov	r12,4
80005998:	fe 6b 05 60 	mov	r11,-129696
8000599c:	97 0c       	st.w	r11[0x0],r12
8000599e:	10 9a       	mov	r10,r8
800059a0:	12 9b       	mov	r11,r9

	uhd_ctrl_request_timeout = 5000;
800059a2:	fc 18 e0 00 	movh	r8,0xe000
800059a6:	f0 eb 00 00 	st.d	r8[0],r10
	uhd_enable_setup_ready_interrupt(0);
800059aa:	e0 69 13 88 	mov	r9,5000
800059ae:	e0 68 0c 80 	mov	r8,3200
	uhd_ack_fifocon(0);
800059b2:	b0 09       	st.h	r8[0x0],r9
800059b4:	fe 68 05 f0 	mov	r8,-129552
800059b8:	91 0c       	st.w	r8[0x0],r12
	uhd_unfreeze_pipe(0);
800059ba:	e0 69 40 00 	mov	r9,16384
800059be:	fe 68 06 20 	mov	r8,-129504
	request->next_request = NULL;

	// Add this request in the queue
	flags = cpu_irq_save();
	if (uhd_ctrl_request_first == NULL) {
		uhd_ctrl_request_first = request;
800059c2:	91 09       	st.w	r8[0x0],r9
800059c4:	e2 69 00 00 	mov	r9,131072
800059c8:	91 09       	st.w	r8[0x0],r9
800059ca:	c9 eb       	rjmp	80005906 <uhd_setup_request+0x5a>
800059cc:	93 05       	st.w	r9[0x0],r5
800059ce:	30 1a       	mov	r10,1
800059d0:	e0 68 0c 7c 	mov	r8,3196
800059d4:	c9 3b       	rjmp	800058fa <uhd_setup_request+0x4e>
800059d6:	d7 03       	nop

800059d8 <uhd_ep_free>:
800059d8:	d4 31       	pushm	r0-r7,lr
800059da:	20 5d       	sub	sp,20
800059dc:	30 17       	mov	r7,1
800059de:	18 92       	mov	r2,r12
800059e0:	50 2b       	stdsp	sp[0x8],r11
800059e2:	30 06       	mov	r6,0
800059e4:	fe 65 00 00 	mov	r5,-131072
800059e8:	0e 93       	mov	r3,r7
800059ea:	30 64       	mov	r4,6
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
800059ec:	37 f1       	mov	r1,127
800059ee:	c0 48       	rjmp	800059f6 <uhd_ep_free+0x1e>
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
800059f0:	2f f7       	sub	r7,-1
800059f2:	2f f6       	sub	r6,-1
800059f4:	5c 57       	castu.b	r7
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
800059f6:	ea f8 04 1c 	ld.w	r8,r5[1052]
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
800059fa:	f3 d6 c0 08 	bfextu	r9,r6,0x0,0x8
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
800059fe:	e6 09 09 4e 	lsl	lr,r3,r9
80005a02:	fd e8 00 08 	and	r8,lr,r8
80005a06:	c1 60       	breq	80005a32 <uhd_ep_free+0x5a>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80005a08:	12 98       	mov	r8,r9
80005a0a:	e2 18 00 fc 	andl	r8,0xfc,COH
80005a0e:	e0 38 fb dc 	sub	r8,130012
80005a12:	70 0c       	ld.w	r12,r8[0x0]
80005a14:	f5 d9 c0 02 	bfextu	r10,r9,0x0,0x2
80005a18:	a3 7a       	lsl	r10,0x3
80005a1a:	e2 0a 09 4a 	lsl	r10,r1,r10
80005a1e:	f5 ec 00 0c 	and	r12,r10,r12
80005a22:	14 9b       	mov	r11,r10
80005a24:	5c 9b       	brev	r11
80005a26:	f6 0b 12 00 	clz	r11,r11
80005a2a:	f8 0b 0a 4c 	lsr	r12,r12,r11
80005a2e:	18 32       	cp.w	r2,r12
80005a30:	c0 70       	breq	80005a3e <uhd_ep_free+0x66>
		}
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80005a32:	e8 07 18 00 	cp.b	r7,r4
80005a36:	fe 98 ff dd 	brls	800059f0 <uhd_ep_free+0x18>
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
	}
}
80005a3a:	2f bd       	sub	sp,-20
80005a3c:	d8 32       	popm	r0-r7,pc
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
			continue;
		}
		if (endp != 0xFF) {
80005a3e:	40 2c       	lddsp	r12,sp[0x8]
80005a40:	3f f0       	mov	r0,-1
80005a42:	e0 0c 18 00 	cp.b	r12,r0
80005a46:	c2 e0       	breq	80005aa2 <uhd_ep_free+0xca>
			// Disable specific endpoint number
			if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80005a48:	f2 00 15 02 	lsl	r0,r9,0x2
80005a4c:	50 30       	stdsp	sp[0xc],r0
80005a4e:	e0 30 fb 00 	sub	r0,129792
80005a52:	50 00       	stdsp	sp[0x0],r0
80005a54:	60 0c       	ld.w	r12,r0[0x0]
80005a56:	f9 dc c2 04 	bfextu	r12,r12,0x10,0x4
80005a5a:	60 00       	ld.w	r0,r0[0x0]
80005a5c:	50 4c       	stdsp	sp[0x10],r12
80005a5e:	f9 d0 c1 02 	bfextu	r12,r0,0x8,0x2
80005a62:	e0 60 00 80 	mov	r0,128
80005a66:	58 1c       	cp.w	r12,1
80005a68:	f9 b0 01 00 	movne	r0,0
80005a6c:	40 4c       	lddsp	r12,sp[0x10]
80005a6e:	18 40       	or	r0,r12
80005a70:	40 2c       	lddsp	r12,sp[0x8]
80005a72:	00 3c       	cp.w	r12,r0
80005a74:	cd f1       	brne	80005a32 <uhd_ep_free+0x5a>
				continue; // Mismatch
			}
		}
		// Unalloc pipe
		uhd_disable_pipe(pipe);
80005a76:	fc 00 11 ff 	rsub	r0,lr,-1
80005a7a:	ea fe 04 1c 	ld.w	lr,r5[1052]
80005a7e:	e1 ee 00 0e 	and	lr,r0,lr
80005a82:	eb 4e 04 1c 	st.w	r5[1052],lr
		uhd_unallocate_memory(pipe);
80005a86:	40 00       	lddsp	r0,sp[0x0]
80005a88:	60 0e       	ld.w	lr,r0[0x0]
80005a8a:	a1 de       	cbr	lr,0x1
80005a8c:	81 0e       	st.w	r0[0x0],lr

		// Stop transfer on this pipe
#ifndef USB_HOST_HUB_SUPPORT
		if (pipe == 0) {
80005a8e:	58 09       	cp.w	r9,0
80005a90:	c1 01       	brne	80005ab0 <uhd_ep_free+0xd8>
			// Endpoint control
			if (uhd_ctrl_request_timeout) {
80005a92:	e0 68 0c 80 	mov	r8,3200
80005a96:	90 08       	ld.sh	r8,r8[0x0]
80005a98:	58 08       	cp.w	r8,0
				uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
80005a9a:	cc c0       	breq	80005a32 <uhd_ep_free+0x5a>
80005a9c:	30 1c       	mov	r12,1
80005a9e:	c2 9e       	rcall	800056f0 <uhd_ctrl_request_end>
80005aa0:	ca 8b       	rjmp	800059f0 <uhd_ep_free+0x18>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
			continue;
		}
		if (endp != 0xFF) {
80005aa2:	f2 0c 15 02 	lsl	r12,r9,0x2
80005aa6:	50 3c       	stdsp	sp[0xc],r12
80005aa8:	e0 3c fb 00 	sub	r12,129792
80005aac:	50 0c       	stdsp	sp[0x0],r12
80005aae:	ce 4b       	rjmp	80005a76 <uhd_ep_free+0x9e>
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
80005ab0:	e0 70 00 00 	mov	r0,65536
80005ab4:	ea fc 04 1c 	ld.w	r12,r5[1052]
80005ab8:	e0 09 09 4e 	lsl	lr,r0,r9
80005abc:	fd ec 10 00 	or	r0,lr,r12
80005ac0:	eb 40 04 1c 	st.w	r5[1052],r0
80005ac4:	fc 00 11 ff 	rsub	r0,lr,-1
80005ac8:	ea fe 04 1c 	ld.w	lr,r5[1052]
80005acc:	e1 ee 00 0e 	and	lr,r0,lr
80005ad0:	eb 4e 04 1c 	st.w	r5[1052],lr

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80005ad4:	40 0c       	lddsp	r12,sp[0x0]
80005ad6:	78 0e       	ld.w	lr,r12[0x0]
80005ad8:	ab ae       	sbr	lr,0xa
80005ada:	99 0e       	st.w	r12[0x0],lr
	uhd_enable_stall_interrupt(pipe);
80005adc:	34 00       	mov	r0,64
80005ade:	40 3e       	lddsp	lr,sp[0xc]
80005ae0:	e0 3e fa 10 	sub	lr,129552
80005ae4:	9d 00       	st.w	lr[0x0],r0
	uhd_enable_pipe_error_interrupt(pipe);
80005ae6:	30 8c       	mov	r12,8
80005ae8:	9d 0c       	st.w	lr[0x0],r12

	uhd_disable_out_ready_interrupt(pipe);
80005aea:	40 3e       	lddsp	lr,sp[0xc]
80005aec:	e0 3e f9 e0 	sub	lr,129504
80005af0:	30 20       	mov	r0,2
80005af2:	9d 00       	st.w	lr[0x0],r0
	uhd_pipe_dma_set_control(pipe, 0);
80005af4:	f2 0e 15 04 	lsl	lr,r9,0x4
80005af8:	e0 3e f9 00 	sub	lr,129280
80005afc:	30 00       	mov	r0,0
80005afe:	9d 20       	st.w	lr[0x8],r0
static void uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
80005b00:	e0 6e 0a 9c 	mov	lr,2716
80005b04:	20 19       	sub	r9,1
80005b06:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005b0a:	fc 09 00 29 	add	r9,lr,r9<<0x2
	if (ptr_job->busy == false) {
80005b0e:	72 0e       	ld.w	lr,r9[0x0]
80005b10:	58 0e       	cp.w	lr,0
		return; // No job running
	}
	ptr_job->busy = false;
80005b12:	c9 04       	brge	80005a32 <uhd_ep_free+0x5a>
80005b14:	fd d0 d3 e1 	bfins	lr,r0,0x1f,0x1
	if (NULL == ptr_job->call_end) {
80005b18:	93 0e       	st.w	r9[0x0],lr
80005b1a:	72 40       	ld.w	r0,r9[0x10]
80005b1c:	58 00       	cp.w	r0,0
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80005b1e:	c8 a0       	breq	80005a32 <uhd_ep_free+0x5a>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80005b20:	40 0c       	lddsp	r12,sp[0x0]
			uhd_get_pipe_endpoint_address(pipe),
80005b22:	72 39       	ld.w	r9,r9[0xc]
80005b24:	78 0e       	ld.w	lr,r12[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80005b26:	78 0c       	ld.w	r12,r12[0x0]
80005b28:	f9 dc c1 02 	bfextu	r12,r12,0x8,0x2
80005b2c:	50 3c       	stdsp	sp[0xc],r12
80005b2e:	70 08       	ld.w	r8,r8[0x0]
80005b30:	14 68       	and	r8,r10
80005b32:	f0 0b 0a 48 	lsr	r8,r8,r11
80005b36:	40 3a       	lddsp	r10,sp[0xc]
80005b38:	fd de c2 04 	bfextu	lr,lr,0x10,0x4
80005b3c:	f9 d8 c0 08 	bfextu	r12,r8,0x0,0x8
80005b40:	e0 68 00 80 	mov	r8,128
80005b44:	58 1a       	cp.w	r10,1
80005b46:	f9 b8 01 00 	movne	r8,0
80005b4a:	30 1a       	mov	r10,1
80005b4c:	f1 ee 10 0b 	or	r11,r8,lr
80005b50:	5d 10       	icall	r0
80005b52:	c7 0b       	rjmp	80005a32 <uhd_ep_free+0x5a>

80005b54 <uhd_resume>:
80005b54:	20 6d       	sub	sp,24
80005b56:	fe 68 04 00 	mov	r8,-130048
80005b5a:	70 08       	ld.w	r8,r8[0x0]
80005b5c:	ed b8 00 08 	bld	r8,0x8
	return !Is_uhd_sof_enabled();
}

void uhd_resume(void)
{
	if (Is_uhd_sof_enabled()) {
80005b60:	c0 f1       	brne	80005b7e <uhd_resume+0x2a>
		// Currently in IDLE mode (!=Suspend)
		if (uhd_suspend_start) {
80005b62:	e0 68 0b 14 	mov	r8,2836
80005b66:	30 09       	mov	r9,0
80005b68:	11 8a       	ld.ub	r10,r8[0x0]
80005b6a:	f2 0a 18 00 	cp.b	r10,r9
			// Suspend mode on going
			// then stop it and start resume event
			uhd_suspend_start = 0;
80005b6e:	c0 60       	breq	80005b7a <uhd_resume+0x26>
			uhd_resume_start = 1;
80005b70:	b0 89       	st.b	r8[0x0],r9
80005b72:	30 19       	mov	r9,1
80005b74:	e0 68 0b 16 	mov	r8,2838
	while (!Is_otg_clock_usable());
	otg_unfreeze_clock();
	uhd_enable_sof();
	uhd_send_resume();
	uhd_sleep_mode(UHD_STATE_IDLE);
}
80005b78:	b0 89       	st.b	r8[0x0],r9
			uhd_resume_start = 1;
		}
		return;
	}
	// Check USB clock ready after a potential sleep mode < IDLE
	while (!Is_otg_clock_usable());
80005b7a:	2f ad       	sub	sp,-24
80005b7c:	5e fc       	retal	r12
80005b7e:	fe 69 08 04 	mov	r9,-129020
80005b82:	72 08       	ld.w	r8,r9[0x0]
80005b84:	ed b8 00 0e 	bld	r8,0xe
	otg_unfreeze_clock();
80005b88:	cf d1       	brne	80005b82 <uhd_resume+0x2e>
80005b8a:	fe 69 08 00 	mov	r9,-129024
80005b8e:	72 08       	ld.w	r8,r9[0x0]
	uhd_enable_sof();
80005b90:	af c8       	cbr	r8,0xe
80005b92:	93 08       	st.w	r9[0x0],r8
80005b94:	fe 68 04 00 	mov	r8,-130048
80005b98:	70 09       	ld.w	r9,r8[0x0]
	uhd_send_resume();
80005b9a:	a9 a9       	sbr	r9,0x8
80005b9c:	91 09       	st.w	r8[0x0],r9
80005b9e:	70 09       	ld.w	r9,r8[0x0]
		SLEEPMGR_STOP,   // UHD_STATE_NO_VBUS
#endif
		SLEEPMGR_IDLE,   // UHD_STATE_DISCONNECT
		SLEEPMGR_STATIC, // UHD_STATE_SUSPEND
		SLEEPMGR_IDLE,   // UHD_STATE_IDLE
	};
80005ba0:	ab a9       	sbr	r9,0xa
80005ba2:	91 09       	st.w	r8[0x0],r9
80005ba4:	4a 59       	lddpc	r9,80005c38 <uhd_resume+0xe4>
80005ba6:	f2 ea 00 10 	ld.d	r10,r9[16]
80005baa:	fa eb 00 10 	st.d	sp[16],r10
80005bae:	f2 ea 00 00 	ld.d	r10,r9[0]
80005bb2:	fa eb 00 00 	st.d	sp[0],r10
80005bb6:	f2 ea 00 08 	ld.d	r10,r9[8]
	static enum uhd_usbb_state_enum uhd_state = UHD_STATE_OFF;

	if (uhd_state == new_state) {
80005bba:	fa eb 00 08 	st.d	sp[8],r10
80005bbe:	e0 69 0b 18 	mov	r9,2840
		return; // No change
	}
	if (new_state != UHD_STATE_OFF) {
		// Lock new limit
		sleepmgr_lock_mode( sleep_mode[new_state] );
80005bc2:	72 08       	ld.w	r8,r9[0x0]
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
80005bc4:	58 58       	cp.w	r8,5
80005bc6:	cd a0       	breq	80005b7a <uhd_resume+0x26>
80005bc8:	40 5b       	lddsp	r11,sp[0x14]
80005bca:	e0 68 0c 84 	mov	r8,3204
80005bce:	3f fa       	mov	r10,-1
80005bd0:	f0 0b 07 0c 	ld.ub	r12,r8[r11]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005bd4:	f4 0c 18 00 	cp.b	r12,r10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80005bd8:	c1 e0       	breq	80005c14 <uhd_resume+0xc0>
80005bda:	e1 ba 00 00 	mfsr	r10,0x0
80005bde:	d3 03       	ssrf	0x10
80005be0:	f0 0b 07 0c 	ld.ub	r12,r8[r11]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005be4:	2f fc       	sub	r12,-1
80005be6:	f0 0b 0b 0c 	st.b	r8[r11],r12
	}
	if (uhd_state != UHD_STATE_OFF) {
80005bea:	ed ba 00 10 	bld	r10,0x10
		// Unlock old limit
		sleepmgr_unlock_mode( sleep_mode[uhd_state] );
80005bee:	c2 31       	brne	80005c34 <uhd_resume+0xe0>
80005bf0:	72 0a       	ld.w	r10,r9[0x0]
80005bf2:	58 0a       	cp.w	r10,0
80005bf4:	c1 d0       	breq	80005c2e <uhd_resume+0xda>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
80005bf6:	fa cb ff e8 	sub	r11,sp,-24
80005bfa:	f6 0a 00 2a 	add	r10,r11,r10<<0x2
80005bfe:	e0 6b 0c 84 	mov	r11,3204
80005c02:	f4 fa ff e8 	ld.w	r10,r10[-24]
80005c06:	f0 0a 07 0c 	ld.ub	r12,r8[r10]
80005c0a:	30 08       	mov	r8,0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005c0c:	f0 0c 18 00 	cp.b	r12,r8
	cpu_irq_disable();
80005c10:	c0 31       	brne	80005c16 <uhd_resume+0xc2>
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80005c12:	c0 08       	rjmp	80005c12 <uhd_resume+0xbe>
80005c14:	c0 08       	rjmp	80005c14 <uhd_resume+0xc0>
80005c16:	e1 b8 00 00 	mfsr	r8,0x0
80005c1a:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005c1c:	f6 0a 07 0c 	ld.ub	r12,r11[r10]
80005c20:	20 1c       	sub	r12,1
      cpu_irq_enable();
80005c22:	f6 0a 0b 0c 	st.b	r11[r10],r12
	}
	uhd_state = new_state;
80005c26:	ed b8 00 10 	bld	r8,0x10
80005c2a:	c0 20       	breq	80005c2e <uhd_resume+0xda>
80005c2c:	d5 03       	csrf	0x10
80005c2e:	30 58       	mov	r8,5
80005c30:	93 08       	st.w	r9[0x0],r8
80005c32:	ca 4b       	rjmp	80005b7a <uhd_resume+0x26>
80005c34:	d5 03       	csrf	0x10
80005c36:	cd db       	rjmp	80005bf0 <uhd_resume+0x9c>
80005c38:	80 00       	ld.sh	r0,r0[0x0]
80005c3a:	f7 8c       	*unknown*

80005c3c <uhd_pipe_trans_complet>:
80005c3c:	eb cd 40 f8 	pushm	r3-r7,lr
80005c40:	e0 69 0a 9c 	mov	r9,2716
	iram_size_t max_trans;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
80005c44:	f8 c8 00 01 	sub	r8,r12,1
80005c48:	f0 08 00 28 	add	r8,r8,r8<<0x2
80005c4c:	f2 08 00 28 	add	r8,r9,r8<<0x2

	if (!ptr_job->busy) {
80005c50:	70 0a       	ld.w	r10,r8[0x0]
80005c52:	58 0a       	cp.w	r10,0
80005c54:	e0 84 00 8c 	brge	80005d6c <uhd_pipe_trans_complet+0x130>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80005c58:	70 39       	ld.w	r9,r8[0xc]
80005c5a:	70 26       	ld.w	r6,r8[0x8]
80005c5c:	0c 39       	cp.w	r9,r6
80005c5e:	e0 80 00 89 	breq	80005d70 <uhd_pipe_trans_complet+0x134>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
		max_trans = UHD_PIPE_MAX_TRANS;
		if (uhd_is_pipe_in(pipe)) {
80005c62:	fe 67 05 00 	mov	r7,-129792
80005c66:	f8 0e 15 02 	lsl	lr,r12,0x2
80005c6a:	fc 07 00 0b 	add	r11,lr,r7
80005c6e:	76 07       	ld.w	r7,r11[0x0]
80005c70:	ef d7 c1 02 	bfextu	r7,r7,0x8,0x2
80005c74:	58 17       	cp.w	r7,1
80005c76:	e0 80 00 d5 	breq	80005e20 <uhd_pipe_trans_complet+0x1e4>
			// 256 is the maximum of IN requests via UPINRQ
			if ((256L*uhd_get_pipe_size(pipe))<UHD_PIPE_MAX_TRANS) {
				 max_trans = 256L * uhd_get_pipe_size(pipe);
80005c7a:	e0 77 00 00 	mov	r7,65536
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80005c7e:	12 16       	sub	r6,r9
80005c80:	0c 37       	cp.w	r7,r6
80005c82:	ec 07 17 b0 	movhi	r7,r6
			// The USB hardware supports a maximum
			// transfer size of UHD_PIPE_MAX_TRANS Bytes
			next_trans = max_trans;
		}

		if (next_trans == UHD_PIPE_MAX_TRANS) {
80005c86:	e0 57 00 00 	cp.w	r7,65536
80005c8a:	e0 80 00 c9 	breq	80005e1c <uhd_pipe_trans_complet+0x1e0>
			// Set 0 to transfer the maximum
			uhd_dma_ctrl = (0 <<
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			uhd_dma_ctrl = (next_trans <<
80005c8e:	ee 06 15 10 	lsl	r6,r7,0x10
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}

		if (uhd_is_pipe_out(pipe)) {
80005c92:	76 05       	ld.w	r5,r11[0x0]
80005c94:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80005c98:	58 25       	cp.w	r5,2
80005c9a:	e0 80 00 b0 	breq	80005dfa <uhd_pipe_trans_complet+0x1be>
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
80005c9e:	76 0a       	ld.w	r10,r11[0x0]
80005ca0:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
80005ca4:	58 1a       	cp.w	r10,1
80005ca6:	e0 80 00 d0 	breq	80005e46 <uhd_pipe_trans_complet+0x20a>
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
				// Enable short packet reception
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOT_IRQ_EN_MASK
80005caa:	e8 16 00 14 	orl	r6,0x14
						| AVR32_USBB_UHDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80005cae:	70 1a       	ld.w	r10,r8[0x4]
80005cb0:	f4 09 00 09 	add	r9,r10,r9
80005cb4:	f8 0a 15 04 	lsl	r10,r12,0x4
80005cb8:	e0 3a f9 00 	sub	r10,129280
80005cbc:	95 19       	st.w	r10[0x4],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005cbe:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
80005cc2:	d3 03       	ssrf	0x10
				AVR32_USBB_UHDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if( !(uhd_pipe_dma_get_status(pipe)
80005cc4:	74 39       	ld.w	r9,r10[0xc]
80005cc6:	ed b9 00 04 	bld	r9,0x4
80005cca:	c1 a0       	breq	80005cfe <uhd_pipe_trans_complet+0xc2>
				& AVR32_USBB_UHDMA1_STATUS_EOT_STA_MASK)) {
			if (uhd_is_pipe_in(pipe)) {
80005ccc:	76 09       	ld.w	r9,r11[0x0]
80005cce:	f3 d9 c1 02 	bfextu	r9,r9,0x8,0x2
80005cd2:	58 19       	cp.w	r9,1
80005cd4:	c7 70       	breq	80005dc2 <uhd_pipe_trans_complet+0x186>
				uhd_in_request_number(pipe,
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
80005cd6:	e0 3e f9 e0 	sub	lr,129504
80005cda:	e0 69 10 00 	mov	r9,4096
80005cde:	9d 09       	st.w	lr[0x0],r9
			uhd_unfreeze_pipe(pipe);
80005ce0:	e2 69 00 00 	mov	r9,131072
80005ce4:	9d 09       	st.w	lr[0x0],r9
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80005ce6:	e8 16 00 21 	orl	r6,0x21
				uhd_in_request_number(pipe,
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
			uhd_unfreeze_pipe(pipe);
			uhd_pipe_dma_set_control(pipe, uhd_dma_ctrl);
80005cea:	95 26       	st.w	r10[0x8],r6
			ptr_job->nb_trans += next_trans;
80005cec:	70 39       	ld.w	r9,r8[0xc]
80005cee:	f2 07 00 07 	add	r7,r9,r7
80005cf2:	91 37       	st.w	r8[0xc],r7
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005cf4:	e6 15 00 01 	andh	r5,0x1,COH
80005cf8:	c6 30       	breq	80005dbe <uhd_pipe_trans_complet+0x182>
			cpu_irq_restore(flags);
			return;
80005cfa:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80005cfe:	e6 15 00 01 	andh	r5,0x1,COH
80005d02:	c0 21       	brne	80005d06 <uhd_pipe_trans_complet+0xca>
      cpu_irq_enable();
80005d04:	d5 03       	csrf	0x10
		}
		cpu_irq_restore(flags);
		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80005d06:	70 39       	ld.w	r9,r8[0xc]
80005d08:	91 29       	st.w	r8[0x8],r9
	}
	if (uhd_is_pipe_out(pipe)) {
80005d0a:	76 07       	ld.w	r7,r11[0x0]
		}
		cpu_irq_restore(flags);
		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80005d0c:	70 0a       	ld.w	r10,r8[0x0]
	}
	if (uhd_is_pipe_out(pipe)) {
80005d0e:	ef d7 c1 02 	bfextu	r7,r7,0x8,0x2
80005d12:	58 27       	cp.w	r7,2
80005d14:	c3 90       	breq	80005d86 <uhd_pipe_trans_complet+0x14a>
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
	if (ptr_job->busy == false) {
80005d16:	58 0a       	cp.w	r10,0
80005d18:	c2 a4       	brge	80005d6c <uhd_pipe_trans_complet+0x130>
		return; // No job running
	}
	ptr_job->busy = false;
80005d1a:	14 9e       	mov	lr,r10
80005d1c:	30 0a       	mov	r10,0
80005d1e:	fd da d3 e1 	bfins	lr,r10,0x1f,0x1
80005d22:	91 0e       	st.w	r8[0x0],lr
	if (NULL == ptr_job->call_end) {
80005d24:	70 48       	ld.w	r8,r8[0x10]
80005d26:	58 08       	cp.w	r8,0
80005d28:	c2 20       	breq	80005d6c <uhd_pipe_trans_complet+0x130>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80005d2a:	76 0e       	ld.w	lr,r11[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80005d2c:	ef dc c0 02 	bfextu	r7,r12,0x0,0x2
			uhd_get_pipe_endpoint_address(pipe),
80005d30:	76 06       	ld.w	r6,r11[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80005d32:	e2 1c 03 fc 	andl	r12,0x3fc,COH
80005d36:	f7 de c2 04 	bfextu	r11,lr,0x10,0x4
80005d3a:	e0 3c fb dc 	sub	r12,130012
80005d3e:	ed d6 c1 02 	bfextu	r6,r6,0x8,0x2
80005d42:	e0 6e 00 80 	mov	lr,128
80005d46:	58 16       	cp.w	r6,1
80005d48:	f4 0e 17 10 	movne	lr,r10
80005d4c:	a3 77       	lsl	r7,0x3
80005d4e:	fd eb 10 0b 	or	r11,lr,r11
80005d52:	78 0e       	ld.w	lr,r12[0x0]
80005d54:	37 fc       	mov	r12,127
80005d56:	f8 07 09 4c 	lsl	r12,r12,r7
80005d5a:	f9 ee 00 0e 	and	lr,r12,lr
80005d5e:	5c 9c       	brev	r12
80005d60:	f8 0c 12 00 	clz	r12,r12
80005d64:	fc 0c 0a 4c 	lsr	r12,lr,r12
80005d68:	5c 5c       	castu.b	r12
80005d6a:	5d 18       	icall	r8
80005d6c:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80005d70:	fe 67 05 00 	mov	r7,-129792
80005d74:	f8 0e 15 02 	lsl	lr,r12,0x2
80005d78:	fc 07 00 0b 	add	r11,lr,r7
		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
	}
	if (uhd_is_pipe_out(pipe)) {
80005d7c:	76 07       	ld.w	r7,r11[0x0]
80005d7e:	ef d7 c1 02 	bfextu	r7,r7,0x8,0x2
80005d82:	58 27       	cp.w	r7,2
80005d84:	cc 91       	brne	80005d16 <uhd_pipe_trans_complet+0xda>
		if (ptr_job->b_shortpacket) {
80005d86:	14 96       	mov	r6,r10
80005d88:	e6 16 40 00 	andh	r6,0x4000,COH
80005d8c:	cc 50       	breq	80005d16 <uhd_pipe_trans_complet+0xda>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			uhd_ack_out_ready(pipe);
80005d8e:	fe 69 05 60 	mov	r9,-129696
80005d92:	fc 09 00 08 	add	r8,lr,r9
80005d96:	91 07       	st.w	r8[0x0],r7
			if (Is_uhd_write_enabled(pipe)) {
80005d98:	fe 69 05 30 	mov	r9,-129744
80005d9c:	fc 09 00 08 	add	r8,lr,r9
80005da0:	70 08       	ld.w	r8,r8[0x0]
80005da2:	ed b8 00 10 	bld	r8,0x10
80005da6:	c0 61       	brne	80005db2 <uhd_pipe_trans_complet+0x176>
				// Force interrupt in case of pipe already free
				uhd_raise_out_ready(pipe);
80005da8:	fe 69 05 90 	mov	r9,-129648
80005dac:	fc 09 00 08 	add	r8,lr,r9
80005db0:	91 07       	st.w	r8[0x0],r7
			}
			uhd_enable_out_ready_interrupt(pipe);
80005db2:	e0 3e fa 10 	sub	lr,129552
80005db6:	30 28       	mov	r8,2
80005db8:	9d 08       	st.w	lr[0x0],r8
			return;
80005dba:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80005dbe:	d5 03       	csrf	0x10
80005dc0:	c9 db       	rjmp	80005cfa <uhd_pipe_trans_complet+0xbe>
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if( !(uhd_pipe_dma_get_status(pipe)
				& AVR32_USBB_UHDMA1_STATUS_EOT_STA_MASK)) {
			if (uhd_is_pipe_in(pipe)) {
				uhd_in_request_number(pipe,
80005dc2:	fe 69 06 50 	mov	r9,-129456
80005dc6:	fc 09 00 0c 	add	r12,lr,r9
80005dca:	78 09       	ld.w	r9,r12[0x0]
80005dcc:	76 03       	ld.w	r3,r11[0x0]
80005dce:	e0 19 ff 00 	andl	r9,0xff00
80005dd2:	76 04       	ld.w	r4,r11[0x0]
80005dd4:	f7 d3 c0 83 	bfextu	r11,r3,0x4,0x3
80005dd8:	e9 d4 c0 83 	bfextu	r4,r4,0x4,0x3
80005ddc:	30 83       	mov	r3,8
80005dde:	2f d4       	sub	r4,-3
80005de0:	e6 0b 09 4b 	lsl	r11,r3,r11
80005de4:	20 1b       	sub	r11,1
80005de6:	0e 0b       	add	r11,r7
80005de8:	f6 04 0a 4b 	lsr	r11,r11,r4
80005dec:	20 1b       	sub	r11,1
80005dee:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80005df2:	f7 e9 10 09 	or	r9,r11,r9
80005df6:	99 09       	st.w	r12[0x0],r9
80005df8:	c6 fb       	rjmp	80005cd6 <uhd_pipe_trans_complet+0x9a>
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}

		if (uhd_is_pipe_out(pipe)) {
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
80005dfa:	76 05       	ld.w	r5,r11[0x0]
80005dfc:	30 84       	mov	r4,8
80005dfe:	eb d5 c0 83 	bfextu	r5,r5,0x4,0x3
80005e02:	e8 05 09 45 	lsl	r5,r4,r5
80005e06:	20 15       	sub	r5,1
80005e08:	ef e5 00 05 	and	r5,r7,r5
80005e0c:	fe 90 ff 51 	breq	80005cae <uhd_pipe_trans_complet+0x72>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80005e10:	30 05       	mov	r5,0
		if (uhd_is_pipe_out(pipe)) {
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
80005e12:	08 46       	or	r6,r4
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80005e14:	f5 d5 d3 c1 	bfins	r10,r5,0x1e,0x1
80005e18:	91 0a       	st.w	r8[0x0],r10
80005e1a:	c4 ab       	rjmp	80005cae <uhd_pipe_trans_complet+0x72>
			// The USB hardware supports a maximum
			// transfer size of UHD_PIPE_MAX_TRANS Bytes
			next_trans = max_trans;
		}

		if (next_trans == UHD_PIPE_MAX_TRANS) {
80005e1c:	30 06       	mov	r6,0
80005e1e:	c3 ab       	rjmp	80005c92 <uhd_pipe_trans_complet+0x56>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
		max_trans = UHD_PIPE_MAX_TRANS;
		if (uhd_is_pipe_in(pipe)) {
			// 256 is the maximum of IN requests via UPINRQ
			if ((256L*uhd_get_pipe_size(pipe))<UHD_PIPE_MAX_TRANS) {
80005e20:	76 05       	ld.w	r5,r11[0x0]
80005e22:	30 87       	mov	r7,8
80005e24:	eb d5 c0 83 	bfextu	r5,r5,0x4,0x3
80005e28:	ee 05 09 45 	lsl	r5,r7,r5
80005e2c:	ea 07 09 45 	lsl	r5,r5,r7
80005e30:	e0 45 ff ff 	cp.w	r5,65535
80005e34:	fe 99 ff 23 	brgt	80005c7a <uhd_pipe_trans_complet+0x3e>
				 max_trans = 256L * uhd_get_pipe_size(pipe);
80005e38:	76 05       	ld.w	r5,r11[0x0]
80005e3a:	eb d5 c0 83 	bfextu	r5,r5,0x4,0x3
80005e3e:	ee 05 09 47 	lsl	r7,r7,r5
80005e42:	a9 67       	lsl	r7,0x8
80005e44:	c1 db       	rjmp	80005c7e <uhd_pipe_trans_complet+0x42>
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
80005e46:	76 0a       	ld.w	r10,r11[0x0]
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
80005e48:	30 85       	mov	r5,8
80005e4a:	f5 da c0 83 	bfextu	r10,r10,0x4,0x3
80005e4e:	ea 0a 09 4a 	lsl	r10,r5,r10
80005e52:	0e 3a       	cp.w	r10,r7
80005e54:	fe 93 ff 2d 	brlo	80005cae <uhd_pipe_trans_complet+0x72>
80005e58:	c2 9b       	rjmp	80005caa <uhd_pipe_trans_complet+0x6e>
80005e5a:	d7 03       	nop

80005e5c <uhd_ep_run>:
80005e5c:	eb cd 40 f8 	pushm	r3-r7,lr
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80005e60:	fe 6e 00 00 	mov	lr,-131072
80005e64:	fc fe 04 1c 	ld.w	lr,lr[1052]
		bool b_shortpacket,
		uint8_t *buf,
		iram_size_t buf_size,
		uint16_t timeout,
		uhd_callback_trans_t callback)
{
80005e68:	fa c4 ff e8 	sub	r4,sp,-24
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80005e6c:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
		bool b_shortpacket,
		uint8_t *buf,
		iram_size_t buf_size,
		uint16_t timeout,
		uhd_callback_trans_t callback)
{
80005e70:	68 17       	ld.w	r7,r4[0x4]
80005e72:	68 04       	ld.w	r4,r4[0x0]
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80005e74:	c0 90       	breq	80005e86 <uhd_ep_run+0x2a>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80005e76:	fe 6e 04 24 	mov	lr,-130012
80005e7a:	7c 0e       	ld.w	lr,lr[0x0]
80005e7c:	fd de c0 07 	bfextu	lr,lr,0x0,0x7
80005e80:	1c 3c       	cp.w	r12,lr
80005e82:	e0 80 00 b4 	breq	80005fea <uhd_ep_run+0x18e>
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80005e86:	fe 6e 00 00 	mov	lr,-131072
80005e8a:	fc fe 04 1c 	ld.w	lr,lr[1052]
80005e8e:	ed be 00 01 	bld	lr,0x1
80005e92:	c2 e0       	breq	80005eee <uhd_ep_run+0x92>
80005e94:	fe 6e 00 00 	mov	lr,-131072
80005e98:	fc fe 04 1c 	ld.w	lr,lr[1052]
80005e9c:	ed be 00 02 	bld	lr,0x2
80005ea0:	c4 00       	breq	80005f20 <uhd_ep_run+0xc4>
80005ea2:	fe 6e 00 00 	mov	lr,-131072
80005ea6:	fc fe 04 1c 	ld.w	lr,lr[1052]
80005eaa:	ed be 00 03 	bld	lr,0x3
80005eae:	c5 20       	breq	80005f52 <uhd_ep_run+0xf6>
80005eb0:	fe 6e 00 00 	mov	lr,-131072
80005eb4:	fc fe 04 1c 	ld.w	lr,lr[1052]
80005eb8:	ed be 00 04 	bld	lr,0x4
80005ebc:	c6 40       	breq	80005f84 <uhd_ep_run+0x128>
80005ebe:	fe 6e 00 00 	mov	lr,-131072
80005ec2:	fc fe 04 1c 	ld.w	lr,lr[1052]
80005ec6:	ed be 00 05 	bld	lr,0x5
80005eca:	c7 60       	breq	80005fb6 <uhd_ep_run+0x15a>
80005ecc:	fe 6e 00 00 	mov	lr,-131072
80005ed0:	fc fe 04 1c 	ld.w	lr,lr[1052]
80005ed4:	e2 1e 00 40 	andl	lr,0x40,COH
80005ed8:	c0 90       	breq	80005eea <uhd_ep_run+0x8e>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80005eda:	fe 6e 04 28 	mov	lr,-130008
80005ede:	7c 0e       	ld.w	lr,lr[0x0]
80005ee0:	fd de c2 07 	bfextu	lr,lr,0x10,0x7
80005ee4:	1c 3c       	cp.w	r12,lr
80005ee6:	e0 80 00 aa 	breq	8000603a <uhd_ep_run+0x1de>
	ptr_job->call_end = callback;
	cpu_irq_restore(flags);

	// Request first transfer
	uhd_pipe_trans_complet(pipe);
	return true;
80005eea:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80005eee:	fe 6e 04 24 	mov	lr,-130012
80005ef2:	7c 0e       	ld.w	lr,lr[0x0]
80005ef4:	fd de c1 07 	bfextu	lr,lr,0x8,0x7
80005ef8:	1c 3c       	cp.w	r12,lr
80005efa:	cc d1       	brne	80005e94 <uhd_ep_run+0x38>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80005efc:	fe 6e 05 04 	mov	lr,-129788
80005f00:	7c 06       	ld.w	r6,lr[0x0]
80005f02:	7c 05       	ld.w	r5,lr[0x0]
80005f04:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
80005f08:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80005f0c:	e0 6e 00 80 	mov	lr,128
80005f10:	58 15       	cp.w	r5,1
80005f12:	f9 be 01 00 	movne	lr,0
80005f16:	0c 4e       	or	lr,r6
80005f18:	1c 3b       	cp.w	r11,lr
80005f1a:	cb d1       	brne	80005e94 <uhd_ep_run+0x38>
80005f1c:	30 1c       	mov	r12,1
80005f1e:	c7 88       	rjmp	8000600e <uhd_ep_run+0x1b2>
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80005f20:	fe 6e 04 24 	mov	lr,-130012
80005f24:	7c 0e       	ld.w	lr,lr[0x0]
80005f26:	fd de c2 07 	bfextu	lr,lr,0x10,0x7
80005f2a:	1c 3c       	cp.w	r12,lr
80005f2c:	cb b1       	brne	80005ea2 <uhd_ep_run+0x46>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80005f2e:	fe 6e 05 08 	mov	lr,-129784
80005f32:	7c 06       	ld.w	r6,lr[0x0]
80005f34:	7c 05       	ld.w	r5,lr[0x0]
80005f36:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
80005f3a:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80005f3e:	e0 6e 00 80 	mov	lr,128
80005f42:	58 15       	cp.w	r5,1
80005f44:	f9 be 01 00 	movne	lr,0
80005f48:	0c 4e       	or	lr,r6
80005f4a:	1c 3b       	cp.w	r11,lr
80005f4c:	ca b1       	brne	80005ea2 <uhd_ep_run+0x46>
80005f4e:	30 2c       	mov	r12,2
80005f50:	c5 f8       	rjmp	8000600e <uhd_ep_run+0x1b2>
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80005f52:	fe 6e 04 24 	mov	lr,-130012
80005f56:	7c 0e       	ld.w	lr,lr[0x0]
80005f58:	fd de c3 07 	bfextu	lr,lr,0x18,0x7
80005f5c:	1c 3c       	cp.w	r12,lr
80005f5e:	ca 91       	brne	80005eb0 <uhd_ep_run+0x54>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80005f60:	fe 6e 05 0c 	mov	lr,-129780
80005f64:	7c 06       	ld.w	r6,lr[0x0]
80005f66:	7c 05       	ld.w	r5,lr[0x0]
80005f68:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
80005f6c:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80005f70:	e0 6e 00 80 	mov	lr,128
80005f74:	58 15       	cp.w	r5,1
80005f76:	f9 be 01 00 	movne	lr,0
80005f7a:	0c 4e       	or	lr,r6
80005f7c:	1c 3b       	cp.w	r11,lr
80005f7e:	c9 91       	brne	80005eb0 <uhd_ep_run+0x54>
80005f80:	30 3c       	mov	r12,3
80005f82:	c4 68       	rjmp	8000600e <uhd_ep_run+0x1b2>
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80005f84:	fe 6e 04 28 	mov	lr,-130008
80005f88:	7c 0e       	ld.w	lr,lr[0x0]
80005f8a:	fd de c0 07 	bfextu	lr,lr,0x0,0x7
80005f8e:	1c 3c       	cp.w	r12,lr
80005f90:	c9 71       	brne	80005ebe <uhd_ep_run+0x62>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80005f92:	fe 6e 05 10 	mov	lr,-129776
80005f96:	7c 06       	ld.w	r6,lr[0x0]
80005f98:	7c 05       	ld.w	r5,lr[0x0]
80005f9a:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
80005f9e:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80005fa2:	e0 6e 00 80 	mov	lr,128
80005fa6:	58 15       	cp.w	r5,1
80005fa8:	f9 be 01 00 	movne	lr,0
80005fac:	0c 4e       	or	lr,r6
80005fae:	1c 3b       	cp.w	r11,lr
80005fb0:	c8 71       	brne	80005ebe <uhd_ep_run+0x62>
80005fb2:	30 4c       	mov	r12,4
80005fb4:	c2 d8       	rjmp	8000600e <uhd_ep_run+0x1b2>
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80005fb6:	fe 6e 04 28 	mov	lr,-130008
80005fba:	7c 0e       	ld.w	lr,lr[0x0]
80005fbc:	fd de c1 07 	bfextu	lr,lr,0x8,0x7
80005fc0:	1c 3c       	cp.w	r12,lr
80005fc2:	c8 51       	brne	80005ecc <uhd_ep_run+0x70>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80005fc4:	fe 6e 05 14 	mov	lr,-129772
80005fc8:	7c 06       	ld.w	r6,lr[0x0]
80005fca:	7c 05       	ld.w	r5,lr[0x0]
80005fcc:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
80005fd0:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80005fd4:	e0 6e 00 80 	mov	lr,128
80005fd8:	58 15       	cp.w	r5,1
80005fda:	f9 be 01 00 	movne	lr,0
80005fde:	0c 4e       	or	lr,r6
80005fe0:	1c 3b       	cp.w	r11,lr
80005fe2:	fe 91 ff 75 	brne	80005ecc <uhd_ep_run+0x70>
80005fe6:	30 5c       	mov	r12,5
80005fe8:	c1 38       	rjmp	8000600e <uhd_ep_run+0x1b2>
80005fea:	fe 6e 05 00 	mov	lr,-129792
80005fee:	7c 06       	ld.w	r6,lr[0x0]
80005ff0:	7c 05       	ld.w	r5,lr[0x0]
80005ff2:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
80005ff6:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80005ffa:	e0 6e 00 80 	mov	lr,128
80005ffe:	58 15       	cp.w	r5,1
80006000:	f9 be 01 00 	movne	lr,0
80006004:	0c 4e       	or	lr,r6
80006006:	1c 3b       	cp.w	r11,lr
80006008:	fe 91 ff 3f 	brne	80005e86 <uhd_ep_run+0x2a>
8000600c:	30 0c       	mov	r12,0
	if (pipe == AVR32_USBB_EPT_NUM) {
		return false; // pipe not found
	}

	// Get job about pipe
	ptr_job = &uhd_pipe_job[pipe-1];
8000600e:	f8 cb 00 01 	sub	r11,r12,1
80006012:	e0 6e 0a 9c 	mov	lr,2716
80006016:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000601a:	fc 0b 00 2b 	add	r11,lr,r11<<0x2

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000601e:	e1 b6 00 00 	mfsr	r6,0x0
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80006022:	d3 03       	ssrf	0x10
80006024:	76 0e       	ld.w	lr,r11[0x0]
80006026:	1c 95       	mov	r5,lr
80006028:	e6 15 80 00 	andh	r5,0x8000,COH
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000602c:	c1 a0       	breq	80006060 <uhd_ep_run+0x204>
8000602e:	e6 16 00 01 	andh	r6,0x1,COH
      cpu_irq_enable();
80006032:	c0 21       	brne	80006036 <uhd_ep_run+0x1da>
   }

	barrier();
80006034:	d5 03       	csrf	0x10
80006036:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
8000603a:	fe 6c 05 18 	mov	r12,-129768
8000603e:	78 0e       	ld.w	lr,r12[0x0]
80006040:	78 06       	ld.w	r6,r12[0x0]
80006042:	fd de c2 04 	bfextu	lr,lr,0x10,0x4
80006046:	ed d6 c1 02 	bfextu	r6,r6,0x8,0x2
8000604a:	e0 6c 00 80 	mov	r12,128
8000604e:	58 16       	cp.w	r6,1
80006050:	f9 bc 01 00 	movne	r12,0
80006054:	1c 4c       	or	r12,lr
80006056:	18 3b       	cp.w	r11,r12
80006058:	fe 91 ff 49 	brne	80005eea <uhd_ep_run+0x8e>
	ptr_job->call_end = callback;
	cpu_irq_restore(flags);

	// Request first transfer
	uhd_pipe_trans_complet(pipe);
	return true;
8000605c:	30 6c       	mov	r12,6
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
8000605e:	cd 8b       	rjmp	8000600e <uhd_ep_run+0x1b2>
80006060:	30 13       	mov	r3,1
80006062:	fd d3 d3 e1 	bfins	lr,r3,0x1f,0x1

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
80006066:	97 0e       	st.w	r11[0x0],lr
	}
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
80006068:	b6 14       	st.h	r11[0x2],r4
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
	ptr_job->call_end = callback;
8000606a:	97 28       	st.w	r11[0x8],r8
	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
8000606c:	97 47       	st.w	r11[0x10],r7
		return false; // Job already on going
	}
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
8000606e:	76 08       	ld.w	r8,r11[0x0]
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
80006070:	97 19       	st.w	r11[0x4],r9
80006072:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
80006076:	97 35       	st.w	r11[0xc],r5
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006078:	97 08       	st.w	r11[0x0],r8
8000607a:	e6 16 00 01 	andh	r6,0x1,COH
	ptr_job->call_end = callback;
	cpu_irq_restore(flags);

	// Request first transfer
	uhd_pipe_trans_complet(pipe);
8000607e:	c0 50       	breq	80006088 <uhd_ep_run+0x22c>
80006080:	fe b0 fd de 	rcall	80005c3c <uhd_pipe_trans_complet>
80006084:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
      cpu_irq_enable();
80006088:	d5 03       	csrf	0x10
8000608a:	cf bb       	rjmp	80006080 <uhd_ep_run+0x224>

8000608c <otg_dual_enable>:
8000608c:	eb cd 40 80 	pushm	r7,lr
80006090:	20 6d       	sub	sp,24
80006092:	e0 68 0a 94 	mov	r8,2708
	otg_data_memory_barrier();
}

bool otg_dual_enable(void)
{
	if (otg_initialized) {
80006096:	30 09       	mov	r9,0
80006098:	11 8a       	ld.ub	r10,r8[0x0]
8000609a:	f2 0a 18 00 	cp.b	r10,r9
8000609e:	c0 50       	breq	800060a8 <otg_dual_enable+0x1c>
	return true;  // ID pin management has been enabled
# else
	uhd_sleep_mode(UHD_STATE_OFF);
	return false; // ID pin management has not been enabled
# endif
}
800060a0:	30 0c       	mov	r12,0
800060a2:	2f ad       	sub	sp,-24
800060a4:	e3 cd 80 80 	ldm	sp++,r7,pc
bool otg_dual_enable(void)
{
	if (otg_initialized) {
		return false; // Dual role already initialized
	}
	otg_initialized = true;
800060a8:	30 19       	mov	r9,1

	//* Enable USB hardware clock
	sysclk_enable_usb();
800060aa:	b0 89       	st.b	r8[0x0],r9
800060ac:	e0 a0 0a 52 	rcall	80007550 <sysclk_enable_usb>

	//* Link USB interrupt on OTG interrupt in dual role
	irq_register_handler(otg_interrupt, AVR32_USBB_IRQ, UHD_USB_INT_LEVEL);
800060b0:	30 0a       	mov	r10,0
800060b2:	e0 6b 02 20 	mov	r11,544
800060b6:	fe cc fb ee 	sub	r12,pc,-1042
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
800060ba:	fe b0 ef 79 	rcall	80003fac <INTC_register_interrupt>
800060be:	fe 79 0c 00 	mov	r9,-62464
800060c2:	f2 f8 01 44 	ld.w	r8,r9[324]
800060c6:	a1 a8       	sbr	r8,0x0
	pm_asyn_wake_up_enable(AVR32_PM_AWEN_USB_WAKEN_MASK);

# ifdef USB_ID
	// By default USBB is already configured with ID pin enable
	// The USBB must be enabled to provide interrupt
	otg_input_id_pin();
800060c8:	f3 48 01 44 	st.w	r9[324],r8
800060cc:	fe 78 10 00 	mov	r8,-61440
800060d0:	e0 69 08 00 	mov	r9,2048
800060d4:	91 59       	st.w	r8[0x14],r9
800060d6:	91 a9       	st.w	r8[0x28],r9
800060d8:	91 29       	st.w	r8[0x8],r9
	otg_unfreeze_clock();
800060da:	f1 49 00 74 	st.w	r8[116],r9
800060de:	fe 68 08 00 	mov	r8,-129024
800060e2:	70 09       	ld.w	r9,r8[0x0]
	otg_enable();
800060e4:	af c9       	cbr	r9,0xe
800060e6:	91 09       	st.w	r8[0x0],r9
800060e8:	70 09       	ld.w	r9,r8[0x0]
	otg_enable_id_interrupt();
800060ea:	af b9       	sbr	r9,0xf
800060ec:	91 09       	st.w	r8[0x0],r9
800060ee:	70 09       	ld.w	r9,r8[0x0]
	otg_ack_id_transition();
800060f0:	a1 a9       	sbr	r9,0x0
800060f2:	91 09       	st.w	r8[0x0],r9
800060f4:	30 17       	mov	r7,1
800060f6:	fe 69 08 08 	mov	r9,-129016
	otg_freeze_clock();
800060fa:	93 07       	st.w	r9[0x0],r7
800060fc:	70 09       	ld.w	r9,r8[0x0]
	if (Is_otg_id_device()) {
800060fe:	af a9       	sbr	r9,0xe
80006100:	91 09       	st.w	r8[0x0],r9
80006102:	fe 68 08 04 	mov	r8,-129020
80006106:	70 08       	ld.w	r8,r8[0x0]
80006108:	ed b8 00 0a 	bld	r8,0xa
		uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
		UHC_MODE_CHANGE(false);
		udc_start();
	} else {
		UHC_MODE_CHANGE(true);
8000610c:	c0 80       	breq	8000611c <otg_dual_enable+0x90>
8000610e:	0e 9c       	mov	r12,r7
		uhc_start();
80006110:	fe b0 e8 64 	rcall	800031d8 <ui_usb_mode_change>
80006114:	e0 a0 12 28 	rcall	80008564 <uhc_start>
		SLEEPMGR_STOP,   // UHD_STATE_NO_VBUS
#endif
		SLEEPMGR_IDLE,   // UHD_STATE_DISCONNECT
		SLEEPMGR_STATIC, // UHD_STATE_SUSPEND
		SLEEPMGR_IDLE,   // UHD_STATE_IDLE
	};
80006118:	0e 9c       	mov	r12,r7
8000611a:	cc 4b       	rjmp	800060a2 <otg_dual_enable+0x16>
8000611c:	4a 89       	lddpc	r9,800061bc <otg_dual_enable+0x130>
8000611e:	f2 ea 00 10 	ld.d	r10,r9[16]
80006122:	fa eb 00 10 	st.d	sp[16],r10
80006126:	f2 ea 00 00 	ld.d	r10,r9[0]
8000612a:	fa eb 00 00 	st.d	sp[0],r10
8000612e:	f2 ea 00 08 	ld.d	r10,r9[8]
	static enum uhd_usbb_state_enum uhd_state = UHD_STATE_OFF;

	if (uhd_state == new_state) {
80006132:	fa eb 00 08 	st.d	sp[8],r10
80006136:	e0 69 0b 18 	mov	r9,2840
		return; // No change
	}
	if (new_state != UHD_STATE_OFF) {
		// Lock new limit
		sleepmgr_lock_mode( sleep_mode[new_state] );
8000613a:	72 08       	ld.w	r8,r9[0x0]
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
8000613c:	0e 38       	cp.w	r8,r7
8000613e:	c3 60       	breq	800061aa <otg_dual_enable+0x11e>
80006140:	40 1b       	lddsp	r11,sp[0x4]
80006142:	e0 68 0c 84 	mov	r8,3204
80006146:	3f fa       	mov	r10,-1
80006148:	f0 0b 07 0c 	ld.ub	r12,r8[r11]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000614c:	f4 0c 18 00 	cp.b	r12,r10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80006150:	c1 e0       	breq	8000618c <otg_dual_enable+0x100>
80006152:	e1 ba 00 00 	mfsr	r10,0x0
80006156:	d3 03       	ssrf	0x10
80006158:	f0 0b 07 0c 	ld.ub	r12,r8[r11]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000615c:	2f fc       	sub	r12,-1
8000615e:	f0 0b 0b 0c 	st.b	r8[r11],r12
	}
	if (uhd_state != UHD_STATE_OFF) {
80006162:	ed ba 00 10 	bld	r10,0x10
		// Unlock old limit
		sleepmgr_unlock_mode( sleep_mode[uhd_state] );
80006166:	c2 91       	brne	800061b8 <otg_dual_enable+0x12c>
80006168:	72 0a       	ld.w	r10,r9[0x0]
8000616a:	58 0a       	cp.w	r10,0
8000616c:	c1 d0       	breq	800061a6 <otg_dual_enable+0x11a>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
8000616e:	fa cb ff e8 	sub	r11,sp,-24
80006172:	f6 0a 00 2a 	add	r10,r11,r10<<0x2
80006176:	e0 6b 0c 84 	mov	r11,3204
8000617a:	f4 fa ff e8 	ld.w	r10,r10[-24]
8000617e:	f0 0a 07 0c 	ld.ub	r12,r8[r10]
80006182:	30 08       	mov	r8,0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006184:	f0 0c 18 00 	cp.b	r12,r8
	cpu_irq_disable();
80006188:	c0 31       	brne	8000618e <otg_dual_enable+0x102>
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
8000618a:	c0 08       	rjmp	8000618a <otg_dual_enable+0xfe>
8000618c:	c0 08       	rjmp	8000618c <otg_dual_enable+0x100>
8000618e:	e1 b8 00 00 	mfsr	r8,0x0
80006192:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006194:	f6 0a 07 0c 	ld.ub	r12,r11[r10]
80006198:	20 1c       	sub	r12,1
      cpu_irq_enable();
8000619a:	f6 0a 0b 0c 	st.b	r11[r10],r12
	}
	uhd_state = new_state;
8000619e:	ed b8 00 10 	bld	r8,0x10
	otg_enable_id_interrupt();
	otg_ack_id_transition();
	otg_freeze_clock();
	if (Is_otg_id_device()) {
		uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
		UHC_MODE_CHANGE(false);
800061a2:	c0 20       	breq	800061a6 <otg_dual_enable+0x11a>
800061a4:	d5 03       	csrf	0x10
		udc_start();
800061a6:	30 18       	mov	r8,1
800061a8:	93 08       	st.w	r9[0x0],r8
800061aa:	30 0c       	mov	r12,0
800061ac:	fe b0 e8 16 	rcall	800031d8 <ui_usb_mode_change>
800061b0:	e0 a0 0d 58 	rcall	80007c60 <udc_start>
800061b4:	30 1c       	mov	r12,1
800061b6:	c7 6b       	rjmp	800060a2 <otg_dual_enable+0x16>
800061b8:	d5 03       	csrf	0x10
800061ba:	cd 7b       	rjmp	80006168 <otg_dual_enable+0xdc>
800061bc:	80 00       	ld.sh	r0,r0[0x0]
800061be:	f7 8c       	*unknown*

800061c0 <uhd_enable>:
800061c0:	eb cd 40 80 	pushm	r7,lr
800061c4:	20 6d       	sub	sp,24
800061c6:	e1 b7 00 00 	mfsr	r7,0x0
800061ca:	d3 03       	ssrf	0x10
800061cc:	c6 0f       	rcall	8000608c <otg_dual_enable>
800061ce:	c0 71       	brne	800061dc <uhd_enable+0x1c>
800061d0:	fe 6b 08 04 	mov	r11,-129020
800061d4:	76 09       	ld.w	r9,r11[0x0]
800061d6:	e2 19 04 00 	andl	r9,0x400,COH
800061da:	c0 80       	breq	800061ea <uhd_enable+0x2a>
		return;
	}

#ifdef USB_ID
	// Check that the host mode is selected by ID pin
	if (!Is_otg_id_host()) {
800061dc:	e6 17 00 01 	andh	r7,0x1,COH
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800061e0:	c0 21       	brne	800061e4 <uhd_enable+0x24>
800061e2:	d5 03       	csrf	0x10
      cpu_irq_enable();
800061e4:	2f ad       	sub	sp,-24

	otg_freeze_clock();
	uhd_sleep_mode(UHD_STATE_NO_VBUS);

	cpu_irq_restore(flags);
}
800061e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800061ea:	fe 78 10 00 	mov	r8,-61440
	otg_force_host_mode();
#endif

	// Enable USB hardware
#ifdef USB_VBOF
	uhd_output_vbof_pin();
800061ee:	e2 6a 00 00 	mov	r10,131072
800061f2:	f1 4a 01 14 	st.w	r8[276],r10
800061f6:	f1 4a 01 28 	st.w	r8[296],r10
800061fa:	f1 4a 01 08 	st.w	r8[264],r10
800061fe:	f1 4a 01 88 	st.w	r8[392],r10
80006202:	f1 4a 01 78 	st.w	r8[376],r10
80006206:	fe 68 08 00 	mov	r8,-129024
# if USB_VBOF_ACTIVE_LEVEL == HIGH
	uhd_set_vbof_active_high();
# else // USB_VBOF_ACTIVE_LEVEL == LOW
	uhd_set_vbof_active_low();
8000620a:	70 0a       	ld.w	r10,r8[0x0]
8000620c:	ad ba       	sbr	r10,0xd
8000620e:	91 0a       	st.w	r8[0x0],r10
80006210:	70 0a       	ld.w	r10,r8[0x0]
# endif
#endif
	otg_enable_pad();
80006212:	ad aa       	sbr	r10,0xc
80006214:	91 0a       	st.w	r8[0x0],r10
80006216:	70 0a       	ld.w	r10,r8[0x0]
	otg_enable();
80006218:	af ba       	sbr	r10,0xf
8000621a:	91 0a       	st.w	r8[0x0],r10
8000621c:	e0 6a 0c 80 	mov	r10,3200

	uhd_ctrl_request_first = NULL;
	uhd_ctrl_request_last = NULL;
	uhd_ctrl_request_timeout = 0;
80006220:	b4 09       	st.h	r10[0x0],r9
	uhd_suspend_start = 0;
	uhd_resume_start = 0;
	uhd_b_suspend_requested = false;

	otg_unfreeze_clock();
80006222:	70 0a       	ld.w	r10,r8[0x0]
80006224:	af ca       	cbr	r10,0xe
80006226:	91 0a       	st.w	r8[0x0],r10
	uhd_disable_high_speed_mode();
#  endif
#endif

	// Clear all interrupts that may have been set by a previous host mode
	AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_DCONNIC_MASK
80006228:	37 fa       	mov	r10,127
8000622a:	fe 68 00 00 	mov	r8,-131072
8000622e:	f1 4a 04 08 	st.w	r8[1032],r10
			| AVR32_USBB_UHINTCLR_DDISCIC_MASK | AVR32_USBB_UHINTCLR_HSOFIC_MASK
			| AVR32_USBB_UHINTCLR_HWUPIC_MASK | AVR32_USBB_UHINTCLR_RSMEDIC_MASK
			| AVR32_USBB_UHINTCLR_RSTIC_MASK | AVR32_USBB_UHINTCLR_RXRSMIC_MASK;
	otg_ack_vbus_transition();
80006232:	fe 6a 08 08 	mov	r10,-129016
80006236:	30 2c       	mov	r12,2
80006238:	95 0c       	st.w	r10[0x0],r12

	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
8000623a:	f0 fa 08 00 	ld.w	r10,r8[2048]
8000623e:	e8 1a 01 0a 	orl	r10,0x10a
80006242:	f1 4a 08 00 	st.w	r8[2048],r10
# endif
#endif
	otg_enable_pad();
	otg_enable();

	uhd_ctrl_request_first = NULL;
80006246:	e0 6a 0c 74 	mov	r10,3188
8000624a:	12 98       	mov	r8,r9
	uhd_ctrl_request_last = NULL;
8000624c:	95 09       	st.w	r10[0x0],r9
8000624e:	e0 6a 0c 7c 	mov	r10,3196
	uhd_ctrl_request_timeout = 0;
	uhd_suspend_start = 0;
80006252:	95 09       	st.w	r10[0x0],r9
	uhd_resume_start = 0;
80006254:	e0 69 0b 14 	mov	r9,2836
	uhd_b_suspend_requested = false;
80006258:	b2 88       	st.b	r9[0x0],r8
8000625a:	e0 69 0b 16 	mov	r9,2838
	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
			|AVR32_USBB_USBCON_VBUSTE_MASK
			|AVR32_USBB_USBCON_VBERRE_MASK);
	uhd_enable_vbus();
8000625e:	b2 88       	st.b	r9[0x0],r8
80006260:	e0 69 0b 1c 	mov	r9,2844
80006264:	b2 88       	st.b	r9[0x0],r8

	// Force Vbus interrupt when Vbus is always high
	// This is possible due to a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80006266:	fe 69 08 0c 	mov	r9,-129012
		otg_raise_vbus_transition();
8000626a:	e0 68 02 00 	mov	r8,512
8000626e:	93 08       	st.w	r9[0x0],r8
	}

	// Enable main control interrupt
	// Connection, SOF and reset
	AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_DCONNIES_MASK
80006270:	76 08       	ld.w	r8,r11[0x0]
80006272:	ed b8 00 0b 	bld	r8,0xb
80006276:	f3 fc 0a 00 	st.weq	r9[0x0],r12
			| AVR32_USBB_UHINTESET_HSOFIES_MASK
			| AVR32_USBB_UHINTESET_RSTIES_MASK;

	otg_freeze_clock();
8000627a:	32 59       	mov	r9,37
8000627c:	fe 68 00 00 	mov	r8,-131072
80006280:	f1 49 04 18 	st.w	r8[1048],r9
		SLEEPMGR_STOP,   // UHD_STATE_NO_VBUS
#endif
		SLEEPMGR_IDLE,   // UHD_STATE_DISCONNECT
		SLEEPMGR_STATIC, // UHD_STATE_SUSPEND
		SLEEPMGR_IDLE,   // UHD_STATE_IDLE
	};
80006284:	fe 69 08 00 	mov	r9,-129024
80006288:	72 08       	ld.w	r8,r9[0x0]
8000628a:	af a8       	sbr	r8,0xe
8000628c:	93 08       	st.w	r9[0x0],r8
8000628e:	4a 69       	lddpc	r9,80006324 <uhd_enable+0x164>
80006290:	f2 ea 00 10 	ld.d	r10,r9[16]
80006294:	fa eb 00 10 	st.d	sp[16],r10
80006298:	f2 ea 00 00 	ld.d	r10,r9[0]
8000629c:	fa eb 00 00 	st.d	sp[0],r10
	static enum uhd_usbb_state_enum uhd_state = UHD_STATE_OFF;

	if (uhd_state == new_state) {
800062a0:	f2 ea 00 08 	ld.d	r10,r9[8]
800062a4:	e0 69 0b 18 	mov	r9,2840
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
800062a8:	fa eb 00 08 	st.d	sp[8],r10
800062ac:	72 08       	ld.w	r8,r9[0x0]
800062ae:	58 28       	cp.w	r8,2
800062b0:	c9 60       	breq	800061dc <uhd_enable+0x1c>
800062b2:	40 2b       	lddsp	r11,sp[0x8]
800062b4:	e0 68 0c 84 	mov	r8,3204

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800062b8:	3f fa       	mov	r10,-1
	cpu_irq_disable();
800062ba:	f0 0b 07 0c 	ld.ub	r12,r8[r11]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
800062be:	f4 0c 18 00 	cp.b	r12,r10
800062c2:	c1 e0       	breq	800062fe <uhd_enable+0x13e>
800062c4:	e1 ba 00 00 	mfsr	r10,0x0
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800062c8:	d3 03       	ssrf	0x10
800062ca:	f0 0b 07 0c 	ld.ub	r12,r8[r11]
	}
	if (new_state != UHD_STATE_OFF) {
		// Lock new limit
		sleepmgr_lock_mode( sleep_mode[new_state] );
	}
	if (uhd_state != UHD_STATE_OFF) {
800062ce:	2f fc       	sub	r12,-1
800062d0:	f0 0b 0b 0c 	st.b	r8[r11],r12
		// Unlock old limit
		sleepmgr_unlock_mode( sleep_mode[uhd_state] );
800062d4:	ed ba 00 10 	bld	r10,0x10
800062d8:	c2 31       	brne	8000631e <uhd_enable+0x15e>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
800062da:	72 0a       	ld.w	r10,r9[0x0]
800062dc:	58 0a       	cp.w	r10,0
800062de:	c1 d0       	breq	80006318 <uhd_enable+0x158>
800062e0:	fa cb ff e8 	sub	r11,sp,-24
800062e4:	f6 0a 00 2a 	add	r10,r11,r10<<0x2
800062e8:	e0 6b 0c 84 	mov	r11,3204
800062ec:	f4 fa ff e8 	ld.w	r10,r10[-24]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800062f0:	f0 0a 07 0c 	ld.ub	r12,r8[r10]
	cpu_irq_disable();
800062f4:	30 08       	mov	r8,0
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
800062f6:	f0 0c 18 00 	cp.b	r12,r8
800062fa:	c0 31       	brne	80006300 <uhd_enable+0x140>
800062fc:	c0 08       	rjmp	800062fc <uhd_enable+0x13c>
800062fe:	c0 08       	rjmp	800062fe <uhd_enable+0x13e>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006300:	e1 b8 00 00 	mfsr	r8,0x0
80006304:	d3 03       	ssrf	0x10
      cpu_irq_enable();
80006306:	f6 0a 07 0c 	ld.ub	r12,r11[r10]
	}
	uhd_state = new_state;
8000630a:	20 1c       	sub	r12,1
8000630c:	f6 0a 0b 0c 	st.b	r11[r10],r12
80006310:	ed b8 00 10 	bld	r8,0x10
80006314:	c0 20       	breq	80006318 <uhd_enable+0x158>
80006316:	d5 03       	csrf	0x10
80006318:	30 28       	mov	r8,2
8000631a:	93 08       	st.w	r9[0x0],r8
8000631c:	c6 0b       	rjmp	800061dc <uhd_enable+0x1c>
8000631e:	d5 03       	csrf	0x10
80006320:	cd db       	rjmp	800062da <uhd_enable+0x11a>
80006322:	d7 03       	nop
80006324:	80 00       	ld.sh	r0,r0[0x0]
80006326:	f7 8c       	*unknown*

80006328 <uhd_disable>:
80006328:	eb cd 40 f8 	pushm	r3-r7,lr
8000632c:	20 6d       	sub	sp,24
8000632e:	fe 69 08 04 	mov	r9,-129020
80006332:	18 96       	mov	r6,r12
80006334:	72 08       	ld.w	r8,r9[0x0]
80006336:	ed b8 00 0e 	bld	r8,0xe
8000633a:	cf d1       	brne	80006334 <uhd_disable+0xc>
{
	irqflags_t flags;

	// Check USB clock ready after a potential sleep mode < IDLE
	while (!Is_otg_clock_usable());
	otg_unfreeze_clock();
8000633c:	fe 67 08 00 	mov	r7,-129024
80006340:	6e 08       	ld.w	r8,r7[0x0]
80006342:	af c8       	cbr	r8,0xe
80006344:	8f 08       	st.w	r7[0x0],r8

	// Disable Vbus change and error interrupts
	Clr_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSTE_MASK
80006346:	fe 68 00 00 	mov	r8,-131072
8000634a:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000634e:	e0 19 ff f5 	andl	r9,0xfff5
80006352:	f1 49 08 00 	st.w	r8[2048],r9
			| AVR32_USBB_USBCON_VBERRE_MASK);

	// Disable main control interrupt
	// (Connection, disconnection, SOF and reset)
	AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_DCONNIEC_MASK
80006356:	37 f9       	mov	r9,127
80006358:	f1 49 04 14 	st.w	r8[1044],r9
			| AVR32_USBB_UHINTECLR_HSOFIEC_MASK
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
8000635c:	fe 69 04 00 	mov	r9,-130048
80006360:	72 08       	ld.w	r8,r9[0x0]
80006362:	a9 c8       	cbr	r8,0x8
80006364:	93 08       	st.w	r9[0x0],r8
	uhd_disable_vbus();
80006366:	e0 69 02 00 	mov	r9,512
8000636a:	fe 68 08 08 	mov	r8,-129016
	uhc_notify_connection(false);
8000636e:	30 0c       	mov	r12,0
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
	uhd_disable_vbus();
80006370:	91 09       	st.w	r8[0x0],r9
	uhc_notify_connection(false);
80006372:	e0 a0 11 57 	rcall	80008620 <uhc_notify_connection>
	otg_freeze_clock();
80006376:	6e 08       	ld.w	r8,r7[0x0]
80006378:	af a8       	sbr	r8,0xe
		SLEEPMGR_STOP,   // UHD_STATE_NO_VBUS
#endif
		SLEEPMGR_IDLE,   // UHD_STATE_DISCONNECT
		SLEEPMGR_STATIC, // UHD_STATE_SUSPEND
		SLEEPMGR_IDLE,   // UHD_STATE_IDLE
	};
8000637a:	4d 35       	lddpc	r5,800064c4 <uhd_disable+0x19c>
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
	uhd_disable_vbus();
	uhc_notify_connection(false);
	otg_freeze_clock();
8000637c:	8f 08       	st.w	r7[0x0],r8
		SLEEPMGR_STOP,   // UHD_STATE_NO_VBUS
#endif
		SLEEPMGR_IDLE,   // UHD_STATE_DISCONNECT
		SLEEPMGR_STATIC, // UHD_STATE_SUSPEND
		SLEEPMGR_IDLE,   // UHD_STATE_IDLE
	};
8000637e:	ea e8 00 00 	ld.d	r8,r5[0]
80006382:	fa e9 00 00 	st.d	sp[0],r8
80006386:	ea e8 00 08 	ld.d	r8,r5[8]
8000638a:	fa e9 00 08 	st.d	sp[8],r8
8000638e:	ea e8 00 10 	ld.d	r8,r5[16]
80006392:	fa e9 00 10 	st.d	sp[16],r8
	static enum uhd_usbb_state_enum uhd_state = UHD_STATE_OFF;

	if (uhd_state == new_state) {
80006396:	e0 64 0b 18 	mov	r4,2840
8000639a:	1a 97       	mov	r7,sp
8000639c:	68 08       	ld.w	r8,r4[0x0]
8000639e:	58 18       	cp.w	r8,1
		return; // No change
	}
	if (new_state != UHD_STATE_OFF) {
		// Lock new limit
		sleepmgr_lock_mode( sleep_mode[new_state] );
800063a0:	c3 60       	breq	8000640c <uhd_disable+0xe4>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
800063a2:	40 1a       	lddsp	r10,sp[0x4]
800063a4:	e0 68 0c 84 	mov	r8,3204
800063a8:	3f f9       	mov	r9,-1
800063aa:	f0 0a 07 0b 	ld.ub	r11,r8[r10]
800063ae:	f2 0b 18 00 	cp.b	r11,r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800063b2:	c1 e0       	breq	800063ee <uhd_disable+0xc6>
	cpu_irq_disable();
800063b4:	e1 b9 00 00 	mfsr	r9,0x0
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
800063b8:	d3 03       	ssrf	0x10
800063ba:	f0 0a 07 0b 	ld.ub	r11,r8[r10]
800063be:	2f fb       	sub	r11,-1
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800063c0:	f0 0a 0b 0b 	st.b	r8[r10],r11
800063c4:	ed b9 00 10 	bld	r9,0x10
	}
	if (uhd_state != UHD_STATE_OFF) {
800063c8:	c2 71       	brne	80006416 <uhd_disable+0xee>
800063ca:	68 09       	ld.w	r9,r4[0x0]
		// Unlock old limit
		sleepmgr_unlock_mode( sleep_mode[uhd_state] );
800063cc:	58 09       	cp.w	r9,0
800063ce:	c1 d0       	breq	80006408 <uhd_disable+0xe0>
800063d0:	fa ca ff e8 	sub	r10,sp,-24
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
800063d4:	f4 09 00 29 	add	r9,r10,r9<<0x2
800063d8:	e0 6a 0c 84 	mov	r10,3204
800063dc:	f2 f9 ff e8 	ld.w	r9,r9[-24]
800063e0:	f0 09 07 0b 	ld.ub	r11,r8[r9]
800063e4:	30 08       	mov	r8,0
800063e6:	f0 0b 18 00 	cp.b	r11,r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800063ea:	c0 31       	brne	800063f0 <uhd_disable+0xc8>
800063ec:	c0 08       	rjmp	800063ec <uhd_disable+0xc4>
	cpu_irq_disable();
800063ee:	c0 08       	rjmp	800063ee <uhd_disable+0xc6>
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
800063f0:	e1 b8 00 00 	mfsr	r8,0x0
800063f4:	d3 03       	ssrf	0x10
800063f6:	f4 09 07 0b 	ld.ub	r11,r10[r9]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800063fa:	20 1b       	sub	r11,1
800063fc:	f4 09 0b 0b 	st.b	r10[r9],r11
      cpu_irq_enable();
80006400:	ed b8 00 10 	bld	r8,0x10
	}
	uhd_state = new_state;
80006404:	c0 20       	breq	80006408 <uhd_disable+0xe0>
	uhc_notify_connection(false);
	otg_freeze_clock();

#ifdef USB_ID
	uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
	if (!b_id_stop) {
80006406:	d5 03       	csrf	0x10
80006408:	30 18       	mov	r8,1
#endif

	flags = cpu_irq_save();
	otg_dual_disable();
	cpu_irq_restore(flags);
}
8000640a:	89 08       	st.w	r4[0x0],r8
8000640c:	58 06       	cp.w	r6,0
8000640e:	c0 61       	brne	8000641a <uhd_disable+0xf2>
80006410:	2f ad       	sub	sp,-24
80006412:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006416:	d5 03       	csrf	0x10
	cpu_irq_disable();
80006418:	cd 9b       	rjmp	800063ca <uhd_disable+0xa2>
}


void otg_dual_disable(void)
{
	if (!otg_initialized) {
8000641a:	e1 b3 00 00 	mfsr	r3,0x0
8000641e:	d3 03       	ssrf	0x10
80006420:	e0 6a 0a 94 	mov	r10,2708
80006424:	30 06       	mov	r6,0
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006426:	15 88       	ld.ub	r8,r10[0x0]
80006428:	ec 08 18 00 	cp.b	r8,r6
      cpu_irq_enable();
8000642c:	c0 61       	brne	80006438 <uhd_disable+0x110>
   }

	barrier();
8000642e:	e6 13 00 01 	andh	r3,0x1,COH
		return; // Dual role not initialized
	}
	otg_initialized = false;

	// Do not authorize asynchronous USB interrupts
	AVR32_PM.AWEN.usb_waken = 0;
80006432:	c0 21       	brne	80006436 <uhd_disable+0x10e>
80006434:	d5 03       	csrf	0x10
80006436:	ce db       	rjmp	80006410 <uhd_disable+0xe8>
80006438:	fe 78 0c 00 	mov	r8,-62464
8000643c:	30 0b       	mov	r11,0
8000643e:	f0 f9 01 44 	ld.w	r9,r8[324]
	otg_unfreeze_clock();
80006442:	f3 db d0 01 	bfins	r9,r11,0x0,0x1
80006446:	f1 49 01 44 	st.w	r8[324],r9
8000644a:	fe 68 08 00 	mov	r8,-129024
# ifdef USB_ID
	otg_disable_id_interrupt();
8000644e:	70 09       	ld.w	r9,r8[0x0]
80006450:	af c9       	cbr	r9,0xe
# endif
	otg_disable();
80006452:	91 09       	st.w	r8[0x0],r9
80006454:	70 09       	ld.w	r9,r8[0x0]
80006456:	a1 c9       	cbr	r9,0x0
void otg_dual_disable(void)
{
	if (!otg_initialized) {
		return; // Dual role not initialized
	}
	otg_initialized = false;
80006458:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
# ifdef USB_ID
	otg_disable_id_interrupt();
# endif
	otg_disable();
	otg_disable_pad();
8000645a:	70 09       	ld.w	r9,r8[0x0]
8000645c:	af d9       	cbr	r9,0xf
8000645e:	91 09       	st.w	r8[0x0],r9
	sysclk_disable_usb();
80006460:	b4 86       	st.b	r10[0x0],r6
80006462:	70 09       	ld.w	r9,r8[0x0]
		SLEEPMGR_STOP,   // UHD_STATE_NO_VBUS
#endif
		SLEEPMGR_IDLE,   // UHD_STATE_DISCONNECT
		SLEEPMGR_STATIC, // UHD_STATE_SUSPEND
		SLEEPMGR_IDLE,   // UHD_STATE_IDLE
	};
80006464:	ad c9       	cbr	r9,0xc
80006466:	91 09       	st.w	r8[0x0],r9
80006468:	e0 a0 08 28 	rcall	800074b8 <sysclk_disable_usb>
8000646c:	ea e8 00 10 	ld.d	r8,r5[16]
80006470:	ee e9 00 10 	st.d	r7[16],r8
80006474:	ea e8 00 00 	ld.d	r8,r5[0]
80006478:	ee e9 00 00 	st.d	r7[0],r8
	static enum uhd_usbb_state_enum uhd_state = UHD_STATE_OFF;

	if (uhd_state == new_state) {
8000647c:	ea e8 00 08 	ld.d	r8,r5[8]
80006480:	ee e9 00 08 	st.d	r7[8],r8
		// Lock new limit
		sleepmgr_lock_mode( sleep_mode[new_state] );
	}
	if (uhd_state != UHD_STATE_OFF) {
		// Unlock old limit
		sleepmgr_unlock_mode( sleep_mode[uhd_state] );
80006484:	68 08       	ld.w	r8,r4[0x0]
80006486:	58 08       	cp.w	r8,0
80006488:	cd 30       	breq	8000642e <uhd_disable+0x106>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
8000648a:	fa c9 ff e8 	sub	r9,sp,-24
8000648e:	f2 08 00 28 	add	r8,r9,r8<<0x2
80006492:	e0 6a 0c 84 	mov	r10,3204
80006496:	f0 f9 ff e8 	ld.w	r9,r8[-24]
8000649a:	f4 09 07 08 	ld.ub	r8,r10[r9]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000649e:	ec 08 18 00 	cp.b	r8,r6
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
800064a2:	c0 21       	brne	800064a6 <uhd_disable+0x17e>
800064a4:	c0 08       	rjmp	800064a4 <uhd_disable+0x17c>
800064a6:	e1 b8 00 00 	mfsr	r8,0x0
800064aa:	d3 03       	ssrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800064ac:	f4 09 07 0b 	ld.ub	r11,r10[r9]
800064b0:	20 1b       	sub	r11,1
      cpu_irq_enable();
800064b2:	f4 09 0b 0b 	st.b	r10[r9],r11
	}
	uhd_state = new_state;
800064b6:	ed b8 00 10 	bld	r8,0x10
800064ba:	c0 20       	breq	800064be <uhd_disable+0x196>
800064bc:	d5 03       	csrf	0x10
800064be:	30 08       	mov	r8,0
800064c0:	89 08       	st.w	r4[0x0],r8
800064c2:	cb 6b       	rjmp	8000642e <uhd_disable+0x106>
800064c4:	80 00       	ld.sh	r0,r0[0x0]
800064c6:	f7 8c       	*unknown*

800064c8 <otg_interrupt>:
800064c8:	d4 31       	pushm	r0-r7,lr
800064ca:	20 7d       	sub	sp,28
800064cc:	fe 69 08 04 	mov	r9,-129020
800064d0:	72 08       	ld.w	r8,r9[0x0]
800064d2:	ed b8 00 00 	bld	r8,0x0
ISR(otg_interrupt, AVR32_USBB_IRQ_GROUP, UHD_USB_INT_LEVEL)
{
	bool b_mode_device;

#ifdef USB_ID
	if (Is_otg_id_transition()) {
800064d6:	c0 e0       	breq	800064f2 <otg_interrupt+0x2a>
			UHC_MODE_CHANGE(true);
			uhc_start();
		}
		return;
	}
	b_mode_device = Is_otg_id_device();
800064d8:	72 08       	ld.w	r8,r9[0x0]
#else
	b_mode_device = Is_otg_device_mode_forced();
#endif

	// Redirection to host or device interrupt
	if (b_mode_device) {
800064da:	ed b8 00 0a 	bld	r8,0xa
800064de:	c3 51       	brne	80006548 <otg_interrupt+0x80>
		udd_interrupt();
800064e0:	fe b0 f3 5c 	rcall	80004b98 <udd_interrupt>
	} else {
		uhd_interrupt();
	}
	otg_data_memory_barrier();
800064e4:	fe 68 00 00 	mov	r8,-131072
800064e8:	f0 f8 08 18 	ld.w	r8,r8[2072]
}
800064ec:	2f 9d       	sub	sp,-28
800064ee:	d4 32       	popm	r0-r7,lr
800064f0:	d6 03       	rete
{
	bool b_mode_device;

#ifdef USB_ID
	if (Is_otg_id_transition()) {
		while (!Is_otg_clock_usable());
800064f2:	72 08       	ld.w	r8,r9[0x0]
800064f4:	ed b8 00 0e 	bld	r8,0xe
800064f8:	cf d1       	brne	800064f2 <otg_interrupt+0x2a>
		otg_unfreeze_clock();
800064fa:	fe 68 08 00 	mov	r8,-129024
800064fe:	70 09       	ld.w	r9,r8[0x0]
80006500:	af c9       	cbr	r9,0xe
80006502:	91 09       	st.w	r8[0x0],r9
		otg_ack_id_transition();
80006504:	30 17       	mov	r7,1
80006506:	fe 69 08 08 	mov	r9,-129016
8000650a:	93 07       	st.w	r9[0x0],r7
		otg_freeze_clock();
8000650c:	70 09       	ld.w	r9,r8[0x0]
8000650e:	af a9       	sbr	r9,0xe
80006510:	91 09       	st.w	r8[0x0],r9
		if (Is_otg_id_device()) {
80006512:	fe 68 08 04 	mov	r8,-129020
80006516:	70 08       	ld.w	r8,r8[0x0]
80006518:	ed b8 00 0a 	bld	r8,0xa
8000651c:	c0 b0       	breq	80006532 <otg_interrupt+0x6a>
			uhc_stop(false);
			UHC_MODE_CHANGE(false);
			udc_start();
		} else {
			udc_stop();
8000651e:	e0 a0 0c d3 	rcall	80007ec4 <udc_stop>
			UHC_MODE_CHANGE(true);
80006522:	0e 9c       	mov	r12,r7
80006524:	fe b0 e6 5a 	rcall	800031d8 <ui_usb_mode_change>
			uhc_start();
80006528:	e0 a0 10 1e 	rcall	80008564 <uhc_start>
		udd_interrupt();
	} else {
		uhd_interrupt();
	}
	otg_data_memory_barrier();
}
8000652c:	2f 9d       	sub	sp,-28
8000652e:	d4 32       	popm	r0-r7,lr
80006530:	d6 03       	rete
		while (!Is_otg_clock_usable());
		otg_unfreeze_clock();
		otg_ack_id_transition();
		otg_freeze_clock();
		if (Is_otg_id_device()) {
			uhc_stop(false);
80006532:	30 0c       	mov	r12,0
80006534:	e0 a0 10 14 	rcall	8000855c <uhc_stop>
			UHC_MODE_CHANGE(false);
80006538:	30 0c       	mov	r12,0
8000653a:	fe b0 e6 4f 	rcall	800031d8 <ui_usb_mode_change>
			udc_start();
8000653e:	e0 a0 0b 91 	rcall	80007c60 <udc_start>
		udd_interrupt();
	} else {
		uhd_interrupt();
	}
	otg_data_memory_barrier();
}
80006542:	2f 9d       	sub	sp,-28
80006544:	d4 32       	popm	r0-r7,lr
80006546:	d6 03       	rete
static void uhd_interrupt(void)
{
	uint8_t pipe_int;

	// Manage SOF interrupt
	if (Is_uhd_sof()) {
80006548:	fe 69 04 04 	mov	r9,-130044
8000654c:	72 08       	ld.w	r8,r9[0x0]
8000654e:	ed b8 00 05 	bld	r8,0x5
80006552:	e0 80 00 f1 	breq	80006734 <otg_interrupt+0x26c>
		uhd_sof_interrupt();
		return;
	}

	// Manage pipe interrupts
	pipe_int = uhd_get_interrupt_pipe_number();
80006556:	fe 68 00 00 	mov	r8,-131072
8000655a:	f0 fa 04 04 	ld.w	r10,r8[1028]
8000655e:	f0 fc 04 10 	ld.w	r12,r8[1040]
80006562:	a9 8a       	lsr	r10,0x8
80006564:	f5 ec 02 8c 	and	r12,r10,r12>>0x8
80006568:	a7 bc       	sbr	r12,0x7
8000656a:	5c 9c       	brev	r12
8000656c:	f8 0c 12 00 	clz	r12,r12
	if (pipe_int == 0) {
80006570:	e0 80 01 54 	breq	80006818 <otg_interrupt+0x350>
		// Interrupt acked by control endpoint managed
		uhd_ctrl_interrupt();
		return;
	}
	if (pipe_int != AVR32_USBB_EPT_NUM) {
80006574:	30 7a       	mov	r10,7
80006576:	f4 0c 18 00 	cp.b	r12,r10
8000657a:	c4 81       	brne	8000660a <otg_interrupt+0x142>
		// Interrupt acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt(pipe_int);
		return;
	}
	pipe_int = uhd_get_pipe_dma_interrupt_number();
8000657c:	f0 fb 04 04 	ld.w	r11,r8[1028]
80006580:	f0 fc 04 10 	ld.w	r12,r8[1040]
80006584:	b9 9b       	lsr	r11,0x19
80006586:	f7 ec 03 9b 	and	r11,r11,r12>>0x19
8000658a:	a7 ab       	sbr	r11,0x6
8000658c:	5c 9b       	brev	r11
8000658e:	f6 0b 12 00 	clz	r11,r11
80006592:	f6 cc ff ff 	sub	r12,r11,-1
	if (pipe_int != AVR32_USBB_EPT_NUM) {
80006596:	f4 0c 18 00 	cp.b	r12,r10
8000659a:	e0 80 01 a0 	breq	800068da <otg_interrupt+0x412>
static void uhd_pipe_interrupt_dma(uint8_t pipe)
{
	uhd_pipe_job_t *ptr_job;
	uint32_t nb_remaining;

	if (uhd_pipe_dma_get_status(pipe)
8000659e:	f8 08 15 04 	lsl	r8,r12,0x4
800065a2:	e0 38 f9 00 	sub	r8,129280
800065a6:	70 39       	ld.w	r9,r8[0xc]
800065a8:	ed b9 00 00 	bld	r9,0x0
800065ac:	c9 c0       	breq	800064e4 <otg_interrupt+0x1c>
			& AVR32_USBB_UHDMA1_STATUS_CH_EN_MASK) {
		return; // Ignore EOT_STA interrupt
	}
	// Save number of data no transfered
	nb_remaining = (uhd_pipe_dma_get_status(pipe) &
800065ae:	70 39       	ld.w	r9,r8[0xc]
800065b0:	b1 89       	lsr	r9,0x10
			AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_MASK)
			>> AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_OFFSET;
	if (nb_remaining) {
800065b2:	c0 d0       	breq	800065cc <otg_interrupt+0x104>
		// Get job corresponding at endpoint
		ptr_job = &uhd_pipe_job[pipe - 1];
800065b4:	e0 6a 0a 9c 	mov	r10,2716
800065b8:	f8 c8 00 01 	sub	r8,r12,1
800065bc:	f0 08 00 28 	add	r8,r8,r8<<0x2
800065c0:	f4 08 00 28 	add	r8,r10,r8<<0x2

		// Transfer no complete (short packet or ZLP) then:
		// Update number of transfered data
		ptr_job->nb_trans -= nb_remaining;
800065c4:	70 3a       	ld.w	r10,r8[0xc]
800065c6:	12 1a       	sub	r10,r9

		// Set transfer complete to stop the transfer
		ptr_job->buf_size = ptr_job->nb_trans;
800065c8:	91 2a       	st.w	r8[0x8],r10
		// Get job corresponding at endpoint
		ptr_job = &uhd_pipe_job[pipe - 1];

		// Transfer no complete (short packet or ZLP) then:
		// Update number of transfered data
		ptr_job->nb_trans -= nb_remaining;
800065ca:	91 3a       	st.w	r8[0xc],r10

		// Set transfer complete to stop the transfer
		ptr_job->buf_size = ptr_job->nb_trans;
	}

	if (uhd_is_pipe_out(pipe)) {
800065cc:	f8 08 15 02 	lsl	r8,r12,0x2
800065d0:	fe 62 05 00 	mov	r2,-129792
800065d4:	f0 02 00 0a 	add	r10,r8,r2
800065d8:	74 0a       	ld.w	r10,r10[0x0]
800065da:	f5 da c1 02 	bfextu	r10,r10,0x8,0x2
800065de:	58 2a       	cp.w	r10,2
800065e0:	e0 80 03 68 	breq	80006cb0 <otg_interrupt+0x7e8>
		// Wait that all banks are free to freeze clock of OUT endpoint
		// and call callback
		uhd_enable_bank_interrupt(pipe);
	} else {
		if (!Is_uhd_pipe_frozen(pipe)) {
800065e4:	fe 6e 05 c0 	mov	lr,-129600
800065e8:	f0 0e 00 0b 	add	r11,r8,lr
800065ec:	76 0a       	ld.w	r10,r11[0x0]
800065ee:	ed ba 00 11 	bld	r10,0x11
800065f2:	c0 90       	breq	80006604 <otg_interrupt+0x13c>
			// Pipe is not freeze in case of :
			// - incomplete transfer when the request number INRQ is not complete.
			// - low USB speed and with a high CPU frequency,
			// a ACK from host can be always running on USB line.

			if (nb_remaining) {
800065f4:	58 09       	cp.w	r9,0
800065f6:	e0 80 01 0c 	breq	8000680e <otg_interrupt+0x346>
				// Freeze pipe in case of incomplete transfer
				uhd_freeze_pipe(pipe);
800065fa:	e0 38 fa 10 	sub	r8,129552
800065fe:	e2 69 00 00 	mov	r9,131072
80006602:	91 09       	st.w	r8[0x0],r9
				// Wait freeze in case of ASK on going
				while (!Is_uhd_pipe_frozen(pipe)) {
				}
			}
		}
		uhd_pipe_trans_complet(pipe);
80006604:	fe b0 fb 1c 	rcall	80005c3c <uhd_pipe_trans_complet>
80006608:	c6 eb       	rjmp	800064e4 <otg_interrupt+0x1c>
 *
 * \param pipe  Pipe number
 */
static void uhd_pipe_interrupt(uint8_t pipe)
{
	if (Is_uhd_bank_interrupt_enabled(pipe) && (0==uhd_nb_busy_bank(pipe))) {
8000660a:	fe 68 05 c0 	mov	r8,-129600
8000660e:	f8 09 15 02 	lsl	r9,r12,0x2
80006612:	f2 08 00 0b 	add	r11,r9,r8
80006616:	76 08       	ld.w	r8,r11[0x0]
80006618:	ed b8 00 0c 	bld	r8,0xc
8000661c:	e0 81 01 3a 	brne	80006890 <otg_interrupt+0x3c8>
80006620:	fe 67 05 30 	mov	r7,-129744
80006624:	f2 07 00 08 	add	r8,r9,r7
80006628:	70 0a       	ld.w	r10,r8[0x0]
8000662a:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
8000662e:	e0 80 03 1e 	breq	80006c6a <otg_interrupt+0x7a2>
		uhd_disable_bank_interrupt(pipe);
		uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
		return;
	}
	if (Is_uhd_out_ready_interrupt_enabled(pipe) && Is_uhd_out_ready(pipe)) {
80006632:	76 0a       	ld.w	r10,r11[0x0]
80006634:	ed ba 00 01 	bld	r10,0x1
80006638:	c0 61       	brne	80006644 <otg_interrupt+0x17c>
8000663a:	70 0a       	ld.w	r10,r8[0x0]
8000663c:	ed ba 00 01 	bld	r10,0x1
80006640:	e0 80 02 01 	breq	80006a42 <otg_interrupt+0x57a>
		uhd_ack_fifocon(pipe);
		uhd_unfreeze_pipe(pipe);
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
80006644:	70 0a       	ld.w	r10,r8[0x0]
80006646:	e2 1a 00 40 	andl	r10,0x40,COH
8000664a:	e0 81 02 1a 	brne	80006a7e <otg_interrupt+0x5b6>
		uhd_ack_stall(pipe);
		uhd_reset_data_toggle(pipe);
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(pipe)) {
8000664e:	70 08       	ld.w	r8,r8[0x0]
80006650:	ed b8 00 03 	bld	r8,0x3
80006654:	fe 91 ff 48 	brne	800064e4 <otg_interrupt+0x1c>
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
80006658:	fe 62 06 80 	mov	r2,-129408
8000665c:	f2 02 00 08 	add	r8,r9,r2
80006660:	70 0b       	ld.w	r11,r8[0x0]
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
80006662:	91 0a       	st.w	r8[0x0],r10
80006664:	f1 db c0 04 	bfextu	r8,r11,0x0,0x4
80006668:	20 18       	sub	r8,1
8000666a:	58 28       	cp.w	r8,2
8000666c:	e0 88 02 03 	brls	80006a72 <otg_interrupt+0x5aa>
80006670:	30 6a       	mov	r10,6
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
80006672:	fe 68 00 00 	mov	r8,-131072
80006676:	e0 7b 00 00 	mov	r11,65536
8000667a:	f0 fe 04 1c 	ld.w	lr,r8[1052]
8000667e:	f6 0c 09 4b 	lsl	r11,r11,r12
80006682:	f7 ee 10 0e 	or	lr,r11,lr
80006686:	f1 4e 04 1c 	st.w	r8[1052],lr
8000668a:	5c db       	com	r11
8000668c:	f0 fe 04 1c 	ld.w	lr,r8[1052]
80006690:	1c 6b       	and	r11,lr
80006692:	f1 4b 04 1c 	st.w	r8[1052],r11

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80006696:	fe 6e 05 00 	mov	lr,-129792
8000669a:	f2 0e 00 0b 	add	r11,r9,lr
8000669e:	76 08       	ld.w	r8,r11[0x0]
800066a0:	ab a8       	sbr	r8,0xa
800066a2:	97 08       	st.w	r11[0x0],r8
	uhd_enable_stall_interrupt(pipe);
800066a4:	34 0e       	mov	lr,64
800066a6:	fe 67 05 f0 	mov	r7,-129552
800066aa:	f2 07 00 08 	add	r8,r9,r7
800066ae:	91 0e       	st.w	r8[0x0],lr
	uhd_enable_pipe_error_interrupt(pipe);
800066b0:	30 8e       	mov	lr,8
800066b2:	91 0e       	st.w	r8[0x0],lr

	uhd_disable_out_ready_interrupt(pipe);
800066b4:	30 28       	mov	r8,2
800066b6:	e0 39 f9 e0 	sub	r9,129504
800066ba:	93 08       	st.w	r9[0x0],r8
	uhd_pipe_dma_set_control(pipe, 0);
800066bc:	f8 08 15 04 	lsl	r8,r12,0x4
800066c0:	e0 38 f9 00 	sub	r8,129280
800066c4:	30 0e       	mov	lr,0
800066c6:	91 2e       	st.w	r8[0x8],lr
static void uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
800066c8:	e0 68 0a 9c 	mov	r8,2716
800066cc:	f8 c9 00 01 	sub	r9,r12,1
800066d0:	f2 09 00 29 	add	r9,r9,r9<<0x2
800066d4:	f0 09 00 29 	add	r9,r8,r9<<0x2
	if (ptr_job->busy == false) {
800066d8:	72 08       	ld.w	r8,r9[0x0]
800066da:	58 08       	cp.w	r8,0
800066dc:	fe 94 ff 04 	brge	800064e4 <otg_interrupt+0x1c>
		return; // No job running
	}
	ptr_job->busy = false;
800066e0:	f1 de d3 e1 	bfins	r8,lr,0x1f,0x1
800066e4:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_end) {
800066e6:	72 48       	ld.w	r8,r9[0x10]
800066e8:	58 08       	cp.w	r8,0
800066ea:	fe 90 fe fd 	breq	800064e4 <otg_interrupt+0x1c>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
800066ee:	ef dc c0 02 	bfextu	r7,r12,0x0,0x2
800066f2:	72 39       	ld.w	r9,r9[0xc]
			uhd_get_pipe_endpoint_address(pipe),
800066f4:	76 0e       	ld.w	lr,r11[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
800066f6:	e2 1c 00 3c 	andl	r12,0x3c,COH
			uhd_get_pipe_endpoint_address(pipe),
800066fa:	76 06       	ld.w	r6,r11[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
800066fc:	e0 3c fb dc 	sub	r12,130012
80006700:	f7 de c2 04 	bfextu	r11,lr,0x10,0x4
80006704:	ed d6 c1 02 	bfextu	r6,r6,0x8,0x2
80006708:	e0 6e 00 80 	mov	lr,128
8000670c:	58 16       	cp.w	r6,1
8000670e:	f9 be 01 00 	movne	lr,0
80006712:	a3 77       	lsl	r7,0x3
80006714:	fd eb 10 0b 	or	r11,lr,r11
80006718:	78 0e       	ld.w	lr,r12[0x0]
8000671a:	37 fc       	mov	r12,127
8000671c:	f8 07 09 4c 	lsl	r12,r12,r7
80006720:	f9 ee 00 0e 	and	lr,r12,lr
80006724:	5c 9c       	brev	r12
80006726:	f8 0c 12 00 	clz	r12,r12
8000672a:	fc 0c 0a 4c 	lsr	r12,lr,r12
8000672e:	5c 5c       	castu.b	r12
80006730:	5d 18       	icall	r8
80006732:	cd 9a       	rjmp	800064e4 <otg_interrupt+0x1c>
{
	uint8_t pipe_int;

	// Manage SOF interrupt
	if (Is_uhd_sof()) {
		uhd_ack_sof();
80006734:	32 0a       	mov	r10,32
80006736:	fe 68 04 08 	mov	r8,-130040
8000673a:	91 0a       	st.w	r8[0x0],r10
			return;
		}
	}

	// Manage a delay to enter in suspend
	if (uhd_suspend_start) {
8000673c:	e0 6a 0b 14 	mov	r10,2836
80006740:	15 88       	ld.ub	r8,r10[0x0]
80006742:	58 08       	cp.w	r8,0
80006744:	e0 80 00 ab 	breq	8000689a <otg_interrupt+0x3d2>
		if (--uhd_suspend_start == 0) {
80006748:	20 18       	sub	r8,1
8000674a:	5c 58       	castu.b	r8
8000674c:	b4 88       	st.b	r10[0x0],r8
8000674e:	fe 91 fe cb 	brne	800064e4 <otg_interrupt+0x1c>
			// then wait end of SOF generation
			// to be sure that disable SOF has been accepted
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
80006752:	fe 6a 04 20 	mov	r10,-130016
80006756:	74 08       	ld.w	r8,r10[0x0]
80006758:	f1 d8 c2 08 	bfextu	r8,r8,0x10,0x8
8000675c:	e0 48 00 b9 	cp.w	r8,185
80006760:	e0 88 00 06 	brls	8000676c <otg_interrupt+0x2a4>
#endif
				if (Is_uhd_disconnection()) {
80006764:	72 08       	ld.w	r8,r9[0x0]
80006766:	ed b8 00 01 	bld	r8,0x1
8000676a:	cf 61       	brne	80006756 <otg_interrupt+0x28e>
					break;
				}
			}
			uhd_disable_sof();
8000676c:	fe 69 04 00 	mov	r9,-130048
80006770:	72 08       	ld.w	r8,r9[0x0]
80006772:	a9 c8       	cbr	r8,0x8
80006774:	93 08       	st.w	r9[0x0],r8

			// Ack previous wakeup and resumes interrupts
			AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_HWUPIC_MASK
80006776:	fe 68 00 00 	mov	r8,-131072
8000677a:	35 89       	mov	r9,88
8000677c:	f1 49 04 08 	st.w	r8[1032],r9
					|AVR32_USBB_UHINTCLR_RSMEDIC_MASK
					|AVR32_USBB_UHINTCLR_RXRSMIC_MASK;

			// Enable wakeup/resumes interrupts
			AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_HWUPIES_MASK
80006780:	f1 49 04 18 	st.w	r8[1048],r9
					|AVR32_USBB_UHINTESET_RSMEDIES_MASK
					|AVR32_USBB_UHINTESET_RXRSMIES_MASK;

			otg_freeze_clock();
80006784:	fe 69 08 00 	mov	r9,-129024
80006788:	72 08       	ld.w	r8,r9[0x0]
8000678a:	af a8       	sbr	r8,0xe
8000678c:	93 08       	st.w	r9[0x0],r8
		SLEEPMGR_STOP,   // UHD_STATE_NO_VBUS
#endif
		SLEEPMGR_IDLE,   // UHD_STATE_DISCONNECT
		SLEEPMGR_STATIC, // UHD_STATE_SUSPEND
		SLEEPMGR_IDLE,   // UHD_STATE_IDLE
	};
8000678e:	fe f9 0c 72 	ld.w	r9,pc[3186]
80006792:	f2 ea 00 10 	ld.d	r10,r9[16]
80006796:	fa c8 ff fc 	sub	r8,sp,-4
8000679a:	f0 eb 00 10 	st.d	r8[16],r10
8000679e:	f2 ea 00 00 	ld.d	r10,r9[0]
800067a2:	f0 eb 00 00 	st.d	r8[0],r10
800067a6:	f2 ea 00 08 	ld.d	r10,r9[8]
800067aa:	f0 eb 00 08 	st.d	r8[8],r10
	static enum uhd_usbb_state_enum uhd_state = UHD_STATE_OFF;

	if (uhd_state == new_state) {
800067ae:	e0 69 0b 18 	mov	r9,2840
800067b2:	72 08       	ld.w	r8,r9[0x0]
800067b4:	58 48       	cp.w	r8,4
800067b6:	fe 90 fe 97 	breq	800064e4 <otg_interrupt+0x1c>
		return; // No change
	}
	if (new_state != UHD_STATE_OFF) {
		// Lock new limit
		sleepmgr_lock_mode( sleep_mode[new_state] );
800067ba:	40 5b       	lddsp	r11,sp[0x14]
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
800067bc:	e0 68 0c 84 	mov	r8,3204
800067c0:	3f fa       	mov	r10,-1
800067c2:	f0 0b 07 0c 	ld.ub	r12,r8[r11]
800067c6:	f4 0c 18 00 	cp.b	r12,r10
800067ca:	e0 80 00 87 	breq	800068d8 <otg_interrupt+0x410>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800067ce:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
800067d2:	d3 03       	ssrf	0x10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
800067d4:	f0 0b 07 0c 	ld.ub	r12,r8[r11]
800067d8:	2f fc       	sub	r12,-1
800067da:	f0 0b 0b 0c 	st.b	r8[r11],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800067de:	ed ba 00 10 	bld	r10,0x10
800067e2:	e0 81 03 f3 	brne	80006fc8 <otg_interrupt+0xb00>
	}
	if (uhd_state != UHD_STATE_OFF) {
800067e6:	72 0a       	ld.w	r10,r9[0x0]
800067e8:	58 0a       	cp.w	r10,0
800067ea:	e0 80 02 f0 	breq	80006dca <otg_interrupt+0x902>
		// Unlock old limit
		sleepmgr_unlock_mode( sleep_mode[uhd_state] );
800067ee:	fa ce ff e4 	sub	lr,sp,-28
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
800067f2:	e0 6b 0c 84 	mov	r11,3204
800067f6:	fc 0a 00 2a 	add	r10,lr,r10<<0x2
800067fa:	f4 fa ff e8 	ld.w	r10,r10[-24]
800067fe:	f0 0a 07 0c 	ld.ub	r12,r8[r10]
80006802:	30 08       	mov	r8,0
80006804:	f0 0c 18 00 	cp.b	r12,r8
80006808:	e0 81 02 d5 	brne	80006db2 <otg_interrupt+0x8ea>
8000680c:	c0 08       	rjmp	8000680c <otg_interrupt+0x344>
			if (nb_remaining) {
				// Freeze pipe in case of incomplete transfer
				uhd_freeze_pipe(pipe);
			} else {
				// Wait freeze in case of ASK on going
				while (!Is_uhd_pipe_frozen(pipe)) {
8000680e:	76 08       	ld.w	r8,r11[0x0]
80006810:	ed b8 00 11 	bld	r8,0x11
80006814:	cf d1       	brne	8000680e <otg_interrupt+0x346>
80006816:	cf 7a       	rjmp	80006604 <otg_interrupt+0x13c>
{
	// A setup request is on-going
	Assert(uhd_ctrl_request_timeout!=0);

	// Disable setup, IN and OUT interrupts of control endpoint
	AVR32_USBB.upcon0clr = AVR32_USBB_UPCON0CLR_TXSTPEC_MASK
80006818:	30 79       	mov	r9,7
8000681a:	f1 49 06 20 	st.w	r8[1568],r9
			| AVR32_USBB_UPCON0CLR_RXINEC_MASK
			| AVR32_USBB_UPCON0CLR_TXOUTEC_MASK;

	// Search event on control endpoint
	if (Is_uhd_setup_ready(0)) {
8000681e:	fe 68 05 30 	mov	r8,-129744
80006822:	70 09       	ld.w	r9,r8[0x0]
80006824:	ed b9 00 02 	bld	r9,0x2
80006828:	c6 b1       	brne	800068fe <otg_interrupt+0x436>
		// SETUP packet sent
		uhd_freeze_pipe(0);
8000682a:	fe 6e 05 f0 	mov	lr,-129552
8000682e:	e2 6b 00 00 	mov	r11,131072
80006832:	9d 0b       	st.w	lr[0x0],r11
		uhd_ack_setup_ready(0);
80006834:	fe 68 05 60 	mov	r8,-129696
80006838:	30 49       	mov	r9,4
8000683a:	91 09       	st.w	r8[0x0],r9
		Assert(uhd_ctrl_request_phase == UHD_CTRL_REQ_PHASE_SETUP);

		// Start DATA phase
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
8000683c:	e0 67 0c 74 	mov	r7,3188
80006840:	6e 0a       	ld.w	r10,r7[0x0]
80006842:	15 96       	ld.ub	r6,r10[0x1]
80006844:	f8 06 18 00 	cp.b	r6,r12
80006848:	e0 85 01 f8 	brlt	80006c38 <otg_interrupt+0x770>
				== USB_REQ_DIR_IN ) {
			uhd_ctrl_phase_data_in_start();
		} else {
			if (uhd_ctrl_request_first->req.wLength) {
8000684c:	15 f6       	ld.ub	r6,r10[0x7]
8000684e:	f5 39 00 08 	ld.ub	r9,r10[8]
80006852:	f3 e6 10 89 	or	r9,r9,r6<<0x8
80006856:	f8 09 19 00 	cp.h	r9,r12
8000685a:	e0 81 02 32 	brne	80006cbe <otg_interrupt+0x7f6>
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
8000685e:	fe 6a 05 00 	mov	r10,-129792
80006862:	74 09       	ld.w	r9,r10[0x0]
80006864:	e0 19 fc ff 	andl	r9,0xfcff
80006868:	a9 a9       	sbr	r9,0x8
8000686a:	95 09       	st.w	r10[0x0],r9
	uhd_ack_in_received(0);
8000686c:	30 19       	mov	r9,1
8000686e:	91 09       	st.w	r8[0x0],r9
	uhd_ack_short_packet(0);
80006870:	e0 6a 00 80 	mov	r10,128
80006874:	91 0a       	st.w	r8[0x0],r10
	uhd_enable_in_received_interrupt(0);
80006876:	9d 09       	st.w	lr[0x0],r9
	uhd_ack_fifocon(0);
80006878:	fe 68 06 20 	mov	r8,-129504
8000687c:	e0 69 40 00 	mov	r9,16384
80006880:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
80006882:	91 0b       	st.w	r8[0x0],r11
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80006884:	30 39       	mov	r9,3
80006886:	e0 68 0c 70 	mov	r8,3184
8000688a:	91 09       	st.w	r8[0x0],r9
8000688c:	fe 9f fe 2c 	bral	800064e4 <otg_interrupt+0x1c>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80006890:	fe 62 05 30 	mov	r2,-129744
80006894:	f2 02 00 08 	add	r8,r9,r2
80006898:	cc da       	rjmp	80006632 <otg_interrupt+0x16a>
			uhd_sleep_mode(UHD_STATE_SUSPEND);
		}
		return; // Abort SOF events
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
8000689a:	e0 69 0b 16 	mov	r9,2838
8000689e:	13 88       	ld.ub	r8,r9[0x0]
800068a0:	58 08       	cp.w	r8,0
800068a2:	c6 50       	breq	8000696c <otg_interrupt+0x4a4>
		if (--uhd_resume_start == 0) {
800068a4:	20 18       	sub	r8,1
800068a6:	5c 58       	castu.b	r8
800068a8:	b2 88       	st.b	r9[0x0],r8
800068aa:	fe 91 fe 1d 	brne	800064e4 <otg_interrupt+0x1c>
800068ae:	fe 69 06 24 	mov	r9,-129500
800068b2:	e0 6b 0b 15 	mov	r11,2837
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
					uhd_unfreeze_pipe(pipe);
800068b6:	e2 6a 00 00 	mov	r10,131072
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
800068ba:	17 8c       	ld.ub	r12,r11[0x0]
 * is enabled because this one can not occurred during the USB ISR
 * (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests
 * in peripheral modules.
 */
ISR(otg_interrupt, AVR32_USBB_IRQ_GROUP, UHD_USB_INT_LEVEL)
800068bc:	2f f8       	sub	r8,-1
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
800068be:	f8 08 08 4c 	asr	r12,r12,r8
					uhd_unfreeze_pipe(pipe);
800068c2:	ed bc 00 00 	bld	r12,0x0
800068c6:	f3 fa 0a 00 	st.weq	r9[0x0],r10
800068ca:	2f c9       	sub	r9,-4
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
800068cc:	58 68       	cp.w	r8,6
800068ce:	cf 61       	brne	800068ba <otg_interrupt+0x3f2>
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
					uhd_unfreeze_pipe(pipe);
				}
			}
			uhc_notify_resume();
800068d0:	e0 a0 0e f6 	rcall	800086bc <uhc_notify_resume>
800068d4:	fe 9f fe 08 	bral	800064e4 <otg_interrupt+0x1c>
800068d8:	c0 08       	rjmp	800068d8 <otg_interrupt+0x410>
		// Interrupt DMA acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt_dma(pipe_int);
		return;
	}
	// USB bus reset detection
	if (Is_uhd_reset_sent()) {
800068da:	72 07       	ld.w	r7,r9[0x0]
800068dc:	e2 17 00 04 	andl	r7,0x4,COH
800068e0:	e0 80 01 3a 	breq	80006b54 <otg_interrupt+0x68c>
		uhd_ack_reset_sent();
800068e4:	fe 68 04 08 	mov	r8,-130040
800068e8:	30 49       	mov	r9,4
800068ea:	91 09       	st.w	r8[0x0],r9
		if (uhd_reset_callback != NULL) {
800068ec:	e0 68 0a 98 	mov	r8,2712
800068f0:	70 08       	ld.w	r8,r8[0x0]
800068f2:	58 08       	cp.w	r8,0
800068f4:	fe 90 fd f8 	breq	800064e4 <otg_interrupt+0x1c>
			uhd_reset_callback();
800068f8:	5d 18       	icall	r8
800068fa:	fe 9f fd f5 	bral	800064e4 <otg_interrupt+0x1c>
				uhd_ctrl_phase_zlp_in();
			}
		}
		return;
	}
	if (Is_uhd_in_received(0)) {
800068fe:	70 0c       	ld.w	r12,r8[0x0]
80006900:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80006904:	c1 90       	breq	80006936 <otg_interrupt+0x46e>
		// In case of low USB speed and with a high CPU frequency,
		// a ACK from host can be always running on USB line
		// then wait end of ACK on IN pipe.
		while(!Is_uhd_pipe_frozen(0));
80006906:	fe 69 05 c0 	mov	r9,-129600
8000690a:	72 08       	ld.w	r8,r9[0x0]
8000690c:	ed b8 00 11 	bld	r8,0x11
80006910:	cf d1       	brne	8000690a <otg_interrupt+0x442>

		// IN packet received
		uhd_ack_in_received(0);
80006912:	fe 68 05 60 	mov	r8,-129696
80006916:	30 19       	mov	r9,1
80006918:	91 09       	st.w	r8[0x0],r9
		switch(uhd_ctrl_request_phase) {
8000691a:	e0 66 0c 70 	mov	r6,3184
8000691e:	6c 08       	ld.w	r8,r6[0x0]
80006920:	58 28       	cp.w	r8,2
80006922:	e0 80 02 58 	breq	80006dd2 <otg_interrupt+0x90a>
80006926:	58 38       	cp.w	r8,3
80006928:	fe 91 fd de 	brne	800064e4 <otg_interrupt+0x1c>
		case UHD_CTRL_REQ_PHASE_DATA_IN:
			uhd_ctrl_phase_data_in();
			break;
		case UHD_CTRL_REQ_PHASE_ZLP_IN:
			uhd_ctrl_request_end(UHD_TRANS_NOERROR);
8000692c:	30 0c       	mov	r12,0
8000692e:	fe b0 f6 e1 	rcall	800056f0 <uhd_ctrl_request_end>
80006932:	fe 9f fd d9 	bral	800064e4 <otg_interrupt+0x1c>
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_out_ready(0)) {
80006936:	70 09       	ld.w	r9,r8[0x0]
80006938:	ed b9 00 01 	bld	r9,0x1
8000693c:	e0 81 02 a1 	brne	80006e7e <otg_interrupt+0x9b6>
		// OUT packet sent
		uhd_freeze_pipe(0);
80006940:	fe 63 05 f0 	mov	r3,-129552
80006944:	e2 64 00 00 	mov	r4,131072
80006948:	87 04       	st.w	r3[0x0],r4
		uhd_ack_out_ready(0);
8000694a:	30 28       	mov	r8,2
8000694c:	fe 6e 05 60 	mov	lr,-129696
80006950:	9d 08       	st.w	lr[0x0],r8
		switch(uhd_ctrl_request_phase) {
80006952:	e0 66 0c 70 	mov	r6,3184
80006956:	6c 08       	ld.w	r8,r6[0x0]
80006958:	58 18       	cp.w	r8,1
8000695a:	e0 80 02 a9 	breq	80006eac <otg_interrupt+0x9e4>
8000695e:	58 48       	cp.w	r8,4
80006960:	fe 91 fd c2 	brne	800064e4 <otg_interrupt+0x1c>
		return;
	}
	if (Is_uhd_stall(0)) {
		// Stall Handshake received
		uhd_ack_stall(0);
		uhd_ctrl_request_end(UHD_TRANS_STALL);
80006964:	fe b0 f6 c6 	rcall	800056f0 <uhd_ctrl_request_end>
80006968:	fe 9f fd be 	bral	800064e4 <otg_interrupt+0x1c>
			uhc_notify_resume();
		}
		return; // Abort SOF events
	}
	// Manage the timeout on endpoint control transfer
	if (uhd_ctrl_request_timeout) {
8000696c:	e0 68 0c 80 	mov	r8,3200
80006970:	90 09       	ld.sh	r9,r8[0x0]
80006972:	58 09       	cp.w	r9,0
80006974:	c0 80       	breq	80006984 <otg_interrupt+0x4bc>
		// Setup request on-going
		if (--uhd_ctrl_request_timeout == 0) {
80006976:	90 09       	ld.sh	r9,r8[0x0]
80006978:	20 19       	sub	r9,1
8000697a:	b0 09       	st.h	r8[0x0],r9
8000697c:	90 08       	ld.sh	r8,r8[0x0]
8000697e:	58 08       	cp.w	r8,0
80006980:	e0 80 03 a7 	breq	800070ce <otg_interrupt+0xc06>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
80006984:	e0 67 0a 9c 	mov	r7,2716
80006988:	6e 08       	ld.w	r8,r7[0x0]
8000698a:	58 08       	cp.w	r8,0
8000698c:	c0 94       	brge	8000699e <otg_interrupt+0x4d6>
			if (ptr_job->timeout) {
8000698e:	8e 18       	ld.sh	r8,r7[0x2]
80006990:	58 08       	cp.w	r8,0
80006992:	c0 60       	breq	8000699e <otg_interrupt+0x4d6>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
80006994:	20 18       	sub	r8,1
80006996:	5c 88       	casts.h	r8
80006998:	ae 18       	st.h	r7[0x2],r8
8000699a:	e0 80 03 a4 	breq	800070e2 <otg_interrupt+0xc1a>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
8000699e:	e0 69 0a 9c 	mov	r9,2716
800069a2:	6e 58       	ld.w	r8,r7[0x14]
800069a4:	58 08       	cp.w	r8,0
800069a6:	c0 b4       	brge	800069bc <otg_interrupt+0x4f4>
			if (ptr_job->timeout) {
800069a8:	f3 08 00 16 	ld.sh	r8,r9[22]
800069ac:	58 08       	cp.w	r8,0
800069ae:	c0 70       	breq	800069bc <otg_interrupt+0x4f4>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
800069b0:	20 18       	sub	r8,1
800069b2:	5c 88       	casts.h	r8
800069b4:	f3 58 00 16 	st.h	r9[22],r8
800069b8:	e0 80 04 26 	breq	80007204 <otg_interrupt+0xd3c>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
800069bc:	e0 69 0a 9c 	mov	r9,2716
800069c0:	6e a8       	ld.w	r8,r7[0x28]
800069c2:	58 08       	cp.w	r8,0
800069c4:	c0 b4       	brge	800069da <otg_interrupt+0x512>
			if (ptr_job->timeout) {
800069c6:	f3 08 00 2a 	ld.sh	r8,r9[42]
800069ca:	58 08       	cp.w	r8,0
800069cc:	c0 70       	breq	800069da <otg_interrupt+0x512>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
800069ce:	20 18       	sub	r8,1
800069d0:	5c 88       	casts.h	r8
800069d2:	f3 58 00 2a 	st.h	r9[42],r8
800069d6:	e0 80 04 56 	breq	80007282 <otg_interrupt+0xdba>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
800069da:	e0 69 0a 9c 	mov	r9,2716
800069de:	6e f8       	ld.w	r8,r7[0x3c]
800069e0:	58 08       	cp.w	r8,0
800069e2:	c0 b4       	brge	800069f8 <otg_interrupt+0x530>
			if (ptr_job->timeout) {
800069e4:	f3 08 00 3e 	ld.sh	r8,r9[62]
800069e8:	58 08       	cp.w	r8,0
800069ea:	c0 70       	breq	800069f8 <otg_interrupt+0x530>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
800069ec:	20 18       	sub	r8,1
800069ee:	5c 88       	casts.h	r8
800069f0:	f3 58 00 3e 	st.h	r9[62],r8
800069f4:	e0 80 04 86 	breq	80007300 <otg_interrupt+0xe38>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
800069f8:	e0 69 0a 9c 	mov	r9,2716
800069fc:	6f 48       	ld.w	r8,r7[0x50]
800069fe:	58 08       	cp.w	r8,0
80006a00:	c0 b4       	brge	80006a16 <otg_interrupt+0x54e>
			if (ptr_job->timeout) {
80006a02:	f3 08 00 52 	ld.sh	r8,r9[82]
80006a06:	58 08       	cp.w	r8,0
80006a08:	c0 70       	breq	80006a16 <otg_interrupt+0x54e>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
80006a0a:	20 18       	sub	r8,1
80006a0c:	5c 88       	casts.h	r8
80006a0e:	f3 58 00 52 	st.h	r9[82],r8
80006a12:	e0 80 04 b6 	breq	8000737e <otg_interrupt+0xeb6>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
80006a16:	6f 98       	ld.w	r8,r7[0x64]
80006a18:	e0 69 0a 9c 	mov	r9,2716
80006a1c:	58 08       	cp.w	r8,0
80006a1e:	c0 b4       	brge	80006a34 <otg_interrupt+0x56c>
			if (ptr_job->timeout) {
80006a20:	f3 08 00 66 	ld.sh	r8,r9[102]
80006a24:	58 08       	cp.w	r8,0
80006a26:	c0 70       	breq	80006a34 <otg_interrupt+0x56c>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
80006a28:	20 18       	sub	r8,1
80006a2a:	5c 88       	casts.h	r8
80006a2c:	f3 58 00 66 	st.h	r9[102],r8
80006a30:	e0 80 02 cf 	breq	80006fce <otg_interrupt+0xb06>
				}
			}
		}
	}
	// Notify the UHC
	uhc_notify_sof(false);
80006a34:	30 0c       	mov	r12,0
80006a36:	e0 a0 0d 53 	rcall	800084dc <uhc_notify_sof>

	// Notify the user application
	UHC_SOF_EVENT();
80006a3a:	fe b0 e4 9f 	rcall	80003378 <ui_host_sof_event>
80006a3e:	fe 9f fd 53 	bral	800064e4 <otg_interrupt+0x1c>
		uhd_disable_bank_interrupt(pipe);
		uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
		return;
	}
	if (Is_uhd_out_ready_interrupt_enabled(pipe) && Is_uhd_out_ready(pipe)) {
		uhd_disable_out_ready_interrupt(pipe);
80006a42:	30 2a       	mov	r10,2
80006a44:	fe 6e 06 20 	mov	lr,-129504
80006a48:	f2 0e 00 08 	add	r8,r9,lr
80006a4c:	91 0a       	st.w	r8[0x0],r10
		// One bank is free then send a ZLP
		uhd_ack_out_ready(pipe);
80006a4e:	fe 6c 05 60 	mov	r12,-129696
80006a52:	f2 0c 00 0b 	add	r11,r9,r12
80006a56:	97 0a       	st.w	r11[0x0],r10
		uhd_ack_fifocon(pipe);
80006a58:	e0 6a 40 00 	mov	r10,16384
80006a5c:	91 0a       	st.w	r8[0x0],r10
		uhd_unfreeze_pipe(pipe);
80006a5e:	e2 6a 00 00 	mov	r10,131072
80006a62:	91 0a       	st.w	r8[0x0],r10
		uhd_enable_bank_interrupt(pipe);
80006a64:	e0 39 fa 10 	sub	r9,129552
80006a68:	e0 68 10 00 	mov	r8,4096
80006a6c:	93 08       	st.w	r9[0x0],r8
80006a6e:	fe 9f fd 3b 	bral	800064e4 <otg_interrupt+0x1c>
	uint32_t error = uhd_error_status(pipe) &
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
80006a72:	fe fa 09 92 	ld.w	r10,pc[2450]
80006a76:	f4 08 03 2a 	ld.w	r10,r10[r8<<0x2]
80006a7a:	fe 9f fd fc 	bral	80006672 <otg_interrupt+0x1aa>
		uhd_unfreeze_pipe(pipe);
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
		uhd_ack_stall(pipe);
80006a7e:	fe 6a 05 60 	mov	r10,-129696
80006a82:	f2 0a 00 08 	add	r8,r9,r10
80006a86:	34 0b       	mov	r11,64
80006a88:	91 0b       	st.w	r8[0x0],r11
		uhd_reset_data_toggle(pipe);
80006a8a:	fe 68 05 f0 	mov	r8,-129552
80006a8e:	f2 08 00 0a 	add	r10,r9,r8
80006a92:	e4 68 00 00 	mov	r8,262144
80006a96:	95 08       	st.w	r10[0x0],r8
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
80006a98:	e0 7e 00 00 	mov	lr,65536
80006a9c:	fe 68 00 00 	mov	r8,-131072
80006aa0:	fc 0c 09 4e 	lsl	lr,lr,r12
80006aa4:	f0 f7 04 1c 	ld.w	r7,r8[1052]
80006aa8:	fd e7 10 07 	or	r7,lr,r7
80006aac:	f1 47 04 1c 	st.w	r8[1052],r7
80006ab0:	5c de       	com	lr
80006ab2:	f0 f7 04 1c 	ld.w	r7,r8[1052]
80006ab6:	0e 6e       	and	lr,r7
80006ab8:	f1 4e 04 1c 	st.w	r8[1052],lr

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80006abc:	fe 67 05 00 	mov	r7,-129792
80006ac0:	f2 07 00 0e 	add	lr,r9,r7
80006ac4:	7c 08       	ld.w	r8,lr[0x0]
80006ac6:	ab a8       	sbr	r8,0xa
80006ac8:	9d 08       	st.w	lr[0x0],r8
	uhd_enable_stall_interrupt(pipe);
80006aca:	95 0b       	st.w	r10[0x0],r11
	uhd_enable_pipe_error_interrupt(pipe);
80006acc:	30 88       	mov	r8,8
80006ace:	95 08       	st.w	r10[0x0],r8

	uhd_disable_out_ready_interrupt(pipe);
80006ad0:	30 28       	mov	r8,2
80006ad2:	e0 39 f9 e0 	sub	r9,129504
80006ad6:	93 08       	st.w	r9[0x0],r8
	uhd_pipe_dma_set_control(pipe, 0);
80006ad8:	f8 08 15 04 	lsl	r8,r12,0x4
80006adc:	e0 38 f9 00 	sub	r8,129280
80006ae0:	30 0a       	mov	r10,0
80006ae2:	91 2a       	st.w	r8[0x8],r10
static void uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
80006ae4:	e0 68 0a 9c 	mov	r8,2716
80006ae8:	f8 c9 00 01 	sub	r9,r12,1
80006aec:	f2 09 00 29 	add	r9,r9,r9<<0x2
80006af0:	f0 09 00 29 	add	r9,r8,r9<<0x2
	if (ptr_job->busy == false) {
80006af4:	72 08       	ld.w	r8,r9[0x0]
80006af6:	58 08       	cp.w	r8,0
80006af8:	fe 94 fc f6 	brge	800064e4 <otg_interrupt+0x1c>
		return; // No job running
	}
	ptr_job->busy = false;
80006afc:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80006b00:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_end) {
80006b02:	72 48       	ld.w	r8,r9[0x10]
80006b04:	58 08       	cp.w	r8,0
80006b06:	fe 90 fc ef 	breq	800064e4 <otg_interrupt+0x1c>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80006b0a:	7c 0b       	ld.w	r11,lr[0x0]
80006b0c:	7c 07       	ld.w	r7,lr[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80006b0e:	e0 6e 00 80 	mov	lr,128
80006b12:	ef d7 c1 02 	bfextu	r7,r7,0x8,0x2
80006b16:	58 17       	cp.w	r7,1
80006b18:	f9 be 01 00 	movne	lr,0
80006b1c:	f5 dc c0 02 	bfextu	r10,r12,0x0,0x2
80006b20:	f7 db c2 04 	bfextu	r11,r11,0x10,0x4
80006b24:	a3 7a       	lsl	r10,0x3
80006b26:	fd eb 10 0b 	or	r11,lr,r11
80006b2a:	e2 1c 00 3c 	andl	r12,0x3c,COH
80006b2e:	37 fe       	mov	lr,127
80006b30:	e0 3c fb dc 	sub	r12,130012
80006b34:	fc 0a 09 4a 	lsl	r10,lr,r10
80006b38:	78 0c       	ld.w	r12,r12[0x0]
80006b3a:	f5 ec 00 0c 	and	r12,r10,r12
80006b3e:	5c 9a       	brev	r10
80006b40:	f4 0a 12 00 	clz	r10,r10
80006b44:	72 39       	ld.w	r9,r9[0xc]
80006b46:	f8 0a 0a 4c 	lsr	r12,r12,r10
80006b4a:	30 4a       	mov	r10,4
80006b4c:	5c 5c       	castu.b	r12
80006b4e:	5d 18       	icall	r8
80006b50:	fe 9f fc ca 	bral	800064e4 <otg_interrupt+0x1c>
		}
		return;
	}

	// Manage dis/connection event
	if (Is_uhd_disconnection() && Is_uhd_disconnection_int_enabled()) {
80006b54:	72 09       	ld.w	r9,r9[0x0]
80006b56:	ed b9 00 01 	bld	r9,0x1
80006b5a:	c0 81       	brne	80006b6a <otg_interrupt+0x6a2>
80006b5c:	fe 69 04 10 	mov	r9,-130032
80006b60:	72 09       	ld.w	r9,r9[0x0]
80006b62:	ed b9 00 01 	bld	r9,0x1
80006b66:	e0 80 03 26 	breq	800071b2 <otg_interrupt+0xcea>
		uhd_suspend_start = 0;
		uhd_resume_start = 0;
		uhc_notify_connection(false);
		return;
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
80006b6a:	fe 68 04 04 	mov	r8,-130044
80006b6e:	70 08       	ld.w	r8,r8[0x0]
80006b70:	ed b8 00 00 	bld	r8,0x0
80006b74:	c0 81       	brne	80006b84 <otg_interrupt+0x6bc>
80006b76:	fe 68 04 10 	mov	r8,-130032
80006b7a:	70 08       	ld.w	r8,r8[0x0]
80006b7c:	ed b8 00 00 	bld	r8,0x0
80006b80:	e0 80 02 fa 	breq	80007174 <otg_interrupt+0xcac>
		uhc_notify_connection(true);
		return;
	}

	// Manage Vbus error
	if (Is_uhd_vbus_error_interrupt()) {
80006b84:	fe 69 08 04 	mov	r9,-129020
80006b88:	72 08       	ld.w	r8,r9[0x0]
80006b8a:	ed b8 00 03 	bld	r8,0x3
80006b8e:	e0 80 02 eb 	breq	80007164 <otg_interrupt+0xc9c>
		UHC_VBUS_ERROR();
		return;
	}

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
80006b92:	72 08       	ld.w	r8,r9[0x0]
80006b94:	ed b8 00 0e 	bld	r8,0xe
80006b98:	cf d1       	brne	80006b92 <otg_interrupt+0x6ca>
	otg_unfreeze_clock();
80006b9a:	fe 69 08 00 	mov	r9,-129024
80006b9e:	72 08       	ld.w	r8,r9[0x0]
80006ba0:	af c8       	cbr	r8,0xe
80006ba2:	93 08       	st.w	r9[0x0],r8

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
80006ba4:	fe 68 04 10 	mov	r8,-130032
80006ba8:	70 08       	ld.w	r8,r8[0x0]
80006baa:	ed b8 00 06 	bld	r8,0x6
80006bae:	c2 91       	brne	80006c00 <otg_interrupt+0x738>
80006bb0:	fe 68 04 04 	mov	r8,-130044
80006bb4:	70 09       	ld.w	r9,r8[0x0]
80006bb6:	ed b9 00 06 	bld	r9,0x6
80006bba:	c0 90       	breq	80006bcc <otg_interrupt+0x704>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
80006bbc:	70 09       	ld.w	r9,r8[0x0]

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
	otg_unfreeze_clock();

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
80006bbe:	ed b9 00 03 	bld	r9,0x3
80006bc2:	c0 50       	breq	80006bcc <otg_interrupt+0x704>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
80006bc4:	70 08       	ld.w	r8,r8[0x0]

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
	otg_unfreeze_clock();

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
80006bc6:	ed b8 00 04 	bld	r8,0x4
80006bca:	c1 b1       	brne	80006c00 <otg_interrupt+0x738>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
		// Disable wakeup/resumes interrupts
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
80006bcc:	fe 68 00 00 	mov	r8,-131072
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_enable_sof();
80006bd0:	fe 6a 04 00 	mov	r10,-130048
	otg_unfreeze_clock();

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
		// Disable wakeup/resumes interrupts
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
80006bd4:	35 89       	mov	r9,88
80006bd6:	f1 49 04 14 	st.w	r8[1044],r9
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_enable_sof();
80006bda:	74 08       	ld.w	r8,r10[0x0]
80006bdc:	a9 a8       	sbr	r8,0x8
		if ((!Is_uhd_downstream_resume())
80006bde:	fe 69 04 04 	mov	r9,-130044
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
		// Disable wakeup/resumes interrupts
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_enable_sof();
80006be2:	95 08       	st.w	r10[0x0],r8
		if ((!Is_uhd_downstream_resume())
80006be4:	72 08       	ld.w	r8,r9[0x0]
				&&(!Is_uhd_disconnection())) {
80006be6:	ed b8 00 03 	bld	r8,0x3
80006bea:	f3 f8 10 00 	ld.wne	r8,r9[0x0]
			if (Is_uhd_high_speed_mode()) {
				uhd_send_resume();
			}
		}
		// Wait 50ms before restarting transfer
		uhd_resume_start = 50;
80006bee:	e0 68 0b 16 	mov	r8,2838
80006bf2:	33 29       	mov	r9,50
		uhd_sleep_mode(UHD_STATE_IDLE);
80006bf4:	30 5c       	mov	r12,5
			if (Is_uhd_high_speed_mode()) {
				uhd_send_resume();
			}
		}
		// Wait 50ms before restarting transfer
		uhd_resume_start = 50;
80006bf6:	b0 89       	st.b	r8[0x0],r9
		uhd_sleep_mode(UHD_STATE_IDLE);
80006bf8:	fe b0 f4 0e 	rcall	80005414 <uhd_sleep_mode>
80006bfc:	fe 9f fc 74 	bral	800064e4 <otg_interrupt+0x1c>
		return;
	}

	// Manage Vbus state change
	if (Is_otg_vbus_transition()) {
80006c00:	fe 69 08 04 	mov	r9,-129020
80006c04:	72 08       	ld.w	r8,r9[0x0]
80006c06:	ed b8 00 01 	bld	r8,0x1
80006c0a:	fe 91 fc 6d 	brne	800064e4 <otg_interrupt+0x1c>
		otg_ack_vbus_transition();
80006c0e:	30 2c       	mov	r12,2
80006c10:	fe 68 08 08 	mov	r8,-129016
80006c14:	91 0c       	st.w	r8[0x0],r12
		if (Is_otg_vbus_high()) {
80006c16:	72 07       	ld.w	r7,r9[0x0]
80006c18:	e2 17 08 00 	andl	r7,0x800,COH
80006c1c:	e0 81 02 ec 	brne	800071f4 <otg_interrupt+0xd2c>
			uhd_sleep_mode(UHD_STATE_DISCONNECT);
			UHC_VBUS_CHANGE(true);
		} else {
			uhd_sleep_mode(UHD_STATE_NO_VBUS);
80006c20:	fe b0 f3 fa 	rcall	80005414 <uhd_sleep_mode>
			otg_freeze_clock();
80006c24:	fe 69 08 00 	mov	r9,-129024
80006c28:	72 08       	ld.w	r8,r9[0x0]
80006c2a:	af a8       	sbr	r8,0xe
			UHC_VBUS_CHANGE(false);
80006c2c:	0e 9c       	mov	r12,r7
		if (Is_otg_vbus_high()) {
			uhd_sleep_mode(UHD_STATE_DISCONNECT);
			UHC_VBUS_CHANGE(true);
		} else {
			uhd_sleep_mode(UHD_STATE_NO_VBUS);
			otg_freeze_clock();
80006c2e:	93 08       	st.w	r9[0x0],r8
			UHC_VBUS_CHANGE(false);
80006c30:	fe b0 e2 4a 	rcall	800030c4 <ui_host_vbus_change>
80006c34:	fe 9f fc 58 	bral	800064e4 <otg_interrupt+0x1c>
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80006c38:	fe 6a 05 00 	mov	r10,-129792
80006c3c:	74 09       	ld.w	r9,r10[0x0]
80006c3e:	e0 19 fc ff 	andl	r9,0xfcff
80006c42:	a9 a9       	sbr	r9,0x8
80006c44:	95 09       	st.w	r10[0x0],r9
	uhd_ack_in_received(0);
80006c46:	30 19       	mov	r9,1
80006c48:	91 09       	st.w	r8[0x0],r9
	uhd_ack_short_packet(0);
80006c4a:	e0 6a 00 80 	mov	r10,128
80006c4e:	91 0a       	st.w	r8[0x0],r10
	uhd_enable_in_received_interrupt(0);
80006c50:	9d 09       	st.w	lr[0x0],r9
	uhd_ack_fifocon(0);
80006c52:	fe 68 06 20 	mov	r8,-129504
80006c56:	e0 69 40 00 	mov	r9,16384
80006c5a:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
80006c5c:	91 0b       	st.w	r8[0x0],r11
 * \internal
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
80006c5e:	30 29       	mov	r9,2
80006c60:	e0 68 0c 70 	mov	r8,3184
80006c64:	91 09       	st.w	r8[0x0],r9
80006c66:	fe 9f fc 3f 	bral	800064e4 <otg_interrupt+0x1c>
 * \param pipe  Pipe number
 */
static void uhd_pipe_interrupt(uint8_t pipe)
{
	if (Is_uhd_bank_interrupt_enabled(pipe) && (0==uhd_nb_busy_bank(pipe))) {
		uhd_disable_bank_interrupt(pipe);
80006c6a:	fe 62 06 20 	mov	r2,-129504
80006c6e:	f2 02 00 08 	add	r8,r9,r2
80006c72:	e0 6b 10 00 	mov	r11,4096
80006c76:	91 0b       	st.w	r8[0x0],r11
static void uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
80006c78:	e0 68 0a 9c 	mov	r8,2716
80006c7c:	f8 ce 00 01 	sub	lr,r12,1
80006c80:	fc 0e 00 2e 	add	lr,lr,lr<<0x2
80006c84:	f0 0e 00 2e 	add	lr,r8,lr<<0x2
	if (ptr_job->busy == false) {
80006c88:	7c 08       	ld.w	r8,lr[0x0]
80006c8a:	58 08       	cp.w	r8,0
80006c8c:	fe 94 fc 2c 	brge	800064e4 <otg_interrupt+0x1c>
		return; // No job running
	}
	ptr_job->busy = false;
80006c90:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80006c94:	9d 08       	st.w	lr[0x0],r8
	if (NULL == ptr_job->call_end) {
80006c96:	7c 48       	ld.w	r8,lr[0x10]
80006c98:	58 08       	cp.w	r8,0
80006c9a:	fe 90 fc 25 	breq	800064e4 <otg_interrupt+0x1c>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80006c9e:	fe 67 05 00 	mov	r7,-129792
80006ca2:	f2 07 00 0b 	add	r11,r9,r7
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80006ca6:	ef dc c0 02 	bfextu	r7,r12,0x0,0x2
80006caa:	7c 39       	ld.w	r9,lr[0xc]
80006cac:	fe 9f fd 24 	bral	800066f4 <otg_interrupt+0x22c>
	}

	if (uhd_is_pipe_out(pipe)) {
		// Wait that all banks are free to freeze clock of OUT endpoint
		// and call callback
		uhd_enable_bank_interrupt(pipe);
80006cb0:	e0 38 fa 10 	sub	r8,129552
80006cb4:	e0 69 10 00 	mov	r9,4096
80006cb8:	91 09       	st.w	r8[0x0],r9
80006cba:	fe 9f fc 15 	bral	800064e4 <otg_interrupt+0x1c>
static void uhd_ctrl_phase_data_out(void)
{
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
80006cbe:	e0 66 0c 70 	mov	r6,3184
80006cc2:	30 13       	mov	r3,1
80006cc4:	8d 03       	st.w	r6[0x0],r3

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
80006cc6:	f5 39 00 08 	ld.ub	r9,r10[8]
80006cca:	e0 65 0c 78 	mov	r5,3192
80006cce:	15 f4       	ld.ub	r4,r10[0x7]
80006cd0:	f3 e4 10 84 	or	r4,r9,r4<<0x8
80006cd4:	8a 09       	ld.sh	r9,r5[0x0]
80006cd6:	5c 84       	casts.h	r4
80006cd8:	08 92       	mov	r2,r4
80006cda:	f2 04 19 00 	cp.h	r4,r9
80006cde:	e0 80 01 e2 	breq	800070a2 <otg_interrupt+0xbda>
		// End of DATA phase
		uhd_ctrl_phase_zlp_in();
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
80006ce2:	f5 08 00 10 	ld.sh	r8,r10[16]
80006ce6:	f8 08 19 00 	cp.h	r8,r12
80006cea:	c1 81       	brne	80006d1a <otg_interrupt+0x852>
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
				|| !uhd_ctrl_request_first->callback_run(
80006cec:	74 58       	ld.w	r8,r10[0x14]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80006cee:	58 08       	cp.w	r8,0
80006cf0:	e0 80 01 af 	breq	8000704e <otg_interrupt+0xb86>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80006cf4:	fe 69 04 24 	mov	r9,-130012
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80006cf8:	f4 cb ff f4 	sub	r11,r10,-12
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80006cfc:	72 0c       	ld.w	r12,r9[0x0]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80006cfe:	2f 0a       	sub	r10,-16
80006d00:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80006d04:	5d 18       	icall	r8
80006d06:	e0 80 01 a4 	breq	8000704e <otg_interrupt+0xb86>
80006d0a:	6e 0a       	ld.w	r10,r7[0x0]
80006d0c:	8a 09       	ld.sh	r9,r5[0x0]
80006d0e:	15 f4       	ld.ub	r4,r10[0x7]
80006d10:	f5 38 00 08 	ld.ub	r8,r10[8]
80006d14:	f1 e4 10 84 	or	r4,r8,r4<<0x8
80006d18:	5c 84       	casts.h	r4
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80006d1a:	fe 6b 05 00 	mov	r11,-129792
80006d1e:	76 0c       	ld.w	r12,r11[0x0]
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80006d20:	76 08       	ld.w	r8,r11[0x0]
80006d22:	e0 18 fc ff 	andl	r8,0xfcff
80006d26:	a9 b8       	sbr	r8,0x9
80006d28:	97 08       	st.w	r11[0x0],r8
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80006d2a:	f1 dc c0 83 	bfextu	r8,r12,0x4,0x3
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
80006d2e:	30 2b       	mov	r11,2
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80006d30:	30 8e       	mov	lr,8
80006d32:	fc 08 09 4e 	lsl	lr,lr,r8
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
80006d36:	fe 68 05 60 	mov	r8,-129696
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80006d3a:	5c 5e       	castu.b	lr
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
80006d3c:	91 0b       	st.w	r8[0x0],r11
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80006d3e:	30 0c       	mov	r12,0
	ep_ctrl_size = uhd_get_pipe_size(0);
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
80006d40:	fc 18 e0 00 	movh	r8,0xe000
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80006d44:	30 0b       	mov	r11,0
80006d46:	c1 b8       	rjmp	80006d7c <otg_interrupt+0x8b4>
80006d48:	f5 09 00 10 	ld.sh	r9,r10[16]
80006d4c:	f8 09 19 00 	cp.h	r9,r12
80006d50:	c2 30       	breq	80006d96 <otg_interrupt+0x8ce>
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
80006d52:	74 39       	ld.w	r9,r10[0xc]
80006d54:	13 36       	ld.ub	r6,r9++
80006d56:	10 c6       	st.b	r8++,r6
80006d58:	95 39       	st.w	r10[0xc],r9
		uhd_ctrl_nb_trans++;
80006d5a:	8a 09       	ld.sh	r9,r5[0x0]
80006d5c:	2f f9       	sub	r9,-1
80006d5e:	aa 09       	st.h	r5[0x0],r9
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
80006d60:	6e 09       	ld.w	r9,r7[0x0]
80006d62:	f3 0a 00 10 	ld.sh	r10,r9[16]
80006d66:	20 1a       	sub	r10,1
80006d68:	f3 5a 00 10 	st.h	r9[16],r10
80006d6c:	6e 0a       	ld.w	r10,r7[0x0]
80006d6e:	8a 09       	ld.sh	r9,r5[0x0]
80006d70:	15 f4       	ld.ub	r4,r10[0x7]
80006d72:	f5 36 00 08 	ld.ub	r6,r10[8]
80006d76:	ed e4 10 84 	or	r4,r6,r4<<0x8
80006d7a:	5c 84       	casts.h	r4

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80006d7c:	f2 04 19 00 	cp.h	r4,r9
80006d80:	5f b9       	srhi	r9
80006d82:	fc 08 01 06 	sub	r6,lr,r8
80006d86:	f6 06 18 00 	cp.b	r6,r11
80006d8a:	5f 16       	srne	r6
80006d8c:	ed e9 00 09 	and	r9,r6,r9
80006d90:	f6 09 18 00 	cp.b	r9,r11
80006d94:	cd a1       	brne	80006d48 <otg_interrupt+0x880>
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
		uhd_ctrl_nb_trans++;
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
	}
	uhd_enable_out_ready_interrupt(0);
80006d96:	30 29       	mov	r9,2
80006d98:	fe 68 05 f0 	mov	r8,-129552
80006d9c:	91 09       	st.w	r8[0x0],r9
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	uhd_enable_out_ready_interrupt(0);
	uhd_ack_fifocon(0);
80006d9e:	fe 68 06 20 	mov	r8,-129504
80006da2:	e0 69 40 00 	mov	r9,16384
80006da6:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
80006da8:	e2 69 00 00 	mov	r9,131072
80006dac:	91 09       	st.w	r8[0x0],r9
80006dae:	fe 9f fb 9b 	bral	800064e4 <otg_interrupt+0x1c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006db2:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80006db6:	d3 03       	ssrf	0x10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80006db8:	f6 0a 07 0c 	ld.ub	r12,r11[r10]
80006dbc:	20 1c       	sub	r12,1
80006dbe:	f6 0a 0b 0c 	st.b	r11[r10],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006dc2:	ed b8 00 10 	bld	r8,0x10
80006dc6:	c0 20       	breq	80006dca <otg_interrupt+0x902>
      cpu_irq_enable();
80006dc8:	d5 03       	csrf	0x10
	}
	if (uhd_state != UHD_STATE_OFF) {
		// Unlock old limit
		sleepmgr_unlock_mode( sleep_mode[uhd_state] );
	}
	uhd_state = new_state;
80006dca:	30 48       	mov	r8,4
80006dcc:	93 08       	st.w	r9[0x0],r8
80006dce:	fe 9f fb 8b 	bral	800064e4 <otg_interrupt+0x1c>
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
80006dd2:	fe 68 05 30 	mov	r8,-129744
80006dd6:	e0 67 0c 74 	mov	r7,3188
80006dda:	70 04       	ld.w	r4,r8[0x0]
	//! In HUB mode, the control pipe is always configured to 64B
	//! thus the short packet flag must be computed
	b_short_packet = (nb_byte_received != uhd_get_pipe_size(0));
	uhd_ack_short_packet(0);
#else
	b_short_packet = Is_uhd_short_packet(0);
80006ddc:	fc 11 e0 00 	movh	r1,0xe000
80006de0:	70 08       	ld.w	r8,r8[0x0]
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
80006de2:	e9 d4 c2 88 	bfextu	r4,r4,0x14,0x8
	//! In HUB mode, the control pipe is always configured to 64B
	//! thus the short packet flag must be computed
	b_short_packet = (nb_byte_received != uhd_get_pipe_size(0));
	uhd_ack_short_packet(0);
#else
	b_short_packet = Is_uhd_short_packet(0);
80006de6:	50 08       	stdsp	sp[0x0],r8
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80006de8:	0e 90       	mov	r0,r7
80006dea:	30 05       	mov	r5,0
80006dec:	30 02       	mov	r2,0
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
80006dee:	e0 63 0c 78 	mov	r3,3192
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80006df2:	6e 0a       	ld.w	r10,r7[0x0]
80006df4:	08 9e       	mov	lr,r4
80006df6:	ea 04 18 00 	cp.b	r4,r5
80006dfa:	5f 18       	srne	r8
80006dfc:	f5 09 00 10 	ld.sh	r9,r10[16]
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
80006e00:	20 1e       	sub	lr,1
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80006e02:	e4 09 19 00 	cp.h	r9,r2
80006e06:	5f 1c       	srne	r12
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
80006e08:	f4 cb ff f4 	sub	r11,r10,-12
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80006e0c:	f1 ec 00 0c 	and	r12,r8,r12
80006e10:	ea 0c 18 00 	cp.b	r12,r5
80006e14:	c2 51       	brne	80006e5e <otg_interrupt+0x996>
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
80006e16:	e4 09 19 00 	cp.h	r9,r2
80006e1a:	5f 09       	sreq	r9
80006e1c:	12 68       	and	r8,r9
80006e1e:	ea 08 18 00 	cp.b	r8,r5
80006e22:	e0 80 01 2a 	breq	80007076 <otg_interrupt+0xbae>
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
				|| !uhd_ctrl_request_first->callback_run(
80006e26:	74 58       	ld.w	r8,r10[0x14]
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
80006e28:	58 08       	cp.w	r8,0
80006e2a:	c0 90       	breq	80006e3c <otg_interrupt+0x974>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80006e2c:	fe 69 04 24 	mov	r9,-130012
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
80006e30:	2f 0a       	sub	r10,-16
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80006e32:	72 0c       	ld.w	r12,r9[0x0]
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
80006e34:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80006e38:	5d 18       	icall	r8
80006e3a:	cd c1       	brne	80006df2 <otg_interrupt+0x92a>
 * \internal
 * \brief Starts the ZLP OUT phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_out(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
80006e3c:	30 48       	mov	r8,4
80006e3e:	8d 08       	st.w	r6[0x0],r8
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80006e40:	fe 69 05 00 	mov	r9,-129792
80006e44:	72 08       	ld.w	r8,r9[0x0]
80006e46:	e0 18 fc ff 	andl	r8,0xfcff
80006e4a:	a9 b8       	sbr	r8,0x9
80006e4c:	93 08       	st.w	r9[0x0],r8
	uhd_ack_out_ready(0);
80006e4e:	30 28       	mov	r8,2
80006e50:	fe 69 05 60 	mov	r9,-129696
80006e54:	93 08       	st.w	r9[0x0],r8
	uhd_enable_out_ready_interrupt(0);
80006e56:	fe 69 05 f0 	mov	r9,-129552
80006e5a:	93 08       	st.w	r9[0x0],r8
80006e5c:	ca 1b       	rjmp	80006d9e <otg_interrupt+0x8d6>

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
80006e5e:	03 39       	ld.ub	r9,r1++
80006e60:	74 38       	ld.w	r8,r10[0xc]
80006e62:	10 c9       	st.b	r8++,r9
80006e64:	95 38       	st.w	r10[0xc],r8
		uhd_ctrl_nb_trans++;
80006e66:	86 08       	ld.sh	r8,r3[0x0]
80006e68:	2f f8       	sub	r8,-1
80006e6a:	a6 08       	st.h	r3[0x0],r8
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
80006e6c:	e9 de c0 08 	bfextu	r4,lr,0x0,0x8
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
80006e70:	60 08       	ld.w	r8,r0[0x0]
80006e72:	f1 09 00 10 	ld.sh	r9,r8[16]
80006e76:	20 19       	sub	r9,1
80006e78:	f1 59 00 10 	st.h	r8[16],r9
80006e7c:	cb bb       	rjmp	80006df2 <otg_interrupt+0x92a>
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_stall(0)) {
80006e7e:	70 09       	ld.w	r9,r8[0x0]
80006e80:	e2 19 00 40 	andl	r9,0x40,COH
80006e84:	e0 81 00 9b 	brne	80006fba <otg_interrupt+0xaf2>
		// Stall Handshake received
		uhd_ack_stall(0);
		uhd_ctrl_request_end(UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(0)) {
80006e88:	70 08       	ld.w	r8,r8[0x0]
80006e8a:	ed b8 00 03 	bld	r8,0x3
80006e8e:	fe 91 fb 2b 	brne	800064e4 <otg_interrupt+0x1c>
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
80006e92:	fe 68 06 80 	mov	r8,-129408
80006e96:	70 0a       	ld.w	r10,r8[0x0]
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
80006e98:	91 09       	st.w	r8[0x0],r9
80006e9a:	f1 da c0 04 	bfextu	r8,r10,0x0,0x4
80006e9e:	20 18       	sub	r8,1
80006ea0:	58 28       	cp.w	r8,2
80006ea2:	e0 88 00 86 	brls	80006fae <otg_interrupt+0xae6>
80006ea6:	30 6c       	mov	r12,6
80006ea8:	fe 9f fd 5e 	bral	80006964 <otg_interrupt+0x49c>
static void uhd_ctrl_phase_data_out(void)
{
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
80006eac:	8d 08       	st.w	r6[0x0],r8

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
80006eae:	e0 67 0c 74 	mov	r7,3188
80006eb2:	e0 65 0c 78 	mov	r5,3192
80006eb6:	6e 0a       	ld.w	r10,r7[0x0]
80006eb8:	8a 09       	ld.sh	r9,r5[0x0]
80006eba:	15 f2       	ld.ub	r2,r10[0x7]
80006ebc:	f5 3b 00 08 	ld.ub	r11,r10[8]
80006ec0:	f7 e2 10 8b 	or	r11,r11,r2<<0x8
80006ec4:	5c 8b       	casts.h	r11
80006ec6:	f2 0b 19 00 	cp.h	r11,r9
80006eca:	c5 c0       	breq	80006f82 <otg_interrupt+0xaba>
		// End of DATA phase
		uhd_ctrl_phase_zlp_in();
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
80006ecc:	f5 08 00 10 	ld.sh	r8,r10[16]
80006ed0:	f8 08 19 00 	cp.h	r8,r12
80006ed4:	c1 81       	brne	80006f04 <otg_interrupt+0xa3c>
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
				|| !uhd_ctrl_request_first->callback_run(
80006ed6:	74 58       	ld.w	r8,r10[0x14]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80006ed8:	58 08       	cp.w	r8,0
80006eda:	e0 80 00 ba 	breq	8000704e <otg_interrupt+0xb86>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80006ede:	fe 69 04 24 	mov	r9,-130012
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80006ee2:	f4 cb ff f4 	sub	r11,r10,-12
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80006ee6:	72 0c       	ld.w	r12,r9[0x0]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80006ee8:	2f 0a       	sub	r10,-16
80006eea:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80006eee:	5d 18       	icall	r8
80006ef0:	e0 80 00 af 	breq	8000704e <otg_interrupt+0xb86>
80006ef4:	6e 0a       	ld.w	r10,r7[0x0]
80006ef6:	8a 09       	ld.sh	r9,r5[0x0]
80006ef8:	15 fb       	ld.ub	r11,r10[0x7]
80006efa:	f5 38 00 08 	ld.ub	r8,r10[8]
80006efe:	f1 eb 10 8b 	or	r11,r8,r11<<0x8
80006f02:	5c 8b       	casts.h	r11
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80006f04:	fe 6c 05 00 	mov	r12,-129792
80006f08:	78 0e       	ld.w	lr,r12[0x0]
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80006f0a:	78 08       	ld.w	r8,r12[0x0]
80006f0c:	e0 18 fc ff 	andl	r8,0xfcff
80006f10:	a9 b8       	sbr	r8,0x9
80006f12:	99 08       	st.w	r12[0x0],r8
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80006f14:	f1 de c0 83 	bfextu	r8,lr,0x4,0x3
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
80006f18:	30 2c       	mov	r12,2
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80006f1a:	30 86       	mov	r6,8
80006f1c:	ec 08 09 46 	lsl	r6,r6,r8
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
80006f20:	fe 68 05 60 	mov	r8,-129696
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80006f24:	5c 56       	castu.b	r6
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
80006f26:	91 0c       	st.w	r8[0x0],r12
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80006f28:	30 0e       	mov	lr,0
	ep_ctrl_size = uhd_get_pipe_size(0);
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
80006f2a:	fc 18 e0 00 	movh	r8,0xe000
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80006f2e:	30 0c       	mov	r12,0
80006f30:	c1 b8       	rjmp	80006f66 <otg_interrupt+0xa9e>
80006f32:	f5 09 00 10 	ld.sh	r9,r10[16]
80006f36:	fc 09 19 00 	cp.h	r9,lr
80006f3a:	fe 90 ff 2e 	breq	80006d96 <otg_interrupt+0x8ce>
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
80006f3e:	74 39       	ld.w	r9,r10[0xc]
80006f40:	13 3b       	ld.ub	r11,r9++
80006f42:	10 cb       	st.b	r8++,r11
80006f44:	95 39       	st.w	r10[0xc],r9
		uhd_ctrl_nb_trans++;
80006f46:	8a 09       	ld.sh	r9,r5[0x0]
80006f48:	2f f9       	sub	r9,-1
80006f4a:	aa 09       	st.h	r5[0x0],r9
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
80006f4c:	6e 09       	ld.w	r9,r7[0x0]
80006f4e:	f3 0a 00 10 	ld.sh	r10,r9[16]
80006f52:	20 1a       	sub	r10,1
80006f54:	f3 5a 00 10 	st.h	r9[16],r10
80006f58:	6e 0a       	ld.w	r10,r7[0x0]
80006f5a:	8a 09       	ld.sh	r9,r5[0x0]
80006f5c:	15 f4       	ld.ub	r4,r10[0x7]
80006f5e:	f5 3b 00 08 	ld.ub	r11,r10[8]
80006f62:	f7 e4 10 8b 	or	r11,r11,r4<<0x8

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80006f66:	f2 0b 19 00 	cp.h	r11,r9
80006f6a:	5f b9       	srhi	r9
80006f6c:	ec 08 01 0b 	sub	r11,r6,r8
80006f70:	f8 0b 18 00 	cp.b	r11,r12
80006f74:	5f 1b       	srne	r11
80006f76:	f7 e9 00 09 	and	r9,r11,r9
80006f7a:	f8 09 18 00 	cp.b	r9,r12
80006f7e:	cd a1       	brne	80006f32 <otg_interrupt+0xa6a>
80006f80:	c0 bb       	rjmp	80006d96 <otg_interrupt+0x8ce>
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80006f82:	30 39       	mov	r9,3
80006f84:	8d 09       	st.w	r6[0x0],r9
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80006f86:	fe 6a 05 00 	mov	r10,-129792
80006f8a:	74 09       	ld.w	r9,r10[0x0]
80006f8c:	e0 19 fc ff 	andl	r9,0xfcff
80006f90:	a9 a9       	sbr	r9,0x8
80006f92:	95 09       	st.w	r10[0x0],r9
	uhd_ack_in_received(0);
80006f94:	9d 08       	st.w	lr[0x0],r8
	uhd_ack_short_packet(0);
80006f96:	e0 69 00 80 	mov	r9,128
80006f9a:	9d 09       	st.w	lr[0x0],r9
	uhd_enable_in_received_interrupt(0);
80006f9c:	87 08       	st.w	r3[0x0],r8
	uhd_ack_fifocon(0);
80006f9e:	e0 69 40 00 	mov	r9,16384
80006fa2:	fe 68 06 20 	mov	r8,-129504
80006fa6:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
80006fa8:	91 04       	st.w	r8[0x0],r4
80006faa:	fe 9f fa 9d 	bral	800064e4 <otg_interrupt+0x1c>
	uint32_t error = uhd_error_status(pipe) &
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
80006fae:	fe f9 04 56 	ld.w	r9,pc[1110]
80006fb2:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
80006fb6:	fe 9f fc d7 	bral	80006964 <otg_interrupt+0x49c>
		}
		return;
	}
	if (Is_uhd_stall(0)) {
		// Stall Handshake received
		uhd_ack_stall(0);
80006fba:	34 09       	mov	r9,64
80006fbc:	fe 68 05 60 	mov	r8,-129696
		uhd_ctrl_request_end(UHD_TRANS_STALL);
80006fc0:	30 4c       	mov	r12,4
		}
		return;
	}
	if (Is_uhd_stall(0)) {
		// Stall Handshake received
		uhd_ack_stall(0);
80006fc2:	91 09       	st.w	r8[0x0],r9
80006fc4:	fe 9f fc d0 	bral	80006964 <otg_interrupt+0x49c>
80006fc8:	d5 03       	csrf	0x10
80006fca:	fe 9f fc 0e 	bral	800067e6 <otg_interrupt+0x31e>
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
80006fce:	fe 6a 00 00 	mov	r10,-131072
80006fd2:	f4 fb 04 1c 	ld.w	r11,r10[1052]
80006fd6:	b7 ab       	sbr	r11,0x16
80006fd8:	f5 4b 04 1c 	st.w	r10[1052],r11
80006fdc:	f4 fb 04 1c 	ld.w	r11,r10[1052]
80006fe0:	b7 cb       	cbr	r11,0x16
80006fe2:	f5 4b 04 1c 	st.w	r10[1052],r11

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80006fe6:	fe 6a 05 18 	mov	r10,-129768
80006fea:	74 0b       	ld.w	r11,r10[0x0]
80006fec:	ab ab       	sbr	r11,0xa
80006fee:	95 0b       	st.w	r10[0x0],r11
	uhd_enable_stall_interrupt(pipe);
80006ff0:	34 0c       	mov	r12,64
80006ff2:	fe 6b 06 08 	mov	r11,-129528
80006ff6:	97 0c       	st.w	r11[0x0],r12
	uhd_enable_pipe_error_interrupt(pipe);
80006ff8:	30 8c       	mov	r12,8
80006ffa:	97 0c       	st.w	r11[0x0],r12

	uhd_disable_out_ready_interrupt(pipe);
80006ffc:	fe 6b 06 38 	mov	r11,-129480
80007000:	30 2c       	mov	r12,2
80007002:	97 0c       	st.w	r11[0x0],r12
	uhd_pipe_dma_set_control(pipe, 0);
80007004:	fe 6b 07 60 	mov	r11,-129184
80007008:	97 28       	st.w	r11[0x8],r8
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
	if (ptr_job->busy == false) {
8000700a:	73 9b       	ld.w	r11,r9[0x64]
8000700c:	58 0b       	cp.w	r11,0
8000700e:	fe 94 fd 13 	brge	80006a34 <otg_interrupt+0x56c>
		return; // No job running
	}
	ptr_job->busy = false;
80007012:	f7 d8 d3 e1 	bfins	r11,r8,0x1f,0x1
80007016:	f3 4b 00 64 	st.w	r9[100],r11
	if (NULL == ptr_job->call_end) {
8000701a:	73 d8       	ld.w	r8,r9[0x74]
8000701c:	58 08       	cp.w	r8,0
8000701e:	fe 90 fd 0b 	breq	80006a34 <otg_interrupt+0x56c>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80007022:	74 0b       	ld.w	r11,r10[0x0]
80007024:	74 0c       	ld.w	r12,r10[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80007026:	f5 db c2 04 	bfextu	r10,r11,0x10,0x4
8000702a:	f9 dc c1 02 	bfextu	r12,r12,0x8,0x2
8000702e:	e0 6b 00 80 	mov	r11,128
80007032:	58 1c       	cp.w	r12,1
80007034:	f9 bb 01 00 	movne	r11,0
80007038:	14 4b       	or	r11,r10
8000703a:	fe 6a 04 28 	mov	r10,-130008
8000703e:	73 c9       	ld.w	r9,r9[0x70]
80007040:	74 0c       	ld.w	r12,r10[0x0]
80007042:	30 7a       	mov	r10,7
80007044:	f9 dc c2 07 	bfextu	r12,r12,0x10,0x7
80007048:	5d 18       	icall	r8
8000704a:	fe 9f fc f5 	bral	80006a34 <otg_interrupt+0x56c>
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
8000704e:	30 38       	mov	r8,3
80007050:	8d 08       	st.w	r6[0x0],r8
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80007052:	fe 69 05 00 	mov	r9,-129792
80007056:	72 08       	ld.w	r8,r9[0x0]
80007058:	e0 18 fc ff 	andl	r8,0xfcff
8000705c:	a9 a8       	sbr	r8,0x8
8000705e:	93 08       	st.w	r9[0x0],r8
	uhd_ack_in_received(0);
80007060:	fe 69 05 60 	mov	r9,-129696
80007064:	30 18       	mov	r8,1
80007066:	93 08       	st.w	r9[0x0],r8
	uhd_ack_short_packet(0);
80007068:	e0 6a 00 80 	mov	r10,128
8000706c:	93 0a       	st.w	r9[0x0],r10
	uhd_enable_in_received_interrupt(0);
8000706e:	fe 69 05 f0 	mov	r9,-129552
80007072:	93 08       	st.w	r9[0x0],r8
80007074:	c9 5a       	rjmp	80006d9e <otg_interrupt+0x8d6>
		// thus the data load can restart.
		goto uhd_ctrl_receiv_in_read_data;
	}

	// Test short packet
	if ((uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength)
80007076:	15 f9       	ld.ub	r9,r10[0x7]
80007078:	f5 38 00 08 	ld.ub	r8,r10[8]
8000707c:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80007080:	e0 69 0c 78 	mov	r9,3192
80007084:	92 09       	ld.sh	r9,r9[0x0]
80007086:	f0 09 19 00 	cp.h	r9,r8
8000708a:	fe 90 fe d9 	breq	80006e3c <otg_interrupt+0x974>
8000708e:	40 08       	lddsp	r8,sp[0x0]
80007090:	ed b8 00 07 	bld	r8,0x7
80007094:	fe 90 fe d4 	breq	80006e3c <otg_interrupt+0x974>
		uhd_ctrl_phase_zlp_out();
		return;
	}

	// Send a new IN packet request
	uhd_enable_in_received_interrupt(0);
80007098:	30 19       	mov	r9,1
8000709a:	fe 68 05 f0 	mov	r8,-129552
8000709e:	91 09       	st.w	r8[0x0],r9
800070a0:	c7 fa       	rjmp	80006d9e <otg_interrupt+0x8d6>
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
800070a2:	30 39       	mov	r9,3
800070a4:	8d 09       	st.w	r6[0x0],r9
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
800070a6:	fe 6a 05 00 	mov	r10,-129792
800070aa:	74 09       	ld.w	r9,r10[0x0]
800070ac:	e0 19 fc ff 	andl	r9,0xfcff
800070b0:	a9 a9       	sbr	r9,0x8
800070b2:	95 09       	st.w	r10[0x0],r9
	uhd_ack_in_received(0);
800070b4:	91 03       	st.w	r8[0x0],r3
	uhd_ack_short_packet(0);
800070b6:	e0 69 00 80 	mov	r9,128
800070ba:	91 09       	st.w	r8[0x0],r9
	uhd_enable_in_received_interrupt(0);
800070bc:	9d 03       	st.w	lr[0x0],r3
	uhd_ack_fifocon(0);
800070be:	fe 68 06 20 	mov	r8,-129504
800070c2:	e0 69 40 00 	mov	r9,16384
800070c6:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
800070c8:	91 0b       	st.w	r8[0x0],r11
800070ca:	fe 9f fa 0d 	bral	800064e4 <otg_interrupt+0x1c>
	// Manage the timeout on endpoint control transfer
	if (uhd_ctrl_request_timeout) {
		// Setup request on-going
		if (--uhd_ctrl_request_timeout == 0) {
			// Stop request
			uhd_freeze_pipe(0);
800070ce:	e2 69 00 00 	mov	r9,131072
800070d2:	fe 68 05 f0 	mov	r8,-129552
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
800070d6:	30 7c       	mov	r12,7
	// Manage the timeout on endpoint control transfer
	if (uhd_ctrl_request_timeout) {
		// Setup request on-going
		if (--uhd_ctrl_request_timeout == 0) {
			// Stop request
			uhd_freeze_pipe(0);
800070d8:	91 09       	st.w	r8[0x0],r9
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
800070da:	fe b0 f3 0b 	rcall	800056f0 <uhd_ctrl_request_end>
800070de:	fe 9f fc 53 	bral	80006984 <otg_interrupt+0x4bc>
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
800070e2:	fe 69 00 00 	mov	r9,-131072
800070e6:	f2 fa 04 1c 	ld.w	r10,r9[1052]
800070ea:	b1 ba       	sbr	r10,0x11
800070ec:	f3 4a 04 1c 	st.w	r9[1052],r10
800070f0:	f2 fa 04 1c 	ld.w	r10,r9[1052]
800070f4:	b1 da       	cbr	r10,0x11
800070f6:	f3 4a 04 1c 	st.w	r9[1052],r10

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
800070fa:	fe 69 05 04 	mov	r9,-129788
800070fe:	72 0a       	ld.w	r10,r9[0x0]
80007100:	ab aa       	sbr	r10,0xa
80007102:	93 0a       	st.w	r9[0x0],r10
	uhd_enable_stall_interrupt(pipe);
80007104:	34 0b       	mov	r11,64
80007106:	fe 6a 05 f4 	mov	r10,-129548
8000710a:	95 0b       	st.w	r10[0x0],r11
	uhd_enable_pipe_error_interrupt(pipe);
8000710c:	30 8b       	mov	r11,8
8000710e:	95 0b       	st.w	r10[0x0],r11

	uhd_disable_out_ready_interrupt(pipe);
80007110:	fe 6a 06 24 	mov	r10,-129500
80007114:	30 2b       	mov	r11,2
80007116:	95 0b       	st.w	r10[0x0],r11
	uhd_pipe_dma_set_control(pipe, 0);
80007118:	fe 6a 07 10 	mov	r10,-129264
8000711c:	95 28       	st.w	r10[0x8],r8
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
	if (ptr_job->busy == false) {
8000711e:	6e 0a       	ld.w	r10,r7[0x0]
80007120:	58 0a       	cp.w	r10,0
80007122:	fe 94 fc 3e 	brge	8000699e <otg_interrupt+0x4d6>
		return; // No job running
	}
	ptr_job->busy = false;
80007126:	f5 d8 d3 e1 	bfins	r10,r8,0x1f,0x1
8000712a:	8f 0a       	st.w	r7[0x0],r10
	if (NULL == ptr_job->call_end) {
8000712c:	6e 48       	ld.w	r8,r7[0x10]
8000712e:	58 08       	cp.w	r8,0
80007130:	fe 90 fc 37 	breq	8000699e <otg_interrupt+0x4d6>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80007134:	72 0a       	ld.w	r10,r9[0x0]
80007136:	72 0b       	ld.w	r11,r9[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80007138:	f3 da c2 04 	bfextu	r9,r10,0x10,0x4
8000713c:	f7 db c1 02 	bfextu	r11,r11,0x8,0x2
80007140:	e0 6a 00 80 	mov	r10,128
80007144:	58 1b       	cp.w	r11,1
80007146:	f4 0b 17 00 	moveq	r11,r10
8000714a:	f9 bb 01 00 	movne	r11,0
8000714e:	12 4b       	or	r11,r9
80007150:	fe 69 04 24 	mov	r9,-130012
80007154:	30 7a       	mov	r10,7
80007156:	72 0c       	ld.w	r12,r9[0x0]
80007158:	6e 39       	ld.w	r9,r7[0xc]
8000715a:	f9 dc c1 07 	bfextu	r12,r12,0x8,0x7
8000715e:	5d 18       	icall	r8
80007160:	fe 9f fc 1f 	bral	8000699e <otg_interrupt+0x4d6>
		return;
	}

	// Manage Vbus error
	if (Is_uhd_vbus_error_interrupt()) {
		uhd_ack_vbus_error_interrupt();
80007164:	30 89       	mov	r9,8
80007166:	fe 68 08 08 	mov	r8,-129016
8000716a:	91 09       	st.w	r8[0x0],r9
		UHC_VBUS_ERROR();
8000716c:	fe b0 df ad 	rcall	800030c6 <ui_host_vbus_error>
80007170:	fe 9f f9 ba 	bral	800064e4 <otg_interrupt+0x1c>
		uhd_resume_start = 0;
		uhc_notify_connection(false);
		return;
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
		uhd_ack_connection();
80007174:	fe 68 04 08 	mov	r8,-130040
80007178:	30 17       	mov	r7,1
8000717a:	91 07       	st.w	r8[0x0],r7
		uhd_disable_connection_int();
8000717c:	fe 68 04 14 	mov	r8,-130028
		uhd_enable_disconnection_int();
80007180:	30 29       	mov	r9,2
		uhc_notify_connection(false);
		return;
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
		uhd_ack_connection();
		uhd_disable_connection_int();
80007182:	91 07       	st.w	r8[0x0],r7
		uhd_enable_disconnection_int();
80007184:	fe 68 04 18 	mov	r8,-130024
80007188:	91 09       	st.w	r8[0x0],r9
		uhd_enable_sof();
8000718a:	fe 69 04 00 	mov	r9,-130048
8000718e:	72 08       	ld.w	r8,r9[0x0]
80007190:	a9 a8       	sbr	r8,0x8
		uhd_sleep_mode(UHD_STATE_IDLE);
80007192:	30 5c       	mov	r12,5
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
		uhd_ack_connection();
		uhd_disable_connection_int();
		uhd_enable_disconnection_int();
		uhd_enable_sof();
80007194:	93 08       	st.w	r9[0x0],r8
		uhd_sleep_mode(UHD_STATE_IDLE);
80007196:	fe b0 f1 3f 	rcall	80005414 <uhd_sleep_mode>
		uhd_suspend_start = 0;
8000719a:	e0 69 0b 14 	mov	r9,2836
8000719e:	30 08       	mov	r8,0
800071a0:	b2 88       	st.b	r9[0x0],r8
		uhd_resume_start = 0;
800071a2:	e0 69 0b 16 	mov	r9,2838
		uhc_notify_connection(true);
800071a6:	0e 9c       	mov	r12,r7
		uhd_disable_connection_int();
		uhd_enable_disconnection_int();
		uhd_enable_sof();
		uhd_sleep_mode(UHD_STATE_IDLE);
		uhd_suspend_start = 0;
		uhd_resume_start = 0;
800071a8:	b2 88       	st.b	r9[0x0],r8
		uhc_notify_connection(true);
800071aa:	e0 a0 0a 3b 	rcall	80008620 <uhc_notify_connection>
800071ae:	fe 9f f9 9b 	bral	800064e4 <otg_interrupt+0x1c>
		return;
	}

	// Manage dis/connection event
	if (Is_uhd_disconnection() && Is_uhd_disconnection_int_enabled()) {
		uhd_ack_disconnection();
800071b2:	fe 6a 04 08 	mov	r10,-130040
800071b6:	30 29       	mov	r9,2
800071b8:	95 09       	st.w	r10[0x0],r9
		uhd_disable_disconnection_int();
800071ba:	fe 6a 04 14 	mov	r10,-130028
800071be:	95 09       	st.w	r10[0x0],r9
		// Stop reset signal, in case of disconnection during reset
		uhd_stop_reset();
800071c0:	fe 6a 04 00 	mov	r10,-130048
800071c4:	74 09       	ld.w	r9,r10[0x0]
800071c6:	a9 d9       	cbr	r9,0x9
800071c8:	95 09       	st.w	r10[0x0],r9
		// Disable wakeup/resumes interrupts,
		// in case of disconnection during suspend mode
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
800071ca:	35 89       	mov	r9,88
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
800071cc:	30 3c       	mov	r12,3
		uhd_disable_disconnection_int();
		// Stop reset signal, in case of disconnection during reset
		uhd_stop_reset();
		// Disable wakeup/resumes interrupts,
		// in case of disconnection during suspend mode
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
800071ce:	f1 49 04 14 	st.w	r8[1044],r9
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
800071d2:	fe b0 f1 21 	rcall	80005414 <uhd_sleep_mode>
		uhd_enable_connection_int();
800071d6:	fe 68 04 18 	mov	r8,-130024
800071da:	30 19       	mov	r9,1
800071dc:	91 09       	st.w	r8[0x0],r9
		uhd_suspend_start = 0;
800071de:	e0 68 0b 14 	mov	r8,2836
800071e2:	b0 87       	st.b	r8[0x0],r7
		uhd_resume_start = 0;
800071e4:	e0 68 0b 16 	mov	r8,2838
		uhc_notify_connection(false);
800071e8:	0e 9c       	mov	r12,r7
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
		uhd_enable_connection_int();
		uhd_suspend_start = 0;
		uhd_resume_start = 0;
800071ea:	b0 87       	st.b	r8[0x0],r7
		uhc_notify_connection(false);
800071ec:	e0 a0 0a 1a 	rcall	80008620 <uhc_notify_connection>
800071f0:	fe 9f f9 7a 	bral	800064e4 <otg_interrupt+0x1c>

	// Manage Vbus state change
	if (Is_otg_vbus_transition()) {
		otg_ack_vbus_transition();
		if (Is_otg_vbus_high()) {
			uhd_sleep_mode(UHD_STATE_DISCONNECT);
800071f4:	30 3c       	mov	r12,3
800071f6:	fe b0 f1 0f 	rcall	80005414 <uhd_sleep_mode>
			UHC_VBUS_CHANGE(true);
800071fa:	30 1c       	mov	r12,1
800071fc:	fe b0 df 64 	rcall	800030c4 <ui_host_vbus_change>
80007200:	fe 9f f9 72 	bral	800064e4 <otg_interrupt+0x1c>
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
80007204:	fe 6a 00 00 	mov	r10,-131072
80007208:	f4 fb 04 1c 	ld.w	r11,r10[1052]
8000720c:	b3 ab       	sbr	r11,0x12
8000720e:	f5 4b 04 1c 	st.w	r10[1052],r11
80007212:	f4 fb 04 1c 	ld.w	r11,r10[1052]
80007216:	b3 cb       	cbr	r11,0x12
80007218:	f5 4b 04 1c 	st.w	r10[1052],r11

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
8000721c:	fe 6a 05 08 	mov	r10,-129784
80007220:	74 0b       	ld.w	r11,r10[0x0]
80007222:	ab ab       	sbr	r11,0xa
80007224:	95 0b       	st.w	r10[0x0],r11
	uhd_enable_stall_interrupt(pipe);
80007226:	34 0c       	mov	r12,64
80007228:	fe 6b 05 f8 	mov	r11,-129544
8000722c:	97 0c       	st.w	r11[0x0],r12
	uhd_enable_pipe_error_interrupt(pipe);
8000722e:	30 8c       	mov	r12,8
80007230:	97 0c       	st.w	r11[0x0],r12

	uhd_disable_out_ready_interrupt(pipe);
80007232:	fe 6b 06 28 	mov	r11,-129496
80007236:	30 2c       	mov	r12,2
80007238:	97 0c       	st.w	r11[0x0],r12
	uhd_pipe_dma_set_control(pipe, 0);
8000723a:	fe 6b 07 20 	mov	r11,-129248
8000723e:	97 28       	st.w	r11[0x8],r8
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
	if (ptr_job->busy == false) {
80007240:	72 5b       	ld.w	r11,r9[0x14]
80007242:	58 0b       	cp.w	r11,0
80007244:	fe 94 fb bc 	brge	800069bc <otg_interrupt+0x4f4>
		return; // No job running
	}
	ptr_job->busy = false;
80007248:	f7 d8 d3 e1 	bfins	r11,r8,0x1f,0x1
8000724c:	93 5b       	st.w	r9[0x14],r11
	if (NULL == ptr_job->call_end) {
8000724e:	72 98       	ld.w	r8,r9[0x24]
80007250:	58 08       	cp.w	r8,0
80007252:	fe 90 fb b5 	breq	800069bc <otg_interrupt+0x4f4>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80007256:	74 0b       	ld.w	r11,r10[0x0]
80007258:	74 0c       	ld.w	r12,r10[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
8000725a:	f5 db c2 04 	bfextu	r10,r11,0x10,0x4
8000725e:	f9 dc c1 02 	bfextu	r12,r12,0x8,0x2
80007262:	e0 6b 00 80 	mov	r11,128
80007266:	58 1c       	cp.w	r12,1
80007268:	f9 bb 01 00 	movne	r11,0
8000726c:	14 4b       	or	r11,r10
8000726e:	fe 6a 04 24 	mov	r10,-130012
80007272:	72 89       	ld.w	r9,r9[0x20]
80007274:	74 0c       	ld.w	r12,r10[0x0]
80007276:	30 7a       	mov	r10,7
80007278:	f9 dc c2 07 	bfextu	r12,r12,0x10,0x7
8000727c:	5d 18       	icall	r8
8000727e:	fe 9f fb 9f 	bral	800069bc <otg_interrupt+0x4f4>
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
80007282:	fe 6a 00 00 	mov	r10,-131072
80007286:	f4 fb 04 1c 	ld.w	r11,r10[1052]
8000728a:	b3 bb       	sbr	r11,0x13
8000728c:	f5 4b 04 1c 	st.w	r10[1052],r11
80007290:	f4 fb 04 1c 	ld.w	r11,r10[1052]
80007294:	b3 db       	cbr	r11,0x13
80007296:	f5 4b 04 1c 	st.w	r10[1052],r11

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
8000729a:	fe 6a 05 0c 	mov	r10,-129780
8000729e:	74 0b       	ld.w	r11,r10[0x0]
800072a0:	ab ab       	sbr	r11,0xa
800072a2:	95 0b       	st.w	r10[0x0],r11
	uhd_enable_stall_interrupt(pipe);
800072a4:	34 0c       	mov	r12,64
800072a6:	fe 6b 05 fc 	mov	r11,-129540
800072aa:	97 0c       	st.w	r11[0x0],r12
	uhd_enable_pipe_error_interrupt(pipe);
800072ac:	30 8c       	mov	r12,8
800072ae:	97 0c       	st.w	r11[0x0],r12

	uhd_disable_out_ready_interrupt(pipe);
800072b0:	fe 6b 06 2c 	mov	r11,-129492
800072b4:	30 2c       	mov	r12,2
800072b6:	97 0c       	st.w	r11[0x0],r12
	uhd_pipe_dma_set_control(pipe, 0);
800072b8:	fe 6b 07 30 	mov	r11,-129232
800072bc:	97 28       	st.w	r11[0x8],r8
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
	if (ptr_job->busy == false) {
800072be:	72 ab       	ld.w	r11,r9[0x28]
800072c0:	58 0b       	cp.w	r11,0
800072c2:	fe 94 fb 8c 	brge	800069da <otg_interrupt+0x512>
		return; // No job running
	}
	ptr_job->busy = false;
800072c6:	f7 d8 d3 e1 	bfins	r11,r8,0x1f,0x1
800072ca:	93 ab       	st.w	r9[0x28],r11
	if (NULL == ptr_job->call_end) {
800072cc:	72 e8       	ld.w	r8,r9[0x38]
800072ce:	58 08       	cp.w	r8,0
800072d0:	fe 90 fb 85 	breq	800069da <otg_interrupt+0x512>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
800072d4:	74 0b       	ld.w	r11,r10[0x0]
800072d6:	74 0c       	ld.w	r12,r10[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
800072d8:	f5 db c2 04 	bfextu	r10,r11,0x10,0x4
800072dc:	f9 dc c1 02 	bfextu	r12,r12,0x8,0x2
800072e0:	e0 6b 00 80 	mov	r11,128
800072e4:	58 1c       	cp.w	r12,1
800072e6:	f9 bb 01 00 	movne	r11,0
800072ea:	14 4b       	or	r11,r10
800072ec:	fe 6a 04 24 	mov	r10,-130012
800072f0:	72 d9       	ld.w	r9,r9[0x34]
800072f2:	74 0c       	ld.w	r12,r10[0x0]
800072f4:	30 7a       	mov	r10,7
800072f6:	f9 dc c3 07 	bfextu	r12,r12,0x18,0x7
800072fa:	5d 18       	icall	r8
800072fc:	fe 9f fb 6f 	bral	800069da <otg_interrupt+0x512>
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
80007300:	fe 6a 00 00 	mov	r10,-131072
80007304:	f4 fb 04 1c 	ld.w	r11,r10[1052]
80007308:	b5 ab       	sbr	r11,0x14
8000730a:	f5 4b 04 1c 	st.w	r10[1052],r11
8000730e:	f4 fb 04 1c 	ld.w	r11,r10[1052]
80007312:	b5 cb       	cbr	r11,0x14
80007314:	f5 4b 04 1c 	st.w	r10[1052],r11

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80007318:	fe 6a 05 10 	mov	r10,-129776
8000731c:	74 0b       	ld.w	r11,r10[0x0]
8000731e:	ab ab       	sbr	r11,0xa
80007320:	95 0b       	st.w	r10[0x0],r11
	uhd_enable_stall_interrupt(pipe);
80007322:	34 0c       	mov	r12,64
80007324:	fe 6b 06 00 	mov	r11,-129536
80007328:	97 0c       	st.w	r11[0x0],r12
	uhd_enable_pipe_error_interrupt(pipe);
8000732a:	30 8c       	mov	r12,8
8000732c:	97 0c       	st.w	r11[0x0],r12

	uhd_disable_out_ready_interrupt(pipe);
8000732e:	fe 6b 06 30 	mov	r11,-129488
80007332:	30 2c       	mov	r12,2
80007334:	97 0c       	st.w	r11[0x0],r12
	uhd_pipe_dma_set_control(pipe, 0);
80007336:	fe 6b 07 40 	mov	r11,-129216
8000733a:	97 28       	st.w	r11[0x8],r8
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
	if (ptr_job->busy == false) {
8000733c:	72 fb       	ld.w	r11,r9[0x3c]
8000733e:	58 0b       	cp.w	r11,0
80007340:	fe 94 fb 5c 	brge	800069f8 <otg_interrupt+0x530>
		return; // No job running
	}
	ptr_job->busy = false;
80007344:	f7 d8 d3 e1 	bfins	r11,r8,0x1f,0x1
80007348:	93 fb       	st.w	r9[0x3c],r11
	if (NULL == ptr_job->call_end) {
8000734a:	73 38       	ld.w	r8,r9[0x4c]
8000734c:	58 08       	cp.w	r8,0
8000734e:	fe 90 fb 55 	breq	800069f8 <otg_interrupt+0x530>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80007352:	74 0b       	ld.w	r11,r10[0x0]
80007354:	74 0c       	ld.w	r12,r10[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80007356:	f5 db c2 04 	bfextu	r10,r11,0x10,0x4
8000735a:	f9 dc c1 02 	bfextu	r12,r12,0x8,0x2
8000735e:	e0 6b 00 80 	mov	r11,128
80007362:	58 1c       	cp.w	r12,1
80007364:	f9 bb 01 00 	movne	r11,0
80007368:	14 4b       	or	r11,r10
8000736a:	fe 6a 04 28 	mov	r10,-130008
8000736e:	73 29       	ld.w	r9,r9[0x48]
80007370:	74 0c       	ld.w	r12,r10[0x0]
80007372:	30 7a       	mov	r10,7
80007374:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80007378:	5d 18       	icall	r8
8000737a:	fe 9f fb 3f 	bral	800069f8 <otg_interrupt+0x530>
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
8000737e:	fe 6a 00 00 	mov	r10,-131072
80007382:	f4 fb 04 1c 	ld.w	r11,r10[1052]
80007386:	b5 bb       	sbr	r11,0x15
80007388:	f5 4b 04 1c 	st.w	r10[1052],r11
8000738c:	f4 fb 04 1c 	ld.w	r11,r10[1052]
80007390:	b5 db       	cbr	r11,0x15
80007392:	f5 4b 04 1c 	st.w	r10[1052],r11

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80007396:	fe 6a 05 14 	mov	r10,-129772
8000739a:	74 0b       	ld.w	r11,r10[0x0]
8000739c:	ab ab       	sbr	r11,0xa
8000739e:	95 0b       	st.w	r10[0x0],r11
	uhd_enable_stall_interrupt(pipe);
800073a0:	34 0c       	mov	r12,64
800073a2:	fe 6b 06 04 	mov	r11,-129532
800073a6:	97 0c       	st.w	r11[0x0],r12
	uhd_enable_pipe_error_interrupt(pipe);
800073a8:	30 8c       	mov	r12,8
800073aa:	97 0c       	st.w	r11[0x0],r12

	uhd_disable_out_ready_interrupt(pipe);
800073ac:	fe 6b 06 34 	mov	r11,-129484
800073b0:	30 2c       	mov	r12,2
800073b2:	97 0c       	st.w	r11[0x0],r12
	uhd_pipe_dma_set_control(pipe, 0);
800073b4:	fe 6b 07 50 	mov	r11,-129200
800073b8:	97 28       	st.w	r11[0x8],r8
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
	if (ptr_job->busy == false) {
800073ba:	73 4b       	ld.w	r11,r9[0x50]
800073bc:	58 0b       	cp.w	r11,0
800073be:	fe 94 fb 2c 	brge	80006a16 <otg_interrupt+0x54e>
		return; // No job running
	}
	ptr_job->busy = false;
800073c2:	f7 d8 d3 e1 	bfins	r11,r8,0x1f,0x1
800073c6:	f3 4b 00 50 	st.w	r9[80],r11
	if (NULL == ptr_job->call_end) {
800073ca:	73 88       	ld.w	r8,r9[0x60]
800073cc:	58 08       	cp.w	r8,0
800073ce:	fe 90 fb 24 	breq	80006a16 <otg_interrupt+0x54e>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
800073d2:	74 0b       	ld.w	r11,r10[0x0]
800073d4:	74 0c       	ld.w	r12,r10[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
800073d6:	f5 db c2 04 	bfextu	r10,r11,0x10,0x4
800073da:	f9 dc c1 02 	bfextu	r12,r12,0x8,0x2
800073de:	e0 6b 00 80 	mov	r11,128
800073e2:	58 1c       	cp.w	r12,1
800073e4:	f9 bb 01 00 	movne	r11,0
800073e8:	14 4b       	or	r11,r10
800073ea:	fe 6a 04 28 	mov	r10,-130008
800073ee:	73 79       	ld.w	r9,r9[0x5c]
800073f0:	74 0c       	ld.w	r12,r10[0x0]
800073f2:	30 7a       	mov	r10,7
800073f4:	f9 dc c1 07 	bfextu	r12,r12,0x8,0x7
800073f8:	5d 18       	icall	r8
800073fa:	fe 9f fb 0e 	bral	80006a16 <otg_interrupt+0x54e>
800073fe:	d7 03       	nop
80007400:	80 00       	ld.sh	r0,r0[0x0]
80007402:	f7 8c       	*unknown*
80007404:	80 00       	ld.sh	r0,r0[0x0]
80007406:	f7 74 e0 7d 	stcond	r11[-8067],r4

80007408 <_stext>:
80007408:	e0 7d 00 00 	mov	sp,65536
8000740c:	fe c0 80 0c 	sub	r0,pc,-32756
80007410:	e3 b0 00 01 	mtsr	0x4,r0
80007414:	d5 53       	csrf	0x15
80007416:	30 80       	mov	r0,8
80007418:	e0 61 08 d0 	mov	r1,2256
8000741c:	02 30       	cp.w	r0,r1
8000741e:	c0 62       	brcc	8000742a <idata_load_loop_end>
80007420:	48 92       	lddpc	r2,80007444 <udata_clear_loop_end+0x4>

80007422 <idata_load_loop>:
80007422:	a5 05       	ld.d	r4,r2++
80007424:	a1 24       	st.d	r0++,r4
80007426:	02 30       	cp.w	r0,r1
80007428:	cf d3       	brcs	80007422 <idata_load_loop>

8000742a <idata_load_loop_end>:
8000742a:	e0 60 08 d0 	mov	r0,2256
8000742e:	e0 61 0c c8 	mov	r1,3272
80007432:	02 30       	cp.w	r0,r1
80007434:	c0 62       	brcc	80007440 <udata_clear_loop_end>
80007436:	30 02       	mov	r2,0
80007438:	30 03       	mov	r3,0

8000743a <udata_clear_loop>:
8000743a:	a1 22       	st.d	r0++,r2
8000743c:	02 30       	cp.w	r0,r1
8000743e:	cf e3       	brcs	8000743a <udata_clear_loop>

80007440 <udata_clear_loop_end>:
80007440:	fe cf dd cc 	sub	pc,pc,-8756
80007444:	80 00       	ld.sh	r0,r0[0x0]
80007446:	fd a8       	*unknown*

80007448 <sysclk_priv_disable_module>:
80007448:	e1 ba 00 00 	mfsr	r10,0x0
8000744c:	d3 03       	ssrf	0x10
8000744e:	fe 78 0c 00 	mov	r8,-62464
80007452:	71 59       	ld.w	r9,r8[0x54]
80007454:	e2 19 00 40 	andl	r9,0x40,COH
80007458:	cf d0       	breq	80007452 <sysclk_priv_disable_module+0xa>
8000745a:	a3 6c       	lsl	r12,0x2
8000745c:	e0 2c f3 f8 	sub	r12,62456
80007460:	78 09       	ld.w	r9,r12[0x0]
80007462:	30 18       	mov	r8,1
80007464:	f0 0b 09 48 	lsl	r8,r8,r11
80007468:	5c d8       	com	r8
8000746a:	12 68       	and	r8,r9
8000746c:	99 08       	st.w	r12[0x0],r8
8000746e:	14 98       	mov	r8,r10
80007470:	e6 18 00 01 	andh	r8,0x1,COH
80007474:	c0 21       	brne	80007478 <sysclk_priv_disable_module+0x30>
80007476:	d5 03       	csrf	0x10
80007478:	5e fc       	retal	r12
8000747a:	d7 03       	nop

8000747c <sysclk_disable_pbb_module>:
8000747c:	eb cd 40 80 	pushm	r7,lr
80007480:	18 9b       	mov	r11,r12
80007482:	30 3c       	mov	r12,3
80007484:	f0 1f 00 0b 	mcall	800074b0 <sysclk_disable_pbb_module+0x34>
80007488:	e1 b7 00 00 	mfsr	r7,0x0
8000748c:	d3 03       	ssrf	0x10
8000748e:	48 a9       	lddpc	r9,800074b4 <sysclk_disable_pbb_module+0x38>
80007490:	13 88       	ld.ub	r8,r9[0x0]
80007492:	20 18       	sub	r8,1
80007494:	5c 58       	castu.b	r8
80007496:	b2 88       	st.b	r9[0x0],r8
80007498:	c0 51       	brne	800074a2 <sysclk_disable_pbb_module+0x26>
8000749a:	30 2b       	mov	r11,2
8000749c:	30 1c       	mov	r12,1
8000749e:	f0 1f 00 05 	mcall	800074b0 <sysclk_disable_pbb_module+0x34>
800074a2:	e6 17 00 01 	andh	r7,0x1,COH
800074a6:	c0 21       	brne	800074aa <sysclk_disable_pbb_module+0x2e>
800074a8:	d5 03       	csrf	0x10
800074aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800074ae:	00 00       	add	r0,r0
800074b0:	80 00       	ld.sh	r0,r0[0x0]
800074b2:	74 48       	ld.w	r8,r10[0x10]
800074b4:	00 00       	add	r0,r0
800074b6:	0b 1d       	ld.sh	sp,r5++

800074b8 <sysclk_disable_usb>:
800074b8:	d4 01       	pushm	lr
800074ba:	30 09       	mov	r9,0
800074bc:	fe 78 0c 00 	mov	r8,-62464
800074c0:	f1 49 00 70 	st.w	r8[112],r9
800074c4:	30 3b       	mov	r11,3
800074c6:	30 1c       	mov	r12,1
800074c8:	f0 1f 00 03 	mcall	800074d4 <sysclk_disable_usb+0x1c>
800074cc:	30 1c       	mov	r12,1
800074ce:	f0 1f 00 03 	mcall	800074d8 <sysclk_disable_usb+0x20>
800074d2:	d8 02       	popm	pc
800074d4:	80 00       	ld.sh	r0,r0[0x0]
800074d6:	74 48       	ld.w	r8,r10[0x10]
800074d8:	80 00       	ld.sh	r0,r0[0x0]
800074da:	74 7c       	ld.w	r12,r10[0x1c]

800074dc <sysclk_priv_enable_module>:
800074dc:	e1 ba 00 00 	mfsr	r10,0x0
800074e0:	d3 03       	ssrf	0x10
800074e2:	fe 78 0c 00 	mov	r8,-62464
800074e6:	71 59       	ld.w	r9,r8[0x54]
800074e8:	e2 19 00 40 	andl	r9,0x40,COH
800074ec:	cf d0       	breq	800074e6 <sysclk_priv_enable_module+0xa>
800074ee:	a3 6c       	lsl	r12,0x2
800074f0:	e0 2c f3 f8 	sub	r12,62456
800074f4:	78 08       	ld.w	r8,r12[0x0]
800074f6:	30 19       	mov	r9,1
800074f8:	f2 0b 09 4b 	lsl	r11,r9,r11
800074fc:	10 4b       	or	r11,r8
800074fe:	99 0b       	st.w	r12[0x0],r11
80007500:	14 98       	mov	r8,r10
80007502:	e6 18 00 01 	andh	r8,0x1,COH
80007506:	c0 21       	brne	8000750a <sysclk_priv_enable_module+0x2e>
80007508:	d5 03       	csrf	0x10
8000750a:	5e fc       	retal	r12

8000750c <sysclk_enable_pbb_module>:
8000750c:	eb cd 40 c0 	pushm	r6-r7,lr
80007510:	18 97       	mov	r7,r12
80007512:	e1 b6 00 00 	mfsr	r6,0x0
80007516:	d3 03       	ssrf	0x10
80007518:	48 c8       	lddpc	r8,80007548 <sysclk_enable_pbb_module+0x3c>
8000751a:	11 89       	ld.ub	r9,r8[0x0]
8000751c:	30 08       	mov	r8,0
8000751e:	f0 09 18 00 	cp.b	r9,r8
80007522:	c0 51       	brne	8000752c <sysclk_enable_pbb_module+0x20>
80007524:	30 2b       	mov	r11,2
80007526:	30 1c       	mov	r12,1
80007528:	f0 1f 00 09 	mcall	8000754c <sysclk_enable_pbb_module+0x40>
8000752c:	48 78       	lddpc	r8,80007548 <sysclk_enable_pbb_module+0x3c>
8000752e:	11 89       	ld.ub	r9,r8[0x0]
80007530:	2f f9       	sub	r9,-1
80007532:	b0 89       	st.b	r8[0x0],r9
80007534:	e6 16 00 01 	andh	r6,0x1,COH
80007538:	c0 21       	brne	8000753c <sysclk_enable_pbb_module+0x30>
8000753a:	d5 03       	csrf	0x10
8000753c:	0e 9b       	mov	r11,r7
8000753e:	30 3c       	mov	r12,3
80007540:	f0 1f 00 03 	mcall	8000754c <sysclk_enable_pbb_module+0x40>
80007544:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007548:	00 00       	add	r0,r0
8000754a:	0b 1d       	ld.sh	sp,r5++
8000754c:	80 00       	ld.sh	r0,r0[0x0]
8000754e:	74 dc       	ld.w	r12,r10[0x34]

80007550 <sysclk_enable_usb>:
80007550:	d4 01       	pushm	lr
80007552:	30 1c       	mov	r12,1
80007554:	f0 1f 00 20 	mcall	800075d4 <sysclk_enable_usb+0x84>
80007558:	30 3b       	mov	r11,3
8000755a:	30 1c       	mov	r12,1
8000755c:	f0 1f 00 1f 	mcall	800075d8 <sysclk_enable_usb+0x88>
80007560:	fe 78 0c 00 	mov	r8,-62464
80007564:	71 58       	ld.w	r8,r8[0x54]
80007566:	e2 18 00 02 	andl	r8,0x2,COH
8000756a:	c2 f1       	brne	800075c8 <sysclk_enable_usb+0x78>
8000756c:	fe 78 0c 00 	mov	r8,-62464
80007570:	71 58       	ld.w	r8,r8[0x54]
80007572:	e2 18 00 80 	andl	r8,0x80,COH
80007576:	c1 71       	brne	800075a4 <sysclk_enable_usb+0x54>
80007578:	e1 b9 00 00 	mfsr	r9,0x0
8000757c:	d3 03       	ssrf	0x10
8000757e:	fe 78 0c 00 	mov	r8,-62464
80007582:	e0 6a 03 07 	mov	r10,775
80007586:	91 aa       	st.w	r8[0x28],r10
80007588:	70 0a       	ld.w	r10,r8[0x0]
8000758a:	a3 aa       	sbr	r10,0x2
8000758c:	91 0a       	st.w	r8[0x0],r10
8000758e:	12 98       	mov	r8,r9
80007590:	e6 18 00 01 	andh	r8,0x1,COH
80007594:	c0 21       	brne	80007598 <sysclk_enable_usb+0x48>
80007596:	d5 03       	csrf	0x10
80007598:	fe 79 0c 00 	mov	r9,-62464
8000759c:	73 58       	ld.w	r8,r9[0x54]
8000759e:	e2 18 00 80 	andl	r8,0x80,COH
800075a2:	cf d0       	breq	8000759c <sysclk_enable_usb+0x4c>
800075a4:	30 88       	mov	r8,8
800075a6:	a3 a8       	sbr	r8,0x2
800075a8:	31 09       	mov	r9,16
800075aa:	20 19       	sub	r9,1
800075ac:	b1 69       	lsl	r9,0x10
800075ae:	ea 19 3f 00 	orh	r9,0x3f00
800075b2:	e8 19 02 01 	orl	r9,0x201
800075b6:	f3 e8 10 08 	or	r8,r9,r8
800075ba:	fe 79 0c 00 	mov	r9,-62464
800075be:	93 98       	st.w	r9[0x24],r8
800075c0:	73 58       	ld.w	r8,r9[0x54]
800075c2:	e2 18 00 02 	andl	r8,0x2,COH
800075c6:	cf d0       	breq	800075c0 <sysclk_enable_usb+0x70>
800075c8:	30 79       	mov	r9,7
800075ca:	fe 78 0c 00 	mov	r8,-62464
800075ce:	f1 49 00 70 	st.w	r8[112],r9
800075d2:	d8 02       	popm	pc
800075d4:	80 00       	ld.sh	r0,r0[0x0]
800075d6:	75 0c       	ld.w	r12,r10[0x40]
800075d8:	80 00       	ld.sh	r0,r0[0x0]
800075da:	74 dc       	ld.w	r12,r10[0x34]

800075dc <sysclk_init>:
800075dc:	d4 01       	pushm	lr
800075de:	e1 b9 00 00 	mfsr	r9,0x0
800075e2:	d3 03       	ssrf	0x10
800075e4:	fe 78 0c 00 	mov	r8,-62464
800075e8:	e0 6a 03 07 	mov	r10,775
800075ec:	91 aa       	st.w	r8[0x28],r10
800075ee:	70 0a       	ld.w	r10,r8[0x0]
800075f0:	a3 aa       	sbr	r10,0x2
800075f2:	91 0a       	st.w	r8[0x0],r10
800075f4:	12 98       	mov	r8,r9
800075f6:	e6 18 00 01 	andh	r8,0x1,COH
800075fa:	c0 21       	brne	800075fe <sysclk_init+0x22>
800075fc:	d5 03       	csrf	0x10
800075fe:	fe 78 0c 00 	mov	r8,-62464
80007602:	71 59       	ld.w	r9,r8[0x54]
80007604:	e2 19 00 80 	andl	r9,0x80,COH
80007608:	cf d0       	breq	80007602 <sysclk_init+0x26>
8000760a:	e0 6c 1b 00 	mov	r12,6912
8000760e:	ea 1c 00 b7 	orh	r12,0xb7
80007612:	f0 1f 00 0a 	mcall	80007638 <sysclk_init+0x5c>
80007616:	e1 b9 00 00 	mfsr	r9,0x0
8000761a:	d3 03       	ssrf	0x10
8000761c:	fe 78 0c 00 	mov	r8,-62464
80007620:	70 0a       	ld.w	r10,r8[0x0]
80007622:	e0 1a ff fc 	andl	r10,0xfffc
80007626:	a1 aa       	sbr	r10,0x0
80007628:	91 0a       	st.w	r8[0x0],r10
8000762a:	12 98       	mov	r8,r9
8000762c:	e6 18 00 01 	andh	r8,0x1,COH
80007630:	c0 21       	brne	80007634 <sysclk_init+0x58>
80007632:	d5 03       	csrf	0x10
80007634:	d8 02       	popm	pc
80007636:	00 00       	add	r0,r0
80007638:	80 00       	ld.sh	r0,r0[0x0]
8000763a:	3d 74       	mov	r4,-41

8000763c <uhi_hid_mouse_uninstall>:
	UHI_HID_MOUSE_CHANGE(dev, true);
	initNoteStack();
}

void uhi_hid_mouse_uninstall(uhc_device_t* dev)
{
8000763c:	eb cd 40 c0 	pushm	r6-r7,lr
	if (uhi_hid_mouse_dev.dev != dev) 
80007640:	e0 68 0b 58 	mov	r8,2904
80007644:	70 07       	ld.w	r7,r8[0x0]
80007646:	18 37       	cp.w	r7,r12
80007648:	c0 30       	breq	8000764e <uhi_hid_mouse_uninstall+0x12>
8000764a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return; // Device not enabled in this interface

	uhi_hid_mouse_dev.dev = NULL;
8000764e:	70 2c       	ld.w	r12,r8[0x8]
80007650:	30 06       	mov	r6,0
	Assert(uhi_hid_mouse_dev.report!=NULL);
	free(uhi_hid_mouse_dev.report);
80007652:	91 06       	st.w	r8[0x0],r6
80007654:	e0 a0 11 ce 	rcall	800099f0 <free>
	UHI_HID_MOUSE_CHANGE(dev, false);
80007658:	0c 9b       	mov	r11,r6
8000765a:	0e 9c       	mov	r12,r7
8000765c:	fe b0 dd 52 	rcall	80003100 <ui_uhi_hid_mouse_change>
	initNoteStack();
80007660:	fe b0 e0 34 	rcall	800036c8 <initNoteStack>
80007664:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

80007668 <uhi_hid_mouse_enable>:
80007668:	eb cd 40 80 	pushm	r7,lr
8000766c:	e0 6e 0b 58 	mov	lr,2904
80007670:	7c 07       	ld.w	r7,lr[0x0]
80007672:	18 37       	cp.w	r7,r12
80007674:	c0 30       	breq	8000767a <uhi_hid_mouse_enable+0x12>
80007676:	e3 cd 80 80 	ldm	sp++,r7,pc
{
	if (uhi_hid_mouse_dev.dev != dev) 
		return;  // No interface to enable

	// Init value
	uhi_hid_mouse_dev.report_btn_prev = 0;
8000767a:	30 0c       	mov	r12,0
8000767c:	fd 6c 00 0c 	st.b	lr[12],r12
 * \param add   USB address to use
 */
static void uhi_hid_mouse_start_trans_report(usb_add_t add)
{
	// Start transfer on interrupt endpoint IN
	uhd_ep_run(add, uhi_hid_mouse_dev.ep_in, true, uhi_hid_mouse_dev.report,
80007680:	fe cc ff d4 	sub	r12,pc,-44
80007684:	1d cb       	ld.ub	r11,lr[0x4]
80007686:	1d d8       	ld.ub	r8,lr[0x5]
80007688:	7c 29       	ld.w	r9,lr[0x8]
8000768a:	1a dc       	st.w	--sp,r12
8000768c:	30 0c       	mov	r12,0
8000768e:	30 1a       	mov	r10,1
80007690:	1a dc       	st.w	--sp,r12
80007692:	ef 3c 00 12 	ld.ub	r12,r7[18]
		return;  // No interface to enable

	// Init value
	uhi_hid_mouse_dev.report_btn_prev = 0;
	uhi_hid_mouse_start_trans_report(dev->address);
	UHI_HID_MOUSE_CHANGE(dev, true);
80007696:	fe b0 f3 e3 	rcall	80005e5c <uhd_ep_run>
8000769a:	0e 9c       	mov	r12,r7
8000769c:	30 1b       	mov	r11,1
	initNoteStack();
8000769e:	fe b0 dd 31 	rcall	80003100 <ui_uhi_hid_mouse_change>
800076a2:	fe b0 e0 13 	rcall	800036c8 <initNoteStack>
800076a6:	2f ed       	sub	sp,-8
800076a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800076ac <uhi_hid_mouse_report_reception>:
800076ac:	eb cd 40 fc 	pushm	r2-r7,lr
800076b0:	58 7a       	cp.w	r10,7
800076b2:	5f 0b       	sreq	r11
800076b4:	58 5a       	cp.w	r10,5
800076b6:	5f 08       	sreq	r8
800076b8:	18 94       	mov	r4,r12
800076ba:	f7 e8 10 08 	or	r8,r11,r8
{
	uint8_t i;
	unsigned short val;
	UNUSED(ep);
	
	if ((status == UHD_TRANS_NOTRESPONDING) || (status == UHD_TRANS_TIMEOUT)) {
800076be:	30 0b       	mov	r11,0
800076c0:	f6 08 18 00 	cp.b	r8,r11
800076c4:	e0 81 01 ef 	brne	80007aa2 <uhi_hid_mouse_report_reception+0x3f6>
		uhi_hid_mouse_start_trans_report(add);
		return; // HID mouse transfer restart
	}

	if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
800076c8:	58 39       	cp.w	r9,3
800076ca:	5f 8b       	srls	r11
800076cc:	58 0a       	cp.w	r10,0
800076ce:	5f 19       	srne	r9
800076d0:	f7 e9 10 0a 	or	r10,r11,r9
800076d4:	f0 0a 18 00 	cp.b	r10,r8
800076d8:	e0 81 01 b7 	brne	80007a46 <uhi_hid_mouse_report_reception+0x39a>
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
800076dc:	e0 62 0c 8c 	mov	r2,3212
	if ((status == UHD_TRANS_NOTRESPONDING) || (status == UHD_TRANS_TIMEOUT)) {
		uhi_hid_mouse_start_trans_report(add);
		return; // HID mouse transfer restart
	}

	if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
800076e0:	e0 67 0b 58 	mov	r7,2904
800076e4:	6e 2b       	ld.w	r11,r7[0x8]
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
800076e6:	f6 cc ff fb 	sub	r12,r11,-5
800076ea:	04 3c       	cp.w	r12,r2
800076ec:	5f 35       	srlo	r5
800076ee:	f6 c9 ff ff 	sub	r9,r11,-1
800076f2:	e4 c8 ff fc 	sub	r8,r2,-4
800076f6:	10 39       	cp.w	r9,r8
800076f8:	5f b6       	srhi	r6
800076fa:	eb e6 10 06 	or	r6,r5,r6
800076fe:	eb d9 c0 02 	bfextu	r5,r9,0x0,0x2
80007702:	5f 05       	sreq	r5
80007704:	eb e6 00 06 	and	r6,r5,r6
80007708:	f4 06 18 00 	cp.b	r6,r10
8000770c:	e0 80 01 f4 	breq	80007af4 <uhi_hid_mouse_report_reception+0x448>
80007710:	72 09       	ld.w	r9,r9[0x0]
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
80007712:	12 9a       	mov	r10,r9
80007714:	ee 19 80 80 	eorh	r9,0x8080
80007718:	ec 19 80 80 	eorl	r9,0x8080
8000771c:	e4 1a 7f 7f 	andh	r10,0x7f7f
80007720:	e0 1a 7f 7f 	andl	r10,0x7f7f
80007724:	e4 19 80 80 	andh	r9,0x8080
80007728:	e0 19 80 80 	andl	r9,0x8080
8000772c:	14 49       	or	r9,r10
8000772e:	85 09       	st.w	r2[0x0],r9
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
80007730:	78 0a       	ld.w	r10,r12[0x0]
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
80007732:	14 99       	mov	r9,r10
80007734:	e4 1a 7f 7f 	andh	r10,0x7f7f
80007738:	e0 1a 7f 7f 	andl	r10,0x7f7f
8000773c:	ee 19 80 80 	eorh	r9,0x8080
80007740:	ec 19 80 80 	eorl	r9,0x8080
80007744:	e4 19 80 80 	andh	r9,0x8080
80007748:	e0 19 80 80 	andl	r9,0x8080
8000774c:	f5 e9 10 09 	or	r9,r10,r9
80007750:	10 a9       	st.w	r8++,r9
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
80007752:	f6 fa 00 09 	ld.w	r10,r11[9]
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
80007756:	14 99       	mov	r9,r10
80007758:	e4 1a 7f 7f 	andh	r10,0x7f7f
8000775c:	e0 1a 7f 7f 	andl	r10,0x7f7f
80007760:	ee 19 80 80 	eorh	r9,0x8080
80007764:	ec 19 80 80 	eorl	r9,0x8080
80007768:	e4 19 80 80 	andh	r9,0x8080
8000776c:	e0 19 80 80 	andl	r9,0x8080
80007770:	f5 e9 10 09 	or	r9,r10,r9
80007774:	10 a9       	st.w	r8++,r9
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
80007776:	f6 fa 00 0d 	ld.w	r10,r11[13]
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
8000777a:	14 99       	mov	r9,r10
8000777c:	e4 1a 7f 7f 	andh	r10,0x7f7f
80007780:	e0 1a 7f 7f 	andl	r10,0x7f7f
80007784:	ee 19 80 80 	eorh	r9,0x8080
80007788:	ec 19 80 80 	eorl	r9,0x8080
8000778c:	e4 19 80 80 	andh	r9,0x8080
80007790:	e0 19 80 80 	andl	r9,0x8080
80007794:	f5 e9 10 09 	or	r9,r10,r9
80007798:	10 a9       	st.w	r8++,r9
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
8000779a:	f6 fa 00 11 	ld.w	r10,r11[17]
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
8000779e:	14 99       	mov	r9,r10
800077a0:	e4 1a 7f 7f 	andh	r10,0x7f7f
800077a4:	e0 1a 7f 7f 	andl	r10,0x7f7f
800077a8:	ee 19 80 80 	eorh	r9,0x8080
800077ac:	ec 19 80 80 	eorl	r9,0x8080
800077b0:	e4 19 80 80 	andh	r9,0x8080
800077b4:	e0 19 80 80 	andl	r9,0x8080
800077b8:	f5 e9 10 09 	or	r9,r10,r9
800077bc:	10 a9       	st.w	r8++,r9
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
800077be:	f6 fa 00 15 	ld.w	r10,r11[21]
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
800077c2:	14 99       	mov	r9,r10
800077c4:	e4 1a 7f 7f 	andh	r10,0x7f7f
800077c8:	e0 1a 7f 7f 	andl	r10,0x7f7f
800077cc:	ee 19 80 80 	eorh	r9,0x8080
800077d0:	ec 19 80 80 	eorl	r9,0x8080
800077d4:	e4 19 80 80 	andh	r9,0x8080
800077d8:	e0 19 80 80 	andl	r9,0x8080
800077dc:	f5 e9 10 09 	or	r9,r10,r9
800077e0:	10 a9       	st.w	r8++,r9
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
800077e2:	f6 fa 00 19 	ld.w	r10,r11[25]
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
800077e6:	14 99       	mov	r9,r10
800077e8:	e4 1a 7f 7f 	andh	r10,0x7f7f
800077ec:	e0 1a 7f 7f 	andl	r10,0x7f7f
800077f0:	ee 19 80 80 	eorh	r9,0x8080
800077f4:	ec 19 80 80 	eorl	r9,0x8080
800077f8:	e4 19 80 80 	andh	r9,0x8080
800077fc:	e0 19 80 80 	andl	r9,0x8080
80007800:	f5 e9 10 09 	or	r9,r10,r9
80007804:	10 a9       	st.w	r8++,r9
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
80007806:	f6 fa 00 1d 	ld.w	r10,r11[29]
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
8000780a:	14 99       	mov	r9,r10
8000780c:	e4 1a 7f 7f 	andh	r10,0x7f7f
80007810:	e0 1a 7f 7f 	andl	r10,0x7f7f
80007814:	ee 19 80 80 	eorh	r9,0x8080
80007818:	ec 19 80 80 	eorl	r9,0x8080
8000781c:	e4 19 80 80 	andh	r9,0x8080
80007820:	e0 19 80 80 	andl	r9,0x8080
80007824:	f5 e9 10 09 	or	r9,r10,r9
80007828:	10 a9       	st.w	r8++,r9
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
8000782a:	f6 fa 00 21 	ld.w	r10,r11[33]
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
8000782e:	14 99       	mov	r9,r10
80007830:	e4 1a 7f 7f 	andh	r10,0x7f7f
80007834:	e0 1a 7f 7f 	andl	r10,0x7f7f
80007838:	ee 19 80 80 	eorh	r9,0x8080
8000783c:	ec 19 80 80 	eorl	r9,0x8080
80007840:	e4 19 80 80 	andh	r9,0x8080
80007844:	e0 19 80 80 	andl	r9,0x8080
80007848:	f5 e9 10 09 	or	r9,r10,r9
8000784c:	10 a9       	st.w	r8++,r9
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
8000784e:	f6 fc 00 25 	ld.w	r12,r11[37]
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
80007852:	18 99       	mov	r9,r12
80007854:	e4 1c 7f 7f 	andh	r12,0x7f7f
80007858:	e0 1c 7f 7f 	andl	r12,0x7f7f
8000785c:	ee 19 80 80 	eorh	r9,0x8080
80007860:	ec 19 80 80 	eorl	r9,0x8080
80007864:	e4 19 80 80 	andh	r9,0x8080
80007868:	e0 19 80 80 	andl	r9,0x8080
8000786c:	f9 e9 10 09 	or	r9,r12,r9
80007870:	f6 ca ff d7 	sub	r10,r11,-41
80007874:	10 a9       	st.w	r8++,r9
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
80007876:	74 0c       	ld.w	r12,r10[0x0]
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
80007878:	18 99       	mov	r9,r12
8000787a:	e4 1c 7f 7f 	andh	r12,0x7f7f
8000787e:	e0 1c 7f 7f 	andl	r12,0x7f7f
80007882:	ee 19 80 80 	eorh	r9,0x8080
80007886:	ec 19 80 80 	eorl	r9,0x8080
8000788a:	e4 19 80 80 	andh	r9,0x8080
8000788e:	e0 19 80 80 	andl	r9,0x8080
80007892:	f9 e9 10 09 	or	r9,r12,r9
80007896:	91 09       	st.w	r8[0x0],r9
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
80007898:	74 1a       	ld.w	r10,r10[0x4]
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
8000789a:	14 99       	mov	r9,r10
8000789c:	e4 1a 7f 7f 	andh	r10,0x7f7f
800078a0:	e0 1a 7f 7f 	andl	r10,0x7f7f
800078a4:	ee 19 80 80 	eorh	r9,0x8080
800078a8:	ec 19 80 80 	eorl	r9,0x8080
800078ac:	e4 19 80 80 	andh	r9,0x8080
800078b0:	e0 19 80 80 	andl	r9,0x8080
800078b4:	f5 e9 10 09 	or	r9,r10,r9
800078b8:	91 19       	st.w	r8[0x4],r9
	if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
800078ba:	f6 c8 ff cb 	sub	r8,r11,-53
800078be:	f3 d8 c0 02 	bfextu	r9,r8,0x0,0x2
800078c2:	5f 0a       	sreq	r10
800078c4:	f6 c9 ff c7 	sub	r9,r11,-57
800078c8:	e0 66 0b 54 	mov	r6,2900
800078cc:	12 36       	cp.w	r6,r9
800078ce:	5f bc       	srhi	r12
800078d0:	ec c9 ff fc 	sub	r9,r6,-4
800078d4:	12 38       	cp.w	r8,r9
800078d6:	5f b9       	srhi	r9
800078d8:	f9 e9 10 09 	or	r9,r12,r9
800078dc:	f5 e9 00 09 	and	r9,r10,r9
800078e0:	e0 80 00 f5 	breq	80007aca <uhi_hid_mouse_report_reception+0x41e>
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
800078e4:	70 09       	ld.w	r9,r8[0x0]
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
	for(i=0; i<4; i++)
		sliders[i] = uhi_hid_mouse_dev.report[i+53] + 0x80;
800078e6:	12 98       	mov	r8,r9
800078e8:	e4 19 7f 7f 	andh	r9,0x7f7f
800078ec:	e0 19 7f 7f 	andl	r9,0x7f7f
800078f0:	ee 18 80 80 	eorh	r8,0x8080
800078f4:	ec 18 80 80 	eorl	r8,0x8080
800078f8:	e4 18 80 80 	andh	r8,0x8080
800078fc:	e0 18 80 80 	andl	r8,0x8080
80007900:	f3 e8 10 08 	or	r8,r9,r8
80007904:	8d 08       	st.w	r6[0x0],r8
80007906:	30 05       	mov	r5,0
		
    i = 0;
	
	while(i < 48 && butt_states[i] == 0)
80007908:	0a 9a       	mov	r10,r5
8000790a:	c0 88       	rjmp	8000791a <uhi_hid_mouse_report_reception+0x26e>
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
	for(i=0; i<4; i++)
		sliders[i] = uhi_hid_mouse_dev.report[i+53] + 0x80;
8000790c:	e7 d9 c0 08 	bfextu	r3,r9,0x0,0x8
80007910:	2f f5       	sub	r5,-1
		
    i = 0;
	
	while(i < 48 && butt_states[i] == 0)
80007912:	e0 45 00 30 	cp.w	r5,48
80007916:	e0 80 00 d6 	breq	80007ac2 <uhi_hid_mouse_report_reception+0x416>
8000791a:	e7 d5 c0 08 	bfextu	r3,r5,0x0,0x8
8000791e:	e4 05 07 08 	ld.ub	r8,r2[r5]
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
	for(i=0; i<4; i++)
		sliders[i] = uhi_hid_mouse_dev.report[i+53] + 0x80;
80007922:	e6 c9 ff ff 	sub	r9,r3,-1
		
    i = 0;
	
	while(i < 48 && butt_states[i] == 0)
80007926:	f4 08 18 00 	cp.b	r8,r10
8000792a:	cf 10       	breq	8000790c <uhi_hid_mouse_report_reception+0x260>
		i++;
		
	if(i < 48)
	{
		lcd_clear_line(1);
8000792c:	30 1c       	mov	r12,1
8000792e:	e0 a0 0a f5 	rcall	80008f18 <lcd_clear_line>
		dip204_printf_string("button: %u = %u",i+1,butt_states[i]);
80007932:	fe cc 81 8e 	sub	r12,pc,-32370
80007936:	e0 68 0c 8c 	mov	r8,3212
8000793a:	f0 05 07 08 	ld.ub	r8,r8[r5]
8000793e:	2f f5       	sub	r5,-1
80007940:	1a d8       	st.w	--sp,r8
80007942:	1a d5       	st.w	--sp,r5
		dip204_hide_cursor();
80007944:	fe b0 d3 62 	rcall	80002008 <dip204_printf_string>
		UHI_HID_MOUSE_EVENT_BTN_LEFT(1);
80007948:	fe b0 d6 58 	rcall	800025f8 <dip204_hide_cursor>
8000794c:	30 1c       	mov	r12,1
8000794e:	fe b0 db f3 	rcall	80003134 <ui_host_hid_mouse_btn_left>
	else
		UHI_HID_MOUSE_EVENT_BTN_LEFT(0);
		
	i++;
	
	while(i < 48 && butt_states[i] == 0)
80007952:	2f ed       	sub	sp,-8
		UHI_HID_MOUSE_EVENT_BTN_LEFT(1);
	}
	else
		UHI_HID_MOUSE_EVENT_BTN_LEFT(0);
		
	i++;
80007954:	2f f3       	sub	r3,-1
	
	while(i < 48 && butt_states[i] == 0)
80007956:	32 f9       	mov	r9,47
80007958:	5c 53       	castu.b	r3
8000795a:	f2 03 18 00 	cp.b	r3,r9
8000795e:	e0 8b 00 12 	brhi	80007982 <uhi_hid_mouse_report_reception+0x2d6>
80007962:	e4 03 07 0a 	ld.ub	r10,r2[r3]
80007966:	58 0a       	cp.w	r10,0
80007968:	c0 70       	breq	80007976 <uhi_hid_mouse_report_reception+0x2ca>
8000796a:	c7 58       	rjmp	80007a54 <uhi_hid_mouse_report_reception+0x3a8>
8000796c:	e4 03 07 08 	ld.ub	r8,r2[r3]
80007970:	f4 08 18 00 	cp.b	r8,r10
		i++;
80007974:	c7 01       	brne	80007a54 <uhi_hid_mouse_report_reception+0x3a8>
	else
		UHI_HID_MOUSE_EVENT_BTN_LEFT(0);
		
	i++;
	
	while(i < 48 && butt_states[i] == 0)
80007976:	2f f3       	sub	r3,-1
80007978:	5c 53       	castu.b	r3
8000797a:	f2 03 18 00 	cp.b	r3,r9
		lcd_clear_line(2);
		dip204_printf_string("button: %u = %u",i+1,butt_states[i]);
		dip204_hide_cursor();
		UHI_HID_MOUSE_EVENT_BTN_RIGHT(1);
	}
	else UHI_HID_MOUSE_EVENT_BTN_RIGHT(0);
8000797e:	fe 98 ff f7 	brls	8000796c <uhi_hid_mouse_report_reception+0x2c0>
80007982:	30 0c       	mov	r12,0
	
	if((sliders[0] != pastsliders[0] && sliders[0] != 255) || (sliders[1] != pastsliders[1] && sliders[1] != 255))
80007984:	fe b0 db cc 	rcall	8000311c <ui_host_hid_mouse_btn_right>
80007988:	e0 65 0b 50 	mov	r5,2896
8000798c:	0d 88       	ld.ub	r8,r6[0x0]
8000798e:	0b 89       	ld.ub	r9,r5[0x0]
80007990:	f0 09 18 00 	cp.b	r9,r8
80007994:	c7 d0       	breq	80007a8e <uhi_hid_mouse_report_reception+0x3e2>
80007996:	3f f9       	mov	r9,-1
80007998:	f2 08 18 00 	cp.b	r8,r9
	{
		val = (sliders[0] + (sliders[1] << 8)) & 0xFFF;/*
		dip204_clear_line(3);
		dip204_printf_string("slider: %u = %u",1,val);
		dip204_hide_cursor();*/
		dacsend(0,2,val);
8000799c:	c7 90       	breq	80007a8e <uhi_hid_mouse_report_reception+0x3e2>
8000799e:	e0 69 0b 54 	mov	r9,2900
800079a2:	13 99       	ld.ub	r9,r9[0x1]
800079a4:	a9 69       	lsl	r9,0x8
800079a6:	f2 08 00 08 	add	r8,r9,r8
800079aa:	30 2b       	mov	r11,2
800079ac:	f5 d8 c0 0c 	bfextu	r10,r8,0x0,0xc
	}
	
	if((sliders[2] != pastsliders[2] && sliders[2] != 255) || (sliders[3] != pastsliders[3] && sliders[3] != 255))
800079b0:	30 0c       	mov	r12,0
800079b2:	e0 a0 0a c5 	rcall	80008f3c <dacsend>
800079b6:	0d a8       	ld.ub	r8,r6[0x2]
800079b8:	0b a9       	ld.ub	r9,r5[0x2]
800079ba:	f0 09 18 00 	cp.b	r9,r8
800079be:	c5 e0       	breq	80007a7a <uhi_hid_mouse_report_reception+0x3ce>
800079c0:	3f f9       	mov	r9,-1
800079c2:	f2 08 18 00 	cp.b	r8,r9
	{
		val = (sliders[2] + (sliders[3] << 8)) & 0xFFF;/*
		dip204_clear_line(4);
		dip204_printf_string("slider: %u = %u",2,val);
		dip204_hide_cursor();*/
		dacsend(2,2,val);
800079c6:	c5 a0       	breq	80007a7a <uhi_hid_mouse_report_reception+0x3ce>
800079c8:	e0 69 0b 54 	mov	r9,2900
800079cc:	13 b9       	ld.ub	r9,r9[0x3]
800079ce:	a9 69       	lsl	r9,0x8
800079d0:	f2 08 00 08 	add	r8,r9,r8
800079d4:	30 2b       	mov	r11,2
800079d6:	f5 d8 c0 0c 	bfextu	r10,r8,0x0,0xc
800079da:	16 9c       	mov	r12,r11
	uint8_t i;

	for (i = 0; i < 48; i++)
	{
		//if the current sensor value of a key is positive and it was zero on last count
		if ((butt_states[i] > 0) && (pastbutt_states[i] <= 0))
800079dc:	e0 a0 0a b0 	rcall	80008f3c <dacsend>
		{
			addNote(i,butt_states[i]);
		}

		else if ((butt_states[i] <= 0) && (pastbutt_states[i] > 0))
800079e0:	30 06       	mov	r6,0
800079e2:	e0 65 0c 8c 	mov	r5,3212
800079e6:	e0 63 0b 20 	mov	r3,2848
		{
			removeNote(i);	
		}

		// update the past keymap array (stores the previous values of every key's sensor reading)
		pastbutt_states[i] = butt_states[i];
800079ea:	0c 92       	mov	r2,r6
800079ec:	c0 b8       	rjmp	80007a02 <uhi_hid_mouse_report_reception+0x356>

static void processKeys(void)
{
	uint8_t i;

	for (i = 0; i < 48; i++)
800079ee:	07 89       	ld.ub	r9,r3[0x0]
800079f0:	f6 09 18 00 	cp.b	r9,r11
	{
		//if the current sensor value of a key is positive and it was zero on last count
		if ((butt_states[i] > 0) && (pastbutt_states[i] <= 0))
800079f4:	c2 b1       	brne	80007a4a <uhi_hid_mouse_report_reception+0x39e>
800079f6:	06 cb       	st.b	r3++,r11
800079f8:	2f f6       	sub	r6,-1
800079fa:	2f f5       	sub	r5,-1
800079fc:	e0 46 00 30 	cp.w	r6,48
80007a00:	c1 20       	breq	80007a24 <uhi_hid_mouse_report_reception+0x378>
		{
			addNote(i,butt_states[i]);
80007a02:	0b 8b       	ld.ub	r11,r5[0x0]
80007a04:	58 0b       	cp.w	r11,0
80007a06:	cf 40       	breq	800079ee <uhi_hid_mouse_report_reception+0x342>
80007a08:	07 88       	ld.ub	r8,r3[0x0]
		{
			removeNote(i);	
		}

		// update the past keymap array (stores the previous values of every key's sensor reading)
		pastbutt_states[i] = butt_states[i];
80007a0a:	e4 08 18 00 	cp.b	r8,r2
80007a0e:	cf 41       	brne	800079f6 <uhi_hid_mouse_report_reception+0x34a>

static void processKeys(void)
{
	uint8_t i;

	for (i = 0; i < 48; i++)
80007a10:	0c 9c       	mov	r12,r6
80007a12:	fe b0 df d1 	rcall	800039b4 <addNote>
	
	processKeys();
	//mantaVol(butt_states);
	/*val  = calculateDACvalue();
	DAC16Send(1, val);*/
	noteOut();
80007a16:	0b 8b       	ld.ub	r11,r5[0x0]
80007a18:	06 cb       	st.b	r3++,r11
 * \param add   USB address to use
 */
static void uhi_hid_mouse_start_trans_report(usb_add_t add)
{
	// Start transfer on interrupt endpoint IN
	uhd_ep_run(add, uhi_hid_mouse_dev.ep_in, true, uhi_hid_mouse_dev.report,
80007a1a:	2f f6       	sub	r6,-1
80007a1c:	2f f5       	sub	r5,-1
80007a1e:	e0 46 00 30 	cp.w	r6,48
80007a22:	cf 01       	brne	80007a02 <uhi_hid_mouse_report_reception+0x356>
80007a24:	fe b0 dd 3c 	rcall	8000349c <noteOut>
80007a28:	fe c8 03 7c 	sub	r8,pc,892
80007a2c:	0f cb       	ld.ub	r11,r7[0x4]
80007a2e:	1a d8       	st.w	--sp,r8
80007a30:	30 08       	mov	r8,0
80007a32:	08 9c       	mov	r12,r4
80007a34:	1a d8       	st.w	--sp,r8
80007a36:	30 1a       	mov	r10,1
80007a38:	0f d8       	ld.ub	r8,r7[0x5]
			addNote(i,butt_states[i]);
		}

		else if ((butt_states[i] <= 0) && (pastbutt_states[i] > 0))
		{
			removeNote(i);	
80007a3a:	6e 29       	ld.w	r9,r7[0x8]
80007a3c:	fe b0 f2 10 	rcall	80005e5c <uhd_ep_run>
80007a40:	2f ed       	sub	sp,-8
80007a42:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
	while(i < 48 && butt_states[i] == 0)
		i++;
	
	if(i < 48)
	{
		lcd_clear_line(2);
80007a46:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
		dip204_printf_string("button: %u = %u",i+1,butt_states[i]);
80007a4a:	0c 9c       	mov	r12,r6
80007a4c:	fe b0 de 86 	rcall	80003758 <removeNote>
80007a50:	0b 8b       	ld.ub	r11,r5[0x0]
80007a52:	cd 2b       	rjmp	800079f6 <uhi_hid_mouse_report_reception+0x34a>
80007a54:	30 2c       	mov	r12,2
80007a56:	e0 a0 0a 61 	rcall	80008f18 <lcd_clear_line>
		dip204_hide_cursor();
80007a5a:	e4 03 07 08 	ld.ub	r8,r2[r3]
		UHI_HID_MOUSE_EVENT_BTN_RIGHT(1);
80007a5e:	fe cc 82 ba 	sub	r12,pc,-32070
80007a62:	1a d8       	st.w	--sp,r8
80007a64:	2f f3       	sub	r3,-1
80007a66:	1a d3       	st.w	--sp,r3
		dip204_printf_string("slider: %u = %u",1,val);
		dip204_hide_cursor();*/
		dacsend(0,2,val);
	}
	
	if((sliders[2] != pastsliders[2] && sliders[2] != 255) || (sliders[3] != pastsliders[3] && sliders[3] != 255))
80007a68:	fe b0 d2 d0 	rcall	80002008 <dip204_printf_string>
80007a6c:	fe b0 d5 c6 	rcall	800025f8 <dip204_hide_cursor>
80007a70:	30 1c       	mov	r12,1
80007a72:	fe b0 db 55 	rcall	8000311c <ui_host_hid_mouse_btn_right>
80007a76:	2f ed       	sub	sp,-8
80007a78:	c8 8b       	rjmp	80007988 <uhi_hid_mouse_report_reception+0x2dc>
80007a7a:	0d b9       	ld.ub	r9,r6[0x3]
		dip204_hide_cursor();
		UHI_HID_MOUSE_EVENT_BTN_RIGHT(1);
	}
	else UHI_HID_MOUSE_EVENT_BTN_RIGHT(0);
	
	if((sliders[0] != pastsliders[0] && sliders[0] != 255) || (sliders[1] != pastsliders[1] && sliders[1] != 255))
80007a7c:	0b ba       	ld.ub	r10,r5[0x3]
80007a7e:	f2 0a 18 00 	cp.b	r10,r9
80007a82:	ca f0       	breq	800079e0 <uhi_hid_mouse_report_reception+0x334>
80007a84:	3f fa       	mov	r10,-1
80007a86:	f4 09 18 00 	cp.b	r9,r10
80007a8a:	ca 21       	brne	800079ce <uhi_hid_mouse_report_reception+0x322>
80007a8c:	ca ab       	rjmp	800079e0 <uhi_hid_mouse_report_reception+0x334>
80007a8e:	0d 99       	ld.ub	r9,r6[0x1]
 * \param add   USB address to use
 */
static void uhi_hid_mouse_start_trans_report(usb_add_t add)
{
	// Start transfer on interrupt endpoint IN
	uhd_ep_run(add, uhi_hid_mouse_dev.ep_in, true, uhi_hid_mouse_dev.report,
80007a90:	0b 9a       	ld.ub	r10,r5[0x1]
80007a92:	f2 0a 18 00 	cp.b	r10,r9
80007a96:	c9 00       	breq	800079b6 <uhi_hid_mouse_report_reception+0x30a>
80007a98:	3f fa       	mov	r10,-1
80007a9a:	f4 09 18 00 	cp.b	r9,r10
80007a9e:	c8 31       	brne	800079a4 <uhi_hid_mouse_report_reception+0x2f8>
80007aa0:	c8 bb       	rjmp	800079b6 <uhi_hid_mouse_report_reception+0x30a>
80007aa2:	fe c8 03 f6 	sub	r8,pc,1014
80007aa6:	e0 69 0b 58 	mov	r9,2904
80007aaa:	13 cb       	ld.ub	r11,r9[0x4]
		dip204_printf_string("button: %u = %u",i+1,butt_states[i]);
		dip204_hide_cursor();
		UHI_HID_MOUSE_EVENT_BTN_LEFT(1);
	}
	else
		UHI_HID_MOUSE_EVENT_BTN_LEFT(0);
80007aac:	1a d8       	st.w	--sp,r8
80007aae:	30 08       	mov	r8,0
80007ab0:	30 1a       	mov	r10,1
80007ab2:	1a d8       	st.w	--sp,r8
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
	for(i=0; i<4; i++)
		sliders[i] = uhi_hid_mouse_dev.report[i+53] + 0x80;
80007ab4:	13 d8       	ld.ub	r8,r9[0x5]
80007ab6:	72 29       	ld.w	r9,r9[0x8]
80007ab8:	fe b0 f1 d2 	rcall	80005e5c <uhd_ep_run>
80007abc:	2f ed       	sub	sp,-8
80007abe:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80007ac2:	30 0c       	mov	r12,0
80007ac4:	fe b0 db 38 	rcall	80003134 <ui_host_hid_mouse_btn_left>
80007ac8:	c4 6b       	rjmp	80007954 <uhi_hid_mouse_report_reception+0x2a8>
80007aca:	f7 38 00 35 	ld.ub	r8,r11[53]
80007ace:	f0 c8 00 80 	sub	r8,r8,128
80007ad2:	ac 88       	st.b	r6[0x0],r8
80007ad4:	f7 38 00 36 	ld.ub	r8,r11[54]
80007ad8:	f0 c8 00 80 	sub	r8,r8,128
80007adc:	ac 98       	st.b	r6[0x1],r8
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
80007ade:	f7 38 00 37 	ld.ub	r8,r11[55]
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
80007ae2:	f0 c8 00 80 	sub	r8,r8,128
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;	
80007ae6:	ac a8       	st.b	r6[0x2],r8
80007ae8:	f7 38 00 38 	ld.ub	r8,r11[56]
	if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
		return; // HID mouse transfer aborted
	}
	
	// Decode buttons
	for(i=0; i<48; i++)
80007aec:	f0 c8 00 80 	sub	r8,r8,128
80007af0:	ac b8       	st.b	r6[0x3],r8
80007af2:	c0 ab       	rjmp	80007906 <uhi_hid_mouse_report_reception+0x25a>
80007af4:	04 98       	mov	r8,r2
80007af6:	e4 cc ff d0 	sub	r12,r2,-48
80007afa:	13 3a       	ld.ub	r10,r9++
80007afc:	f4 ca 00 80 	sub	r10,r10,128
80007b00:	10 ca       	st.b	r8++,r10
80007b02:	18 38       	cp.w	r8,r12
80007b04:	cf b1       	brne	80007afa <uhi_hid_mouse_report_reception+0x44e>
80007b06:	cd aa       	rjmp	800078ba <uhi_hid_mouse_report_reception+0x20e>

80007b08 <uhi_hid_mouse_install>:
80007b08:	d4 31       	pushm	r0-r7,lr
80007b0a:	20 3d       	sub	sp,12
80007b0c:	e0 66 0b 58 	mov	r6,2904
80007b10:	18 95       	mov	r5,r12
80007b12:	6c 0b       	ld.w	r11,r6[0x0]
80007b14:	58 0b       	cp.w	r11,0
80007b16:	c0 40       	breq	80007b1e <uhi_hid_mouse_install+0x16>
80007b18:	30 5c       	mov	r12,5
80007b1a:	2f dd       	sub	sp,-12
80007b1c:	d8 32       	popm	r0-r7,pc
80007b1e:	78 67       	ld.w	r7,r12[0x18]
80007b20:	0f a9       	ld.ub	r9,r7[0x2]
80007b22:	0f b8       	ld.ub	r8,r7[0x3]
80007b24:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80007b28:	5c c8       	swap.bh	r8
80007b2a:	5c 88       	casts.h	r8
80007b2c:	c5 a0       	breq	80007be0 <uhi_hid_mouse_install+0xd8>
80007b2e:	e0 60 0c 8c 	mov	r0,3212
80007b32:	50 05       	stdsp	sp[0x0],r5
80007b34:	e0 c1 ff fc 	sub	r1,r0,-4
					b_iface_supported = true;
					// initialize button states to 0
					for(i=0; i<48; i++)
					{
						butt_states[i]=0;
						pastbutt_states[i]=0;
80007b38:	e2 c2 ff fc 	sub	r2,r1,-4
80007b3c:	e4 c3 ff fc 	sub	r3,r2,-4
80007b40:	e6 c4 ff fc 	sub	r4,r3,-4
80007b44:	e8 ce ff fc 	sub	lr,r4,-4
80007b48:	fc cc ff fc 	sub	r12,lr,-4
80007b4c:	f8 c9 ff fc 	sub	r9,r12,-4
80007b50:	50 29       	stdsp	sp[0x8],r9
80007b52:	2f c9       	sub	r9,-4
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	
	while(conf_desc_lgt)
	{
		switch (ptr_iface->bDescriptorType) 
80007b54:	50 19       	stdsp	sp[0x4],r9
80007b56:	c0 a8       	rjmp	80007b6a <uhi_hid_mouse_install+0x62>
80007b58:	30 5a       	mov	r10,5
80007b5a:	f4 09 18 00 	cp.b	r9,r10

			// Ignore descriptor
			default: break;
		}	
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
80007b5e:	c3 60       	breq	80007bca <uhi_hid_mouse_install+0xc2>
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
80007b60:	0f 89       	ld.ub	r9,r7[0x0]

			// Ignore descriptor
			default: break;
		}	
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
80007b62:	12 18       	sub	r8,r9

	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	
	while(conf_desc_lgt)
80007b64:	12 07       	add	r7,r9
	{
		switch (ptr_iface->bDescriptorType) 
80007b66:	5c 88       	casts.h	r8
80007b68:	c3 c0       	breq	80007be0 <uhi_hid_mouse_install+0xd8>
80007b6a:	0f 99       	ld.ub	r9,r7[0x1]
80007b6c:	30 4a       	mov	r10,4
80007b6e:	f4 09 18 00 	cp.b	r9,r10
		{
			case USB_DT_INTERFACE:
				if ((ptr_iface->bInterfaceClass   == HID_CLASS)
80007b72:	cf 31       	brne	80007b58 <uhi_hid_mouse_install+0x50>
80007b74:	0f da       	ld.ub	r10,r7[0x5]
80007b76:	30 39       	mov	r9,3
80007b78:	f2 0a 18 00 	cp.b	r10,r9
					return UHC_ENUM_MEMORY_LIMIT; // Internal RAM allocation fail
				}
			
				uhi_hid_mouse_dev.dev = dev;
				// All endpoints of all interfaces supported allocated
				return UHC_ENUM_SUCCESS;
80007b7c:	c0 30       	breq	80007b82 <uhi_hid_mouse_install+0x7a>
					b_iface_supported = true;
					// initialize button states to 0
					for(i=0; i<48; i++)
					{
						butt_states[i]=0;
						pastbutt_states[i]=0;
80007b7e:	30 0b       	mov	r11,0
					// Start allocation endpoint(s)
					b_iface_supported = true;
					// initialize button states to 0
					for(i=0; i<48; i++)
					{
						butt_states[i]=0;
80007b80:	cf 0b       	rjmp	80007b60 <uhi_hid_mouse_install+0x58>
	{
		switch (ptr_iface->bDescriptorType) 
		{
			case USB_DT_INTERFACE:
				if ((ptr_iface->bInterfaceClass   == HID_CLASS)
					&& (ptr_iface->bInterfaceProtocol == HID_PROTOCOL_GENERIC) ) 
80007b82:	e0 6a 0b 20 	mov	r10,2848
80007b86:	40 19       	lddsp	r9,sp[0x4]
80007b88:	30 0b       	mov	r11,0
80007b8a:	0f f5       	ld.ub	r5,r7[0x7]
					// Start allocation endpoint(s)
					b_iface_supported = true;
					// initialize button states to 0
					for(i=0; i<48; i++)
					{
						butt_states[i]=0;
80007b8c:	f6 05 18 00 	cp.b	r5,r11
						pastbutt_states[i]=0;
80007b90:	cf 71       	brne	80007b7e <uhi_hid_mouse_install+0x76>
80007b92:	49 db       	lddpc	r11,80007c04 <uhi_hid_mouse_install+0xfc>
80007b94:	14 ab       	st.w	r10++,r11
80007b96:	14 ab       	st.w	r10++,r11
80007b98:	14 ab       	st.w	r10++,r11
80007b9a:	14 ab       	st.w	r10++,r11
					// Start allocation endpoint(s)
					b_iface_supported = true;
					// initialize button states to 0
					for(i=0; i<48; i++)
					{
						butt_states[i]=0;
80007b9c:	14 ab       	st.w	r10++,r11
80007b9e:	14 ab       	st.w	r10++,r11
80007ba0:	14 ab       	st.w	r10++,r11
80007ba2:	81 0b       	st.w	r0[0x0],r11
80007ba4:	83 0b       	st.w	r1[0x0],r11
80007ba6:	85 0b       	st.w	r2[0x0],r11
80007ba8:	87 0b       	st.w	r3[0x0],r11
80007baa:	89 0b       	st.w	r4[0x0],r11
80007bac:	9d 0b       	st.w	lr[0x0],r11
						pastbutt_states[i]=0;
80007bae:	99 0b       	st.w	r12[0x0],r11
					// Start allocation endpoint(s)
					b_iface_supported = true;
					// initialize button states to 0
					for(i=0; i<48; i++)
					{
						butt_states[i]=0;
80007bb0:	40 25       	lddsp	r5,sp[0x8]
						pastbutt_states[i]=0;
80007bb2:	8b 0b       	st.w	r5[0x0],r11
					// Start allocation endpoint(s)
					b_iface_supported = true;
					// initialize button states to 0
					for(i=0; i<48; i++)
					{
						butt_states[i]=0;
80007bb4:	14 ab       	st.w	r10++,r11
80007bb6:	12 ab       	st.w	r9++,r11
						pastbutt_states[i]=0;
80007bb8:	14 ab       	st.w	r10++,r11
80007bba:	12 ab       	st.w	r9++,r11
					// Start allocation endpoint(s)
					b_iface_supported = true;
					// initialize button states to 0
					for(i=0; i<48; i++)
					{
						butt_states[i]=0;
80007bbc:	93 1b       	st.w	r9[0x4],r11
						pastbutt_states[i]=0;
80007bbe:	14 ab       	st.w	r10++,r11
80007bc0:	95 1b       	st.w	r10[0x4],r11
80007bc2:	93 0b       	st.w	r9[0x0],r11
				else b_iface_supported = false; // Stop allocation endpoint(s)
			break;

			case USB_DT_ENDPOINT:
				//  Allocation of the endpoint
				if (!b_iface_supported) 
80007bc4:	95 0b       	st.w	r10[0x0],r11
80007bc6:	30 1b       	mov	r11,1
80007bc8:	cc cb       	rjmp	80007b60 <uhi_hid_mouse_install+0x58>
					break;

				if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface))
80007bca:	58 0b       	cp.w	r11,0
80007bcc:	cc a0       	breq	80007b60 <uhi_hid_mouse_install+0x58>
80007bce:	40 05       	lddsp	r5,sp[0x0]
80007bd0:	0e 9b       	mov	r11,r7
80007bd2:	eb 3c 00 12 	ld.ub	r12,r5[18]
80007bd6:	fe b0 ec 75 	rcall	800054c0 <uhd_ep_alloc>
			// Ignore descriptor
			default: break;
		}	
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
80007bda:	c0 51       	brne	80007be4 <uhi_hid_mouse_install+0xdc>
80007bdc:	30 4c       	mov	r12,4

				if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface))
					return UHC_ENUM_HARDWARE_LIMIT; // Endpoint allocation fail

				Assert(((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN);
				uhi_hid_mouse_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
80007bde:	c9 eb       	rjmp	80007b1a <uhi_hid_mouse_install+0x12>
80007be0:	30 1c       	mov	r12,1
				uhi_hid_mouse_dev.report_size =
80007be2:	c9 cb       	rjmp	80007b1a <uhi_hid_mouse_install+0x12>
80007be4:	0f a8       	ld.ub	r8,r7[0x2]
						le16_to_cpu(((usb_ep_desc_t*)ptr_iface)->wMaxPacketSize);
				uhi_hid_mouse_dev.report = malloc(uhi_hid_mouse_dev.report_size);
80007be6:	ac c8       	st.b	r6[0x4],r8
80007be8:	0f cc       	ld.ub	r12,r7[0x4]
80007bea:	ac dc       	st.b	r6[0x5],r12
			
				if (uhi_hid_mouse_dev.report == NULL) {
80007bec:	e0 a0 0f 0a 	rcall	80009a00 <malloc>
					Assert(false);
					return UHC_ENUM_MEMORY_LIMIT; // Internal RAM allocation fail
				}
			
				uhi_hid_mouse_dev.dev = dev;
80007bf0:	8d 2c       	st.w	r6[0x8],r12
80007bf2:	c0 60       	breq	80007bfe <uhi_hid_mouse_install+0xf6>
				// All endpoints of all interfaces supported allocated
				return UHC_ENUM_SUCCESS;
80007bf4:	e0 68 0b 58 	mov	r8,2904
				uhi_hid_mouse_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
				uhi_hid_mouse_dev.report_size =
						le16_to_cpu(((usb_ep_desc_t*)ptr_iface)->wMaxPacketSize);
				uhi_hid_mouse_dev.report = malloc(uhi_hid_mouse_dev.report_size);
			
				if (uhi_hid_mouse_dev.report == NULL) {
80007bf8:	30 0c       	mov	r12,0
80007bfa:	91 05       	st.w	r8[0x0],r5
80007bfc:	c8 fb       	rjmp	80007b1a <uhi_hid_mouse_install+0x12>
80007bfe:	30 6c       	mov	r12,6
80007c00:	c8 db       	rjmp	80007b1a <uhi_hid_mouse_install+0x12>
80007c02:	d7 03       	nop
80007c04:	00 00       	add	r0,r0
	...

80007c08 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
80007c08:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80007c0c:	e0 68 0b 78 	mov	r8,2936
80007c10:	11 89       	ld.ub	r9,r8[0x0]
80007c12:	30 08       	mov	r8,0
80007c14:	f0 09 18 00 	cp.b	r9,r8
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007c18:	c1 80       	breq	80007c48 <udc_sof_notify+0x40>
80007c1a:	e0 66 0b 6c 	mov	r6,2924
80007c1e:	6c 09       	ld.w	r9,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80007c20:	72 08       	ld.w	r8,r9[0x0]
80007c22:	11 ca       	ld.ub	r10,r8[0x4]
80007c24:	58 0a       	cp.w	r10,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
80007c26:	c1 10       	breq	80007c48 <udc_sof_notify+0x40>
80007c28:	30 07       	mov	r7,0
80007c2a:	72 18       	ld.w	r8,r9[0x4]
80007c2c:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80007c30:	70 48       	ld.w	r8,r8[0x10]
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
80007c32:	58 08       	cp.w	r8,0
80007c34:	c0 50       	breq	80007c3e <udc_sof_notify+0x36>
80007c36:	5d 18       	icall	r8
80007c38:	6c 09       	ld.w	r9,r6[0x0]
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80007c3a:	72 08       	ld.w	r8,r9[0x0]
80007c3c:	11 ca       	ld.ub	r10,r8[0x4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80007c3e:	2f f7       	sub	r7,-1
80007c40:	5c 57       	castu.b	r7
80007c42:	f4 07 18 00 	cp.b	r7,r10
80007c46:	cf 23       	brcs	80007c2a <udc_sof_notify+0x22>
80007c48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

80007c4c <udc_valid_address>:
80007c4c:	d4 01       	pushm	lr
80007c4e:	e0 68 0c 58 	mov	r8,3160
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
80007c52:	11 bc       	ld.ub	r12,r8[0x3]
80007c54:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80007c58:	fe b0 e2 30 	rcall	800040b8 <udd_set_address>
}
80007c5c:	d8 02       	popm	pc
80007c5e:	d7 03       	nop

80007c60 <udc_start>:
80007c60:	d4 01       	pushm	lr
80007c62:	fe b0 e3 43 	rcall	800042e8 <udd_enable>
/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
	udd_enable();
}
80007c66:	d8 02       	popm	pc

80007c68 <udc_iface_enable>:
80007c68:	eb cd 40 f8 	pushm	r3-r7,lr
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80007c6c:	e0 68 0b 78 	mov	r8,2936
80007c70:	11 89       	ld.ub	r9,r8[0x0]
80007c72:	30 08       	mov	r8,0
80007c74:	f0 09 18 00 	cp.b	r9,r8
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80007c78:	c0 a0       	breq	80007c8c <udc_iface_enable+0x24>
80007c7a:	e0 64 0b 6c 	mov	r4,2924
80007c7e:	68 08       	ld.w	r8,r4[0x0]
80007c80:	70 08       	ld.w	r8,r8[0x0]
80007c82:	11 c9       	ld.ub	r9,r8[0x4]
80007c84:	f8 09 18 00 	cp.b	r9,r12
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80007c88:	e0 8b 00 04 	brhi	80007c90 <udc_iface_enable+0x28>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80007c8c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80007c90:	e0 67 0b 7c 	mov	r7,2940
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80007c94:	8f 08       	st.w	r7[0x0],r8
80007c96:	10 95       	mov	r5,r8
80007c98:	11 aa       	ld.ub	r10,r8[0x2]
80007c9a:	11 b9       	ld.ub	r9,r8[0x3]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
80007c9c:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80007ca0:	5c c9       	swap.bh	r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80007ca2:	5c 79       	castu.h	r9
80007ca4:	f0 09 00 09 	add	r9,r8,r9
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80007ca8:	10 39       	cp.w	r9,r8
80007caa:	fe 98 ff f1 	brls	80007c8c <udc_iface_enable+0x24>
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
80007cae:	30 4a       	mov	r10,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80007cb0:	c0 68       	rjmp	80007cbc <udc_iface_enable+0x54>
80007cb2:	0b 88       	ld.ub	r8,r5[0x0]
80007cb4:	10 05       	add	r5,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80007cb6:	0a 39       	cp.w	r9,r5
80007cb8:	e0 88 00 35 	brls	80007d22 <udc_iface_enable+0xba>
80007cbc:	0b 98       	ld.ub	r8,r5[0x1]
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
80007cbe:	f4 08 18 00 	cp.b	r8,r10
80007cc2:	cf 81       	brne	80007cb2 <udc_iface_enable+0x4a>
80007cc4:	0b a3       	ld.ub	r3,r5[0x2]
80007cc6:	e6 0c 18 00 	cp.b	r12,r3
80007cca:	cf 41       	brne	80007cb2 <udc_iface_enable+0x4a>
80007ccc:	0b b8       	ld.ub	r8,r5[0x3]
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80007cce:	f6 08 18 00 	cp.b	r8,r11
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80007cd2:	cf 01       	brne	80007cb2 <udc_iface_enable+0x4a>
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80007cd4:	8f 05       	st.w	r7[0x0],r5
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80007cd6:	30 56       	mov	r6,5
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80007cd8:	30 47       	mov	r7,4
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80007cda:	0b 89       	ld.ub	r9,r5[0x0]
80007cdc:	68 08       	ld.w	r8,r4[0x0]
80007cde:	12 05       	add	r5,r9
80007ce0:	70 08       	ld.w	r8,r8[0x0]
80007ce2:	11 aa       	ld.ub	r10,r8[0x2]
80007ce4:	11 b9       	ld.ub	r9,r8[0x3]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
80007ce6:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80007cea:	5c c9       	swap.bh	r9
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80007cec:	5c 79       	castu.h	r9
80007cee:	f0 09 00 09 	add	r9,r8,r9
80007cf2:	0a 39       	cp.w	r9,r5
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
80007cf4:	e0 8b 00 0b 	brhi	80007d0a <udc_iface_enable+0xa2>
80007cf8:	c0 d8       	rjmp	80007d12 <udc_iface_enable+0xaa>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80007cfa:	ec 08 18 00 	cp.b	r8,r6
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80007cfe:	c1 50       	breq	80007d28 <udc_iface_enable+0xc0>
80007d00:	0b 88       	ld.ub	r8,r5[0x0]
80007d02:	10 05       	add	r5,r8
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80007d04:	0a 39       	cp.w	r9,r5
80007d06:	e0 88 00 06 	brls	80007d12 <udc_iface_enable+0xaa>
80007d0a:	0b 98       	ld.ub	r8,r5[0x1]
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80007d0c:	ee 08 18 00 	cp.b	r8,r7
80007d10:	cf 51       	brne	80007cfa <udc_iface_enable+0x92>
80007d12:	68 08       	ld.w	r8,r4[0x0]
80007d14:	70 18       	ld.w	r8,r8[0x4]
80007d16:	f0 03 03 28 	ld.w	r8,r8[r3<<0x2]
80007d1a:	70 0c       	ld.w	r12,r8[0x0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80007d1c:	5d 1c       	icall	r12
80007d1e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
80007d22:	8f 05       	st.w	r7[0x0],r5
80007d24:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80007d28:	0b c9       	ld.ub	r9,r5[0x4]
80007d2a:	0b d8       	ld.ub	r8,r5[0x5]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80007d2c:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80007d30:	5c c8       	swap.bh	r8
80007d32:	0b bb       	ld.ub	r11,r5[0x3]
80007d34:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007d38:	0b ac       	ld.ub	r12,r5[0x2]
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80007d3a:	fe b0 e5 eb 	rcall	80004910 <udd_ep_alloc>
80007d3e:	cc e1       	brne	80007cda <udc_iface_enable+0x72>
80007d40:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0

80007d44 <udc_iface_disable>:
80007d44:	eb cd 40 fc 	pushm	r2-r7,lr
80007d48:	e0 66 0b 78 	mov	r6,2936
80007d4c:	18 97       	mov	r7,r12
80007d4e:	30 03       	mov	r3,0
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80007d50:	0d 88       	ld.ub	r8,r6[0x0]
80007d52:	e6 08 18 00 	cp.b	r8,r3
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80007d56:	c0 b0       	breq	80007d6c <udc_iface_disable+0x28>
80007d58:	e0 64 0b 6c 	mov	r4,2924
80007d5c:	68 08       	ld.w	r8,r4[0x0]
80007d5e:	18 9e       	mov	lr,r12
80007d60:	70 09       	ld.w	r9,r8[0x0]
80007d62:	13 c8       	ld.ub	r8,r9[0x4]
80007d64:	f8 08 18 00 	cp.b	r8,r12
	}
#endif

	// Disable interface
	udi_api->disable();
	return true;
80007d68:	e0 8b 00 04 	brhi	80007d70 <udc_iface_disable+0x2c>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80007d6c:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80007d70:	e0 65 0b 7c 	mov	r5,2940
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80007d74:	8b 09       	st.w	r5[0x0],r9
80007d76:	12 98       	mov	r8,r9
80007d78:	13 ab       	ld.ub	r11,r9[0x2]
80007d7a:	13 ba       	ld.ub	r10,r9[0x3]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
80007d7c:	f5 eb 10 8a 	or	r10,r10,r11<<0x8
80007d80:	5c ca       	swap.bh	r10
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80007d82:	5c 7a       	castu.h	r10
80007d84:	f2 0a 00 0a 	add	r10,r9,r10
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80007d88:	12 3a       	cp.w	r10,r9
80007d8a:	fe 98 ff f1 	brls	80007d6c <udc_iface_disable+0x28>
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
80007d8e:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80007d90:	c0 68       	rjmp	80007d9c <udc_iface_disable+0x58>
80007d92:	11 89       	ld.ub	r9,r8[0x0]
80007d94:	12 08       	add	r8,r9
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80007d96:	10 3a       	cp.w	r10,r8
80007d98:	e0 88 00 69 	brls	80007e6a <udc_iface_disable+0x126>
80007d9c:	11 99       	ld.ub	r9,r8[0x1]
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
80007d9e:	f6 09 18 00 	cp.b	r9,r11
80007da2:	cf 81       	brne	80007d92 <udc_iface_disable+0x4e>
80007da4:	11 a9       	ld.ub	r9,r8[0x2]
80007da6:	ee 09 18 00 	cp.b	r9,r7
80007daa:	cf 41       	brne	80007d92 <udc_iface_disable+0x4e>
80007dac:	11 b9       	ld.ub	r9,r8[0x3]
	}
#endif

	// Disable interface
	udi_api->disable();
	return true;
80007dae:	e6 09 18 00 	cp.b	r9,r3
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80007db2:	cf 01       	brne	80007d92 <udc_iface_disable+0x4e>
80007db4:	8b 08       	st.w	r5[0x0],r8
80007db6:	68 08       	ld.w	r8,r4[0x0]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80007db8:	70 18       	ld.w	r8,r8[0x4]
80007dba:	f0 07 03 22 	ld.w	r2,r8[r7<<0x2]
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80007dbe:	64 3c       	ld.w	r12,r2[0xc]
80007dc0:	5d 1c       	icall	r12
80007dc2:	0d 88       	ld.ub	r8,r6[0x0]
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80007dc4:	e6 08 18 00 	cp.b	r8,r3
80007dc8:	cd 20       	breq	80007d6c <udc_iface_disable+0x28>
80007dca:	e0 68 0b 6c 	mov	r8,2924
80007dce:	70 08       	ld.w	r8,r8[0x0]
80007dd0:	70 09       	ld.w	r9,r8[0x0]
80007dd2:	13 c8       	ld.ub	r8,r9[0x4]
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80007dd4:	ee 08 18 00 	cp.b	r8,r7
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80007dd8:	fe 98 ff ca 	brls	80007d6c <udc_iface_disable+0x28>
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80007ddc:	e0 68 0b 7c 	mov	r8,2940
80007de0:	91 09       	st.w	r8[0x0],r9
80007de2:	12 98       	mov	r8,r9
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
80007de4:	13 ab       	ld.ub	r11,r9[0x2]
80007de6:	13 ba       	ld.ub	r10,r9[0x3]
80007de8:	f5 eb 10 8a 	or	r10,r10,r11<<0x8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80007dec:	5c ca       	swap.bh	r10
80007dee:	5c 7a       	castu.h	r10
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80007df0:	f2 0a 00 0a 	add	r10,r9,r10
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
80007df4:	12 3a       	cp.w	r10,r9
80007df6:	fe 98 ff bb 	brls	80007d6c <udc_iface_disable+0x28>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80007dfa:	30 4b       	mov	r11,4
80007dfc:	c0 68       	rjmp	80007e08 <udc_iface_disable+0xc4>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80007dfe:	11 89       	ld.ub	r9,r8[0x0]
80007e00:	12 08       	add	r8,r9
80007e02:	10 3a       	cp.w	r10,r8
80007e04:	e0 88 00 33 	brls	80007e6a <udc_iface_disable+0x126>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
80007e08:	11 99       	ld.ub	r9,r8[0x1]
80007e0a:	f6 09 18 00 	cp.b	r9,r11
80007e0e:	cf 81       	brne	80007dfe <udc_iface_disable+0xba>
80007e10:	11 a9       	ld.ub	r9,r8[0x2]
80007e12:	0e 9e       	mov	lr,r7
80007e14:	ee 09 18 00 	cp.b	r9,r7
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80007e18:	cf 31       	brne	80007dfe <udc_iface_disable+0xba>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80007e1a:	11 b9       	ld.ub	r9,r8[0x3]
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80007e1c:	f8 09 18 00 	cp.b	r9,r12
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80007e20:	ce f1       	brne	80007dfe <udc_iface_disable+0xba>
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80007e22:	8b 08       	st.w	r5[0x0],r8
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80007e24:	30 47       	mov	r7,4
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80007e26:	10 95       	mov	r5,r8
80007e28:	30 56       	mov	r6,5
80007e2a:	0b 89       	ld.ub	r9,r5[0x0]
80007e2c:	68 08       	ld.w	r8,r4[0x0]
80007e2e:	12 05       	add	r5,r9
80007e30:	70 08       	ld.w	r8,r8[0x0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
80007e32:	11 aa       	ld.ub	r10,r8[0x2]
80007e34:	11 b9       	ld.ub	r9,r8[0x3]
80007e36:	f3 ea 10 89 	or	r9,r9,r10<<0x8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80007e3a:	5c c9       	swap.bh	r9
80007e3c:	5c 79       	castu.h	r9
80007e3e:	f0 09 00 09 	add	r9,r8,r9
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
80007e42:	0a 39       	cp.w	r9,r5
80007e44:	e0 8b 00 0b 	brhi	80007e5a <udc_iface_disable+0x116>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80007e48:	c0 d8       	rjmp	80007e62 <udc_iface_disable+0x11e>
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80007e4a:	ec 08 18 00 	cp.b	r8,r6
80007e4e:	c1 10       	breq	80007e70 <udc_iface_disable+0x12c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80007e50:	0b 88       	ld.ub	r8,r5[0x0]
80007e52:	10 05       	add	r5,r8
80007e54:	0a 39       	cp.w	r9,r5
80007e56:	e0 88 00 06 	brls	80007e62 <udc_iface_disable+0x11e>
		}
	}
#endif

	// Disable interface
	udi_api->disable();
80007e5a:	0b 98       	ld.ub	r8,r5[0x1]
80007e5c:	ee 08 18 00 	cp.b	r8,r7
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80007e60:	cf 51       	brne	80007e4a <udc_iface_disable+0x106>
80007e62:	64 18       	ld.w	r8,r2[0x4]
80007e64:	5d 18       	icall	r8
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
80007e66:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80007e6a:	8b 08       	st.w	r5[0x0],r8
		}
80007e6c:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80007e70:	0b ac       	ld.ub	r12,r5[0x2]
80007e72:	fe b0 e3 93 	rcall	80004598 <udd_ep_free>
80007e76:	cd ab       	rjmp	80007e2a <udc_iface_disable+0xe6>

80007e78 <udc_reset>:
80007e78:	eb cd 40 e0 	pushm	r5-r7,lr
80007e7c:	e0 65 0b 78 	mov	r5,2936
 */
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
80007e80:	30 08       	mov	r8,0
80007e82:	0b 89       	ld.ub	r9,r5[0x0]
80007e84:	f0 09 18 00 	cp.b	r9,r8
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007e88:	c1 50       	breq	80007eb2 <udc_reset+0x3a>
80007e8a:	e0 66 0b 6c 	mov	r6,2924
80007e8e:	6c 09       	ld.w	r9,r6[0x0]
80007e90:	72 09       	ld.w	r9,r9[0x0]
80007e92:	13 c9       	ld.ub	r9,r9[0x4]
80007e94:	f0 09 18 00 	cp.b	r9,r8
				iface_num++) {
			udc_iface_disable(iface_num);
80007e98:	c0 d0       	breq	80007eb2 <udc_reset+0x3a>
80007e9a:	30 07       	mov	r7,0
80007e9c:	0e 9c       	mov	r12,r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007e9e:	c5 3f       	rcall	80007d44 <udc_iface_disable>
				iface_num++) {
80007ea0:	6c 08       	ld.w	r8,r6[0x0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007ea2:	2f f7       	sub	r7,-1
				iface_num++) {
80007ea4:	70 08       	ld.w	r8,r8[0x0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007ea6:	5c 57       	castu.b	r7
80007ea8:	11 c8       	ld.ub	r8,r8[0x4]
80007eaa:	ee 08 18 00 	cp.b	r8,r7
80007eae:	fe 9b ff f7 	brhi	80007e9c <udc_reset+0x24>
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80007eb2:	30 08       	mov	r8,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80007eb4:	30 09       	mov	r9,0
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80007eb6:	aa 88       	st.b	r5[0x0],r8
80007eb8:	e0 68 0b 74 	mov	r8,2932
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80007ebc:	b0 09       	st.h	r8[0x0],r9
80007ebe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007ec2:	d7 03       	nop

80007ec4 <udc_stop>:
80007ec4:	eb cd 40 e0 	pushm	r5-r7,lr
80007ec8:	fe b0 e6 1c 	rcall	80004b00 <udd_disable>
80007ecc:	e0 65 0b 78 	mov	r5,2936
 */
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
80007ed0:	30 08       	mov	r8,0
80007ed2:	0b 89       	ld.ub	r9,r5[0x0]
80007ed4:	f0 09 18 00 	cp.b	r9,r8
		for (iface_num = 0;
80007ed8:	c1 50       	breq	80007f02 <udc_stop+0x3e>
80007eda:	e0 66 0b 6c 	mov	r6,2924
80007ede:	6c 09       	ld.w	r9,r6[0x0]
80007ee0:	72 09       	ld.w	r9,r9[0x0]
80007ee2:	13 c9       	ld.ub	r9,r9[0x4]
80007ee4:	f0 09 18 00 	cp.b	r9,r8
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
80007ee8:	c0 d0       	breq	80007f02 <udc_stop+0x3e>
80007eea:	30 07       	mov	r7,0
80007eec:	0e 9c       	mov	r12,r7
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80007eee:	c2 bf       	rcall	80007d44 <udc_iface_disable>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80007ef0:	6c 08       	ld.w	r8,r6[0x0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80007ef2:	2f f7       	sub	r7,-1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80007ef4:	70 08       	ld.w	r8,r8[0x0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80007ef6:	5c 57       	castu.b	r7
80007ef8:	11 c8       	ld.ub	r8,r8[0x4]
80007efa:	ee 08 18 00 	cp.b	r8,r7
80007efe:	fe 9b ff f7 	brhi	80007eec <udc_stop+0x28>
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80007f02:	30 08       	mov	r8,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80007f04:	30 09       	mov	r9,0
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80007f06:	aa 88       	st.b	r5[0x0],r8
80007f08:	e0 68 0b 74 	mov	r8,2932
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
}
80007f0c:	b0 09       	st.h	r8[0x0],r9
80007f0e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007f12:	d7 03       	nop

80007f14 <udc_process_setup>:
80007f14:	d4 31       	pushm	r0-r7,lr
80007f16:	e0 67 0c 58 	mov	r7,3160
80007f1a:	30 09       	mov	r9,0
80007f1c:	30 08       	mov	r8,0
80007f1e:	8f 59       	st.w	r7[0x14],r9
80007f20:	ae 68       	st.h	r7[0xc],r8
80007f22:	8f 49       	st.w	r7[0x10],r9
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
80007f24:	0f 85       	ld.ub	r5,r7[0x0]
80007f26:	f0 05 18 00 	cp.b	r5,r8
80007f2a:	c0 c5       	brlt	80007f42 <udc_process_setup+0x2e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80007f2c:	0a 98       	mov	r8,r5
80007f2e:	e2 18 00 60 	andl	r8,0x60,COH
80007f32:	c1 00       	breq	80007f52 <udc_process_setup+0x3e>
		if (udc_reqstd()) {
80007f34:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80007f38:	58 15       	cp.w	r5,1
80007f3a:	c3 60       	breq	80007fa6 <udc_process_setup+0x92>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
80007f3c:	58 25       	cp.w	r5,2
80007f3e:	c4 00       	breq	80007fbe <udc_process_setup+0xaa>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007f40:	d8 3a       	popm	r0-r7,pc,r12=0
	udd_g_ctrlreq.payload_size = 0;
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
80007f42:	8e 39       	ld.sh	r9,r7[0x6]
80007f44:	f0 09 19 00 	cp.h	r9,r8
80007f48:	cf c0       	breq	80007f40 <udc_process_setup+0x2c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80007f4a:	0a 98       	mov	r8,r5
80007f4c:	e2 18 00 60 	andl	r8,0x60,COH
80007f50:	cf 21       	brne	80007f34 <udc_process_setup+0x20>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80007f52:	10 94       	mov	r4,r8
80007f54:	f0 05 18 00 	cp.b	r5,r8
80007f58:	e0 85 00 f0 	brlt	80008138 <udc_process_setup+0x224>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80007f5c:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80007f60:	e0 81 01 11 	brne	80008182 <udc_process_setup+0x26e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80007f64:	e0 66 0c 58 	mov	r6,3160
80007f68:	0f 98       	ld.ub	r8,r7[0x1]
80007f6a:	30 59       	mov	r9,5
80007f6c:	f2 08 18 00 	cp.b	r8,r9
80007f70:	e0 80 01 80 	breq	80008270 <udc_process_setup+0x35c>
80007f74:	30 99       	mov	r9,9
80007f76:	f2 08 18 00 	cp.b	r8,r9
80007f7a:	e0 80 01 29 	breq	800081cc <udc_process_setup+0x2b8>
80007f7e:	30 19       	mov	r9,1
80007f80:	f2 08 18 00 	cp.b	r8,r9
80007f84:	cd e1       	brne	80007f40 <udc_process_setup+0x2c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80007f86:	8c 38       	ld.sh	r8,r6[0x6]
80007f88:	ea 08 19 00 	cp.h	r8,r5
80007f8c:	cd a1       	brne	80007f40 <udc_process_setup+0x2c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80007f8e:	8c 19       	ld.sh	r9,r6[0x2]
80007f90:	30 18       	mov	r8,1
80007f92:	f0 09 19 00 	cp.h	r9,r8
80007f96:	cd 51       	brne	80007f40 <udc_process_setup+0x2c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
80007f98:	e0 69 0b 74 	mov	r9,2932
80007f9c:	30 1c       	mov	r12,1
80007f9e:	92 08       	ld.sh	r8,r9[0x0]
80007fa0:	a9 d8       	cbr	r8,0x9
80007fa2:	b2 08       	st.h	r9[0x0],r8
80007fa4:	d8 32       	popm	r0-r7,pc
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
80007fa6:	e0 63 0b 78 	mov	r3,2936
80007faa:	30 04       	mov	r4,0
80007fac:	07 88       	ld.ub	r8,r3[0x0]
80007fae:	e8 08 18 00 	cp.b	r8,r4
80007fb2:	c5 a1       	brne	80008066 <udc_process_setup+0x152>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
80007fb4:	0f 85       	ld.ub	r5,r7[0x0]
80007fb6:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
80007fba:	58 25       	cp.w	r5,2
80007fbc:	cc 21       	brne	80007f40 <udc_process_setup+0x2c>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
80007fbe:	e0 63 0b 78 	mov	r3,2936
80007fc2:	30 09       	mov	r9,0
80007fc4:	07 88       	ld.ub	r8,r3[0x0]
80007fc6:	f2 08 18 00 	cp.b	r8,r9
80007fca:	cb b0       	breq	80007f40 <udc_process_setup+0x2c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007fcc:	e0 66 0b 6c 	mov	r6,2924
80007fd0:	6c 08       	ld.w	r8,r6[0x0]
80007fd2:	70 0a       	ld.w	r10,r8[0x0]
80007fd4:	15 ca       	ld.ub	r10,r10[0x4]
80007fd6:	f2 0a 18 00 	cp.b	r10,r9
80007fda:	cb 30       	breq	80007f40 <udc_process_setup+0x2c>
80007fdc:	30 07       	mov	r7,0
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80007fde:	e0 60 0b 7c 	mov	r0,2940
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80007fe2:	0e 92       	mov	r2,r7

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80007fe4:	30 45       	mov	r5,4
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
80007fe6:	70 18       	ld.w	r8,r8[0x4]
80007fe8:	f0 07 03 24 	ld.w	r4,r8[r7<<0x2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80007fec:	68 3c       	ld.w	r12,r4[0xc]
80007fee:	5d 1c       	icall	r12
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80007ff0:	07 88       	ld.ub	r8,r3[0x0]
80007ff2:	e4 08 18 00 	cp.b	r8,r2
80007ff6:	ca 50       	breq	80007f40 <udc_process_setup+0x2c>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80007ff8:	6c 08       	ld.w	r8,r6[0x0]
80007ffa:	70 09       	ld.w	r9,r8[0x0]
80007ffc:	13 c8       	ld.ub	r8,r9[0x4]
80007ffe:	ee 08 18 00 	cp.b	r8,r7
80008002:	fe 98 ff 9f 	brls	80007f40 <udc_process_setup+0x2c>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80008006:	81 09       	st.w	r0[0x0],r9
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80008008:	12 98       	mov	r8,r9
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000800a:	13 ab       	ld.ub	r11,r9[0x2]
8000800c:	13 ba       	ld.ub	r10,r9[0x3]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000800e:	e0 61 0b 7c 	mov	r1,2940
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80008012:	f5 eb 10 8a 	or	r10,r10,r11<<0x8
80008016:	5c ca       	swap.bh	r10
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
80008018:	5c 7a       	castu.h	r10
8000801a:	f2 0a 00 0a 	add	r10,r9,r10
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000801e:	12 3a       	cp.w	r10,r9
80008020:	e0 8b 00 08 	brhi	80008030 <udc_process_setup+0x11c>
80008024:	c8 eb       	rjmp	80007f40 <udc_process_setup+0x2c>
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
80008026:	11 89       	ld.ub	r9,r8[0x0]
80008028:	12 08       	add	r8,r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000802a:	10 3a       	cp.w	r10,r8
8000802c:	e0 88 00 a9 	brls	8000817e <udc_process_setup+0x26a>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80008030:	11 99       	ld.ub	r9,r8[0x1]
80008032:	ea 09 18 00 	cp.b	r9,r5
80008036:	cf 81       	brne	80008026 <udc_process_setup+0x112>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
80008038:	11 a9       	ld.ub	r9,r8[0x2]
8000803a:	ee 09 18 00 	cp.b	r9,r7
8000803e:	cf 41       	brne	80008026 <udc_process_setup+0x112>
80008040:	11 b9       	ld.ub	r9,r8[0x3]
80008042:	f8 09 18 00 	cp.b	r9,r12
80008046:	cf 01       	brne	80008026 <udc_process_setup+0x112>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
80008048:	81 08       	st.w	r0[0x0],r8
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
8000804a:	68 2c       	ld.w	r12,r4[0x8]
8000804c:	5d 1c       	icall	r12
8000804e:	e0 81 00 be 	brne	800081ca <udc_process_setup+0x2b6>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80008052:	2f f7       	sub	r7,-1
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80008054:	6c 08       	ld.w	r8,r6[0x0]
			iface_num++) {
80008056:	5c 57       	castu.b	r7
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80008058:	70 09       	ld.w	r9,r8[0x0]
8000805a:	13 c9       	ld.ub	r9,r9[0x4]
8000805c:	ee 09 18 00 	cp.b	r9,r7
80008060:	fe 9b ff c3 	brhi	80007fe6 <udc_process_setup+0xd2>
80008064:	c6 eb       	rjmp	80007f40 <udc_process_setup+0x2c>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80008066:	e0 66 0b 6c 	mov	r6,2924
8000806a:	6c 08       	ld.w	r8,r6[0x0]

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000806c:	0f d5       	ld.ub	r5,r7[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000806e:	70 09       	ld.w	r9,r8[0x0]
80008070:	13 c8       	ld.ub	r8,r9[0x4]
80008072:	ea 08 18 00 	cp.b	r8,r5
80008076:	fe 98 ff 9f 	brls	80007fb4 <udc_process_setup+0xa0>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000807a:	e0 61 0b 7c 	mov	r1,2940
8000807e:	83 09       	st.w	r1[0x0],r9
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80008080:	13 ab       	ld.ub	r11,r9[0x2]
80008082:	13 ba       	ld.ub	r10,r9[0x3]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80008084:	12 98       	mov	r8,r9
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80008086:	f5 eb 10 8a 	or	r10,r10,r11<<0x8
8000808a:	5c ca       	swap.bh	r10
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000808c:	f7 da c0 10 	bfextu	r11,r10,0x0,0x10
80008090:	f2 0b 00 0b 	add	r11,r9,r11
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80008094:	12 3b       	cp.w	r11,r9
80008096:	fe 98 ff 8f 	brls	80007fb4 <udc_process_setup+0xa0>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000809a:	30 4a       	mov	r10,4
8000809c:	c0 68       	rjmp	800080a8 <udc_process_setup+0x194>
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000809e:	11 89       	ld.ub	r9,r8[0x0]
800080a0:	12 08       	add	r8,r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800080a2:	10 3b       	cp.w	r11,r8
800080a4:	e0 88 00 fe 	brls	800082a0 <udc_process_setup+0x38c>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
800080a8:	11 99       	ld.ub	r9,r8[0x1]
800080aa:	f4 09 18 00 	cp.b	r9,r10
800080ae:	cf 81       	brne	8000809e <udc_process_setup+0x18a>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
800080b0:	11 a9       	ld.ub	r9,r8[0x2]
800080b2:	ea 09 18 00 	cp.b	r9,r5
800080b6:	cf 41       	brne	8000809e <udc_process_setup+0x18a>
800080b8:	11 b9       	ld.ub	r9,r8[0x3]
800080ba:	e8 09 18 00 	cp.b	r9,r4
800080be:	cf 01       	brne	8000809e <udc_process_setup+0x18a>
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
800080c0:	83 08       	st.w	r1[0x0],r8
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
800080c2:	6c 08       	ld.w	r8,r6[0x0]
800080c4:	70 18       	ld.w	r8,r8[0x4]
800080c6:	f0 05 03 26 	ld.w	r6,r8[r5<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
800080ca:	6c 3c       	ld.w	r12,r6[0xc]
800080cc:	5d 1c       	icall	r12
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
800080ce:	07 88       	ld.ub	r8,r3[0x0]
800080d0:	e8 08 18 00 	cp.b	r8,r4
800080d4:	fe 90 ff 70 	breq	80007fb4 <udc_process_setup+0xa0>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
800080d8:	e0 68 0b 6c 	mov	r8,2924
800080dc:	70 08       	ld.w	r8,r8[0x0]
800080de:	70 09       	ld.w	r9,r8[0x0]
800080e0:	13 c8       	ld.ub	r8,r9[0x4]
800080e2:	ea 08 18 00 	cp.b	r8,r5
800080e6:	fe 98 ff 67 	brls	80007fb4 <udc_process_setup+0xa0>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
800080ea:	e0 68 0b 7c 	mov	r8,2940
800080ee:	91 09       	st.w	r8[0x0],r9
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800080f0:	12 98       	mov	r8,r9
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
800080f2:	13 ab       	ld.ub	r11,r9[0x2]
800080f4:	13 ba       	ld.ub	r10,r9[0x3]
800080f6:	f5 eb 10 8a 	or	r10,r10,r11<<0x8
800080fa:	5c ca       	swap.bh	r10
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
800080fc:	5c 7a       	castu.h	r10
800080fe:	f2 0a 00 0a 	add	r10,r9,r10
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80008102:	12 3a       	cp.w	r10,r9
80008104:	fe 98 ff 58 	brls	80007fb4 <udc_process_setup+0xa0>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80008108:	30 4b       	mov	r11,4
8000810a:	c0 68       	rjmp	80008116 <udc_process_setup+0x202>
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000810c:	11 89       	ld.ub	r9,r8[0x0]
8000810e:	12 08       	add	r8,r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80008110:	10 3a       	cp.w	r10,r8
80008112:	e0 88 00 c7 	brls	800082a0 <udc_process_setup+0x38c>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80008116:	11 99       	ld.ub	r9,r8[0x1]
80008118:	f6 09 18 00 	cp.b	r9,r11
8000811c:	cf 81       	brne	8000810c <udc_process_setup+0x1f8>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000811e:	11 a9       	ld.ub	r9,r8[0x2]
80008120:	ea 09 18 00 	cp.b	r9,r5
80008124:	cf 41       	brne	8000810c <udc_process_setup+0x1f8>
80008126:	11 b9       	ld.ub	r9,r8[0x3]
80008128:	f8 09 18 00 	cp.b	r9,r12
8000812c:	cf 01       	brne	8000810c <udc_process_setup+0x1f8>
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
8000812e:	83 08       	st.w	r1[0x0],r8
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80008130:	6c 2c       	ld.w	r12,r6[0x8]
80008132:	5d 1c       	icall	r12
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
80008134:	c4 b1       	brne	800081ca <udc_process_setup+0x2b6>
80008136:	c3 fb       	rjmp	80007fb4 <udc_process_setup+0xa0>
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
80008138:	e0 66 0c 58 	mov	r6,3160
8000813c:	8e 39       	ld.sh	r9,r7[0x6]
8000813e:	58 09       	cp.w	r9,0
80008140:	fe 90 fe fa 	breq	80007f34 <udc_process_setup+0x20>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80008144:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80008148:	c7 61       	brne	80008234 <udc_process_setup+0x320>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000814a:	0d 98       	ld.ub	r8,r6[0x1]
8000814c:	30 6a       	mov	r10,6
8000814e:	f4 08 18 00 	cp.b	r8,r10
80008152:	e0 80 00 ff 	breq	80008350 <udc_process_setup+0x43c>
80008156:	30 8a       	mov	r10,8
80008158:	f4 08 18 00 	cp.b	r8,r10
8000815c:	e0 80 00 ef 	breq	8000833a <udc_process_setup+0x426>
80008160:	e8 08 18 00 	cp.b	r8,r4
80008164:	fe 91 fe ee 	brne	80007f40 <udc_process_setup+0x2c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
80008168:	30 28       	mov	r8,2
8000816a:	f0 09 19 00 	cp.h	r9,r8
8000816e:	fe 91 fe e9 	brne	80007f40 <udc_process_setup+0x2c>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
80008172:	e0 6c 0b 74 	mov	r12,2932
80008176:	30 2b       	mov	r11,2
80008178:	fe b0 df be 	rcall	800040f4 <udd_set_setup_payload>
8000817c:	da 3a       	popm	r0-r7,pc,r12=1
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000817e:	83 08       	st.w	r1[0x0],r8
80008180:	d8 3a       	popm	r0-r7,pc,r12=0
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80008182:	58 15       	cp.w	r5,1
80008184:	c3 80       	breq	800081f4 <udc_process_setup+0x2e0>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80008186:	58 25       	cp.w	r5,2
80008188:	fe 91 fe d8 	brne	80007f38 <udc_process_setup+0x24>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000818c:	e0 66 0c 58 	mov	r6,3160
80008190:	0f 99       	ld.ub	r9,r7[0x1]
80008192:	30 1a       	mov	r10,1
80008194:	f4 09 18 00 	cp.b	r9,r10
80008198:	c7 60       	breq	80008284 <udc_process_setup+0x370>
8000819a:	30 3a       	mov	r10,3
8000819c:	f4 09 18 00 	cp.b	r9,r10
800081a0:	fe 91 ff 0f 	brne	80007fbe <udc_process_setup+0xaa>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
800081a4:	8c 39       	ld.sh	r9,r6[0x6]
800081a6:	f0 09 19 00 	cp.h	r9,r8
800081aa:	fe 91 ff 0a 	brne	80007fbe <udc_process_setup+0xaa>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
800081ae:	8c 18       	ld.sh	r8,r6[0x2]
800081b0:	f2 08 19 00 	cp.h	r8,r9
800081b4:	fe 91 ff 05 	brne	80007fbe <udc_process_setup+0xaa>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
800081b8:	0d dc       	ld.ub	r12,r6[0x5]
800081ba:	fe b0 e0 f9 	rcall	800043ac <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
800081be:	0d dc       	ld.ub	r12,r6[0x5]
800081c0:	fe b0 df aa 	rcall	80004114 <udd_ep_set_halt>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
800081c4:	58 0c       	cp.w	r12,0
800081c6:	e0 80 00 d4 	breq	8000836e <udc_process_setup+0x45a>
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800081ca:	da 3a       	popm	r0-r7,pc,r12=1
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
800081cc:	8c 38       	ld.sh	r8,r6[0x6]
800081ce:	ea 08 19 00 	cp.h	r8,r5
800081d2:	fe 91 fe b7 	brne	80007f40 <udc_process_setup+0x2c>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
800081d6:	fe b0 df 82 	rcall	800040da <udd_getaddress>
800081da:	c0 90       	breq	800081ec <udc_process_setup+0x2d8>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
800081dc:	32 05       	mov	r5,32
800081de:	0d b9       	ld.ub	r9,r6[0x3]
800081e0:	6a 08       	ld.w	r8,r5[0x0]
800081e2:	f1 38 00 11 	ld.ub	r8,r8[17]
800081e6:	10 39       	cp.w	r9,r8
800081e8:	e0 8a 00 e9 	brle	800083ba <udc_process_setup+0x4a6>
800081ec:	0d 85       	ld.ub	r5,r6[0x0]
800081ee:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800081f2:	ca 3a       	rjmp	80007f38 <udc_process_setup+0x24>
800081f4:	e0 65 0c 58 	mov	r5,3160
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
800081f8:	0f 9a       	ld.ub	r10,r7[0x1]
800081fa:	30 b9       	mov	r9,11
800081fc:	f2 0a 18 00 	cp.b	r10,r9
80008200:	fe 91 fe d3 	brne	80007fa6 <udc_process_setup+0x92>
80008204:	8a 39       	ld.sh	r9,r5[0x6]
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
80008206:	f0 09 19 00 	cp.h	r9,r8
8000820a:	fe 91 fe ce 	brne	80007fa6 <udc_process_setup+0x92>
8000820e:	e0 68 0b 78 	mov	r8,2936
		return false; // Error in request
	}
	if (!udc_num_configuration) {
80008212:	11 88       	ld.ub	r8,r8[0x0]
80008214:	e8 08 18 00 	cp.b	r8,r4
80008218:	fe 90 fe c7 	breq	80007fa6 <udc_process_setup+0x92>
8000821c:	0b d6       	ld.ub	r6,r5[0x5]

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
8000821e:	8a 14       	ld.sh	r4,r5[0x2]
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
80008220:	0c 9c       	mov	r12,r6

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
80008222:	fe b0 fd 91 	rcall	80007d44 <udc_iface_disable>
80008226:	e0 81 00 c4 	brne	800083ae <udc_process_setup+0x49a>
8000822a:	0b 85       	ld.ub	r5,r5[0x0]
8000822c:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80008230:	fe 9f fe 84 	bral	80007f38 <udc_process_setup+0x24>
80008234:	58 15       	cp.w	r5,1
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80008236:	c3 80       	breq	800082a6 <udc_process_setup+0x392>
80008238:	58 25       	cp.w	r5,2
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000823a:	fe 91 fe 7f 	brne	80007f38 <udc_process_setup+0x24>
8000823e:	0d 98       	ld.ub	r8,r6[0x1]
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80008240:	e8 08 18 00 	cp.b	r8,r4
80008244:	fe 91 fe bd 	brne	80007fbe <udc_process_setup+0xaa>
80008248:	ea 09 19 00 	cp.h	r9,r5
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
8000824c:	fe 91 fe b9 	brne	80007fbe <udc_process_setup+0xaa>
80008250:	0d dc       	ld.ub	r12,r6[0x5]
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80008252:	fe b0 df 57 	rcall	80004100 <udd_ep_is_halted>
80008256:	e0 68 0b 68 	mov	r8,2920
8000825a:	e0 69 01 00 	mov	r9,256
8000825e:	58 0c       	cp.w	r12,0
80008260:	f9 b9 00 00 	moveq	r9,0
80008264:	0a 9b       	mov	r11,r5
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
80008266:	10 9c       	mov	r12,r8
80008268:	b0 09       	st.h	r8[0x0],r9

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
8000826a:	fe b0 df 45 	rcall	800040f4 <udd_set_setup_payload>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
8000826e:	da 3a       	popm	r0-r7,pc,r12=1
80008270:	8c 38       	ld.sh	r8,r6[0x6]
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80008272:	ea 08 19 00 	cp.h	r8,r5
80008276:	fe 91 fe 65 	brne	80007f40 <udc_process_setup+0x2c>
8000827a:	fe c8 06 2e 	sub	r8,pc,1582
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
8000827e:	30 1c       	mov	r12,1
80008280:	8d 48       	st.w	r6[0x10],r8
80008282:	d8 32       	popm	r0-r7,pc
80008284:	8c 39       	ld.sh	r9,r6[0x6]
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80008286:	f0 09 19 00 	cp.h	r9,r8
8000828a:	fe 91 fe 9a 	brne	80007fbe <udc_process_setup+0xaa>
8000828e:	8c 18       	ld.sh	r8,r6[0x2]
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80008290:	f2 08 19 00 	cp.h	r8,r9
80008294:	fe 91 fe 95 	brne	80007fbe <udc_process_setup+0xaa>
80008298:	0d dc       	ld.ub	r12,r6[0x5]
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000829a:	fe b0 df 91 	rcall	800041bc <udd_ep_clear_halt>
8000829e:	c9 3b       	rjmp	800081c4 <udc_process_setup+0x2b0>
800082a0:	83 08       	st.w	r1[0x0],r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800082a2:	fe 9f fe 89 	bral	80007fb4 <udc_process_setup+0xa0>
800082a6:	0d 9b       	ld.ub	r11,r6[0x1]
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
800082a8:	30 aa       	mov	r10,10
800082aa:	f4 0b 18 00 	cp.b	r11,r10
800082ae:	fe 91 fe 7c 	brne	80007fa6 <udc_process_setup+0x92>
800082b2:	ea 09 19 00 	cp.h	r9,r5
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
800082b6:	fe 91 fe 78 	brne	80007fa6 <udc_process_setup+0x92>
800082ba:	e0 69 0b 78 	mov	r9,2936
		return false; // Error in request
	}
	if (!udc_num_configuration) {
800082be:	13 89       	ld.ub	r9,r9[0x0]
800082c0:	f0 09 18 00 	cp.b	r9,r8
800082c4:	fe 90 fe 71 	breq	80007fa6 <udc_process_setup+0x92>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
800082c8:	0d dc       	ld.ub	r12,r6[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
800082ca:	e0 66 0b 6c 	mov	r6,2924
800082ce:	6c 09       	ld.w	r9,r6[0x0]
800082d0:	72 0a       	ld.w	r10,r9[0x0]
800082d2:	15 c9       	ld.ub	r9,r10[0x4]
800082d4:	f8 09 18 00 	cp.b	r9,r12
800082d8:	fe 98 fe 67 	brls	80007fa6 <udc_process_setup+0x92>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
800082dc:	e0 61 0b 7c 	mov	r1,2940
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
800082e0:	83 0a       	st.w	r1[0x0],r10
800082e2:	15 a4       	ld.ub	r4,r10[0x2]
800082e4:	15 b5       	ld.ub	r5,r10[0x3]
800082e6:	eb e4 10 85 	or	r5,r5,r4<<0x8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
800082ea:	5c c5       	swap.bh	r5
800082ec:	5c 75       	castu.h	r5
800082ee:	14 9b       	mov	r11,r10

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
800082f0:	14 99       	mov	r9,r10
800082f2:	0a 0a       	add	r10,r5
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
800082f4:	30 45       	mov	r5,4
800082f6:	c0 48       	rjmp	800082fe <udc_process_setup+0x3ea>
800082f8:	13 8b       	ld.ub	r11,r9[0x0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800082fa:	16 09       	add	r9,r11
800082fc:	12 9b       	mov	r11,r9
800082fe:	12 3a       	cp.w	r10,r9
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80008300:	e0 88 00 d3 	brls	800084a6 <udc_process_setup+0x592>
80008304:	13 94       	ld.ub	r4,r9[0x1]
80008306:	ea 04 18 00 	cp.b	r4,r5
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000830a:	cf 71       	brne	800082f8 <udc_process_setup+0x3e4>
8000830c:	13 a4       	ld.ub	r4,r9[0x2]
8000830e:	f8 04 18 00 	cp.b	r4,r12
80008312:	cf 31       	brne	800082f8 <udc_process_setup+0x3e4>
80008314:	13 b4       	ld.ub	r4,r9[0x3]
80008316:	f0 04 18 00 	cp.b	r4,r8
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
8000831a:	ce f1       	brne	800082f8 <udc_process_setup+0x3e4>
8000831c:	83 0b       	st.w	r1[0x0],r11
8000831e:	6c 08       	ld.w	r8,r6[0x0]
80008320:	70 18       	ld.w	r8,r8[0x4]
80008322:	f0 0c 03 28 	ld.w	r8,r8[r12<<0x2]
80008326:	70 3c       	ld.w	r12,r8[0xc]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80008328:	5d 1c       	icall	r12
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
8000832a:	e0 68 0b 70 	mov	r8,2928

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
8000832e:	30 1b       	mov	r11,1
80008330:	b0 8c       	st.b	r8[0x0],r12
80008332:	10 9c       	mov	r12,r8
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
80008334:	fe b0 de e0 	rcall	800040f4 <udd_set_setup_payload>
80008338:	da 3a       	popm	r0-r7,pc,r12=1
8000833a:	30 18       	mov	r8,1
8000833c:	f0 09 19 00 	cp.h	r9,r8
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
80008340:	fe 91 fe 00 	brne	80007f40 <udc_process_setup+0x2c>
80008344:	e0 6c 0b 78 	mov	r12,2936
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80008348:	30 1b       	mov	r11,1

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
8000834a:	fe b0 de d5 	rcall	800040f4 <udd_set_setup_payload>
8000834e:	da 3a       	popm	r0-r7,pc,r12=1
80008350:	8c 1a       	ld.sh	r10,r6[0x2]
80008352:	30 2b       	mov	r11,2
80008354:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80008358:	f2 05 16 08 	lsr	r5,r9,0x8
8000835c:	f6 05 18 00 	cp.b	r5,r11
80008360:	c5 f0       	breq	8000841e <udc_process_setup+0x50a>
80008362:	e0 8b 00 09 	brhi	80008374 <udc_process_setup+0x460>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
80008366:	30 19       	mov	r9,1
80008368:	f2 05 18 00 	cp.b	r5,r9
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
8000836c:	c5 20       	breq	80008410 <udc_process_setup+0x4fc>
8000836e:	0f 85       	ld.ub	r5,r7[0x0]
80008370:	fe 9f fd e2 	bral	80007f34 <udc_process_setup+0x20>
80008374:	30 3a       	mov	r10,3
80008376:	f4 05 18 00 	cp.b	r5,r10
8000837a:	c6 c0       	breq	80008452 <udc_process_setup+0x53e>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
8000837c:	30 f9       	mov	r9,15
8000837e:	f2 05 18 00 	cp.b	r5,r9
80008382:	cf 61       	brne	8000836e <udc_process_setup+0x45a>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
80008384:	32 08       	mov	r8,32
80008386:	70 28       	ld.w	r8,r8[0x8]
80008388:	58 08       	cp.w	r8,0
8000838a:	cf 20       	breq	8000836e <udc_process_setup+0x45a>
8000838c:	11 ab       	ld.ub	r11,r8[0x2]
8000838e:	10 9c       	mov	r12,r8
80008390:	11 b8       	ld.ub	r8,r8[0x3]
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
80008392:	f1 eb 10 8b 	or	r11,r8,r11<<0x8
80008396:	fe b0 de af 	rcall	800040f4 <udd_set_setup_payload>
8000839a:	8e 69       	ld.sh	r9,r7[0xc]
8000839c:	8e 38       	ld.sh	r8,r7[0x6]
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
8000839e:	f0 09 19 00 	cp.h	r9,r8
800083a2:	fe 98 ff 14 	brls	800081ca <udc_process_setup+0x2b6>
	if (!udc_iface_disable(iface_num)) {
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
800083a6:	e0 69 0c 58 	mov	r9,3160
800083aa:	b2 68       	st.h	r9[0xc],r8
800083ac:	c0 fb       	rjmp	800081ca <udc_process_setup+0x2b6>
800083ae:	08 9b       	mov	r11,r4
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
800083b0:	0c 9c       	mov	r12,r6
800083b2:	5c 5b       	castu.b	r11

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
800083b4:	fe b0 fc 5a 	rcall	80007c68 <udc_iface_enable>
800083b8:	c0 6b       	rjmp	800081c4 <udc_process_setup+0x2b0>
	if (udc_num_configuration == 0) {
800083ba:	fe b0 fd 5f 	rcall	80007e78 <udc_reset>
800083be:	0d b8       	ld.ub	r8,r6[0x3]
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
800083c0:	e0 69 0b 78 	mov	r9,2936
800083c4:	b2 88       	st.b	r9[0x0],r8
800083c6:	58 08       	cp.w	r8,0
800083c8:	fe 90 ff 01 	breq	800081ca <udc_process_setup+0x2b6>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800083cc:	20 18       	sub	r8,1
800083ce:	6a 19       	ld.w	r9,r5[0x4]
800083d0:	e0 66 0b 6c 	mov	r6,2924
800083d4:	f2 08 00 38 	add	r8,r9,r8<<0x3
800083d8:	8d 08       	st.w	r6[0x0],r8
800083da:	70 08       	ld.w	r8,r8[0x0]
			iface_num++) {
800083dc:	11 c8       	ld.ub	r8,r8[0x4]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800083de:	e8 08 18 00 	cp.b	r8,r4
800083e2:	fe 90 fe f4 	breq	800081ca <udc_process_setup+0x2b6>
800083e6:	30 05       	mov	r5,0
800083e8:	c0 a8       	rjmp	800083fc <udc_process_setup+0x4e8>
800083ea:	2f f5       	sub	r5,-1
800083ec:	6c 08       	ld.w	r8,r6[0x0]
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
800083ee:	5c 55       	castu.b	r5
800083f0:	70 08       	ld.w	r8,r8[0x0]
800083f2:	11 c8       	ld.ub	r8,r8[0x4]
800083f4:	ea 08 18 00 	cp.b	r8,r5
800083f8:	fe 98 fe e9 	brls	800081ca <udc_process_setup+0x2b6>
800083fc:	0a 9c       	mov	r12,r5
800083fe:	30 0b       	mov	r11,0
80008400:	fe b0 fc 34 	rcall	80007c68 <udc_iface_enable>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80008404:	cf 31       	brne	800083ea <udc_process_setup+0x4d6>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80008406:	0f 85       	ld.ub	r5,r7[0x0]
80008408:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000840c:	fe 9f fd 96 	bral	80007f38 <udc_process_setup+0x24>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80008410:	32 08       	mov	r8,32
80008412:	70 08       	ld.w	r8,r8[0x0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80008414:	10 9c       	mov	r12,r8
80008416:	11 8b       	ld.ub	r11,r8[0x0]
80008418:	fe b0 de 6e 	rcall	800040f4 <udd_set_setup_payload>
8000841c:	cb fb       	rjmp	8000839a <udc_process_setup+0x486>
8000841e:	f1 da c0 08 	bfextu	r8,r10,0x0,0x8
80008422:	32 09       	mov	r9,32
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80008424:	72 0a       	ld.w	r10,r9[0x0]
80008426:	f5 3a 00 11 	ld.ub	r10,r10[17]
8000842a:	f0 0a 18 00 	cp.b	r10,r8
8000842e:	fe 98 ff a0 	brls	8000836e <udc_process_setup+0x45a>
80008432:	72 19       	ld.w	r9,r9[0x4]
80008434:	f2 08 03 38 	ld.w	r8,r9[r8<<0x3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
80008438:	11 a9       	ld.ub	r9,r8[0x2]
8000843a:	10 9c       	mov	r12,r8
8000843c:	11 b8       	ld.ub	r8,r8[0x3]
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000843e:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80008442:	5c c8       	swap.bh	r8
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80008444:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80008448:	fe b0 de 56 	rcall	800040f4 <udd_set_setup_payload>
8000844c:	6c 28       	ld.w	r8,r6[0x8]
8000844e:	b0 95       	st.b	r8[0x1],r5
80008450:	ca 5b       	rjmp	8000839a <udc_process_setup+0x486>
80008452:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
80008456:	58 18       	cp.w	r8,1
80008458:	c0 b0       	breq	8000846e <udc_process_setup+0x55a>
8000845a:	58 28       	cp.w	r8,2
8000845c:	c2 00       	breq	8000849c <udc_process_setup+0x588>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
8000845e:	58 08       	cp.w	r8,0
80008460:	c8 71       	brne	8000836e <udc_process_setup+0x45a>
80008462:	30 4b       	mov	r11,4
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
80008464:	e0 6c 03 94 	mov	r12,916
80008468:	fe b0 de 46 	rcall	800040f4 <udd_set_setup_payload>
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
8000846c:	c9 7b       	rjmp	8000839a <udc_process_setup+0x486>
8000846e:	31 cb       	mov	r11,28
80008470:	30 d6       	mov	r6,13
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
80008472:	e0 69 03 64 	mov	r9,868
80008476:	e0 6a 03 74 	mov	r10,884
8000847a:	12 98       	mov	r8,r9
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
8000847c:	f4 cc ff fe 	sub	r12,r10,-2
		udd_set_setup_payload(
80008480:	11 35       	ld.ub	r5,r8++
80008482:	5c c5       	swap.bh	r5
80008484:	18 b5       	st.h	r12++,r5
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
80008486:	f0 09 01 05 	sub	r5,r8,r9
8000848a:	ec 05 18 00 	cp.b	r5,r6
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000848e:	cf 93       	brcs	80008480 <udc_process_setup+0x56c>
80008490:	b4 8b       	st.b	r10[0x0],r11
80008492:	e0 6c 03 74 	mov	r12,884
80008496:	fe b0 de 2f 	rcall	800040f4 <udd_set_setup_payload>
8000849a:	c8 0b       	rjmp	8000839a <udc_process_setup+0x486>
8000849c:	31 eb       	mov	r11,30
8000849e:	30 e6       	mov	r6,14
800084a0:	e0 69 03 54 	mov	r9,852
800084a4:	ce 9b       	rjmp	80008476 <udc_process_setup+0x562>
800084a6:	0f 85       	ld.ub	r5,r7[0x0]
800084a8:	83 0b       	st.w	r1[0x0],r11
800084aa:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800084ae:	fe 9f fd 45 	bral	80007f38 <udc_process_setup+0x24>
800084b2:	d7 03       	nop

800084b4 <uhc_enumeration_step2>:
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
800084b4:	fe c9 ff 34 	sub	r9,pc,-204
800084b8:	e0 68 0b a0 	mov	r8,2976
	uhc_sof_timeout = timeout;
800084bc:	91 09       	st.w	r8[0x0],r9
800084be:	31 49       	mov	r9,20
 * Lets USB line in IDLE state during 20ms.
 */
static void uhc_enumeration_step2(void)
{
	uhc_enable_timeout_callback(20, uhc_enumeration_step3);
}
800084c0:	e0 68 0c bc 	mov	r8,3260
800084c4:	b0 89       	st.b	r8[0x0],r9
800084c6:	5e fc       	retal	r12

800084c8 <uhc_enumeration_step8>:
800084c8:	fe c9 f8 a4 	sub	r9,pc,-1884
800084cc:	e0 68 0b a0 	mov	r8,2976
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
	uhc_sof_timeout = timeout;
800084d0:	91 09       	st.w	r8[0x0],r9
800084d2:	36 49       	mov	r9,100
 */
static void uhc_enumeration_step8(void)
{
	// Wait 100ms
	uhc_enable_timeout_callback(100, uhc_enumeration_step9);
}
800084d4:	e0 68 0c bc 	mov	r8,3260
800084d8:	b0 89       	st.b	r8[0x0],r9
800084da:	5e fc       	retal	r12

800084dc <uhc_notify_sof>:
800084dc:	eb cd 40 80 	pushm	r7,lr
800084e0:	18 97       	mov	r7,r12
800084e2:	fe b0 d5 2b 	rcall	80002f38 <uhi_midi_sof>
		if (uhc_uhis[i].sof_notify != NULL) {
			uhc_uhis[i].sof_notify(b_micro);
		}
	}

	if (!b_micro) {
800084e6:	58 07       	cp.w	r7,0
800084e8:	c0 a1       	brne	800084fc <uhc_notify_sof+0x20>
		// Manage SOF timeout
		if (uhc_sof_timeout) {
800084ea:	e0 68 0c bc 	mov	r8,3260
800084ee:	11 89       	ld.ub	r9,r8[0x0]
800084f0:	58 09       	cp.w	r9,0
			if (--uhc_sof_timeout == 0) {
800084f2:	c0 50       	breq	800084fc <uhc_notify_sof+0x20>
800084f4:	20 19       	sub	r9,1
800084f6:	5c 59       	castu.b	r9
800084f8:	b0 89       	st.b	r8[0x0],r9
800084fa:	c0 30       	breq	80008500 <uhc_notify_sof+0x24>
800084fc:	e3 cd 80 80 	ldm	sp++,r7,pc
				uhc_sof_timeout_callback();
80008500:	e0 68 0b a0 	mov	r8,2976
80008504:	70 08       	ld.w	r8,r8[0x0]
80008506:	5d 18       	icall	r8
80008508:	e3 cd 80 80 	ldm	sp++,r7,pc

8000850c <uhc_suspend>:
8000850c:	d4 01       	pushm	lr
8000850e:	20 2d       	sub	sp,8
80008510:	e0 68 0b 9c 	mov	r8,2972
	uhd_disable(b_id_stop);
}

void uhc_suspend(bool b_remotewakeup)
{
	if (uhc_enum_try) {
80008514:	11 88       	ld.ub	r8,r8[0x0]
80008516:	58 08       	cp.w	r8,0
		// enumeration on-going, the USB suspend can't be done
		return;
	}

	if (b_remotewakeup) {
80008518:	c0 51       	brne	80008522 <uhc_suspend+0x16>
8000851a:	58 0c       	cp.w	r12,0
		uhc_remotewakeup(true);
	}
	// Suspend all USB devices
	uhd_suspend();
8000851c:	c0 51       	brne	80008526 <uhc_suspend+0x1a>
8000851e:	fe b0 e7 19 	rcall	80005350 <uhd_suspend>
}
80008522:	2f ed       	sub	sp,-8
	usb_setup_req_t req;
	uhc_device_t *dev;

	dev = &g_uhc_device_root;
	while(1) {
		if (dev->conf_desc->bmAttributes & USB_CONFIG_ATTR_REMOTE_WAKEUP) {
80008524:	d8 02       	popm	pc
80008526:	e0 6a 0b 80 	mov	r10,2944
8000852a:	74 69       	ld.w	r9,r10[0x18]
8000852c:	13 f9       	ld.ub	r9,r9[0x7]
8000852e:	ed b9 00 05 	bld	r9,0x5
			if (b_enable) {
				req.bRequest = USB_REQ_SET_FEATURE;
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
80008532:	cf 61       	brne	8000851e <uhc_suspend+0x12>
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
			req.wLength = 0;
80008534:	30 09       	mov	r9,0
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
80008536:	ba 88       	st.b	sp[0x0],r8
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80008538:	ba 38       	st.h	sp[0x6],r8
8000853a:	ba 28       	st.h	sp[0x4],r8
8000853c:	f5 3c 00 12 	ld.ub	r12,r10[18]

	dev = &g_uhc_device_root;
	while(1) {
		if (dev->conf_desc->bmAttributes & USB_CONFIG_ATTR_REMOTE_WAKEUP) {
			if (b_enable) {
				req.bRequest = USB_REQ_SET_FEATURE;
80008540:	12 98       	mov	r8,r9
80008542:	1a d9       	st.w	--sp,r9
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
80008544:	30 39       	mov	r9,3
			req.wIndex = 0;
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80008546:	ba d9       	st.b	sp[0x5],r9
80008548:	30 19       	mov	r9,1
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
8000854a:	fa cb ff fc 	sub	r11,sp,-4
			req.wIndex = 0;
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
8000854e:	ba 39       	st.h	sp[0x6],r9
80008550:	10 9a       	mov	r10,r8
80008552:	10 99       	mov	r9,r8
80008554:	fe b0 e9 ac 	rcall	800058ac <uhd_setup_request>
80008558:	2f fd       	sub	sp,-4
8000855a:	ce 2b       	rjmp	8000851e <uhc_suspend+0x12>

8000855c <uhc_stop>:
8000855c:	d4 01       	pushm	lr
8000855e:	fe b0 ee e5 	rcall	80006328 <uhd_disable>
80008562:	d8 02       	popm	pc

80008564 <uhc_start>:
80008564:	d4 01       	pushm	lr
80008566:	3f f9       	mov	r9,-1
 *
 * @{
 */
void uhc_start(void)
{
	g_uhc_device_root.address = UHC_USB_ADD_NOT_VALID;
80008568:	e0 68 0b 80 	mov	r8,2944
8000856c:	f1 69 00 12 	st.b	r8[18],r9
	uhc_sof_timeout = 0; // No callback registered on a SOF timeout
80008570:	30 09       	mov	r9,0
80008572:	e0 68 0c bc 	mov	r8,3260
	uhd_enable();
80008576:	b0 89       	st.b	r8[0x0],r9
}
80008578:	fe b0 ee 24 	rcall	800061c0 <uhd_enable>
8000857c:	d8 02       	popm	pc
8000857e:	d7 03       	nop

80008580 <uhc_enumeration_step3>:
80008580:	d4 01       	pushm	lr
80008582:	fe cc ff ea 	sub	r12,pc,-22
80008586:	fe b0 e6 db 	rcall	8000533c <uhd_send_reset>
 * Reset USB line.
 */
static void uhc_enumeration_step3(void)
{
	uhc_enumeration_reset(uhc_enumeration_step4);
}
8000858a:	d8 02       	popm	pc

8000858c <uhc_enumeration_step7>:
8000858c:	d4 01       	pushm	lr
8000858e:	fe cc 00 c6 	sub	r12,pc,198
80008592:	fe b0 e6 d5 	rcall	8000533c <uhd_send_reset>
 * Reset USB line.
 */
static void uhc_enumeration_step7(void)
{
	uhc_enumeration_reset(uhc_enumeration_step8);
}
80008596:	d8 02       	popm	pc

80008598 <uhc_enumeration_step4>:
80008598:	d4 01       	pushm	lr
8000859a:	fe b0 e6 b5 	rcall	80005304 <uhd_get_speed>
8000859e:	e0 68 0b 80 	mov	r8,2944
 * \brief Device enumeration step 4
 * Lets USB line in IDLE state during 100ms.
 */
static void uhc_enumeration_step4(void)
{
	uhc_dev_enum->speed = uhd_get_speed();
800085a2:	fe c9 f7 8a 	sub	r9,pc,-2166
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
800085a6:	91 5c       	st.w	r8[0x14],r12
	uhc_sof_timeout = timeout;
800085a8:	e0 68 0b a0 	mov	r8,2976
800085ac:	91 09       	st.w	r8[0x0],r9
 */
static void uhc_enumeration_step4(void)
{
	uhc_dev_enum->speed = uhd_get_speed();
	uhc_enable_timeout_callback(100, uhc_enumeration_step5);
}
800085ae:	36 49       	mov	r9,100
800085b0:	e0 68 0c bc 	mov	r8,3260
800085b4:	b0 89       	st.b	r8[0x0],r9
800085b6:	d8 02       	popm	pc

800085b8 <uhc_enumeration_error>:
800085b8:	d4 21       	pushm	r4-r7,lr
800085ba:	18 96       	mov	r6,r12
800085bc:	58 7c       	cp.w	r12,7
800085be:	c2 c0       	breq	80008616 <uhc_enumeration_error+0x5e>
800085c0:	e0 67 0b 80 	mov	r7,2944
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
800085c4:	e0 6b 00 ff 	mov	r11,255
800085c8:	ef 3c 00 12 	ld.ub	r12,r7[18]
800085cc:	fe b0 ea 06 	rcall	800059d8 <uhd_ep_free>

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
800085d0:	6e 6c       	ld.w	r12,r7[0x18]
800085d2:	58 0c       	cp.w	r12,0
		free(uhc_dev_enum->conf_desc);
800085d4:	c0 50       	breq	800085de <uhc_enumeration_error+0x26>
800085d6:	e0 a0 0a 0d 	rcall	800099f0 <free>
		uhc_dev_enum->conf_desc = NULL;
800085da:	30 08       	mov	r8,0
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
800085dc:	8f 68       	st.w	r7[0x18],r8
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
800085de:	e0 65 0b 9c 	mov	r5,2972
800085e2:	30 04       	mov	r4,0
800085e4:	0b 88       	ld.ub	r8,r5[0x0]
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
800085e6:	ef 64 00 12 	st.b	r7[18],r4
800085ea:	f0 c9 ff ff 	sub	r9,r8,-1
800085ee:	aa 89       	st.b	r5[0x0],r9
800085f0:	30 39       	mov	r9,3
800085f2:	f2 08 18 00 	cp.b	r8,r9
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
800085f6:	e0 88 00 0b 	brls	8000860c <uhc_enumeration_error+0x54>
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
800085fa:	fe b0 e6 ab 	rcall	80005350 <uhd_suspend>
800085fe:	0c 9b       	mov	r11,r6
80008600:	e0 6c 0b 80 	mov	r12,2944
	uhc_enum_try = 0;
80008604:	fe b0 d5 62 	rcall	800030c8 <ui_host_enum_event>
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80008608:	aa 84       	st.b	r5[0x0],r4
8000860a:	d8 22       	popm	r4-r7,pc
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
		// Restart enumeration at beginning
		uhc_enumeration_step1();
		return;
8000860c:	fe cc 01 58 	sub	r12,pc,344
 * \param status        Enumeration error occurred
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
80008610:	fe b0 e6 96 	rcall	8000533c <uhd_send_reset>
		return; // Abort enumeration process
80008614:	d8 22       	popm	r4-r7,pc
80008616:	30 09       	mov	r9,0
80008618:	e0 68 0b 9c 	mov	r8,2972
8000861c:	b0 89       	st.b	r8[0x0],r9
8000861e:	d8 22       	popm	r4-r7,pc

80008620 <uhc_notify_connection>:
80008620:	eb cd 40 e0 	pushm	r5-r7,lr
80008624:	18 96       	mov	r6,r12
80008626:	58 0c       	cp.w	r12,0
80008628:	c2 31       	brne	8000866e <uhc_notify_connection+0x4e>
8000862a:	e0 67 0b 80 	mov	r7,2944
8000862e:	3f f5       	mov	r5,-1
80008630:	ef 3c 00 12 	ld.ub	r12,r7[18]
80008634:	ea 0c 18 00 	cp.b	r12,r5
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
		uhc_enumeration_step1();
	} else {
		if (uhc_dev_enum == dev) {
			// Eventually stop enumeration timeout on-going on this device
			uhc_sof_timeout = 0;
80008638:	c2 f0       	breq	80008696 <uhc_notify_connection+0x76>
		}
		// Abort all transfers (endpoint control and other) and free pipe(s)
		uhd_ep_free(dev->address, 0xFF);
8000863a:	e0 68 0c bc 	mov	r8,3260
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
		uhc_enumeration_step1();
	} else {
		if (uhc_dev_enum == dev) {
			// Eventually stop enumeration timeout on-going on this device
			uhc_sof_timeout = 0;
8000863e:	e0 6b 00 ff 	mov	r11,255
		}
		// Abort all transfers (endpoint control and other) and free pipe(s)
		uhd_ep_free(dev->address, 0xFF);
80008642:	b0 86       	st.b	r8[0x0],r6

		// Disable all USB interfaces (this includes HUB interface)
		for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(dev);
80008644:	fe b0 e9 ca 	rcall	800059d8 <uhd_ep_free>
80008648:	0e 9c       	mov	r12,r7
8000864a:	fe b0 f7 f9 	rcall	8000763c <uhi_hid_mouse_uninstall>
8000864e:	0e 9c       	mov	r12,r7
		}

		UHC_CONNECTION_EVENT(dev, false);
80008650:	fe b0 d5 14 	rcall	80003078 <uhi_midi_uninstall>
80008654:	0e 9c       	mov	r12,r7
80008656:	0c 9b       	mov	r11,r6
		dev->address = UHC_USB_ADD_NOT_VALID;
80008658:	fe b0 d5 7a 	rcall	8000314c <ui_host_connection_event>
		// Free USB configuration descriptor buffer
		if (dev->conf_desc != NULL) {
8000865c:	ef 65 00 12 	st.b	r7[18],r5
80008660:	6e 6c       	ld.w	r12,r7[0x18]
			free(dev->conf_desc);
80008662:	58 0c       	cp.w	r12,0
80008664:	c0 30       	breq	8000866a <uhc_notify_connection+0x4a>
80008666:	e0 a0 09 c5 	rcall	800099f0 <free>
	if (b_plug) {
		uhc_enum_try = 1;
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
8000866a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
		uhc_dev_enum->address = 0;
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
8000866e:	e0 68 0b 80 	mov	r8,2944
		uhc_enum_try = 1;
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
		uhc_dev_enum->address = 0;
80008672:	30 09       	mov	r9,0
	if (b_plug) {
		uhc_enum_try = 1;
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
80008674:	10 9c       	mov	r12,r8
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
	if (b_plug) {
		uhc_enum_try = 1;
80008676:	f1 69 00 12 	st.b	r8[18],r9
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
		uhc_dev_enum->address = 0;
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
8000867a:	91 69       	st.w	r8[0x18],r9
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
	if (b_plug) {
		uhc_enum_try = 1;
8000867c:	30 19       	mov	r9,1
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
		uhc_dev_enum->address = 0;
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
8000867e:	e0 68 0b 9c 	mov	r8,2972
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80008682:	30 1b       	mov	r11,1
80008684:	b0 89       	st.b	r8[0x0],r9
80008686:	fe b0 d5 63 	rcall	8000314c <ui_host_connection_event>
8000868a:	fe cc 01 d6 	sub	r12,pc,470
8000868e:	fe b0 e6 57 	rcall	8000533c <uhd_send_reset>
80008692:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008696:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000869a:	d7 03       	nop

8000869c <uhc_resume>:
8000869c:	d4 01       	pushm	lr
8000869e:	e0 68 0b 80 	mov	r8,2944
800086a2:	f1 39 00 12 	ld.ub	r9,r8[18]
800086a6:	3f f8       	mov	r8,-1
800086a8:	f0 09 18 00 	cp.b	r9,r8
800086ac:	c0 50       	breq	800086b6 <uhc_resume+0x1a>
800086ae:	fe b0 e6 ab 	rcall	80005404 <uhd_is_suspend>
800086b2:	c0 21       	brne	800086b6 <uhc_resume+0x1a>
800086b4:	d8 02       	popm	pc
800086b6:	fe b0 ea 4f 	rcall	80005b54 <uhd_resume>
{
	if (!uhc_is_suspend()) {
		return;
	}
	// Resume all USB devices
	uhd_resume();
800086ba:	d8 02       	popm	pc

800086bc <uhc_notify_resume>:
800086bc:	d4 01       	pushm	lr
800086be:	20 2d       	sub	sp,8
800086c0:	e0 69 0b 80 	mov	r9,2944
800086c4:	72 68       	ld.w	r8,r9[0x18]
800086c6:	11 f8       	ld.ub	r8,r8[0x7]
	usb_setup_req_t req;
	uhc_device_t *dev;

	dev = &g_uhc_device_root;
	while(1) {
		if (dev->conf_desc->bmAttributes & USB_CONFIG_ATTR_REMOTE_WAKEUP) {
800086c8:	ed b8 00 05 	bld	r8,0x5
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
800086cc:	c1 61       	brne	800086f8 <uhc_notify_resume+0x3c>
800086ce:	f3 3c 00 12 	ld.ub	r12,r9[18]
800086d2:	30 08       	mov	r8,0
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
			req.wLength = 0;
800086d4:	30 09       	mov	r9,0
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
800086d6:	ba 38       	st.h	sp[0x6],r8
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
800086d8:	ba 28       	st.h	sp[0x4],r8
800086da:	1a d9       	st.w	--sp,r9
	while(1) {
		if (dev->conf_desc->bmAttributes & USB_CONFIG_ATTR_REMOTE_WAKEUP) {
			if (b_enable) {
				req.bRequest = USB_REQ_SET_FEATURE;
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
800086dc:	12 98       	mov	r8,r9
800086de:	30 19       	mov	r9,1
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
800086e0:	ba d9       	st.b	sp[0x5],r9
800086e2:	30 09       	mov	r9,0
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
800086e4:	ba c9       	st.b	sp[0x4],r9
			req.wIndex = 0;
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
800086e6:	30 19       	mov	r9,1
800086e8:	fa cb ff fc 	sub	r11,sp,-4
800086ec:	ba 39       	st.h	sp[0x6],r9
800086ee:	10 9a       	mov	r10,r8
800086f0:	10 99       	mov	r9,r8
800086f2:	fe b0 e8 dd 	rcall	800058ac <uhd_setup_request>
}

void uhc_notify_resume(void)
{
	uhc_remotewakeup(false);
	UHC_WAKEUP_EVENT();
800086f6:	2f fd       	sub	sp,-4
800086f8:	fe b0 d6 04 	rcall	80003300 <ui_host_wakeup_event>
}
800086fc:	2f ed       	sub	sp,-8
800086fe:	d8 02       	popm	pc

80008700 <uhc_enumeration_step14>:
80008700:	eb cd 40 e0 	pushm	r5-r7,lr
80008704:	20 2d       	sub	sp,8
80008706:	58 0b       	cp.w	r11,0
80008708:	5f 18       	srne	r8
8000870a:	30 89       	mov	r9,8
{
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
8000870c:	f2 0a 19 00 	cp.h	r10,r9
80008710:	5f 89       	srls	r9
80008712:	10 49       	or	r9,r8
80008714:	30 08       	mov	r8,0
80008716:	f0 09 18 00 	cp.b	r9,r8
8000871a:	c3 11       	brne	8000877c <uhc_enumeration_step14+0x7c>
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
8000871c:	e0 67 0b 80 	mov	r7,2944
80008720:	30 29       	mov	r9,2
{
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
80008722:	6e 68       	ld.w	r8,r7[0x18]
80008724:	11 9b       	ld.ub	r11,r8[0x1]
80008726:	f2 0b 18 00 	cp.b	r11,r9
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
8000872a:	c3 b0       	breq	800087a0 <uhc_enumeration_step14+0xa0>
8000872c:	ef 3c 00 12 	ld.ub	r12,r7[18]
80008730:	e0 6b 00 ff 	mov	r11,255
80008734:	fe b0 e9 52 	rcall	800059d8 <uhd_ep_free>

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80008738:	6e 6c       	ld.w	r12,r7[0x18]
8000873a:	58 0c       	cp.w	r12,0
		free(uhc_dev_enum->conf_desc);
8000873c:	c0 70       	breq	8000874a <uhc_enumeration_step14+0x4a>
8000873e:	e0 a0 09 59 	rcall	800099f0 <free>
		uhc_dev_enum->conf_desc = NULL;
80008742:	e0 68 0b 80 	mov	r8,2944
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008746:	30 09       	mov	r9,0
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008748:	91 69       	st.w	r8[0x18],r9
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
8000874a:	e0 66 0b 9c 	mov	r6,2972
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
8000874e:	30 05       	mov	r5,0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008750:	0d 88       	ld.ub	r8,r6[0x0]
80008752:	ef 65 00 12 	st.b	r7[18],r5
80008756:	f0 c9 ff ff 	sub	r9,r8,-1
8000875a:	ac 89       	st.b	r6[0x0],r9
8000875c:	30 39       	mov	r9,3
8000875e:	f2 08 18 00 	cp.b	r8,r9
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80008762:	e0 88 00 12 	brls	80008786 <uhc_enumeration_step14+0x86>
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
80008766:	fe b0 e5 f5 	rcall	80005350 <uhd_suspend>
8000876a:	30 3b       	mov	r11,3
	uhc_enum_try = 0;
8000876c:	e0 6c 0b 80 	mov	r12,2944
			0,
			NULL, uhc_enumeration_step15)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008770:	fe b0 d4 ac 	rcall	800030c8 <ui_host_enum_event>

	if ((status != UHD_TRANS_NOERROR)
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
80008774:	ac 85       	st.b	r6[0x0],r5
80008776:	2f ed       	sub	sp,-8
80008778:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
8000877c:	58 1b       	cp.w	r11,1
8000877e:	c0 b0       	breq	80008794 <uhc_enumeration_step14+0x94>
80008780:	e0 67 0b 80 	mov	r7,2944
			0,
			NULL, uhc_enumeration_step15)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008784:	cd 4b       	rjmp	8000872c <uhc_enumeration_step14+0x2c>
80008786:	fe cc 02 d2 	sub	r12,pc,722
 * \param status        Enumeration error occurred
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
8000878a:	fe b0 e5 d9 	rcall	8000533c <uhd_send_reset>
			0,
			NULL, uhc_enumeration_step15)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
8000878e:	2f ed       	sub	sp,-8
80008790:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
80008794:	e0 69 0b 9c 	mov	r9,2972
80008798:	b2 88       	st.b	r9[0x0],r8
8000879a:	2f ed       	sub	sp,-8
{
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
8000879c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800087a0:	11 b9       	ld.ub	r9,r8[0x3]
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
	}
	// Check if unless one USB interface is supported by UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		switch (uhc_uhis[i].install(uhc_dev_enum)) {
800087a2:	11 a8       	ld.ub	r8,r8[0x2]
800087a4:	f3 e8 10 88 	or	r8,r9,r8<<0x8
800087a8:	5c c8       	swap.bh	r8
800087aa:	f4 08 19 00 	cp.h	r8,r10
800087ae:	cb f1       	brne	8000872c <uhc_enumeration_step14+0x2c>
800087b0:	fe c6 8f fc 	sub	r6,pc,-28676
800087b4:	0e 9c       	mov	r12,r7
800087b6:	6c 08       	ld.w	r8,r6[0x0]
800087b8:	5d 18       	icall	r8
			break;

		default:
			// USB host hardware limitation
			// Free all endpoints
			uhd_ep_free(UHC_DEVICE_ENUM_ADD,0xFF);
800087ba:	c1 61       	brne	800087e6 <uhc_enumeration_step14+0xe6>
800087bc:	30 15       	mov	r5,1
800087be:	6c 48       	ld.w	r8,r6[0x10]
800087c0:	e0 6c 0b 80 	mov	r12,2944
			UHC_ENUM_EVENT(uhc_dev_enum,UHC_ENUM_HARDWARE_LIMIT);
800087c4:	5d 18       	icall	r8
800087c6:	c1 40       	breq	800087ee <uhc_enumeration_step14+0xee>
800087c8:	58 1c       	cp.w	r12,1
800087ca:	c2 d0       	breq	80008824 <uhc_enumeration_step14+0x124>
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
800087cc:	e0 6b 00 ff 	mov	r11,255
800087d0:	30 1c       	mov	r12,1
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
	}
	// Check if unless one USB interface is supported by UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		switch (uhc_uhis[i].install(uhc_dev_enum)) {
800087d2:	fe b0 e9 03 	rcall	800059d8 <uhd_ep_free>
800087d6:	30 4b       	mov	r11,4
800087d8:	e0 6c 0b 80 	mov	r12,2944
		// Abort enumeration, set line in suspend mode
		uhc_enumeration_suspend();
		return;
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
800087dc:	fe b0 d4 76 	rcall	800030c8 <ui_host_enum_event>
800087e0:	fe b0 e5 b8 	rcall	80005350 <uhd_suspend>
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
800087e4:	cc 9b       	rjmp	80008776 <uhc_enumeration_step14+0x76>
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
800087e6:	58 1c       	cp.w	r12,1
	req.wIndex = 0;
	req.wLength = 0;
800087e8:	cf 21       	brne	800087cc <uhc_enumeration_step14+0xcc>
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
	req.wIndex = 0;
800087ea:	30 05       	mov	r5,0
	req.wLength = 0;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800087ec:	ce 9b       	rjmp	800087be <uhc_enumeration_step14+0xbe>
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
800087ee:	30 09       	mov	r9,0
	req.wIndex = 0;
	req.wLength = 0;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800087f0:	30 0b       	mov	r11,0
800087f2:	6e 6a       	ld.w	r10,r7[0x18]
800087f4:	ba 8b       	st.b	sp[0x0],r11
800087f6:	30 9b       	mov	r11,9
800087f8:	ba 9b       	st.b	sp[0x1],r11
800087fa:	15 da       	ld.ub	r10,r10[0x5]
800087fc:	ba 39       	st.h	sp[0x6],r9
800087fe:	ba 29       	st.h	sp[0x4],r9
80008800:	fe c9 fc 98 	sub	r9,pc,-872
80008804:	ba 1a       	st.h	sp[0x2],r10
80008806:	30 08       	mov	r8,0
			&req,
			NULL,
			0,
			NULL, uhc_enumeration_step15)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80008808:	1a d9       	st.w	--sp,r9
8000880a:	10 9a       	mov	r10,r8
8000880c:	fa cb ff fc 	sub	r11,sp,-4
			// Abort enumeration, set line in suspend mode
			uhc_enumeration_suspend();
			return;
		}
	}
	if (!b_conf_supported) {
80008810:	10 99       	mov	r9,r8
80008812:	30 1c       	mov	r12,1
		// No USB interface supported
		UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_UNSUPPORTED);
80008814:	fe b0 e8 4c 	rcall	800058ac <uhd_setup_request>
80008818:	2f fd       	sub	sp,-4
8000881a:	58 0c       	cp.w	r12,0
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
8000881c:	ca d1       	brne	80008776 <uhc_enumeration_step14+0x76>
8000881e:	30 6c       	mov	r12,6
80008820:	cc ce       	rcall	800085b8 <uhc_enumeration_error>
80008822:	ca ab       	rjmp	80008776 <uhc_enumeration_step14+0x76>
80008824:	58 05       	cp.w	r5,0
80008826:	ce 41       	brne	800087ee <uhc_enumeration_step14+0xee>
80008828:	18 9b       	mov	r11,r12
8000882a:	e0 6c 0b 80 	mov	r12,2944
8000882e:	fe b0 d4 4d 	rcall	800030c8 <ui_host_enum_event>
80008832:	fe b0 e5 8f 	rcall	80005350 <uhd_suspend>
80008836:	ca 0b       	rjmp	80008776 <uhc_enumeration_step14+0x76>

80008838 <uhc_enumeration_step12>:
80008838:	eb cd 40 e0 	pushm	r5-r7,lr
8000883c:	20 2d       	sub	sp,8
8000883e:	58 0b       	cp.w	r11,0
80008840:	5f 18       	srne	r8
80008842:	31 29       	mov	r9,18
80008844:	f2 0a 19 00 	cp.h	r10,r9
80008848:	5f 19       	srne	r9
8000884a:	10 49       	or	r9,r8
8000884c:	30 08       	mov	r8,0
8000884e:	f0 09 18 00 	cp.b	r9,r8
80008852:	c3 71       	brne	800088c0 <uhc_enumeration_step12+0x88>
{
	usb_setup_req_t req;
	uint8_t conf_num;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
80008854:	e0 67 0b 80 	mov	r7,2944
80008858:	30 18       	mov	r8,1
8000885a:	0f 99       	ld.ub	r9,r7[0x1]
8000885c:	f0 09 18 00 	cp.b	r9,r8
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80008860:	c3 50       	breq	800088ca <uhc_enumeration_step12+0x92>
80008862:	ef 3c 00 12 	ld.ub	r12,r7[18]
80008866:	e0 6b 00 ff 	mov	r11,255
8000886a:	fe b0 e8 b7 	rcall	800059d8 <uhd_ep_free>

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
8000886e:	6e 6c       	ld.w	r12,r7[0x18]
80008870:	58 0c       	cp.w	r12,0
		free(uhc_dev_enum->conf_desc);
80008872:	c0 70       	breq	80008880 <uhc_enumeration_step12+0x48>
80008874:	e0 a0 08 be 	rcall	800099f0 <free>
		uhc_dev_enum->conf_desc = NULL;
80008878:	e0 68 0b 80 	mov	r8,2944
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
8000887c:	30 09       	mov	r9,0
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
8000887e:	91 69       	st.w	r8[0x18],r9
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008880:	e0 66 0b 9c 	mov	r6,2972
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008884:	30 05       	mov	r5,0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008886:	0d 88       	ld.ub	r8,r6[0x0]
80008888:	ef 65 00 12 	st.b	r7[18],r5
8000888c:	f0 c9 ff ff 	sub	r9,r8,-1
80008890:	ac 89       	st.b	r6[0x0],r9
80008892:	30 39       	mov	r9,3
80008894:	f2 08 18 00 	cp.b	r8,r9
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80008898:	e0 88 00 0d 	brls	800088b2 <uhc_enumeration_step12+0x7a>
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
8000889c:	fe b0 e5 5a 	rcall	80005350 <uhd_suspend>
800088a0:	30 3b       	mov	r11,3
	uhc_enum_try = 0;
800088a2:	e0 6c 0b 80 	mov	r12,2944
			sizeof(usb_conf_desc_t),
			NULL, uhc_enumeration_step13)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
800088a6:	fe b0 d4 11 	rcall	800030c8 <ui_host_enum_event>
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
800088aa:	ac 85       	st.b	r6[0x0],r5
800088ac:	2f ed       	sub	sp,-8
800088ae:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			sizeof(usb_conf_desc_t),
			NULL, uhc_enumeration_step13)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
800088b2:	fe cc 03 fe 	sub	r12,pc,1022
	uint8_t conf_num;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
800088b6:	fe b0 e5 43 	rcall	8000533c <uhd_send_reset>
800088ba:	2f ed       	sub	sp,-8
800088bc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
		conf_num = UHC_DEVICE_CONF(uhc_dev_enum);
	} else {
		conf_num = 1;
	}

	uhc_dev_enum->conf_desc = malloc(sizeof(usb_conf_desc_t));
800088c0:	58 1b       	cp.w	r11,1
800088c2:	c2 50       	breq	8000890c <uhc_enumeration_step12+0xd4>
800088c4:	e0 67 0b 80 	mov	r7,2944
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
800088c8:	cc db       	rjmp	80008862 <uhc_enumeration_step12+0x2a>
800088ca:	30 9c       	mov	r12,9
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
800088cc:	e0 a0 08 9a 	rcall	80009a00 <malloc>
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
800088d0:	8f 6c       	st.w	r7[0x18],r12
800088d2:	c1 a0       	breq	80008906 <uhc_enumeration_step12+0xce>
800088d4:	38 08       	mov	r8,-128
	req.wIndex = 0;
800088d6:	ba 88       	st.b	sp[0x0],r8
800088d8:	30 68       	mov	r8,6
	req.wLength = sizeof(usb_conf_desc_t);
800088da:	ba 98       	st.b	sp[0x1],r8
800088dc:	e0 68 02 00 	mov	r8,512
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800088e0:	ba 18       	st.h	sp[0x2],r8
800088e2:	30 08       	mov	r8,0
800088e4:	ba 28       	st.h	sp[0x4],r8
800088e6:	30 98       	mov	r8,9
800088e8:	ba 38       	st.h	sp[0x6],r8
800088ea:	fe c8 ff d2 	sub	r8,pc,-46
800088ee:	18 9a       	mov	r10,r12
800088f0:	1a d8       	st.w	--sp,r8
800088f2:	30 99       	mov	r9,9
800088f4:	fa cb ff fc 	sub	r11,sp,-4
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			sizeof(usb_conf_desc_t),
			NULL, uhc_enumeration_step13)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800088f8:	30 08       	mov	r8,0
800088fa:	30 1c       	mov	r12,1
800088fc:	fe b0 e7 d8 	rcall	800058ac <uhd_setup_request>
 * \param status        Enumeration error occurred
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
80008900:	2f fd       	sub	sp,-4
80008902:	58 0c       	cp.w	r12,0
			sizeof(usb_conf_desc_t),
			NULL, uhc_enumeration_step13)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008904:	cd 41       	brne	800088ac <uhc_enumeration_step12+0x74>
80008906:	30 6c       	mov	r12,6
80008908:	c5 8e       	rcall	800085b8 <uhc_enumeration_error>
8000890a:	cd 1b       	rjmp	800088ac <uhc_enumeration_step12+0x74>
8000890c:	e0 69 0b 9c 	mov	r9,2972
80008910:	b2 88       	st.b	r9[0x0],r8
80008912:	2f ed       	sub	sp,-8
80008914:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008918 <uhc_enumeration_step13>:
80008918:	d4 21       	pushm	r4-r7,lr
8000891a:	20 2d       	sub	sp,8
8000891c:	58 0b       	cp.w	r11,0
8000891e:	5f 18       	srne	r8
80008920:	30 99       	mov	r9,9
80008922:	f2 0a 19 00 	cp.h	r10,r9
80008926:	5f 19       	srne	r9
80008928:	10 49       	or	r9,r8
8000892a:	30 08       	mov	r8,0
8000892c:	f0 09 18 00 	cp.b	r9,r8
80008930:	c3 01       	brne	80008990 <uhc_enumeration_step13+0x78>
80008932:	e0 67 0b 80 	mov	r7,2944
80008936:	30 29       	mov	r9,2
80008938:	6e 68       	ld.w	r8,r7[0x18]
8000893a:	11 9a       	ld.ub	r10,r8[0x1]
	uint16_t conf_size;
	uint16_t bus_power = 0;
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
8000893c:	f2 0a 18 00 	cp.b	r10,r9
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80008940:	c3 80       	breq	800089b0 <uhc_enumeration_step13+0x98>
80008942:	ef 3c 00 12 	ld.ub	r12,r7[18]
80008946:	e0 6b 00 ff 	mov	r11,255
8000894a:	fe b0 e8 47 	rcall	800059d8 <uhd_ep_free>

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
8000894e:	6e 6c       	ld.w	r12,r7[0x18]
80008950:	58 0c       	cp.w	r12,0
		free(uhc_dev_enum->conf_desc);
80008952:	c0 70       	breq	80008960 <uhc_enumeration_step13+0x48>
80008954:	e0 a0 08 4e 	rcall	800099f0 <free>
		uhc_dev_enum->conf_desc = NULL;
80008958:	e0 68 0b 80 	mov	r8,2944
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
8000895c:	30 09       	mov	r9,0
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
8000895e:	91 69       	st.w	r8[0x18],r9
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008960:	e0 66 0b 9c 	mov	r6,2972
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008964:	30 05       	mov	r5,0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008966:	0d 88       	ld.ub	r8,r6[0x0]
80008968:	ef 65 00 12 	st.b	r7[18],r5
8000896c:	f0 c9 ff ff 	sub	r9,r8,-1
80008970:	ac 89       	st.b	r6[0x0],r9
80008972:	30 39       	mov	r9,3
80008974:	f2 08 18 00 	cp.b	r8,r9
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80008978:	e0 88 00 11 	brls	8000899a <uhc_enumeration_step13+0x82>
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
8000897c:	fe b0 e4 ea 	rcall	80005350 <uhd_suspend>
80008980:	30 3b       	mov	r11,3
	uhc_enum_try = 0;
80008982:	e0 6c 0b 80 	mov	r12,2944
			conf_size,
			NULL, uhc_enumeration_step14)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008986:	fe b0 d3 a1 	rcall	800030c8 <ui_host_enum_event>
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
8000898a:	ac 85       	st.b	r6[0x0],r5
8000898c:	2f ed       	sub	sp,-8
8000898e:	d8 22       	popm	r4-r7,pc
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80008990:	58 1b       	cp.w	r11,1
80008992:	c0 a0       	breq	800089a6 <uhc_enumeration_step13+0x8e>
80008994:	e0 67 0b 80 	mov	r7,2944
			conf_size,
			NULL, uhc_enumeration_step14)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008998:	cd 5b       	rjmp	80008942 <uhc_enumeration_step13+0x2a>
 * \param status        Enumeration error occurred
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
8000899a:	fe cc 04 e6 	sub	r12,pc,1254
			conf_size,
			NULL, uhc_enumeration_step14)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
8000899e:	fe b0 e4 cf 	rcall	8000533c <uhd_send_reset>
		}
		// Go to USB HUB parent
		dev = dev->hub;
	}
#else
	if (!(uhc_dev_enum->conf_desc->bmAttributes
800089a2:	2f ed       	sub	sp,-8
800089a4:	d8 22       	popm	r4-r7,pc
800089a6:	e0 69 0b 9c 	mov	r9,2972
			&USB_CONFIG_ATTR_SELF_POWERED)) {
		bus_power = uhc_dev_enum->conf_desc->bMaxPower * 2;
800089aa:	b2 88       	st.b	r9[0x0],r8
800089ac:	2f ed       	sub	sp,-8
800089ae:	d8 22       	popm	r4-r7,pc
800089b0:	11 f9       	ld.ub	r9,r8[0x7]
800089b2:	ed b9 00 06 	bld	r9,0x6
800089b6:	c1 10       	breq	800089d8 <uhc_enumeration_step13+0xc0>
800089b8:	f1 3a 00 08 	ld.ub	r10,r8[8]
	}
#endif
	if ((bus_power + uhc_power_running) > USB_HOST_POWER_MAX) {
		// USB interfaces consumption too high
		UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_OVERCURRENT);
800089bc:	e0 69 01 f4 	mov	r9,500
800089c0:	a1 7a       	lsl	r10,0x1
800089c2:	f2 0a 19 00 	cp.h	r10,r9
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
800089c6:	e0 88 00 09 	brls	800089d8 <uhc_enumeration_step13+0xc0>
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
800089ca:	0e 9c       	mov	r12,r7
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
800089cc:	30 2b       	mov	r11,2
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
800089ce:	fe b0 d3 7d 	rcall	800030c8 <ui_host_enum_event>
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
800089d2:	fe b0 e4 bf 	rcall	80005350 <uhd_suspend>
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
800089d6:	cd bb       	rjmp	8000898c <uhc_enumeration_step13+0x74>
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
800089d8:	6e 69       	ld.w	r9,r7[0x18]
800089da:	11 ba       	ld.ub	r10,r8[0x3]
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
800089dc:	12 9c       	mov	r12,r9
800089de:	11 a5       	ld.ub	r5,r8[0x2]
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
	uhc_dev_enum->conf_desc = malloc(conf_size);
800089e0:	13 d4       	ld.ub	r4,r9[0x5]
800089e2:	f5 e5 10 85 	or	r5,r10,r5<<0x8
800089e6:	e0 a0 08 05 	rcall	800099f0 <free>
800089ea:	5c c5       	swap.bh	r5
	if (uhc_dev_enum->conf_desc == NULL) {
800089ec:	5c 85       	casts.h	r5
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType =
800089ee:	ed d5 c0 10 	bfextu	r6,r5,0x0,0x10
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
800089f2:	0c 9c       	mov	r12,r6
800089f4:	e0 a0 08 06 	rcall	80009a00 <malloc>
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
	req.wIndex = 0;
800089f8:	8f 6c       	st.w	r7[0x18],r12
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800089fa:	c1 90       	breq	80008a2c <uhc_enumeration_step13+0x114>
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
	req.wIndex = 0;
	req.wLength = conf_size;
800089fc:	38 08       	mov	r8,-128
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800089fe:	ba 88       	st.b	sp[0x0],r8
	// Send USB device descriptor request
	req.bmRequestType =
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
80008a00:	30 68       	mov	r8,6
	req.wIndex = 0;
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80008a02:	ba 98       	st.b	sp[0x1],r8
	// Send USB device descriptor request
	req.bmRequestType =
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
80008a04:	30 08       	mov	r8,0
	req.wIndex = 0;
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80008a06:	ba 28       	st.h	sp[0x4],r8
	// Send USB device descriptor request
	req.bmRequestType =
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
80008a08:	fe c8 03 08 	sub	r8,pc,776
	req.wIndex = 0;
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80008a0c:	ba 35       	st.h	sp[0x6],r5
80008a0e:	18 9a       	mov	r10,r12
80008a10:	20 14       	sub	r4,1
80008a12:	0c 99       	mov	r9,r6
80008a14:	a9 b4       	sbr	r4,0x9
80008a16:	30 1c       	mov	r12,1
80008a18:	ba 14       	st.h	sp[0x2],r4
80008a1a:	1a d8       	st.w	--sp,r8
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			conf_size,
			NULL, uhc_enumeration_step14)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80008a1c:	30 08       	mov	r8,0
80008a1e:	fa cb ff fc 	sub	r11,sp,-4
80008a22:	fe b0 e7 45 	rcall	800058ac <uhd_setup_request>
80008a26:	2f fd       	sub	sp,-4
80008a28:	58 0c       	cp.w	r12,0
80008a2a:	cb 11       	brne	8000898c <uhc_enumeration_step13+0x74>
80008a2c:	30 6c       	mov	r12,6
80008a2e:	fe b0 fd c5 	rcall	800085b8 <uhc_enumeration_error>
80008a32:	ca db       	rjmp	8000898c <uhc_enumeration_step13+0x74>

80008a34 <uhc_enumeration_step6>:
80008a34:	eb cd 40 e0 	pushm	r5-r7,lr
80008a38:	58 0b       	cp.w	r11,0
80008a3a:	5f 18       	srne	r8
80008a3c:	30 79       	mov	r9,7
80008a3e:	f2 0a 19 00 	cp.h	r10,r9
80008a42:	5f 89       	srls	r9
80008a44:	10 49       	or	r9,r8
80008a46:	30 08       	mov	r8,0
80008a48:	f0 09 18 00 	cp.b	r9,r8
80008a4c:	c2 f1       	brne	80008aaa <uhc_enumeration_step6+0x76>
80008a4e:	e0 67 0b 80 	mov	r7,2944
80008a52:	30 18       	mov	r8,1
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
	UNUSED(add);
	if ((status != UHD_TRANS_NOERROR) || (payload_trans < 8)
80008a54:	0f 99       	ld.ub	r9,r7[0x1]
80008a56:	f0 09 18 00 	cp.b	r9,r8
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80008a5a:	c3 80       	breq	80008aca <uhc_enumeration_step6+0x96>
80008a5c:	ef 3c 00 12 	ld.ub	r12,r7[18]
80008a60:	e0 6b 00 ff 	mov	r11,255
80008a64:	fe b0 e7 ba 	rcall	800059d8 <uhd_ep_free>

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80008a68:	6e 6c       	ld.w	r12,r7[0x18]
80008a6a:	58 0c       	cp.w	r12,0
		free(uhc_dev_enum->conf_desc);
80008a6c:	c0 70       	breq	80008a7a <uhc_enumeration_step6+0x46>
80008a6e:	e0 a0 07 c1 	rcall	800099f0 <free>
		uhc_dev_enum->conf_desc = NULL;
80008a72:	e0 68 0b 80 	mov	r8,2944
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008a76:	30 09       	mov	r9,0
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008a78:	91 69       	st.w	r8[0x18],r9
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008a7a:	e0 66 0b 9c 	mov	r6,2972
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008a7e:	30 05       	mov	r5,0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008a80:	0d 88       	ld.ub	r8,r6[0x0]
80008a82:	ef 65 00 12 	st.b	r7[18],r5
80008a86:	f0 c9 ff ff 	sub	r9,r8,-1
80008a8a:	ac 89       	st.b	r6[0x0],r9
80008a8c:	30 39       	mov	r9,3
80008a8e:	f2 08 18 00 	cp.b	r8,r9
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80008a92:	e0 88 00 11 	brls	80008ab4 <uhc_enumeration_step6+0x80>
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
80008a96:	fe b0 e4 5d 	rcall	80005350 <uhd_suspend>
80008a9a:	30 3b       	mov	r11,3
	uhc_enum_try = 0;
80008a9c:	e0 6c 0b 80 	mov	r12,2944
80008aa0:	fe b0 d3 14 	rcall	800030c8 <ui_host_enum_event>
		uint16_t payload_trans)
{
	UNUSED(add);
	if ((status != UHD_TRANS_NOERROR) || (payload_trans < 8)
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
80008aa4:	ac 85       	st.b	r6[0x0],r5
80008aa6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80008aaa:	58 1b       	cp.w	r11,1
80008aac:	c0 a0       	breq	80008ac0 <uhc_enumeration_step6+0x8c>
80008aae:	e0 67 0b 80 	mov	r7,2944
80008ab2:	cd 5b       	rjmp	80008a5c <uhc_enumeration_step6+0x28>
 * \param status        Enumeration error occurred
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
80008ab4:	fe cc 06 00 	sub	r12,pc,1536
80008ab8:	fe b0 e4 42 	rcall	8000533c <uhd_send_reset>
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80008abc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008ac0:	e0 69 0b 9c 	mov	r9,2972
	uhc_sof_timeout = timeout;
80008ac4:	b2 88       	st.b	r9[0x0],r8
80008ac6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008aca:	fe c9 05 3e 	sub	r9,pc,1342
80008ace:	e0 68 0b a0 	mov	r8,2976
80008ad2:	91 09       	st.w	r8[0x0],r9
80008ad4:	31 49       	mov	r9,20
80008ad6:	e0 68 0c bc 	mov	r8,3260
80008ada:	b0 89       	st.b	r8[0x0],r9
80008adc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008ae0 <uhc_enumeration_step10>:
80008ae0:	eb cd 40 e0 	pushm	r5-r7,lr
80008ae4:	58 0b       	cp.w	r11,0
80008ae6:	c2 a0       	breq	80008b3a <uhc_enumeration_step10+0x5a>
80008ae8:	58 1b       	cp.w	r11,1
80008aea:	c3 90       	breq	80008b5c <uhc_enumeration_step10+0x7c>
80008aec:	e0 67 0b 80 	mov	r7,2944
80008af0:	e0 6b 00 ff 	mov	r11,255
80008af4:	ef 3c 00 12 	ld.ub	r12,r7[18]
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80008af8:	fe b0 e7 70 	rcall	800059d8 <uhd_ep_free>

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80008afc:	6e 6c       	ld.w	r12,r7[0x18]
80008afe:	58 0c       	cp.w	r12,0
		free(uhc_dev_enum->conf_desc);
80008b00:	c0 50       	breq	80008b0a <uhc_enumeration_step10+0x2a>
80008b02:	e0 a0 07 77 	rcall	800099f0 <free>
		uhc_dev_enum->conf_desc = NULL;
80008b06:	30 08       	mov	r8,0
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008b08:	8f 68       	st.w	r7[0x18],r8
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008b0a:	e0 66 0b 9c 	mov	r6,2972
80008b0e:	30 05       	mov	r5,0
80008b10:	0d 88       	ld.ub	r8,r6[0x0]
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008b12:	ef 65 00 12 	st.b	r7[18],r5
80008b16:	f0 c9 ff ff 	sub	r9,r8,-1
80008b1a:	ac 89       	st.b	r6[0x0],r9
80008b1c:	30 39       	mov	r9,3
80008b1e:	f2 08 18 00 	cp.b	r8,r9
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80008b22:	e0 88 00 17 	brls	80008b50 <uhc_enumeration_step10+0x70>
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
80008b26:	fe b0 e4 15 	rcall	80005350 <uhd_suspend>
80008b2a:	30 3b       	mov	r11,3
80008b2c:	e0 6c 0b 80 	mov	r12,2944
	uhc_enum_try = 0;
80008b30:	fe b0 d2 cc 	rcall	800030c8 <ui_host_enum_event>
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80008b34:	ac 85       	st.b	r6[0x0],r5
80008b36:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	uhc_sof_timeout = timeout;
80008b3a:	fe c9 fe 1e 	sub	r9,pc,-482
80008b3e:	e0 68 0b a0 	mov	r8,2976
80008b42:	91 09       	st.w	r8[0x0],r9
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80008b44:	31 49       	mov	r9,20
80008b46:	e0 68 0c bc 	mov	r8,3260
80008b4a:	b0 89       	st.b	r8[0x0],r9
80008b4c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
 * \param status        Enumeration error occurred
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
80008b50:	fe cc 06 9c 	sub	r12,pc,1692
80008b54:	fe b0 e3 f4 	rcall	8000533c <uhd_send_reset>
80008b58:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008b5c:	30 09       	mov	r9,0
80008b5e:	e0 68 0b 9c 	mov	r8,2972
80008b62:	b0 89       	st.b	r8[0x0],r9
80008b64:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008b68 <uhc_enumeration_step15>:
80008b68:	eb cd 40 e0 	pushm	r5-r7,lr
80008b6c:	20 1d       	sub	sp,4
80008b6e:	30 06       	mov	r6,0
80008b70:	58 0b       	cp.w	r11,0
80008b72:	5f 18       	srne	r8
80008b74:	ec 0a 19 00 	cp.h	r10,r6
80008b78:	5f 17       	srne	r7
80008b7a:	10 47       	or	r7,r8
80008b7c:	ec 07 18 00 	cp.b	r7,r6
80008b80:	c1 41       	brne	80008ba8 <uhc_enumeration_step15+0x40>
80008b82:	e0 6c 0b 80 	mov	r12,2944
		return;
	}

	// Enable all UHIs supported
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		uhc_uhis[i].enable(uhc_dev_enum);
80008b86:	fe b0 f5 71 	rcall	80007668 <uhi_hid_mouse_enable>
80008b8a:	e0 6c 0b 80 	mov	r12,2944
		return;
	}
	uhc_dev_enum->lpm_desc = NULL;
#endif

	uhc_enum_try = 0;
80008b8e:	fe b0 d0 c7 	rcall	80002d1c <uhi_midi_enable>
80008b92:	e0 68 0b 9c 	mov	r8,2972

	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
80008b96:	30 0b       	mov	r11,0
80008b98:	b0 87       	st.b	r8[0x0],r7
}
80008b9a:	e0 6c 0b 80 	mov	r12,2944
80008b9e:	fe b0 d2 95 	rcall	800030c8 <ui_host_enum_event>
		uint16_t payload_trans)
{
	UNUSED(add);
	if ((status!=UHD_TRANS_NOERROR) || (payload_trans!=0)) {
		for(uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(uhc_dev_enum);
80008ba2:	2f fd       	sub	sp,-4
80008ba4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008ba8:	e0 67 0b 80 	mov	r7,2944
80008bac:	50 0b       	stdsp	sp[0x0],r11
80008bae:	0e 9c       	mov	r12,r7
		}
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
80008bb0:	fe b0 f5 46 	rcall	8000763c <uhi_hid_mouse_uninstall>
80008bb4:	0e 9c       	mov	r12,r7
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80008bb6:	fe b0 d2 61 	rcall	80003078 <uhi_midi_uninstall>
80008bba:	40 0b       	lddsp	r11,sp[0x0]
80008bbc:	58 1b       	cp.w	r11,1
80008bbe:	c2 e0       	breq	80008c1a <uhc_enumeration_step15+0xb2>
80008bc0:	ef 3c 00 12 	ld.ub	r12,r7[18]

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80008bc4:	e0 6b 00 ff 	mov	r11,255
		free(uhc_dev_enum->conf_desc);
80008bc8:	fe b0 e7 08 	rcall	800059d8 <uhd_ep_free>
		uhc_dev_enum->conf_desc = NULL;
80008bcc:	6e 6c       	ld.w	r12,r7[0x18]
80008bce:	58 0c       	cp.w	r12,0
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008bd0:	c0 50       	breq	80008bda <uhc_enumeration_step15+0x72>
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008bd2:	e0 a0 07 0f 	rcall	800099f0 <free>
80008bd6:	30 08       	mov	r8,0
80008bd8:	8f 68       	st.w	r7[0x18],r8
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008bda:	e0 66 0b 9c 	mov	r6,2972
80008bde:	30 05       	mov	r5,0
80008be0:	0d 88       	ld.ub	r8,r6[0x0]
80008be2:	ef 65 00 12 	st.b	r7[18],r5
80008be6:	f0 c9 ff ff 	sub	r9,r8,-1
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80008bea:	ac 89       	st.b	r6[0x0],r9
80008bec:	30 39       	mov	r9,3
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
80008bee:	f2 08 18 00 	cp.b	r8,r9
80008bf2:	e0 88 00 0d 	brls	80008c0c <uhc_enumeration_step15+0xa4>
	uhc_enum_try = 0;
80008bf6:	fe b0 e3 ad 	rcall	80005350 <uhd_suspend>
#endif

	uhc_enum_try = 0;

	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
}
80008bfa:	30 3b       	mov	r11,3
80008bfc:	e0 6c 0b 80 	mov	r12,2944
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80008c00:	fe b0 d2 64 	rcall	800030c8 <ui_host_enum_event>
#endif

	uhc_enum_try = 0;

	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
}
80008c04:	ac 85       	st.b	r6[0x0],r5
80008c06:	2f fd       	sub	sp,-4
80008c08:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
 * \param status        Enumeration error occurred
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
80008c0c:	fe cc 07 58 	sub	r12,pc,1880
80008c10:	fe b0 e3 96 	rcall	8000533c <uhd_send_reset>
80008c14:	2f fd       	sub	sp,-4
80008c16:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008c1a:	e0 68 0b 9c 	mov	r8,2972
80008c1e:	b0 86       	st.b	r8[0x0],r6
80008c20:	cc 1b       	rjmp	80008ba2 <uhc_enumeration_step15+0x3a>
80008c22:	d7 03       	nop

80008c24 <uhc_enumeration_step9>:
80008c24:	eb cd 40 e0 	pushm	r5-r7,lr
80008c28:	20 2d       	sub	sp,8
80008c2a:	30 18       	mov	r8,1
80008c2c:	e0 67 0b 80 	mov	r7,2944
80008c30:	ba 18       	st.h	sp[0x2],r8
80008c32:	ef 68 00 12 	st.b	r7[18],r8
80008c36:	30 08       	mov	r8,0
80008c38:	ba 38       	st.h	sp[0x6],r8
80008c3a:	ba 28       	st.h	sp[0x4],r8
80008c3c:	ba 88       	st.b	sp[0x0],r8
80008c3e:	30 58       	mov	r8,5
{
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_ADDRESS;
80008c40:	30 0b       	mov	r11,0
#endif
	req.wIndex = 0;
	req.wLength = 0;

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
80008c42:	ba 98       	st.b	sp[0x1],r8
80008c44:	16 9c       	mov	r12,r11
80008c46:	fe b0 e6 c9 	rcall	800059d8 <uhd_ep_free>
	if (!uhd_ep0_alloc(0, uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
80008c4a:	0f fb       	ld.ub	r11,r7[0x7]
80008c4c:	30 0c       	mov	r12,0
80008c4e:	fe b0 e5 0c 	rcall	80005666 <uhd_ep0_alloc>
80008c52:	18 96       	mov	r6,r12
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
		return;
	}

	if (!uhd_setup_request(0,
80008c54:	c3 f0       	breq	80008cd2 <uhc_enumeration_step9+0xae>
80008c56:	fe c9 01 76 	sub	r9,pc,374
80008c5a:	30 08       	mov	r8,0
80008c5c:	1a d9       	st.w	--sp,r9
80008c5e:	0e 9a       	mov	r10,r7
80008c60:	fa cb ff fc 	sub	r11,sp,-4
80008c64:	31 29       	mov	r9,18
80008c66:	10 9c       	mov	r12,r8
80008c68:	fe b0 e6 22 	rcall	800058ac <uhd_setup_request>
80008c6c:	2f fd       	sub	sp,-4
80008c6e:	18 96       	mov	r6,r12
			NULL,
			uhc_enumeration_step10)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008c70:	58 0c       	cp.w	r12,0
80008c72:	c0 40       	breq	80008c7a <uhc_enumeration_step9+0x56>
80008c74:	2f ed       	sub	sp,-8
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80008c76:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008c7a:	ef 3c 00 12 	ld.ub	r12,r7[18]
80008c7e:	e0 6b 00 ff 	mov	r11,255

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80008c82:	fe b0 e6 ab 	rcall	800059d8 <uhd_ep_free>
80008c86:	6e 6c       	ld.w	r12,r7[0x18]
		free(uhc_dev_enum->conf_desc);
80008c88:	58 0c       	cp.w	r12,0
80008c8a:	c0 40       	breq	80008c92 <uhc_enumeration_step9+0x6e>
		uhc_dev_enum->conf_desc = NULL;
80008c8c:	e0 a0 06 b2 	rcall	800099f0 <free>
	}
	uhc_dev_enum->address = 0;
80008c90:	8f 66       	st.w	r7[0x18],r6
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008c92:	e0 66 0b 9c 	mov	r6,2972
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008c96:	30 05       	mov	r5,0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008c98:	0d 88       	ld.ub	r8,r6[0x0]
80008c9a:	ef 65 00 12 	st.b	r7[18],r5
80008c9e:	f0 c9 ff ff 	sub	r9,r8,-1
80008ca2:	ac 89       	st.b	r6[0x0],r9
80008ca4:	30 39       	mov	r9,3
80008ca6:	f2 08 18 00 	cp.b	r8,r9
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80008caa:	e0 88 00 0d 	brls	80008cc4 <uhc_enumeration_step9+0xa0>
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
80008cae:	fe b0 e3 51 	rcall	80005350 <uhd_suspend>
80008cb2:	30 6b       	mov	r11,6
	uhc_enum_try = 0;
80008cb4:	e0 6c 0b 80 	mov	r12,2944
			NULL,
			uhc_enumeration_step10)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008cb8:	fe b0 d2 08 	rcall	800030c8 <ui_host_enum_event>
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80008cbc:	ac 85       	st.b	r6[0x0],r5
80008cbe:	2f ed       	sub	sp,-8
80008cc0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			NULL,
			uhc_enumeration_step10)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008cc4:	fe cc 08 10 	sub	r12,pc,2064
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80008cc8:	fe b0 e3 3a 	rcall	8000533c <uhd_send_reset>
80008ccc:	2f ed       	sub	sp,-8
80008cce:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008cd2:	ef 3c 00 12 	ld.ub	r12,r7[18]

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80008cd6:	e0 6b 00 ff 	mov	r11,255
		free(uhc_dev_enum->conf_desc);
80008cda:	fe b0 e6 7f 	rcall	800059d8 <uhd_ep_free>
		uhc_dev_enum->conf_desc = NULL;
80008cde:	6e 6c       	ld.w	r12,r7[0x18]
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008ce0:	58 0c       	cp.w	r12,0
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008ce2:	c0 40       	breq	80008cea <uhc_enumeration_step9+0xc6>
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008ce4:	e0 a0 06 86 	rcall	800099f0 <free>
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008ce8:	8f 66       	st.w	r7[0x18],r6
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008cea:	e0 66 0b 9c 	mov	r6,2972
80008cee:	30 05       	mov	r5,0
80008cf0:	0d 88       	ld.ub	r8,r6[0x0]
80008cf2:	ef 65 00 12 	st.b	r7[18],r5
80008cf6:	f0 c9 ff ff 	sub	r9,r8,-1
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80008cfa:	ac 89       	st.b	r6[0x0],r9
80008cfc:	30 39       	mov	r9,3
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
80008cfe:	f2 08 18 00 	cp.b	r8,r9
80008d02:	fe 98 ff e1 	brls	80008cc4 <uhc_enumeration_step9+0xa0>
	uhc_enum_try = 0;
80008d06:	fe b0 e3 25 	rcall	80005350 <uhd_suspend>
			NULL,
			uhc_enumeration_step10)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008d0a:	30 4b       	mov	r11,4
80008d0c:	e0 6c 0b 80 	mov	r12,2944
80008d10:	fe b0 d1 dc 	rcall	800030c8 <ui_host_enum_event>
80008d14:	ac 85       	st.b	r6[0x0],r5
80008d16:	2f ed       	sub	sp,-8
80008d18:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008d1c <uhc_enumeration_step11>:
80008d1c:	eb cd 40 e0 	pushm	r5-r7,lr
80008d20:	20 2d       	sub	sp,8
80008d22:	30 0b       	mov	r11,0
80008d24:	16 9c       	mov	r12,r11
80008d26:	fe b0 e6 59 	rcall	800059d8 <uhd_ep_free>
80008d2a:	30 1c       	mov	r12,1
80008d2c:	e0 67 0b 80 	mov	r7,2944
80008d30:	0f fb       	ld.ub	r11,r7[0x7]
80008d32:	fe b0 e4 9a 	rcall	80005666 <uhd_ep0_alloc>
80008d36:	18 96       	mov	r6,r12
80008d38:	c4 a0       	breq	80008dcc <uhc_enumeration_step11+0xb0>
80008d3a:	38 08       	mov	r8,-128
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
80008d3c:	ba 88       	st.b	sp[0x0],r8
80008d3e:	30 68       	mov	r8,6
	req.wValue = (USB_DT_DEVICE << 8);
80008d40:	ba 98       	st.b	sp[0x1],r8
80008d42:	e0 68 01 00 	mov	r8,256
	req.wIndex = 0;
80008d46:	ba 18       	st.h	sp[0x2],r8
80008d48:	30 08       	mov	r8,0
	req.wLength = sizeof(usb_dev_desc_t);
80008d4a:	ba 28       	st.h	sp[0x4],r8
80008d4c:	31 28       	mov	r8,18
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80008d4e:	ba 38       	st.h	sp[0x6],r8
80008d50:	fe c8 05 18 	sub	r8,pc,1304
80008d54:	31 29       	mov	r9,18
80008d56:	1a d8       	st.w	--sp,r8
80008d58:	0e 9a       	mov	r10,r7
80008d5a:	fa cb ff fc 	sub	r11,sp,-4
80008d5e:	30 08       	mov	r8,0
80008d60:	30 1c       	mov	r12,1
80008d62:	fe b0 e5 a5 	rcall	800058ac <uhd_setup_request>
80008d66:	2f fd       	sub	sp,-4
80008d68:	18 96       	mov	r6,r12
			sizeof(usb_dev_desc_t),
			NULL, uhc_enumeration_step12)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008d6a:	58 0c       	cp.w	r12,0
80008d6c:	c0 40       	breq	80008d74 <uhc_enumeration_step11+0x58>
80008d6e:	2f ed       	sub	sp,-8
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80008d70:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008d74:	ef 3c 00 12 	ld.ub	r12,r7[18]
80008d78:	e0 6b 00 ff 	mov	r11,255

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80008d7c:	fe b0 e6 2e 	rcall	800059d8 <uhd_ep_free>
80008d80:	6e 6c       	ld.w	r12,r7[0x18]
		free(uhc_dev_enum->conf_desc);
80008d82:	58 0c       	cp.w	r12,0
80008d84:	c0 40       	breq	80008d8c <uhc_enumeration_step11+0x70>
		uhc_dev_enum->conf_desc = NULL;
80008d86:	e0 a0 06 35 	rcall	800099f0 <free>
	}
	uhc_dev_enum->address = 0;
80008d8a:	8f 66       	st.w	r7[0x18],r6
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008d8c:	e0 66 0b 9c 	mov	r6,2972
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008d90:	30 05       	mov	r5,0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008d92:	0d 88       	ld.ub	r8,r6[0x0]
80008d94:	ef 65 00 12 	st.b	r7[18],r5
80008d98:	f0 c9 ff ff 	sub	r9,r8,-1
80008d9c:	ac 89       	st.b	r6[0x0],r9
80008d9e:	30 39       	mov	r9,3
80008da0:	f2 08 18 00 	cp.b	r8,r9
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80008da4:	e0 88 00 0d 	brls	80008dbe <uhc_enumeration_step11+0xa2>
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
80008da8:	fe b0 e2 d4 	rcall	80005350 <uhd_suspend>
80008dac:	30 6b       	mov	r11,6
	uhc_enum_try = 0;
80008dae:	e0 6c 0b 80 	mov	r12,2944
			sizeof(usb_dev_desc_t),
			NULL, uhc_enumeration_step12)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008db2:	fe b0 d1 8b 	rcall	800030c8 <ui_host_enum_event>
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80008db6:	ac 85       	st.b	r6[0x0],r5
80008db8:	2f ed       	sub	sp,-8
80008dba:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			sizeof(usb_dev_desc_t),
			NULL, uhc_enumeration_step12)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008dbe:	fe cc 09 0a 	sub	r12,pc,2314
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80008dc2:	fe b0 e2 bd 	rcall	8000533c <uhd_send_reset>
80008dc6:	2f ed       	sub	sp,-8
80008dc8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008dcc:	ef 3c 00 12 	ld.ub	r12,r7[18]

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80008dd0:	e0 6b 00 ff 	mov	r11,255
		free(uhc_dev_enum->conf_desc);
80008dd4:	fe b0 e6 02 	rcall	800059d8 <uhd_ep_free>
		uhc_dev_enum->conf_desc = NULL;
80008dd8:	6e 6c       	ld.w	r12,r7[0x18]
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008dda:	58 0c       	cp.w	r12,0
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008ddc:	c0 40       	breq	80008de4 <uhc_enumeration_step11+0xc8>
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008dde:	e0 a0 06 09 	rcall	800099f0 <free>
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008de2:	8f 66       	st.w	r7[0x18],r6
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008de4:	e0 66 0b 9c 	mov	r6,2972
80008de8:	30 05       	mov	r5,0
80008dea:	0d 88       	ld.ub	r8,r6[0x0]
80008dec:	ef 65 00 12 	st.b	r7[18],r5
80008df0:	f0 c9 ff ff 	sub	r9,r8,-1
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80008df4:	ac 89       	st.b	r6[0x0],r9
80008df6:	30 39       	mov	r9,3
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
80008df8:	f2 08 18 00 	cp.b	r8,r9
80008dfc:	fe 98 ff e1 	brls	80008dbe <uhc_enumeration_step11+0xa2>
	uhc_enum_try = 0;
80008e00:	fe b0 e2 a8 	rcall	80005350 <uhd_suspend>
			sizeof(usb_dev_desc_t),
			NULL, uhc_enumeration_step12)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008e04:	30 4b       	mov	r11,4
80008e06:	e0 6c 0b 80 	mov	r12,2944
80008e0a:	fe b0 d1 5f 	rcall	800030c8 <ui_host_enum_event>
80008e0e:	ac 85       	st.b	r6[0x0],r5
80008e10:	2f ed       	sub	sp,-8
80008e12:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008e16:	d7 03       	nop

80008e18 <uhc_enumeration_step5>:
80008e18:	eb cd 40 e0 	pushm	r5-r7,lr
80008e1c:	20 2d       	sub	sp,8
80008e1e:	38 08       	mov	r8,-128
80008e20:	ba 88       	st.b	sp[0x0],r8
80008e22:	30 68       	mov	r8,6
80008e24:	ba 98       	st.b	sp[0x1],r8
80008e26:	e0 68 01 00 	mov	r8,256
80008e2a:	ba 18       	st.h	sp[0x2],r8
80008e2c:	30 08       	mov	r8,0
80008e2e:	ba 28       	st.h	sp[0x4],r8
80008e30:	30 88       	mov	r8,8
80008e32:	30 0b       	mov	r11,0

	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_DEVICE << 8);
	req.wIndex = 0;
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
80008e34:	ba 38       	st.h	sp[0x6],r8
			+ sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
80008e36:	16 9c       	mov	r12,r11
80008e38:	fe b0 e5 d0 	rcall	800059d8 <uhd_ep_free>
	if (!uhd_ep0_alloc(0, 64)) {
80008e3c:	34 0b       	mov	r11,64
80008e3e:	30 0c       	mov	r12,0
80008e40:	fe b0 e4 13 	rcall	80005666 <uhd_ep0_alloc>
80008e44:	18 96       	mov	r6,r12
80008e46:	c4 10       	breq	80008ec8 <uhc_enumeration_step5+0xb0>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
		return;
	}
	if (!uhd_setup_request(0,
80008e48:	fe c9 04 14 	sub	r9,pc,1044
80008e4c:	30 08       	mov	r8,0
80008e4e:	1a d9       	st.w	--sp,r9
80008e50:	e0 67 0b 80 	mov	r7,2944
80008e54:	fa cb ff fc 	sub	r11,sp,-4
80008e58:	31 29       	mov	r9,18
80008e5a:	0e 9a       	mov	r10,r7
80008e5c:	10 9c       	mov	r12,r8
80008e5e:	fe b0 e5 27 	rcall	800058ac <uhd_setup_request>
80008e62:	2f fd       	sub	sp,-4
80008e64:	18 96       	mov	r6,r12
			NULL,
			uhc_enumeration_step6)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008e66:	58 0c       	cp.w	r12,0
80008e68:	c0 40       	breq	80008e70 <uhc_enumeration_step5+0x58>
80008e6a:	2f ed       	sub	sp,-8
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80008e6c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008e70:	ef 3c 00 12 	ld.ub	r12,r7[18]
80008e74:	e0 6b 00 ff 	mov	r11,255

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80008e78:	fe b0 e5 b0 	rcall	800059d8 <uhd_ep_free>
80008e7c:	6e 6c       	ld.w	r12,r7[0x18]
		free(uhc_dev_enum->conf_desc);
80008e7e:	58 0c       	cp.w	r12,0
80008e80:	c0 40       	breq	80008e88 <uhc_enumeration_step5+0x70>
		uhc_dev_enum->conf_desc = NULL;
80008e82:	e0 a0 05 b7 	rcall	800099f0 <free>
	}
	uhc_dev_enum->address = 0;
80008e86:	8f 66       	st.w	r7[0x18],r6
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008e88:	e0 66 0b 9c 	mov	r6,2972
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008e8c:	30 05       	mov	r5,0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008e8e:	0d 88       	ld.ub	r8,r6[0x0]
80008e90:	ef 65 00 12 	st.b	r7[18],r5
80008e94:	f0 c9 ff ff 	sub	r9,r8,-1
80008e98:	ac 89       	st.b	r6[0x0],r9
80008e9a:	30 39       	mov	r9,3
80008e9c:	f2 08 18 00 	cp.b	r8,r9
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80008ea0:	e0 88 00 0d 	brls	80008eba <uhc_enumeration_step5+0xa2>
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
80008ea4:	fe b0 e2 56 	rcall	80005350 <uhd_suspend>
80008ea8:	30 6b       	mov	r11,6
	uhc_enum_try = 0;
80008eaa:	e0 6c 0b 80 	mov	r12,2944
			NULL,
			uhc_enumeration_step6)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008eae:	fe b0 d1 0d 	rcall	800030c8 <ui_host_enum_event>
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80008eb2:	ac 85       	st.b	r6[0x0],r5
80008eb4:	2f ed       	sub	sp,-8
80008eb6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			NULL,
			uhc_enumeration_step6)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008eba:	fe cc 0a 06 	sub	r12,pc,2566
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80008ebe:	fe b0 e2 3f 	rcall	8000533c <uhd_send_reset>
80008ec2:	2f ed       	sub	sp,-8
80008ec4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008ec8:	e0 67 0b 80 	mov	r7,2944

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80008ecc:	e0 6b 00 ff 	mov	r11,255
80008ed0:	ef 3c 00 12 	ld.ub	r12,r7[18]
		free(uhc_dev_enum->conf_desc);
80008ed4:	fe b0 e5 82 	rcall	800059d8 <uhd_ep_free>
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008ed8:	6e 6c       	ld.w	r12,r7[0x18]
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008eda:	58 0c       	cp.w	r12,0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008edc:	c0 40       	breq	80008ee4 <uhc_enumeration_step5+0xcc>
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80008ede:	e0 a0 05 89 	rcall	800099f0 <free>
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80008ee2:	8f 66       	st.w	r7[0x18],r6
80008ee4:	e0 66 0b 9c 	mov	r6,2972
80008ee8:	30 05       	mov	r5,0
80008eea:	0d 88       	ld.ub	r8,r6[0x0]
80008eec:	ef 65 00 12 	st.b	r7[18],r5
80008ef0:	f0 c9 ff ff 	sub	r9,r8,-1
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80008ef4:	ac 89       	st.b	r6[0x0],r9
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
80008ef6:	30 39       	mov	r9,3
80008ef8:	f2 08 18 00 	cp.b	r8,r9
80008efc:	fe 98 ff df 	brls	80008eba <uhc_enumeration_step5+0xa2>
			NULL,
			uhc_enumeration_step6)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80008f00:	fe b0 e2 28 	rcall	80005350 <uhd_suspend>
80008f04:	30 4b       	mov	r11,4
80008f06:	e0 6c 0b 80 	mov	r12,2944
80008f0a:	fe b0 d0 df 	rcall	800030c8 <ui_host_enum_event>
80008f0e:	ac 85       	st.b	r6[0x0],r5
80008f10:	2f ed       	sub	sp,-8
80008f12:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008f16:	d7 03       	nop

80008f18 <lcd_clear_line>:
	gpio_set_gpio_pin(DAC1_CS);
	SPIbusy = 0;
}

void lcd_clear_line(uint8_t linenum)
{
80008f18:	eb cd 40 80 	pushm	r7,lr
80008f1c:	18 97       	mov	r7,r12
	dip204_set_cursor_position(1,linenum);
80008f1e:	30 1c       	mov	r12,1
80008f20:	0e 9b       	mov	r11,r7
80008f22:	fe b0 cb 05 	rcall	8000252c <dip204_set_cursor_position>
	dip204_write_string("                    ");
80008f26:	fe cc 99 02 	sub	r12,pc,-26366
80008f2a:	fe b0 ca a3 	rcall	80002470 <dip204_write_string>
	dip204_set_cursor_position(1,linenum);
80008f2e:	0e 9b       	mov	r11,r7
80008f30:	30 1c       	mov	r12,1
80008f32:	fe b0 ca fd 	rcall	8000252c <dip204_set_cursor_position>
	//dip204_hide_cursor();
}
80008f36:	e3 cd 80 80 	ldm	sp++,r7,pc
80008f3a:	d7 03       	nop

80008f3c <dacsend>:
80008f3c:	eb cd 40 fc 	pushm	r2-r7,lr
80008f40:	20 4d       	sub	sp,16
80008f42:	e0 68 03 98 	mov	r8,920
	spi_setupChipReg(SPARE_SPI, &spiOptions, TARGET_PBACLK_FREQ_HZ);
	spi_enable(SPARE_SPI);
}

void dacsend(unsigned char DACvoice, unsigned char DACnum, unsigned short DACval)
{
80008f46:	14 92       	mov	r2,r10
80008f48:	16 94       	mov	r4,r11
80008f4a:	f0 ea 00 08 	ld.d	r10,r8[8]
80008f4e:	fa eb 00 08 	st.d	sp[8],r10
80008f52:	f0 e8 00 00 	ld.d	r8,r8[0]
80008f56:	18 96       	mov	r6,r12
80008f58:	fa e9 00 00 	st.d	sp[0],r8
}

static void setSPI(spi_options_t spiOptions)
{
	SPIbusy = 1;
	spi_disable(SPARE_SPI);
80008f5c:	fe 7c 24 00 	mov	r12,-56320
	cpu_delay_us(12,64000000);//5
}

static void setSPI(spi_options_t spiOptions)
{
	SPIbusy = 1;
80008f60:	e0 63 0b a6 	mov	r3,2982
80008f64:	30 15       	mov	r5,1
80008f66:	a6 85       	st.b	r3[0x0],r5
	spi_disable(SPARE_SPI);
80008f68:	fe b0 cc f9 	rcall	8000295a <spi_disable>
	spi_initMaster(SPARE_SPI, &spiOptions);
80008f6c:	1a 9b       	mov	r11,sp
80008f6e:	fe 7c 24 00 	mov	r12,-56320
80008f72:	fe b0 cc 2c 	rcall	800027ca <spi_initMaster>
	spi_selectionMode(SPARE_SPI, 0, 0, 0);
80008f76:	30 09       	mov	r9,0
80008f78:	fe 7c 24 00 	mov	r12,-56320
80008f7c:	12 9a       	mov	r10,r9
80008f7e:	12 9b       	mov	r11,r9
80008f80:	fe b0 cc 44 	rcall	80002808 <spi_selectionMode>
	spi_selectChip(SPARE_SPI, 0);
80008f84:	30 0b       	mov	r11,0
80008f86:	fe 7c 24 00 	mov	r12,-56320
80008f8a:	fe b0 cc 54 	rcall	80002832 <spi_selectChip>
	spi_setupChipReg(SPARE_SPI, &spiOptions, TARGET_PBACLK_FREQ_HZ);
80008f8e:	1a 9b       	mov	r11,sp
80008f90:	e0 6a 48 00 	mov	r10,18432
80008f94:	ea 1a 01 e8 	orh	r10,0x1e8
80008f98:	fe 7c 24 00 	mov	r12,-56320
80008f9c:	fe b0 cc 86 	rcall	800028a8 <spi_setupChipReg>
	spi_enable(SPARE_SPI);
80008fa0:	fe 7c 24 00 	mov	r12,-56320
80008fa4:	fe b0 cc d8 	rcall	80002954 <spi_enable>
	//DACnum is which type of output it goes to (1 = A, 2 = V, 3 = B)

	SPIbusy = 1;
	setSPI(spiOptions12DAC);

	dacouthigh = (DACval >> 4) & 0xFF;
80008fa8:	5c 72       	castu.h	r2
	dacoutlow = ((DACval << 4) & 0xF0);
80008faa:	e4 08 15 04 	lsl	r8,r2,0x4
	//DACnum is which type of output it goes to (1 = A, 2 = V, 3 = B)

	SPIbusy = 1;
	setSPI(spiOptions12DAC);

	dacouthigh = (DACval >> 4) & 0xFF;
80008fae:	e5 d2 c0 88 	bfextu	r2,r2,0x4,0x8
	dacoutlow = ((DACval << 4) & 0xF0);
80008fb2:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
	//DACnum is which type of output it goes to (1 = A, 2 = V, 3 = B)

	SPIbusy = 1;
	setSPI(spiOptions12DAC);

	dacouthigh = (DACval >> 4) & 0xFF;
80008fb6:	e0 67 0b ac 	mov	r7,2988
	dacoutlow = ((DACval << 4) & 0xF0);
80008fba:	ae 02       	st.h	r7[0x0],r2
80008fbc:	e0 62 0b aa 	mov	r2,2986

	if (DACnum == 1)
80008fc0:	a4 08       	st.h	r2[0x0],r8
80008fc2:	ea 04 18 00 	cp.b	r4,r5
		dacwait2();
		gpio_set_gpio_pin(DAC2_CS);
		dacwait1();
	}

	if (DACnum == 2)
80008fc6:	c6 d0       	breq	800090a0 <dacsend+0x164>
80008fc8:	30 28       	mov	r8,2
80008fca:	f0 04 18 00 	cp.b	r4,r8
		while((spi_write(SPARE_SPI,dacoutlow)) != 0);
		dacwait2();
		gpio_set_gpio_pin(DAC3_CS);
		dacwait1();
	}
	SPIbusy = 0;
80008fce:	c0 60       	breq	80008fda <dacsend+0x9e>
}
80008fd0:	30 08       	mov	r8,0
80008fd2:	a6 88       	st.b	r3[0x0],r8
80008fd4:	2f cd       	sub	sp,-16
		dacwait1();
	}

	if (DACnum == 2)
	{
		gpio_clr_gpio_pin(DAC3_CS);
80008fd6:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80008fda:	36 8c       	mov	r12,104
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008fdc:	fe b0 d7 a0 	rcall	80003f1c <gpio_clr_gpio_pin>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008fe0:	e1 b9 00 42 	mfsr	r9,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008fe4:	f2 ca fd 00 	sub	r10,r9,-768
80008fe8:	e1 b8 00 42 	mfsr	r8,0x108
80008fec:	14 39       	cp.w	r9,r10
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008fee:	e0 8b 00 3d 	brhi	80009068 <dacsend+0x12c>
80008ff2:	12 38       	cp.w	r8,r9
80008ff4:	c0 43       	brcs	80008ffc <dacsend+0xc0>
80008ff6:	14 38       	cp.w	r8,r10
		dacwait1();
		while((spi_write(SPARE_SPI,DACvoice)) != 0);
80008ff8:	e0 88 00 4e 	brls	80009094 <dacsend+0x158>
80008ffc:	0c 9b       	mov	r11,r6
80008ffe:	fe 7c 24 00 	mov	r12,-56320
80009002:	fe b0 cc af 	rcall	80002960 <spi_write>
		while((spi_write(SPARE_SPI,dacouthigh)) !=0);
80009006:	cf b1       	brne	80008ffc <dacsend+0xc0>
80009008:	8e 8b       	ld.uh	r11,r7[0x0]
8000900a:	fe 7c 24 00 	mov	r12,-56320
8000900e:	fe b0 cc a9 	rcall	80002960 <spi_write>
		while((spi_write(SPARE_SPI,dacoutlow)) != 0);
80009012:	cf b1       	brne	80009008 <dacsend+0xcc>
80009014:	84 8b       	ld.uh	r11,r2[0x0]
80009016:	fe 7c 24 00 	mov	r12,-56320
8000901a:	fe b0 cc a3 	rcall	80002960 <spi_write>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000901e:	cf b1       	brne	80009014 <dacsend+0xd8>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009020:	e1 b9 00 42 	mfsr	r9,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009024:	f2 ca fd 00 	sub	r10,r9,-768
80009028:	e1 b8 00 42 	mfsr	r8,0x108
8000902c:	14 39       	cp.w	r9,r10
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000902e:	e0 8b 00 25 	brhi	80009078 <dacsend+0x13c>
80009032:	10 39       	cp.w	r9,r8
80009034:	e0 8b 00 04 	brhi	8000903c <dacsend+0x100>
		dacwait2();
		gpio_set_gpio_pin(DAC3_CS);
80009038:	10 3a       	cp.w	r10,r8
8000903a:	c3 02       	brcc	8000909a <dacsend+0x15e>
8000903c:	36 8c       	mov	r12,104
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000903e:	fe b0 d7 61 	rcall	80003f00 <gpio_set_gpio_pin>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009042:	e1 b8 00 42 	mfsr	r8,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009046:	f0 ca fd 00 	sub	r10,r8,-768
8000904a:	e1 b9 00 42 	mfsr	r9,0x108
8000904e:	14 38       	cp.w	r8,r10
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009050:	e0 8b 00 1c 	brhi	80009088 <dacsend+0x14c>
80009054:	12 38       	cp.w	r8,r9
80009056:	fe 9b ff bd 	brhi	80008fd0 <dacsend+0x94>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000905a:	12 3a       	cp.w	r10,r9
8000905c:	cb a3       	brcs	80008fd0 <dacsend+0x94>
8000905e:	e1 b9 00 42 	mfsr	r9,0x108
80009062:	cf 9b       	rjmp	80009054 <dacsend+0x118>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009064:	e1 b8 00 42 	mfsr	r8,0x108
80009068:	10 39       	cp.w	r9,r8
8000906a:	fe 98 ff fd 	brls	80009064 <dacsend+0x128>
8000906e:	10 3a       	cp.w	r10,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009070:	cf a2       	brcc	80009064 <dacsend+0x128>
80009072:	cc 5b       	rjmp	80008ffc <dacsend+0xc0>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009074:	e1 b8 00 42 	mfsr	r8,0x108
80009078:	10 39       	cp.w	r9,r8
8000907a:	fe 98 ff fd 	brls	80009074 <dacsend+0x138>
8000907e:	10 3a       	cp.w	r10,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009080:	cd e3       	brcs	8000903c <dacsend+0x100>
80009082:	cf 9b       	rjmp	80009074 <dacsend+0x138>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009084:	e1 b9 00 42 	mfsr	r9,0x108
80009088:	12 38       	cp.w	r8,r9
8000908a:	fe 98 ff fd 	brls	80009084 <dacsend+0x148>
8000908e:	12 3a       	cp.w	r10,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009090:	cf a2       	brcc	80009084 <dacsend+0x148>
80009092:	c9 fb       	rjmp	80008fd0 <dacsend+0x94>
80009094:	e1 b8 00 42 	mfsr	r8,0x108
80009098:	ca db       	rjmp	80008ff2 <dacsend+0xb6>
8000909a:	e1 b8 00 42 	mfsr	r8,0x108
	dacouthigh = (DACval >> 4) & 0xFF;
	dacoutlow = ((DACval << 4) & 0xF0);

	if (DACnum == 1)
	{
		gpio_clr_gpio_pin(DAC2_CS);
8000909e:	cc ab       	rjmp	80009032 <dacsend+0xf6>
800090a0:	36 9c       	mov	r12,105
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800090a2:	fe b0 d7 3d 	rcall	80003f1c <gpio_clr_gpio_pin>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800090a6:	e1 b9 00 42 	mfsr	r9,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800090aa:	f2 ca fd 00 	sub	r10,r9,-768
800090ae:	e1 b8 00 42 	mfsr	r8,0x108
800090b2:	14 39       	cp.w	r9,r10
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800090b4:	e0 8b 00 3e 	brhi	80009130 <dacsend+0x1f4>
800090b8:	10 39       	cp.w	r9,r8
800090ba:	e0 8b 00 04 	brhi	800090c2 <dacsend+0x186>
		dacwait1();
		while((spi_write(SPARE_SPI,DACvoice)) != 0);
800090be:	10 3a       	cp.w	r10,r8
800090c0:	c4 f2       	brcc	8000915e <dacsend+0x222>
800090c2:	0c 9b       	mov	r11,r6
800090c4:	fe 7c 24 00 	mov	r12,-56320
800090c8:	fe b0 cc 4c 	rcall	80002960 <spi_write>
		while((spi_write(SPARE_SPI,dacouthigh)) !=0);
800090cc:	cf b1       	brne	800090c2 <dacsend+0x186>
800090ce:	8e 8b       	ld.uh	r11,r7[0x0]
800090d0:	fe 7c 24 00 	mov	r12,-56320
800090d4:	fe b0 cc 46 	rcall	80002960 <spi_write>
		while((spi_write(SPARE_SPI,dacoutlow)) != 0);
800090d8:	cf b1       	brne	800090ce <dacsend+0x192>
800090da:	84 8b       	ld.uh	r11,r2[0x0]
800090dc:	fe 7c 24 00 	mov	r12,-56320
800090e0:	fe b0 cc 40 	rcall	80002960 <spi_write>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800090e4:	cf b1       	brne	800090da <dacsend+0x19e>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800090e6:	e1 b9 00 42 	mfsr	r9,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800090ea:	f2 ca fd 00 	sub	r10,r9,-768
800090ee:	e1 b8 00 42 	mfsr	r8,0x108
800090f2:	14 39       	cp.w	r9,r10
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800090f4:	e0 8b 00 26 	brhi	80009140 <dacsend+0x204>
800090f8:	10 39       	cp.w	r9,r8
800090fa:	e0 8b 00 04 	brhi	80009102 <dacsend+0x1c6>
		dacwait2();
		gpio_set_gpio_pin(DAC2_CS);
800090fe:	10 3a       	cp.w	r10,r8
80009100:	c3 22       	brcc	80009164 <dacsend+0x228>
80009102:	36 9c       	mov	r12,105
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009104:	fe b0 d6 fe 	rcall	80003f00 <gpio_set_gpio_pin>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009108:	e1 b8 00 42 	mfsr	r8,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000910c:	f0 ca fd 00 	sub	r10,r8,-768
80009110:	e1 b9 00 42 	mfsr	r9,0x108
80009114:	14 38       	cp.w	r8,r10
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009116:	e0 8b 00 1d 	brhi	80009150 <dacsend+0x214>
8000911a:	12 38       	cp.w	r8,r9
8000911c:	fe 9b ff 5a 	brhi	80008fd0 <dacsend+0x94>
80009120:	12 3a       	cp.w	r10,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009122:	fe 93 ff 57 	brlo	80008fd0 <dacsend+0x94>
80009126:	e1 b9 00 42 	mfsr	r9,0x108
8000912a:	cf 8b       	rjmp	8000911a <dacsend+0x1de>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000912c:	e1 b8 00 42 	mfsr	r8,0x108
80009130:	10 39       	cp.w	r9,r8
80009132:	fe 98 ff fd 	brls	8000912c <dacsend+0x1f0>
80009136:	10 3a       	cp.w	r10,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009138:	cf a2       	brcc	8000912c <dacsend+0x1f0>
8000913a:	cc 4b       	rjmp	800090c2 <dacsend+0x186>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000913c:	e1 b8 00 42 	mfsr	r8,0x108
80009140:	10 39       	cp.w	r9,r8
80009142:	fe 98 ff fd 	brls	8000913c <dacsend+0x200>
80009146:	10 3a       	cp.w	r10,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009148:	cd d3       	brcs	80009102 <dacsend+0x1c6>
8000914a:	cf 9b       	rjmp	8000913c <dacsend+0x200>
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000914c:	e1 b9 00 42 	mfsr	r9,0x108
80009150:	12 38       	cp.w	r8,r9
80009152:	fe 98 ff fd 	brls	8000914c <dacsend+0x210>
80009156:	12 3a       	cp.w	r10,r9
80009158:	fe 93 ff 3c 	brlo	80008fd0 <dacsend+0x94>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000915c:	cf 8b       	rjmp	8000914c <dacsend+0x210>
8000915e:	e1 b8 00 42 	mfsr	r8,0x108
80009162:	ca bb       	rjmp	800090b8 <dacsend+0x17c>
80009164:	e1 b8 00 42 	mfsr	r8,0x108
80009168:	cc 8b       	rjmp	800090f8 <dacsend+0x1bc>
8000916a:	d7 03       	nop

8000916c <DACsetup>:
8000916c:	eb cd 40 80 	pushm	r7,lr
80009170:	20 4d       	sub	sp,16
80009172:	e0 68 03 98 	mov	r8,920
80009176:	f0 ea 00 08 	ld.d	r10,r8[8]
8000917a:	fa eb 00 08 	st.d	sp[8],r10
8000917e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009182:	fa e9 00 00 	st.d	sp[0],r8
80009186:	e0 68 0b a6 	mov	r8,2982
8000918a:	30 19       	mov	r9,1
8000918c:	1a 97       	mov	r7,sp
8000918e:	b0 89       	st.b	r8[0x0],r9
80009190:	fe 7c 24 00 	mov	r12,-56320
80009194:	fe b0 cb e3 	rcall	8000295a <spi_disable>
80009198:	1a 9b       	mov	r11,sp
8000919a:	fe 7c 24 00 	mov	r12,-56320

static void setSPI(spi_options_t spiOptions)
{
	SPIbusy = 1;
	spi_disable(SPARE_SPI);
	spi_initMaster(SPARE_SPI, &spiOptions);
8000919e:	fe b0 cb 16 	rcall	800027ca <spi_initMaster>
	spi_selectionMode(SPARE_SPI, 0, 0, 0);
800091a2:	30 09       	mov	r9,0
800091a4:	fe 7c 24 00 	mov	r12,-56320
800091a8:	12 9a       	mov	r10,r9
800091aa:	12 9b       	mov	r11,r9
800091ac:	fe b0 cb 2e 	rcall	80002808 <spi_selectionMode>
	spi_selectChip(SPARE_SPI, 0);
800091b0:	30 0b       	mov	r11,0
800091b2:	fe 7c 24 00 	mov	r12,-56320
800091b6:	fe b0 cb 3e 	rcall	80002832 <spi_selectChip>
	spi_setupChipReg(SPARE_SPI, &spiOptions, TARGET_PBACLK_FREQ_HZ);
800091ba:	1a 9b       	mov	r11,sp
800091bc:	e0 6a 48 00 	mov	r10,18432
800091c0:	ea 1a 01 e8 	orh	r10,0x1e8
800091c4:	fe 7c 24 00 	mov	r12,-56320
800091c8:	fe b0 cb 70 	rcall	800028a8 <spi_setupChipReg>
	spi_enable(SPARE_SPI);
800091cc:	fe 7c 24 00 	mov	r12,-56320
800091d0:	fe b0 cb c2 	rcall	80002954 <spi_enable>
	//let the portamento interrupt know the SPI is busy
	SPIbusy = 1;
	
	setSPI(spiOptions12DAC);

	gpio_clr_gpio_pin(DAC2_CS);
800091d4:	36 9c       	mov	r12,105
800091d6:	fe b0 d6 a3 	rcall	80003f1c <gpio_clr_gpio_pin>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800091da:	e1 b9 00 42 	mfsr	r9,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800091de:	f2 ca fd 00 	sub	r10,r9,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800091e2:	e1 b8 00 42 	mfsr	r8,0x108
800091e6:	14 39       	cp.w	r9,r10
800091e8:	e0 8b 01 4d 	brhi	80009482 <DACsetup+0x316>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800091ec:	10 39       	cp.w	r9,r8
800091ee:	e0 8b 00 05 	brhi	800091f8 <DACsetup+0x8c>
800091f2:	10 3a       	cp.w	r10,r8
800091f4:	e0 82 02 06 	brhs	80009600 <DACsetup+0x494>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800091f8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800091fc:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009200:	e1 b9 00 42 	mfsr	r9,0x108
80009204:	14 38       	cp.w	r8,r10
80009206:	e0 8b 01 47 	brhi	80009494 <DACsetup+0x328>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000920a:	12 38       	cp.w	r8,r9
8000920c:	e0 8b 00 05 	brhi	80009216 <DACsetup+0xaa>
80009210:	12 3a       	cp.w	r10,r9
80009212:	e0 82 01 fb 	brhs	80009608 <DACsetup+0x49c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009216:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000921a:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000921e:	e1 b9 00 42 	mfsr	r9,0x108
80009222:	14 38       	cp.w	r8,r10
80009224:	e0 8b 01 41 	brhi	800094a6 <DACsetup+0x33a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009228:	12 38       	cp.w	r8,r9
8000922a:	e0 8b 00 05 	brhi	80009234 <DACsetup+0xc8>
8000922e:	12 3a       	cp.w	r10,r9
80009230:	e0 82 01 f0 	brhs	80009610 <DACsetup+0x4a4>
	dacwait1();
	dacwait1();
	dacwait1();
	spi_write(SPARE_SPI,0x30);
80009234:	33 0b       	mov	r11,48
80009236:	fe 7c 24 00 	mov	r12,-56320
8000923a:	fe b0 cb 93 	rcall	80002960 <spi_write>
	spi_write(SPARE_SPI,0x00);
8000923e:	30 0b       	mov	r11,0
80009240:	fe 7c 24 00 	mov	r12,-56320
80009244:	fe b0 cb 8e 	rcall	80002960 <spi_write>
	spi_write(SPARE_SPI,0x0F);
80009248:	30 fb       	mov	r11,15
8000924a:	fe 7c 24 00 	mov	r12,-56320
8000924e:	fe b0 cb 89 	rcall	80002960 <spi_write>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009252:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009256:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000925a:	e1 b9 00 42 	mfsr	r9,0x108
8000925e:	14 38       	cp.w	r8,r10
80009260:	e0 8b 01 2c 	brhi	800094b8 <DACsetup+0x34c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009264:	12 38       	cp.w	r8,r9
80009266:	e0 8b 00 05 	brhi	80009270 <DACsetup+0x104>
8000926a:	12 3a       	cp.w	r10,r9
8000926c:	e0 82 01 d6 	brhs	80009618 <DACsetup+0x4ac>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009270:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009274:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009278:	e1 b9 00 42 	mfsr	r9,0x108
8000927c:	14 38       	cp.w	r8,r10
8000927e:	e0 8b 01 26 	brhi	800094ca <DACsetup+0x35e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009282:	12 38       	cp.w	r8,r9
80009284:	e0 8b 00 05 	brhi	8000928e <DACsetup+0x122>
80009288:	12 3a       	cp.w	r10,r9
8000928a:	e0 82 01 cb 	brhs	80009620 <DACsetup+0x4b4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000928e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009292:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009296:	e1 b9 00 42 	mfsr	r9,0x108
8000929a:	14 38       	cp.w	r8,r10
8000929c:	e0 8b 01 20 	brhi	800094dc <DACsetup+0x370>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800092a0:	12 38       	cp.w	r8,r9
800092a2:	e0 8b 00 05 	brhi	800092ac <DACsetup+0x140>
800092a6:	12 3a       	cp.w	r10,r9
800092a8:	e0 82 01 c0 	brhs	80009628 <DACsetup+0x4bc>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800092ac:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800092b0:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800092b4:	e1 b9 00 42 	mfsr	r9,0x108
800092b8:	14 38       	cp.w	r8,r10
800092ba:	e0 8b 01 1a 	brhi	800094ee <DACsetup+0x382>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800092be:	12 38       	cp.w	r8,r9
800092c0:	e0 8b 00 05 	brhi	800092ca <DACsetup+0x15e>
800092c4:	12 3a       	cp.w	r10,r9
800092c6:	e0 82 01 b5 	brhs	80009630 <DACsetup+0x4c4>
	dacwait2();
	dacwait2();
	dacwait2();
	dacwait2();
	gpio_set_gpio_pin(DAC2_CS);
800092ca:	36 9c       	mov	r12,105
800092cc:	fe b0 d6 1a 	rcall	80003f00 <gpio_set_gpio_pin>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800092d0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800092d4:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800092d8:	e1 b9 00 42 	mfsr	r9,0x108
800092dc:	14 38       	cp.w	r8,r10
800092de:	e0 8b 01 11 	brhi	80009500 <DACsetup+0x394>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800092e2:	12 38       	cp.w	r8,r9
800092e4:	e0 8b 00 05 	brhi	800092ee <DACsetup+0x182>
800092e8:	12 3a       	cp.w	r10,r9
800092ea:	e0 82 01 a7 	brhs	80009638 <DACsetup+0x4cc>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800092ee:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800092f2:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800092f6:	e1 b9 00 42 	mfsr	r9,0x108
800092fa:	14 38       	cp.w	r8,r10
800092fc:	e0 8b 01 0b 	brhi	80009512 <DACsetup+0x3a6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009300:	12 38       	cp.w	r8,r9
80009302:	e0 8b 00 05 	brhi	8000930c <DACsetup+0x1a0>
80009306:	12 3a       	cp.w	r10,r9
80009308:	e0 82 01 9c 	brhs	80009640 <DACsetup+0x4d4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000930c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009310:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009314:	e1 b9 00 42 	mfsr	r9,0x108
80009318:	14 38       	cp.w	r8,r10
8000931a:	e0 8b 01 05 	brhi	80009524 <DACsetup+0x3b8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000931e:	12 38       	cp.w	r8,r9
80009320:	e0 8b 00 05 	brhi	8000932a <DACsetup+0x1be>
80009324:	12 3a       	cp.w	r10,r9
80009326:	e0 82 01 91 	brhs	80009648 <DACsetup+0x4dc>
	dacwait1();
	dacwait1();
	dacwait1();

	gpio_clr_gpio_pin(DAC3_CS);
8000932a:	36 8c       	mov	r12,104
8000932c:	fe b0 d5 f8 	rcall	80003f1c <gpio_clr_gpio_pin>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009330:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009334:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009338:	e1 b9 00 42 	mfsr	r9,0x108
8000933c:	14 38       	cp.w	r8,r10
8000933e:	e0 8b 00 fc 	brhi	80009536 <DACsetup+0x3ca>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009342:	12 38       	cp.w	r8,r9
80009344:	e0 8b 00 05 	brhi	8000934e <DACsetup+0x1e2>
80009348:	12 3a       	cp.w	r10,r9
8000934a:	e0 82 01 82 	brhs	8000964e <DACsetup+0x4e2>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000934e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009352:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009356:	e1 b9 00 42 	mfsr	r9,0x108
8000935a:	14 38       	cp.w	r8,r10
8000935c:	e0 8b 00 f6 	brhi	80009548 <DACsetup+0x3dc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009360:	12 38       	cp.w	r8,r9
80009362:	e0 8b 00 05 	brhi	8000936c <DACsetup+0x200>
80009366:	12 3a       	cp.w	r10,r9
80009368:	e0 82 01 76 	brhs	80009654 <DACsetup+0x4e8>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000936c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009370:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009374:	e1 b9 00 42 	mfsr	r9,0x108
80009378:	14 38       	cp.w	r8,r10
8000937a:	e0 8b 00 f0 	brhi	8000955a <DACsetup+0x3ee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000937e:	10 39       	cp.w	r9,r8
80009380:	c0 43       	brcs	80009388 <DACsetup+0x21c>
80009382:	14 39       	cp.w	r9,r10
80009384:	e0 88 01 6b 	brls	8000965a <DACsetup+0x4ee>
	dacwait1();
	dacwait1();
	dacwait1();
	spi_write(SPARE_SPI,0x30);
80009388:	33 0b       	mov	r11,48
8000938a:	fe 7c 24 00 	mov	r12,-56320
8000938e:	fe b0 ca e9 	rcall	80002960 <spi_write>
	spi_write(SPARE_SPI,0x00);
80009392:	30 0b       	mov	r11,0
80009394:	fe 7c 24 00 	mov	r12,-56320
80009398:	fe b0 ca e4 	rcall	80002960 <spi_write>
	spi_write(SPARE_SPI,0x0F);
8000939c:	30 fb       	mov	r11,15
8000939e:	fe 7c 24 00 	mov	r12,-56320
800093a2:	fe b0 ca df 	rcall	80002960 <spi_write>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800093a6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800093aa:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800093ae:	e1 b9 00 42 	mfsr	r9,0x108
800093b2:	14 38       	cp.w	r8,r10
800093b4:	e0 8b 00 dc 	brhi	8000956c <DACsetup+0x400>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800093b8:	10 39       	cp.w	r9,r8
800093ba:	c0 43       	brcs	800093c2 <DACsetup+0x256>
800093bc:	14 39       	cp.w	r9,r10
800093be:	e0 88 01 51 	brls	80009660 <DACsetup+0x4f4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800093c2:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800093c6:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800093ca:	e1 b9 00 42 	mfsr	r9,0x108
800093ce:	14 38       	cp.w	r8,r10
800093d0:	e0 8b 00 d7 	brhi	8000957e <DACsetup+0x412>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800093d4:	10 39       	cp.w	r9,r8
800093d6:	c0 43       	brcs	800093de <DACsetup+0x272>
800093d8:	14 39       	cp.w	r9,r10
800093da:	e0 88 01 46 	brls	80009666 <DACsetup+0x4fa>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800093de:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800093e2:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800093e6:	e1 b9 00 42 	mfsr	r9,0x108
800093ea:	14 38       	cp.w	r8,r10
800093ec:	e0 8b 00 d2 	brhi	80009590 <DACsetup+0x424>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800093f0:	10 39       	cp.w	r9,r8
800093f2:	c0 43       	brcs	800093fa <DACsetup+0x28e>
800093f4:	14 39       	cp.w	r9,r10
800093f6:	e0 88 01 3b 	brls	8000966c <DACsetup+0x500>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800093fa:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800093fe:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009402:	e1 b9 00 42 	mfsr	r9,0x108
80009406:	14 38       	cp.w	r8,r10
80009408:	e0 8b 00 cd 	brhi	800095a2 <DACsetup+0x436>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000940c:	12 38       	cp.w	r8,r9
8000940e:	e0 8b 00 05 	brhi	80009418 <DACsetup+0x2ac>
80009412:	12 3a       	cp.w	r10,r9
80009414:	e0 82 00 ea 	brhs	800095e8 <DACsetup+0x47c>
	dacwait2();
	dacwait2();
	dacwait2();
	dacwait2();
	gpio_set_gpio_pin(DAC3_CS);
80009418:	36 8c       	mov	r12,104
8000941a:	fe b0 d5 73 	rcall	80003f00 <gpio_set_gpio_pin>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000941e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009422:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009426:	e1 b9 00 42 	mfsr	r9,0x108
8000942a:	14 38       	cp.w	r8,r10
8000942c:	e0 8b 00 c4 	brhi	800095b4 <DACsetup+0x448>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009430:	12 38       	cp.w	r8,r9
80009432:	e0 8b 00 05 	brhi	8000943c <DACsetup+0x2d0>
80009436:	12 3a       	cp.w	r10,r9
80009438:	e0 82 00 db 	brhs	800095ee <DACsetup+0x482>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000943c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009440:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009444:	e1 b9 00 42 	mfsr	r9,0x108
80009448:	14 38       	cp.w	r8,r10
8000944a:	e0 8b 00 be 	brhi	800095c6 <DACsetup+0x45a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000944e:	12 38       	cp.w	r8,r9
80009450:	e0 8b 00 05 	brhi	8000945a <DACsetup+0x2ee>
80009454:	12 3a       	cp.w	r10,r9
80009456:	e0 82 00 cf 	brhs	800095f4 <DACsetup+0x488>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000945a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000945e:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009462:	e1 b9 00 42 	mfsr	r9,0x108
80009466:	14 38       	cp.w	r8,r10
80009468:	e0 8b 00 b8 	brhi	800095d8 <DACsetup+0x46c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000946c:	12 38       	cp.w	r8,r9
8000946e:	e0 8b 00 05 	brhi	80009478 <DACsetup+0x30c>
80009472:	12 3a       	cp.w	r10,r9
80009474:	e0 82 00 c3 	brhs	800095fa <DACsetup+0x48e>
	dacwait1();
	dacwait1();
	dacwait1();
}
80009478:	2f cd       	sub	sp,-16
8000947a:	e3 cd 80 80 	ldm	sp++,r7,pc
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000947e:	e1 b8 00 42 	mfsr	r8,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009482:	10 39       	cp.w	r9,r8
80009484:	fe 98 ff fd 	brls	8000947e <DACsetup+0x312>
80009488:	10 3a       	cp.w	r10,r8
8000948a:	fe 93 fe b7 	brlo	800091f8 <DACsetup+0x8c>
8000948e:	cf 8b       	rjmp	8000947e <DACsetup+0x312>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009490:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009494:	12 38       	cp.w	r8,r9
80009496:	fe 98 ff fd 	brls	80009490 <DACsetup+0x324>
8000949a:	12 3a       	cp.w	r10,r9
8000949c:	fe 93 fe bd 	brlo	80009216 <DACsetup+0xaa>
800094a0:	cf 8b       	rjmp	80009490 <DACsetup+0x324>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800094a2:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800094a6:	12 38       	cp.w	r8,r9
800094a8:	fe 98 ff fd 	brls	800094a2 <DACsetup+0x336>
800094ac:	12 3a       	cp.w	r10,r9
800094ae:	fe 93 fe c3 	brlo	80009234 <DACsetup+0xc8>
800094b2:	cf 8b       	rjmp	800094a2 <DACsetup+0x336>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800094b4:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800094b8:	12 38       	cp.w	r8,r9
800094ba:	fe 98 ff fd 	brls	800094b4 <DACsetup+0x348>
800094be:	12 3a       	cp.w	r10,r9
800094c0:	fe 93 fe d8 	brlo	80009270 <DACsetup+0x104>
800094c4:	cf 8b       	rjmp	800094b4 <DACsetup+0x348>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800094c6:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800094ca:	12 38       	cp.w	r8,r9
800094cc:	fe 98 ff fd 	brls	800094c6 <DACsetup+0x35a>
800094d0:	12 3a       	cp.w	r10,r9
800094d2:	fe 93 fe de 	brlo	8000928e <DACsetup+0x122>
800094d6:	cf 8b       	rjmp	800094c6 <DACsetup+0x35a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800094d8:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800094dc:	12 38       	cp.w	r8,r9
800094de:	fe 98 ff fd 	brls	800094d8 <DACsetup+0x36c>
800094e2:	12 3a       	cp.w	r10,r9
800094e4:	fe 93 fe e4 	brlo	800092ac <DACsetup+0x140>
800094e8:	cf 8b       	rjmp	800094d8 <DACsetup+0x36c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800094ea:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800094ee:	12 38       	cp.w	r8,r9
800094f0:	fe 98 ff fd 	brls	800094ea <DACsetup+0x37e>
800094f4:	12 3a       	cp.w	r10,r9
800094f6:	fe 93 fe ea 	brlo	800092ca <DACsetup+0x15e>
800094fa:	cf 8b       	rjmp	800094ea <DACsetup+0x37e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800094fc:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009500:	12 38       	cp.w	r8,r9
80009502:	fe 98 ff fd 	brls	800094fc <DACsetup+0x390>
80009506:	12 3a       	cp.w	r10,r9
80009508:	fe 93 fe f3 	brlo	800092ee <DACsetup+0x182>
8000950c:	cf 8b       	rjmp	800094fc <DACsetup+0x390>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000950e:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009512:	12 38       	cp.w	r8,r9
80009514:	fe 98 ff fd 	brls	8000950e <DACsetup+0x3a2>
80009518:	12 3a       	cp.w	r10,r9
8000951a:	fe 93 fe f9 	brlo	8000930c <DACsetup+0x1a0>
8000951e:	cf 8b       	rjmp	8000950e <DACsetup+0x3a2>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009520:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009524:	12 38       	cp.w	r8,r9
80009526:	fe 98 ff fd 	brls	80009520 <DACsetup+0x3b4>
8000952a:	12 3a       	cp.w	r10,r9
8000952c:	fe 93 fe ff 	brlo	8000932a <DACsetup+0x1be>
80009530:	cf 8b       	rjmp	80009520 <DACsetup+0x3b4>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009532:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009536:	12 38       	cp.w	r8,r9
80009538:	fe 98 ff fd 	brls	80009532 <DACsetup+0x3c6>
8000953c:	12 3a       	cp.w	r10,r9
8000953e:	fe 93 ff 08 	brlo	8000934e <DACsetup+0x1e2>
80009542:	cf 8b       	rjmp	80009532 <DACsetup+0x3c6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009544:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009548:	12 38       	cp.w	r8,r9
8000954a:	fe 98 ff fd 	brls	80009544 <DACsetup+0x3d8>
8000954e:	12 3a       	cp.w	r10,r9
80009550:	fe 93 ff 0e 	brlo	8000936c <DACsetup+0x200>
80009554:	cf 8b       	rjmp	80009544 <DACsetup+0x3d8>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009556:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000955a:	12 38       	cp.w	r8,r9
8000955c:	fe 98 ff fd 	brls	80009556 <DACsetup+0x3ea>
80009560:	12 3a       	cp.w	r10,r9
80009562:	fe 93 ff 13 	brlo	80009388 <DACsetup+0x21c>
80009566:	cf 8b       	rjmp	80009556 <DACsetup+0x3ea>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009568:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000956c:	12 38       	cp.w	r8,r9
8000956e:	fe 98 ff fd 	brls	80009568 <DACsetup+0x3fc>
80009572:	12 3a       	cp.w	r10,r9
80009574:	fe 93 ff 27 	brlo	800093c2 <DACsetup+0x256>
80009578:	cf 8b       	rjmp	80009568 <DACsetup+0x3fc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000957a:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000957e:	12 38       	cp.w	r8,r9
80009580:	fe 98 ff fd 	brls	8000957a <DACsetup+0x40e>
80009584:	12 3a       	cp.w	r10,r9
80009586:	fe 93 ff 2c 	brlo	800093de <DACsetup+0x272>
8000958a:	cf 8b       	rjmp	8000957a <DACsetup+0x40e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000958c:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009590:	12 38       	cp.w	r8,r9
80009592:	fe 98 ff fd 	brls	8000958c <DACsetup+0x420>
80009596:	12 3a       	cp.w	r10,r9
80009598:	fe 93 ff 31 	brlo	800093fa <DACsetup+0x28e>
8000959c:	cf 8b       	rjmp	8000958c <DACsetup+0x420>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000959e:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800095a2:	12 38       	cp.w	r8,r9
800095a4:	fe 98 ff fd 	brls	8000959e <DACsetup+0x432>
800095a8:	12 3a       	cp.w	r10,r9
800095aa:	fe 93 ff 37 	brlo	80009418 <DACsetup+0x2ac>
800095ae:	cf 8b       	rjmp	8000959e <DACsetup+0x432>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800095b0:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800095b4:	12 38       	cp.w	r8,r9
800095b6:	fe 98 ff fd 	brls	800095b0 <DACsetup+0x444>
800095ba:	12 3a       	cp.w	r10,r9
800095bc:	fe 93 ff 40 	brlo	8000943c <DACsetup+0x2d0>
800095c0:	cf 8b       	rjmp	800095b0 <DACsetup+0x444>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800095c2:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800095c6:	12 38       	cp.w	r8,r9
800095c8:	fe 98 ff fd 	brls	800095c2 <DACsetup+0x456>
800095cc:	12 3a       	cp.w	r10,r9
800095ce:	fe 93 ff 46 	brlo	8000945a <DACsetup+0x2ee>
800095d2:	cf 8b       	rjmp	800095c2 <DACsetup+0x456>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800095d4:	e1 b9 00 42 	mfsr	r9,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800095d8:	12 38       	cp.w	r8,r9
800095da:	fe 98 ff fd 	brls	800095d4 <DACsetup+0x468>
800095de:	12 3a       	cp.w	r10,r9
800095e0:	cf a2       	brcc	800095d4 <DACsetup+0x468>
800095e2:	2f cd       	sub	sp,-16
800095e4:	e3 cd 80 80 	ldm	sp++,r7,pc
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800095e8:	e1 b9 00 42 	mfsr	r9,0x108
800095ec:	c1 0b       	rjmp	8000940c <DACsetup+0x2a0>
800095ee:	e1 b9 00 42 	mfsr	r9,0x108
800095f2:	c1 fb       	rjmp	80009430 <DACsetup+0x2c4>
800095f4:	e1 b9 00 42 	mfsr	r9,0x108
800095f8:	c2 bb       	rjmp	8000944e <DACsetup+0x2e2>
800095fa:	e1 b9 00 42 	mfsr	r9,0x108
800095fe:	c3 7b       	rjmp	8000946c <DACsetup+0x300>
80009600:	e1 b8 00 42 	mfsr	r8,0x108
80009604:	fe 9f fd f4 	bral	800091ec <DACsetup+0x80>
80009608:	e1 b9 00 42 	mfsr	r9,0x108
8000960c:	fe 9f fd ff 	bral	8000920a <DACsetup+0x9e>
80009610:	e1 b9 00 42 	mfsr	r9,0x108
80009614:	fe 9f fe 0a 	bral	80009228 <DACsetup+0xbc>
80009618:	e1 b9 00 42 	mfsr	r9,0x108
8000961c:	fe 9f fe 24 	bral	80009264 <DACsetup+0xf8>
80009620:	e1 b9 00 42 	mfsr	r9,0x108
80009624:	fe 9f fe 2f 	bral	80009282 <DACsetup+0x116>
80009628:	e1 b9 00 42 	mfsr	r9,0x108
8000962c:	fe 9f fe 3a 	bral	800092a0 <DACsetup+0x134>
80009630:	e1 b9 00 42 	mfsr	r9,0x108
80009634:	fe 9f fe 45 	bral	800092be <DACsetup+0x152>
80009638:	e1 b9 00 42 	mfsr	r9,0x108
8000963c:	fe 9f fe 53 	bral	800092e2 <DACsetup+0x176>
80009640:	e1 b9 00 42 	mfsr	r9,0x108
80009644:	fe 9f fe 5e 	bral	80009300 <DACsetup+0x194>
80009648:	e1 b9 00 42 	mfsr	r9,0x108
8000964c:	c6 9a       	rjmp	8000931e <DACsetup+0x1b2>
8000964e:	e1 b9 00 42 	mfsr	r9,0x108
80009652:	c7 8a       	rjmp	80009342 <DACsetup+0x1d6>
80009654:	e1 b9 00 42 	mfsr	r9,0x108
80009658:	c8 4a       	rjmp	80009360 <DACsetup+0x1f4>
8000965a:	e1 b9 00 42 	mfsr	r9,0x108
8000965e:	c9 0a       	rjmp	8000937e <DACsetup+0x212>
80009660:	e1 b9 00 42 	mfsr	r9,0x108
80009664:	ca aa       	rjmp	800093b8 <DACsetup+0x24c>
80009666:	e1 b9 00 42 	mfsr	r9,0x108
8000966a:	cb 5a       	rjmp	800093d4 <DACsetup+0x268>
8000966c:	e1 b9 00 42 	mfsr	r9,0x108
80009670:	cc 0a       	rjmp	800093f0 <DACsetup+0x284>
80009672:	d7 03       	nop

80009674 <main>:
80009674:	eb cd 40 e0 	pushm	r5-r7,lr
80009678:	20 4d       	sub	sp,16
8000967a:	fe b0 ef b1 	rcall	800075dc <sysclk_init>
8000967e:	fe b0 d2 3b 	rcall	80003af4 <board_init>
80009682:	fe b0 d4 d5 	rcall	8000402c <INTC_init_interrupts>
80009686:	d5 03       	csrf	0x10
80009688:	30 08       	mov	r8,0
8000968a:	e0 67 0c 84 	mov	r7,3204
8000968e:	30 16       	mov	r6,1
80009690:	ae d8       	st.b	r7[0x5],r8
80009692:	ae 88       	st.b	r7[0x0],r8
80009694:	ae 98       	st.b	r7[0x1],r8
80009696:	ae a8       	st.b	r7[0x2],r8
80009698:	ae b8       	st.b	r7[0x3],r8
8000969a:	ae c8       	st.b	r7[0x4],r8
8000969c:	ae e6       	st.b	r7[0x6],r6
8000969e:	fe b0 cd 7d 	rcall	80003198 <ui_init>

static void initSPIbus(void)
{
	SPIbusy = 1;
	//prepare the pins the control the DAC and set them to default positions
	gpio_set_gpio_pin(DAC1_CS);
800096a2:	e0 65 0b a6 	mov	r5,2982
800096a6:	34 6c       	mov	r12,70
800096a8:	aa 86       	st.b	r5[0x0],r6
	gpio_set_gpio_pin(DAC2_CS);
800096aa:	fe b0 d4 2b 	rcall	80003f00 <gpio_set_gpio_pin>
800096ae:	36 9c       	mov	r12,105
	gpio_set_gpio_pin(DAC3_CS);
800096b0:	fe b0 d4 28 	rcall	80003f00 <gpio_set_gpio_pin>
800096b4:	36 8c       	mov	r12,104
	//gpio_set_gpio_pin(DAC4_CS);
	gpio_clr_gpio_pin(REF1);
800096b6:	fe b0 d4 25 	rcall	80003f00 <gpio_set_gpio_pin>
800096ba:	36 6c       	mov	r12,102
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800096bc:	fe b0 d4 30 	rcall	80003f1c <gpio_clr_gpio_pin>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800096c0:	e1 b9 00 42 	mfsr	r9,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800096c4:	f2 ca d1 20 	sub	r10,r9,-12000
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800096c8:	e1 b8 00 42 	mfsr	r8,0x108
800096cc:	14 39       	cp.w	r9,r10
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800096ce:	e0 88 00 d2 	brls	80009872 <main+0x1fe>
800096d2:	10 39       	cp.w	r9,r8
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800096d4:	fe 98 ff fa 	brls	800096c8 <main+0x54>
		break;
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
800096d8:	10 3a       	cp.w	r10,r8
800096da:	cf 72       	brcc	800096c8 <main+0x54>
800096dc:	e0 68 03 98 	mov	r8,920
800096e0:	f0 ea 00 08 	ld.d	r10,r8[8]
800096e4:	fa eb 00 08 	st.d	sp[8],r10
800096e8:	f0 e8 00 00 	ld.d	r8,r8[0]
}

static void setSPI(spi_options_t spiOptions)
{
	SPIbusy = 1;
	spi_disable(SPARE_SPI);
800096ec:	fa e9 00 00 	st.d	sp[0],r8
	cpu_delay_us(12,64000000);//5
}

static void setSPI(spi_options_t spiOptions)
{
	SPIbusy = 1;
800096f0:	30 18       	mov	r8,1
	spi_disable(SPARE_SPI);
800096f2:	fe 7c 24 00 	mov	r12,-56320
	spi_initMaster(SPARE_SPI, &spiOptions);
800096f6:	aa 88       	st.b	r5[0x0],r8
800096f8:	fe b0 c9 31 	rcall	8000295a <spi_disable>
800096fc:	1a 9b       	mov	r11,sp
800096fe:	fe 7c 24 00 	mov	r12,-56320
	spi_selectionMode(SPARE_SPI, 0, 0, 0);
80009702:	fe b0 c8 64 	rcall	800027ca <spi_initMaster>
80009706:	30 09       	mov	r9,0
80009708:	fe 7c 24 00 	mov	r12,-56320
8000970c:	12 9a       	mov	r10,r9
	spi_selectChip(SPARE_SPI, 0);
8000970e:	12 9b       	mov	r11,r9
80009710:	fe b0 c8 7c 	rcall	80002808 <spi_selectionMode>
80009714:	30 0b       	mov	r11,0
80009716:	fe 7c 24 00 	mov	r12,-56320
	spi_setupChipReg(SPARE_SPI, &spiOptions, TARGET_PBACLK_FREQ_HZ);
8000971a:	fe b0 c8 8c 	rcall	80002832 <spi_selectChip>
8000971e:	e0 6a 48 00 	mov	r10,18432
80009722:	ea 1a 01 e8 	orh	r10,0x1e8
80009726:	1a 9b       	mov	r11,sp
80009728:	fe 7c 24 00 	mov	r12,-56320
	spi_enable(SPARE_SPI);
8000972c:	fe b0 c8 be 	rcall	800028a8 <spi_setupChipReg>
80009730:	fe 7c 24 00 	mov	r12,-56320
		{DIP204_SPI_SCK_PIN,  DIP204_SPI_SCK_FUNCTION },  // SPI Clock.
		{DIP204_SPI_MISO_PIN, DIP204_SPI_MISO_FUNCTION},  // MISO.
		{DIP204_SPI_MOSI_PIN, DIP204_SPI_MOSI_FUNCTION},  // MOSI.
		{DIP204_SPI_NPCS_PIN, DIP204_SPI_NPCS_FUNCTION}   // Chip Select NPCS.
	};
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
80009734:	fe b0 c9 10 	rcall	80002954 <spi_enable>
80009738:	30 4b       	mov	r11,4
		{SPARE_SPI_SCK_PIN,  SPARE_SPI_SCK_FUNCTION },  // SPI Clock.
		{SPARE_SPI_MISO_PIN, SPARE_SPI_MISO_FUNCTION},  // MISO.
		{SPARE_SPI_MOSI_PIN, SPARE_SPI_MOSI_FUNCTION},  // MOSI.
		{SPARE_SPI_NPCS_PIN, SPARE_SPI_NPCS_FUNCTION}   // Chip Select NPCS.
	};
	gpio_enable_module(SPARE_SPI_GPIO_MAP,
8000973a:	fe cc 9f 46 	sub	r12,pc,-24762
8000973e:	fe b0 d3 57 	rcall	80003dec <gpio_enable_module>
	initSPIbus();
	
	// Initialize as master
	
	//Initialize SPI for the Display, DIP204
	spi_initMaster(DIP204_SPI, &DIP_spiOptions);
80009742:	30 4b       	mov	r11,4
80009744:	fe cc 9f 70 	sub	r12,pc,-24720
80009748:	fe b0 d3 52 	rcall	80003dec <gpio_enable_module>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
8000974c:	e0 6b 03 b8 	mov	r11,952
80009750:	fe 7c 28 00 	mov	r12,-55296
80009754:	fe b0 c8 3b 	rcall	800027ca <spi_initMaster>
80009758:	30 09       	mov	r9,0
	spi_selectChip(DIP204_SPI,0);
8000975a:	fe 7c 28 00 	mov	r12,-55296
8000975e:	12 9a       	mov	r10,r9
80009760:	12 9b       	mov	r11,r9
80009762:	fe b0 c8 53 	rcall	80002808 <spi_selectionMode>
	spi_setupChipReg(DIP204_SPI, &DIP_spiOptions, FOSC0);
80009766:	30 0b       	mov	r11,0
80009768:	fe 7c 28 00 	mov	r12,-55296
8000976c:	fe b0 c8 63 	rcall	80002832 <spi_selectChip>
80009770:	e0 6a 1b 00 	mov	r10,6912
80009774:	ea 1a 00 b7 	orh	r10,0xb7
	spi_enable(DIP204_SPI);
80009778:	e0 6b 03 b8 	mov	r11,952
8000977c:	fe 7c 28 00 	mov	r12,-55296
	
	dip204_init(backlight_PWM, true);
80009780:	fe b0 c8 94 	rcall	800028a8 <spi_setupChipReg>
80009784:	fe 7c 28 00 	mov	r12,-55296
	dip204_clear_display();
80009788:	fe b0 c8 e6 	rcall	80002954 <spi_enable>
	dip204_set_cursor_position(1,1);
8000978c:	30 1b       	mov	r11,1
8000978e:	16 9c       	mov	r12,r11
80009790:	fe b0 c4 bc 	rcall	80002108 <dip204_init>
	dip204_printf_string("Manta Mate");
80009794:	fe b0 c7 6e 	rcall	80002670 <dip204_clear_display>
	dip204_hide_cursor();
80009798:	30 1b       	mov	r11,1
8000979a:	16 9c       	mov	r12,r11
	
	//send the messages to the DACs to make them update without software LDAC feature
	DACsetup();
8000979c:	fe b0 c6 c8 	rcall	8000252c <dip204_set_cursor_position>
	
	// Start USB host stack
	uhc_start();
800097a0:	fe cc 9f 8c 	sub	r12,pc,-24692

	initNoteStack();
800097a4:	fe b0 c4 32 	rcall	80002008 <dip204_printf_string>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
800097a8:	fe b0 c7 28 	rcall	800025f8 <dip204_hide_cursor>
800097ac:	fe b0 fc e0 	rcall	8000916c <DACsetup>
800097b0:	fe b0 f6 da 	rcall	80008564 <uhc_start>
800097b4:	fe b0 cf 8a 	rcall	800036c8 <initNoteStack>
800097b8:	30 0c       	mov	r12,0
800097ba:	d3 03       	ssrf	0x10
		lock_ptr++;
800097bc:	0f 88       	ld.ub	r8,r7[0x0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
800097be:	f8 08 18 00 	cp.b	r8,r12

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
800097c2:	c2 21       	brne	80009806 <main+0x192>
800097c4:	30 09       	mov	r9,0
800097c6:	e0 68 0c 84 	mov	r8,3204
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
800097ca:	c0 28       	rjmp	800097ce <main+0x15a>
800097cc:	16 99       	mov	r9,r11

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
800097ce:	2f f8       	sub	r8,-1
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
	switch (sleep_mode) {
800097d0:	f2 cb ff ff 	sub	r11,r9,-1
800097d4:	11 8a       	ld.ub	r10,r8[0x0]
800097d6:	f8 0a 18 00 	cp.b	r10,r12
800097da:	cf 90       	breq	800097cc <main+0x158>
800097dc:	58 0b       	cp.w	r11,0
800097de:	c1 40       	breq	80009806 <main+0x192>
800097e0:	d3 03       	ssrf	0x10
800097e2:	a7 b9       	sbr	r9,0x7
800097e4:	58 59       	cp.w	r9,5
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
		break;
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
800097e6:	c3 70       	breq	80009854 <main+0x1e0>
800097e8:	e0 89 00 11 	brgt	8000980a <main+0x196>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
800097ec:	58 29       	cp.w	r9,2
800097ee:	c3 00       	breq	8000984e <main+0x1da>
800097f0:	e0 89 00 25 	brgt	8000983a <main+0x1c6>

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
800097f4:	58 19       	cp.w	r9,1
800097f6:	ce 21       	brne	800097ba <main+0x146>
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
	switch (sleep_mode) {
800097f8:	e9 b0 00 01 	sleep	0x1
800097fc:	d3 03       	ssrf	0x10
800097fe:	0f 88       	ld.ub	r8,r7[0x0]
80009800:	f8 08 18 00 	cp.b	r8,r12
80009804:	ce 00       	breq	800097c4 <main+0x150>
80009806:	d5 03       	csrf	0x10
80009808:	cd 9b       	rjmp	800097ba <main+0x146>
8000980a:	e0 49 00 82 	cp.w	r9,130
		break;
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
8000980e:	c2 f0       	breq	8000986c <main+0x1f8>
80009810:	e0 89 00 0b 	brgt	80009826 <main+0x1b2>
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
	switch (sleep_mode) {
80009814:	e0 49 00 80 	cp.w	r9,128
80009818:	c2 70       	breq	80009866 <main+0x1f2>
8000981a:	e0 49 00 81 	cp.w	r9,129
8000981e:	cc e1       	brne	800097ba <main+0x146>
80009820:	e9 b0 00 81 	sleep	0x81
		break;
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
80009824:	cc bb       	rjmp	800097ba <main+0x146>
80009826:	e0 49 00 84 	cp.w	r9,132
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
	switch (sleep_mode) {
8000982a:	c1 b0       	breq	80009860 <main+0x1ec>
8000982c:	c1 75       	brlt	8000985a <main+0x1e6>
8000982e:	e0 49 00 85 	cp.w	r9,133
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
		break;
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
80009832:	cc 41       	brne	800097ba <main+0x146>
80009834:	e9 b0 00 85 	sleep	0x85
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
		break;
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
80009838:	cc 1b       	rjmp	800097ba <main+0x146>
8000983a:	58 39       	cp.w	r9,3
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
		break;
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
8000983c:	c0 60       	breq	80009848 <main+0x1d4>
8000983e:	58 49       	cp.w	r9,4
80009840:	cb d1       	brne	800097ba <main+0x146>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
		break;
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
80009842:	e9 b0 00 04 	sleep	0x4
80009846:	cb ab       	rjmp	800097ba <main+0x146>
		break;
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
80009848:	e9 b0 00 03 	sleep	0x3
8000984c:	cb 7b       	rjmp	800097ba <main+0x146>
		break;
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
8000984e:	e9 b0 00 02 	sleep	0x2
80009852:	cb 4b       	rjmp	800097ba <main+0x146>
	switch (sleep_mode) {
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
80009854:	e9 b0 00 05 	sleep	0x5
80009858:	cb 1b       	rjmp	800097ba <main+0x146>
		break;
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
8000985a:	e9 b0 00 83 	sleep	0x83
8000985e:	ca eb       	rjmp	800097ba <main+0x146>
80009860:	e9 b0 00 84 	sleep	0x84
80009864:	ca bb       	rjmp	800097ba <main+0x146>
80009866:	e9 b0 00 80 	sleep	0x80
8000986a:	ca 8b       	rjmp	800097ba <main+0x146>
8000986c:	e9 b0 00 82 	sleep	0x82
80009870:	ca 5b       	rjmp	800097ba <main+0x146>
80009872:	10 39       	cp.w	r9,r8
80009874:	fe 9b ff 34 	brhi	800096dc <main+0x68>
80009878:	c3 0b       	rjmp	800096d8 <main+0x64>
8000987a:	d7 03       	nop

8000987c <DAC16Send>:
8000987c:	d4 21       	pushm	r4-r7,lr
8000987e:	20 4d       	sub	sp,16
80009880:	e0 68 03 a8 	mov	r8,936
80009884:	16 94       	mov	r4,r11
80009886:	f0 ea 00 08 	ld.d	r10,r8[8]
8000988a:	fa eb 00 08 	st.d	sp[8],r10
8000988e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009892:	fa e9 00 00 	st.d	sp[0],r8
80009896:	30 18       	mov	r8,1
80009898:	e0 67 0b a6 	mov	r7,2982
8000989c:	18 95       	mov	r5,r12
8000989e:	ae 88       	st.b	r7[0x0],r8
800098a0:	fe 7c 24 00 	mov	r12,-56320
800098a4:	fe b0 c8 5b 	rcall	8000295a <spi_disable>
800098a8:	1a 9b       	mov	r11,sp
800098aa:	fe 7c 24 00 	mov	r12,-56320
800098ae:	fe b0 c7 8e 	rcall	800027ca <spi_initMaster>
800098b2:	30 09       	mov	r9,0
800098b4:	fe 7c 24 00 	mov	r12,-56320
800098b8:	12 9a       	mov	r10,r9
800098ba:	12 9b       	mov	r11,r9
800098bc:	fe b0 c7 a6 	rcall	80002808 <spi_selectionMode>
800098c0:	30 0b       	mov	r11,0
800098c2:	fe 7c 24 00 	mov	r12,-56320
800098c6:	fe b0 c7 b6 	rcall	80002832 <spi_selectChip>
800098ca:	1a 9b       	mov	r11,sp
800098cc:	e0 6a 48 00 	mov	r10,18432
800098d0:	ea 1a 01 e8 	orh	r10,0x1e8
800098d4:	fe 7c 24 00 	mov	r12,-56320
	spi_disable(SPARE_SPI);
	spi_initMaster(SPARE_SPI, &spiOptions);
	spi_selectionMode(SPARE_SPI, 0, 0, 0);
	spi_selectChip(SPARE_SPI, 0);
	spi_setupChipReg(SPARE_SPI, &spiOptions, TARGET_PBACLK_FREQ_HZ);
	spi_enable(SPARE_SPI);
800098d8:	fe b0 c7 e8 	rcall	800028a8 <spi_setupChipReg>
800098dc:	fe 7c 24 00 	mov	r12,-56320
	SPIbusy = 1;
	//set up SPI to be 16 bit for the DAC
	setSPI(spiOptions16DAC);

	daccontrol = (16 | (DAC16voice << 1));
	DAC1outhigh = ((daccontrol << 8) + (DAC16val >> 8));
800098e0:	fe b0 c8 3a 	rcall	80002954 <spi_enable>
	DAC1outlow = ((DAC16val & 255) << 8);
800098e4:	5c 74       	castu.h	r4
	SPIbusy = 1;
	//set up SPI to be 16 bit for the DAC
	setSPI(spiOptions16DAC);

	daccontrol = (16 | (DAC16voice << 1));
	DAC1outhigh = ((daccontrol << 8) + (DAC16val >> 8));
800098e6:	e8 08 15 08 	lsl	r8,r4,0x8
	DAC1outlow = ((DAC16val & 255) << 8);
	gpio_clr_gpio_pin(DAC1_CS);
800098ea:	a9 84       	lsr	r4,0x8
	//set up SPI to be 16 bit for the DAC
	setSPI(spiOptions16DAC);

	daccontrol = (16 | (DAC16voice << 1));
	DAC1outhigh = ((daccontrol << 8) + (DAC16val >> 8));
	DAC1outlow = ((DAC16val & 255) << 8);
800098ec:	e0 66 0b a4 	mov	r6,2980
	SPIbusy = 1;
	//set up SPI to be 16 bit for the DAC
	setSPI(spiOptions16DAC);

	daccontrol = (16 | (DAC16voice << 1));
	DAC1outhigh = ((daccontrol << 8) + (DAC16val >> 8));
800098f0:	34 6c       	mov	r12,70
800098f2:	ac 08       	st.h	r6[0x0],r8
800098f4:	a9 75       	lsl	r5,0x9
800098f6:	ad a5       	sbr	r5,0xc
	DAC1outlow = ((DAC16val & 255) << 8);
	gpio_clr_gpio_pin(DAC1_CS);
800098f8:	08 05       	add	r5,r4
800098fa:	e0 64 0b a8 	mov	r4,2984
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800098fe:	a8 05       	st.h	r4[0x0],r5
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009900:	fe b0 d3 0e 	rcall	80003f1c <gpio_clr_gpio_pin>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009904:	e1 b9 00 42 	mfsr	r9,0x108
80009908:	f2 ca ff 80 	sub	r10,r9,-128
8000990c:	e1 b8 00 42 	mfsr	r8,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009910:	14 39       	cp.w	r9,r10
80009912:	e0 8b 00 28 	brhi	80009962 <DAC16Send+0xe6>
80009916:	10 39       	cp.w	r9,r8
	cpu_delay_us(2,64000000);
	spi_write(SPARE_SPI,DAC1outhigh);
80009918:	e0 8b 00 04 	brhi	80009920 <DAC16Send+0xa4>
8000991c:	10 3a       	cp.w	r10,r8
8000991e:	c3 02       	brcc	8000997e <DAC16Send+0x102>
80009920:	88 8b       	ld.uh	r11,r4[0x0]
	spi_write(SPARE_SPI,DAC1outlow);
80009922:	fe 7c 24 00 	mov	r12,-56320
80009926:	fe b0 c8 1d 	rcall	80002960 <spi_write>
8000992a:	8c 8b       	ld.uh	r11,r6[0x0]
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000992c:	fe 7c 24 00 	mov	r12,-56320
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009930:	fe b0 c8 18 	rcall	80002960 <spi_write>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009934:	e1 b8 00 42 	mfsr	r8,0x108
80009938:	f0 ca fd 00 	sub	r10,r8,-768
8000993c:	e1 b9 00 42 	mfsr	r9,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009940:	14 38       	cp.w	r8,r10
80009942:	e0 8b 00 18 	brhi	80009972 <DAC16Send+0xf6>
80009946:	12 38       	cp.w	r8,r9
	cpu_delay_us(12,64000000);
	gpio_set_gpio_pin(DAC1_CS);
80009948:	e0 8b 00 04 	brhi	80009950 <DAC16Send+0xd4>
8000994c:	12 3a       	cp.w	r10,r9
	SPIbusy = 0;
8000994e:	c1 b2       	brcc	80009984 <DAC16Send+0x108>
80009950:	34 6c       	mov	r12,70
}
80009952:	fe b0 d2 d7 	rcall	80003f00 <gpio_set_gpio_pin>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009956:	30 08       	mov	r8,0
80009958:	ae 88       	st.b	r7[0x0],r8
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000995a:	2f cd       	sub	sp,-16
8000995c:	d8 22       	popm	r4-r7,pc
8000995e:	e1 b8 00 42 	mfsr	r8,0x108
80009962:	10 39       	cp.w	r9,r8
80009964:	fe 98 ff fd 	brls	8000995e <DAC16Send+0xe2>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009968:	10 3a       	cp.w	r10,r8
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000996a:	cd b3       	brcs	80009920 <DAC16Send+0xa4>
8000996c:	cf 9b       	rjmp	8000995e <DAC16Send+0xe2>
8000996e:	e1 b9 00 42 	mfsr	r9,0x108
80009972:	12 38       	cp.w	r8,r9
80009974:	fe 98 ff fd 	brls	8000996e <DAC16Send+0xf2>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009978:	12 3a       	cp.w	r10,r9
8000997a:	ce b3       	brcs	80009950 <DAC16Send+0xd4>
8000997c:	cf 9b       	rjmp	8000996e <DAC16Send+0xf2>
8000997e:	e1 b8 00 42 	mfsr	r8,0x108
80009982:	cc ab       	rjmp	80009916 <DAC16Send+0x9a>
80009984:	e1 b9 00 42 	mfsr	r9,0x108
80009988:	cd fb       	rjmp	80009946 <DAC16Send+0xca>
8000998a:	d7 03       	nop

8000998c <calloc>:
8000998c:	d4 01       	pushm	lr
8000998e:	e0 68 04 b8 	mov	r8,1208
80009992:	16 9a       	mov	r10,r11
80009994:	18 9b       	mov	r11,r12
80009996:	70 0c       	ld.w	r12,r8[0x0]
80009998:	c0 2c       	rcall	8000999c <_calloc_r>
8000999a:	d8 02       	popm	pc

8000999c <_calloc_r>:
8000999c:	d4 21       	pushm	r4-r7,lr
8000999e:	f4 0b 02 4b 	mul	r11,r10,r11
800099a2:	c3 7c       	rcall	80009a10 <_malloc_r>
800099a4:	18 97       	mov	r7,r12
800099a6:	c2 30       	breq	800099ec <_calloc_r+0x50>
800099a8:	f8 fa ff fc 	ld.w	r10,r12[-4]
800099ac:	e0 1a ff fc 	andl	r10,0xfffc
800099b0:	20 4a       	sub	r10,4
800099b2:	e0 4a 00 24 	cp.w	r10,36
800099b6:	e0 8b 00 18 	brhi	800099e6 <_calloc_r+0x4a>
800099ba:	18 98       	mov	r8,r12
800099bc:	59 3a       	cp.w	r10,19
800099be:	e0 88 00 0f 	brls	800099dc <_calloc_r+0x40>
800099c2:	30 09       	mov	r9,0
800099c4:	10 a9       	st.w	r8++,r9
800099c6:	10 a9       	st.w	r8++,r9
800099c8:	59 ba       	cp.w	r10,27
800099ca:	e0 88 00 09 	brls	800099dc <_calloc_r+0x40>
800099ce:	10 a9       	st.w	r8++,r9
800099d0:	10 a9       	st.w	r8++,r9
800099d2:	e0 4a 00 24 	cp.w	r10,36
800099d6:	c0 31       	brne	800099dc <_calloc_r+0x40>
800099d8:	10 a9       	st.w	r8++,r9
800099da:	10 a9       	st.w	r8++,r9
800099dc:	30 09       	mov	r9,0
800099de:	10 a9       	st.w	r8++,r9
800099e0:	91 19       	st.w	r8[0x4],r9
800099e2:	91 09       	st.w	r8[0x0],r9
800099e4:	c0 48       	rjmp	800099ec <_calloc_r+0x50>
800099e6:	30 0b       	mov	r11,0
800099e8:	e0 a0 02 ce 	rcall	80009f84 <memset>
800099ec:	0e 9c       	mov	r12,r7
800099ee:	d8 22       	popm	r4-r7,pc

800099f0 <free>:
800099f0:	d4 01       	pushm	lr
800099f2:	e0 68 04 b8 	mov	r8,1208
800099f6:	18 9b       	mov	r11,r12
800099f8:	70 0c       	ld.w	r12,r8[0x0]
800099fa:	e0 a0 04 6b 	rcall	8000a2d0 <_free_r>
800099fe:	d8 02       	popm	pc

80009a00 <malloc>:
80009a00:	d4 01       	pushm	lr
80009a02:	e0 68 04 b8 	mov	r8,1208
80009a06:	18 9b       	mov	r11,r12
80009a08:	70 0c       	ld.w	r12,r8[0x0]
80009a0a:	c0 3c       	rcall	80009a10 <_malloc_r>
80009a0c:	d8 02       	popm	pc
80009a0e:	d7 03       	nop

80009a10 <_malloc_r>:
80009a10:	d4 31       	pushm	r0-r7,lr
80009a12:	f6 c8 ff f5 	sub	r8,r11,-11
80009a16:	18 95       	mov	r5,r12
80009a18:	10 97       	mov	r7,r8
80009a1a:	e0 17 ff f8 	andl	r7,0xfff8
80009a1e:	59 68       	cp.w	r8,22
80009a20:	f9 b7 08 10 	movls	r7,16
80009a24:	16 37       	cp.w	r7,r11
80009a26:	5f 38       	srlo	r8
80009a28:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80009a2c:	c0 50       	breq	80009a36 <_malloc_r+0x26>
80009a2e:	30 c8       	mov	r8,12
80009a30:	99 38       	st.w	r12[0xc],r8
80009a32:	e0 8f 01 f5 	bral	80009e1c <_malloc_r+0x40c>
80009a36:	e0 a0 02 ae 	rcall	80009f92 <__malloc_lock>
80009a3a:	e0 47 01 f7 	cp.w	r7,503
80009a3e:	e0 8b 00 1d 	brhi	80009a78 <_malloc_r+0x68>
80009a42:	ee 03 16 03 	lsr	r3,r7,0x3
80009a46:	e0 68 04 bc 	mov	r8,1212
80009a4a:	f0 03 00 38 	add	r8,r8,r3<<0x3
80009a4e:	70 36       	ld.w	r6,r8[0xc]
80009a50:	10 36       	cp.w	r6,r8
80009a52:	c0 61       	brne	80009a5e <_malloc_r+0x4e>
80009a54:	ec c8 ff f8 	sub	r8,r6,-8
80009a58:	70 36       	ld.w	r6,r8[0xc]
80009a5a:	10 36       	cp.w	r6,r8
80009a5c:	c0 c0       	breq	80009a74 <_malloc_r+0x64>
80009a5e:	6c 18       	ld.w	r8,r6[0x4]
80009a60:	e0 18 ff fc 	andl	r8,0xfffc
80009a64:	6c 3a       	ld.w	r10,r6[0xc]
80009a66:	ec 08 00 09 	add	r9,r6,r8
80009a6a:	0a 9c       	mov	r12,r5
80009a6c:	6c 28       	ld.w	r8,r6[0x8]
80009a6e:	95 28       	st.w	r10[0x8],r8
80009a70:	91 3a       	st.w	r8[0xc],r10
80009a72:	c4 78       	rjmp	80009b00 <_malloc_r+0xf0>
80009a74:	2f e3       	sub	r3,-2
80009a76:	c4 d8       	rjmp	80009b10 <_malloc_r+0x100>
80009a78:	ee 03 16 09 	lsr	r3,r7,0x9
80009a7c:	c0 41       	brne	80009a84 <_malloc_r+0x74>
80009a7e:	ee 03 16 03 	lsr	r3,r7,0x3
80009a82:	c2 68       	rjmp	80009ace <_malloc_r+0xbe>
80009a84:	58 43       	cp.w	r3,4
80009a86:	e0 8b 00 06 	brhi	80009a92 <_malloc_r+0x82>
80009a8a:	ee 03 16 06 	lsr	r3,r7,0x6
80009a8e:	2c 83       	sub	r3,-56
80009a90:	c1 f8       	rjmp	80009ace <_malloc_r+0xbe>
80009a92:	59 43       	cp.w	r3,20
80009a94:	e0 8b 00 04 	brhi	80009a9c <_malloc_r+0x8c>
80009a98:	2a 53       	sub	r3,-91
80009a9a:	c1 a8       	rjmp	80009ace <_malloc_r+0xbe>
80009a9c:	e0 43 00 54 	cp.w	r3,84
80009aa0:	e0 8b 00 06 	brhi	80009aac <_malloc_r+0x9c>
80009aa4:	ee 03 16 0c 	lsr	r3,r7,0xc
80009aa8:	29 23       	sub	r3,-110
80009aaa:	c1 28       	rjmp	80009ace <_malloc_r+0xbe>
80009aac:	e0 43 01 54 	cp.w	r3,340
80009ab0:	e0 8b 00 06 	brhi	80009abc <_malloc_r+0xac>
80009ab4:	ee 03 16 0f 	lsr	r3,r7,0xf
80009ab8:	28 93       	sub	r3,-119
80009aba:	c0 a8       	rjmp	80009ace <_malloc_r+0xbe>
80009abc:	e0 43 05 54 	cp.w	r3,1364
80009ac0:	e0 88 00 04 	brls	80009ac8 <_malloc_r+0xb8>
80009ac4:	37 e3       	mov	r3,126
80009ac6:	c0 48       	rjmp	80009ace <_malloc_r+0xbe>
80009ac8:	ee 03 16 12 	lsr	r3,r7,0x12
80009acc:	28 43       	sub	r3,-124
80009ace:	e0 6a 04 bc 	mov	r10,1212
80009ad2:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80009ad6:	74 36       	ld.w	r6,r10[0xc]
80009ad8:	c1 98       	rjmp	80009b0a <_malloc_r+0xfa>
80009ada:	6c 19       	ld.w	r9,r6[0x4]
80009adc:	e0 19 ff fc 	andl	r9,0xfffc
80009ae0:	f2 07 01 0b 	sub	r11,r9,r7
80009ae4:	58 fb       	cp.w	r11,15
80009ae6:	e0 8a 00 04 	brle	80009aee <_malloc_r+0xde>
80009aea:	20 13       	sub	r3,1
80009aec:	c1 18       	rjmp	80009b0e <_malloc_r+0xfe>
80009aee:	6c 38       	ld.w	r8,r6[0xc]
80009af0:	58 0b       	cp.w	r11,0
80009af2:	c0 b5       	brlt	80009b08 <_malloc_r+0xf8>
80009af4:	6c 2a       	ld.w	r10,r6[0x8]
80009af6:	ec 09 00 09 	add	r9,r6,r9
80009afa:	0a 9c       	mov	r12,r5
80009afc:	91 2a       	st.w	r8[0x8],r10
80009afe:	95 38       	st.w	r10[0xc],r8
80009b00:	72 18       	ld.w	r8,r9[0x4]
80009b02:	a1 a8       	sbr	r8,0x0
80009b04:	93 18       	st.w	r9[0x4],r8
80009b06:	cb c8       	rjmp	80009c7e <_malloc_r+0x26e>
80009b08:	10 96       	mov	r6,r8
80009b0a:	14 36       	cp.w	r6,r10
80009b0c:	ce 71       	brne	80009ada <_malloc_r+0xca>
80009b0e:	2f f3       	sub	r3,-1
80009b10:	e0 6a 04 bc 	mov	r10,1212
80009b14:	f4 cc ff f8 	sub	r12,r10,-8
80009b18:	78 26       	ld.w	r6,r12[0x8]
80009b1a:	18 36       	cp.w	r6,r12
80009b1c:	c6 c0       	breq	80009bf4 <_malloc_r+0x1e4>
80009b1e:	6c 19       	ld.w	r9,r6[0x4]
80009b20:	e0 19 ff fc 	andl	r9,0xfffc
80009b24:	f2 07 01 08 	sub	r8,r9,r7
80009b28:	58 f8       	cp.w	r8,15
80009b2a:	e0 89 00 8f 	brgt	80009c48 <_malloc_r+0x238>
80009b2e:	99 3c       	st.w	r12[0xc],r12
80009b30:	99 2c       	st.w	r12[0x8],r12
80009b32:	58 08       	cp.w	r8,0
80009b34:	c0 55       	brlt	80009b3e <_malloc_r+0x12e>
80009b36:	ec 09 00 09 	add	r9,r6,r9
80009b3a:	0a 9c       	mov	r12,r5
80009b3c:	ce 2b       	rjmp	80009b00 <_malloc_r+0xf0>
80009b3e:	e0 49 01 ff 	cp.w	r9,511
80009b42:	e0 8b 00 13 	brhi	80009b68 <_malloc_r+0x158>
80009b46:	a3 99       	lsr	r9,0x3
80009b48:	f4 09 00 38 	add	r8,r10,r9<<0x3
80009b4c:	70 2b       	ld.w	r11,r8[0x8]
80009b4e:	8d 38       	st.w	r6[0xc],r8
80009b50:	8d 2b       	st.w	r6[0x8],r11
80009b52:	97 36       	st.w	r11[0xc],r6
80009b54:	91 26       	st.w	r8[0x8],r6
80009b56:	a3 49       	asr	r9,0x2
80009b58:	74 18       	ld.w	r8,r10[0x4]
80009b5a:	30 1b       	mov	r11,1
80009b5c:	f6 09 09 49 	lsl	r9,r11,r9
80009b60:	f1 e9 10 09 	or	r9,r8,r9
80009b64:	95 19       	st.w	r10[0x4],r9
80009b66:	c4 78       	rjmp	80009bf4 <_malloc_r+0x1e4>
80009b68:	f2 0a 16 09 	lsr	r10,r9,0x9
80009b6c:	58 4a       	cp.w	r10,4
80009b6e:	e0 8b 00 07 	brhi	80009b7c <_malloc_r+0x16c>
80009b72:	f2 0a 16 06 	lsr	r10,r9,0x6
80009b76:	2c 8a       	sub	r10,-56
80009b78:	c2 08       	rjmp	80009bb8 <_malloc_r+0x1a8>
80009b7a:	d7 03       	nop
80009b7c:	59 4a       	cp.w	r10,20
80009b7e:	e0 8b 00 04 	brhi	80009b86 <_malloc_r+0x176>
80009b82:	2a 5a       	sub	r10,-91
80009b84:	c1 a8       	rjmp	80009bb8 <_malloc_r+0x1a8>
80009b86:	e0 4a 00 54 	cp.w	r10,84
80009b8a:	e0 8b 00 06 	brhi	80009b96 <_malloc_r+0x186>
80009b8e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80009b92:	29 2a       	sub	r10,-110
80009b94:	c1 28       	rjmp	80009bb8 <_malloc_r+0x1a8>
80009b96:	e0 4a 01 54 	cp.w	r10,340
80009b9a:	e0 8b 00 06 	brhi	80009ba6 <_malloc_r+0x196>
80009b9e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80009ba2:	28 9a       	sub	r10,-119
80009ba4:	c0 a8       	rjmp	80009bb8 <_malloc_r+0x1a8>
80009ba6:	e0 4a 05 54 	cp.w	r10,1364
80009baa:	e0 88 00 04 	brls	80009bb2 <_malloc_r+0x1a2>
80009bae:	37 ea       	mov	r10,126
80009bb0:	c0 48       	rjmp	80009bb8 <_malloc_r+0x1a8>
80009bb2:	f2 0a 16 12 	lsr	r10,r9,0x12
80009bb6:	28 4a       	sub	r10,-124
80009bb8:	e0 6b 04 bc 	mov	r11,1212
80009bbc:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80009bc0:	68 28       	ld.w	r8,r4[0x8]
80009bc2:	08 38       	cp.w	r8,r4
80009bc4:	c0 e1       	brne	80009be0 <_malloc_r+0x1d0>
80009bc6:	76 19       	ld.w	r9,r11[0x4]
80009bc8:	a3 4a       	asr	r10,0x2
80009bca:	30 1e       	mov	lr,1
80009bcc:	fc 0a 09 4a 	lsl	r10,lr,r10
80009bd0:	f3 ea 10 0a 	or	r10,r9,r10
80009bd4:	10 99       	mov	r9,r8
80009bd6:	97 1a       	st.w	r11[0x4],r10
80009bd8:	c0 a8       	rjmp	80009bec <_malloc_r+0x1dc>
80009bda:	70 28       	ld.w	r8,r8[0x8]
80009bdc:	08 38       	cp.w	r8,r4
80009bde:	c0 60       	breq	80009bea <_malloc_r+0x1da>
80009be0:	70 1a       	ld.w	r10,r8[0x4]
80009be2:	e0 1a ff fc 	andl	r10,0xfffc
80009be6:	14 39       	cp.w	r9,r10
80009be8:	cf 93       	brcs	80009bda <_malloc_r+0x1ca>
80009bea:	70 39       	ld.w	r9,r8[0xc]
80009bec:	8d 39       	st.w	r6[0xc],r9
80009bee:	8d 28       	st.w	r6[0x8],r8
80009bf0:	91 36       	st.w	r8[0xc],r6
80009bf2:	93 26       	st.w	r9[0x8],r6
80009bf4:	e6 08 14 02 	asr	r8,r3,0x2
80009bf8:	30 1b       	mov	r11,1
80009bfa:	e0 64 04 bc 	mov	r4,1212
80009bfe:	f6 08 09 4b 	lsl	r11,r11,r8
80009c02:	68 18       	ld.w	r8,r4[0x4]
80009c04:	10 3b       	cp.w	r11,r8
80009c06:	e0 8b 00 69 	brhi	80009cd8 <_malloc_r+0x2c8>
80009c0a:	f7 e8 00 09 	and	r9,r11,r8
80009c0e:	c0 b1       	brne	80009c24 <_malloc_r+0x214>
80009c10:	e0 13 ff fc 	andl	r3,0xfffc
80009c14:	a1 7b       	lsl	r11,0x1
80009c16:	2f c3       	sub	r3,-4
80009c18:	c0 38       	rjmp	80009c1e <_malloc_r+0x20e>
80009c1a:	2f c3       	sub	r3,-4
80009c1c:	a1 7b       	lsl	r11,0x1
80009c1e:	f7 e8 00 09 	and	r9,r11,r8
80009c22:	cf c0       	breq	80009c1a <_malloc_r+0x20a>
80009c24:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80009c28:	06 92       	mov	r2,r3
80009c2a:	1c 91       	mov	r1,lr
80009c2c:	62 36       	ld.w	r6,r1[0xc]
80009c2e:	c2 d8       	rjmp	80009c88 <_malloc_r+0x278>
80009c30:	6c 1a       	ld.w	r10,r6[0x4]
80009c32:	e0 1a ff fc 	andl	r10,0xfffc
80009c36:	f4 07 01 08 	sub	r8,r10,r7
80009c3a:	58 f8       	cp.w	r8,15
80009c3c:	e0 8a 00 15 	brle	80009c66 <_malloc_r+0x256>
80009c40:	6c 3a       	ld.w	r10,r6[0xc]
80009c42:	6c 29       	ld.w	r9,r6[0x8]
80009c44:	95 29       	st.w	r10[0x8],r9
80009c46:	93 3a       	st.w	r9[0xc],r10
80009c48:	0e 99       	mov	r9,r7
80009c4a:	ec 07 00 07 	add	r7,r6,r7
80009c4e:	a1 a9       	sbr	r9,0x0
80009c50:	99 37       	st.w	r12[0xc],r7
80009c52:	99 27       	st.w	r12[0x8],r7
80009c54:	8d 19       	st.w	r6[0x4],r9
80009c56:	ee 08 09 08 	st.w	r7[r8],r8
80009c5a:	8f 2c       	st.w	r7[0x8],r12
80009c5c:	8f 3c       	st.w	r7[0xc],r12
80009c5e:	a1 a8       	sbr	r8,0x0
80009c60:	0a 9c       	mov	r12,r5
80009c62:	8f 18       	st.w	r7[0x4],r8
80009c64:	c0 d8       	rjmp	80009c7e <_malloc_r+0x26e>
80009c66:	6c 39       	ld.w	r9,r6[0xc]
80009c68:	58 08       	cp.w	r8,0
80009c6a:	c0 e5       	brlt	80009c86 <_malloc_r+0x276>
80009c6c:	ec 0a 00 0a 	add	r10,r6,r10
80009c70:	74 18       	ld.w	r8,r10[0x4]
80009c72:	a1 a8       	sbr	r8,0x0
80009c74:	0a 9c       	mov	r12,r5
80009c76:	95 18       	st.w	r10[0x4],r8
80009c78:	6c 28       	ld.w	r8,r6[0x8]
80009c7a:	93 28       	st.w	r9[0x8],r8
80009c7c:	91 39       	st.w	r8[0xc],r9
80009c7e:	c8 bd       	rcall	80009f94 <__malloc_unlock>
80009c80:	ec cc ff f8 	sub	r12,r6,-8
80009c84:	d8 32       	popm	r0-r7,pc
80009c86:	12 96       	mov	r6,r9
80009c88:	02 36       	cp.w	r6,r1
80009c8a:	cd 31       	brne	80009c30 <_malloc_r+0x220>
80009c8c:	2f f2       	sub	r2,-1
80009c8e:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80009c92:	c0 30       	breq	80009c98 <_malloc_r+0x288>
80009c94:	2f 81       	sub	r1,-8
80009c96:	cc bb       	rjmp	80009c2c <_malloc_r+0x21c>
80009c98:	1c 98       	mov	r8,lr
80009c9a:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80009c9e:	c0 81       	brne	80009cae <_malloc_r+0x29e>
80009ca0:	68 19       	ld.w	r9,r4[0x4]
80009ca2:	f6 08 11 ff 	rsub	r8,r11,-1
80009ca6:	f3 e8 00 08 	and	r8,r9,r8
80009caa:	89 18       	st.w	r4[0x4],r8
80009cac:	c0 78       	rjmp	80009cba <_malloc_r+0x2aa>
80009cae:	f0 c9 00 08 	sub	r9,r8,8
80009cb2:	20 13       	sub	r3,1
80009cb4:	70 08       	ld.w	r8,r8[0x0]
80009cb6:	12 38       	cp.w	r8,r9
80009cb8:	cf 10       	breq	80009c9a <_malloc_r+0x28a>
80009cba:	a1 7b       	lsl	r11,0x1
80009cbc:	68 18       	ld.w	r8,r4[0x4]
80009cbe:	10 3b       	cp.w	r11,r8
80009cc0:	e0 8b 00 0c 	brhi	80009cd8 <_malloc_r+0x2c8>
80009cc4:	58 0b       	cp.w	r11,0
80009cc6:	c0 90       	breq	80009cd8 <_malloc_r+0x2c8>
80009cc8:	04 93       	mov	r3,r2
80009cca:	c0 38       	rjmp	80009cd0 <_malloc_r+0x2c0>
80009ccc:	2f c3       	sub	r3,-4
80009cce:	a1 7b       	lsl	r11,0x1
80009cd0:	f7 e8 00 09 	and	r9,r11,r8
80009cd4:	ca 81       	brne	80009c24 <_malloc_r+0x214>
80009cd6:	cf bb       	rjmp	80009ccc <_malloc_r+0x2bc>
80009cd8:	68 23       	ld.w	r3,r4[0x8]
80009cda:	66 12       	ld.w	r2,r3[0x4]
80009cdc:	e0 12 ff fc 	andl	r2,0xfffc
80009ce0:	0e 32       	cp.w	r2,r7
80009ce2:	5f 39       	srlo	r9
80009ce4:	e4 07 01 08 	sub	r8,r2,r7
80009ce8:	58 f8       	cp.w	r8,15
80009cea:	5f aa       	srle	r10
80009cec:	f5 e9 10 09 	or	r9,r10,r9
80009cf0:	e0 80 00 98 	breq	80009e20 <_malloc_r+0x410>
80009cf4:	e0 68 0b b8 	mov	r8,3000
80009cf8:	70 01       	ld.w	r1,r8[0x0]
80009cfa:	e0 68 08 c8 	mov	r8,2248
80009cfe:	2f 01       	sub	r1,-16
80009d00:	70 08       	ld.w	r8,r8[0x0]
80009d02:	0e 01       	add	r1,r7
80009d04:	5b f8       	cp.w	r8,-1
80009d06:	c0 40       	breq	80009d0e <_malloc_r+0x2fe>
80009d08:	28 11       	sub	r1,-127
80009d0a:	e0 11 ff 80 	andl	r1,0xff80
80009d0e:	02 9b       	mov	r11,r1
80009d10:	0a 9c       	mov	r12,r5
80009d12:	c4 3d       	rcall	80009f98 <_sbrk_r>
80009d14:	18 96       	mov	r6,r12
80009d16:	5b fc       	cp.w	r12,-1
80009d18:	c7 40       	breq	80009e00 <_malloc_r+0x3f0>
80009d1a:	e6 02 00 08 	add	r8,r3,r2
80009d1e:	10 3c       	cp.w	r12,r8
80009d20:	c0 32       	brcc	80009d26 <_malloc_r+0x316>
80009d22:	08 33       	cp.w	r3,r4
80009d24:	c6 e1       	brne	80009e00 <_malloc_r+0x3f0>
80009d26:	e0 6a 0b bc 	mov	r10,3004
80009d2a:	74 09       	ld.w	r9,r10[0x0]
80009d2c:	e2 09 00 09 	add	r9,r1,r9
80009d30:	95 09       	st.w	r10[0x0],r9
80009d32:	10 36       	cp.w	r6,r8
80009d34:	c0 a1       	brne	80009d48 <_malloc_r+0x338>
80009d36:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80009d3a:	c0 71       	brne	80009d48 <_malloc_r+0x338>
80009d3c:	e2 02 00 02 	add	r2,r1,r2
80009d40:	68 28       	ld.w	r8,r4[0x8]
80009d42:	a1 a2       	sbr	r2,0x0
80009d44:	91 12       	st.w	r8[0x4],r2
80009d46:	c4 e8       	rjmp	80009de2 <_malloc_r+0x3d2>
80009d48:	e0 6a 08 c8 	mov	r10,2248
80009d4c:	74 0b       	ld.w	r11,r10[0x0]
80009d4e:	5b fb       	cp.w	r11,-1
80009d50:	c0 31       	brne	80009d56 <_malloc_r+0x346>
80009d52:	95 06       	st.w	r10[0x0],r6
80009d54:	c0 78       	rjmp	80009d62 <_malloc_r+0x352>
80009d56:	ec 09 00 09 	add	r9,r6,r9
80009d5a:	e0 6a 0b bc 	mov	r10,3004
80009d5e:	10 19       	sub	r9,r8
80009d60:	95 09       	st.w	r10[0x0],r9
80009d62:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80009d66:	f0 09 11 08 	rsub	r9,r8,8
80009d6a:	58 08       	cp.w	r8,0
80009d6c:	f2 08 17 10 	movne	r8,r9
80009d70:	ed d8 e1 06 	addne	r6,r6,r8
80009d74:	28 08       	sub	r8,-128
80009d76:	ec 01 00 01 	add	r1,r6,r1
80009d7a:	0a 9c       	mov	r12,r5
80009d7c:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80009d80:	f0 01 01 01 	sub	r1,r8,r1
80009d84:	02 9b       	mov	r11,r1
80009d86:	c0 9d       	rcall	80009f98 <_sbrk_r>
80009d88:	e0 68 0b bc 	mov	r8,3004
80009d8c:	5b fc       	cp.w	r12,-1
80009d8e:	ec 0c 17 00 	moveq	r12,r6
80009d92:	f9 b1 00 00 	moveq	r1,0
80009d96:	70 09       	ld.w	r9,r8[0x0]
80009d98:	0c 1c       	sub	r12,r6
80009d9a:	89 26       	st.w	r4[0x8],r6
80009d9c:	02 0c       	add	r12,r1
80009d9e:	12 01       	add	r1,r9
80009da0:	a1 ac       	sbr	r12,0x0
80009da2:	91 01       	st.w	r8[0x0],r1
80009da4:	8d 1c       	st.w	r6[0x4],r12
80009da6:	08 33       	cp.w	r3,r4
80009da8:	c1 d0       	breq	80009de2 <_malloc_r+0x3d2>
80009daa:	58 f2       	cp.w	r2,15
80009dac:	e0 8b 00 05 	brhi	80009db6 <_malloc_r+0x3a6>
80009db0:	30 18       	mov	r8,1
80009db2:	8d 18       	st.w	r6[0x4],r8
80009db4:	c2 68       	rjmp	80009e00 <_malloc_r+0x3f0>
80009db6:	30 59       	mov	r9,5
80009db8:	20 c2       	sub	r2,12
80009dba:	e0 12 ff f8 	andl	r2,0xfff8
80009dbe:	e6 02 00 08 	add	r8,r3,r2
80009dc2:	91 29       	st.w	r8[0x8],r9
80009dc4:	91 19       	st.w	r8[0x4],r9
80009dc6:	66 18       	ld.w	r8,r3[0x4]
80009dc8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009dcc:	e5 e8 10 08 	or	r8,r2,r8
80009dd0:	87 18       	st.w	r3[0x4],r8
80009dd2:	58 f2       	cp.w	r2,15
80009dd4:	e0 88 00 07 	brls	80009de2 <_malloc_r+0x3d2>
80009dd8:	e6 cb ff f8 	sub	r11,r3,-8
80009ddc:	0a 9c       	mov	r12,r5
80009dde:	e0 a0 02 79 	rcall	8000a2d0 <_free_r>
80009de2:	e0 69 0b b4 	mov	r9,2996
80009de6:	72 0a       	ld.w	r10,r9[0x0]
80009de8:	e0 68 0b bc 	mov	r8,3004
80009dec:	70 08       	ld.w	r8,r8[0x0]
80009dee:	14 38       	cp.w	r8,r10
80009df0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80009df4:	e0 69 0b b0 	mov	r9,2992
80009df8:	72 0a       	ld.w	r10,r9[0x0]
80009dfa:	14 38       	cp.w	r8,r10
80009dfc:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80009e00:	68 28       	ld.w	r8,r4[0x8]
80009e02:	70 18       	ld.w	r8,r8[0x4]
80009e04:	e0 18 ff fc 	andl	r8,0xfffc
80009e08:	0e 38       	cp.w	r8,r7
80009e0a:	5f 39       	srlo	r9
80009e0c:	0e 18       	sub	r8,r7
80009e0e:	58 f8       	cp.w	r8,15
80009e10:	5f aa       	srle	r10
80009e12:	f5 e9 10 09 	or	r9,r10,r9
80009e16:	c0 50       	breq	80009e20 <_malloc_r+0x410>
80009e18:	0a 9c       	mov	r12,r5
80009e1a:	cb dc       	rcall	80009f94 <__malloc_unlock>
80009e1c:	d8 3a       	popm	r0-r7,pc,r12=0
80009e1e:	d7 03       	nop
80009e20:	68 26       	ld.w	r6,r4[0x8]
80009e22:	a1 a8       	sbr	r8,0x0
80009e24:	0e 99       	mov	r9,r7
80009e26:	a1 a9       	sbr	r9,0x0
80009e28:	8d 19       	st.w	r6[0x4],r9
80009e2a:	ec 07 00 07 	add	r7,r6,r7
80009e2e:	0a 9c       	mov	r12,r5
80009e30:	89 27       	st.w	r4[0x8],r7
80009e32:	8f 18       	st.w	r7[0x4],r8
80009e34:	cb 0c       	rcall	80009f94 <__malloc_unlock>
80009e36:	ec cc ff f8 	sub	r12,r6,-8
80009e3a:	d8 32       	popm	r0-r7,pc

80009e3c <memcpy>:
80009e3c:	58 8a       	cp.w	r10,8
80009e3e:	c2 f5       	brlt	80009e9c <memcpy+0x60>
80009e40:	f9 eb 10 09 	or	r9,r12,r11
80009e44:	e2 19 00 03 	andl	r9,0x3,COH
80009e48:	e0 81 00 97 	brne	80009f76 <memcpy+0x13a>
80009e4c:	e0 4a 00 20 	cp.w	r10,32
80009e50:	c3 b4       	brge	80009ec6 <memcpy+0x8a>
80009e52:	f4 08 14 02 	asr	r8,r10,0x2
80009e56:	f0 09 11 08 	rsub	r9,r8,8
80009e5a:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80009e5e:	76 69       	ld.w	r9,r11[0x18]
80009e60:	99 69       	st.w	r12[0x18],r9
80009e62:	76 59       	ld.w	r9,r11[0x14]
80009e64:	99 59       	st.w	r12[0x14],r9
80009e66:	76 49       	ld.w	r9,r11[0x10]
80009e68:	99 49       	st.w	r12[0x10],r9
80009e6a:	76 39       	ld.w	r9,r11[0xc]
80009e6c:	99 39       	st.w	r12[0xc],r9
80009e6e:	76 29       	ld.w	r9,r11[0x8]
80009e70:	99 29       	st.w	r12[0x8],r9
80009e72:	76 19       	ld.w	r9,r11[0x4]
80009e74:	99 19       	st.w	r12[0x4],r9
80009e76:	76 09       	ld.w	r9,r11[0x0]
80009e78:	99 09       	st.w	r12[0x0],r9
80009e7a:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80009e7e:	f8 08 00 28 	add	r8,r12,r8<<0x2
80009e82:	e0 1a 00 03 	andl	r10,0x3
80009e86:	f4 0a 11 04 	rsub	r10,r10,4
80009e8a:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80009e8e:	17 a9       	ld.ub	r9,r11[0x2]
80009e90:	b0 a9       	st.b	r8[0x2],r9
80009e92:	17 99       	ld.ub	r9,r11[0x1]
80009e94:	b0 99       	st.b	r8[0x1],r9
80009e96:	17 89       	ld.ub	r9,r11[0x0]
80009e98:	b0 89       	st.b	r8[0x0],r9
80009e9a:	5e fc       	retal	r12
80009e9c:	f4 0a 11 09 	rsub	r10,r10,9
80009ea0:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80009ea4:	17 f9       	ld.ub	r9,r11[0x7]
80009ea6:	b8 f9       	st.b	r12[0x7],r9
80009ea8:	17 e9       	ld.ub	r9,r11[0x6]
80009eaa:	b8 e9       	st.b	r12[0x6],r9
80009eac:	17 d9       	ld.ub	r9,r11[0x5]
80009eae:	b8 d9       	st.b	r12[0x5],r9
80009eb0:	17 c9       	ld.ub	r9,r11[0x4]
80009eb2:	b8 c9       	st.b	r12[0x4],r9
80009eb4:	17 b9       	ld.ub	r9,r11[0x3]
80009eb6:	b8 b9       	st.b	r12[0x3],r9
80009eb8:	17 a9       	ld.ub	r9,r11[0x2]
80009eba:	b8 a9       	st.b	r12[0x2],r9
80009ebc:	17 99       	ld.ub	r9,r11[0x1]
80009ebe:	b8 99       	st.b	r12[0x1],r9
80009ec0:	17 89       	ld.ub	r9,r11[0x0]
80009ec2:	b8 89       	st.b	r12[0x0],r9
80009ec4:	5e fc       	retal	r12
80009ec6:	eb cd 40 c0 	pushm	r6-r7,lr
80009eca:	18 99       	mov	r9,r12
80009ecc:	22 0a       	sub	r10,32
80009ece:	b7 07       	ld.d	r6,r11++
80009ed0:	b3 26       	st.d	r9++,r6
80009ed2:	b7 07       	ld.d	r6,r11++
80009ed4:	b3 26       	st.d	r9++,r6
80009ed6:	b7 07       	ld.d	r6,r11++
80009ed8:	b3 26       	st.d	r9++,r6
80009eda:	b7 07       	ld.d	r6,r11++
80009edc:	b3 26       	st.d	r9++,r6
80009ede:	22 0a       	sub	r10,32
80009ee0:	cf 74       	brge	80009ece <memcpy+0x92>
80009ee2:	2f 0a       	sub	r10,-16
80009ee4:	c0 65       	brlt	80009ef0 <memcpy+0xb4>
80009ee6:	b7 07       	ld.d	r6,r11++
80009ee8:	b3 26       	st.d	r9++,r6
80009eea:	b7 07       	ld.d	r6,r11++
80009eec:	b3 26       	st.d	r9++,r6
80009eee:	21 0a       	sub	r10,16
80009ef0:	5c 3a       	neg	r10
80009ef2:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80009ef6:	d7 03       	nop
80009ef8:	d7 03       	nop
80009efa:	f7 36 00 0e 	ld.ub	r6,r11[14]
80009efe:	f3 66 00 0e 	st.b	r9[14],r6
80009f02:	f7 36 00 0d 	ld.ub	r6,r11[13]
80009f06:	f3 66 00 0d 	st.b	r9[13],r6
80009f0a:	f7 36 00 0c 	ld.ub	r6,r11[12]
80009f0e:	f3 66 00 0c 	st.b	r9[12],r6
80009f12:	f7 36 00 0b 	ld.ub	r6,r11[11]
80009f16:	f3 66 00 0b 	st.b	r9[11],r6
80009f1a:	f7 36 00 0a 	ld.ub	r6,r11[10]
80009f1e:	f3 66 00 0a 	st.b	r9[10],r6
80009f22:	f7 36 00 09 	ld.ub	r6,r11[9]
80009f26:	f3 66 00 09 	st.b	r9[9],r6
80009f2a:	f7 36 00 08 	ld.ub	r6,r11[8]
80009f2e:	f3 66 00 08 	st.b	r9[8],r6
80009f32:	f7 36 00 07 	ld.ub	r6,r11[7]
80009f36:	f3 66 00 07 	st.b	r9[7],r6
80009f3a:	f7 36 00 06 	ld.ub	r6,r11[6]
80009f3e:	f3 66 00 06 	st.b	r9[6],r6
80009f42:	f7 36 00 05 	ld.ub	r6,r11[5]
80009f46:	f3 66 00 05 	st.b	r9[5],r6
80009f4a:	f7 36 00 04 	ld.ub	r6,r11[4]
80009f4e:	f3 66 00 04 	st.b	r9[4],r6
80009f52:	f7 36 00 03 	ld.ub	r6,r11[3]
80009f56:	f3 66 00 03 	st.b	r9[3],r6
80009f5a:	f7 36 00 02 	ld.ub	r6,r11[2]
80009f5e:	f3 66 00 02 	st.b	r9[2],r6
80009f62:	f7 36 00 01 	ld.ub	r6,r11[1]
80009f66:	f3 66 00 01 	st.b	r9[1],r6
80009f6a:	f7 36 00 00 	ld.ub	r6,r11[0]
80009f6e:	f3 66 00 00 	st.b	r9[0],r6
80009f72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009f76:	20 1a       	sub	r10,1
80009f78:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80009f7c:	f8 0a 0b 09 	st.b	r12[r10],r9
80009f80:	cf b1       	brne	80009f76 <memcpy+0x13a>
80009f82:	5e fc       	retal	r12

80009f84 <memset>:
80009f84:	18 98       	mov	r8,r12
80009f86:	c0 38       	rjmp	80009f8c <memset+0x8>
80009f88:	10 cb       	st.b	r8++,r11
80009f8a:	20 1a       	sub	r10,1
80009f8c:	58 0a       	cp.w	r10,0
80009f8e:	cf d1       	brne	80009f88 <memset+0x4>
80009f90:	5e fc       	retal	r12

80009f92 <__malloc_lock>:
80009f92:	5e fc       	retal	r12

80009f94 <__malloc_unlock>:
80009f94:	5e fc       	retal	r12
80009f96:	d7 03       	nop

80009f98 <_sbrk_r>:
80009f98:	d4 21       	pushm	r4-r7,lr
80009f9a:	30 08       	mov	r8,0
80009f9c:	18 97       	mov	r7,r12
80009f9e:	e0 66 0c c0 	mov	r6,3264
80009fa2:	16 9c       	mov	r12,r11
80009fa4:	8d 08       	st.w	r6[0x0],r8
80009fa6:	c6 bc       	rcall	8000a07c <_sbrk>
80009fa8:	5b fc       	cp.w	r12,-1
80009faa:	c0 51       	brne	80009fb4 <_sbrk_r+0x1c>
80009fac:	6c 08       	ld.w	r8,r6[0x0]
80009fae:	58 08       	cp.w	r8,0
80009fb0:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009fb4:	d8 22       	popm	r4-r7,pc
80009fb6:	d7 03       	nop

80009fb8 <_close>:
80009fb8:	30 28       	mov	r8,2
80009fba:	d6 73       	breakpoint
80009fbc:	3f fc       	mov	r12,-1
80009fbe:	35 8b       	mov	r11,88
80009fc0:	58 0c       	cp.w	r12,0
80009fc2:	5e 4c       	retge	r12
80009fc4:	e0 6a 0c c0 	mov	r10,3264
80009fc8:	95 0b       	st.w	r10[0x0],r11
80009fca:	5e fc       	retal	r12

80009fcc <_lseek>:
80009fcc:	30 58       	mov	r8,5
80009fce:	d6 73       	breakpoint
80009fd0:	3f fc       	mov	r12,-1
80009fd2:	35 8b       	mov	r11,88
80009fd4:	58 0c       	cp.w	r12,0
80009fd6:	5e 4c       	retge	r12
80009fd8:	e0 6a 0c c0 	mov	r10,3264
80009fdc:	95 0b       	st.w	r10[0x0],r11
80009fde:	5e fc       	retal	r12

80009fe0 <_read>:
80009fe0:	30 38       	mov	r8,3
80009fe2:	d6 73       	breakpoint
80009fe4:	3f fc       	mov	r12,-1
80009fe6:	35 8b       	mov	r11,88
80009fe8:	58 0c       	cp.w	r12,0
80009fea:	5e 4c       	retge	r12
80009fec:	e0 6a 0c c0 	mov	r10,3264
80009ff0:	95 0b       	st.w	r10[0x0],r11
80009ff2:	5e fc       	retal	r12

80009ff4 <_write>:
80009ff4:	30 48       	mov	r8,4
80009ff6:	d6 73       	breakpoint
80009ff8:	3f fc       	mov	r12,-1
80009ffa:	35 8b       	mov	r11,88
80009ffc:	58 0c       	cp.w	r12,0
80009ffe:	5e 4c       	retge	r12
8000a000:	e0 6a 0c c0 	mov	r10,3264
8000a004:	95 0b       	st.w	r10[0x0],r11
8000a006:	5e fc       	retal	r12

8000a008 <isatty>:
8000a008:	30 b8       	mov	r8,11
8000a00a:	d6 73       	breakpoint
8000a00c:	3f fc       	mov	r12,-1
8000a00e:	35 8b       	mov	r11,88
8000a010:	58 0c       	cp.w	r12,0
8000a012:	5e 4c       	retge	r12
8000a014:	e0 6a 0c c0 	mov	r10,3264
8000a018:	95 0b       	st.w	r10[0x0],r11
8000a01a:	5e fc       	retal	r12

8000a01c <_fstat_host>:
8000a01c:	30 98       	mov	r8,9
8000a01e:	d6 73       	breakpoint
8000a020:	3f fc       	mov	r12,-1
8000a022:	35 8b       	mov	r11,88
8000a024:	58 0c       	cp.w	r12,0
8000a026:	5e 4c       	retge	r12
8000a028:	e0 6a 0c c0 	mov	r10,3264
8000a02c:	95 0b       	st.w	r10[0x0],r11
8000a02e:	5e fc       	retal	r12

8000a030 <_fstat>:
8000a030:	d4 21       	pushm	r4-r7,lr
8000a032:	21 0d       	sub	sp,64
8000a034:	16 97       	mov	r7,r11
8000a036:	1a 9b       	mov	r11,sp
8000a038:	cf 2f       	rcall	8000a01c <_fstat_host>
8000a03a:	c0 34       	brge	8000a040 <_fstat+0x10>
8000a03c:	3f fc       	mov	r12,-1
8000a03e:	c1 c8       	rjmp	8000a076 <_fstat+0x46>
8000a040:	40 08       	lddsp	r8,sp[0x0]
8000a042:	ae 08       	st.h	r7[0x0],r8
8000a044:	40 18       	lddsp	r8,sp[0x4]
8000a046:	ae 18       	st.h	r7[0x2],r8
8000a048:	40 28       	lddsp	r8,sp[0x8]
8000a04a:	8f 18       	st.w	r7[0x4],r8
8000a04c:	40 38       	lddsp	r8,sp[0xc]
8000a04e:	ae 48       	st.h	r7[0x8],r8
8000a050:	40 48       	lddsp	r8,sp[0x10]
8000a052:	ae 58       	st.h	r7[0xa],r8
8000a054:	40 58       	lddsp	r8,sp[0x14]
8000a056:	ae 68       	st.h	r7[0xc],r8
8000a058:	40 68       	lddsp	r8,sp[0x18]
8000a05a:	ae 78       	st.h	r7[0xe],r8
8000a05c:	40 88       	lddsp	r8,sp[0x20]
8000a05e:	8f 48       	st.w	r7[0x10],r8
8000a060:	40 a8       	lddsp	r8,sp[0x28]
8000a062:	8f b8       	st.w	r7[0x2c],r8
8000a064:	40 c8       	lddsp	r8,sp[0x30]
8000a066:	8f c8       	st.w	r7[0x30],r8
8000a068:	40 d8       	lddsp	r8,sp[0x34]
8000a06a:	8f 58       	st.w	r7[0x14],r8
8000a06c:	40 e8       	lddsp	r8,sp[0x38]
8000a06e:	30 0c       	mov	r12,0
8000a070:	8f 78       	st.w	r7[0x1c],r8
8000a072:	40 f8       	lddsp	r8,sp[0x3c]
8000a074:	8f 98       	st.w	r7[0x24],r8
8000a076:	2f 0d       	sub	sp,-64
8000a078:	d8 22       	popm	r4-r7,pc
8000a07a:	d7 03       	nop

8000a07c <_sbrk>:
8000a07c:	d4 01       	pushm	lr
8000a07e:	e0 68 0b e4 	mov	r8,3044
8000a082:	70 09       	ld.w	r9,r8[0x0]
8000a084:	58 09       	cp.w	r9,0
8000a086:	c0 41       	brne	8000a08e <_sbrk+0x12>
8000a088:	e0 69 0c c8 	mov	r9,3272
8000a08c:	91 09       	st.w	r8[0x0],r9
8000a08e:	e0 69 0b e4 	mov	r9,3044
8000a092:	e0 6a f0 00 	mov	r10,61440
8000a096:	72 08       	ld.w	r8,r9[0x0]
8000a098:	f0 0c 00 0c 	add	r12,r8,r12
8000a09c:	14 3c       	cp.w	r12,r10
8000a09e:	e0 8b 00 04 	brhi	8000a0a6 <_sbrk+0x2a>
8000a0a2:	93 0c       	st.w	r9[0x0],r12
8000a0a4:	c0 58       	rjmp	8000a0ae <_sbrk+0x32>
8000a0a6:	c2 9c       	rcall	8000a0f8 <__errno>
8000a0a8:	30 c8       	mov	r8,12
8000a0aa:	99 08       	st.w	r12[0x0],r8
8000a0ac:	3f f8       	mov	r8,-1
8000a0ae:	10 9c       	mov	r12,r8
8000a0b0:	d8 02       	popm	pc
8000a0b2:	d7 03       	nop

8000a0b4 <_vsprintf_r>:
8000a0b4:	d4 01       	pushm	lr
8000a0b6:	21 7d       	sub	sp,92
8000a0b8:	e0 68 ff ff 	mov	r8,65535
8000a0bc:	ea 18 7f ff 	orh	r8,0x7fff
8000a0c0:	50 58       	stdsp	sp[0x14],r8
8000a0c2:	50 28       	stdsp	sp[0x8],r8
8000a0c4:	e0 68 02 08 	mov	r8,520
8000a0c8:	ba 68       	st.h	sp[0xc],r8
8000a0ca:	3f f8       	mov	r8,-1
8000a0cc:	50 4b       	stdsp	sp[0x10],r11
8000a0ce:	50 0b       	stdsp	sp[0x0],r11
8000a0d0:	ba 78       	st.h	sp[0xe],r8
8000a0d2:	1a 9b       	mov	r11,sp
8000a0d4:	e0 a0 03 be 	rcall	8000a850 <_vfprintf_r>
8000a0d8:	30 09       	mov	r9,0
8000a0da:	40 08       	lddsp	r8,sp[0x0]
8000a0dc:	b0 89       	st.b	r8[0x0],r9
8000a0de:	2e 9d       	sub	sp,-92
8000a0e0:	d8 02       	popm	pc
8000a0e2:	d7 03       	nop

8000a0e4 <vsprintf>:
8000a0e4:	d4 01       	pushm	lr
8000a0e6:	e0 68 04 b8 	mov	r8,1208
8000a0ea:	14 99       	mov	r9,r10
8000a0ec:	16 9a       	mov	r10,r11
8000a0ee:	18 9b       	mov	r11,r12
8000a0f0:	70 0c       	ld.w	r12,r8[0x0]
8000a0f2:	ce 1f       	rcall	8000a0b4 <_vsprintf_r>
8000a0f4:	d8 02       	popm	pc
8000a0f6:	d7 03       	nop

8000a0f8 <__errno>:
8000a0f8:	e0 68 04 b8 	mov	r8,1208
8000a0fc:	70 0c       	ld.w	r12,r8[0x0]
8000a0fe:	2f 4c       	sub	r12,-12
8000a100:	5e fc       	retal	r12
8000a102:	d7 03       	nop

8000a104 <__sfp_lock_acquire>:
8000a104:	5e fc       	retal	r12

8000a106 <__sfp_lock_release>:
8000a106:	5e fc       	retal	r12

8000a108 <_cleanup_r>:
8000a108:	d4 01       	pushm	lr
8000a10a:	fe cb ca d2 	sub	r11,pc,-13614
8000a10e:	ca 5d       	rcall	8000a458 <_fwalk>
8000a110:	d8 02       	popm	pc
8000a112:	d7 03       	nop

8000a114 <__sfmoreglue>:
8000a114:	d4 21       	pushm	r4-r7,lr
8000a116:	16 95       	mov	r5,r11
8000a118:	f6 06 10 5c 	mul	r6,r11,92
8000a11c:	ec cb ff f4 	sub	r11,r6,-12
8000a120:	fe b0 fc 78 	rcall	80009a10 <_malloc_r>
8000a124:	18 97       	mov	r7,r12
8000a126:	c0 80       	breq	8000a136 <__sfmoreglue+0x22>
8000a128:	99 15       	st.w	r12[0x4],r5
8000a12a:	30 0b       	mov	r11,0
8000a12c:	2f 4c       	sub	r12,-12
8000a12e:	0c 9a       	mov	r10,r6
8000a130:	8f 2c       	st.w	r7[0x8],r12
8000a132:	8f 0b       	st.w	r7[0x0],r11
8000a134:	c2 8f       	rcall	80009f84 <memset>
8000a136:	0e 9c       	mov	r12,r7
8000a138:	d8 22       	popm	r4-r7,pc
8000a13a:	d7 03       	nop

8000a13c <__sfp>:
8000a13c:	d4 21       	pushm	r4-r7,lr
8000a13e:	fe c8 a9 1a 	sub	r8,pc,-22246
8000a142:	18 96       	mov	r6,r12
8000a144:	70 07       	ld.w	r7,r8[0x0]
8000a146:	6e 68       	ld.w	r8,r7[0x18]
8000a148:	58 08       	cp.w	r8,0
8000a14a:	c0 31       	brne	8000a150 <__sfp+0x14>
8000a14c:	0e 9c       	mov	r12,r7
8000a14e:	c2 dc       	rcall	8000a1a8 <__sinit>
8000a150:	ee c7 ff 28 	sub	r7,r7,-216
8000a154:	30 05       	mov	r5,0
8000a156:	6e 2c       	ld.w	r12,r7[0x8]
8000a158:	6e 18       	ld.w	r8,r7[0x4]
8000a15a:	c0 68       	rjmp	8000a166 <__sfp+0x2a>
8000a15c:	98 69       	ld.sh	r9,r12[0xc]
8000a15e:	ea 09 19 00 	cp.h	r9,r5
8000a162:	c1 10       	breq	8000a184 <__sfp+0x48>
8000a164:	2a 4c       	sub	r12,-92
8000a166:	20 18       	sub	r8,1
8000a168:	cf a7       	brpl	8000a15c <__sfp+0x20>
8000a16a:	6e 08       	ld.w	r8,r7[0x0]
8000a16c:	58 08       	cp.w	r8,0
8000a16e:	c0 61       	brne	8000a17a <__sfp+0x3e>
8000a170:	30 4b       	mov	r11,4
8000a172:	0c 9c       	mov	r12,r6
8000a174:	cd 0f       	rcall	8000a114 <__sfmoreglue>
8000a176:	8f 0c       	st.w	r7[0x0],r12
8000a178:	c0 30       	breq	8000a17e <__sfp+0x42>
8000a17a:	6e 07       	ld.w	r7,r7[0x0]
8000a17c:	ce db       	rjmp	8000a156 <__sfp+0x1a>
8000a17e:	30 c8       	mov	r8,12
8000a180:	8d 38       	st.w	r6[0xc],r8
8000a182:	d8 22       	popm	r4-r7,pc
8000a184:	30 08       	mov	r8,0
8000a186:	f9 48 00 4c 	st.w	r12[76],r8
8000a18a:	99 08       	st.w	r12[0x0],r8
8000a18c:	99 28       	st.w	r12[0x8],r8
8000a18e:	99 18       	st.w	r12[0x4],r8
8000a190:	99 48       	st.w	r12[0x10],r8
8000a192:	99 58       	st.w	r12[0x14],r8
8000a194:	99 68       	st.w	r12[0x18],r8
8000a196:	99 d8       	st.w	r12[0x34],r8
8000a198:	99 e8       	st.w	r12[0x38],r8
8000a19a:	f9 48 00 48 	st.w	r12[72],r8
8000a19e:	3f f8       	mov	r8,-1
8000a1a0:	b8 78       	st.h	r12[0xe],r8
8000a1a2:	30 18       	mov	r8,1
8000a1a4:	b8 68       	st.h	r12[0xc],r8
8000a1a6:	d8 22       	popm	r4-r7,pc

8000a1a8 <__sinit>:
8000a1a8:	d4 21       	pushm	r4-r7,lr
8000a1aa:	18 96       	mov	r6,r12
8000a1ac:	78 67       	ld.w	r7,r12[0x18]
8000a1ae:	58 07       	cp.w	r7,0
8000a1b0:	c4 91       	brne	8000a242 <__sinit+0x9a>
8000a1b2:	fe c8 00 aa 	sub	r8,pc,170
8000a1b6:	30 15       	mov	r5,1
8000a1b8:	99 a8       	st.w	r12[0x28],r8
8000a1ba:	f9 47 00 d8 	st.w	r12[216],r7
8000a1be:	f9 47 00 dc 	st.w	r12[220],r7
8000a1c2:	f9 47 00 e0 	st.w	r12[224],r7
8000a1c6:	99 65       	st.w	r12[0x18],r5
8000a1c8:	cb af       	rcall	8000a13c <__sfp>
8000a1ca:	8d 0c       	st.w	r6[0x0],r12
8000a1cc:	0c 9c       	mov	r12,r6
8000a1ce:	cb 7f       	rcall	8000a13c <__sfp>
8000a1d0:	8d 1c       	st.w	r6[0x4],r12
8000a1d2:	0c 9c       	mov	r12,r6
8000a1d4:	cb 4f       	rcall	8000a13c <__sfp>
8000a1d6:	6c 09       	ld.w	r9,r6[0x0]
8000a1d8:	30 48       	mov	r8,4
8000a1da:	93 07       	st.w	r9[0x0],r7
8000a1dc:	b2 68       	st.h	r9[0xc],r8
8000a1de:	93 17       	st.w	r9[0x4],r7
8000a1e0:	93 27       	st.w	r9[0x8],r7
8000a1e2:	6c 18       	ld.w	r8,r6[0x4]
8000a1e4:	b2 77       	st.h	r9[0xe],r7
8000a1e6:	93 47       	st.w	r9[0x10],r7
8000a1e8:	93 57       	st.w	r9[0x14],r7
8000a1ea:	93 67       	st.w	r9[0x18],r7
8000a1ec:	93 89       	st.w	r9[0x20],r9
8000a1ee:	91 07       	st.w	r8[0x0],r7
8000a1f0:	91 17       	st.w	r8[0x4],r7
8000a1f2:	91 27       	st.w	r8[0x8],r7
8000a1f4:	fe ce fc f4 	sub	lr,pc,-780
8000a1f8:	fe cb fd 28 	sub	r11,pc,-728
8000a1fc:	93 9e       	st.w	r9[0x24],lr
8000a1fe:	93 ab       	st.w	r9[0x28],r11
8000a200:	fe ca fd 54 	sub	r10,pc,-684
8000a204:	fe c4 fd 64 	sub	r4,pc,-668
8000a208:	93 ba       	st.w	r9[0x2c],r10
8000a20a:	93 c4       	st.w	r9[0x30],r4
8000a20c:	30 99       	mov	r9,9
8000a20e:	b0 69       	st.h	r8[0xc],r9
8000a210:	b0 75       	st.h	r8[0xe],r5
8000a212:	91 c4       	st.w	r8[0x30],r4
8000a214:	91 47       	st.w	r8[0x10],r7
8000a216:	91 57       	st.w	r8[0x14],r7
8000a218:	91 67       	st.w	r8[0x18],r7
8000a21a:	91 88       	st.w	r8[0x20],r8
8000a21c:	91 9e       	st.w	r8[0x24],lr
8000a21e:	91 ab       	st.w	r8[0x28],r11
8000a220:	91 ba       	st.w	r8[0x2c],r10
8000a222:	8d 2c       	st.w	r6[0x8],r12
8000a224:	31 28       	mov	r8,18
8000a226:	99 07       	st.w	r12[0x0],r7
8000a228:	b8 68       	st.h	r12[0xc],r8
8000a22a:	99 17       	st.w	r12[0x4],r7
8000a22c:	99 27       	st.w	r12[0x8],r7
8000a22e:	30 28       	mov	r8,2
8000a230:	b8 78       	st.h	r12[0xe],r8
8000a232:	99 c4       	st.w	r12[0x30],r4
8000a234:	99 67       	st.w	r12[0x18],r7
8000a236:	99 9e       	st.w	r12[0x24],lr
8000a238:	99 ab       	st.w	r12[0x28],r11
8000a23a:	99 ba       	st.w	r12[0x2c],r10
8000a23c:	99 47       	st.w	r12[0x10],r7
8000a23e:	99 57       	st.w	r12[0x14],r7
8000a240:	99 8c       	st.w	r12[0x20],r12
8000a242:	d8 22       	popm	r4-r7,pc

8000a244 <_malloc_trim_r>:
8000a244:	d4 21       	pushm	r4-r7,lr
8000a246:	16 95       	mov	r5,r11
8000a248:	18 97       	mov	r7,r12
8000a24a:	ca 4e       	rcall	80009f92 <__malloc_lock>
8000a24c:	e0 64 04 bc 	mov	r4,1212
8000a250:	68 28       	ld.w	r8,r4[0x8]
8000a252:	70 16       	ld.w	r6,r8[0x4]
8000a254:	e0 16 ff fc 	andl	r6,0xfffc
8000a258:	ec c8 ff 91 	sub	r8,r6,-111
8000a25c:	f0 05 01 05 	sub	r5,r8,r5
8000a260:	e0 15 ff 80 	andl	r5,0xff80
8000a264:	ea c5 00 80 	sub	r5,r5,128
8000a268:	e0 45 00 7f 	cp.w	r5,127
8000a26c:	e0 8a 00 22 	brle	8000a2b0 <_malloc_trim_r+0x6c>
8000a270:	30 0b       	mov	r11,0
8000a272:	0e 9c       	mov	r12,r7
8000a274:	c9 2e       	rcall	80009f98 <_sbrk_r>
8000a276:	68 28       	ld.w	r8,r4[0x8]
8000a278:	0c 08       	add	r8,r6
8000a27a:	10 3c       	cp.w	r12,r8
8000a27c:	c1 a1       	brne	8000a2b0 <_malloc_trim_r+0x6c>
8000a27e:	ea 0b 11 00 	rsub	r11,r5,0
8000a282:	0e 9c       	mov	r12,r7
8000a284:	c8 ae       	rcall	80009f98 <_sbrk_r>
8000a286:	5b fc       	cp.w	r12,-1
8000a288:	c1 71       	brne	8000a2b6 <_malloc_trim_r+0x72>
8000a28a:	30 0b       	mov	r11,0
8000a28c:	0e 9c       	mov	r12,r7
8000a28e:	c8 5e       	rcall	80009f98 <_sbrk_r>
8000a290:	68 28       	ld.w	r8,r4[0x8]
8000a292:	f8 08 01 09 	sub	r9,r12,r8
8000a296:	58 f9       	cp.w	r9,15
8000a298:	e0 8a 00 0c 	brle	8000a2b0 <_malloc_trim_r+0x6c>
8000a29c:	a1 a9       	sbr	r9,0x0
8000a29e:	91 19       	st.w	r8[0x4],r9
8000a2a0:	e0 68 08 c8 	mov	r8,2248
8000a2a4:	70 09       	ld.w	r9,r8[0x0]
8000a2a6:	e0 68 0b bc 	mov	r8,3004
8000a2aa:	f8 09 01 09 	sub	r9,r12,r9
8000a2ae:	91 09       	st.w	r8[0x0],r9
8000a2b0:	0e 9c       	mov	r12,r7
8000a2b2:	c7 1e       	rcall	80009f94 <__malloc_unlock>
8000a2b4:	d8 2a       	popm	r4-r7,pc,r12=0
8000a2b6:	68 28       	ld.w	r8,r4[0x8]
8000a2b8:	0a 16       	sub	r6,r5
8000a2ba:	a1 a6       	sbr	r6,0x0
8000a2bc:	91 16       	st.w	r8[0x4],r6
8000a2be:	e0 68 0b bc 	mov	r8,3004
8000a2c2:	70 09       	ld.w	r9,r8[0x0]
8000a2c4:	0a 19       	sub	r9,r5
8000a2c6:	0e 9c       	mov	r12,r7
8000a2c8:	91 09       	st.w	r8[0x0],r9
8000a2ca:	c6 5e       	rcall	80009f94 <__malloc_unlock>
8000a2cc:	da 2a       	popm	r4-r7,pc,r12=1
8000a2ce:	d7 03       	nop

8000a2d0 <_free_r>:
8000a2d0:	d4 21       	pushm	r4-r7,lr
8000a2d2:	16 96       	mov	r6,r11
8000a2d4:	18 97       	mov	r7,r12
8000a2d6:	58 0b       	cp.w	r11,0
8000a2d8:	e0 80 00 be 	breq	8000a454 <_free_r+0x184>
8000a2dc:	c5 be       	rcall	80009f92 <__malloc_lock>
8000a2de:	20 86       	sub	r6,8
8000a2e0:	e0 6a 04 bc 	mov	r10,1212
8000a2e4:	6c 18       	ld.w	r8,r6[0x4]
8000a2e6:	74 2e       	ld.w	lr,r10[0x8]
8000a2e8:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000a2ec:	a1 c8       	cbr	r8,0x0
8000a2ee:	ec 08 00 09 	add	r9,r6,r8
8000a2f2:	72 1b       	ld.w	r11,r9[0x4]
8000a2f4:	e0 1b ff fc 	andl	r11,0xfffc
8000a2f8:	1c 39       	cp.w	r9,lr
8000a2fa:	c1 d1       	brne	8000a334 <_free_r+0x64>
8000a2fc:	f6 08 00 08 	add	r8,r11,r8
8000a300:	58 0c       	cp.w	r12,0
8000a302:	c0 81       	brne	8000a312 <_free_r+0x42>
8000a304:	6c 09       	ld.w	r9,r6[0x0]
8000a306:	12 16       	sub	r6,r9
8000a308:	12 08       	add	r8,r9
8000a30a:	6c 3b       	ld.w	r11,r6[0xc]
8000a30c:	6c 29       	ld.w	r9,r6[0x8]
8000a30e:	97 29       	st.w	r11[0x8],r9
8000a310:	93 3b       	st.w	r9[0xc],r11
8000a312:	10 99       	mov	r9,r8
8000a314:	95 26       	st.w	r10[0x8],r6
8000a316:	a1 a9       	sbr	r9,0x0
8000a318:	8d 19       	st.w	r6[0x4],r9
8000a31a:	e0 69 08 c4 	mov	r9,2244
8000a31e:	72 09       	ld.w	r9,r9[0x0]
8000a320:	12 38       	cp.w	r8,r9
8000a322:	c0 63       	brcs	8000a32e <_free_r+0x5e>
8000a324:	e0 68 0b b8 	mov	r8,3000
8000a328:	0e 9c       	mov	r12,r7
8000a32a:	70 0b       	ld.w	r11,r8[0x0]
8000a32c:	c8 cf       	rcall	8000a244 <_malloc_trim_r>
8000a32e:	0e 9c       	mov	r12,r7
8000a330:	c3 2e       	rcall	80009f94 <__malloc_unlock>
8000a332:	d8 22       	popm	r4-r7,pc
8000a334:	93 1b       	st.w	r9[0x4],r11
8000a336:	58 0c       	cp.w	r12,0
8000a338:	c0 30       	breq	8000a33e <_free_r+0x6e>
8000a33a:	30 0c       	mov	r12,0
8000a33c:	c1 08       	rjmp	8000a35c <_free_r+0x8c>
8000a33e:	6c 0e       	ld.w	lr,r6[0x0]
8000a340:	f4 c5 ff f8 	sub	r5,r10,-8
8000a344:	1c 16       	sub	r6,lr
8000a346:	1c 08       	add	r8,lr
8000a348:	6c 2e       	ld.w	lr,r6[0x8]
8000a34a:	0a 3e       	cp.w	lr,r5
8000a34c:	f9 bc 00 01 	moveq	r12,1
8000a350:	ed f5 10 03 	ld.wne	r5,r6[0xc]
8000a354:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000a358:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000a35c:	f2 0b 00 0e 	add	lr,r9,r11
8000a360:	7c 1e       	ld.w	lr,lr[0x4]
8000a362:	ed be 00 00 	bld	lr,0x0
8000a366:	c1 40       	breq	8000a38e <_free_r+0xbe>
8000a368:	16 08       	add	r8,r11
8000a36a:	58 0c       	cp.w	r12,0
8000a36c:	c0 d1       	brne	8000a386 <_free_r+0xb6>
8000a36e:	e0 6e 04 bc 	mov	lr,1212
8000a372:	72 2b       	ld.w	r11,r9[0x8]
8000a374:	2f 8e       	sub	lr,-8
8000a376:	1c 3b       	cp.w	r11,lr
8000a378:	c0 71       	brne	8000a386 <_free_r+0xb6>
8000a37a:	97 36       	st.w	r11[0xc],r6
8000a37c:	97 26       	st.w	r11[0x8],r6
8000a37e:	8d 2b       	st.w	r6[0x8],r11
8000a380:	8d 3b       	st.w	r6[0xc],r11
8000a382:	30 1c       	mov	r12,1
8000a384:	c0 58       	rjmp	8000a38e <_free_r+0xbe>
8000a386:	72 2b       	ld.w	r11,r9[0x8]
8000a388:	72 39       	ld.w	r9,r9[0xc]
8000a38a:	93 2b       	st.w	r9[0x8],r11
8000a38c:	97 39       	st.w	r11[0xc],r9
8000a38e:	10 99       	mov	r9,r8
8000a390:	ec 08 09 08 	st.w	r6[r8],r8
8000a394:	a1 a9       	sbr	r9,0x0
8000a396:	8d 19       	st.w	r6[0x4],r9
8000a398:	58 0c       	cp.w	r12,0
8000a39a:	c5 a1       	brne	8000a44e <_free_r+0x17e>
8000a39c:	e0 48 01 ff 	cp.w	r8,511
8000a3a0:	e0 8b 00 13 	brhi	8000a3c6 <_free_r+0xf6>
8000a3a4:	a3 98       	lsr	r8,0x3
8000a3a6:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000a3aa:	72 2b       	ld.w	r11,r9[0x8]
8000a3ac:	8d 39       	st.w	r6[0xc],r9
8000a3ae:	8d 2b       	st.w	r6[0x8],r11
8000a3b0:	97 36       	st.w	r11[0xc],r6
8000a3b2:	93 26       	st.w	r9[0x8],r6
8000a3b4:	a3 48       	asr	r8,0x2
8000a3b6:	74 19       	ld.w	r9,r10[0x4]
8000a3b8:	30 1b       	mov	r11,1
8000a3ba:	f6 08 09 48 	lsl	r8,r11,r8
8000a3be:	f3 e8 10 08 	or	r8,r9,r8
8000a3c2:	95 18       	st.w	r10[0x4],r8
8000a3c4:	c4 58       	rjmp	8000a44e <_free_r+0x17e>
8000a3c6:	f0 0b 16 09 	lsr	r11,r8,0x9
8000a3ca:	58 4b       	cp.w	r11,4
8000a3cc:	e0 8b 00 06 	brhi	8000a3d8 <_free_r+0x108>
8000a3d0:	f0 0b 16 06 	lsr	r11,r8,0x6
8000a3d4:	2c 8b       	sub	r11,-56
8000a3d6:	c2 08       	rjmp	8000a416 <_free_r+0x146>
8000a3d8:	59 4b       	cp.w	r11,20
8000a3da:	e0 8b 00 04 	brhi	8000a3e2 <_free_r+0x112>
8000a3de:	2a 5b       	sub	r11,-91
8000a3e0:	c1 b8       	rjmp	8000a416 <_free_r+0x146>
8000a3e2:	e0 4b 00 54 	cp.w	r11,84
8000a3e6:	e0 8b 00 06 	brhi	8000a3f2 <_free_r+0x122>
8000a3ea:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000a3ee:	29 2b       	sub	r11,-110
8000a3f0:	c1 38       	rjmp	8000a416 <_free_r+0x146>
8000a3f2:	e0 4b 01 54 	cp.w	r11,340
8000a3f6:	e0 8b 00 06 	brhi	8000a402 <_free_r+0x132>
8000a3fa:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000a3fe:	28 9b       	sub	r11,-119
8000a400:	c0 b8       	rjmp	8000a416 <_free_r+0x146>
8000a402:	e0 4b 05 54 	cp.w	r11,1364
8000a406:	e0 88 00 05 	brls	8000a410 <_free_r+0x140>
8000a40a:	37 eb       	mov	r11,126
8000a40c:	c0 58       	rjmp	8000a416 <_free_r+0x146>
8000a40e:	d7 03       	nop
8000a410:	f0 0b 16 12 	lsr	r11,r8,0x12
8000a414:	28 4b       	sub	r11,-124
8000a416:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000a41a:	78 29       	ld.w	r9,r12[0x8]
8000a41c:	18 39       	cp.w	r9,r12
8000a41e:	c0 e1       	brne	8000a43a <_free_r+0x16a>
8000a420:	74 18       	ld.w	r8,r10[0x4]
8000a422:	a3 4b       	asr	r11,0x2
8000a424:	30 1c       	mov	r12,1
8000a426:	f8 0b 09 4b 	lsl	r11,r12,r11
8000a42a:	f1 eb 10 0b 	or	r11,r8,r11
8000a42e:	12 98       	mov	r8,r9
8000a430:	95 1b       	st.w	r10[0x4],r11
8000a432:	c0 a8       	rjmp	8000a446 <_free_r+0x176>
8000a434:	72 29       	ld.w	r9,r9[0x8]
8000a436:	18 39       	cp.w	r9,r12
8000a438:	c0 60       	breq	8000a444 <_free_r+0x174>
8000a43a:	72 1a       	ld.w	r10,r9[0x4]
8000a43c:	e0 1a ff fc 	andl	r10,0xfffc
8000a440:	14 38       	cp.w	r8,r10
8000a442:	cf 93       	brcs	8000a434 <_free_r+0x164>
8000a444:	72 38       	ld.w	r8,r9[0xc]
8000a446:	8d 38       	st.w	r6[0xc],r8
8000a448:	8d 29       	st.w	r6[0x8],r9
8000a44a:	93 36       	st.w	r9[0xc],r6
8000a44c:	91 26       	st.w	r8[0x8],r6
8000a44e:	0e 9c       	mov	r12,r7
8000a450:	fe b0 fd a2 	rcall	80009f94 <__malloc_unlock>
8000a454:	d8 22       	popm	r4-r7,pc
8000a456:	d7 03       	nop

8000a458 <_fwalk>:
8000a458:	d4 31       	pushm	r0-r7,lr
8000a45a:	30 05       	mov	r5,0
8000a45c:	16 91       	mov	r1,r11
8000a45e:	f8 c7 ff 28 	sub	r7,r12,-216
8000a462:	0a 92       	mov	r2,r5
8000a464:	c5 0e       	rcall	8000a104 <__sfp_lock_acquire>
8000a466:	3f f3       	mov	r3,-1
8000a468:	c1 68       	rjmp	8000a494 <_fwalk+0x3c>
8000a46a:	6e 26       	ld.w	r6,r7[0x8]
8000a46c:	6e 14       	ld.w	r4,r7[0x4]
8000a46e:	2f 46       	sub	r6,-12
8000a470:	c0 c8       	rjmp	8000a488 <_fwalk+0x30>
8000a472:	8c 08       	ld.sh	r8,r6[0x0]
8000a474:	e4 08 19 00 	cp.h	r8,r2
8000a478:	c0 70       	breq	8000a486 <_fwalk+0x2e>
8000a47a:	8c 18       	ld.sh	r8,r6[0x2]
8000a47c:	e6 08 19 00 	cp.h	r8,r3
8000a480:	c0 30       	breq	8000a486 <_fwalk+0x2e>
8000a482:	5d 11       	icall	r1
8000a484:	18 45       	or	r5,r12
8000a486:	2a 46       	sub	r6,-92
8000a488:	20 14       	sub	r4,1
8000a48a:	ec cc 00 0c 	sub	r12,r6,12
8000a48e:	58 04       	cp.w	r4,0
8000a490:	cf 14       	brge	8000a472 <_fwalk+0x1a>
8000a492:	6e 07       	ld.w	r7,r7[0x0]
8000a494:	58 07       	cp.w	r7,0
8000a496:	ce a1       	brne	8000a46a <_fwalk+0x12>
8000a498:	c3 7e       	rcall	8000a106 <__sfp_lock_release>
8000a49a:	0a 9c       	mov	r12,r5
8000a49c:	d8 32       	popm	r0-r7,pc
8000a49e:	d7 03       	nop

8000a4a0 <__sclose>:
8000a4a0:	d4 01       	pushm	lr
8000a4a2:	96 7b       	ld.sh	r11,r11[0xe]
8000a4a4:	e0 a0 11 e2 	rcall	8000c868 <_close_r>
8000a4a8:	d8 02       	popm	pc
8000a4aa:	d7 03       	nop

8000a4ac <__sseek>:
8000a4ac:	d4 21       	pushm	r4-r7,lr
8000a4ae:	16 97       	mov	r7,r11
8000a4b0:	96 7b       	ld.sh	r11,r11[0xe]
8000a4b2:	e0 a0 1a 9f 	rcall	8000d9f0 <_lseek_r>
8000a4b6:	8e 68       	ld.sh	r8,r7[0xc]
8000a4b8:	10 99       	mov	r9,r8
8000a4ba:	ad c8       	cbr	r8,0xc
8000a4bc:	ad a9       	sbr	r9,0xc
8000a4be:	5b fc       	cp.w	r12,-1
8000a4c0:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000a4c4:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000a4c8:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000a4cc:	d8 22       	popm	r4-r7,pc
8000a4ce:	d7 03       	nop

8000a4d0 <__swrite>:
8000a4d0:	d4 21       	pushm	r4-r7,lr
8000a4d2:	96 68       	ld.sh	r8,r11[0xc]
8000a4d4:	16 97       	mov	r7,r11
8000a4d6:	14 95       	mov	r5,r10
8000a4d8:	12 94       	mov	r4,r9
8000a4da:	e2 18 01 00 	andl	r8,0x100,COH
8000a4de:	18 96       	mov	r6,r12
8000a4e0:	c0 60       	breq	8000a4ec <__swrite+0x1c>
8000a4e2:	30 29       	mov	r9,2
8000a4e4:	30 0a       	mov	r10,0
8000a4e6:	96 7b       	ld.sh	r11,r11[0xe]
8000a4e8:	e0 a0 1a 84 	rcall	8000d9f0 <_lseek_r>
8000a4ec:	8e 68       	ld.sh	r8,r7[0xc]
8000a4ee:	ad c8       	cbr	r8,0xc
8000a4f0:	08 99       	mov	r9,r4
8000a4f2:	0a 9a       	mov	r10,r5
8000a4f4:	8e 7b       	ld.sh	r11,r7[0xe]
8000a4f6:	0c 9c       	mov	r12,r6
8000a4f8:	ae 68       	st.h	r7[0xc],r8
8000a4fa:	e0 a0 11 35 	rcall	8000c764 <_write_r>
8000a4fe:	d8 22       	popm	r4-r7,pc

8000a500 <__sread>:
8000a500:	d4 21       	pushm	r4-r7,lr
8000a502:	16 97       	mov	r7,r11
8000a504:	96 7b       	ld.sh	r11,r11[0xe]
8000a506:	e0 a0 1d fb 	rcall	8000e0fc <_read_r>
8000a50a:	c0 65       	brlt	8000a516 <__sread+0x16>
8000a50c:	6f 58       	ld.w	r8,r7[0x54]
8000a50e:	18 08       	add	r8,r12
8000a510:	ef 48 00 54 	st.w	r7[84],r8
8000a514:	d8 22       	popm	r4-r7,pc
8000a516:	8e 68       	ld.sh	r8,r7[0xc]
8000a518:	ad c8       	cbr	r8,0xc
8000a51a:	ae 68       	st.h	r7[0xc],r8
8000a51c:	d8 22       	popm	r4-r7,pc
8000a51e:	d7 03       	nop

8000a520 <get_arg>:
8000a520:	d4 31       	pushm	r0-r7,lr
8000a522:	20 8d       	sub	sp,32
8000a524:	fa c4 ff bc 	sub	r4,sp,-68
8000a528:	50 4b       	stdsp	sp[0x10],r11
8000a52a:	68 2e       	ld.w	lr,r4[0x8]
8000a52c:	50 58       	stdsp	sp[0x14],r8
8000a52e:	12 96       	mov	r6,r9
8000a530:	7c 0b       	ld.w	r11,lr[0x0]
8000a532:	70 05       	ld.w	r5,r8[0x0]
8000a534:	50 6e       	stdsp	sp[0x18],lr
8000a536:	58 0b       	cp.w	r11,0
8000a538:	f4 0b 17 00 	moveq	r11,r10
8000a53c:	68 03       	ld.w	r3,r4[0x0]
8000a53e:	68 11       	ld.w	r1,r4[0x4]
8000a540:	40 49       	lddsp	r9,sp[0x10]
8000a542:	30 08       	mov	r8,0
8000a544:	c2 89       	rjmp	8000a794 <get_arg+0x274>
8000a546:	2f fb       	sub	r11,-1
8000a548:	32 5c       	mov	r12,37
8000a54a:	17 8a       	ld.ub	r10,r11[0x0]
8000a54c:	f8 0a 18 00 	cp.b	r10,r12
8000a550:	5f 1e       	srne	lr
8000a552:	f0 0a 18 00 	cp.b	r10,r8
8000a556:	5f 1c       	srne	r12
8000a558:	fd ec 00 0c 	and	r12,lr,r12
8000a55c:	f0 0c 18 00 	cp.b	r12,r8
8000a560:	cf 31       	brne	8000a546 <get_arg+0x26>
8000a562:	58 0a       	cp.w	r10,0
8000a564:	e0 80 01 25 	breq	8000a7ae <get_arg+0x28e>
8000a568:	30 0c       	mov	r12,0
8000a56a:	3f fa       	mov	r10,-1
8000a56c:	18 90       	mov	r0,r12
8000a56e:	50 3a       	stdsp	sp[0xc],r10
8000a570:	18 94       	mov	r4,r12
8000a572:	18 92       	mov	r2,r12
8000a574:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000a578:	16 97       	mov	r7,r11
8000a57a:	50 7c       	stdsp	sp[0x1c],r12
8000a57c:	fe cc aa 20 	sub	r12,pc,-21984
8000a580:	0f 3a       	ld.ub	r10,r7++
8000a582:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000a586:	40 7c       	lddsp	r12,sp[0x1c]
8000a588:	1c 0c       	add	r12,lr
8000a58a:	fe ce aa f6 	sub	lr,pc,-21770
8000a58e:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000a592:	20 1e       	sub	lr,1
8000a594:	50 0e       	stdsp	sp[0x0],lr
8000a596:	fe ce ab 6e 	sub	lr,pc,-21650
8000a59a:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000a59e:	50 7c       	stdsp	sp[0x1c],r12
8000a5a0:	40 0c       	lddsp	r12,sp[0x0]
8000a5a2:	58 7c       	cp.w	r12,7
8000a5a4:	e0 8b 00 f1 	brhi	8000a786 <get_arg+0x266>
8000a5a8:	fe ce ad 20 	sub	lr,pc,-21216
8000a5ac:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
8000a5b0:	36 8b       	mov	r11,104
8000a5b2:	f6 0a 18 00 	cp.b	r10,r11
8000a5b6:	e0 80 00 e8 	breq	8000a786 <get_arg+0x266>
8000a5ba:	37 1b       	mov	r11,113
8000a5bc:	f6 0a 18 00 	cp.b	r10,r11
8000a5c0:	c0 70       	breq	8000a5ce <get_arg+0xae>
8000a5c2:	34 cb       	mov	r11,76
8000a5c4:	f6 0a 18 00 	cp.b	r10,r11
8000a5c8:	c0 51       	brne	8000a5d2 <get_arg+0xb2>
8000a5ca:	a3 b4       	sbr	r4,0x3
8000a5cc:	cd d8       	rjmp	8000a786 <get_arg+0x266>
8000a5ce:	a5 b4       	sbr	r4,0x5
8000a5d0:	cd b8       	rjmp	8000a786 <get_arg+0x266>
8000a5d2:	08 9a       	mov	r10,r4
8000a5d4:	0e 9b       	mov	r11,r7
8000a5d6:	a5 aa       	sbr	r10,0x4
8000a5d8:	17 3c       	ld.ub	r12,r11++
8000a5da:	a5 b4       	sbr	r4,0x5
8000a5dc:	36 ce       	mov	lr,108
8000a5de:	fc 0c 18 00 	cp.b	r12,lr
8000a5e2:	e0 80 00 d3 	breq	8000a788 <get_arg+0x268>
8000a5e6:	14 94       	mov	r4,r10
8000a5e8:	cc f8       	rjmp	8000a786 <get_arg+0x266>
8000a5ea:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000a5ee:	36 7c       	mov	r12,103
8000a5f0:	f8 0a 18 00 	cp.b	r10,r12
8000a5f4:	e0 8b 00 27 	brhi	8000a642 <get_arg+0x122>
8000a5f8:	36 5b       	mov	r11,101
8000a5fa:	f6 0a 18 00 	cp.b	r10,r11
8000a5fe:	c4 82       	brcc	8000a68e <get_arg+0x16e>
8000a600:	34 fb       	mov	r11,79
8000a602:	f6 0a 18 00 	cp.b	r10,r11
8000a606:	c4 80       	breq	8000a696 <get_arg+0x176>
8000a608:	e0 8b 00 0c 	brhi	8000a620 <get_arg+0x100>
8000a60c:	34 5b       	mov	r11,69
8000a60e:	f6 0a 18 00 	cp.b	r10,r11
8000a612:	c3 e0       	breq	8000a68e <get_arg+0x16e>
8000a614:	34 7b       	mov	r11,71
8000a616:	f6 0a 18 00 	cp.b	r10,r11
8000a61a:	c3 a0       	breq	8000a68e <get_arg+0x16e>
8000a61c:	34 4b       	mov	r11,68
8000a61e:	c0 88       	rjmp	8000a62e <get_arg+0x10e>
8000a620:	35 8b       	mov	r11,88
8000a622:	f6 0a 18 00 	cp.b	r10,r11
8000a626:	c2 c0       	breq	8000a67e <get_arg+0x15e>
8000a628:	e0 8b 00 07 	brhi	8000a636 <get_arg+0x116>
8000a62c:	35 5b       	mov	r11,85
8000a62e:	f6 0a 18 00 	cp.b	r10,r11
8000a632:	c3 51       	brne	8000a69c <get_arg+0x17c>
8000a634:	c3 18       	rjmp	8000a696 <get_arg+0x176>
8000a636:	36 3b       	mov	r11,99
8000a638:	f6 0a 18 00 	cp.b	r10,r11
8000a63c:	c2 f0       	breq	8000a69a <get_arg+0x17a>
8000a63e:	36 4b       	mov	r11,100
8000a640:	c0 e8       	rjmp	8000a65c <get_arg+0x13c>
8000a642:	37 0b       	mov	r11,112
8000a644:	f6 0a 18 00 	cp.b	r10,r11
8000a648:	c2 50       	breq	8000a692 <get_arg+0x172>
8000a64a:	e0 8b 00 0d 	brhi	8000a664 <get_arg+0x144>
8000a64e:	36 eb       	mov	r11,110
8000a650:	f6 0a 18 00 	cp.b	r10,r11
8000a654:	c1 f0       	breq	8000a692 <get_arg+0x172>
8000a656:	e0 8b 00 14 	brhi	8000a67e <get_arg+0x15e>
8000a65a:	36 9b       	mov	r11,105
8000a65c:	f6 0a 18 00 	cp.b	r10,r11
8000a660:	c1 e1       	brne	8000a69c <get_arg+0x17c>
8000a662:	c0 e8       	rjmp	8000a67e <get_arg+0x15e>
8000a664:	37 5b       	mov	r11,117
8000a666:	f6 0a 18 00 	cp.b	r10,r11
8000a66a:	c0 a0       	breq	8000a67e <get_arg+0x15e>
8000a66c:	37 8b       	mov	r11,120
8000a66e:	f6 0a 18 00 	cp.b	r10,r11
8000a672:	c0 60       	breq	8000a67e <get_arg+0x15e>
8000a674:	37 3b       	mov	r11,115
8000a676:	f6 0a 18 00 	cp.b	r10,r11
8000a67a:	c1 11       	brne	8000a69c <get_arg+0x17c>
8000a67c:	c0 b8       	rjmp	8000a692 <get_arg+0x172>
8000a67e:	ed b4 00 04 	bld	r4,0x4
8000a682:	c0 a0       	breq	8000a696 <get_arg+0x176>
8000a684:	ed b4 00 05 	bld	r4,0x5
8000a688:	c0 91       	brne	8000a69a <get_arg+0x17a>
8000a68a:	30 20       	mov	r0,2
8000a68c:	c0 88       	rjmp	8000a69c <get_arg+0x17c>
8000a68e:	30 40       	mov	r0,4
8000a690:	c0 68       	rjmp	8000a69c <get_arg+0x17c>
8000a692:	30 30       	mov	r0,3
8000a694:	c0 48       	rjmp	8000a69c <get_arg+0x17c>
8000a696:	30 10       	mov	r0,1
8000a698:	c0 28       	rjmp	8000a69c <get_arg+0x17c>
8000a69a:	30 00       	mov	r0,0
8000a69c:	40 3b       	lddsp	r11,sp[0xc]
8000a69e:	5b fb       	cp.w	r11,-1
8000a6a0:	c0 40       	breq	8000a6a8 <get_arg+0x188>
8000a6a2:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000a6a6:	c7 08       	rjmp	8000a786 <get_arg+0x266>
8000a6a8:	58 60       	cp.w	r0,6
8000a6aa:	e0 8b 00 6e 	brhi	8000a786 <get_arg+0x266>
8000a6ae:	6c 0a       	ld.w	r10,r6[0x0]
8000a6b0:	ea cc ff ff 	sub	r12,r5,-1
8000a6b4:	fe ce ae 0c 	sub	lr,pc,-20980
8000a6b8:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000a6bc:	f4 cb ff f8 	sub	r11,r10,-8
8000a6c0:	8d 0b       	st.w	r6[0x0],r11
8000a6c2:	f4 ea 00 00 	ld.d	r10,r10[0]
8000a6c6:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000a6ca:	c0 f8       	rjmp	8000a6e8 <get_arg+0x1c8>
8000a6cc:	f4 cb ff fc 	sub	r11,r10,-4
8000a6d0:	8d 0b       	st.w	r6[0x0],r11
8000a6d2:	74 0a       	ld.w	r10,r10[0x0]
8000a6d4:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000a6d8:	c0 88       	rjmp	8000a6e8 <get_arg+0x1c8>
8000a6da:	f4 cb ff f8 	sub	r11,r10,-8
8000a6de:	8d 0b       	st.w	r6[0x0],r11
8000a6e0:	f4 ea 00 00 	ld.d	r10,r10[0]
8000a6e4:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000a6e8:	0e 9b       	mov	r11,r7
8000a6ea:	18 95       	mov	r5,r12
8000a6ec:	c4 e8       	rjmp	8000a788 <get_arg+0x268>
8000a6ee:	62 0a       	ld.w	r10,r1[0x0]
8000a6f0:	5b fa       	cp.w	r10,-1
8000a6f2:	c0 b1       	brne	8000a708 <get_arg+0x1e8>
8000a6f4:	50 19       	stdsp	sp[0x4],r9
8000a6f6:	50 28       	stdsp	sp[0x8],r8
8000a6f8:	e0 6a 00 80 	mov	r10,128
8000a6fc:	30 0b       	mov	r11,0
8000a6fe:	02 9c       	mov	r12,r1
8000a700:	fe b0 fc 42 	rcall	80009f84 <memset>
8000a704:	40 28       	lddsp	r8,sp[0x8]
8000a706:	40 19       	lddsp	r9,sp[0x4]
8000a708:	e4 cc 00 01 	sub	r12,r2,1
8000a70c:	0e 9b       	mov	r11,r7
8000a70e:	50 3c       	stdsp	sp[0xc],r12
8000a710:	f2 0c 0c 49 	max	r9,r9,r12
8000a714:	c3 a8       	rjmp	8000a788 <get_arg+0x268>
8000a716:	62 0a       	ld.w	r10,r1[0x0]
8000a718:	5b fa       	cp.w	r10,-1
8000a71a:	c0 b1       	brne	8000a730 <get_arg+0x210>
8000a71c:	50 19       	stdsp	sp[0x4],r9
8000a71e:	50 28       	stdsp	sp[0x8],r8
8000a720:	e0 6a 00 80 	mov	r10,128
8000a724:	30 0b       	mov	r11,0
8000a726:	02 9c       	mov	r12,r1
8000a728:	fe b0 fc 2e 	rcall	80009f84 <memset>
8000a72c:	40 28       	lddsp	r8,sp[0x8]
8000a72e:	40 19       	lddsp	r9,sp[0x4]
8000a730:	20 12       	sub	r2,1
8000a732:	30 0a       	mov	r10,0
8000a734:	0e 9b       	mov	r11,r7
8000a736:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000a73a:	f2 02 0c 49 	max	r9,r9,r2
8000a73e:	c2 58       	rjmp	8000a788 <get_arg+0x268>
8000a740:	16 97       	mov	r7,r11
8000a742:	6c 0a       	ld.w	r10,r6[0x0]
8000a744:	f4 cb ff fc 	sub	r11,r10,-4
8000a748:	8d 0b       	st.w	r6[0x0],r11
8000a74a:	74 0a       	ld.w	r10,r10[0x0]
8000a74c:	0e 9b       	mov	r11,r7
8000a74e:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000a752:	2f f5       	sub	r5,-1
8000a754:	c1 a8       	rjmp	8000a788 <get_arg+0x268>
8000a756:	f4 c2 00 30 	sub	r2,r10,48
8000a75a:	c0 68       	rjmp	8000a766 <get_arg+0x246>
8000a75c:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000a760:	2f f7       	sub	r7,-1
8000a762:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000a766:	0f 8a       	ld.ub	r10,r7[0x0]
8000a768:	58 0a       	cp.w	r10,0
8000a76a:	c0 e0       	breq	8000a786 <get_arg+0x266>
8000a76c:	23 0a       	sub	r10,48
8000a76e:	58 9a       	cp.w	r10,9
8000a770:	fe 98 ff f6 	brls	8000a75c <get_arg+0x23c>
8000a774:	c0 98       	rjmp	8000a786 <get_arg+0x266>
8000a776:	2f f7       	sub	r7,-1
8000a778:	0f 8a       	ld.ub	r10,r7[0x0]
8000a77a:	58 0a       	cp.w	r10,0
8000a77c:	c0 50       	breq	8000a786 <get_arg+0x266>
8000a77e:	23 0a       	sub	r10,48
8000a780:	58 9a       	cp.w	r10,9
8000a782:	fe 98 ff fa 	brls	8000a776 <get_arg+0x256>
8000a786:	0e 9b       	mov	r11,r7
8000a788:	40 7c       	lddsp	r12,sp[0x1c]
8000a78a:	30 ba       	mov	r10,11
8000a78c:	f4 0c 18 00 	cp.b	r12,r10
8000a790:	fe 91 fe f2 	brne	8000a574 <get_arg+0x54>
8000a794:	40 42       	lddsp	r2,sp[0x10]
8000a796:	17 8c       	ld.ub	r12,r11[0x0]
8000a798:	0a 32       	cp.w	r2,r5
8000a79a:	5f 4a       	srge	r10
8000a79c:	f0 0c 18 00 	cp.b	r12,r8
8000a7a0:	5f 1c       	srne	r12
8000a7a2:	f9 ea 00 0a 	and	r10,r12,r10
8000a7a6:	f0 0a 18 00 	cp.b	r10,r8
8000a7aa:	fe 91 fe cf 	brne	8000a548 <get_arg+0x28>
8000a7ae:	30 08       	mov	r8,0
8000a7b0:	40 4e       	lddsp	lr,sp[0x10]
8000a7b2:	17 8a       	ld.ub	r10,r11[0x0]
8000a7b4:	e2 05 00 21 	add	r1,r1,r5<<0x2
8000a7b8:	f0 0a 18 00 	cp.b	r10,r8
8000a7bc:	fc 09 17 10 	movne	r9,lr
8000a7c0:	e6 05 00 38 	add	r8,r3,r5<<0x3
8000a7c4:	06 9e       	mov	lr,r3
8000a7c6:	c2 a8       	rjmp	8000a81a <get_arg+0x2fa>
8000a7c8:	62 0a       	ld.w	r10,r1[0x0]
8000a7ca:	58 3a       	cp.w	r10,3
8000a7cc:	c1 e0       	breq	8000a808 <get_arg+0x2e8>
8000a7ce:	e0 89 00 07 	brgt	8000a7dc <get_arg+0x2bc>
8000a7d2:	58 1a       	cp.w	r10,1
8000a7d4:	c1 a0       	breq	8000a808 <get_arg+0x2e8>
8000a7d6:	58 2a       	cp.w	r10,2
8000a7d8:	c1 81       	brne	8000a808 <get_arg+0x2e8>
8000a7da:	c0 58       	rjmp	8000a7e4 <get_arg+0x2c4>
8000a7dc:	58 5a       	cp.w	r10,5
8000a7de:	c0 c0       	breq	8000a7f6 <get_arg+0x2d6>
8000a7e0:	c0 b5       	brlt	8000a7f6 <get_arg+0x2d6>
8000a7e2:	c1 38       	rjmp	8000a808 <get_arg+0x2e8>
8000a7e4:	6c 0a       	ld.w	r10,r6[0x0]
8000a7e6:	f4 cc ff f8 	sub	r12,r10,-8
8000a7ea:	8d 0c       	st.w	r6[0x0],r12
8000a7ec:	f4 e2 00 00 	ld.d	r2,r10[0]
8000a7f0:	f0 e3 00 00 	st.d	r8[0],r2
8000a7f4:	c1 08       	rjmp	8000a814 <get_arg+0x2f4>
8000a7f6:	6c 0a       	ld.w	r10,r6[0x0]
8000a7f8:	f4 cc ff f8 	sub	r12,r10,-8
8000a7fc:	8d 0c       	st.w	r6[0x0],r12
8000a7fe:	f4 e2 00 00 	ld.d	r2,r10[0]
8000a802:	f0 e3 00 00 	st.d	r8[0],r2
8000a806:	c0 78       	rjmp	8000a814 <get_arg+0x2f4>
8000a808:	6c 0a       	ld.w	r10,r6[0x0]
8000a80a:	f4 cc ff fc 	sub	r12,r10,-4
8000a80e:	8d 0c       	st.w	r6[0x0],r12
8000a810:	74 0a       	ld.w	r10,r10[0x0]
8000a812:	91 0a       	st.w	r8[0x0],r10
8000a814:	2f f5       	sub	r5,-1
8000a816:	2f 88       	sub	r8,-8
8000a818:	2f c1       	sub	r1,-4
8000a81a:	12 35       	cp.w	r5,r9
8000a81c:	fe 9a ff d6 	brle	8000a7c8 <get_arg+0x2a8>
8000a820:	1c 93       	mov	r3,lr
8000a822:	40 52       	lddsp	r2,sp[0x14]
8000a824:	40 6e       	lddsp	lr,sp[0x18]
8000a826:	85 05       	st.w	r2[0x0],r5
8000a828:	9d 0b       	st.w	lr[0x0],r11
8000a82a:	40 4b       	lddsp	r11,sp[0x10]
8000a82c:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
8000a830:	2f 8d       	sub	sp,-32
8000a832:	d8 32       	popm	r0-r7,pc

8000a834 <__sprint_r>:
8000a834:	d4 21       	pushm	r4-r7,lr
8000a836:	14 97       	mov	r7,r10
8000a838:	74 28       	ld.w	r8,r10[0x8]
8000a83a:	58 08       	cp.w	r8,0
8000a83c:	c0 41       	brne	8000a844 <__sprint_r+0x10>
8000a83e:	95 18       	st.w	r10[0x4],r8
8000a840:	10 9c       	mov	r12,r8
8000a842:	d8 22       	popm	r4-r7,pc
8000a844:	e0 a0 17 8a 	rcall	8000d758 <__sfvwrite_r>
8000a848:	30 08       	mov	r8,0
8000a84a:	8f 18       	st.w	r7[0x4],r8
8000a84c:	8f 28       	st.w	r7[0x8],r8
8000a84e:	d8 22       	popm	r4-r7,pc

8000a850 <_vfprintf_r>:
8000a850:	d4 31       	pushm	r0-r7,lr
8000a852:	fa cd 06 bc 	sub	sp,sp,1724
8000a856:	51 09       	stdsp	sp[0x40],r9
8000a858:	16 91       	mov	r1,r11
8000a85a:	14 97       	mov	r7,r10
8000a85c:	18 95       	mov	r5,r12
8000a85e:	e0 a0 18 c5 	rcall	8000d9e8 <_localeconv_r>
8000a862:	78 0c       	ld.w	r12,r12[0x0]
8000a864:	50 cc       	stdsp	sp[0x30],r12
8000a866:	58 05       	cp.w	r5,0
8000a868:	c0 70       	breq	8000a876 <_vfprintf_r+0x26>
8000a86a:	6a 68       	ld.w	r8,r5[0x18]
8000a86c:	58 08       	cp.w	r8,0
8000a86e:	c0 41       	brne	8000a876 <_vfprintf_r+0x26>
8000a870:	0a 9c       	mov	r12,r5
8000a872:	fe b0 fc 9b 	rcall	8000a1a8 <__sinit>
8000a876:	fe c8 b0 4e 	sub	r8,pc,-20402
8000a87a:	10 31       	cp.w	r1,r8
8000a87c:	c0 31       	brne	8000a882 <_vfprintf_r+0x32>
8000a87e:	6a 01       	ld.w	r1,r5[0x0]
8000a880:	c0 c8       	rjmp	8000a898 <_vfprintf_r+0x48>
8000a882:	fe c8 b0 3a 	sub	r8,pc,-20422
8000a886:	10 31       	cp.w	r1,r8
8000a888:	c0 31       	brne	8000a88e <_vfprintf_r+0x3e>
8000a88a:	6a 11       	ld.w	r1,r5[0x4]
8000a88c:	c0 68       	rjmp	8000a898 <_vfprintf_r+0x48>
8000a88e:	fe c8 b0 26 	sub	r8,pc,-20442
8000a892:	10 31       	cp.w	r1,r8
8000a894:	eb f1 00 02 	ld.weq	r1,r5[0x8]
8000a898:	82 68       	ld.sh	r8,r1[0xc]
8000a89a:	ed b8 00 03 	bld	r8,0x3
8000a89e:	c0 41       	brne	8000a8a6 <_vfprintf_r+0x56>
8000a8a0:	62 48       	ld.w	r8,r1[0x10]
8000a8a2:	58 08       	cp.w	r8,0
8000a8a4:	c0 71       	brne	8000a8b2 <_vfprintf_r+0x62>
8000a8a6:	02 9b       	mov	r11,r1
8000a8a8:	0a 9c       	mov	r12,r5
8000a8aa:	e0 a0 0f 71 	rcall	8000c78c <__swsetup_r>
8000a8ae:	e0 81 0f 54 	brne	8000c756 <_vfprintf_r+0x1f06>
8000a8b2:	82 68       	ld.sh	r8,r1[0xc]
8000a8b4:	10 99       	mov	r9,r8
8000a8b6:	e2 19 00 1a 	andl	r9,0x1a,COH
8000a8ba:	58 a9       	cp.w	r9,10
8000a8bc:	c3 c1       	brne	8000a934 <_vfprintf_r+0xe4>
8000a8be:	82 79       	ld.sh	r9,r1[0xe]
8000a8c0:	30 0a       	mov	r10,0
8000a8c2:	f4 09 19 00 	cp.h	r9,r10
8000a8c6:	c3 75       	brlt	8000a934 <_vfprintf_r+0xe4>
8000a8c8:	a1 d8       	cbr	r8,0x1
8000a8ca:	fb 58 05 d0 	st.h	sp[1488],r8
8000a8ce:	62 88       	ld.w	r8,r1[0x20]
8000a8d0:	fb 48 05 e4 	st.w	sp[1508],r8
8000a8d4:	62 a8       	ld.w	r8,r1[0x28]
8000a8d6:	fb 48 05 ec 	st.w	sp[1516],r8
8000a8da:	fa c8 ff bc 	sub	r8,sp,-68
8000a8de:	fb 48 05 d4 	st.w	sp[1492],r8
8000a8e2:	fb 48 05 c4 	st.w	sp[1476],r8
8000a8e6:	e0 68 04 00 	mov	r8,1024
8000a8ea:	fb 48 05 d8 	st.w	sp[1496],r8
8000a8ee:	fb 48 05 cc 	st.w	sp[1484],r8
8000a8f2:	30 08       	mov	r8,0
8000a8f4:	fb 59 05 d2 	st.h	sp[1490],r9
8000a8f8:	0e 9a       	mov	r10,r7
8000a8fa:	41 09       	lddsp	r9,sp[0x40]
8000a8fc:	fa c7 fa 3c 	sub	r7,sp,-1476
8000a900:	fb 48 05 dc 	st.w	sp[1500],r8
8000a904:	0a 9c       	mov	r12,r5
8000a906:	0e 9b       	mov	r11,r7
8000a908:	ca 4f       	rcall	8000a850 <_vfprintf_r>
8000a90a:	50 bc       	stdsp	sp[0x2c],r12
8000a90c:	c0 95       	brlt	8000a91e <_vfprintf_r+0xce>
8000a90e:	0e 9b       	mov	r11,r7
8000a910:	0a 9c       	mov	r12,r5
8000a912:	e0 a0 16 9b 	rcall	8000d648 <_fflush_r>
8000a916:	40 be       	lddsp	lr,sp[0x2c]
8000a918:	f9 be 01 ff 	movne	lr,-1
8000a91c:	50 be       	stdsp	sp[0x2c],lr
8000a91e:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000a922:	ed b8 00 06 	bld	r8,0x6
8000a926:	e0 81 0f 1a 	brne	8000c75a <_vfprintf_r+0x1f0a>
8000a92a:	82 68       	ld.sh	r8,r1[0xc]
8000a92c:	a7 a8       	sbr	r8,0x6
8000a92e:	a2 68       	st.h	r1[0xc],r8
8000a930:	e0 8f 0f 15 	bral	8000c75a <_vfprintf_r+0x1f0a>
8000a934:	30 08       	mov	r8,0
8000a936:	fb 48 06 b4 	st.w	sp[1716],r8
8000a93a:	fb 48 06 90 	st.w	sp[1680],r8
8000a93e:	fb 48 06 8c 	st.w	sp[1676],r8
8000a942:	fb 48 06 b0 	st.w	sp[1712],r8
8000a946:	30 08       	mov	r8,0
8000a948:	30 09       	mov	r9,0
8000a94a:	50 a7       	stdsp	sp[0x28],r7
8000a94c:	50 78       	stdsp	sp[0x1c],r8
8000a94e:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a952:	3f f8       	mov	r8,-1
8000a954:	50 59       	stdsp	sp[0x14],r9
8000a956:	fb 43 06 88 	st.w	sp[1672],r3
8000a95a:	fb 48 05 44 	st.w	sp[1348],r8
8000a95e:	12 9c       	mov	r12,r9
8000a960:	50 69       	stdsp	sp[0x18],r9
8000a962:	50 d9       	stdsp	sp[0x34],r9
8000a964:	50 e9       	stdsp	sp[0x38],r9
8000a966:	50 b9       	stdsp	sp[0x2c],r9
8000a968:	12 97       	mov	r7,r9
8000a96a:	0a 94       	mov	r4,r5
8000a96c:	40 a2       	lddsp	r2,sp[0x28]
8000a96e:	32 5a       	mov	r10,37
8000a970:	30 08       	mov	r8,0
8000a972:	c0 28       	rjmp	8000a976 <_vfprintf_r+0x126>
8000a974:	2f f2       	sub	r2,-1
8000a976:	05 89       	ld.ub	r9,r2[0x0]
8000a978:	f0 09 18 00 	cp.b	r9,r8
8000a97c:	5f 1b       	srne	r11
8000a97e:	f4 09 18 00 	cp.b	r9,r10
8000a982:	5f 19       	srne	r9
8000a984:	f3 eb 00 0b 	and	r11,r9,r11
8000a988:	f0 0b 18 00 	cp.b	r11,r8
8000a98c:	cf 41       	brne	8000a974 <_vfprintf_r+0x124>
8000a98e:	40 ab       	lddsp	r11,sp[0x28]
8000a990:	e4 0b 01 06 	sub	r6,r2,r11
8000a994:	c1 e0       	breq	8000a9d0 <_vfprintf_r+0x180>
8000a996:	fa f8 06 90 	ld.w	r8,sp[1680]
8000a99a:	0c 08       	add	r8,r6
8000a99c:	87 0b       	st.w	r3[0x0],r11
8000a99e:	fb 48 06 90 	st.w	sp[1680],r8
8000a9a2:	87 16       	st.w	r3[0x4],r6
8000a9a4:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000a9a8:	2f f8       	sub	r8,-1
8000a9aa:	fb 48 06 8c 	st.w	sp[1676],r8
8000a9ae:	58 78       	cp.w	r8,7
8000a9b0:	e0 89 00 04 	brgt	8000a9b8 <_vfprintf_r+0x168>
8000a9b4:	2f 83       	sub	r3,-8
8000a9b6:	c0 a8       	rjmp	8000a9ca <_vfprintf_r+0x17a>
8000a9b8:	fa ca f9 78 	sub	r10,sp,-1672
8000a9bc:	02 9b       	mov	r11,r1
8000a9be:	08 9c       	mov	r12,r4
8000a9c0:	c3 af       	rcall	8000a834 <__sprint_r>
8000a9c2:	e0 81 0e c6 	brne	8000c74e <_vfprintf_r+0x1efe>
8000a9c6:	fa c3 f9 e0 	sub	r3,sp,-1568
8000a9ca:	40 ba       	lddsp	r10,sp[0x2c]
8000a9cc:	0c 0a       	add	r10,r6
8000a9ce:	50 ba       	stdsp	sp[0x2c],r10
8000a9d0:	05 89       	ld.ub	r9,r2[0x0]
8000a9d2:	30 08       	mov	r8,0
8000a9d4:	f0 09 18 00 	cp.b	r9,r8
8000a9d8:	e0 80 0e aa 	breq	8000c72c <_vfprintf_r+0x1edc>
8000a9dc:	30 09       	mov	r9,0
8000a9de:	fb 68 06 bb 	st.b	sp[1723],r8
8000a9e2:	0e 96       	mov	r6,r7
8000a9e4:	e4 c8 ff ff 	sub	r8,r2,-1
8000a9e8:	3f fe       	mov	lr,-1
8000a9ea:	50 93       	stdsp	sp[0x24],r3
8000a9ec:	50 41       	stdsp	sp[0x10],r1
8000a9ee:	0e 93       	mov	r3,r7
8000a9f0:	04 91       	mov	r1,r2
8000a9f2:	50 89       	stdsp	sp[0x20],r9
8000a9f4:	50 a8       	stdsp	sp[0x28],r8
8000a9f6:	50 2e       	stdsp	sp[0x8],lr
8000a9f8:	50 39       	stdsp	sp[0xc],r9
8000a9fa:	12 95       	mov	r5,r9
8000a9fc:	12 90       	mov	r0,r9
8000a9fe:	10 97       	mov	r7,r8
8000aa00:	08 92       	mov	r2,r4
8000aa02:	c0 78       	rjmp	8000aa10 <_vfprintf_r+0x1c0>
8000aa04:	3f fc       	mov	r12,-1
8000aa06:	08 97       	mov	r7,r4
8000aa08:	50 2c       	stdsp	sp[0x8],r12
8000aa0a:	c0 38       	rjmp	8000aa10 <_vfprintf_r+0x1c0>
8000aa0c:	30 0b       	mov	r11,0
8000aa0e:	50 3b       	stdsp	sp[0xc],r11
8000aa10:	0f 38       	ld.ub	r8,r7++
8000aa12:	c0 28       	rjmp	8000aa16 <_vfprintf_r+0x1c6>
8000aa14:	12 90       	mov	r0,r9
8000aa16:	f0 c9 00 20 	sub	r9,r8,32
8000aa1a:	e0 49 00 58 	cp.w	r9,88
8000aa1e:	e0 8b 0a 30 	brhi	8000be7e <_vfprintf_r+0x162e>
8000aa22:	fe ca b1 5e 	sub	r10,pc,-20130
8000aa26:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000aa2a:	50 a7       	stdsp	sp[0x28],r7
8000aa2c:	50 80       	stdsp	sp[0x20],r0
8000aa2e:	0c 97       	mov	r7,r6
8000aa30:	04 94       	mov	r4,r2
8000aa32:	06 96       	mov	r6,r3
8000aa34:	02 92       	mov	r2,r1
8000aa36:	fe c9 af 36 	sub	r9,pc,-20682
8000aa3a:	40 93       	lddsp	r3,sp[0x24]
8000aa3c:	10 90       	mov	r0,r8
8000aa3e:	40 41       	lddsp	r1,sp[0x10]
8000aa40:	50 d9       	stdsp	sp[0x34],r9
8000aa42:	e0 8f 08 8e 	bral	8000bb5e <_vfprintf_r+0x130e>
8000aa46:	30 08       	mov	r8,0
8000aa48:	fb 39 06 bb 	ld.ub	r9,sp[1723]
8000aa4c:	f0 09 18 00 	cp.b	r9,r8
8000aa50:	ce 01       	brne	8000aa10 <_vfprintf_r+0x1c0>
8000aa52:	32 08       	mov	r8,32
8000aa54:	c6 e8       	rjmp	8000ab30 <_vfprintf_r+0x2e0>
8000aa56:	a1 a5       	sbr	r5,0x0
8000aa58:	cd cb       	rjmp	8000aa10 <_vfprintf_r+0x1c0>
8000aa5a:	0f 89       	ld.ub	r9,r7[0x0]
8000aa5c:	f2 c8 00 30 	sub	r8,r9,48
8000aa60:	58 98       	cp.w	r8,9
8000aa62:	e0 8b 00 1d 	brhi	8000aa9c <_vfprintf_r+0x24c>
8000aa66:	ee c8 ff ff 	sub	r8,r7,-1
8000aa6a:	30 0b       	mov	r11,0
8000aa6c:	23 09       	sub	r9,48
8000aa6e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000aa72:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000aa76:	11 39       	ld.ub	r9,r8++
8000aa78:	f2 ca 00 30 	sub	r10,r9,48
8000aa7c:	58 9a       	cp.w	r10,9
8000aa7e:	fe 98 ff f7 	brls	8000aa6c <_vfprintf_r+0x21c>
8000aa82:	e0 49 00 24 	cp.w	r9,36
8000aa86:	cc 31       	brne	8000aa0c <_vfprintf_r+0x1bc>
8000aa88:	e0 4b 00 20 	cp.w	r11,32
8000aa8c:	e0 89 0e 60 	brgt	8000c74c <_vfprintf_r+0x1efc>
8000aa90:	20 1b       	sub	r11,1
8000aa92:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000aa96:	12 3b       	cp.w	r11,r9
8000aa98:	c0 95       	brlt	8000aaaa <_vfprintf_r+0x25a>
8000aa9a:	c1 08       	rjmp	8000aaba <_vfprintf_r+0x26a>
8000aa9c:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000aaa0:	ec ca ff ff 	sub	r10,r6,-1
8000aaa4:	12 36       	cp.w	r6,r9
8000aaa6:	c1 f5       	brlt	8000aae4 <_vfprintf_r+0x294>
8000aaa8:	c2 68       	rjmp	8000aaf4 <_vfprintf_r+0x2a4>
8000aaaa:	fa ce f9 44 	sub	lr,sp,-1724
8000aaae:	10 97       	mov	r7,r8
8000aab0:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
8000aab4:	f6 f0 fd 88 	ld.w	r0,r11[-632]
8000aab8:	c3 58       	rjmp	8000ab22 <_vfprintf_r+0x2d2>
8000aaba:	10 97       	mov	r7,r8
8000aabc:	fa c8 f9 50 	sub	r8,sp,-1712
8000aac0:	1a d8       	st.w	--sp,r8
8000aac2:	fa c8 fa b8 	sub	r8,sp,-1352
8000aac6:	1a d8       	st.w	--sp,r8
8000aac8:	fa c8 fb b4 	sub	r8,sp,-1100
8000aacc:	02 9a       	mov	r10,r1
8000aace:	1a d8       	st.w	--sp,r8
8000aad0:	04 9c       	mov	r12,r2
8000aad2:	fa c8 f9 40 	sub	r8,sp,-1728
8000aad6:	fa c9 ff b4 	sub	r9,sp,-76
8000aada:	fe b0 fd 23 	rcall	8000a520 <get_arg>
8000aade:	2f dd       	sub	sp,-12
8000aae0:	78 00       	ld.w	r0,r12[0x0]
8000aae2:	c2 08       	rjmp	8000ab22 <_vfprintf_r+0x2d2>
8000aae4:	fa cc f9 44 	sub	r12,sp,-1724
8000aae8:	14 96       	mov	r6,r10
8000aaea:	f8 03 00 38 	add	r8,r12,r3<<0x3
8000aaee:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000aaf2:	c1 88       	rjmp	8000ab22 <_vfprintf_r+0x2d2>
8000aaf4:	41 08       	lddsp	r8,sp[0x40]
8000aaf6:	59 f9       	cp.w	r9,31
8000aaf8:	e0 89 00 11 	brgt	8000ab1a <_vfprintf_r+0x2ca>
8000aafc:	f0 cb ff fc 	sub	r11,r8,-4
8000ab00:	51 0b       	stdsp	sp[0x40],r11
8000ab02:	70 00       	ld.w	r0,r8[0x0]
8000ab04:	fa cb f9 44 	sub	r11,sp,-1724
8000ab08:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000ab0c:	f1 40 fd 88 	st.w	r8[-632],r0
8000ab10:	2f f9       	sub	r9,-1
8000ab12:	14 96       	mov	r6,r10
8000ab14:	fb 49 06 b4 	st.w	sp[1716],r9
8000ab18:	c0 58       	rjmp	8000ab22 <_vfprintf_r+0x2d2>
8000ab1a:	70 00       	ld.w	r0,r8[0x0]
8000ab1c:	14 96       	mov	r6,r10
8000ab1e:	2f c8       	sub	r8,-4
8000ab20:	51 08       	stdsp	sp[0x40],r8
8000ab22:	58 00       	cp.w	r0,0
8000ab24:	fe 94 ff 76 	brge	8000aa10 <_vfprintf_r+0x1c0>
8000ab28:	5c 30       	neg	r0
8000ab2a:	a3 a5       	sbr	r5,0x2
8000ab2c:	c7 2b       	rjmp	8000aa10 <_vfprintf_r+0x1c0>
8000ab2e:	32 b8       	mov	r8,43
8000ab30:	fb 68 06 bb 	st.b	sp[1723],r8
8000ab34:	c6 eb       	rjmp	8000aa10 <_vfprintf_r+0x1c0>
8000ab36:	0f 38       	ld.ub	r8,r7++
8000ab38:	e0 48 00 2a 	cp.w	r8,42
8000ab3c:	c0 30       	breq	8000ab42 <_vfprintf_r+0x2f2>
8000ab3e:	30 09       	mov	r9,0
8000ab40:	c7 98       	rjmp	8000ac32 <_vfprintf_r+0x3e2>
8000ab42:	0f 88       	ld.ub	r8,r7[0x0]
8000ab44:	f0 c9 00 30 	sub	r9,r8,48
8000ab48:	58 99       	cp.w	r9,9
8000ab4a:	e0 8b 00 1f 	brhi	8000ab88 <_vfprintf_r+0x338>
8000ab4e:	ee c4 ff ff 	sub	r4,r7,-1
8000ab52:	30 0b       	mov	r11,0
8000ab54:	23 08       	sub	r8,48
8000ab56:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000ab5a:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000ab5e:	09 38       	ld.ub	r8,r4++
8000ab60:	f0 c9 00 30 	sub	r9,r8,48
8000ab64:	58 99       	cp.w	r9,9
8000ab66:	fe 98 ff f7 	brls	8000ab54 <_vfprintf_r+0x304>
8000ab6a:	e0 48 00 24 	cp.w	r8,36
8000ab6e:	fe 91 ff 4f 	brne	8000aa0c <_vfprintf_r+0x1bc>
8000ab72:	e0 4b 00 20 	cp.w	r11,32
8000ab76:	e0 89 0d eb 	brgt	8000c74c <_vfprintf_r+0x1efc>
8000ab7a:	20 1b       	sub	r11,1
8000ab7c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ab80:	10 3b       	cp.w	r11,r8
8000ab82:	c0 a5       	brlt	8000ab96 <_vfprintf_r+0x346>
8000ab84:	c1 18       	rjmp	8000aba6 <_vfprintf_r+0x356>
8000ab86:	d7 03       	nop
8000ab88:	fa fa 06 b4 	ld.w	r10,sp[1716]
8000ab8c:	ec c9 ff ff 	sub	r9,r6,-1
8000ab90:	14 36       	cp.w	r6,r10
8000ab92:	c1 f5       	brlt	8000abd0 <_vfprintf_r+0x380>
8000ab94:	c2 88       	rjmp	8000abe4 <_vfprintf_r+0x394>
8000ab96:	fa ca f9 44 	sub	r10,sp,-1724
8000ab9a:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000ab9e:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000aba2:	50 2b       	stdsp	sp[0x8],r11
8000aba4:	c3 c8       	rjmp	8000ac1c <_vfprintf_r+0x3cc>
8000aba6:	fa c8 f9 50 	sub	r8,sp,-1712
8000abaa:	1a d8       	st.w	--sp,r8
8000abac:	fa c8 fa b8 	sub	r8,sp,-1352
8000abb0:	1a d8       	st.w	--sp,r8
8000abb2:	fa c8 fb b4 	sub	r8,sp,-1100
8000abb6:	02 9a       	mov	r10,r1
8000abb8:	1a d8       	st.w	--sp,r8
8000abba:	04 9c       	mov	r12,r2
8000abbc:	fa c8 f9 40 	sub	r8,sp,-1728
8000abc0:	fa c9 ff b4 	sub	r9,sp,-76
8000abc4:	fe b0 fc ae 	rcall	8000a520 <get_arg>
8000abc8:	2f dd       	sub	sp,-12
8000abca:	78 0c       	ld.w	r12,r12[0x0]
8000abcc:	50 2c       	stdsp	sp[0x8],r12
8000abce:	c2 78       	rjmp	8000ac1c <_vfprintf_r+0x3cc>
8000abd0:	12 96       	mov	r6,r9
8000abd2:	0e 94       	mov	r4,r7
8000abd4:	fa c9 f9 44 	sub	r9,sp,-1724
8000abd8:	f2 03 00 38 	add	r8,r9,r3<<0x3
8000abdc:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000abe0:	50 28       	stdsp	sp[0x8],r8
8000abe2:	c1 d8       	rjmp	8000ac1c <_vfprintf_r+0x3cc>
8000abe4:	41 08       	lddsp	r8,sp[0x40]
8000abe6:	59 fa       	cp.w	r10,31
8000abe8:	e0 89 00 14 	brgt	8000ac10 <_vfprintf_r+0x3c0>
8000abec:	f0 cb ff fc 	sub	r11,r8,-4
8000abf0:	70 08       	ld.w	r8,r8[0x0]
8000abf2:	51 0b       	stdsp	sp[0x40],r11
8000abf4:	50 28       	stdsp	sp[0x8],r8
8000abf6:	fa c6 f9 44 	sub	r6,sp,-1724
8000abfa:	40 2e       	lddsp	lr,sp[0x8]
8000abfc:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000ac00:	f1 4e fd 88 	st.w	r8[-632],lr
8000ac04:	2f fa       	sub	r10,-1
8000ac06:	0e 94       	mov	r4,r7
8000ac08:	fb 4a 06 b4 	st.w	sp[1716],r10
8000ac0c:	12 96       	mov	r6,r9
8000ac0e:	c0 78       	rjmp	8000ac1c <_vfprintf_r+0x3cc>
8000ac10:	70 0c       	ld.w	r12,r8[0x0]
8000ac12:	0e 94       	mov	r4,r7
8000ac14:	2f c8       	sub	r8,-4
8000ac16:	50 2c       	stdsp	sp[0x8],r12
8000ac18:	12 96       	mov	r6,r9
8000ac1a:	51 08       	stdsp	sp[0x40],r8
8000ac1c:	40 2b       	lddsp	r11,sp[0x8]
8000ac1e:	58 0b       	cp.w	r11,0
8000ac20:	fe 95 fe f2 	brlt	8000aa04 <_vfprintf_r+0x1b4>
8000ac24:	08 97       	mov	r7,r4
8000ac26:	cf 5a       	rjmp	8000aa10 <_vfprintf_r+0x1c0>
8000ac28:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000ac2c:	0f 38       	ld.ub	r8,r7++
8000ac2e:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000ac32:	f0 ca 00 30 	sub	r10,r8,48
8000ac36:	58 9a       	cp.w	r10,9
8000ac38:	fe 98 ff f8 	brls	8000ac28 <_vfprintf_r+0x3d8>
8000ac3c:	3f fa       	mov	r10,-1
8000ac3e:	f2 0a 0c 49 	max	r9,r9,r10
8000ac42:	50 29       	stdsp	sp[0x8],r9
8000ac44:	ce 9a       	rjmp	8000aa16 <_vfprintf_r+0x1c6>
8000ac46:	a7 b5       	sbr	r5,0x7
8000ac48:	ce 4a       	rjmp	8000aa10 <_vfprintf_r+0x1c0>
8000ac4a:	30 09       	mov	r9,0
8000ac4c:	23 08       	sub	r8,48
8000ac4e:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000ac52:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000ac56:	0f 38       	ld.ub	r8,r7++
8000ac58:	f0 ca 00 30 	sub	r10,r8,48
8000ac5c:	58 9a       	cp.w	r10,9
8000ac5e:	fe 98 ff f7 	brls	8000ac4c <_vfprintf_r+0x3fc>
8000ac62:	e0 48 00 24 	cp.w	r8,36
8000ac66:	fe 91 fe d7 	brne	8000aa14 <_vfprintf_r+0x1c4>
8000ac6a:	e0 49 00 20 	cp.w	r9,32
8000ac6e:	e0 89 0d 6f 	brgt	8000c74c <_vfprintf_r+0x1efc>
8000ac72:	f2 c3 00 01 	sub	r3,r9,1
8000ac76:	30 19       	mov	r9,1
8000ac78:	50 39       	stdsp	sp[0xc],r9
8000ac7a:	cc ba       	rjmp	8000aa10 <_vfprintf_r+0x1c0>
8000ac7c:	a3 b5       	sbr	r5,0x3
8000ac7e:	cc 9a       	rjmp	8000aa10 <_vfprintf_r+0x1c0>
8000ac80:	a7 a5       	sbr	r5,0x6
8000ac82:	cc 7a       	rjmp	8000aa10 <_vfprintf_r+0x1c0>
8000ac84:	0a 98       	mov	r8,r5
8000ac86:	a5 b5       	sbr	r5,0x5
8000ac88:	a5 a8       	sbr	r8,0x4
8000ac8a:	0f 89       	ld.ub	r9,r7[0x0]
8000ac8c:	36 ce       	mov	lr,108
8000ac8e:	fc 09 18 00 	cp.b	r9,lr
8000ac92:	f7 b7 00 ff 	subeq	r7,-1
8000ac96:	f0 05 17 10 	movne	r5,r8
8000ac9a:	cb ba       	rjmp	8000aa10 <_vfprintf_r+0x1c0>
8000ac9c:	a5 b5       	sbr	r5,0x5
8000ac9e:	cb 9a       	rjmp	8000aa10 <_vfprintf_r+0x1c0>
8000aca0:	50 a7       	stdsp	sp[0x28],r7
8000aca2:	50 80       	stdsp	sp[0x20],r0
8000aca4:	0c 97       	mov	r7,r6
8000aca6:	10 90       	mov	r0,r8
8000aca8:	06 96       	mov	r6,r3
8000acaa:	04 94       	mov	r4,r2
8000acac:	40 93       	lddsp	r3,sp[0x24]
8000acae:	02 92       	mov	r2,r1
8000acb0:	0e 99       	mov	r9,r7
8000acb2:	40 41       	lddsp	r1,sp[0x10]
8000acb4:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000acb8:	40 3c       	lddsp	r12,sp[0xc]
8000acba:	58 0c       	cp.w	r12,0
8000acbc:	c1 d0       	breq	8000acf6 <_vfprintf_r+0x4a6>
8000acbe:	10 36       	cp.w	r6,r8
8000acc0:	c0 64       	brge	8000accc <_vfprintf_r+0x47c>
8000acc2:	fa cb f9 44 	sub	r11,sp,-1724
8000acc6:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000acca:	c1 d8       	rjmp	8000ad04 <_vfprintf_r+0x4b4>
8000accc:	fa c8 f9 50 	sub	r8,sp,-1712
8000acd0:	1a d8       	st.w	--sp,r8
8000acd2:	fa c8 fa b8 	sub	r8,sp,-1352
8000acd6:	1a d8       	st.w	--sp,r8
8000acd8:	fa c8 fb b4 	sub	r8,sp,-1100
8000acdc:	1a d8       	st.w	--sp,r8
8000acde:	fa c8 f9 40 	sub	r8,sp,-1728
8000ace2:	fa c9 ff b4 	sub	r9,sp,-76
8000ace6:	04 9a       	mov	r10,r2
8000ace8:	0c 9b       	mov	r11,r6
8000acea:	08 9c       	mov	r12,r4
8000acec:	fe b0 fc 1a 	rcall	8000a520 <get_arg>
8000acf0:	2f dd       	sub	sp,-12
8000acf2:	19 b8       	ld.ub	r8,r12[0x3]
8000acf4:	c2 28       	rjmp	8000ad38 <_vfprintf_r+0x4e8>
8000acf6:	2f f7       	sub	r7,-1
8000acf8:	10 39       	cp.w	r9,r8
8000acfa:	c0 84       	brge	8000ad0a <_vfprintf_r+0x4ba>
8000acfc:	fa ca f9 44 	sub	r10,sp,-1724
8000ad00:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000ad04:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000ad08:	c1 88       	rjmp	8000ad38 <_vfprintf_r+0x4e8>
8000ad0a:	41 09       	lddsp	r9,sp[0x40]
8000ad0c:	59 f8       	cp.w	r8,31
8000ad0e:	e0 89 00 12 	brgt	8000ad32 <_vfprintf_r+0x4e2>
8000ad12:	f2 ca ff fc 	sub	r10,r9,-4
8000ad16:	51 0a       	stdsp	sp[0x40],r10
8000ad18:	72 09       	ld.w	r9,r9[0x0]
8000ad1a:	fa c6 f9 44 	sub	r6,sp,-1724
8000ad1e:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000ad22:	2f f8       	sub	r8,-1
8000ad24:	f5 49 fd 88 	st.w	r10[-632],r9
8000ad28:	fb 48 06 b4 	st.w	sp[1716],r8
8000ad2c:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
8000ad30:	c0 48       	rjmp	8000ad38 <_vfprintf_r+0x4e8>
8000ad32:	13 b8       	ld.ub	r8,r9[0x3]
8000ad34:	2f c9       	sub	r9,-4
8000ad36:	51 09       	stdsp	sp[0x40],r9
8000ad38:	fb 68 06 60 	st.b	sp[1632],r8
8000ad3c:	30 0e       	mov	lr,0
8000ad3e:	30 08       	mov	r8,0
8000ad40:	30 12       	mov	r2,1
8000ad42:	fb 68 06 bb 	st.b	sp[1723],r8
8000ad46:	50 2e       	stdsp	sp[0x8],lr
8000ad48:	e0 8f 08 ad 	bral	8000bea2 <_vfprintf_r+0x1652>
8000ad4c:	50 a7       	stdsp	sp[0x28],r7
8000ad4e:	50 80       	stdsp	sp[0x20],r0
8000ad50:	0c 97       	mov	r7,r6
8000ad52:	04 94       	mov	r4,r2
8000ad54:	06 96       	mov	r6,r3
8000ad56:	02 92       	mov	r2,r1
8000ad58:	40 93       	lddsp	r3,sp[0x24]
8000ad5a:	10 90       	mov	r0,r8
8000ad5c:	40 41       	lddsp	r1,sp[0x10]
8000ad5e:	a5 a5       	sbr	r5,0x4
8000ad60:	c0 a8       	rjmp	8000ad74 <_vfprintf_r+0x524>
8000ad62:	50 a7       	stdsp	sp[0x28],r7
8000ad64:	50 80       	stdsp	sp[0x20],r0
8000ad66:	0c 97       	mov	r7,r6
8000ad68:	04 94       	mov	r4,r2
8000ad6a:	06 96       	mov	r6,r3
8000ad6c:	02 92       	mov	r2,r1
8000ad6e:	40 93       	lddsp	r3,sp[0x24]
8000ad70:	10 90       	mov	r0,r8
8000ad72:	40 41       	lddsp	r1,sp[0x10]
8000ad74:	ed b5 00 05 	bld	r5,0x5
8000ad78:	c5 11       	brne	8000ae1a <_vfprintf_r+0x5ca>
8000ad7a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ad7e:	40 3c       	lddsp	r12,sp[0xc]
8000ad80:	58 0c       	cp.w	r12,0
8000ad82:	c1 e0       	breq	8000adbe <_vfprintf_r+0x56e>
8000ad84:	10 36       	cp.w	r6,r8
8000ad86:	c0 64       	brge	8000ad92 <_vfprintf_r+0x542>
8000ad88:	fa cb f9 44 	sub	r11,sp,-1724
8000ad8c:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ad90:	c2 08       	rjmp	8000add0 <_vfprintf_r+0x580>
8000ad92:	fa c8 f9 50 	sub	r8,sp,-1712
8000ad96:	1a d8       	st.w	--sp,r8
8000ad98:	fa c8 fa b8 	sub	r8,sp,-1352
8000ad9c:	0c 9b       	mov	r11,r6
8000ad9e:	1a d8       	st.w	--sp,r8
8000ada0:	fa c8 fb b4 	sub	r8,sp,-1100
8000ada4:	1a d8       	st.w	--sp,r8
8000ada6:	fa c9 ff b4 	sub	r9,sp,-76
8000adaa:	fa c8 f9 40 	sub	r8,sp,-1728
8000adae:	04 9a       	mov	r10,r2
8000adb0:	08 9c       	mov	r12,r4
8000adb2:	fe b0 fb b7 	rcall	8000a520 <get_arg>
8000adb6:	2f dd       	sub	sp,-12
8000adb8:	78 1b       	ld.w	r11,r12[0x4]
8000adba:	78 09       	ld.w	r9,r12[0x0]
8000adbc:	c2 b8       	rjmp	8000ae12 <_vfprintf_r+0x5c2>
8000adbe:	ee ca ff ff 	sub	r10,r7,-1
8000adc2:	10 37       	cp.w	r7,r8
8000adc4:	c0 b4       	brge	8000adda <_vfprintf_r+0x58a>
8000adc6:	fa c9 f9 44 	sub	r9,sp,-1724
8000adca:	14 97       	mov	r7,r10
8000adcc:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000add0:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000add4:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000add8:	c1 d8       	rjmp	8000ae12 <_vfprintf_r+0x5c2>
8000adda:	41 09       	lddsp	r9,sp[0x40]
8000addc:	59 f8       	cp.w	r8,31
8000adde:	e0 89 00 14 	brgt	8000ae06 <_vfprintf_r+0x5b6>
8000ade2:	f2 cb ff f8 	sub	r11,r9,-8
8000ade6:	51 0b       	stdsp	sp[0x40],r11
8000ade8:	fa c6 f9 44 	sub	r6,sp,-1724
8000adec:	72 1b       	ld.w	r11,r9[0x4]
8000adee:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000adf2:	72 09       	ld.w	r9,r9[0x0]
8000adf4:	f9 4b fd 8c 	st.w	r12[-628],r11
8000adf8:	f9 49 fd 88 	st.w	r12[-632],r9
8000adfc:	2f f8       	sub	r8,-1
8000adfe:	14 97       	mov	r7,r10
8000ae00:	fb 48 06 b4 	st.w	sp[1716],r8
8000ae04:	c0 78       	rjmp	8000ae12 <_vfprintf_r+0x5c2>
8000ae06:	f2 c8 ff f8 	sub	r8,r9,-8
8000ae0a:	72 1b       	ld.w	r11,r9[0x4]
8000ae0c:	14 97       	mov	r7,r10
8000ae0e:	51 08       	stdsp	sp[0x40],r8
8000ae10:	72 09       	ld.w	r9,r9[0x0]
8000ae12:	16 98       	mov	r8,r11
8000ae14:	fa e9 00 00 	st.d	sp[0],r8
8000ae18:	ca e8       	rjmp	8000af74 <_vfprintf_r+0x724>
8000ae1a:	ed b5 00 04 	bld	r5,0x4
8000ae1e:	c1 71       	brne	8000ae4c <_vfprintf_r+0x5fc>
8000ae20:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ae24:	40 3e       	lddsp	lr,sp[0xc]
8000ae26:	58 0e       	cp.w	lr,0
8000ae28:	c0 80       	breq	8000ae38 <_vfprintf_r+0x5e8>
8000ae2a:	10 36       	cp.w	r6,r8
8000ae2c:	c6 94       	brge	8000aefe <_vfprintf_r+0x6ae>
8000ae2e:	fa cc f9 44 	sub	r12,sp,-1724
8000ae32:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000ae36:	c8 28       	rjmp	8000af3a <_vfprintf_r+0x6ea>
8000ae38:	ee ca ff ff 	sub	r10,r7,-1
8000ae3c:	10 37       	cp.w	r7,r8
8000ae3e:	e0 84 00 81 	brge	8000af40 <_vfprintf_r+0x6f0>
8000ae42:	fa cb f9 44 	sub	r11,sp,-1724
8000ae46:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ae4a:	c7 78       	rjmp	8000af38 <_vfprintf_r+0x6e8>
8000ae4c:	ed b5 00 06 	bld	r5,0x6
8000ae50:	c4 b1       	brne	8000aee6 <_vfprintf_r+0x696>
8000ae52:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ae56:	40 3c       	lddsp	r12,sp[0xc]
8000ae58:	58 0c       	cp.w	r12,0
8000ae5a:	c1 d0       	breq	8000ae94 <_vfprintf_r+0x644>
8000ae5c:	10 36       	cp.w	r6,r8
8000ae5e:	c0 64       	brge	8000ae6a <_vfprintf_r+0x61a>
8000ae60:	fa cb f9 44 	sub	r11,sp,-1724
8000ae64:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ae68:	c1 f8       	rjmp	8000aea6 <_vfprintf_r+0x656>
8000ae6a:	fa c8 f9 50 	sub	r8,sp,-1712
8000ae6e:	1a d8       	st.w	--sp,r8
8000ae70:	fa c8 fa b8 	sub	r8,sp,-1352
8000ae74:	1a d8       	st.w	--sp,r8
8000ae76:	fa c8 fb b4 	sub	r8,sp,-1100
8000ae7a:	1a d8       	st.w	--sp,r8
8000ae7c:	fa c8 f9 40 	sub	r8,sp,-1728
8000ae80:	fa c9 ff b4 	sub	r9,sp,-76
8000ae84:	04 9a       	mov	r10,r2
8000ae86:	0c 9b       	mov	r11,r6
8000ae88:	08 9c       	mov	r12,r4
8000ae8a:	fe b0 fb 4b 	rcall	8000a520 <get_arg>
8000ae8e:	2f dd       	sub	sp,-12
8000ae90:	98 18       	ld.sh	r8,r12[0x2]
8000ae92:	c2 68       	rjmp	8000aede <_vfprintf_r+0x68e>
8000ae94:	ee ca ff ff 	sub	r10,r7,-1
8000ae98:	10 37       	cp.w	r7,r8
8000ae9a:	c0 94       	brge	8000aeac <_vfprintf_r+0x65c>
8000ae9c:	fa c9 f9 44 	sub	r9,sp,-1724
8000aea0:	14 97       	mov	r7,r10
8000aea2:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000aea6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000aeaa:	c1 a8       	rjmp	8000aede <_vfprintf_r+0x68e>
8000aeac:	41 09       	lddsp	r9,sp[0x40]
8000aeae:	59 f8       	cp.w	r8,31
8000aeb0:	e0 89 00 13 	brgt	8000aed6 <_vfprintf_r+0x686>
8000aeb4:	f2 cb ff fc 	sub	r11,r9,-4
8000aeb8:	51 0b       	stdsp	sp[0x40],r11
8000aeba:	72 09       	ld.w	r9,r9[0x0]
8000aebc:	fa c6 f9 44 	sub	r6,sp,-1724
8000aec0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000aec4:	2f f8       	sub	r8,-1
8000aec6:	f7 49 fd 88 	st.w	r11[-632],r9
8000aeca:	fb 48 06 b4 	st.w	sp[1716],r8
8000aece:	14 97       	mov	r7,r10
8000aed0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000aed4:	c0 58       	rjmp	8000aede <_vfprintf_r+0x68e>
8000aed6:	92 18       	ld.sh	r8,r9[0x2]
8000aed8:	14 97       	mov	r7,r10
8000aeda:	2f c9       	sub	r9,-4
8000aedc:	51 09       	stdsp	sp[0x40],r9
8000aede:	50 18       	stdsp	sp[0x4],r8
8000aee0:	bf 58       	asr	r8,0x1f
8000aee2:	50 08       	stdsp	sp[0x0],r8
8000aee4:	c4 88       	rjmp	8000af74 <_vfprintf_r+0x724>
8000aee6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000aeea:	40 3c       	lddsp	r12,sp[0xc]
8000aeec:	58 0c       	cp.w	r12,0
8000aeee:	c1 d0       	breq	8000af28 <_vfprintf_r+0x6d8>
8000aef0:	10 36       	cp.w	r6,r8
8000aef2:	c0 64       	brge	8000aefe <_vfprintf_r+0x6ae>
8000aef4:	fa cb f9 44 	sub	r11,sp,-1724
8000aef8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000aefc:	c1 f8       	rjmp	8000af3a <_vfprintf_r+0x6ea>
8000aefe:	fa c8 f9 50 	sub	r8,sp,-1712
8000af02:	1a d8       	st.w	--sp,r8
8000af04:	fa c8 fa b8 	sub	r8,sp,-1352
8000af08:	0c 9b       	mov	r11,r6
8000af0a:	1a d8       	st.w	--sp,r8
8000af0c:	fa c8 fb b4 	sub	r8,sp,-1100
8000af10:	04 9a       	mov	r10,r2
8000af12:	1a d8       	st.w	--sp,r8
8000af14:	08 9c       	mov	r12,r4
8000af16:	fa c8 f9 40 	sub	r8,sp,-1728
8000af1a:	fa c9 ff b4 	sub	r9,sp,-76
8000af1e:	fe b0 fb 01 	rcall	8000a520 <get_arg>
8000af22:	2f dd       	sub	sp,-12
8000af24:	78 0b       	ld.w	r11,r12[0x0]
8000af26:	c2 48       	rjmp	8000af6e <_vfprintf_r+0x71e>
8000af28:	ee ca ff ff 	sub	r10,r7,-1
8000af2c:	10 37       	cp.w	r7,r8
8000af2e:	c0 94       	brge	8000af40 <_vfprintf_r+0x6f0>
8000af30:	fa c9 f9 44 	sub	r9,sp,-1724
8000af34:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000af38:	14 97       	mov	r7,r10
8000af3a:	ec fb fd 88 	ld.w	r11,r6[-632]
8000af3e:	c1 88       	rjmp	8000af6e <_vfprintf_r+0x71e>
8000af40:	41 09       	lddsp	r9,sp[0x40]
8000af42:	59 f8       	cp.w	r8,31
8000af44:	e0 89 00 11 	brgt	8000af66 <_vfprintf_r+0x716>
8000af48:	f2 cb ff fc 	sub	r11,r9,-4
8000af4c:	51 0b       	stdsp	sp[0x40],r11
8000af4e:	fa c6 f9 44 	sub	r6,sp,-1724
8000af52:	72 0b       	ld.w	r11,r9[0x0]
8000af54:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000af58:	f3 4b fd 88 	st.w	r9[-632],r11
8000af5c:	2f f8       	sub	r8,-1
8000af5e:	14 97       	mov	r7,r10
8000af60:	fb 48 06 b4 	st.w	sp[1716],r8
8000af64:	c0 58       	rjmp	8000af6e <_vfprintf_r+0x71e>
8000af66:	72 0b       	ld.w	r11,r9[0x0]
8000af68:	14 97       	mov	r7,r10
8000af6a:	2f c9       	sub	r9,-4
8000af6c:	51 09       	stdsp	sp[0x40],r9
8000af6e:	50 1b       	stdsp	sp[0x4],r11
8000af70:	bf 5b       	asr	r11,0x1f
8000af72:	50 0b       	stdsp	sp[0x0],r11
8000af74:	fa ea 00 00 	ld.d	r10,sp[0]
8000af78:	58 0a       	cp.w	r10,0
8000af7a:	5c 2b       	cpc	r11
8000af7c:	c0 e4       	brge	8000af98 <_vfprintf_r+0x748>
8000af7e:	30 08       	mov	r8,0
8000af80:	fa ea 00 00 	ld.d	r10,sp[0]
8000af84:	30 09       	mov	r9,0
8000af86:	f0 0a 01 0a 	sub	r10,r8,r10
8000af8a:	f2 0b 01 4b 	sbc	r11,r9,r11
8000af8e:	32 d8       	mov	r8,45
8000af90:	fa eb 00 00 	st.d	sp[0],r10
8000af94:	fb 68 06 bb 	st.b	sp[1723],r8
8000af98:	30 18       	mov	r8,1
8000af9a:	e0 8f 06 fa 	bral	8000bd8e <_vfprintf_r+0x153e>
8000af9e:	50 a7       	stdsp	sp[0x28],r7
8000afa0:	50 80       	stdsp	sp[0x20],r0
8000afa2:	0c 97       	mov	r7,r6
8000afa4:	04 94       	mov	r4,r2
8000afa6:	06 96       	mov	r6,r3
8000afa8:	02 92       	mov	r2,r1
8000afaa:	40 93       	lddsp	r3,sp[0x24]
8000afac:	10 90       	mov	r0,r8
8000afae:	40 41       	lddsp	r1,sp[0x10]
8000afb0:	0e 99       	mov	r9,r7
8000afb2:	ed b5 00 03 	bld	r5,0x3
8000afb6:	c4 11       	brne	8000b038 <_vfprintf_r+0x7e8>
8000afb8:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000afbc:	40 3a       	lddsp	r10,sp[0xc]
8000afbe:	58 0a       	cp.w	r10,0
8000afc0:	c1 90       	breq	8000aff2 <_vfprintf_r+0x7a2>
8000afc2:	10 36       	cp.w	r6,r8
8000afc4:	c6 45       	brlt	8000b08c <_vfprintf_r+0x83c>
8000afc6:	fa c8 f9 50 	sub	r8,sp,-1712
8000afca:	1a d8       	st.w	--sp,r8
8000afcc:	fa c8 fa b8 	sub	r8,sp,-1352
8000afd0:	1a d8       	st.w	--sp,r8
8000afd2:	fa c8 fb b4 	sub	r8,sp,-1100
8000afd6:	0c 9b       	mov	r11,r6
8000afd8:	1a d8       	st.w	--sp,r8
8000afda:	04 9a       	mov	r10,r2
8000afdc:	fa c8 f9 40 	sub	r8,sp,-1728
8000afe0:	fa c9 ff b4 	sub	r9,sp,-76
8000afe4:	08 9c       	mov	r12,r4
8000afe6:	fe b0 fa 9d 	rcall	8000a520 <get_arg>
8000afea:	2f dd       	sub	sp,-12
8000afec:	78 16       	ld.w	r6,r12[0x4]
8000afee:	50 76       	stdsp	sp[0x1c],r6
8000aff0:	c4 88       	rjmp	8000b080 <_vfprintf_r+0x830>
8000aff2:	2f f7       	sub	r7,-1
8000aff4:	10 39       	cp.w	r9,r8
8000aff6:	c0 c4       	brge	8000b00e <_vfprintf_r+0x7be>
8000aff8:	fa ce f9 44 	sub	lr,sp,-1724
8000affc:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000b000:	ec fc fd 8c 	ld.w	r12,r6[-628]
8000b004:	50 7c       	stdsp	sp[0x1c],r12
8000b006:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000b00a:	50 56       	stdsp	sp[0x14],r6
8000b00c:	c6 68       	rjmp	8000b0d8 <_vfprintf_r+0x888>
8000b00e:	41 09       	lddsp	r9,sp[0x40]
8000b010:	59 f8       	cp.w	r8,31
8000b012:	e0 89 00 10 	brgt	8000b032 <_vfprintf_r+0x7e2>
8000b016:	f2 ca ff f8 	sub	r10,r9,-8
8000b01a:	72 1b       	ld.w	r11,r9[0x4]
8000b01c:	51 0a       	stdsp	sp[0x40],r10
8000b01e:	72 09       	ld.w	r9,r9[0x0]
8000b020:	fa ca f9 44 	sub	r10,sp,-1724
8000b024:	50 7b       	stdsp	sp[0x1c],r11
8000b026:	50 59       	stdsp	sp[0x14],r9
8000b028:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000b02c:	40 5b       	lddsp	r11,sp[0x14]
8000b02e:	40 7a       	lddsp	r10,sp[0x1c]
8000b030:	c4 78       	rjmp	8000b0be <_vfprintf_r+0x86e>
8000b032:	72 18       	ld.w	r8,r9[0x4]
8000b034:	50 78       	stdsp	sp[0x1c],r8
8000b036:	c4 c8       	rjmp	8000b0ce <_vfprintf_r+0x87e>
8000b038:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b03c:	40 3e       	lddsp	lr,sp[0xc]
8000b03e:	58 0e       	cp.w	lr,0
8000b040:	c2 30       	breq	8000b086 <_vfprintf_r+0x836>
8000b042:	10 36       	cp.w	r6,r8
8000b044:	c0 94       	brge	8000b056 <_vfprintf_r+0x806>
8000b046:	fa cc f9 44 	sub	r12,sp,-1724
8000b04a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000b04e:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000b052:	50 7b       	stdsp	sp[0x1c],r11
8000b054:	cd 9b       	rjmp	8000b006 <_vfprintf_r+0x7b6>
8000b056:	fa c8 f9 50 	sub	r8,sp,-1712
8000b05a:	1a d8       	st.w	--sp,r8
8000b05c:	fa c8 fa b8 	sub	r8,sp,-1352
8000b060:	04 9a       	mov	r10,r2
8000b062:	1a d8       	st.w	--sp,r8
8000b064:	fa c8 fb b4 	sub	r8,sp,-1100
8000b068:	0c 9b       	mov	r11,r6
8000b06a:	1a d8       	st.w	--sp,r8
8000b06c:	08 9c       	mov	r12,r4
8000b06e:	fa c8 f9 40 	sub	r8,sp,-1728
8000b072:	fa c9 ff b4 	sub	r9,sp,-76
8000b076:	fe b0 fa 55 	rcall	8000a520 <get_arg>
8000b07a:	2f dd       	sub	sp,-12
8000b07c:	78 1a       	ld.w	r10,r12[0x4]
8000b07e:	50 7a       	stdsp	sp[0x1c],r10
8000b080:	78 0c       	ld.w	r12,r12[0x0]
8000b082:	50 5c       	stdsp	sp[0x14],r12
8000b084:	c2 a8       	rjmp	8000b0d8 <_vfprintf_r+0x888>
8000b086:	2f f7       	sub	r7,-1
8000b088:	10 39       	cp.w	r9,r8
8000b08a:	c0 94       	brge	8000b09c <_vfprintf_r+0x84c>
8000b08c:	fa c9 f9 44 	sub	r9,sp,-1724
8000b090:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b094:	ec f8 fd 8c 	ld.w	r8,r6[-628]
8000b098:	50 78       	stdsp	sp[0x1c],r8
8000b09a:	cb 6b       	rjmp	8000b006 <_vfprintf_r+0x7b6>
8000b09c:	41 09       	lddsp	r9,sp[0x40]
8000b09e:	59 f8       	cp.w	r8,31
8000b0a0:	e0 89 00 15 	brgt	8000b0ca <_vfprintf_r+0x87a>
8000b0a4:	f2 ca ff f8 	sub	r10,r9,-8
8000b0a8:	72 16       	ld.w	r6,r9[0x4]
8000b0aa:	72 09       	ld.w	r9,r9[0x0]
8000b0ac:	51 0a       	stdsp	sp[0x40],r10
8000b0ae:	50 59       	stdsp	sp[0x14],r9
8000b0b0:	fa ce f9 44 	sub	lr,sp,-1724
8000b0b4:	50 76       	stdsp	sp[0x1c],r6
8000b0b6:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000b0ba:	40 5b       	lddsp	r11,sp[0x14]
8000b0bc:	0c 9a       	mov	r10,r6
8000b0be:	f2 eb fd 88 	st.d	r9[-632],r10
8000b0c2:	2f f8       	sub	r8,-1
8000b0c4:	fb 48 06 b4 	st.w	sp[1716],r8
8000b0c8:	c0 88       	rjmp	8000b0d8 <_vfprintf_r+0x888>
8000b0ca:	72 1c       	ld.w	r12,r9[0x4]
8000b0cc:	50 7c       	stdsp	sp[0x1c],r12
8000b0ce:	f2 c8 ff f8 	sub	r8,r9,-8
8000b0d2:	51 08       	stdsp	sp[0x40],r8
8000b0d4:	72 09       	ld.w	r9,r9[0x0]
8000b0d6:	50 59       	stdsp	sp[0x14],r9
8000b0d8:	40 5b       	lddsp	r11,sp[0x14]
8000b0da:	40 7a       	lddsp	r10,sp[0x1c]
8000b0dc:	e0 a0 19 84 	rcall	8000e3e4 <__isinfd>
8000b0e0:	18 96       	mov	r6,r12
8000b0e2:	c1 70       	breq	8000b110 <_vfprintf_r+0x8c0>
8000b0e4:	30 08       	mov	r8,0
8000b0e6:	30 09       	mov	r9,0
8000b0e8:	40 5b       	lddsp	r11,sp[0x14]
8000b0ea:	40 7a       	lddsp	r10,sp[0x1c]
8000b0ec:	e0 a0 1c ce 	rcall	8000ea88 <__avr32_f64_cmp_lt>
8000b0f0:	c0 40       	breq	8000b0f8 <_vfprintf_r+0x8a8>
8000b0f2:	32 d8       	mov	r8,45
8000b0f4:	fb 68 06 bb 	st.b	sp[1723],r8
8000b0f8:	fe c8 b5 e4 	sub	r8,pc,-18972
8000b0fc:	fe c6 b5 e4 	sub	r6,pc,-18972
8000b100:	a7 d5       	cbr	r5,0x7
8000b102:	e0 40 00 47 	cp.w	r0,71
8000b106:	f0 06 17 a0 	movle	r6,r8
8000b10a:	30 32       	mov	r2,3
8000b10c:	e0 8f 06 ce 	bral	8000bea8 <_vfprintf_r+0x1658>
8000b110:	40 5b       	lddsp	r11,sp[0x14]
8000b112:	40 7a       	lddsp	r10,sp[0x1c]
8000b114:	e0 a0 19 7d 	rcall	8000e40e <__isnand>
8000b118:	c0 e0       	breq	8000b134 <_vfprintf_r+0x8e4>
8000b11a:	50 26       	stdsp	sp[0x8],r6
8000b11c:	fe c8 b6 00 	sub	r8,pc,-18944
8000b120:	fe c6 b6 00 	sub	r6,pc,-18944
8000b124:	a7 d5       	cbr	r5,0x7
8000b126:	e0 40 00 47 	cp.w	r0,71
8000b12a:	f0 06 17 a0 	movle	r6,r8
8000b12e:	30 32       	mov	r2,3
8000b130:	e0 8f 06 c2 	bral	8000beb4 <_vfprintf_r+0x1664>
8000b134:	40 2a       	lddsp	r10,sp[0x8]
8000b136:	5b fa       	cp.w	r10,-1
8000b138:	c0 41       	brne	8000b140 <_vfprintf_r+0x8f0>
8000b13a:	30 69       	mov	r9,6
8000b13c:	50 29       	stdsp	sp[0x8],r9
8000b13e:	c1 18       	rjmp	8000b160 <_vfprintf_r+0x910>
8000b140:	e0 40 00 47 	cp.w	r0,71
8000b144:	5f 09       	sreq	r9
8000b146:	e0 40 00 67 	cp.w	r0,103
8000b14a:	5f 08       	sreq	r8
8000b14c:	f3 e8 10 08 	or	r8,r9,r8
8000b150:	f8 08 18 00 	cp.b	r8,r12
8000b154:	c0 60       	breq	8000b160 <_vfprintf_r+0x910>
8000b156:	40 28       	lddsp	r8,sp[0x8]
8000b158:	58 08       	cp.w	r8,0
8000b15a:	f9 b8 00 01 	moveq	r8,1
8000b15e:	50 28       	stdsp	sp[0x8],r8
8000b160:	40 78       	lddsp	r8,sp[0x1c]
8000b162:	40 59       	lddsp	r9,sp[0x14]
8000b164:	fa e9 06 94 	st.d	sp[1684],r8
8000b168:	a9 a5       	sbr	r5,0x8
8000b16a:	fa f8 06 94 	ld.w	r8,sp[1684]
8000b16e:	58 08       	cp.w	r8,0
8000b170:	c0 65       	brlt	8000b17c <_vfprintf_r+0x92c>
8000b172:	40 5e       	lddsp	lr,sp[0x14]
8000b174:	30 0c       	mov	r12,0
8000b176:	50 6e       	stdsp	sp[0x18],lr
8000b178:	50 9c       	stdsp	sp[0x24],r12
8000b17a:	c0 78       	rjmp	8000b188 <_vfprintf_r+0x938>
8000b17c:	40 5b       	lddsp	r11,sp[0x14]
8000b17e:	32 da       	mov	r10,45
8000b180:	ee 1b 80 00 	eorh	r11,0x8000
8000b184:	50 9a       	stdsp	sp[0x24],r10
8000b186:	50 6b       	stdsp	sp[0x18],r11
8000b188:	e0 40 00 46 	cp.w	r0,70
8000b18c:	5f 09       	sreq	r9
8000b18e:	e0 40 00 66 	cp.w	r0,102
8000b192:	5f 08       	sreq	r8
8000b194:	f3 e8 10 08 	or	r8,r9,r8
8000b198:	50 48       	stdsp	sp[0x10],r8
8000b19a:	c0 40       	breq	8000b1a2 <_vfprintf_r+0x952>
8000b19c:	40 22       	lddsp	r2,sp[0x8]
8000b19e:	30 39       	mov	r9,3
8000b1a0:	c1 08       	rjmp	8000b1c0 <_vfprintf_r+0x970>
8000b1a2:	e0 40 00 45 	cp.w	r0,69
8000b1a6:	5f 09       	sreq	r9
8000b1a8:	e0 40 00 65 	cp.w	r0,101
8000b1ac:	5f 08       	sreq	r8
8000b1ae:	40 22       	lddsp	r2,sp[0x8]
8000b1b0:	10 49       	or	r9,r8
8000b1b2:	2f f2       	sub	r2,-1
8000b1b4:	40 46       	lddsp	r6,sp[0x10]
8000b1b6:	ec 09 18 00 	cp.b	r9,r6
8000b1ba:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000b1be:	30 29       	mov	r9,2
8000b1c0:	fa c8 f9 5c 	sub	r8,sp,-1700
8000b1c4:	1a d8       	st.w	--sp,r8
8000b1c6:	fa c8 f9 54 	sub	r8,sp,-1708
8000b1ca:	1a d8       	st.w	--sp,r8
8000b1cc:	fa c8 f9 4c 	sub	r8,sp,-1716
8000b1d0:	08 9c       	mov	r12,r4
8000b1d2:	1a d8       	st.w	--sp,r8
8000b1d4:	04 98       	mov	r8,r2
8000b1d6:	40 9b       	lddsp	r11,sp[0x24]
8000b1d8:	40 aa       	lddsp	r10,sp[0x28]
8000b1da:	e0 a0 0b e7 	rcall	8000c9a8 <_dtoa_r>
8000b1de:	e0 40 00 47 	cp.w	r0,71
8000b1e2:	5f 19       	srne	r9
8000b1e4:	e0 40 00 67 	cp.w	r0,103
8000b1e8:	5f 18       	srne	r8
8000b1ea:	18 96       	mov	r6,r12
8000b1ec:	2f dd       	sub	sp,-12
8000b1ee:	f3 e8 00 08 	and	r8,r9,r8
8000b1f2:	c0 41       	brne	8000b1fa <_vfprintf_r+0x9aa>
8000b1f4:	ed b5 00 00 	bld	r5,0x0
8000b1f8:	c3 01       	brne	8000b258 <_vfprintf_r+0xa08>
8000b1fa:	ec 02 00 0e 	add	lr,r6,r2
8000b1fe:	50 3e       	stdsp	sp[0xc],lr
8000b200:	40 4c       	lddsp	r12,sp[0x10]
8000b202:	58 0c       	cp.w	r12,0
8000b204:	c1 50       	breq	8000b22e <_vfprintf_r+0x9de>
8000b206:	0d 89       	ld.ub	r9,r6[0x0]
8000b208:	33 08       	mov	r8,48
8000b20a:	f0 09 18 00 	cp.b	r9,r8
8000b20e:	c0 b1       	brne	8000b224 <_vfprintf_r+0x9d4>
8000b210:	30 08       	mov	r8,0
8000b212:	30 09       	mov	r9,0
8000b214:	40 6b       	lddsp	r11,sp[0x18]
8000b216:	40 7a       	lddsp	r10,sp[0x1c]
8000b218:	e0 a0 1b f1 	rcall	8000e9fa <__avr32_f64_cmp_eq>
8000b21c:	fb b2 00 01 	rsubeq	r2,1
8000b220:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
8000b224:	40 3b       	lddsp	r11,sp[0xc]
8000b226:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000b22a:	10 0b       	add	r11,r8
8000b22c:	50 3b       	stdsp	sp[0xc],r11
8000b22e:	40 6b       	lddsp	r11,sp[0x18]
8000b230:	30 08       	mov	r8,0
8000b232:	30 09       	mov	r9,0
8000b234:	40 7a       	lddsp	r10,sp[0x1c]
8000b236:	e0 a0 1b e2 	rcall	8000e9fa <__avr32_f64_cmp_eq>
8000b23a:	c0 90       	breq	8000b24c <_vfprintf_r+0x9fc>
8000b23c:	40 3a       	lddsp	r10,sp[0xc]
8000b23e:	fb 4a 06 a4 	st.w	sp[1700],r10
8000b242:	c0 58       	rjmp	8000b24c <_vfprintf_r+0x9fc>
8000b244:	10 c9       	st.b	r8++,r9
8000b246:	fb 48 06 a4 	st.w	sp[1700],r8
8000b24a:	c0 28       	rjmp	8000b24e <_vfprintf_r+0x9fe>
8000b24c:	33 09       	mov	r9,48
8000b24e:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000b252:	40 3e       	lddsp	lr,sp[0xc]
8000b254:	1c 38       	cp.w	r8,lr
8000b256:	cf 73       	brcs	8000b244 <_vfprintf_r+0x9f4>
8000b258:	e0 40 00 47 	cp.w	r0,71
8000b25c:	5f 09       	sreq	r9
8000b25e:	e0 40 00 67 	cp.w	r0,103
8000b262:	5f 08       	sreq	r8
8000b264:	f3 e8 10 08 	or	r8,r9,r8
8000b268:	fa f9 06 a4 	ld.w	r9,sp[1700]
8000b26c:	0c 19       	sub	r9,r6
8000b26e:	50 69       	stdsp	sp[0x18],r9
8000b270:	58 08       	cp.w	r8,0
8000b272:	c0 b0       	breq	8000b288 <_vfprintf_r+0xa38>
8000b274:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000b278:	5b d8       	cp.w	r8,-3
8000b27a:	c0 55       	brlt	8000b284 <_vfprintf_r+0xa34>
8000b27c:	40 2c       	lddsp	r12,sp[0x8]
8000b27e:	18 38       	cp.w	r8,r12
8000b280:	e0 8a 00 6a 	brle	8000b354 <_vfprintf_r+0xb04>
8000b284:	20 20       	sub	r0,2
8000b286:	c0 58       	rjmp	8000b290 <_vfprintf_r+0xa40>
8000b288:	e0 40 00 65 	cp.w	r0,101
8000b28c:	e0 89 00 46 	brgt	8000b318 <_vfprintf_r+0xac8>
8000b290:	fa fb 06 ac 	ld.w	r11,sp[1708]
8000b294:	fb 60 06 9c 	st.b	sp[1692],r0
8000b298:	20 1b       	sub	r11,1
8000b29a:	fb 4b 06 ac 	st.w	sp[1708],r11
8000b29e:	c0 47       	brpl	8000b2a6 <_vfprintf_r+0xa56>
8000b2a0:	5c 3b       	neg	r11
8000b2a2:	32 d8       	mov	r8,45
8000b2a4:	c0 28       	rjmp	8000b2a8 <_vfprintf_r+0xa58>
8000b2a6:	32 b8       	mov	r8,43
8000b2a8:	fb 68 06 9d 	st.b	sp[1693],r8
8000b2ac:	58 9b       	cp.w	r11,9
8000b2ae:	e0 8a 00 1d 	brle	8000b2e8 <_vfprintf_r+0xa98>
8000b2b2:	fa c9 fa 35 	sub	r9,sp,-1483
8000b2b6:	30 aa       	mov	r10,10
8000b2b8:	12 98       	mov	r8,r9
8000b2ba:	0e 9c       	mov	r12,r7
8000b2bc:	0c 92       	mov	r2,r6
8000b2be:	f6 0a 0c 06 	divs	r6,r11,r10
8000b2c2:	0e 9b       	mov	r11,r7
8000b2c4:	2d 0b       	sub	r11,-48
8000b2c6:	10 fb       	st.b	--r8,r11
8000b2c8:	0c 9b       	mov	r11,r6
8000b2ca:	58 96       	cp.w	r6,9
8000b2cc:	fe 99 ff f9 	brgt	8000b2be <_vfprintf_r+0xa6e>
8000b2d0:	2d 0b       	sub	r11,-48
8000b2d2:	18 97       	mov	r7,r12
8000b2d4:	04 96       	mov	r6,r2
8000b2d6:	10 fb       	st.b	--r8,r11
8000b2d8:	fa ca f9 62 	sub	r10,sp,-1694
8000b2dc:	c0 38       	rjmp	8000b2e2 <_vfprintf_r+0xa92>
8000b2de:	11 3b       	ld.ub	r11,r8++
8000b2e0:	14 cb       	st.b	r10++,r11
8000b2e2:	12 38       	cp.w	r8,r9
8000b2e4:	cf d3       	brcs	8000b2de <_vfprintf_r+0xa8e>
8000b2e6:	c0 98       	rjmp	8000b2f8 <_vfprintf_r+0xaa8>
8000b2e8:	2d 0b       	sub	r11,-48
8000b2ea:	33 08       	mov	r8,48
8000b2ec:	fb 6b 06 9f 	st.b	sp[1695],r11
8000b2f0:	fb 68 06 9e 	st.b	sp[1694],r8
8000b2f4:	fa ca f9 60 	sub	r10,sp,-1696
8000b2f8:	fa c8 f9 64 	sub	r8,sp,-1692
8000b2fc:	f4 08 01 08 	sub	r8,r10,r8
8000b300:	50 e8       	stdsp	sp[0x38],r8
8000b302:	10 92       	mov	r2,r8
8000b304:	40 6b       	lddsp	r11,sp[0x18]
8000b306:	16 02       	add	r2,r11
8000b308:	58 1b       	cp.w	r11,1
8000b30a:	e0 89 00 05 	brgt	8000b314 <_vfprintf_r+0xac4>
8000b30e:	ed b5 00 00 	bld	r5,0x0
8000b312:	c3 51       	brne	8000b37c <_vfprintf_r+0xb2c>
8000b314:	2f f2       	sub	r2,-1
8000b316:	c3 38       	rjmp	8000b37c <_vfprintf_r+0xb2c>
8000b318:	e0 40 00 66 	cp.w	r0,102
8000b31c:	c1 c1       	brne	8000b354 <_vfprintf_r+0xb04>
8000b31e:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000b322:	58 02       	cp.w	r2,0
8000b324:	e0 8a 00 0c 	brle	8000b33c <_vfprintf_r+0xaec>
8000b328:	40 2a       	lddsp	r10,sp[0x8]
8000b32a:	58 0a       	cp.w	r10,0
8000b32c:	c0 41       	brne	8000b334 <_vfprintf_r+0xae4>
8000b32e:	ed b5 00 00 	bld	r5,0x0
8000b332:	c2 51       	brne	8000b37c <_vfprintf_r+0xb2c>
8000b334:	2f f2       	sub	r2,-1
8000b336:	40 29       	lddsp	r9,sp[0x8]
8000b338:	12 02       	add	r2,r9
8000b33a:	c0 b8       	rjmp	8000b350 <_vfprintf_r+0xb00>
8000b33c:	40 28       	lddsp	r8,sp[0x8]
8000b33e:	58 08       	cp.w	r8,0
8000b340:	c0 61       	brne	8000b34c <_vfprintf_r+0xafc>
8000b342:	ed b5 00 00 	bld	r5,0x0
8000b346:	c0 30       	breq	8000b34c <_vfprintf_r+0xafc>
8000b348:	30 12       	mov	r2,1
8000b34a:	c1 98       	rjmp	8000b37c <_vfprintf_r+0xb2c>
8000b34c:	40 22       	lddsp	r2,sp[0x8]
8000b34e:	2f e2       	sub	r2,-2
8000b350:	36 60       	mov	r0,102
8000b352:	c1 58       	rjmp	8000b37c <_vfprintf_r+0xb2c>
8000b354:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000b358:	40 6e       	lddsp	lr,sp[0x18]
8000b35a:	1c 32       	cp.w	r2,lr
8000b35c:	c0 65       	brlt	8000b368 <_vfprintf_r+0xb18>
8000b35e:	ed b5 00 00 	bld	r5,0x0
8000b362:	f7 b2 00 ff 	subeq	r2,-1
8000b366:	c0 a8       	rjmp	8000b37a <_vfprintf_r+0xb2a>
8000b368:	e4 08 11 02 	rsub	r8,r2,2
8000b36c:	40 6c       	lddsp	r12,sp[0x18]
8000b36e:	58 02       	cp.w	r2,0
8000b370:	f0 02 17 a0 	movle	r2,r8
8000b374:	f9 b2 09 01 	movgt	r2,1
8000b378:	18 02       	add	r2,r12
8000b37a:	36 70       	mov	r0,103
8000b37c:	40 9b       	lddsp	r11,sp[0x24]
8000b37e:	58 0b       	cp.w	r11,0
8000b380:	e0 80 05 94 	breq	8000bea8 <_vfprintf_r+0x1658>
8000b384:	32 d8       	mov	r8,45
8000b386:	fb 68 06 bb 	st.b	sp[1723],r8
8000b38a:	e0 8f 05 93 	bral	8000beb0 <_vfprintf_r+0x1660>
8000b38e:	50 a7       	stdsp	sp[0x28],r7
8000b390:	04 94       	mov	r4,r2
8000b392:	0c 97       	mov	r7,r6
8000b394:	02 92       	mov	r2,r1
8000b396:	06 96       	mov	r6,r3
8000b398:	40 41       	lddsp	r1,sp[0x10]
8000b39a:	40 93       	lddsp	r3,sp[0x24]
8000b39c:	0e 99       	mov	r9,r7
8000b39e:	ed b5 00 05 	bld	r5,0x5
8000b3a2:	c4 81       	brne	8000b432 <_vfprintf_r+0xbe2>
8000b3a4:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b3a8:	40 3e       	lddsp	lr,sp[0xc]
8000b3aa:	58 0e       	cp.w	lr,0
8000b3ac:	c1 d0       	breq	8000b3e6 <_vfprintf_r+0xb96>
8000b3ae:	10 36       	cp.w	r6,r8
8000b3b0:	c0 64       	brge	8000b3bc <_vfprintf_r+0xb6c>
8000b3b2:	fa cc f9 44 	sub	r12,sp,-1724
8000b3b6:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000b3ba:	c1 d8       	rjmp	8000b3f4 <_vfprintf_r+0xba4>
8000b3bc:	fa c8 f9 50 	sub	r8,sp,-1712
8000b3c0:	1a d8       	st.w	--sp,r8
8000b3c2:	fa c8 fa b8 	sub	r8,sp,-1352
8000b3c6:	04 9a       	mov	r10,r2
8000b3c8:	1a d8       	st.w	--sp,r8
8000b3ca:	fa c8 fb b4 	sub	r8,sp,-1100
8000b3ce:	0c 9b       	mov	r11,r6
8000b3d0:	1a d8       	st.w	--sp,r8
8000b3d2:	08 9c       	mov	r12,r4
8000b3d4:	fa c8 f9 40 	sub	r8,sp,-1728
8000b3d8:	fa c9 ff b4 	sub	r9,sp,-76
8000b3dc:	fe b0 f8 a2 	rcall	8000a520 <get_arg>
8000b3e0:	2f dd       	sub	sp,-12
8000b3e2:	78 0a       	ld.w	r10,r12[0x0]
8000b3e4:	c2 08       	rjmp	8000b424 <_vfprintf_r+0xbd4>
8000b3e6:	2f f7       	sub	r7,-1
8000b3e8:	10 39       	cp.w	r9,r8
8000b3ea:	c0 84       	brge	8000b3fa <_vfprintf_r+0xbaa>
8000b3ec:	fa cb f9 44 	sub	r11,sp,-1724
8000b3f0:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b3f4:	ec fa fd 88 	ld.w	r10,r6[-632]
8000b3f8:	c1 68       	rjmp	8000b424 <_vfprintf_r+0xbd4>
8000b3fa:	41 09       	lddsp	r9,sp[0x40]
8000b3fc:	59 f8       	cp.w	r8,31
8000b3fe:	e0 89 00 10 	brgt	8000b41e <_vfprintf_r+0xbce>
8000b402:	f2 ca ff fc 	sub	r10,r9,-4
8000b406:	51 0a       	stdsp	sp[0x40],r10
8000b408:	fa c6 f9 44 	sub	r6,sp,-1724
8000b40c:	72 0a       	ld.w	r10,r9[0x0]
8000b40e:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b412:	f3 4a fd 88 	st.w	r9[-632],r10
8000b416:	2f f8       	sub	r8,-1
8000b418:	fb 48 06 b4 	st.w	sp[1716],r8
8000b41c:	c0 48       	rjmp	8000b424 <_vfprintf_r+0xbd4>
8000b41e:	72 0a       	ld.w	r10,r9[0x0]
8000b420:	2f c9       	sub	r9,-4
8000b422:	51 09       	stdsp	sp[0x40],r9
8000b424:	40 be       	lddsp	lr,sp[0x2c]
8000b426:	1c 98       	mov	r8,lr
8000b428:	95 1e       	st.w	r10[0x4],lr
8000b42a:	bf 58       	asr	r8,0x1f
8000b42c:	95 08       	st.w	r10[0x0],r8
8000b42e:	fe 9f fa 9f 	bral	8000a96c <_vfprintf_r+0x11c>
8000b432:	ed b5 00 04 	bld	r5,0x4
8000b436:	c4 80       	breq	8000b4c6 <_vfprintf_r+0xc76>
8000b438:	e2 15 00 40 	andl	r5,0x40,COH
8000b43c:	c4 50       	breq	8000b4c6 <_vfprintf_r+0xc76>
8000b43e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b442:	40 3c       	lddsp	r12,sp[0xc]
8000b444:	58 0c       	cp.w	r12,0
8000b446:	c1 d0       	breq	8000b480 <_vfprintf_r+0xc30>
8000b448:	10 36       	cp.w	r6,r8
8000b44a:	c0 64       	brge	8000b456 <_vfprintf_r+0xc06>
8000b44c:	fa cb f9 44 	sub	r11,sp,-1724
8000b450:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b454:	c1 d8       	rjmp	8000b48e <_vfprintf_r+0xc3e>
8000b456:	fa c8 f9 50 	sub	r8,sp,-1712
8000b45a:	1a d8       	st.w	--sp,r8
8000b45c:	fa c8 fa b8 	sub	r8,sp,-1352
8000b460:	04 9a       	mov	r10,r2
8000b462:	1a d8       	st.w	--sp,r8
8000b464:	fa c8 fb b4 	sub	r8,sp,-1100
8000b468:	0c 9b       	mov	r11,r6
8000b46a:	1a d8       	st.w	--sp,r8
8000b46c:	08 9c       	mov	r12,r4
8000b46e:	fa c8 f9 40 	sub	r8,sp,-1728
8000b472:	fa c9 ff b4 	sub	r9,sp,-76
8000b476:	fe b0 f8 55 	rcall	8000a520 <get_arg>
8000b47a:	2f dd       	sub	sp,-12
8000b47c:	78 0a       	ld.w	r10,r12[0x0]
8000b47e:	c2 08       	rjmp	8000b4be <_vfprintf_r+0xc6e>
8000b480:	2f f7       	sub	r7,-1
8000b482:	10 39       	cp.w	r9,r8
8000b484:	c0 84       	brge	8000b494 <_vfprintf_r+0xc44>
8000b486:	fa ca f9 44 	sub	r10,sp,-1724
8000b48a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000b48e:	ec fa fd 88 	ld.w	r10,r6[-632]
8000b492:	c1 68       	rjmp	8000b4be <_vfprintf_r+0xc6e>
8000b494:	41 09       	lddsp	r9,sp[0x40]
8000b496:	59 f8       	cp.w	r8,31
8000b498:	e0 89 00 10 	brgt	8000b4b8 <_vfprintf_r+0xc68>
8000b49c:	f2 ca ff fc 	sub	r10,r9,-4
8000b4a0:	51 0a       	stdsp	sp[0x40],r10
8000b4a2:	fa c6 f9 44 	sub	r6,sp,-1724
8000b4a6:	72 0a       	ld.w	r10,r9[0x0]
8000b4a8:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b4ac:	f3 4a fd 88 	st.w	r9[-632],r10
8000b4b0:	2f f8       	sub	r8,-1
8000b4b2:	fb 48 06 b4 	st.w	sp[1716],r8
8000b4b6:	c0 48       	rjmp	8000b4be <_vfprintf_r+0xc6e>
8000b4b8:	72 0a       	ld.w	r10,r9[0x0]
8000b4ba:	2f c9       	sub	r9,-4
8000b4bc:	51 09       	stdsp	sp[0x40],r9
8000b4be:	40 be       	lddsp	lr,sp[0x2c]
8000b4c0:	b4 0e       	st.h	r10[0x0],lr
8000b4c2:	fe 9f fa 55 	bral	8000a96c <_vfprintf_r+0x11c>
8000b4c6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b4ca:	40 3c       	lddsp	r12,sp[0xc]
8000b4cc:	58 0c       	cp.w	r12,0
8000b4ce:	c1 d0       	breq	8000b508 <_vfprintf_r+0xcb8>
8000b4d0:	10 36       	cp.w	r6,r8
8000b4d2:	c0 64       	brge	8000b4de <_vfprintf_r+0xc8e>
8000b4d4:	fa cb f9 44 	sub	r11,sp,-1724
8000b4d8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b4dc:	c1 d8       	rjmp	8000b516 <_vfprintf_r+0xcc6>
8000b4de:	fa c8 f9 50 	sub	r8,sp,-1712
8000b4e2:	1a d8       	st.w	--sp,r8
8000b4e4:	fa c8 fa b8 	sub	r8,sp,-1352
8000b4e8:	04 9a       	mov	r10,r2
8000b4ea:	1a d8       	st.w	--sp,r8
8000b4ec:	fa c8 fb b4 	sub	r8,sp,-1100
8000b4f0:	0c 9b       	mov	r11,r6
8000b4f2:	1a d8       	st.w	--sp,r8
8000b4f4:	08 9c       	mov	r12,r4
8000b4f6:	fa c8 f9 40 	sub	r8,sp,-1728
8000b4fa:	fa c9 ff b4 	sub	r9,sp,-76
8000b4fe:	fe b0 f8 11 	rcall	8000a520 <get_arg>
8000b502:	2f dd       	sub	sp,-12
8000b504:	78 0a       	ld.w	r10,r12[0x0]
8000b506:	c2 08       	rjmp	8000b546 <_vfprintf_r+0xcf6>
8000b508:	2f f7       	sub	r7,-1
8000b50a:	10 39       	cp.w	r9,r8
8000b50c:	c0 84       	brge	8000b51c <_vfprintf_r+0xccc>
8000b50e:	fa ca f9 44 	sub	r10,sp,-1724
8000b512:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000b516:	ec fa fd 88 	ld.w	r10,r6[-632]
8000b51a:	c1 68       	rjmp	8000b546 <_vfprintf_r+0xcf6>
8000b51c:	41 09       	lddsp	r9,sp[0x40]
8000b51e:	59 f8       	cp.w	r8,31
8000b520:	e0 89 00 10 	brgt	8000b540 <_vfprintf_r+0xcf0>
8000b524:	f2 ca ff fc 	sub	r10,r9,-4
8000b528:	51 0a       	stdsp	sp[0x40],r10
8000b52a:	fa c6 f9 44 	sub	r6,sp,-1724
8000b52e:	72 0a       	ld.w	r10,r9[0x0]
8000b530:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b534:	f3 4a fd 88 	st.w	r9[-632],r10
8000b538:	2f f8       	sub	r8,-1
8000b53a:	fb 48 06 b4 	st.w	sp[1716],r8
8000b53e:	c0 48       	rjmp	8000b546 <_vfprintf_r+0xcf6>
8000b540:	72 0a       	ld.w	r10,r9[0x0]
8000b542:	2f c9       	sub	r9,-4
8000b544:	51 09       	stdsp	sp[0x40],r9
8000b546:	40 be       	lddsp	lr,sp[0x2c]
8000b548:	95 0e       	st.w	r10[0x0],lr
8000b54a:	fe 9f fa 11 	bral	8000a96c <_vfprintf_r+0x11c>
8000b54e:	50 a7       	stdsp	sp[0x28],r7
8000b550:	50 80       	stdsp	sp[0x20],r0
8000b552:	0c 97       	mov	r7,r6
8000b554:	04 94       	mov	r4,r2
8000b556:	06 96       	mov	r6,r3
8000b558:	02 92       	mov	r2,r1
8000b55a:	40 93       	lddsp	r3,sp[0x24]
8000b55c:	10 90       	mov	r0,r8
8000b55e:	40 41       	lddsp	r1,sp[0x10]
8000b560:	a5 a5       	sbr	r5,0x4
8000b562:	c0 a8       	rjmp	8000b576 <_vfprintf_r+0xd26>
8000b564:	50 a7       	stdsp	sp[0x28],r7
8000b566:	50 80       	stdsp	sp[0x20],r0
8000b568:	0c 97       	mov	r7,r6
8000b56a:	04 94       	mov	r4,r2
8000b56c:	06 96       	mov	r6,r3
8000b56e:	02 92       	mov	r2,r1
8000b570:	40 93       	lddsp	r3,sp[0x24]
8000b572:	10 90       	mov	r0,r8
8000b574:	40 41       	lddsp	r1,sp[0x10]
8000b576:	ed b5 00 05 	bld	r5,0x5
8000b57a:	c5 d1       	brne	8000b634 <_vfprintf_r+0xde4>
8000b57c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b580:	40 3c       	lddsp	r12,sp[0xc]
8000b582:	58 0c       	cp.w	r12,0
8000b584:	c2 60       	breq	8000b5d0 <_vfprintf_r+0xd80>
8000b586:	10 36       	cp.w	r6,r8
8000b588:	c0 a4       	brge	8000b59c <_vfprintf_r+0xd4c>
8000b58a:	fa cb f9 44 	sub	r11,sp,-1724
8000b58e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b592:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000b596:	fa e9 00 00 	st.d	sp[0],r8
8000b59a:	c1 88       	rjmp	8000b5ca <_vfprintf_r+0xd7a>
8000b59c:	fa c8 f9 50 	sub	r8,sp,-1712
8000b5a0:	1a d8       	st.w	--sp,r8
8000b5a2:	fa c8 fa b8 	sub	r8,sp,-1352
8000b5a6:	04 9a       	mov	r10,r2
8000b5a8:	1a d8       	st.w	--sp,r8
8000b5aa:	0c 9b       	mov	r11,r6
8000b5ac:	fa c8 fb b4 	sub	r8,sp,-1100
8000b5b0:	08 9c       	mov	r12,r4
8000b5b2:	1a d8       	st.w	--sp,r8
8000b5b4:	fa c8 f9 40 	sub	r8,sp,-1728
8000b5b8:	fa c9 ff b4 	sub	r9,sp,-76
8000b5bc:	fe b0 f7 b2 	rcall	8000a520 <get_arg>
8000b5c0:	2f dd       	sub	sp,-12
8000b5c2:	f8 ea 00 00 	ld.d	r10,r12[0]
8000b5c6:	fa eb 00 00 	st.d	sp[0],r10
8000b5ca:	30 08       	mov	r8,0
8000b5cc:	e0 8f 03 de 	bral	8000bd88 <_vfprintf_r+0x1538>
8000b5d0:	ee ca ff ff 	sub	r10,r7,-1
8000b5d4:	10 37       	cp.w	r7,r8
8000b5d6:	c0 b4       	brge	8000b5ec <_vfprintf_r+0xd9c>
8000b5d8:	fa c9 f9 44 	sub	r9,sp,-1724
8000b5dc:	14 97       	mov	r7,r10
8000b5de:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b5e2:	ec ea fd 88 	ld.d	r10,r6[-632]
8000b5e6:	fa eb 00 00 	st.d	sp[0],r10
8000b5ea:	c1 88       	rjmp	8000b61a <_vfprintf_r+0xdca>
8000b5ec:	41 09       	lddsp	r9,sp[0x40]
8000b5ee:	59 f8       	cp.w	r8,31
8000b5f0:	e0 89 00 18 	brgt	8000b620 <_vfprintf_r+0xdd0>
8000b5f4:	f2 e6 00 00 	ld.d	r6,r9[0]
8000b5f8:	f2 cb ff f8 	sub	r11,r9,-8
8000b5fc:	fa e7 00 00 	st.d	sp[0],r6
8000b600:	51 0b       	stdsp	sp[0x40],r11
8000b602:	fa c6 f9 44 	sub	r6,sp,-1724
8000b606:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b60a:	fa e6 00 00 	ld.d	r6,sp[0]
8000b60e:	f2 e7 fd 88 	st.d	r9[-632],r6
8000b612:	2f f8       	sub	r8,-1
8000b614:	14 97       	mov	r7,r10
8000b616:	fb 48 06 b4 	st.w	sp[1716],r8
8000b61a:	40 38       	lddsp	r8,sp[0xc]
8000b61c:	e0 8f 03 b6 	bral	8000bd88 <_vfprintf_r+0x1538>
8000b620:	f2 e6 00 00 	ld.d	r6,r9[0]
8000b624:	40 38       	lddsp	r8,sp[0xc]
8000b626:	fa e7 00 00 	st.d	sp[0],r6
8000b62a:	2f 89       	sub	r9,-8
8000b62c:	14 97       	mov	r7,r10
8000b62e:	51 09       	stdsp	sp[0x40],r9
8000b630:	e0 8f 03 ac 	bral	8000bd88 <_vfprintf_r+0x1538>
8000b634:	ed b5 00 04 	bld	r5,0x4
8000b638:	c1 61       	brne	8000b664 <_vfprintf_r+0xe14>
8000b63a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b63e:	40 3e       	lddsp	lr,sp[0xc]
8000b640:	58 0e       	cp.w	lr,0
8000b642:	c0 80       	breq	8000b652 <_vfprintf_r+0xe02>
8000b644:	10 36       	cp.w	r6,r8
8000b646:	c6 74       	brge	8000b714 <_vfprintf_r+0xec4>
8000b648:	fa cc f9 44 	sub	r12,sp,-1724
8000b64c:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000b650:	c8 08       	rjmp	8000b750 <_vfprintf_r+0xf00>
8000b652:	ee ca ff ff 	sub	r10,r7,-1
8000b656:	10 37       	cp.w	r7,r8
8000b658:	c7 f4       	brge	8000b756 <_vfprintf_r+0xf06>
8000b65a:	fa cb f9 44 	sub	r11,sp,-1724
8000b65e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b662:	c7 68       	rjmp	8000b74e <_vfprintf_r+0xefe>
8000b664:	ed b5 00 06 	bld	r5,0x6
8000b668:	c4 a1       	brne	8000b6fc <_vfprintf_r+0xeac>
8000b66a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b66e:	40 3c       	lddsp	r12,sp[0xc]
8000b670:	58 0c       	cp.w	r12,0
8000b672:	c1 d0       	breq	8000b6ac <_vfprintf_r+0xe5c>
8000b674:	10 36       	cp.w	r6,r8
8000b676:	c0 64       	brge	8000b682 <_vfprintf_r+0xe32>
8000b678:	fa cb f9 44 	sub	r11,sp,-1724
8000b67c:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b680:	c1 f8       	rjmp	8000b6be <_vfprintf_r+0xe6e>
8000b682:	fa c8 f9 50 	sub	r8,sp,-1712
8000b686:	1a d8       	st.w	--sp,r8
8000b688:	fa c8 fa b8 	sub	r8,sp,-1352
8000b68c:	1a d8       	st.w	--sp,r8
8000b68e:	fa c8 fb b4 	sub	r8,sp,-1100
8000b692:	1a d8       	st.w	--sp,r8
8000b694:	fa c8 f9 40 	sub	r8,sp,-1728
8000b698:	fa c9 ff b4 	sub	r9,sp,-76
8000b69c:	04 9a       	mov	r10,r2
8000b69e:	0c 9b       	mov	r11,r6
8000b6a0:	08 9c       	mov	r12,r4
8000b6a2:	fe b0 f7 3f 	rcall	8000a520 <get_arg>
8000b6a6:	2f dd       	sub	sp,-12
8000b6a8:	98 18       	ld.sh	r8,r12[0x2]
8000b6aa:	c2 68       	rjmp	8000b6f6 <_vfprintf_r+0xea6>
8000b6ac:	ee ca ff ff 	sub	r10,r7,-1
8000b6b0:	10 37       	cp.w	r7,r8
8000b6b2:	c0 94       	brge	8000b6c4 <_vfprintf_r+0xe74>
8000b6b4:	fa c9 f9 44 	sub	r9,sp,-1724
8000b6b8:	14 97       	mov	r7,r10
8000b6ba:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b6be:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000b6c2:	c1 a8       	rjmp	8000b6f6 <_vfprintf_r+0xea6>
8000b6c4:	41 09       	lddsp	r9,sp[0x40]
8000b6c6:	59 f8       	cp.w	r8,31
8000b6c8:	e0 89 00 13 	brgt	8000b6ee <_vfprintf_r+0xe9e>
8000b6cc:	f2 cb ff fc 	sub	r11,r9,-4
8000b6d0:	51 0b       	stdsp	sp[0x40],r11
8000b6d2:	72 09       	ld.w	r9,r9[0x0]
8000b6d4:	fa c6 f9 44 	sub	r6,sp,-1724
8000b6d8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000b6dc:	2f f8       	sub	r8,-1
8000b6de:	f7 49 fd 88 	st.w	r11[-632],r9
8000b6e2:	fb 48 06 b4 	st.w	sp[1716],r8
8000b6e6:	14 97       	mov	r7,r10
8000b6e8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000b6ec:	c0 58       	rjmp	8000b6f6 <_vfprintf_r+0xea6>
8000b6ee:	92 18       	ld.sh	r8,r9[0x2]
8000b6f0:	14 97       	mov	r7,r10
8000b6f2:	2f c9       	sub	r9,-4
8000b6f4:	51 09       	stdsp	sp[0x40],r9
8000b6f6:	5c 78       	castu.h	r8
8000b6f8:	50 18       	stdsp	sp[0x4],r8
8000b6fa:	c4 68       	rjmp	8000b786 <_vfprintf_r+0xf36>
8000b6fc:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b700:	40 3c       	lddsp	r12,sp[0xc]
8000b702:	58 0c       	cp.w	r12,0
8000b704:	c1 d0       	breq	8000b73e <_vfprintf_r+0xeee>
8000b706:	10 36       	cp.w	r6,r8
8000b708:	c0 64       	brge	8000b714 <_vfprintf_r+0xec4>
8000b70a:	fa cb f9 44 	sub	r11,sp,-1724
8000b70e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b712:	c1 f8       	rjmp	8000b750 <_vfprintf_r+0xf00>
8000b714:	fa c8 f9 50 	sub	r8,sp,-1712
8000b718:	1a d8       	st.w	--sp,r8
8000b71a:	fa c8 fa b8 	sub	r8,sp,-1352
8000b71e:	0c 9b       	mov	r11,r6
8000b720:	1a d8       	st.w	--sp,r8
8000b722:	fa c8 fb b4 	sub	r8,sp,-1100
8000b726:	04 9a       	mov	r10,r2
8000b728:	1a d8       	st.w	--sp,r8
8000b72a:	08 9c       	mov	r12,r4
8000b72c:	fa c8 f9 40 	sub	r8,sp,-1728
8000b730:	fa c9 ff b4 	sub	r9,sp,-76
8000b734:	fe b0 f6 f6 	rcall	8000a520 <get_arg>
8000b738:	2f dd       	sub	sp,-12
8000b73a:	78 0b       	ld.w	r11,r12[0x0]
8000b73c:	c2 48       	rjmp	8000b784 <_vfprintf_r+0xf34>
8000b73e:	ee ca ff ff 	sub	r10,r7,-1
8000b742:	10 37       	cp.w	r7,r8
8000b744:	c0 94       	brge	8000b756 <_vfprintf_r+0xf06>
8000b746:	fa c9 f9 44 	sub	r9,sp,-1724
8000b74a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b74e:	14 97       	mov	r7,r10
8000b750:	ec fb fd 88 	ld.w	r11,r6[-632]
8000b754:	c1 88       	rjmp	8000b784 <_vfprintf_r+0xf34>
8000b756:	41 09       	lddsp	r9,sp[0x40]
8000b758:	59 f8       	cp.w	r8,31
8000b75a:	e0 89 00 11 	brgt	8000b77c <_vfprintf_r+0xf2c>
8000b75e:	f2 cb ff fc 	sub	r11,r9,-4
8000b762:	51 0b       	stdsp	sp[0x40],r11
8000b764:	fa c6 f9 44 	sub	r6,sp,-1724
8000b768:	72 0b       	ld.w	r11,r9[0x0]
8000b76a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b76e:	f3 4b fd 88 	st.w	r9[-632],r11
8000b772:	2f f8       	sub	r8,-1
8000b774:	14 97       	mov	r7,r10
8000b776:	fb 48 06 b4 	st.w	sp[1716],r8
8000b77a:	c0 58       	rjmp	8000b784 <_vfprintf_r+0xf34>
8000b77c:	72 0b       	ld.w	r11,r9[0x0]
8000b77e:	14 97       	mov	r7,r10
8000b780:	2f c9       	sub	r9,-4
8000b782:	51 09       	stdsp	sp[0x40],r9
8000b784:	50 1b       	stdsp	sp[0x4],r11
8000b786:	30 0e       	mov	lr,0
8000b788:	50 0e       	stdsp	sp[0x0],lr
8000b78a:	1c 98       	mov	r8,lr
8000b78c:	e0 8f 02 fe 	bral	8000bd88 <_vfprintf_r+0x1538>
8000b790:	50 a7       	stdsp	sp[0x28],r7
8000b792:	50 80       	stdsp	sp[0x20],r0
8000b794:	0c 97       	mov	r7,r6
8000b796:	04 94       	mov	r4,r2
8000b798:	06 96       	mov	r6,r3
8000b79a:	02 92       	mov	r2,r1
8000b79c:	40 93       	lddsp	r3,sp[0x24]
8000b79e:	40 41       	lddsp	r1,sp[0x10]
8000b7a0:	0e 99       	mov	r9,r7
8000b7a2:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b7a6:	40 3c       	lddsp	r12,sp[0xc]
8000b7a8:	58 0c       	cp.w	r12,0
8000b7aa:	c1 d0       	breq	8000b7e4 <_vfprintf_r+0xf94>
8000b7ac:	10 36       	cp.w	r6,r8
8000b7ae:	c0 64       	brge	8000b7ba <_vfprintf_r+0xf6a>
8000b7b0:	fa cb f9 44 	sub	r11,sp,-1724
8000b7b4:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b7b8:	c1 d8       	rjmp	8000b7f2 <_vfprintf_r+0xfa2>
8000b7ba:	fa c8 f9 50 	sub	r8,sp,-1712
8000b7be:	1a d8       	st.w	--sp,r8
8000b7c0:	fa c8 fa b8 	sub	r8,sp,-1352
8000b7c4:	1a d8       	st.w	--sp,r8
8000b7c6:	fa c8 fb b4 	sub	r8,sp,-1100
8000b7ca:	1a d8       	st.w	--sp,r8
8000b7cc:	fa c9 ff b4 	sub	r9,sp,-76
8000b7d0:	fa c8 f9 40 	sub	r8,sp,-1728
8000b7d4:	04 9a       	mov	r10,r2
8000b7d6:	0c 9b       	mov	r11,r6
8000b7d8:	08 9c       	mov	r12,r4
8000b7da:	fe b0 f6 a3 	rcall	8000a520 <get_arg>
8000b7de:	2f dd       	sub	sp,-12
8000b7e0:	78 09       	ld.w	r9,r12[0x0]
8000b7e2:	c2 18       	rjmp	8000b824 <_vfprintf_r+0xfd4>
8000b7e4:	2f f7       	sub	r7,-1
8000b7e6:	10 39       	cp.w	r9,r8
8000b7e8:	c0 84       	brge	8000b7f8 <_vfprintf_r+0xfa8>
8000b7ea:	fa ca f9 44 	sub	r10,sp,-1724
8000b7ee:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000b7f2:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000b7f6:	c1 78       	rjmp	8000b824 <_vfprintf_r+0xfd4>
8000b7f8:	41 09       	lddsp	r9,sp[0x40]
8000b7fa:	59 f8       	cp.w	r8,31
8000b7fc:	e0 89 00 10 	brgt	8000b81c <_vfprintf_r+0xfcc>
8000b800:	f2 ca ff fc 	sub	r10,r9,-4
8000b804:	51 0a       	stdsp	sp[0x40],r10
8000b806:	fa c6 f9 44 	sub	r6,sp,-1724
8000b80a:	72 09       	ld.w	r9,r9[0x0]
8000b80c:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000b810:	f5 49 fd 88 	st.w	r10[-632],r9
8000b814:	2f f8       	sub	r8,-1
8000b816:	fb 48 06 b4 	st.w	sp[1716],r8
8000b81a:	c0 58       	rjmp	8000b824 <_vfprintf_r+0xfd4>
8000b81c:	f2 c8 ff fc 	sub	r8,r9,-4
8000b820:	51 08       	stdsp	sp[0x40],r8
8000b822:	72 09       	ld.w	r9,r9[0x0]
8000b824:	33 08       	mov	r8,48
8000b826:	fb 68 06 b8 	st.b	sp[1720],r8
8000b82a:	37 88       	mov	r8,120
8000b82c:	30 0e       	mov	lr,0
8000b82e:	fb 68 06 b9 	st.b	sp[1721],r8
8000b832:	fe cc bd 0e 	sub	r12,pc,-17138
8000b836:	50 19       	stdsp	sp[0x4],r9
8000b838:	a1 b5       	sbr	r5,0x1
8000b83a:	50 0e       	stdsp	sp[0x0],lr
8000b83c:	50 dc       	stdsp	sp[0x34],r12
8000b83e:	30 28       	mov	r8,2
8000b840:	37 80       	mov	r0,120
8000b842:	e0 8f 02 a3 	bral	8000bd88 <_vfprintf_r+0x1538>
8000b846:	50 a7       	stdsp	sp[0x28],r7
8000b848:	50 80       	stdsp	sp[0x20],r0
8000b84a:	10 90       	mov	r0,r8
8000b84c:	30 08       	mov	r8,0
8000b84e:	fb 68 06 bb 	st.b	sp[1723],r8
8000b852:	0c 97       	mov	r7,r6
8000b854:	04 94       	mov	r4,r2
8000b856:	06 96       	mov	r6,r3
8000b858:	02 92       	mov	r2,r1
8000b85a:	40 93       	lddsp	r3,sp[0x24]
8000b85c:	40 41       	lddsp	r1,sp[0x10]
8000b85e:	0e 99       	mov	r9,r7
8000b860:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b864:	40 3b       	lddsp	r11,sp[0xc]
8000b866:	58 0b       	cp.w	r11,0
8000b868:	c1 d0       	breq	8000b8a2 <_vfprintf_r+0x1052>
8000b86a:	10 36       	cp.w	r6,r8
8000b86c:	c0 64       	brge	8000b878 <_vfprintf_r+0x1028>
8000b86e:	fa ca f9 44 	sub	r10,sp,-1724
8000b872:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000b876:	c1 d8       	rjmp	8000b8b0 <_vfprintf_r+0x1060>
8000b878:	fa c8 f9 50 	sub	r8,sp,-1712
8000b87c:	1a d8       	st.w	--sp,r8
8000b87e:	fa c8 fa b8 	sub	r8,sp,-1352
8000b882:	1a d8       	st.w	--sp,r8
8000b884:	fa c8 fb b4 	sub	r8,sp,-1100
8000b888:	0c 9b       	mov	r11,r6
8000b88a:	1a d8       	st.w	--sp,r8
8000b88c:	04 9a       	mov	r10,r2
8000b88e:	fa c8 f9 40 	sub	r8,sp,-1728
8000b892:	fa c9 ff b4 	sub	r9,sp,-76
8000b896:	08 9c       	mov	r12,r4
8000b898:	fe b0 f6 44 	rcall	8000a520 <get_arg>
8000b89c:	2f dd       	sub	sp,-12
8000b89e:	78 06       	ld.w	r6,r12[0x0]
8000b8a0:	c2 08       	rjmp	8000b8e0 <_vfprintf_r+0x1090>
8000b8a2:	2f f7       	sub	r7,-1
8000b8a4:	10 39       	cp.w	r9,r8
8000b8a6:	c0 84       	brge	8000b8b6 <_vfprintf_r+0x1066>
8000b8a8:	fa c9 f9 44 	sub	r9,sp,-1724
8000b8ac:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b8b0:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000b8b4:	c1 68       	rjmp	8000b8e0 <_vfprintf_r+0x1090>
8000b8b6:	41 09       	lddsp	r9,sp[0x40]
8000b8b8:	59 f8       	cp.w	r8,31
8000b8ba:	e0 89 00 10 	brgt	8000b8da <_vfprintf_r+0x108a>
8000b8be:	f2 ca ff fc 	sub	r10,r9,-4
8000b8c2:	51 0a       	stdsp	sp[0x40],r10
8000b8c4:	72 06       	ld.w	r6,r9[0x0]
8000b8c6:	fa ce f9 44 	sub	lr,sp,-1724
8000b8ca:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000b8ce:	f3 46 fd 88 	st.w	r9[-632],r6
8000b8d2:	2f f8       	sub	r8,-1
8000b8d4:	fb 48 06 b4 	st.w	sp[1716],r8
8000b8d8:	c0 48       	rjmp	8000b8e0 <_vfprintf_r+0x1090>
8000b8da:	72 06       	ld.w	r6,r9[0x0]
8000b8dc:	2f c9       	sub	r9,-4
8000b8de:	51 09       	stdsp	sp[0x40],r9
8000b8e0:	40 2c       	lddsp	r12,sp[0x8]
8000b8e2:	58 0c       	cp.w	r12,0
8000b8e4:	c1 05       	brlt	8000b904 <_vfprintf_r+0x10b4>
8000b8e6:	18 9a       	mov	r10,r12
8000b8e8:	30 0b       	mov	r11,0
8000b8ea:	0c 9c       	mov	r12,r6
8000b8ec:	e0 a0 10 f4 	rcall	8000dad4 <memchr>
8000b8f0:	e0 80 02 df 	breq	8000beae <_vfprintf_r+0x165e>
8000b8f4:	f8 06 01 02 	sub	r2,r12,r6
8000b8f8:	40 2b       	lddsp	r11,sp[0x8]
8000b8fa:	16 32       	cp.w	r2,r11
8000b8fc:	e0 89 02 d9 	brgt	8000beae <_vfprintf_r+0x165e>
8000b900:	e0 8f 02 d4 	bral	8000bea8 <_vfprintf_r+0x1658>
8000b904:	30 0a       	mov	r10,0
8000b906:	0c 9c       	mov	r12,r6
8000b908:	50 2a       	stdsp	sp[0x8],r10
8000b90a:	e0 a0 15 90 	rcall	8000e42a <strlen>
8000b90e:	18 92       	mov	r2,r12
8000b910:	e0 8f 02 d2 	bral	8000beb4 <_vfprintf_r+0x1664>
8000b914:	50 a7       	stdsp	sp[0x28],r7
8000b916:	50 80       	stdsp	sp[0x20],r0
8000b918:	0c 97       	mov	r7,r6
8000b91a:	04 94       	mov	r4,r2
8000b91c:	06 96       	mov	r6,r3
8000b91e:	02 92       	mov	r2,r1
8000b920:	40 93       	lddsp	r3,sp[0x24]
8000b922:	10 90       	mov	r0,r8
8000b924:	40 41       	lddsp	r1,sp[0x10]
8000b926:	a5 a5       	sbr	r5,0x4
8000b928:	c0 a8       	rjmp	8000b93c <_vfprintf_r+0x10ec>
8000b92a:	50 a7       	stdsp	sp[0x28],r7
8000b92c:	50 80       	stdsp	sp[0x20],r0
8000b92e:	0c 97       	mov	r7,r6
8000b930:	04 94       	mov	r4,r2
8000b932:	06 96       	mov	r6,r3
8000b934:	02 92       	mov	r2,r1
8000b936:	40 93       	lddsp	r3,sp[0x24]
8000b938:	10 90       	mov	r0,r8
8000b93a:	40 41       	lddsp	r1,sp[0x10]
8000b93c:	ed b5 00 05 	bld	r5,0x5
8000b940:	c5 61       	brne	8000b9ec <_vfprintf_r+0x119c>
8000b942:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b946:	40 39       	lddsp	r9,sp[0xc]
8000b948:	58 09       	cp.w	r9,0
8000b94a:	c2 10       	breq	8000b98c <_vfprintf_r+0x113c>
8000b94c:	10 36       	cp.w	r6,r8
8000b94e:	c0 74       	brge	8000b95c <_vfprintf_r+0x110c>
8000b950:	fa c8 f9 44 	sub	r8,sp,-1724
8000b954:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000b958:	c2 38       	rjmp	8000b99e <_vfprintf_r+0x114e>
8000b95a:	d7 03       	nop
8000b95c:	fa c8 f9 50 	sub	r8,sp,-1712
8000b960:	1a d8       	st.w	--sp,r8
8000b962:	fa c8 fa b8 	sub	r8,sp,-1352
8000b966:	1a d8       	st.w	--sp,r8
8000b968:	fa c8 fb b4 	sub	r8,sp,-1100
8000b96c:	1a d8       	st.w	--sp,r8
8000b96e:	fa c8 f9 40 	sub	r8,sp,-1728
8000b972:	fa c9 ff b4 	sub	r9,sp,-76
8000b976:	04 9a       	mov	r10,r2
8000b978:	0c 9b       	mov	r11,r6
8000b97a:	08 9c       	mov	r12,r4
8000b97c:	fe b0 f5 d2 	rcall	8000a520 <get_arg>
8000b980:	2f dd       	sub	sp,-12
8000b982:	f8 e8 00 00 	ld.d	r8,r12[0]
8000b986:	fa e9 00 00 	st.d	sp[0],r8
8000b98a:	c2 e8       	rjmp	8000b9e6 <_vfprintf_r+0x1196>
8000b98c:	ee ca ff ff 	sub	r10,r7,-1
8000b990:	10 37       	cp.w	r7,r8
8000b992:	c0 b4       	brge	8000b9a8 <_vfprintf_r+0x1158>
8000b994:	fa c8 f9 44 	sub	r8,sp,-1724
8000b998:	14 97       	mov	r7,r10
8000b99a:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000b99e:	ec ea fd 88 	ld.d	r10,r6[-632]
8000b9a2:	fa eb 00 00 	st.d	sp[0],r10
8000b9a6:	c2 08       	rjmp	8000b9e6 <_vfprintf_r+0x1196>
8000b9a8:	41 09       	lddsp	r9,sp[0x40]
8000b9aa:	59 f8       	cp.w	r8,31
8000b9ac:	e0 89 00 16 	brgt	8000b9d8 <_vfprintf_r+0x1188>
8000b9b0:	f2 e6 00 00 	ld.d	r6,r9[0]
8000b9b4:	f2 cb ff f8 	sub	r11,r9,-8
8000b9b8:	fa e7 00 00 	st.d	sp[0],r6
8000b9bc:	51 0b       	stdsp	sp[0x40],r11
8000b9be:	fa c6 f9 44 	sub	r6,sp,-1724
8000b9c2:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b9c6:	fa e6 00 00 	ld.d	r6,sp[0]
8000b9ca:	f2 e7 fd 88 	st.d	r9[-632],r6
8000b9ce:	2f f8       	sub	r8,-1
8000b9d0:	14 97       	mov	r7,r10
8000b9d2:	fb 48 06 b4 	st.w	sp[1716],r8
8000b9d6:	c0 88       	rjmp	8000b9e6 <_vfprintf_r+0x1196>
8000b9d8:	f2 e6 00 00 	ld.d	r6,r9[0]
8000b9dc:	2f 89       	sub	r9,-8
8000b9de:	fa e7 00 00 	st.d	sp[0],r6
8000b9e2:	51 09       	stdsp	sp[0x40],r9
8000b9e4:	14 97       	mov	r7,r10
8000b9e6:	30 18       	mov	r8,1
8000b9e8:	e0 8f 01 d0 	bral	8000bd88 <_vfprintf_r+0x1538>
8000b9ec:	ed b5 00 04 	bld	r5,0x4
8000b9f0:	c1 61       	brne	8000ba1c <_vfprintf_r+0x11cc>
8000b9f2:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b9f6:	40 3e       	lddsp	lr,sp[0xc]
8000b9f8:	58 0e       	cp.w	lr,0
8000b9fa:	c0 80       	breq	8000ba0a <_vfprintf_r+0x11ba>
8000b9fc:	10 36       	cp.w	r6,r8
8000b9fe:	c6 74       	brge	8000bacc <_vfprintf_r+0x127c>
8000ba00:	fa cc f9 44 	sub	r12,sp,-1724
8000ba04:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000ba08:	c8 08       	rjmp	8000bb08 <_vfprintf_r+0x12b8>
8000ba0a:	ee ca ff ff 	sub	r10,r7,-1
8000ba0e:	10 37       	cp.w	r7,r8
8000ba10:	c7 f4       	brge	8000bb0e <_vfprintf_r+0x12be>
8000ba12:	fa cb f9 44 	sub	r11,sp,-1724
8000ba16:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ba1a:	c7 68       	rjmp	8000bb06 <_vfprintf_r+0x12b6>
8000ba1c:	ed b5 00 06 	bld	r5,0x6
8000ba20:	c4 a1       	brne	8000bab4 <_vfprintf_r+0x1264>
8000ba22:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ba26:	40 3c       	lddsp	r12,sp[0xc]
8000ba28:	58 0c       	cp.w	r12,0
8000ba2a:	c1 d0       	breq	8000ba64 <_vfprintf_r+0x1214>
8000ba2c:	10 36       	cp.w	r6,r8
8000ba2e:	c0 64       	brge	8000ba3a <_vfprintf_r+0x11ea>
8000ba30:	fa cb f9 44 	sub	r11,sp,-1724
8000ba34:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ba38:	c1 f8       	rjmp	8000ba76 <_vfprintf_r+0x1226>
8000ba3a:	fa c8 f9 50 	sub	r8,sp,-1712
8000ba3e:	1a d8       	st.w	--sp,r8
8000ba40:	fa c8 fa b8 	sub	r8,sp,-1352
8000ba44:	1a d8       	st.w	--sp,r8
8000ba46:	fa c8 fb b4 	sub	r8,sp,-1100
8000ba4a:	1a d8       	st.w	--sp,r8
8000ba4c:	fa c8 f9 40 	sub	r8,sp,-1728
8000ba50:	fa c9 ff b4 	sub	r9,sp,-76
8000ba54:	04 9a       	mov	r10,r2
8000ba56:	0c 9b       	mov	r11,r6
8000ba58:	08 9c       	mov	r12,r4
8000ba5a:	fe b0 f5 63 	rcall	8000a520 <get_arg>
8000ba5e:	2f dd       	sub	sp,-12
8000ba60:	98 18       	ld.sh	r8,r12[0x2]
8000ba62:	c2 68       	rjmp	8000baae <_vfprintf_r+0x125e>
8000ba64:	ee ca ff ff 	sub	r10,r7,-1
8000ba68:	10 37       	cp.w	r7,r8
8000ba6a:	c0 94       	brge	8000ba7c <_vfprintf_r+0x122c>
8000ba6c:	fa c9 f9 44 	sub	r9,sp,-1724
8000ba70:	14 97       	mov	r7,r10
8000ba72:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000ba76:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000ba7a:	c1 a8       	rjmp	8000baae <_vfprintf_r+0x125e>
8000ba7c:	41 09       	lddsp	r9,sp[0x40]
8000ba7e:	59 f8       	cp.w	r8,31
8000ba80:	e0 89 00 13 	brgt	8000baa6 <_vfprintf_r+0x1256>
8000ba84:	f2 cb ff fc 	sub	r11,r9,-4
8000ba88:	51 0b       	stdsp	sp[0x40],r11
8000ba8a:	72 09       	ld.w	r9,r9[0x0]
8000ba8c:	fa c6 f9 44 	sub	r6,sp,-1724
8000ba90:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000ba94:	2f f8       	sub	r8,-1
8000ba96:	f7 49 fd 88 	st.w	r11[-632],r9
8000ba9a:	fb 48 06 b4 	st.w	sp[1716],r8
8000ba9e:	14 97       	mov	r7,r10
8000baa0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000baa4:	c0 58       	rjmp	8000baae <_vfprintf_r+0x125e>
8000baa6:	92 18       	ld.sh	r8,r9[0x2]
8000baa8:	14 97       	mov	r7,r10
8000baaa:	2f c9       	sub	r9,-4
8000baac:	51 09       	stdsp	sp[0x40],r9
8000baae:	5c 78       	castu.h	r8
8000bab0:	50 18       	stdsp	sp[0x4],r8
8000bab2:	c4 68       	rjmp	8000bb3e <_vfprintf_r+0x12ee>
8000bab4:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000bab8:	40 3c       	lddsp	r12,sp[0xc]
8000baba:	58 0c       	cp.w	r12,0
8000babc:	c1 d0       	breq	8000baf6 <_vfprintf_r+0x12a6>
8000babe:	10 36       	cp.w	r6,r8
8000bac0:	c0 64       	brge	8000bacc <_vfprintf_r+0x127c>
8000bac2:	fa cb f9 44 	sub	r11,sp,-1724
8000bac6:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000baca:	c1 f8       	rjmp	8000bb08 <_vfprintf_r+0x12b8>
8000bacc:	fa c8 f9 50 	sub	r8,sp,-1712
8000bad0:	1a d8       	st.w	--sp,r8
8000bad2:	fa c8 fa b8 	sub	r8,sp,-1352
8000bad6:	0c 9b       	mov	r11,r6
8000bad8:	1a d8       	st.w	--sp,r8
8000bada:	fa c8 fb b4 	sub	r8,sp,-1100
8000bade:	04 9a       	mov	r10,r2
8000bae0:	1a d8       	st.w	--sp,r8
8000bae2:	08 9c       	mov	r12,r4
8000bae4:	fa c8 f9 40 	sub	r8,sp,-1728
8000bae8:	fa c9 ff b4 	sub	r9,sp,-76
8000baec:	fe b0 f5 1a 	rcall	8000a520 <get_arg>
8000baf0:	2f dd       	sub	sp,-12
8000baf2:	78 0b       	ld.w	r11,r12[0x0]
8000baf4:	c2 48       	rjmp	8000bb3c <_vfprintf_r+0x12ec>
8000baf6:	ee ca ff ff 	sub	r10,r7,-1
8000bafa:	10 37       	cp.w	r7,r8
8000bafc:	c0 94       	brge	8000bb0e <_vfprintf_r+0x12be>
8000bafe:	fa c9 f9 44 	sub	r9,sp,-1724
8000bb02:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000bb06:	14 97       	mov	r7,r10
8000bb08:	ec fb fd 88 	ld.w	r11,r6[-632]
8000bb0c:	c1 88       	rjmp	8000bb3c <_vfprintf_r+0x12ec>
8000bb0e:	41 09       	lddsp	r9,sp[0x40]
8000bb10:	59 f8       	cp.w	r8,31
8000bb12:	e0 89 00 11 	brgt	8000bb34 <_vfprintf_r+0x12e4>
8000bb16:	f2 cb ff fc 	sub	r11,r9,-4
8000bb1a:	51 0b       	stdsp	sp[0x40],r11
8000bb1c:	fa c6 f9 44 	sub	r6,sp,-1724
8000bb20:	72 0b       	ld.w	r11,r9[0x0]
8000bb22:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000bb26:	f3 4b fd 88 	st.w	r9[-632],r11
8000bb2a:	2f f8       	sub	r8,-1
8000bb2c:	14 97       	mov	r7,r10
8000bb2e:	fb 48 06 b4 	st.w	sp[1716],r8
8000bb32:	c0 58       	rjmp	8000bb3c <_vfprintf_r+0x12ec>
8000bb34:	72 0b       	ld.w	r11,r9[0x0]
8000bb36:	14 97       	mov	r7,r10
8000bb38:	2f c9       	sub	r9,-4
8000bb3a:	51 09       	stdsp	sp[0x40],r9
8000bb3c:	50 1b       	stdsp	sp[0x4],r11
8000bb3e:	30 0e       	mov	lr,0
8000bb40:	30 18       	mov	r8,1
8000bb42:	50 0e       	stdsp	sp[0x0],lr
8000bb44:	c2 29       	rjmp	8000bd88 <_vfprintf_r+0x1538>
8000bb46:	50 a7       	stdsp	sp[0x28],r7
8000bb48:	50 80       	stdsp	sp[0x20],r0
8000bb4a:	0c 97       	mov	r7,r6
8000bb4c:	04 94       	mov	r4,r2
8000bb4e:	06 96       	mov	r6,r3
8000bb50:	02 92       	mov	r2,r1
8000bb52:	fe cc c0 2e 	sub	r12,pc,-16338
8000bb56:	40 93       	lddsp	r3,sp[0x24]
8000bb58:	10 90       	mov	r0,r8
8000bb5a:	40 41       	lddsp	r1,sp[0x10]
8000bb5c:	50 dc       	stdsp	sp[0x34],r12
8000bb5e:	ed b5 00 05 	bld	r5,0x5
8000bb62:	c5 51       	brne	8000bc0c <_vfprintf_r+0x13bc>
8000bb64:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000bb68:	40 3b       	lddsp	r11,sp[0xc]
8000bb6a:	58 0b       	cp.w	r11,0
8000bb6c:	c2 20       	breq	8000bbb0 <_vfprintf_r+0x1360>
8000bb6e:	10 36       	cp.w	r6,r8
8000bb70:	c0 a4       	brge	8000bb84 <_vfprintf_r+0x1334>
8000bb72:	fa ca f9 44 	sub	r10,sp,-1724
8000bb76:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000bb7a:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000bb7e:	fa e9 00 00 	st.d	sp[0],r8
8000bb82:	cf 28       	rjmp	8000bd66 <_vfprintf_r+0x1516>
8000bb84:	fa c8 f9 50 	sub	r8,sp,-1712
8000bb88:	1a d8       	st.w	--sp,r8
8000bb8a:	fa c8 fa b8 	sub	r8,sp,-1352
8000bb8e:	04 9a       	mov	r10,r2
8000bb90:	1a d8       	st.w	--sp,r8
8000bb92:	0c 9b       	mov	r11,r6
8000bb94:	fa c8 fb b4 	sub	r8,sp,-1100
8000bb98:	08 9c       	mov	r12,r4
8000bb9a:	1a d8       	st.w	--sp,r8
8000bb9c:	fa c8 f9 40 	sub	r8,sp,-1728
8000bba0:	fa c9 ff b4 	sub	r9,sp,-76
8000bba4:	fe b0 f4 be 	rcall	8000a520 <get_arg>
8000bba8:	2f dd       	sub	sp,-12
8000bbaa:	f8 ea 00 00 	ld.d	r10,r12[0]
8000bbae:	c0 c8       	rjmp	8000bbc6 <_vfprintf_r+0x1376>
8000bbb0:	ee ca ff ff 	sub	r10,r7,-1
8000bbb4:	10 37       	cp.w	r7,r8
8000bbb6:	c0 b4       	brge	8000bbcc <_vfprintf_r+0x137c>
8000bbb8:	fa c9 f9 44 	sub	r9,sp,-1724
8000bbbc:	14 97       	mov	r7,r10
8000bbbe:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000bbc2:	ec ea fd 88 	ld.d	r10,r6[-632]
8000bbc6:	fa eb 00 00 	st.d	sp[0],r10
8000bbca:	cc e8       	rjmp	8000bd66 <_vfprintf_r+0x1516>
8000bbcc:	41 09       	lddsp	r9,sp[0x40]
8000bbce:	59 f8       	cp.w	r8,31
8000bbd0:	e0 89 00 16 	brgt	8000bbfc <_vfprintf_r+0x13ac>
8000bbd4:	f2 e6 00 00 	ld.d	r6,r9[0]
8000bbd8:	f2 cb ff f8 	sub	r11,r9,-8
8000bbdc:	fa e7 00 00 	st.d	sp[0],r6
8000bbe0:	51 0b       	stdsp	sp[0x40],r11
8000bbe2:	fa c6 f9 44 	sub	r6,sp,-1724
8000bbe6:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000bbea:	fa e6 00 00 	ld.d	r6,sp[0]
8000bbee:	f2 e7 fd 88 	st.d	r9[-632],r6
8000bbf2:	2f f8       	sub	r8,-1
8000bbf4:	14 97       	mov	r7,r10
8000bbf6:	fb 48 06 b4 	st.w	sp[1716],r8
8000bbfa:	cb 68       	rjmp	8000bd66 <_vfprintf_r+0x1516>
8000bbfc:	f2 e6 00 00 	ld.d	r6,r9[0]
8000bc00:	2f 89       	sub	r9,-8
8000bc02:	fa e7 00 00 	st.d	sp[0],r6
8000bc06:	51 09       	stdsp	sp[0x40],r9
8000bc08:	14 97       	mov	r7,r10
8000bc0a:	ca e8       	rjmp	8000bd66 <_vfprintf_r+0x1516>
8000bc0c:	ed b5 00 04 	bld	r5,0x4
8000bc10:	c1 71       	brne	8000bc3e <_vfprintf_r+0x13ee>
8000bc12:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000bc16:	40 3e       	lddsp	lr,sp[0xc]
8000bc18:	58 0e       	cp.w	lr,0
8000bc1a:	c0 80       	breq	8000bc2a <_vfprintf_r+0x13da>
8000bc1c:	10 36       	cp.w	r6,r8
8000bc1e:	c6 94       	brge	8000bcf0 <_vfprintf_r+0x14a0>
8000bc20:	fa cc f9 44 	sub	r12,sp,-1724
8000bc24:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000bc28:	c8 28       	rjmp	8000bd2c <_vfprintf_r+0x14dc>
8000bc2a:	ee ca ff ff 	sub	r10,r7,-1
8000bc2e:	10 37       	cp.w	r7,r8
8000bc30:	e0 84 00 81 	brge	8000bd32 <_vfprintf_r+0x14e2>
8000bc34:	fa cb f9 44 	sub	r11,sp,-1724
8000bc38:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000bc3c:	c7 78       	rjmp	8000bd2a <_vfprintf_r+0x14da>
8000bc3e:	ed b5 00 06 	bld	r5,0x6
8000bc42:	c4 b1       	brne	8000bcd8 <_vfprintf_r+0x1488>
8000bc44:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000bc48:	40 3c       	lddsp	r12,sp[0xc]
8000bc4a:	58 0c       	cp.w	r12,0
8000bc4c:	c1 d0       	breq	8000bc86 <_vfprintf_r+0x1436>
8000bc4e:	10 36       	cp.w	r6,r8
8000bc50:	c0 64       	brge	8000bc5c <_vfprintf_r+0x140c>
8000bc52:	fa cb f9 44 	sub	r11,sp,-1724
8000bc56:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000bc5a:	c1 f8       	rjmp	8000bc98 <_vfprintf_r+0x1448>
8000bc5c:	fa c8 f9 50 	sub	r8,sp,-1712
8000bc60:	1a d8       	st.w	--sp,r8
8000bc62:	fa c8 fa b8 	sub	r8,sp,-1352
8000bc66:	1a d8       	st.w	--sp,r8
8000bc68:	fa c8 fb b4 	sub	r8,sp,-1100
8000bc6c:	1a d8       	st.w	--sp,r8
8000bc6e:	fa c8 f9 40 	sub	r8,sp,-1728
8000bc72:	fa c9 ff b4 	sub	r9,sp,-76
8000bc76:	04 9a       	mov	r10,r2
8000bc78:	0c 9b       	mov	r11,r6
8000bc7a:	08 9c       	mov	r12,r4
8000bc7c:	fe b0 f4 52 	rcall	8000a520 <get_arg>
8000bc80:	2f dd       	sub	sp,-12
8000bc82:	98 18       	ld.sh	r8,r12[0x2]
8000bc84:	c2 78       	rjmp	8000bcd2 <_vfprintf_r+0x1482>
8000bc86:	ee ca ff ff 	sub	r10,r7,-1
8000bc8a:	10 37       	cp.w	r7,r8
8000bc8c:	c0 a4       	brge	8000bca0 <_vfprintf_r+0x1450>
8000bc8e:	fa c9 f9 44 	sub	r9,sp,-1724
8000bc92:	14 97       	mov	r7,r10
8000bc94:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000bc98:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000bc9c:	c1 b8       	rjmp	8000bcd2 <_vfprintf_r+0x1482>
8000bc9e:	d7 03       	nop
8000bca0:	41 09       	lddsp	r9,sp[0x40]
8000bca2:	59 f8       	cp.w	r8,31
8000bca4:	e0 89 00 13 	brgt	8000bcca <_vfprintf_r+0x147a>
8000bca8:	f2 cb ff fc 	sub	r11,r9,-4
8000bcac:	51 0b       	stdsp	sp[0x40],r11
8000bcae:	72 09       	ld.w	r9,r9[0x0]
8000bcb0:	fa c6 f9 44 	sub	r6,sp,-1724
8000bcb4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000bcb8:	2f f8       	sub	r8,-1
8000bcba:	f7 49 fd 88 	st.w	r11[-632],r9
8000bcbe:	fb 48 06 b4 	st.w	sp[1716],r8
8000bcc2:	14 97       	mov	r7,r10
8000bcc4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000bcc8:	c0 58       	rjmp	8000bcd2 <_vfprintf_r+0x1482>
8000bcca:	92 18       	ld.sh	r8,r9[0x2]
8000bccc:	14 97       	mov	r7,r10
8000bcce:	2f c9       	sub	r9,-4
8000bcd0:	51 09       	stdsp	sp[0x40],r9
8000bcd2:	5c 78       	castu.h	r8
8000bcd4:	50 18       	stdsp	sp[0x4],r8
8000bcd6:	c4 68       	rjmp	8000bd62 <_vfprintf_r+0x1512>
8000bcd8:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000bcdc:	40 3c       	lddsp	r12,sp[0xc]
8000bcde:	58 0c       	cp.w	r12,0
8000bce0:	c1 d0       	breq	8000bd1a <_vfprintf_r+0x14ca>
8000bce2:	10 36       	cp.w	r6,r8
8000bce4:	c0 64       	brge	8000bcf0 <_vfprintf_r+0x14a0>
8000bce6:	fa cb f9 44 	sub	r11,sp,-1724
8000bcea:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000bcee:	c1 f8       	rjmp	8000bd2c <_vfprintf_r+0x14dc>
8000bcf0:	fa c8 f9 50 	sub	r8,sp,-1712
8000bcf4:	1a d8       	st.w	--sp,r8
8000bcf6:	fa c8 fa b8 	sub	r8,sp,-1352
8000bcfa:	0c 9b       	mov	r11,r6
8000bcfc:	1a d8       	st.w	--sp,r8
8000bcfe:	fa c8 fb b4 	sub	r8,sp,-1100
8000bd02:	04 9a       	mov	r10,r2
8000bd04:	1a d8       	st.w	--sp,r8
8000bd06:	08 9c       	mov	r12,r4
8000bd08:	fa c8 f9 40 	sub	r8,sp,-1728
8000bd0c:	fa c9 ff b4 	sub	r9,sp,-76
8000bd10:	fe b0 f4 08 	rcall	8000a520 <get_arg>
8000bd14:	2f dd       	sub	sp,-12
8000bd16:	78 0b       	ld.w	r11,r12[0x0]
8000bd18:	c2 48       	rjmp	8000bd60 <_vfprintf_r+0x1510>
8000bd1a:	ee ca ff ff 	sub	r10,r7,-1
8000bd1e:	10 37       	cp.w	r7,r8
8000bd20:	c0 94       	brge	8000bd32 <_vfprintf_r+0x14e2>
8000bd22:	fa c9 f9 44 	sub	r9,sp,-1724
8000bd26:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000bd2a:	14 97       	mov	r7,r10
8000bd2c:	ec fb fd 88 	ld.w	r11,r6[-632]
8000bd30:	c1 88       	rjmp	8000bd60 <_vfprintf_r+0x1510>
8000bd32:	41 09       	lddsp	r9,sp[0x40]
8000bd34:	59 f8       	cp.w	r8,31
8000bd36:	e0 89 00 11 	brgt	8000bd58 <_vfprintf_r+0x1508>
8000bd3a:	f2 cb ff fc 	sub	r11,r9,-4
8000bd3e:	51 0b       	stdsp	sp[0x40],r11
8000bd40:	fa c6 f9 44 	sub	r6,sp,-1724
8000bd44:	72 0b       	ld.w	r11,r9[0x0]
8000bd46:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000bd4a:	f3 4b fd 88 	st.w	r9[-632],r11
8000bd4e:	2f f8       	sub	r8,-1
8000bd50:	14 97       	mov	r7,r10
8000bd52:	fb 48 06 b4 	st.w	sp[1716],r8
8000bd56:	c0 58       	rjmp	8000bd60 <_vfprintf_r+0x1510>
8000bd58:	72 0b       	ld.w	r11,r9[0x0]
8000bd5a:	14 97       	mov	r7,r10
8000bd5c:	2f c9       	sub	r9,-4
8000bd5e:	51 09       	stdsp	sp[0x40],r9
8000bd60:	50 1b       	stdsp	sp[0x4],r11
8000bd62:	30 0e       	mov	lr,0
8000bd64:	50 0e       	stdsp	sp[0x0],lr
8000bd66:	40 08       	lddsp	r8,sp[0x0]
8000bd68:	40 1c       	lddsp	r12,sp[0x4]
8000bd6a:	18 48       	or	r8,r12
8000bd6c:	5f 19       	srne	r9
8000bd6e:	0a 98       	mov	r8,r5
8000bd70:	eb e9 00 09 	and	r9,r5,r9
8000bd74:	a1 b8       	sbr	r8,0x1
8000bd76:	58 09       	cp.w	r9,0
8000bd78:	c0 70       	breq	8000bd86 <_vfprintf_r+0x1536>
8000bd7a:	10 95       	mov	r5,r8
8000bd7c:	fb 60 06 b9 	st.b	sp[1721],r0
8000bd80:	33 08       	mov	r8,48
8000bd82:	fb 68 06 b8 	st.b	sp[1720],r8
8000bd86:	30 28       	mov	r8,2
8000bd88:	30 09       	mov	r9,0
8000bd8a:	fb 69 06 bb 	st.b	sp[1723],r9
8000bd8e:	0a 99       	mov	r9,r5
8000bd90:	a7 d9       	cbr	r9,0x7
8000bd92:	40 2b       	lddsp	r11,sp[0x8]
8000bd94:	40 16       	lddsp	r6,sp[0x4]
8000bd96:	58 0b       	cp.w	r11,0
8000bd98:	5f 1a       	srne	r10
8000bd9a:	f2 05 17 40 	movge	r5,r9
8000bd9e:	fa c2 f9 78 	sub	r2,sp,-1672
8000bda2:	40 09       	lddsp	r9,sp[0x0]
8000bda4:	0c 49       	or	r9,r6
8000bda6:	5f 19       	srne	r9
8000bda8:	f5 e9 10 09 	or	r9,r10,r9
8000bdac:	c5 c0       	breq	8000be64 <_vfprintf_r+0x1614>
8000bdae:	30 19       	mov	r9,1
8000bdb0:	f2 08 18 00 	cp.b	r8,r9
8000bdb4:	c0 60       	breq	8000bdc0 <_vfprintf_r+0x1570>
8000bdb6:	30 29       	mov	r9,2
8000bdb8:	f2 08 18 00 	cp.b	r8,r9
8000bdbc:	c0 41       	brne	8000bdc4 <_vfprintf_r+0x1574>
8000bdbe:	c3 c8       	rjmp	8000be36 <_vfprintf_r+0x15e6>
8000bdc0:	04 96       	mov	r6,r2
8000bdc2:	c3 08       	rjmp	8000be22 <_vfprintf_r+0x15d2>
8000bdc4:	04 96       	mov	r6,r2
8000bdc6:	fa e8 00 00 	ld.d	r8,sp[0]
8000bdca:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000bdce:	2d 0a       	sub	r10,-48
8000bdd0:	0c fa       	st.b	--r6,r10
8000bdd2:	f0 0b 16 03 	lsr	r11,r8,0x3
8000bdd6:	f2 0c 16 03 	lsr	r12,r9,0x3
8000bdda:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
8000bdde:	18 99       	mov	r9,r12
8000bde0:	16 98       	mov	r8,r11
8000bde2:	58 08       	cp.w	r8,0
8000bde4:	5c 29       	cpc	r9
8000bde6:	cf 21       	brne	8000bdca <_vfprintf_r+0x157a>
8000bde8:	fa e9 00 00 	st.d	sp[0],r8
8000bdec:	ed b5 00 00 	bld	r5,0x0
8000bdf0:	c4 51       	brne	8000be7a <_vfprintf_r+0x162a>
8000bdf2:	33 09       	mov	r9,48
8000bdf4:	f2 0a 18 00 	cp.b	r10,r9
8000bdf8:	c4 10       	breq	8000be7a <_vfprintf_r+0x162a>
8000bdfa:	0c f9       	st.b	--r6,r9
8000bdfc:	c3 f8       	rjmp	8000be7a <_vfprintf_r+0x162a>
8000bdfe:	fa ea 00 00 	ld.d	r10,sp[0]
8000be02:	30 a8       	mov	r8,10
8000be04:	30 09       	mov	r9,0
8000be06:	e0 a0 19 33 	rcall	8000f06c <__avr32_umod64>
8000be0a:	30 a8       	mov	r8,10
8000be0c:	2d 0a       	sub	r10,-48
8000be0e:	30 09       	mov	r9,0
8000be10:	ac 8a       	st.b	r6[0x0],r10
8000be12:	fa ea 00 00 	ld.d	r10,sp[0]
8000be16:	e0 a0 17 f9 	rcall	8000ee08 <__avr32_udiv64>
8000be1a:	16 99       	mov	r9,r11
8000be1c:	14 98       	mov	r8,r10
8000be1e:	fa e9 00 00 	st.d	sp[0],r8
8000be22:	20 16       	sub	r6,1
8000be24:	fa ea 00 00 	ld.d	r10,sp[0]
8000be28:	58 9a       	cp.w	r10,9
8000be2a:	5c 2b       	cpc	r11
8000be2c:	fe 9b ff e9 	brhi	8000bdfe <_vfprintf_r+0x15ae>
8000be30:	1b f8       	ld.ub	r8,sp[0x7]
8000be32:	2d 08       	sub	r8,-48
8000be34:	c2 08       	rjmp	8000be74 <_vfprintf_r+0x1624>
8000be36:	04 96       	mov	r6,r2
8000be38:	fa e8 00 00 	ld.d	r8,sp[0]
8000be3c:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
8000be40:	40 de       	lddsp	lr,sp[0x34]
8000be42:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000be46:	0c fa       	st.b	--r6,r10
8000be48:	f2 0b 16 04 	lsr	r11,r9,0x4
8000be4c:	f0 0a 16 04 	lsr	r10,r8,0x4
8000be50:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
8000be54:	16 99       	mov	r9,r11
8000be56:	14 98       	mov	r8,r10
8000be58:	58 08       	cp.w	r8,0
8000be5a:	5c 29       	cpc	r9
8000be5c:	cf 01       	brne	8000be3c <_vfprintf_r+0x15ec>
8000be5e:	fa e9 00 00 	st.d	sp[0],r8
8000be62:	c0 c8       	rjmp	8000be7a <_vfprintf_r+0x162a>
8000be64:	58 08       	cp.w	r8,0
8000be66:	c0 91       	brne	8000be78 <_vfprintf_r+0x1628>
8000be68:	ed b5 00 00 	bld	r5,0x0
8000be6c:	c0 61       	brne	8000be78 <_vfprintf_r+0x1628>
8000be6e:	fa c6 f9 79 	sub	r6,sp,-1671
8000be72:	33 08       	mov	r8,48
8000be74:	ac 88       	st.b	r6[0x0],r8
8000be76:	c0 28       	rjmp	8000be7a <_vfprintf_r+0x162a>
8000be78:	04 96       	mov	r6,r2
8000be7a:	0c 12       	sub	r2,r6
8000be7c:	c1 c8       	rjmp	8000beb4 <_vfprintf_r+0x1664>
8000be7e:	50 a7       	stdsp	sp[0x28],r7
8000be80:	50 80       	stdsp	sp[0x20],r0
8000be82:	40 93       	lddsp	r3,sp[0x24]
8000be84:	0c 97       	mov	r7,r6
8000be86:	10 90       	mov	r0,r8
8000be88:	04 94       	mov	r4,r2
8000be8a:	40 41       	lddsp	r1,sp[0x10]
8000be8c:	58 08       	cp.w	r8,0
8000be8e:	e0 80 04 4f 	breq	8000c72c <_vfprintf_r+0x1edc>
8000be92:	fb 68 06 60 	st.b	sp[1632],r8
8000be96:	30 0c       	mov	r12,0
8000be98:	30 08       	mov	r8,0
8000be9a:	30 12       	mov	r2,1
8000be9c:	fb 68 06 bb 	st.b	sp[1723],r8
8000bea0:	50 2c       	stdsp	sp[0x8],r12
8000bea2:	fa c6 f9 a0 	sub	r6,sp,-1632
8000bea6:	c0 78       	rjmp	8000beb4 <_vfprintf_r+0x1664>
8000bea8:	30 0b       	mov	r11,0
8000beaa:	50 2b       	stdsp	sp[0x8],r11
8000beac:	c0 48       	rjmp	8000beb4 <_vfprintf_r+0x1664>
8000beae:	40 22       	lddsp	r2,sp[0x8]
8000beb0:	30 0a       	mov	r10,0
8000beb2:	50 2a       	stdsp	sp[0x8],r10
8000beb4:	40 29       	lddsp	r9,sp[0x8]
8000beb6:	e4 09 0c 49 	max	r9,r2,r9
8000beba:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000bebe:	50 39       	stdsp	sp[0xc],r9
8000bec0:	0a 9e       	mov	lr,r5
8000bec2:	30 09       	mov	r9,0
8000bec4:	e2 1e 00 02 	andl	lr,0x2,COH
8000bec8:	f2 08 18 00 	cp.b	r8,r9
8000becc:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000bed0:	f7 b8 01 ff 	subne	r8,-1
8000bed4:	fb f8 1a 03 	st.wne	sp[0xc],r8
8000bed8:	0a 9b       	mov	r11,r5
8000beda:	58 0e       	cp.w	lr,0
8000bedc:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000bee0:	f7 bc 01 fe 	subne	r12,-2
8000bee4:	fb fc 1a 03 	st.wne	sp[0xc],r12
8000bee8:	e2 1b 00 84 	andl	r11,0x84,COH
8000beec:	50 fe       	stdsp	sp[0x3c],lr
8000beee:	50 9b       	stdsp	sp[0x24],r11
8000bef0:	c4 71       	brne	8000bf7e <_vfprintf_r+0x172e>
8000bef2:	40 8a       	lddsp	r10,sp[0x20]
8000bef4:	40 39       	lddsp	r9,sp[0xc]
8000bef6:	12 1a       	sub	r10,r9
8000bef8:	50 4a       	stdsp	sp[0x10],r10
8000befa:	58 0a       	cp.w	r10,0
8000befc:	e0 89 00 20 	brgt	8000bf3c <_vfprintf_r+0x16ec>
8000bf00:	c3 f8       	rjmp	8000bf7e <_vfprintf_r+0x172e>
8000bf02:	2f 09       	sub	r9,-16
8000bf04:	2f f8       	sub	r8,-1
8000bf06:	fe ce c3 ca 	sub	lr,pc,-15414
8000bf0a:	31 0c       	mov	r12,16
8000bf0c:	fb 49 06 90 	st.w	sp[1680],r9
8000bf10:	87 0e       	st.w	r3[0x0],lr
8000bf12:	87 1c       	st.w	r3[0x4],r12
8000bf14:	fb 48 06 8c 	st.w	sp[1676],r8
8000bf18:	58 78       	cp.w	r8,7
8000bf1a:	e0 89 00 04 	brgt	8000bf22 <_vfprintf_r+0x16d2>
8000bf1e:	2f 83       	sub	r3,-8
8000bf20:	c0 b8       	rjmp	8000bf36 <_vfprintf_r+0x16e6>
8000bf22:	fa ca f9 78 	sub	r10,sp,-1672
8000bf26:	02 9b       	mov	r11,r1
8000bf28:	08 9c       	mov	r12,r4
8000bf2a:	fe b0 f4 85 	rcall	8000a834 <__sprint_r>
8000bf2e:	e0 81 04 10 	brne	8000c74e <_vfprintf_r+0x1efe>
8000bf32:	fa c3 f9 e0 	sub	r3,sp,-1568
8000bf36:	40 4b       	lddsp	r11,sp[0x10]
8000bf38:	21 0b       	sub	r11,16
8000bf3a:	50 4b       	stdsp	sp[0x10],r11
8000bf3c:	fa f9 06 90 	ld.w	r9,sp[1680]
8000bf40:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000bf44:	fe ca c4 08 	sub	r10,pc,-15352
8000bf48:	40 4e       	lddsp	lr,sp[0x10]
8000bf4a:	59 0e       	cp.w	lr,16
8000bf4c:	fe 99 ff db 	brgt	8000bf02 <_vfprintf_r+0x16b2>
8000bf50:	1c 09       	add	r9,lr
8000bf52:	2f f8       	sub	r8,-1
8000bf54:	87 0a       	st.w	r3[0x0],r10
8000bf56:	fb 49 06 90 	st.w	sp[1680],r9
8000bf5a:	87 1e       	st.w	r3[0x4],lr
8000bf5c:	fb 48 06 8c 	st.w	sp[1676],r8
8000bf60:	58 78       	cp.w	r8,7
8000bf62:	e0 89 00 04 	brgt	8000bf6a <_vfprintf_r+0x171a>
8000bf66:	2f 83       	sub	r3,-8
8000bf68:	c0 b8       	rjmp	8000bf7e <_vfprintf_r+0x172e>
8000bf6a:	fa ca f9 78 	sub	r10,sp,-1672
8000bf6e:	02 9b       	mov	r11,r1
8000bf70:	08 9c       	mov	r12,r4
8000bf72:	fe b0 f4 61 	rcall	8000a834 <__sprint_r>
8000bf76:	e0 81 03 ec 	brne	8000c74e <_vfprintf_r+0x1efe>
8000bf7a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000bf7e:	30 09       	mov	r9,0
8000bf80:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000bf84:	f2 08 18 00 	cp.b	r8,r9
8000bf88:	c1 f0       	breq	8000bfc6 <_vfprintf_r+0x1776>
8000bf8a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000bf8e:	fa c9 f9 45 	sub	r9,sp,-1723
8000bf92:	2f f8       	sub	r8,-1
8000bf94:	87 09       	st.w	r3[0x0],r9
8000bf96:	fb 48 06 90 	st.w	sp[1680],r8
8000bf9a:	30 19       	mov	r9,1
8000bf9c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000bfa0:	87 19       	st.w	r3[0x4],r9
8000bfa2:	2f f8       	sub	r8,-1
8000bfa4:	fb 48 06 8c 	st.w	sp[1676],r8
8000bfa8:	58 78       	cp.w	r8,7
8000bfaa:	e0 89 00 04 	brgt	8000bfb2 <_vfprintf_r+0x1762>
8000bfae:	2f 83       	sub	r3,-8
8000bfb0:	c0 b8       	rjmp	8000bfc6 <_vfprintf_r+0x1776>
8000bfb2:	fa ca f9 78 	sub	r10,sp,-1672
8000bfb6:	02 9b       	mov	r11,r1
8000bfb8:	08 9c       	mov	r12,r4
8000bfba:	fe b0 f4 3d 	rcall	8000a834 <__sprint_r>
8000bfbe:	e0 81 03 c8 	brne	8000c74e <_vfprintf_r+0x1efe>
8000bfc2:	fa c3 f9 e0 	sub	r3,sp,-1568
8000bfc6:	40 fc       	lddsp	r12,sp[0x3c]
8000bfc8:	58 0c       	cp.w	r12,0
8000bfca:	c1 f0       	breq	8000c008 <_vfprintf_r+0x17b8>
8000bfcc:	fa f8 06 90 	ld.w	r8,sp[1680]
8000bfd0:	fa c9 f9 48 	sub	r9,sp,-1720
8000bfd4:	2f e8       	sub	r8,-2
8000bfd6:	87 09       	st.w	r3[0x0],r9
8000bfd8:	fb 48 06 90 	st.w	sp[1680],r8
8000bfdc:	30 29       	mov	r9,2
8000bfde:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000bfe2:	87 19       	st.w	r3[0x4],r9
8000bfe4:	2f f8       	sub	r8,-1
8000bfe6:	fb 48 06 8c 	st.w	sp[1676],r8
8000bfea:	58 78       	cp.w	r8,7
8000bfec:	e0 89 00 04 	brgt	8000bff4 <_vfprintf_r+0x17a4>
8000bff0:	2f 83       	sub	r3,-8
8000bff2:	c0 b8       	rjmp	8000c008 <_vfprintf_r+0x17b8>
8000bff4:	fa ca f9 78 	sub	r10,sp,-1672
8000bff8:	02 9b       	mov	r11,r1
8000bffa:	08 9c       	mov	r12,r4
8000bffc:	fe b0 f4 1c 	rcall	8000a834 <__sprint_r>
8000c000:	e0 81 03 a7 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c004:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c008:	40 9b       	lddsp	r11,sp[0x24]
8000c00a:	e0 4b 00 80 	cp.w	r11,128
8000c00e:	c4 71       	brne	8000c09c <_vfprintf_r+0x184c>
8000c010:	40 8a       	lddsp	r10,sp[0x20]
8000c012:	40 39       	lddsp	r9,sp[0xc]
8000c014:	12 1a       	sub	r10,r9
8000c016:	50 4a       	stdsp	sp[0x10],r10
8000c018:	58 0a       	cp.w	r10,0
8000c01a:	e0 89 00 20 	brgt	8000c05a <_vfprintf_r+0x180a>
8000c01e:	c3 f8       	rjmp	8000c09c <_vfprintf_r+0x184c>
8000c020:	2f 09       	sub	r9,-16
8000c022:	2f f8       	sub	r8,-1
8000c024:	fe ce c4 d8 	sub	lr,pc,-15144
8000c028:	31 0c       	mov	r12,16
8000c02a:	fb 49 06 90 	st.w	sp[1680],r9
8000c02e:	87 0e       	st.w	r3[0x0],lr
8000c030:	87 1c       	st.w	r3[0x4],r12
8000c032:	fb 48 06 8c 	st.w	sp[1676],r8
8000c036:	58 78       	cp.w	r8,7
8000c038:	e0 89 00 04 	brgt	8000c040 <_vfprintf_r+0x17f0>
8000c03c:	2f 83       	sub	r3,-8
8000c03e:	c0 b8       	rjmp	8000c054 <_vfprintf_r+0x1804>
8000c040:	fa ca f9 78 	sub	r10,sp,-1672
8000c044:	02 9b       	mov	r11,r1
8000c046:	08 9c       	mov	r12,r4
8000c048:	fe b0 f3 f6 	rcall	8000a834 <__sprint_r>
8000c04c:	e0 81 03 81 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c050:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c054:	40 4b       	lddsp	r11,sp[0x10]
8000c056:	21 0b       	sub	r11,16
8000c058:	50 4b       	stdsp	sp[0x10],r11
8000c05a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c05e:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c062:	fe ca c5 16 	sub	r10,pc,-15082
8000c066:	40 4e       	lddsp	lr,sp[0x10]
8000c068:	59 0e       	cp.w	lr,16
8000c06a:	fe 99 ff db 	brgt	8000c020 <_vfprintf_r+0x17d0>
8000c06e:	1c 09       	add	r9,lr
8000c070:	2f f8       	sub	r8,-1
8000c072:	87 0a       	st.w	r3[0x0],r10
8000c074:	fb 49 06 90 	st.w	sp[1680],r9
8000c078:	87 1e       	st.w	r3[0x4],lr
8000c07a:	fb 48 06 8c 	st.w	sp[1676],r8
8000c07e:	58 78       	cp.w	r8,7
8000c080:	e0 89 00 04 	brgt	8000c088 <_vfprintf_r+0x1838>
8000c084:	2f 83       	sub	r3,-8
8000c086:	c0 b8       	rjmp	8000c09c <_vfprintf_r+0x184c>
8000c088:	fa ca f9 78 	sub	r10,sp,-1672
8000c08c:	02 9b       	mov	r11,r1
8000c08e:	08 9c       	mov	r12,r4
8000c090:	fe b0 f3 d2 	rcall	8000a834 <__sprint_r>
8000c094:	e0 81 03 5d 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c098:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c09c:	40 2c       	lddsp	r12,sp[0x8]
8000c09e:	04 1c       	sub	r12,r2
8000c0a0:	50 2c       	stdsp	sp[0x8],r12
8000c0a2:	58 0c       	cp.w	r12,0
8000c0a4:	e0 89 00 20 	brgt	8000c0e4 <_vfprintf_r+0x1894>
8000c0a8:	c3 f8       	rjmp	8000c126 <_vfprintf_r+0x18d6>
8000c0aa:	2f 09       	sub	r9,-16
8000c0ac:	2f f8       	sub	r8,-1
8000c0ae:	fe cb c5 62 	sub	r11,pc,-15006
8000c0b2:	31 0a       	mov	r10,16
8000c0b4:	fb 49 06 90 	st.w	sp[1680],r9
8000c0b8:	87 0b       	st.w	r3[0x0],r11
8000c0ba:	87 1a       	st.w	r3[0x4],r10
8000c0bc:	fb 48 06 8c 	st.w	sp[1676],r8
8000c0c0:	58 78       	cp.w	r8,7
8000c0c2:	e0 89 00 04 	brgt	8000c0ca <_vfprintf_r+0x187a>
8000c0c6:	2f 83       	sub	r3,-8
8000c0c8:	c0 b8       	rjmp	8000c0de <_vfprintf_r+0x188e>
8000c0ca:	fa ca f9 78 	sub	r10,sp,-1672
8000c0ce:	02 9b       	mov	r11,r1
8000c0d0:	08 9c       	mov	r12,r4
8000c0d2:	fe b0 f3 b1 	rcall	8000a834 <__sprint_r>
8000c0d6:	e0 81 03 3c 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c0da:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c0de:	40 29       	lddsp	r9,sp[0x8]
8000c0e0:	21 09       	sub	r9,16
8000c0e2:	50 29       	stdsp	sp[0x8],r9
8000c0e4:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c0e8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c0ec:	fe ca c5 a0 	sub	r10,pc,-14944
8000c0f0:	40 2e       	lddsp	lr,sp[0x8]
8000c0f2:	59 0e       	cp.w	lr,16
8000c0f4:	fe 99 ff db 	brgt	8000c0aa <_vfprintf_r+0x185a>
8000c0f8:	1c 09       	add	r9,lr
8000c0fa:	2f f8       	sub	r8,-1
8000c0fc:	87 0a       	st.w	r3[0x0],r10
8000c0fe:	fb 49 06 90 	st.w	sp[1680],r9
8000c102:	87 1e       	st.w	r3[0x4],lr
8000c104:	fb 48 06 8c 	st.w	sp[1676],r8
8000c108:	58 78       	cp.w	r8,7
8000c10a:	e0 89 00 04 	brgt	8000c112 <_vfprintf_r+0x18c2>
8000c10e:	2f 83       	sub	r3,-8
8000c110:	c0 b8       	rjmp	8000c126 <_vfprintf_r+0x18d6>
8000c112:	fa ca f9 78 	sub	r10,sp,-1672
8000c116:	02 9b       	mov	r11,r1
8000c118:	08 9c       	mov	r12,r4
8000c11a:	fe b0 f3 8d 	rcall	8000a834 <__sprint_r>
8000c11e:	e0 81 03 18 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c122:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c126:	ed b5 00 08 	bld	r5,0x8
8000c12a:	c0 b0       	breq	8000c140 <_vfprintf_r+0x18f0>
8000c12c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c130:	87 12       	st.w	r3[0x4],r2
8000c132:	87 06       	st.w	r3[0x0],r6
8000c134:	f0 02 00 02 	add	r2,r8,r2
8000c138:	fb 42 06 90 	st.w	sp[1680],r2
8000c13c:	e0 8f 01 d4 	bral	8000c4e4 <_vfprintf_r+0x1c94>
8000c140:	e0 40 00 65 	cp.w	r0,101
8000c144:	e0 8a 01 d6 	brle	8000c4f0 <_vfprintf_r+0x1ca0>
8000c148:	30 08       	mov	r8,0
8000c14a:	30 09       	mov	r9,0
8000c14c:	40 5b       	lddsp	r11,sp[0x14]
8000c14e:	40 7a       	lddsp	r10,sp[0x1c]
8000c150:	e0 a0 14 55 	rcall	8000e9fa <__avr32_f64_cmp_eq>
8000c154:	c7 90       	breq	8000c246 <_vfprintf_r+0x19f6>
8000c156:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c15a:	fe c9 c6 22 	sub	r9,pc,-14814
8000c15e:	2f f8       	sub	r8,-1
8000c160:	87 09       	st.w	r3[0x0],r9
8000c162:	fb 48 06 90 	st.w	sp[1680],r8
8000c166:	30 19       	mov	r9,1
8000c168:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c16c:	87 19       	st.w	r3[0x4],r9
8000c16e:	2f f8       	sub	r8,-1
8000c170:	fb 48 06 8c 	st.w	sp[1676],r8
8000c174:	58 78       	cp.w	r8,7
8000c176:	e0 89 00 05 	brgt	8000c180 <_vfprintf_r+0x1930>
8000c17a:	2f 83       	sub	r3,-8
8000c17c:	c0 c8       	rjmp	8000c194 <_vfprintf_r+0x1944>
8000c17e:	d7 03       	nop
8000c180:	fa ca f9 78 	sub	r10,sp,-1672
8000c184:	02 9b       	mov	r11,r1
8000c186:	08 9c       	mov	r12,r4
8000c188:	fe b0 f3 56 	rcall	8000a834 <__sprint_r>
8000c18c:	e0 81 02 e1 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c190:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c194:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000c198:	40 6c       	lddsp	r12,sp[0x18]
8000c19a:	18 38       	cp.w	r8,r12
8000c19c:	c0 55       	brlt	8000c1a6 <_vfprintf_r+0x1956>
8000c19e:	ed b5 00 00 	bld	r5,0x0
8000c1a2:	e0 81 02 6b 	brne	8000c678 <_vfprintf_r+0x1e28>
8000c1a6:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c1aa:	2f f8       	sub	r8,-1
8000c1ac:	40 cb       	lddsp	r11,sp[0x30]
8000c1ae:	fb 48 06 90 	st.w	sp[1680],r8
8000c1b2:	30 19       	mov	r9,1
8000c1b4:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c1b8:	87 0b       	st.w	r3[0x0],r11
8000c1ba:	2f f8       	sub	r8,-1
8000c1bc:	87 19       	st.w	r3[0x4],r9
8000c1be:	fb 48 06 8c 	st.w	sp[1676],r8
8000c1c2:	58 78       	cp.w	r8,7
8000c1c4:	e0 89 00 04 	brgt	8000c1cc <_vfprintf_r+0x197c>
8000c1c8:	2f 83       	sub	r3,-8
8000c1ca:	c0 b8       	rjmp	8000c1e0 <_vfprintf_r+0x1990>
8000c1cc:	fa ca f9 78 	sub	r10,sp,-1672
8000c1d0:	02 9b       	mov	r11,r1
8000c1d2:	08 9c       	mov	r12,r4
8000c1d4:	fe b0 f3 30 	rcall	8000a834 <__sprint_r>
8000c1d8:	e0 81 02 bb 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c1dc:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c1e0:	40 66       	lddsp	r6,sp[0x18]
8000c1e2:	20 16       	sub	r6,1
8000c1e4:	58 06       	cp.w	r6,0
8000c1e6:	e0 89 00 1d 	brgt	8000c220 <_vfprintf_r+0x19d0>
8000c1ea:	e0 8f 02 47 	bral	8000c678 <_vfprintf_r+0x1e28>
8000c1ee:	2f 09       	sub	r9,-16
8000c1f0:	2f f8       	sub	r8,-1
8000c1f2:	fb 49 06 90 	st.w	sp[1680],r9
8000c1f6:	87 02       	st.w	r3[0x0],r2
8000c1f8:	87 10       	st.w	r3[0x4],r0
8000c1fa:	fb 48 06 8c 	st.w	sp[1676],r8
8000c1fe:	58 78       	cp.w	r8,7
8000c200:	e0 89 00 04 	brgt	8000c208 <_vfprintf_r+0x19b8>
8000c204:	2f 83       	sub	r3,-8
8000c206:	c0 b8       	rjmp	8000c21c <_vfprintf_r+0x19cc>
8000c208:	fa ca f9 78 	sub	r10,sp,-1672
8000c20c:	02 9b       	mov	r11,r1
8000c20e:	08 9c       	mov	r12,r4
8000c210:	fe b0 f3 12 	rcall	8000a834 <__sprint_r>
8000c214:	e0 81 02 9d 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c218:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c21c:	21 06       	sub	r6,16
8000c21e:	c0 48       	rjmp	8000c226 <_vfprintf_r+0x19d6>
8000c220:	fe c2 c6 d4 	sub	r2,pc,-14636
8000c224:	31 00       	mov	r0,16
8000c226:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c22a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c22e:	fe ca c6 e2 	sub	r10,pc,-14622
8000c232:	59 06       	cp.w	r6,16
8000c234:	fe 99 ff dd 	brgt	8000c1ee <_vfprintf_r+0x199e>
8000c238:	0c 09       	add	r9,r6
8000c23a:	87 0a       	st.w	r3[0x0],r10
8000c23c:	fb 49 06 90 	st.w	sp[1680],r9
8000c240:	2f f8       	sub	r8,-1
8000c242:	87 16       	st.w	r3[0x4],r6
8000c244:	c5 39       	rjmp	8000c4ea <_vfprintf_r+0x1c9a>
8000c246:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000c24a:	58 0a       	cp.w	r10,0
8000c24c:	e0 89 00 92 	brgt	8000c370 <_vfprintf_r+0x1b20>
8000c250:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c254:	fe c9 c7 1c 	sub	r9,pc,-14564
8000c258:	2f f8       	sub	r8,-1
8000c25a:	87 09       	st.w	r3[0x0],r9
8000c25c:	fb 48 06 90 	st.w	sp[1680],r8
8000c260:	30 19       	mov	r9,1
8000c262:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c266:	87 19       	st.w	r3[0x4],r9
8000c268:	2f f8       	sub	r8,-1
8000c26a:	fb 48 06 8c 	st.w	sp[1676],r8
8000c26e:	58 78       	cp.w	r8,7
8000c270:	e0 89 00 04 	brgt	8000c278 <_vfprintf_r+0x1a28>
8000c274:	2f 83       	sub	r3,-8
8000c276:	c0 b8       	rjmp	8000c28c <_vfprintf_r+0x1a3c>
8000c278:	fa ca f9 78 	sub	r10,sp,-1672
8000c27c:	02 9b       	mov	r11,r1
8000c27e:	08 9c       	mov	r12,r4
8000c280:	fe b0 f2 da 	rcall	8000a834 <__sprint_r>
8000c284:	e0 81 02 65 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c288:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c28c:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000c290:	58 08       	cp.w	r8,0
8000c292:	c0 81       	brne	8000c2a2 <_vfprintf_r+0x1a52>
8000c294:	40 6a       	lddsp	r10,sp[0x18]
8000c296:	58 0a       	cp.w	r10,0
8000c298:	c0 51       	brne	8000c2a2 <_vfprintf_r+0x1a52>
8000c29a:	ed b5 00 00 	bld	r5,0x0
8000c29e:	e0 81 01 ed 	brne	8000c678 <_vfprintf_r+0x1e28>
8000c2a2:	40 c9       	lddsp	r9,sp[0x30]
8000c2a4:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c2a8:	2f f8       	sub	r8,-1
8000c2aa:	87 09       	st.w	r3[0x0],r9
8000c2ac:	fb 48 06 90 	st.w	sp[1680],r8
8000c2b0:	30 19       	mov	r9,1
8000c2b2:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c2b6:	87 19       	st.w	r3[0x4],r9
8000c2b8:	2f f8       	sub	r8,-1
8000c2ba:	fb 48 06 8c 	st.w	sp[1676],r8
8000c2be:	58 78       	cp.w	r8,7
8000c2c0:	e0 89 00 04 	brgt	8000c2c8 <_vfprintf_r+0x1a78>
8000c2c4:	2f 83       	sub	r3,-8
8000c2c6:	c0 b8       	rjmp	8000c2dc <_vfprintf_r+0x1a8c>
8000c2c8:	fa ca f9 78 	sub	r10,sp,-1672
8000c2cc:	02 9b       	mov	r11,r1
8000c2ce:	08 9c       	mov	r12,r4
8000c2d0:	fe b0 f2 b2 	rcall	8000a834 <__sprint_r>
8000c2d4:	e0 81 02 3d 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c2d8:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c2dc:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000c2e0:	5c 32       	neg	r2
8000c2e2:	58 02       	cp.w	r2,0
8000c2e4:	e0 89 00 1d 	brgt	8000c31e <_vfprintf_r+0x1ace>
8000c2e8:	c3 d8       	rjmp	8000c362 <_vfprintf_r+0x1b12>
8000c2ea:	2f 09       	sub	r9,-16
8000c2ec:	2f f8       	sub	r8,-1
8000c2ee:	31 0e       	mov	lr,16
8000c2f0:	fb 49 06 90 	st.w	sp[1680],r9
8000c2f4:	87 00       	st.w	r3[0x0],r0
8000c2f6:	87 1e       	st.w	r3[0x4],lr
8000c2f8:	fb 48 06 8c 	st.w	sp[1676],r8
8000c2fc:	58 78       	cp.w	r8,7
8000c2fe:	e0 89 00 04 	brgt	8000c306 <_vfprintf_r+0x1ab6>
8000c302:	2f 83       	sub	r3,-8
8000c304:	c0 b8       	rjmp	8000c31a <_vfprintf_r+0x1aca>
8000c306:	fa ca f9 78 	sub	r10,sp,-1672
8000c30a:	02 9b       	mov	r11,r1
8000c30c:	08 9c       	mov	r12,r4
8000c30e:	fe b0 f2 93 	rcall	8000a834 <__sprint_r>
8000c312:	e0 81 02 1e 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c316:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c31a:	21 02       	sub	r2,16
8000c31c:	c0 38       	rjmp	8000c322 <_vfprintf_r+0x1ad2>
8000c31e:	fe c0 c7 d2 	sub	r0,pc,-14382
8000c322:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c326:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c32a:	fe ca c7 de 	sub	r10,pc,-14370
8000c32e:	59 02       	cp.w	r2,16
8000c330:	fe 99 ff dd 	brgt	8000c2ea <_vfprintf_r+0x1a9a>
8000c334:	04 09       	add	r9,r2
8000c336:	2f f8       	sub	r8,-1
8000c338:	87 0a       	st.w	r3[0x0],r10
8000c33a:	fb 49 06 90 	st.w	sp[1680],r9
8000c33e:	87 12       	st.w	r3[0x4],r2
8000c340:	fb 48 06 8c 	st.w	sp[1676],r8
8000c344:	58 78       	cp.w	r8,7
8000c346:	e0 89 00 04 	brgt	8000c34e <_vfprintf_r+0x1afe>
8000c34a:	2f 83       	sub	r3,-8
8000c34c:	c0 b8       	rjmp	8000c362 <_vfprintf_r+0x1b12>
8000c34e:	fa ca f9 78 	sub	r10,sp,-1672
8000c352:	02 9b       	mov	r11,r1
8000c354:	08 9c       	mov	r12,r4
8000c356:	fe b0 f2 6f 	rcall	8000a834 <__sprint_r>
8000c35a:	e0 81 01 fa 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c35e:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c362:	40 6c       	lddsp	r12,sp[0x18]
8000c364:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c368:	87 06       	st.w	r3[0x0],r6
8000c36a:	87 1c       	st.w	r3[0x4],r12
8000c36c:	18 08       	add	r8,r12
8000c36e:	cb 98       	rjmp	8000c4e0 <_vfprintf_r+0x1c90>
8000c370:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c374:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c378:	40 6b       	lddsp	r11,sp[0x18]
8000c37a:	16 3a       	cp.w	r10,r11
8000c37c:	c6 f5       	brlt	8000c45a <_vfprintf_r+0x1c0a>
8000c37e:	16 09       	add	r9,r11
8000c380:	2f f8       	sub	r8,-1
8000c382:	87 06       	st.w	r3[0x0],r6
8000c384:	fb 49 06 90 	st.w	sp[1680],r9
8000c388:	87 1b       	st.w	r3[0x4],r11
8000c38a:	fb 48 06 8c 	st.w	sp[1676],r8
8000c38e:	58 78       	cp.w	r8,7
8000c390:	e0 89 00 04 	brgt	8000c398 <_vfprintf_r+0x1b48>
8000c394:	2f 83       	sub	r3,-8
8000c396:	c0 b8       	rjmp	8000c3ac <_vfprintf_r+0x1b5c>
8000c398:	fa ca f9 78 	sub	r10,sp,-1672
8000c39c:	02 9b       	mov	r11,r1
8000c39e:	08 9c       	mov	r12,r4
8000c3a0:	fe b0 f2 4a 	rcall	8000a834 <__sprint_r>
8000c3a4:	e0 81 01 d5 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c3a8:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c3ac:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000c3b0:	40 6a       	lddsp	r10,sp[0x18]
8000c3b2:	14 16       	sub	r6,r10
8000c3b4:	58 06       	cp.w	r6,0
8000c3b6:	e0 89 00 1c 	brgt	8000c3ee <_vfprintf_r+0x1b9e>
8000c3ba:	c3 d8       	rjmp	8000c434 <_vfprintf_r+0x1be4>
8000c3bc:	2f 09       	sub	r9,-16
8000c3be:	2f f8       	sub	r8,-1
8000c3c0:	fb 49 06 90 	st.w	sp[1680],r9
8000c3c4:	87 02       	st.w	r3[0x0],r2
8000c3c6:	87 10       	st.w	r3[0x4],r0
8000c3c8:	fb 48 06 8c 	st.w	sp[1676],r8
8000c3cc:	58 78       	cp.w	r8,7
8000c3ce:	e0 89 00 04 	brgt	8000c3d6 <_vfprintf_r+0x1b86>
8000c3d2:	2f 83       	sub	r3,-8
8000c3d4:	c0 b8       	rjmp	8000c3ea <_vfprintf_r+0x1b9a>
8000c3d6:	fa ca f9 78 	sub	r10,sp,-1672
8000c3da:	02 9b       	mov	r11,r1
8000c3dc:	08 9c       	mov	r12,r4
8000c3de:	fe b0 f2 2b 	rcall	8000a834 <__sprint_r>
8000c3e2:	e0 81 01 b6 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c3e6:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c3ea:	21 06       	sub	r6,16
8000c3ec:	c0 48       	rjmp	8000c3f4 <_vfprintf_r+0x1ba4>
8000c3ee:	fe c2 c8 a2 	sub	r2,pc,-14174
8000c3f2:	31 00       	mov	r0,16
8000c3f4:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c3f8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c3fc:	fe ca c8 b0 	sub	r10,pc,-14160
8000c400:	59 06       	cp.w	r6,16
8000c402:	fe 99 ff dd 	brgt	8000c3bc <_vfprintf_r+0x1b6c>
8000c406:	0c 09       	add	r9,r6
8000c408:	2f f8       	sub	r8,-1
8000c40a:	87 0a       	st.w	r3[0x0],r10
8000c40c:	fb 49 06 90 	st.w	sp[1680],r9
8000c410:	87 16       	st.w	r3[0x4],r6
8000c412:	fb 48 06 8c 	st.w	sp[1676],r8
8000c416:	58 78       	cp.w	r8,7
8000c418:	e0 89 00 04 	brgt	8000c420 <_vfprintf_r+0x1bd0>
8000c41c:	2f 83       	sub	r3,-8
8000c41e:	c0 b8       	rjmp	8000c434 <_vfprintf_r+0x1be4>
8000c420:	fa ca f9 78 	sub	r10,sp,-1672
8000c424:	02 9b       	mov	r11,r1
8000c426:	08 9c       	mov	r12,r4
8000c428:	fe b0 f2 06 	rcall	8000a834 <__sprint_r>
8000c42c:	e0 81 01 91 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c430:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c434:	ed b5 00 00 	bld	r5,0x0
8000c438:	e0 81 01 20 	brne	8000c678 <_vfprintf_r+0x1e28>
8000c43c:	40 c9       	lddsp	r9,sp[0x30]
8000c43e:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c442:	2f f8       	sub	r8,-1
8000c444:	87 09       	st.w	r3[0x0],r9
8000c446:	fb 48 06 90 	st.w	sp[1680],r8
8000c44a:	30 19       	mov	r9,1
8000c44c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c450:	87 19       	st.w	r3[0x4],r9
8000c452:	2f f8       	sub	r8,-1
8000c454:	fb 48 06 8c 	st.w	sp[1676],r8
8000c458:	c0 29       	rjmp	8000c65c <_vfprintf_r+0x1e0c>
8000c45a:	14 09       	add	r9,r10
8000c45c:	2f f8       	sub	r8,-1
8000c45e:	fb 49 06 90 	st.w	sp[1680],r9
8000c462:	87 06       	st.w	r3[0x0],r6
8000c464:	87 1a       	st.w	r3[0x4],r10
8000c466:	fb 48 06 8c 	st.w	sp[1676],r8
8000c46a:	58 78       	cp.w	r8,7
8000c46c:	e0 89 00 04 	brgt	8000c474 <_vfprintf_r+0x1c24>
8000c470:	2f 83       	sub	r3,-8
8000c472:	c0 b8       	rjmp	8000c488 <_vfprintf_r+0x1c38>
8000c474:	fa ca f9 78 	sub	r10,sp,-1672
8000c478:	02 9b       	mov	r11,r1
8000c47a:	08 9c       	mov	r12,r4
8000c47c:	fe b0 f1 dc 	rcall	8000a834 <__sprint_r>
8000c480:	e0 81 01 67 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c484:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c488:	40 c8       	lddsp	r8,sp[0x30]
8000c48a:	87 08       	st.w	r3[0x0],r8
8000c48c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c490:	2f f8       	sub	r8,-1
8000c492:	30 19       	mov	r9,1
8000c494:	fb 48 06 90 	st.w	sp[1680],r8
8000c498:	87 19       	st.w	r3[0x4],r9
8000c49a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c49e:	2f f8       	sub	r8,-1
8000c4a0:	fb 48 06 8c 	st.w	sp[1676],r8
8000c4a4:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000c4a8:	58 78       	cp.w	r8,7
8000c4aa:	e0 89 00 04 	brgt	8000c4b2 <_vfprintf_r+0x1c62>
8000c4ae:	2f 83       	sub	r3,-8
8000c4b0:	c0 b8       	rjmp	8000c4c6 <_vfprintf_r+0x1c76>
8000c4b2:	fa ca f9 78 	sub	r10,sp,-1672
8000c4b6:	02 9b       	mov	r11,r1
8000c4b8:	08 9c       	mov	r12,r4
8000c4ba:	fe b0 f1 bd 	rcall	8000a834 <__sprint_r>
8000c4be:	e0 81 01 48 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c4c2:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c4c6:	04 06       	add	r6,r2
8000c4c8:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000c4cc:	87 06       	st.w	r3[0x0],r6
8000c4ce:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c4d2:	40 66       	lddsp	r6,sp[0x18]
8000c4d4:	40 6e       	lddsp	lr,sp[0x18]
8000c4d6:	10 16       	sub	r6,r8
8000c4d8:	f2 08 01 08 	sub	r8,r9,r8
8000c4dc:	87 16       	st.w	r3[0x4],r6
8000c4de:	1c 08       	add	r8,lr
8000c4e0:	fb 48 06 90 	st.w	sp[1680],r8
8000c4e4:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c4e8:	2f f8       	sub	r8,-1
8000c4ea:	fb 48 06 8c 	st.w	sp[1676],r8
8000c4ee:	cb 78       	rjmp	8000c65c <_vfprintf_r+0x1e0c>
8000c4f0:	40 6c       	lddsp	r12,sp[0x18]
8000c4f2:	58 1c       	cp.w	r12,1
8000c4f4:	e0 89 00 06 	brgt	8000c500 <_vfprintf_r+0x1cb0>
8000c4f8:	ed b5 00 00 	bld	r5,0x0
8000c4fc:	e0 81 00 85 	brne	8000c606 <_vfprintf_r+0x1db6>
8000c500:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c504:	2f f8       	sub	r8,-1
8000c506:	30 19       	mov	r9,1
8000c508:	fb 48 06 90 	st.w	sp[1680],r8
8000c50c:	87 06       	st.w	r3[0x0],r6
8000c50e:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c512:	87 19       	st.w	r3[0x4],r9
8000c514:	2f f8       	sub	r8,-1
8000c516:	fb 48 06 8c 	st.w	sp[1676],r8
8000c51a:	58 78       	cp.w	r8,7
8000c51c:	e0 89 00 04 	brgt	8000c524 <_vfprintf_r+0x1cd4>
8000c520:	2f 83       	sub	r3,-8
8000c522:	c0 b8       	rjmp	8000c538 <_vfprintf_r+0x1ce8>
8000c524:	fa ca f9 78 	sub	r10,sp,-1672
8000c528:	02 9b       	mov	r11,r1
8000c52a:	08 9c       	mov	r12,r4
8000c52c:	fe b0 f1 84 	rcall	8000a834 <__sprint_r>
8000c530:	e0 81 01 0f 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c534:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c538:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c53c:	2f f8       	sub	r8,-1
8000c53e:	40 cb       	lddsp	r11,sp[0x30]
8000c540:	fb 48 06 90 	st.w	sp[1680],r8
8000c544:	30 19       	mov	r9,1
8000c546:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c54a:	87 0b       	st.w	r3[0x0],r11
8000c54c:	2f f8       	sub	r8,-1
8000c54e:	87 19       	st.w	r3[0x4],r9
8000c550:	fb 48 06 8c 	st.w	sp[1676],r8
8000c554:	58 78       	cp.w	r8,7
8000c556:	e0 89 00 05 	brgt	8000c560 <_vfprintf_r+0x1d10>
8000c55a:	2f 83       	sub	r3,-8
8000c55c:	c0 c8       	rjmp	8000c574 <_vfprintf_r+0x1d24>
8000c55e:	d7 03       	nop
8000c560:	fa ca f9 78 	sub	r10,sp,-1672
8000c564:	02 9b       	mov	r11,r1
8000c566:	08 9c       	mov	r12,r4
8000c568:	fe b0 f1 66 	rcall	8000a834 <__sprint_r>
8000c56c:	e0 81 00 f1 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c570:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c574:	30 08       	mov	r8,0
8000c576:	30 09       	mov	r9,0
8000c578:	40 5b       	lddsp	r11,sp[0x14]
8000c57a:	40 7a       	lddsp	r10,sp[0x1c]
8000c57c:	e0 a0 12 3f 	rcall	8000e9fa <__avr32_f64_cmp_eq>
8000c580:	40 68       	lddsp	r8,sp[0x18]
8000c582:	20 18       	sub	r8,1
8000c584:	58 0c       	cp.w	r12,0
8000c586:	c0 d1       	brne	8000c5a0 <_vfprintf_r+0x1d50>
8000c588:	2f f6       	sub	r6,-1
8000c58a:	87 18       	st.w	r3[0x4],r8
8000c58c:	87 06       	st.w	r3[0x0],r6
8000c58e:	fa f6 06 90 	ld.w	r6,sp[1680]
8000c592:	10 06       	add	r6,r8
8000c594:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c598:	fb 46 06 90 	st.w	sp[1680],r6
8000c59c:	2f f8       	sub	r8,-1
8000c59e:	c3 18       	rjmp	8000c600 <_vfprintf_r+0x1db0>
8000c5a0:	10 96       	mov	r6,r8
8000c5a2:	58 08       	cp.w	r8,0
8000c5a4:	e0 89 00 1c 	brgt	8000c5dc <_vfprintf_r+0x1d8c>
8000c5a8:	c4 b8       	rjmp	8000c63e <_vfprintf_r+0x1dee>
8000c5aa:	2f 09       	sub	r9,-16
8000c5ac:	2f f8       	sub	r8,-1
8000c5ae:	fb 49 06 90 	st.w	sp[1680],r9
8000c5b2:	87 02       	st.w	r3[0x0],r2
8000c5b4:	87 10       	st.w	r3[0x4],r0
8000c5b6:	fb 48 06 8c 	st.w	sp[1676],r8
8000c5ba:	58 78       	cp.w	r8,7
8000c5bc:	e0 89 00 04 	brgt	8000c5c4 <_vfprintf_r+0x1d74>
8000c5c0:	2f 83       	sub	r3,-8
8000c5c2:	c0 b8       	rjmp	8000c5d8 <_vfprintf_r+0x1d88>
8000c5c4:	fa ca f9 78 	sub	r10,sp,-1672
8000c5c8:	02 9b       	mov	r11,r1
8000c5ca:	08 9c       	mov	r12,r4
8000c5cc:	fe b0 f1 34 	rcall	8000a834 <__sprint_r>
8000c5d0:	e0 81 00 bf 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c5d4:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c5d8:	21 06       	sub	r6,16
8000c5da:	c0 48       	rjmp	8000c5e2 <_vfprintf_r+0x1d92>
8000c5dc:	fe c2 ca 90 	sub	r2,pc,-13680
8000c5e0:	31 00       	mov	r0,16
8000c5e2:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c5e6:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c5ea:	fe ca ca 9e 	sub	r10,pc,-13666
8000c5ee:	59 06       	cp.w	r6,16
8000c5f0:	fe 99 ff dd 	brgt	8000c5aa <_vfprintf_r+0x1d5a>
8000c5f4:	0c 09       	add	r9,r6
8000c5f6:	87 0a       	st.w	r3[0x0],r10
8000c5f8:	fb 49 06 90 	st.w	sp[1680],r9
8000c5fc:	2f f8       	sub	r8,-1
8000c5fe:	87 16       	st.w	r3[0x4],r6
8000c600:	fb 48 06 8c 	st.w	sp[1676],r8
8000c604:	c0 e8       	rjmp	8000c620 <_vfprintf_r+0x1dd0>
8000c606:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c60a:	2f f8       	sub	r8,-1
8000c60c:	30 19       	mov	r9,1
8000c60e:	fb 48 06 90 	st.w	sp[1680],r8
8000c612:	87 06       	st.w	r3[0x0],r6
8000c614:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c618:	87 19       	st.w	r3[0x4],r9
8000c61a:	2f f8       	sub	r8,-1
8000c61c:	fb 48 06 8c 	st.w	sp[1676],r8
8000c620:	58 78       	cp.w	r8,7
8000c622:	e0 89 00 04 	brgt	8000c62a <_vfprintf_r+0x1dda>
8000c626:	2f 83       	sub	r3,-8
8000c628:	c0 b8       	rjmp	8000c63e <_vfprintf_r+0x1dee>
8000c62a:	fa ca f9 78 	sub	r10,sp,-1672
8000c62e:	02 9b       	mov	r11,r1
8000c630:	08 9c       	mov	r12,r4
8000c632:	fe b0 f1 01 	rcall	8000a834 <__sprint_r>
8000c636:	e0 81 00 8c 	brne	8000c74e <_vfprintf_r+0x1efe>
8000c63a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c63e:	40 ea       	lddsp	r10,sp[0x38]
8000c640:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c644:	14 08       	add	r8,r10
8000c646:	fa c9 f9 64 	sub	r9,sp,-1692
8000c64a:	fb 48 06 90 	st.w	sp[1680],r8
8000c64e:	87 1a       	st.w	r3[0x4],r10
8000c650:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c654:	87 09       	st.w	r3[0x0],r9
8000c656:	2f f8       	sub	r8,-1
8000c658:	fb 48 06 8c 	st.w	sp[1676],r8
8000c65c:	58 78       	cp.w	r8,7
8000c65e:	e0 89 00 04 	brgt	8000c666 <_vfprintf_r+0x1e16>
8000c662:	2f 83       	sub	r3,-8
8000c664:	c0 a8       	rjmp	8000c678 <_vfprintf_r+0x1e28>
8000c666:	fa ca f9 78 	sub	r10,sp,-1672
8000c66a:	02 9b       	mov	r11,r1
8000c66c:	08 9c       	mov	r12,r4
8000c66e:	fe b0 f0 e3 	rcall	8000a834 <__sprint_r>
8000c672:	c6 e1       	brne	8000c74e <_vfprintf_r+0x1efe>
8000c674:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c678:	e2 15 00 04 	andl	r5,0x4,COH
8000c67c:	c3 f0       	breq	8000c6fa <_vfprintf_r+0x1eaa>
8000c67e:	40 86       	lddsp	r6,sp[0x20]
8000c680:	40 39       	lddsp	r9,sp[0xc]
8000c682:	12 16       	sub	r6,r9
8000c684:	58 06       	cp.w	r6,0
8000c686:	e0 89 00 1a 	brgt	8000c6ba <_vfprintf_r+0x1e6a>
8000c68a:	c3 88       	rjmp	8000c6fa <_vfprintf_r+0x1eaa>
8000c68c:	2f 09       	sub	r9,-16
8000c68e:	2f f8       	sub	r8,-1
8000c690:	fb 49 06 90 	st.w	sp[1680],r9
8000c694:	87 05       	st.w	r3[0x0],r5
8000c696:	87 12       	st.w	r3[0x4],r2
8000c698:	fb 48 06 8c 	st.w	sp[1676],r8
8000c69c:	58 78       	cp.w	r8,7
8000c69e:	e0 89 00 04 	brgt	8000c6a6 <_vfprintf_r+0x1e56>
8000c6a2:	2f 83       	sub	r3,-8
8000c6a4:	c0 98       	rjmp	8000c6b6 <_vfprintf_r+0x1e66>
8000c6a6:	00 9a       	mov	r10,r0
8000c6a8:	02 9b       	mov	r11,r1
8000c6aa:	08 9c       	mov	r12,r4
8000c6ac:	fe b0 f0 c4 	rcall	8000a834 <__sprint_r>
8000c6b0:	c4 f1       	brne	8000c74e <_vfprintf_r+0x1efe>
8000c6b2:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c6b6:	21 06       	sub	r6,16
8000c6b8:	c0 68       	rjmp	8000c6c4 <_vfprintf_r+0x1e74>
8000c6ba:	fe c5 cb 7e 	sub	r5,pc,-13442
8000c6be:	31 02       	mov	r2,16
8000c6c0:	fa c0 f9 78 	sub	r0,sp,-1672
8000c6c4:	fa f9 06 90 	ld.w	r9,sp[1680]
8000c6c8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000c6cc:	fe ca cb 90 	sub	r10,pc,-13424
8000c6d0:	59 06       	cp.w	r6,16
8000c6d2:	fe 99 ff dd 	brgt	8000c68c <_vfprintf_r+0x1e3c>
8000c6d6:	0c 09       	add	r9,r6
8000c6d8:	2f f8       	sub	r8,-1
8000c6da:	87 0a       	st.w	r3[0x0],r10
8000c6dc:	87 16       	st.w	r3[0x4],r6
8000c6de:	fb 49 06 90 	st.w	sp[1680],r9
8000c6e2:	fb 48 06 8c 	st.w	sp[1676],r8
8000c6e6:	58 78       	cp.w	r8,7
8000c6e8:	e0 8a 00 09 	brle	8000c6fa <_vfprintf_r+0x1eaa>
8000c6ec:	fa ca f9 78 	sub	r10,sp,-1672
8000c6f0:	02 9b       	mov	r11,r1
8000c6f2:	08 9c       	mov	r12,r4
8000c6f4:	fe b0 f0 a0 	rcall	8000a834 <__sprint_r>
8000c6f8:	c2 b1       	brne	8000c74e <_vfprintf_r+0x1efe>
8000c6fa:	40 bc       	lddsp	r12,sp[0x2c]
8000c6fc:	40 36       	lddsp	r6,sp[0xc]
8000c6fe:	40 8e       	lddsp	lr,sp[0x20]
8000c700:	ec 0e 0c 48 	max	r8,r6,lr
8000c704:	10 0c       	add	r12,r8
8000c706:	50 bc       	stdsp	sp[0x2c],r12
8000c708:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c70c:	58 08       	cp.w	r8,0
8000c70e:	c0 80       	breq	8000c71e <_vfprintf_r+0x1ece>
8000c710:	fa ca f9 78 	sub	r10,sp,-1672
8000c714:	02 9b       	mov	r11,r1
8000c716:	08 9c       	mov	r12,r4
8000c718:	fe b0 f0 8e 	rcall	8000a834 <__sprint_r>
8000c71c:	c1 91       	brne	8000c74e <_vfprintf_r+0x1efe>
8000c71e:	30 0b       	mov	r11,0
8000c720:	fa c3 f9 e0 	sub	r3,sp,-1568
8000c724:	fb 4b 06 8c 	st.w	sp[1676],r11
8000c728:	fe 9f f1 22 	bral	8000a96c <_vfprintf_r+0x11c>
8000c72c:	08 95       	mov	r5,r4
8000c72e:	fa f8 06 90 	ld.w	r8,sp[1680]
8000c732:	58 08       	cp.w	r8,0
8000c734:	c0 80       	breq	8000c744 <_vfprintf_r+0x1ef4>
8000c736:	08 9c       	mov	r12,r4
8000c738:	fa ca f9 78 	sub	r10,sp,-1672
8000c73c:	02 9b       	mov	r11,r1
8000c73e:	fe b0 f0 7b 	rcall	8000a834 <__sprint_r>
8000c742:	c0 61       	brne	8000c74e <_vfprintf_r+0x1efe>
8000c744:	30 08       	mov	r8,0
8000c746:	fb 48 06 8c 	st.w	sp[1676],r8
8000c74a:	c0 28       	rjmp	8000c74e <_vfprintf_r+0x1efe>
8000c74c:	40 41       	lddsp	r1,sp[0x10]
8000c74e:	82 68       	ld.sh	r8,r1[0xc]
8000c750:	ed b8 00 06 	bld	r8,0x6
8000c754:	c0 31       	brne	8000c75a <_vfprintf_r+0x1f0a>
8000c756:	3f fa       	mov	r10,-1
8000c758:	50 ba       	stdsp	sp[0x2c],r10
8000c75a:	40 bc       	lddsp	r12,sp[0x2c]
8000c75c:	fe 3d f9 44 	sub	sp,-1724
8000c760:	d8 32       	popm	r0-r7,pc
8000c762:	d7 03       	nop

8000c764 <_write_r>:
8000c764:	d4 21       	pushm	r4-r7,lr
8000c766:	16 98       	mov	r8,r11
8000c768:	18 97       	mov	r7,r12
8000c76a:	10 9c       	mov	r12,r8
8000c76c:	30 08       	mov	r8,0
8000c76e:	14 9b       	mov	r11,r10
8000c770:	e0 66 0c c0 	mov	r6,3264
8000c774:	12 9a       	mov	r10,r9
8000c776:	8d 08       	st.w	r6[0x0],r8
8000c778:	fe b0 ec 3e 	rcall	80009ff4 <_write>
8000c77c:	5b fc       	cp.w	r12,-1
8000c77e:	c0 51       	brne	8000c788 <_write_r+0x24>
8000c780:	6c 08       	ld.w	r8,r6[0x0]
8000c782:	58 08       	cp.w	r8,0
8000c784:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c788:	d8 22       	popm	r4-r7,pc
8000c78a:	d7 03       	nop

8000c78c <__swsetup_r>:
8000c78c:	d4 21       	pushm	r4-r7,lr
8000c78e:	e0 68 04 b8 	mov	r8,1208
8000c792:	18 96       	mov	r6,r12
8000c794:	16 97       	mov	r7,r11
8000c796:	70 0c       	ld.w	r12,r8[0x0]
8000c798:	58 0c       	cp.w	r12,0
8000c79a:	c0 60       	breq	8000c7a6 <__swsetup_r+0x1a>
8000c79c:	78 68       	ld.w	r8,r12[0x18]
8000c79e:	58 08       	cp.w	r8,0
8000c7a0:	c0 31       	brne	8000c7a6 <__swsetup_r+0x1a>
8000c7a2:	fe b0 ed 03 	rcall	8000a1a8 <__sinit>
8000c7a6:	fe c8 cf 7e 	sub	r8,pc,-12418
8000c7aa:	10 37       	cp.w	r7,r8
8000c7ac:	c0 61       	brne	8000c7b8 <__swsetup_r+0x2c>
8000c7ae:	e0 68 04 b8 	mov	r8,1208
8000c7b2:	70 08       	ld.w	r8,r8[0x0]
8000c7b4:	70 07       	ld.w	r7,r8[0x0]
8000c7b6:	c1 28       	rjmp	8000c7da <__swsetup_r+0x4e>
8000c7b8:	fe c8 cf 70 	sub	r8,pc,-12432
8000c7bc:	10 37       	cp.w	r7,r8
8000c7be:	c0 61       	brne	8000c7ca <__swsetup_r+0x3e>
8000c7c0:	e0 68 04 b8 	mov	r8,1208
8000c7c4:	70 08       	ld.w	r8,r8[0x0]
8000c7c6:	70 17       	ld.w	r7,r8[0x4]
8000c7c8:	c0 98       	rjmp	8000c7da <__swsetup_r+0x4e>
8000c7ca:	fe c8 cf 62 	sub	r8,pc,-12446
8000c7ce:	10 37       	cp.w	r7,r8
8000c7d0:	c0 51       	brne	8000c7da <__swsetup_r+0x4e>
8000c7d2:	e0 68 04 b8 	mov	r8,1208
8000c7d6:	70 08       	ld.w	r8,r8[0x0]
8000c7d8:	70 27       	ld.w	r7,r8[0x8]
8000c7da:	8e 68       	ld.sh	r8,r7[0xc]
8000c7dc:	ed b8 00 03 	bld	r8,0x3
8000c7e0:	c1 e0       	breq	8000c81c <__swsetup_r+0x90>
8000c7e2:	ed b8 00 04 	bld	r8,0x4
8000c7e6:	c3 e1       	brne	8000c862 <__swsetup_r+0xd6>
8000c7e8:	ed b8 00 02 	bld	r8,0x2
8000c7ec:	c1 51       	brne	8000c816 <__swsetup_r+0x8a>
8000c7ee:	6e db       	ld.w	r11,r7[0x34]
8000c7f0:	58 0b       	cp.w	r11,0
8000c7f2:	c0 a0       	breq	8000c806 <__swsetup_r+0x7a>
8000c7f4:	ee c8 ff bc 	sub	r8,r7,-68
8000c7f8:	10 3b       	cp.w	r11,r8
8000c7fa:	c0 40       	breq	8000c802 <__swsetup_r+0x76>
8000c7fc:	0c 9c       	mov	r12,r6
8000c7fe:	fe b0 ed 69 	rcall	8000a2d0 <_free_r>
8000c802:	30 08       	mov	r8,0
8000c804:	8f d8       	st.w	r7[0x34],r8
8000c806:	8e 68       	ld.sh	r8,r7[0xc]
8000c808:	e0 18 ff db 	andl	r8,0xffdb
8000c80c:	ae 68       	st.h	r7[0xc],r8
8000c80e:	30 08       	mov	r8,0
8000c810:	8f 18       	st.w	r7[0x4],r8
8000c812:	6e 48       	ld.w	r8,r7[0x10]
8000c814:	8f 08       	st.w	r7[0x0],r8
8000c816:	8e 68       	ld.sh	r8,r7[0xc]
8000c818:	a3 b8       	sbr	r8,0x3
8000c81a:	ae 68       	st.h	r7[0xc],r8
8000c81c:	6e 48       	ld.w	r8,r7[0x10]
8000c81e:	58 08       	cp.w	r8,0
8000c820:	c0 b1       	brne	8000c836 <__swsetup_r+0xaa>
8000c822:	8e 68       	ld.sh	r8,r7[0xc]
8000c824:	e2 18 02 80 	andl	r8,0x280,COH
8000c828:	e0 48 02 00 	cp.w	r8,512
8000c82c:	c0 50       	breq	8000c836 <__swsetup_r+0xaa>
8000c82e:	0c 9c       	mov	r12,r6
8000c830:	0e 9b       	mov	r11,r7
8000c832:	e0 a0 08 f3 	rcall	8000da18 <__smakebuf_r>
8000c836:	8e 69       	ld.sh	r9,r7[0xc]
8000c838:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000c83c:	c0 70       	breq	8000c84a <__swsetup_r+0xbe>
8000c83e:	30 08       	mov	r8,0
8000c840:	8f 28       	st.w	r7[0x8],r8
8000c842:	6e 58       	ld.w	r8,r7[0x14]
8000c844:	5c 38       	neg	r8
8000c846:	8f 68       	st.w	r7[0x18],r8
8000c848:	c0 68       	rjmp	8000c854 <__swsetup_r+0xc8>
8000c84a:	ed b9 00 01 	bld	r9,0x1
8000c84e:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000c852:	8f 28       	st.w	r7[0x8],r8
8000c854:	6e 48       	ld.w	r8,r7[0x10]
8000c856:	58 08       	cp.w	r8,0
8000c858:	c0 61       	brne	8000c864 <__swsetup_r+0xd8>
8000c85a:	8e 68       	ld.sh	r8,r7[0xc]
8000c85c:	ed b8 00 07 	bld	r8,0x7
8000c860:	c0 21       	brne	8000c864 <__swsetup_r+0xd8>
8000c862:	dc 2a       	popm	r4-r7,pc,r12=-1
8000c864:	d8 2a       	popm	r4-r7,pc,r12=0
8000c866:	d7 03       	nop

8000c868 <_close_r>:
8000c868:	d4 21       	pushm	r4-r7,lr
8000c86a:	30 08       	mov	r8,0
8000c86c:	18 97       	mov	r7,r12
8000c86e:	e0 66 0c c0 	mov	r6,3264
8000c872:	16 9c       	mov	r12,r11
8000c874:	8d 08       	st.w	r6[0x0],r8
8000c876:	fe b0 eb a1 	rcall	80009fb8 <_close>
8000c87a:	5b fc       	cp.w	r12,-1
8000c87c:	c0 51       	brne	8000c886 <_close_r+0x1e>
8000c87e:	6c 08       	ld.w	r8,r6[0x0]
8000c880:	58 08       	cp.w	r8,0
8000c882:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c886:	d8 22       	popm	r4-r7,pc

8000c888 <quorem>:
8000c888:	d4 31       	pushm	r0-r7,lr
8000c88a:	20 2d       	sub	sp,8
8000c88c:	18 97       	mov	r7,r12
8000c88e:	78 48       	ld.w	r8,r12[0x10]
8000c890:	76 46       	ld.w	r6,r11[0x10]
8000c892:	0c 38       	cp.w	r8,r6
8000c894:	c0 34       	brge	8000c89a <quorem+0x12>
8000c896:	30 0c       	mov	r12,0
8000c898:	c8 58       	rjmp	8000c9a2 <quorem+0x11a>
8000c89a:	ec c2 ff fc 	sub	r2,r6,-4
8000c89e:	f6 c3 ff ec 	sub	r3,r11,-20
8000c8a2:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000c8a6:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000c8aa:	2f f9       	sub	r9,-1
8000c8ac:	20 16       	sub	r6,1
8000c8ae:	f8 09 0d 08 	divu	r8,r12,r9
8000c8b2:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000c8b6:	ee c4 ff ec 	sub	r4,r7,-20
8000c8ba:	10 95       	mov	r5,r8
8000c8bc:	58 08       	cp.w	r8,0
8000c8be:	c4 10       	breq	8000c940 <quorem+0xb8>
8000c8c0:	30 09       	mov	r9,0
8000c8c2:	06 9a       	mov	r10,r3
8000c8c4:	08 98       	mov	r8,r4
8000c8c6:	12 91       	mov	r1,r9
8000c8c8:	50 0b       	stdsp	sp[0x0],r11
8000c8ca:	70 0e       	ld.w	lr,r8[0x0]
8000c8cc:	b1 8e       	lsr	lr,0x10
8000c8ce:	50 1e       	stdsp	sp[0x4],lr
8000c8d0:	15 0e       	ld.w	lr,r10++
8000c8d2:	fc 00 16 10 	lsr	r0,lr,0x10
8000c8d6:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000c8da:	ea 0e 03 41 	mac	r1,r5,lr
8000c8de:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000c8e2:	b1 81       	lsr	r1,0x10
8000c8e4:	40 1b       	lddsp	r11,sp[0x4]
8000c8e6:	ea 00 02 40 	mul	r0,r5,r0
8000c8ea:	e2 00 00 00 	add	r0,r1,r0
8000c8ee:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000c8f2:	02 1b       	sub	r11,r1
8000c8f4:	50 1b       	stdsp	sp[0x4],r11
8000c8f6:	70 0b       	ld.w	r11,r8[0x0]
8000c8f8:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
8000c8fc:	02 09       	add	r9,r1
8000c8fe:	f2 0e 01 0e 	sub	lr,r9,lr
8000c902:	b0 1e       	st.h	r8[0x2],lr
8000c904:	fc 09 14 10 	asr	r9,lr,0x10
8000c908:	40 1e       	lddsp	lr,sp[0x4]
8000c90a:	fc 09 00 09 	add	r9,lr,r9
8000c90e:	b0 09       	st.h	r8[0x0],r9
8000c910:	e0 01 16 10 	lsr	r1,r0,0x10
8000c914:	2f c8       	sub	r8,-4
8000c916:	b1 49       	asr	r9,0x10
8000c918:	04 3a       	cp.w	r10,r2
8000c91a:	fe 98 ff d8 	brls	8000c8ca <quorem+0x42>
8000c91e:	40 0b       	lddsp	r11,sp[0x0]
8000c920:	58 0c       	cp.w	r12,0
8000c922:	c0 f1       	brne	8000c940 <quorem+0xb8>
8000c924:	ec c8 ff fb 	sub	r8,r6,-5
8000c928:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000c92c:	c0 28       	rjmp	8000c930 <quorem+0xa8>
8000c92e:	20 16       	sub	r6,1
8000c930:	20 48       	sub	r8,4
8000c932:	08 38       	cp.w	r8,r4
8000c934:	e0 88 00 05 	brls	8000c93e <quorem+0xb6>
8000c938:	70 09       	ld.w	r9,r8[0x0]
8000c93a:	58 09       	cp.w	r9,0
8000c93c:	cf 90       	breq	8000c92e <quorem+0xa6>
8000c93e:	8f 46       	st.w	r7[0x10],r6
8000c940:	0e 9c       	mov	r12,r7
8000c942:	e0 a0 09 6a 	rcall	8000dc16 <__mcmp>
8000c946:	c2 d5       	brlt	8000c9a0 <quorem+0x118>
8000c948:	2f f5       	sub	r5,-1
8000c94a:	08 98       	mov	r8,r4
8000c94c:	30 09       	mov	r9,0
8000c94e:	07 0b       	ld.w	r11,r3++
8000c950:	f6 0a 16 10 	lsr	r10,r11,0x10
8000c954:	70 0c       	ld.w	r12,r8[0x0]
8000c956:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000c95a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000c95e:	14 1e       	sub	lr,r10
8000c960:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000c964:	16 1a       	sub	r10,r11
8000c966:	12 0a       	add	r10,r9
8000c968:	b0 1a       	st.h	r8[0x2],r10
8000c96a:	b1 4a       	asr	r10,0x10
8000c96c:	fc 0a 00 09 	add	r9,lr,r10
8000c970:	b0 09       	st.h	r8[0x0],r9
8000c972:	2f c8       	sub	r8,-4
8000c974:	b1 49       	asr	r9,0x10
8000c976:	04 33       	cp.w	r3,r2
8000c978:	fe 98 ff eb 	brls	8000c94e <quorem+0xc6>
8000c97c:	ec c8 ff fb 	sub	r8,r6,-5
8000c980:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000c984:	58 09       	cp.w	r9,0
8000c986:	c0 d1       	brne	8000c9a0 <quorem+0x118>
8000c988:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000c98c:	c0 28       	rjmp	8000c990 <quorem+0x108>
8000c98e:	20 16       	sub	r6,1
8000c990:	20 48       	sub	r8,4
8000c992:	08 38       	cp.w	r8,r4
8000c994:	e0 88 00 05 	brls	8000c99e <quorem+0x116>
8000c998:	70 09       	ld.w	r9,r8[0x0]
8000c99a:	58 09       	cp.w	r9,0
8000c99c:	cf 90       	breq	8000c98e <quorem+0x106>
8000c99e:	8f 46       	st.w	r7[0x10],r6
8000c9a0:	0a 9c       	mov	r12,r5
8000c9a2:	2f ed       	sub	sp,-8
8000c9a4:	d8 32       	popm	r0-r7,pc
8000c9a6:	d7 03       	nop

8000c9a8 <_dtoa_r>:
8000c9a8:	d4 31       	pushm	r0-r7,lr
8000c9aa:	21 ad       	sub	sp,104
8000c9ac:	fa c4 ff 74 	sub	r4,sp,-140
8000c9b0:	18 97       	mov	r7,r12
8000c9b2:	16 95       	mov	r5,r11
8000c9b4:	68 2c       	ld.w	r12,r4[0x8]
8000c9b6:	50 c9       	stdsp	sp[0x30],r9
8000c9b8:	68 16       	ld.w	r6,r4[0x4]
8000c9ba:	68 09       	ld.w	r9,r4[0x0]
8000c9bc:	50 e8       	stdsp	sp[0x38],r8
8000c9be:	14 94       	mov	r4,r10
8000c9c0:	51 2c       	stdsp	sp[0x48],r12
8000c9c2:	fa e5 00 08 	st.d	sp[8],r4
8000c9c6:	51 59       	stdsp	sp[0x54],r9
8000c9c8:	6e 95       	ld.w	r5,r7[0x24]
8000c9ca:	58 05       	cp.w	r5,0
8000c9cc:	c0 91       	brne	8000c9de <_dtoa_r+0x36>
8000c9ce:	31 0c       	mov	r12,16
8000c9d0:	fe b0 e8 18 	rcall	80009a00 <malloc>
8000c9d4:	99 35       	st.w	r12[0xc],r5
8000c9d6:	8f 9c       	st.w	r7[0x24],r12
8000c9d8:	99 15       	st.w	r12[0x4],r5
8000c9da:	99 25       	st.w	r12[0x8],r5
8000c9dc:	99 05       	st.w	r12[0x0],r5
8000c9de:	6e 99       	ld.w	r9,r7[0x24]
8000c9e0:	72 08       	ld.w	r8,r9[0x0]
8000c9e2:	58 08       	cp.w	r8,0
8000c9e4:	c0 f0       	breq	8000ca02 <_dtoa_r+0x5a>
8000c9e6:	72 1a       	ld.w	r10,r9[0x4]
8000c9e8:	91 1a       	st.w	r8[0x4],r10
8000c9ea:	30 1a       	mov	r10,1
8000c9ec:	72 19       	ld.w	r9,r9[0x4]
8000c9ee:	f4 09 09 49 	lsl	r9,r10,r9
8000c9f2:	10 9b       	mov	r11,r8
8000c9f4:	91 29       	st.w	r8[0x8],r9
8000c9f6:	0e 9c       	mov	r12,r7
8000c9f8:	e0 a0 09 28 	rcall	8000dc48 <_Bfree>
8000c9fc:	6e 98       	ld.w	r8,r7[0x24]
8000c9fe:	30 09       	mov	r9,0
8000ca00:	91 09       	st.w	r8[0x0],r9
8000ca02:	40 28       	lddsp	r8,sp[0x8]
8000ca04:	10 94       	mov	r4,r8
8000ca06:	58 08       	cp.w	r8,0
8000ca08:	c0 64       	brge	8000ca14 <_dtoa_r+0x6c>
8000ca0a:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000ca0e:	50 28       	stdsp	sp[0x8],r8
8000ca10:	30 18       	mov	r8,1
8000ca12:	c0 28       	rjmp	8000ca16 <_dtoa_r+0x6e>
8000ca14:	30 08       	mov	r8,0
8000ca16:	8d 08       	st.w	r6[0x0],r8
8000ca18:	fc 1c 7f f0 	movh	r12,0x7ff0
8000ca1c:	40 26       	lddsp	r6,sp[0x8]
8000ca1e:	0c 98       	mov	r8,r6
8000ca20:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000ca24:	18 38       	cp.w	r8,r12
8000ca26:	c2 01       	brne	8000ca66 <_dtoa_r+0xbe>
8000ca28:	e0 68 27 0f 	mov	r8,9999
8000ca2c:	41 5b       	lddsp	r11,sp[0x54]
8000ca2e:	97 08       	st.w	r11[0x0],r8
8000ca30:	40 3a       	lddsp	r10,sp[0xc]
8000ca32:	58 0a       	cp.w	r10,0
8000ca34:	c0 71       	brne	8000ca42 <_dtoa_r+0x9a>
8000ca36:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000ca3a:	c0 41       	brne	8000ca42 <_dtoa_r+0x9a>
8000ca3c:	fe cc cd e0 	sub	r12,pc,-12832
8000ca40:	c0 38       	rjmp	8000ca46 <_dtoa_r+0x9e>
8000ca42:	fe cc cd da 	sub	r12,pc,-12838
8000ca46:	41 29       	lddsp	r9,sp[0x48]
8000ca48:	58 09       	cp.w	r9,0
8000ca4a:	e0 80 05 9a 	breq	8000d57e <_dtoa_r+0xbd6>
8000ca4e:	f8 c8 ff fd 	sub	r8,r12,-3
8000ca52:	f8 c9 ff f8 	sub	r9,r12,-8
8000ca56:	11 8b       	ld.ub	r11,r8[0x0]
8000ca58:	30 0a       	mov	r10,0
8000ca5a:	41 25       	lddsp	r5,sp[0x48]
8000ca5c:	f4 0b 18 00 	cp.b	r11,r10
8000ca60:	f2 08 17 10 	movne	r8,r9
8000ca64:	c1 68       	rjmp	8000ca90 <_dtoa_r+0xe8>
8000ca66:	fa ea 00 08 	ld.d	r10,sp[8]
8000ca6a:	30 08       	mov	r8,0
8000ca6c:	fa eb 00 3c 	st.d	sp[60],r10
8000ca70:	30 09       	mov	r9,0
8000ca72:	e0 a0 0f c4 	rcall	8000e9fa <__avr32_f64_cmp_eq>
8000ca76:	c1 00       	breq	8000ca96 <_dtoa_r+0xee>
8000ca78:	30 18       	mov	r8,1
8000ca7a:	41 5a       	lddsp	r10,sp[0x54]
8000ca7c:	95 08       	st.w	r10[0x0],r8
8000ca7e:	fe cc cf 46 	sub	r12,pc,-12474
8000ca82:	41 29       	lddsp	r9,sp[0x48]
8000ca84:	f8 08 00 08 	add	r8,r12,r8
8000ca88:	58 09       	cp.w	r9,0
8000ca8a:	e0 80 05 7a 	breq	8000d57e <_dtoa_r+0xbd6>
8000ca8e:	12 95       	mov	r5,r9
8000ca90:	8b 08       	st.w	r5[0x0],r8
8000ca92:	e0 8f 05 76 	bral	8000d57e <_dtoa_r+0xbd6>
8000ca96:	fa c8 ff 9c 	sub	r8,sp,-100
8000ca9a:	fa c9 ff a0 	sub	r9,sp,-96
8000ca9e:	fa ea 00 3c 	ld.d	r10,sp[60]
8000caa2:	0e 9c       	mov	r12,r7
8000caa4:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
8000caa8:	e0 a0 09 22 	rcall	8000dcec <__d2b>
8000caac:	18 93       	mov	r3,r12
8000caae:	58 05       	cp.w	r5,0
8000cab0:	c0 d0       	breq	8000caca <_dtoa_r+0x122>
8000cab2:	fa ea 00 3c 	ld.d	r10,sp[60]
8000cab6:	30 04       	mov	r4,0
8000cab8:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000cabc:	ea c5 03 ff 	sub	r5,r5,1023
8000cac0:	10 9b       	mov	r11,r8
8000cac2:	51 74       	stdsp	sp[0x5c],r4
8000cac4:	ea 1b 3f f0 	orh	r11,0x3ff0
8000cac8:	c2 58       	rjmp	8000cb12 <_dtoa_r+0x16a>
8000caca:	41 88       	lddsp	r8,sp[0x60]
8000cacc:	41 9c       	lddsp	r12,sp[0x64]
8000cace:	10 0c       	add	r12,r8
8000cad0:	f8 c5 fb ce 	sub	r5,r12,-1074
8000cad4:	e0 45 00 20 	cp.w	r5,32
8000cad8:	e0 8a 00 0e 	brle	8000caf4 <_dtoa_r+0x14c>
8000cadc:	f8 cc fb ee 	sub	r12,r12,-1042
8000cae0:	40 3b       	lddsp	r11,sp[0xc]
8000cae2:	ea 08 11 40 	rsub	r8,r5,64
8000cae6:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000caea:	ec 08 09 46 	lsl	r6,r6,r8
8000caee:	0c 4c       	or	r12,r6
8000caf0:	c0 78       	rjmp	8000cafe <_dtoa_r+0x156>
8000caf2:	d7 03       	nop
8000caf4:	ea 0c 11 20 	rsub	r12,r5,32
8000caf8:	40 3a       	lddsp	r10,sp[0xc]
8000cafa:	f4 0c 09 4c 	lsl	r12,r10,r12
8000cafe:	e0 a0 0f 0a 	rcall	8000e912 <__avr32_u32_to_f64>
8000cb02:	fc 18 fe 10 	movh	r8,0xfe10
8000cb06:	30 19       	mov	r9,1
8000cb08:	ea c5 04 33 	sub	r5,r5,1075
8000cb0c:	f0 0b 00 0b 	add	r11,r8,r11
8000cb10:	51 79       	stdsp	sp[0x5c],r9
8000cb12:	30 08       	mov	r8,0
8000cb14:	fc 19 3f f8 	movh	r9,0x3ff8
8000cb18:	e0 a0 0d 92 	rcall	8000e63c <__avr32_f64_sub>
8000cb1c:	e0 68 43 61 	mov	r8,17249
8000cb20:	ea 18 63 6f 	orh	r8,0x636f
8000cb24:	e0 69 87 a7 	mov	r9,34727
8000cb28:	ea 19 3f d2 	orh	r9,0x3fd2
8000cb2c:	e0 a0 0c 9c 	rcall	8000e464 <__avr32_f64_mul>
8000cb30:	e0 68 c8 b3 	mov	r8,51379
8000cb34:	ea 18 8b 60 	orh	r8,0x8b60
8000cb38:	e0 69 8a 28 	mov	r9,35368
8000cb3c:	ea 19 3f c6 	orh	r9,0x3fc6
8000cb40:	e0 a0 0e 4c 	rcall	8000e7d8 <__avr32_f64_add>
8000cb44:	0a 9c       	mov	r12,r5
8000cb46:	14 90       	mov	r0,r10
8000cb48:	16 91       	mov	r1,r11
8000cb4a:	e0 a0 0e e8 	rcall	8000e91a <__avr32_s32_to_f64>
8000cb4e:	e0 68 79 fb 	mov	r8,31227
8000cb52:	ea 18 50 9f 	orh	r8,0x509f
8000cb56:	e0 69 44 13 	mov	r9,17427
8000cb5a:	ea 19 3f d3 	orh	r9,0x3fd3
8000cb5e:	e0 a0 0c 83 	rcall	8000e464 <__avr32_f64_mul>
8000cb62:	14 98       	mov	r8,r10
8000cb64:	16 99       	mov	r9,r11
8000cb66:	00 9a       	mov	r10,r0
8000cb68:	02 9b       	mov	r11,r1
8000cb6a:	e0 a0 0e 37 	rcall	8000e7d8 <__avr32_f64_add>
8000cb6e:	14 90       	mov	r0,r10
8000cb70:	16 91       	mov	r1,r11
8000cb72:	e0 a0 0e bd 	rcall	8000e8ec <__avr32_f64_to_s32>
8000cb76:	30 08       	mov	r8,0
8000cb78:	18 96       	mov	r6,r12
8000cb7a:	30 09       	mov	r9,0
8000cb7c:	00 9a       	mov	r10,r0
8000cb7e:	02 9b       	mov	r11,r1
8000cb80:	e0 a0 0f 84 	rcall	8000ea88 <__avr32_f64_cmp_lt>
8000cb84:	c0 c0       	breq	8000cb9c <_dtoa_r+0x1f4>
8000cb86:	0c 9c       	mov	r12,r6
8000cb88:	e0 a0 0e c9 	rcall	8000e91a <__avr32_s32_to_f64>
8000cb8c:	14 98       	mov	r8,r10
8000cb8e:	16 99       	mov	r9,r11
8000cb90:	00 9a       	mov	r10,r0
8000cb92:	02 9b       	mov	r11,r1
8000cb94:	e0 a0 0f 33 	rcall	8000e9fa <__avr32_f64_cmp_eq>
8000cb98:	f7 b6 00 01 	subeq	r6,1
8000cb9c:	59 66       	cp.w	r6,22
8000cb9e:	e0 88 00 05 	brls	8000cba8 <_dtoa_r+0x200>
8000cba2:	30 18       	mov	r8,1
8000cba4:	51 48       	stdsp	sp[0x50],r8
8000cba6:	c1 38       	rjmp	8000cbcc <_dtoa_r+0x224>
8000cba8:	fe c8 ce f0 	sub	r8,pc,-12560
8000cbac:	fa ea 00 3c 	ld.d	r10,sp[60]
8000cbb0:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000cbb4:	e0 a0 0f 6a 	rcall	8000ea88 <__avr32_f64_cmp_lt>
8000cbb8:	f9 b4 00 00 	moveq	r4,0
8000cbbc:	fb f4 0a 14 	st.weq	sp[0x50],r4
8000cbc0:	f7 b6 01 01 	subne	r6,1
8000cbc4:	f9 bc 01 00 	movne	r12,0
8000cbc8:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000cbcc:	41 90       	lddsp	r0,sp[0x64]
8000cbce:	20 10       	sub	r0,1
8000cbd0:	0a 10       	sub	r0,r5
8000cbd2:	c0 46       	brmi	8000cbda <_dtoa_r+0x232>
8000cbd4:	50 40       	stdsp	sp[0x10],r0
8000cbd6:	30 00       	mov	r0,0
8000cbd8:	c0 48       	rjmp	8000cbe0 <_dtoa_r+0x238>
8000cbda:	30 0b       	mov	r11,0
8000cbdc:	5c 30       	neg	r0
8000cbde:	50 4b       	stdsp	sp[0x10],r11
8000cbe0:	ec 02 11 00 	rsub	r2,r6,0
8000cbe4:	58 06       	cp.w	r6,0
8000cbe6:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000cbea:	f5 d6 e4 0a 	addge	r10,r10,r6
8000cbee:	fb fa 4a 04 	st.wge	sp[0x10],r10
8000cbf2:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000cbf6:	f9 b2 04 00 	movge	r2,0
8000cbfa:	e1 d6 e5 10 	sublt	r0,r0,r6
8000cbfe:	f9 b9 05 00 	movlt	r9,0
8000cc02:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000cc06:	40 c8       	lddsp	r8,sp[0x30]
8000cc08:	58 98       	cp.w	r8,9
8000cc0a:	e0 8b 00 20 	brhi	8000cc4a <_dtoa_r+0x2a2>
8000cc0e:	58 58       	cp.w	r8,5
8000cc10:	f9 b4 0a 01 	movle	r4,1
8000cc14:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000cc18:	f7 b5 09 04 	subgt	r5,4
8000cc1c:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000cc20:	f9 b4 09 00 	movgt	r4,0
8000cc24:	40 cc       	lddsp	r12,sp[0x30]
8000cc26:	58 3c       	cp.w	r12,3
8000cc28:	c2 d0       	breq	8000cc82 <_dtoa_r+0x2da>
8000cc2a:	e0 89 00 05 	brgt	8000cc34 <_dtoa_r+0x28c>
8000cc2e:	58 2c       	cp.w	r12,2
8000cc30:	c1 01       	brne	8000cc50 <_dtoa_r+0x2a8>
8000cc32:	c1 88       	rjmp	8000cc62 <_dtoa_r+0x2ba>
8000cc34:	40 cb       	lddsp	r11,sp[0x30]
8000cc36:	58 4b       	cp.w	r11,4
8000cc38:	c0 60       	breq	8000cc44 <_dtoa_r+0x29c>
8000cc3a:	58 5b       	cp.w	r11,5
8000cc3c:	c0 a1       	brne	8000cc50 <_dtoa_r+0x2a8>
8000cc3e:	30 1a       	mov	r10,1
8000cc40:	50 da       	stdsp	sp[0x34],r10
8000cc42:	c2 28       	rjmp	8000cc86 <_dtoa_r+0x2de>
8000cc44:	30 19       	mov	r9,1
8000cc46:	50 d9       	stdsp	sp[0x34],r9
8000cc48:	c0 f8       	rjmp	8000cc66 <_dtoa_r+0x2be>
8000cc4a:	30 08       	mov	r8,0
8000cc4c:	30 14       	mov	r4,1
8000cc4e:	50 c8       	stdsp	sp[0x30],r8
8000cc50:	3f f5       	mov	r5,-1
8000cc52:	30 1c       	mov	r12,1
8000cc54:	30 0b       	mov	r11,0
8000cc56:	50 95       	stdsp	sp[0x24],r5
8000cc58:	50 dc       	stdsp	sp[0x34],r12
8000cc5a:	0a 91       	mov	r1,r5
8000cc5c:	31 28       	mov	r8,18
8000cc5e:	50 eb       	stdsp	sp[0x38],r11
8000cc60:	c2 08       	rjmp	8000cca0 <_dtoa_r+0x2f8>
8000cc62:	30 0a       	mov	r10,0
8000cc64:	50 da       	stdsp	sp[0x34],r10
8000cc66:	40 e9       	lddsp	r9,sp[0x38]
8000cc68:	58 09       	cp.w	r9,0
8000cc6a:	e0 89 00 07 	brgt	8000cc78 <_dtoa_r+0x2d0>
8000cc6e:	30 18       	mov	r8,1
8000cc70:	50 98       	stdsp	sp[0x24],r8
8000cc72:	10 91       	mov	r1,r8
8000cc74:	50 e8       	stdsp	sp[0x38],r8
8000cc76:	c1 58       	rjmp	8000cca0 <_dtoa_r+0x2f8>
8000cc78:	40 e5       	lddsp	r5,sp[0x38]
8000cc7a:	50 95       	stdsp	sp[0x24],r5
8000cc7c:	0a 91       	mov	r1,r5
8000cc7e:	0a 98       	mov	r8,r5
8000cc80:	c1 08       	rjmp	8000cca0 <_dtoa_r+0x2f8>
8000cc82:	30 0c       	mov	r12,0
8000cc84:	50 dc       	stdsp	sp[0x34],r12
8000cc86:	40 eb       	lddsp	r11,sp[0x38]
8000cc88:	ec 0b 00 0b 	add	r11,r6,r11
8000cc8c:	50 9b       	stdsp	sp[0x24],r11
8000cc8e:	16 98       	mov	r8,r11
8000cc90:	2f f8       	sub	r8,-1
8000cc92:	58 08       	cp.w	r8,0
8000cc94:	e0 89 00 05 	brgt	8000cc9e <_dtoa_r+0x2f6>
8000cc98:	10 91       	mov	r1,r8
8000cc9a:	30 18       	mov	r8,1
8000cc9c:	c0 28       	rjmp	8000cca0 <_dtoa_r+0x2f8>
8000cc9e:	10 91       	mov	r1,r8
8000cca0:	30 09       	mov	r9,0
8000cca2:	6e 9a       	ld.w	r10,r7[0x24]
8000cca4:	95 19       	st.w	r10[0x4],r9
8000cca6:	30 49       	mov	r9,4
8000cca8:	c0 68       	rjmp	8000ccb4 <_dtoa_r+0x30c>
8000ccaa:	d7 03       	nop
8000ccac:	6a 1a       	ld.w	r10,r5[0x4]
8000ccae:	a1 79       	lsl	r9,0x1
8000ccb0:	2f fa       	sub	r10,-1
8000ccb2:	8b 1a       	st.w	r5[0x4],r10
8000ccb4:	6e 95       	ld.w	r5,r7[0x24]
8000ccb6:	f2 ca ff ec 	sub	r10,r9,-20
8000ccba:	10 3a       	cp.w	r10,r8
8000ccbc:	fe 98 ff f8 	brls	8000ccac <_dtoa_r+0x304>
8000ccc0:	6a 1b       	ld.w	r11,r5[0x4]
8000ccc2:	0e 9c       	mov	r12,r7
8000ccc4:	e0 a0 07 dc 	rcall	8000dc7c <_Balloc>
8000ccc8:	58 e1       	cp.w	r1,14
8000ccca:	5f 88       	srls	r8
8000cccc:	8b 0c       	st.w	r5[0x0],r12
8000ccce:	f1 e4 00 04 	and	r4,r8,r4
8000ccd2:	6e 98       	ld.w	r8,r7[0x24]
8000ccd4:	70 08       	ld.w	r8,r8[0x0]
8000ccd6:	50 88       	stdsp	sp[0x20],r8
8000ccd8:	e0 80 01 82 	breq	8000cfdc <_dtoa_r+0x634>
8000ccdc:	58 06       	cp.w	r6,0
8000ccde:	e0 8a 00 43 	brle	8000cd64 <_dtoa_r+0x3bc>
8000cce2:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000cce6:	fe c8 d0 2e 	sub	r8,pc,-12242
8000ccea:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000ccee:	fa e5 00 18 	st.d	sp[24],r4
8000ccf2:	ec 04 14 04 	asr	r4,r6,0x4
8000ccf6:	ed b4 00 04 	bld	r4,0x4
8000ccfa:	c0 30       	breq	8000cd00 <_dtoa_r+0x358>
8000ccfc:	30 25       	mov	r5,2
8000ccfe:	c1 08       	rjmp	8000cd1e <_dtoa_r+0x376>
8000cd00:	fe c8 cf 80 	sub	r8,pc,-12416
8000cd04:	f0 e8 00 20 	ld.d	r8,r8[32]
8000cd08:	fa ea 00 3c 	ld.d	r10,sp[60]
8000cd0c:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
8000cd10:	e0 a0 0e f0 	rcall	8000eaf0 <__avr32_f64_div>
8000cd14:	30 35       	mov	r5,3
8000cd16:	14 98       	mov	r8,r10
8000cd18:	16 99       	mov	r9,r11
8000cd1a:	fa e9 00 08 	st.d	sp[8],r8
8000cd1e:	fe cc cf 9e 	sub	r12,pc,-12386
8000cd22:	50 a3       	stdsp	sp[0x28],r3
8000cd24:	0c 93       	mov	r3,r6
8000cd26:	18 96       	mov	r6,r12
8000cd28:	c0 f8       	rjmp	8000cd46 <_dtoa_r+0x39e>
8000cd2a:	fa ea 00 18 	ld.d	r10,sp[24]
8000cd2e:	ed b4 00 00 	bld	r4,0x0
8000cd32:	c0 81       	brne	8000cd42 <_dtoa_r+0x39a>
8000cd34:	ec e8 00 00 	ld.d	r8,r6[0]
8000cd38:	2f f5       	sub	r5,-1
8000cd3a:	e0 a0 0b 95 	rcall	8000e464 <__avr32_f64_mul>
8000cd3e:	fa eb 00 18 	st.d	sp[24],r10
8000cd42:	a1 54       	asr	r4,0x1
8000cd44:	2f 86       	sub	r6,-8
8000cd46:	58 04       	cp.w	r4,0
8000cd48:	cf 11       	brne	8000cd2a <_dtoa_r+0x382>
8000cd4a:	fa e8 00 18 	ld.d	r8,sp[24]
8000cd4e:	fa ea 00 08 	ld.d	r10,sp[8]
8000cd52:	06 96       	mov	r6,r3
8000cd54:	e0 a0 0e ce 	rcall	8000eaf0 <__avr32_f64_div>
8000cd58:	40 a3       	lddsp	r3,sp[0x28]
8000cd5a:	14 98       	mov	r8,r10
8000cd5c:	16 99       	mov	r9,r11
8000cd5e:	fa e9 00 08 	st.d	sp[8],r8
8000cd62:	c2 f8       	rjmp	8000cdc0 <_dtoa_r+0x418>
8000cd64:	ec 08 11 00 	rsub	r8,r6,0
8000cd68:	c0 31       	brne	8000cd6e <_dtoa_r+0x3c6>
8000cd6a:	30 25       	mov	r5,2
8000cd6c:	c2 a8       	rjmp	8000cdc0 <_dtoa_r+0x418>
8000cd6e:	fe cc cf ee 	sub	r12,pc,-12306
8000cd72:	f0 04 14 04 	asr	r4,r8,0x4
8000cd76:	50 1c       	stdsp	sp[0x4],r12
8000cd78:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000cd7c:	fe c9 d0 c4 	sub	r9,pc,-12092
8000cd80:	fa ea 00 3c 	ld.d	r10,sp[60]
8000cd84:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000cd88:	e0 a0 0b 6e 	rcall	8000e464 <__avr32_f64_mul>
8000cd8c:	40 1c       	lddsp	r12,sp[0x4]
8000cd8e:	50 63       	stdsp	sp[0x18],r3
8000cd90:	30 25       	mov	r5,2
8000cd92:	0c 93       	mov	r3,r6
8000cd94:	fa eb 00 08 	st.d	sp[8],r10
8000cd98:	18 96       	mov	r6,r12
8000cd9a:	c0 f8       	rjmp	8000cdb8 <_dtoa_r+0x410>
8000cd9c:	fa ea 00 08 	ld.d	r10,sp[8]
8000cda0:	ed b4 00 00 	bld	r4,0x0
8000cda4:	c0 81       	brne	8000cdb4 <_dtoa_r+0x40c>
8000cda6:	ec e8 00 00 	ld.d	r8,r6[0]
8000cdaa:	2f f5       	sub	r5,-1
8000cdac:	e0 a0 0b 5c 	rcall	8000e464 <__avr32_f64_mul>
8000cdb0:	fa eb 00 08 	st.d	sp[8],r10
8000cdb4:	a1 54       	asr	r4,0x1
8000cdb6:	2f 86       	sub	r6,-8
8000cdb8:	58 04       	cp.w	r4,0
8000cdba:	cf 11       	brne	8000cd9c <_dtoa_r+0x3f4>
8000cdbc:	06 96       	mov	r6,r3
8000cdbe:	40 63       	lddsp	r3,sp[0x18]
8000cdc0:	41 4a       	lddsp	r10,sp[0x50]
8000cdc2:	58 0a       	cp.w	r10,0
8000cdc4:	c2 a0       	breq	8000ce18 <_dtoa_r+0x470>
8000cdc6:	fa e8 00 08 	ld.d	r8,sp[8]
8000cdca:	58 01       	cp.w	r1,0
8000cdcc:	5f 94       	srgt	r4
8000cdce:	fa e9 00 18 	st.d	sp[24],r8
8000cdd2:	30 08       	mov	r8,0
8000cdd4:	fc 19 3f f0 	movh	r9,0x3ff0
8000cdd8:	fa ea 00 18 	ld.d	r10,sp[24]
8000cddc:	e0 a0 0e 56 	rcall	8000ea88 <__avr32_f64_cmp_lt>
8000cde0:	f9 bc 00 00 	moveq	r12,0
8000cde4:	f9 bc 01 01 	movne	r12,1
8000cde8:	e9 ec 00 0c 	and	r12,r4,r12
8000cdec:	c1 60       	breq	8000ce18 <_dtoa_r+0x470>
8000cdee:	40 98       	lddsp	r8,sp[0x24]
8000cdf0:	58 08       	cp.w	r8,0
8000cdf2:	e0 8a 00 f1 	brle	8000cfd4 <_dtoa_r+0x62c>
8000cdf6:	30 08       	mov	r8,0
8000cdf8:	fc 19 40 24 	movh	r9,0x4024
8000cdfc:	ec c4 00 01 	sub	r4,r6,1
8000ce00:	fa ea 00 18 	ld.d	r10,sp[24]
8000ce04:	2f f5       	sub	r5,-1
8000ce06:	50 64       	stdsp	sp[0x18],r4
8000ce08:	e0 a0 0b 2e 	rcall	8000e464 <__avr32_f64_mul>
8000ce0c:	40 94       	lddsp	r4,sp[0x24]
8000ce0e:	14 98       	mov	r8,r10
8000ce10:	16 99       	mov	r9,r11
8000ce12:	fa e9 00 08 	st.d	sp[8],r8
8000ce16:	c0 38       	rjmp	8000ce1c <_dtoa_r+0x474>
8000ce18:	50 66       	stdsp	sp[0x18],r6
8000ce1a:	02 94       	mov	r4,r1
8000ce1c:	0a 9c       	mov	r12,r5
8000ce1e:	e0 a0 0d 7e 	rcall	8000e91a <__avr32_s32_to_f64>
8000ce22:	fa e8 00 08 	ld.d	r8,sp[8]
8000ce26:	e0 a0 0b 1f 	rcall	8000e464 <__avr32_f64_mul>
8000ce2a:	30 08       	mov	r8,0
8000ce2c:	fc 19 40 1c 	movh	r9,0x401c
8000ce30:	e0 a0 0c d4 	rcall	8000e7d8 <__avr32_f64_add>
8000ce34:	14 98       	mov	r8,r10
8000ce36:	16 99       	mov	r9,r11
8000ce38:	fa e9 00 28 	st.d	sp[40],r8
8000ce3c:	fc 18 fc c0 	movh	r8,0xfcc0
8000ce40:	40 a5       	lddsp	r5,sp[0x28]
8000ce42:	10 05       	add	r5,r8
8000ce44:	50 a5       	stdsp	sp[0x28],r5
8000ce46:	58 04       	cp.w	r4,0
8000ce48:	c2 11       	brne	8000ce8a <_dtoa_r+0x4e2>
8000ce4a:	fa ea 00 08 	ld.d	r10,sp[8]
8000ce4e:	30 08       	mov	r8,0
8000ce50:	fc 19 40 14 	movh	r9,0x4014
8000ce54:	e0 a0 0b f4 	rcall	8000e63c <__avr32_f64_sub>
8000ce58:	40 bc       	lddsp	r12,sp[0x2c]
8000ce5a:	fa eb 00 08 	st.d	sp[8],r10
8000ce5e:	14 98       	mov	r8,r10
8000ce60:	16 99       	mov	r9,r11
8000ce62:	18 9a       	mov	r10,r12
8000ce64:	0a 9b       	mov	r11,r5
8000ce66:	e0 a0 0e 11 	rcall	8000ea88 <__avr32_f64_cmp_lt>
8000ce6a:	e0 81 02 54 	brne	8000d312 <_dtoa_r+0x96a>
8000ce6e:	0a 98       	mov	r8,r5
8000ce70:	40 b9       	lddsp	r9,sp[0x2c]
8000ce72:	ee 18 80 00 	eorh	r8,0x8000
8000ce76:	fa ea 00 08 	ld.d	r10,sp[8]
8000ce7a:	10 95       	mov	r5,r8
8000ce7c:	12 98       	mov	r8,r9
8000ce7e:	0a 99       	mov	r9,r5
8000ce80:	e0 a0 0e 04 	rcall	8000ea88 <__avr32_f64_cmp_lt>
8000ce84:	e0 81 02 3e 	brne	8000d300 <_dtoa_r+0x958>
8000ce88:	ca 68       	rjmp	8000cfd4 <_dtoa_r+0x62c>
8000ce8a:	fe c9 d1 d2 	sub	r9,pc,-11822
8000ce8e:	e8 c8 00 01 	sub	r8,r4,1
8000ce92:	40 d5       	lddsp	r5,sp[0x34]
8000ce94:	58 05       	cp.w	r5,0
8000ce96:	c4 f0       	breq	8000cf34 <_dtoa_r+0x58c>
8000ce98:	30 0c       	mov	r12,0
8000ce9a:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000ce9e:	51 3c       	stdsp	sp[0x4c],r12
8000cea0:	30 0a       	mov	r10,0
8000cea2:	fc 1b 3f e0 	movh	r11,0x3fe0
8000cea6:	e0 a0 0e 25 	rcall	8000eaf0 <__avr32_f64_div>
8000ceaa:	fa e8 00 28 	ld.d	r8,sp[40]
8000ceae:	40 85       	lddsp	r5,sp[0x20]
8000ceb0:	e0 a0 0b c6 	rcall	8000e63c <__avr32_f64_sub>
8000ceb4:	fa eb 00 28 	st.d	sp[40],r10
8000ceb8:	fa ea 00 08 	ld.d	r10,sp[8]
8000cebc:	e0 a0 0d 18 	rcall	8000e8ec <__avr32_f64_to_s32>
8000cec0:	51 6c       	stdsp	sp[0x58],r12
8000cec2:	e0 a0 0d 2c 	rcall	8000e91a <__avr32_s32_to_f64>
8000cec6:	14 98       	mov	r8,r10
8000cec8:	16 99       	mov	r9,r11
8000ceca:	fa ea 00 08 	ld.d	r10,sp[8]
8000cece:	e0 a0 0b b7 	rcall	8000e63c <__avr32_f64_sub>
8000ced2:	fa eb 00 08 	st.d	sp[8],r10
8000ced6:	41 68       	lddsp	r8,sp[0x58]
8000ced8:	2d 08       	sub	r8,-48
8000ceda:	0a c8       	st.b	r5++,r8
8000cedc:	41 39       	lddsp	r9,sp[0x4c]
8000cede:	2f f9       	sub	r9,-1
8000cee0:	51 39       	stdsp	sp[0x4c],r9
8000cee2:	fa e8 00 28 	ld.d	r8,sp[40]
8000cee6:	e0 a0 0d d1 	rcall	8000ea88 <__avr32_f64_cmp_lt>
8000ceea:	e0 81 03 39 	brne	8000d55c <_dtoa_r+0xbb4>
8000ceee:	fa e8 00 08 	ld.d	r8,sp[8]
8000cef2:	30 0a       	mov	r10,0
8000cef4:	fc 1b 3f f0 	movh	r11,0x3ff0
8000cef8:	e0 a0 0b a2 	rcall	8000e63c <__avr32_f64_sub>
8000cefc:	fa e8 00 28 	ld.d	r8,sp[40]
8000cf00:	e0 a0 0d c4 	rcall	8000ea88 <__avr32_f64_cmp_lt>
8000cf04:	fa ea 00 28 	ld.d	r10,sp[40]
8000cf08:	30 08       	mov	r8,0
8000cf0a:	fc 19 40 24 	movh	r9,0x4024
8000cf0e:	e0 81 00 da 	brne	8000d0c2 <_dtoa_r+0x71a>
8000cf12:	41 3c       	lddsp	r12,sp[0x4c]
8000cf14:	08 3c       	cp.w	r12,r4
8000cf16:	c5 f4       	brge	8000cfd4 <_dtoa_r+0x62c>
8000cf18:	e0 a0 0a a6 	rcall	8000e464 <__avr32_f64_mul>
8000cf1c:	30 08       	mov	r8,0
8000cf1e:	fa eb 00 28 	st.d	sp[40],r10
8000cf22:	fc 19 40 24 	movh	r9,0x4024
8000cf26:	fa ea 00 08 	ld.d	r10,sp[8]
8000cf2a:	e0 a0 0a 9d 	rcall	8000e464 <__avr32_f64_mul>
8000cf2e:	fa eb 00 08 	st.d	sp[8],r10
8000cf32:	cc 3b       	rjmp	8000ceb8 <_dtoa_r+0x510>
8000cf34:	40 85       	lddsp	r5,sp[0x20]
8000cf36:	08 05       	add	r5,r4
8000cf38:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000cf3c:	51 35       	stdsp	sp[0x4c],r5
8000cf3e:	fa e8 00 28 	ld.d	r8,sp[40]
8000cf42:	40 85       	lddsp	r5,sp[0x20]
8000cf44:	e0 a0 0a 90 	rcall	8000e464 <__avr32_f64_mul>
8000cf48:	fa eb 00 28 	st.d	sp[40],r10
8000cf4c:	fa ea 00 08 	ld.d	r10,sp[8]
8000cf50:	e0 a0 0c ce 	rcall	8000e8ec <__avr32_f64_to_s32>
8000cf54:	51 6c       	stdsp	sp[0x58],r12
8000cf56:	e0 a0 0c e2 	rcall	8000e91a <__avr32_s32_to_f64>
8000cf5a:	14 98       	mov	r8,r10
8000cf5c:	16 99       	mov	r9,r11
8000cf5e:	fa ea 00 08 	ld.d	r10,sp[8]
8000cf62:	e0 a0 0b 6d 	rcall	8000e63c <__avr32_f64_sub>
8000cf66:	fa eb 00 08 	st.d	sp[8],r10
8000cf6a:	41 68       	lddsp	r8,sp[0x58]
8000cf6c:	2d 08       	sub	r8,-48
8000cf6e:	0a c8       	st.b	r5++,r8
8000cf70:	41 3c       	lddsp	r12,sp[0x4c]
8000cf72:	18 35       	cp.w	r5,r12
8000cf74:	c2 81       	brne	8000cfc4 <_dtoa_r+0x61c>
8000cf76:	30 08       	mov	r8,0
8000cf78:	fc 19 3f e0 	movh	r9,0x3fe0
8000cf7c:	fa ea 00 28 	ld.d	r10,sp[40]
8000cf80:	e0 a0 0c 2c 	rcall	8000e7d8 <__avr32_f64_add>
8000cf84:	40 85       	lddsp	r5,sp[0x20]
8000cf86:	fa e8 00 08 	ld.d	r8,sp[8]
8000cf8a:	08 05       	add	r5,r4
8000cf8c:	e0 a0 0d 7e 	rcall	8000ea88 <__avr32_f64_cmp_lt>
8000cf90:	e0 81 00 99 	brne	8000d0c2 <_dtoa_r+0x71a>
8000cf94:	fa e8 00 28 	ld.d	r8,sp[40]
8000cf98:	30 0a       	mov	r10,0
8000cf9a:	fc 1b 3f e0 	movh	r11,0x3fe0
8000cf9e:	e0 a0 0b 4f 	rcall	8000e63c <__avr32_f64_sub>
8000cfa2:	14 98       	mov	r8,r10
8000cfa4:	16 99       	mov	r9,r11
8000cfa6:	fa ea 00 08 	ld.d	r10,sp[8]
8000cfaa:	e0 a0 0d 6f 	rcall	8000ea88 <__avr32_f64_cmp_lt>
8000cfae:	c1 30       	breq	8000cfd4 <_dtoa_r+0x62c>
8000cfb0:	33 09       	mov	r9,48
8000cfb2:	0a 98       	mov	r8,r5
8000cfb4:	11 7a       	ld.ub	r10,--r8
8000cfb6:	f2 0a 18 00 	cp.b	r10,r9
8000cfba:	e0 81 02 d1 	brne	8000d55c <_dtoa_r+0xbb4>
8000cfbe:	10 95       	mov	r5,r8
8000cfc0:	cf 9b       	rjmp	8000cfb2 <_dtoa_r+0x60a>
8000cfc2:	d7 03       	nop
8000cfc4:	30 08       	mov	r8,0
8000cfc6:	fc 19 40 24 	movh	r9,0x4024
8000cfca:	e0 a0 0a 4d 	rcall	8000e464 <__avr32_f64_mul>
8000cfce:	fa eb 00 08 	st.d	sp[8],r10
8000cfd2:	cb db       	rjmp	8000cf4c <_dtoa_r+0x5a4>
8000cfd4:	fa ea 00 3c 	ld.d	r10,sp[60]
8000cfd8:	fa eb 00 08 	st.d	sp[8],r10
8000cfdc:	58 e6       	cp.w	r6,14
8000cfde:	5f ab       	srle	r11
8000cfe0:	41 8a       	lddsp	r10,sp[0x60]
8000cfe2:	30 08       	mov	r8,0
8000cfe4:	f4 09 11 ff 	rsub	r9,r10,-1
8000cfe8:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000cfec:	f0 09 18 00 	cp.b	r9,r8
8000cff0:	e0 80 00 82 	breq	8000d0f4 <_dtoa_r+0x74c>
8000cff4:	40 ea       	lddsp	r10,sp[0x38]
8000cff6:	58 01       	cp.w	r1,0
8000cff8:	5f a9       	srle	r9
8000cffa:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000cffe:	fe ca d3 46 	sub	r10,pc,-11450
8000d002:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000d006:	fa e5 00 10 	st.d	sp[16],r4
8000d00a:	f0 09 18 00 	cp.b	r9,r8
8000d00e:	c1 40       	breq	8000d036 <_dtoa_r+0x68e>
8000d010:	58 01       	cp.w	r1,0
8000d012:	e0 81 01 77 	brne	8000d300 <_dtoa_r+0x958>
8000d016:	30 08       	mov	r8,0
8000d018:	fc 19 40 14 	movh	r9,0x4014
8000d01c:	08 9a       	mov	r10,r4
8000d01e:	0a 9b       	mov	r11,r5
8000d020:	e0 a0 0a 22 	rcall	8000e464 <__avr32_f64_mul>
8000d024:	fa e8 00 08 	ld.d	r8,sp[8]
8000d028:	e0 a0 0c fc 	rcall	8000ea20 <__avr32_f64_cmp_ge>
8000d02c:	e0 81 01 6a 	brne	8000d300 <_dtoa_r+0x958>
8000d030:	02 92       	mov	r2,r1
8000d032:	e0 8f 01 72 	bral	8000d316 <_dtoa_r+0x96e>
8000d036:	40 85       	lddsp	r5,sp[0x20]
8000d038:	30 14       	mov	r4,1
8000d03a:	fa e8 00 10 	ld.d	r8,sp[16]
8000d03e:	fa ea 00 08 	ld.d	r10,sp[8]
8000d042:	e0 a0 0d 57 	rcall	8000eaf0 <__avr32_f64_div>
8000d046:	e0 a0 0c 53 	rcall	8000e8ec <__avr32_f64_to_s32>
8000d04a:	18 92       	mov	r2,r12
8000d04c:	e0 a0 0c 67 	rcall	8000e91a <__avr32_s32_to_f64>
8000d050:	fa e8 00 10 	ld.d	r8,sp[16]
8000d054:	e0 a0 0a 08 	rcall	8000e464 <__avr32_f64_mul>
8000d058:	14 98       	mov	r8,r10
8000d05a:	16 99       	mov	r9,r11
8000d05c:	fa ea 00 08 	ld.d	r10,sp[8]
8000d060:	e0 a0 0a ee 	rcall	8000e63c <__avr32_f64_sub>
8000d064:	fa eb 00 08 	st.d	sp[8],r10
8000d068:	e4 c8 ff d0 	sub	r8,r2,-48
8000d06c:	0a c8       	st.b	r5++,r8
8000d06e:	fc 19 40 24 	movh	r9,0x4024
8000d072:	30 08       	mov	r8,0
8000d074:	02 34       	cp.w	r4,r1
8000d076:	c3 31       	brne	8000d0dc <_dtoa_r+0x734>
8000d078:	fa e8 00 08 	ld.d	r8,sp[8]
8000d07c:	e0 a0 0b ae 	rcall	8000e7d8 <__avr32_f64_add>
8000d080:	16 91       	mov	r1,r11
8000d082:	14 90       	mov	r0,r10
8000d084:	14 98       	mov	r8,r10
8000d086:	02 99       	mov	r9,r1
8000d088:	fa ea 00 10 	ld.d	r10,sp[16]
8000d08c:	e0 a0 0c fe 	rcall	8000ea88 <__avr32_f64_cmp_lt>
8000d090:	c1 a1       	brne	8000d0c4 <_dtoa_r+0x71c>
8000d092:	fa e8 00 10 	ld.d	r8,sp[16]
8000d096:	00 9a       	mov	r10,r0
8000d098:	02 9b       	mov	r11,r1
8000d09a:	e0 a0 0c b0 	rcall	8000e9fa <__avr32_f64_cmp_eq>
8000d09e:	e0 80 02 5e 	breq	8000d55a <_dtoa_r+0xbb2>
8000d0a2:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000d0a6:	c0 f1       	brne	8000d0c4 <_dtoa_r+0x71c>
8000d0a8:	e0 8f 02 59 	bral	8000d55a <_dtoa_r+0xbb2>
8000d0ac:	40 8a       	lddsp	r10,sp[0x20]
8000d0ae:	14 38       	cp.w	r8,r10
8000d0b0:	c0 30       	breq	8000d0b6 <_dtoa_r+0x70e>
8000d0b2:	10 95       	mov	r5,r8
8000d0b4:	c0 98       	rjmp	8000d0c6 <_dtoa_r+0x71e>
8000d0b6:	33 08       	mov	r8,48
8000d0b8:	40 89       	lddsp	r9,sp[0x20]
8000d0ba:	2f f6       	sub	r6,-1
8000d0bc:	b2 88       	st.b	r9[0x0],r8
8000d0be:	40 88       	lddsp	r8,sp[0x20]
8000d0c0:	c0 88       	rjmp	8000d0d0 <_dtoa_r+0x728>
8000d0c2:	40 66       	lddsp	r6,sp[0x18]
8000d0c4:	33 99       	mov	r9,57
8000d0c6:	0a 98       	mov	r8,r5
8000d0c8:	11 7a       	ld.ub	r10,--r8
8000d0ca:	f2 0a 18 00 	cp.b	r10,r9
8000d0ce:	ce f0       	breq	8000d0ac <_dtoa_r+0x704>
8000d0d0:	50 66       	stdsp	sp[0x18],r6
8000d0d2:	11 89       	ld.ub	r9,r8[0x0]
8000d0d4:	2f f9       	sub	r9,-1
8000d0d6:	b0 89       	st.b	r8[0x0],r9
8000d0d8:	e0 8f 02 42 	bral	8000d55c <_dtoa_r+0xbb4>
8000d0dc:	e0 a0 09 c4 	rcall	8000e464 <__avr32_f64_mul>
8000d0e0:	2f f4       	sub	r4,-1
8000d0e2:	fa eb 00 08 	st.d	sp[8],r10
8000d0e6:	30 08       	mov	r8,0
8000d0e8:	30 09       	mov	r9,0
8000d0ea:	e0 a0 0c 88 	rcall	8000e9fa <__avr32_f64_cmp_eq>
8000d0ee:	ca 60       	breq	8000d03a <_dtoa_r+0x692>
8000d0f0:	e0 8f 02 35 	bral	8000d55a <_dtoa_r+0xbb2>
8000d0f4:	40 d8       	lddsp	r8,sp[0x34]
8000d0f6:	58 08       	cp.w	r8,0
8000d0f8:	c0 51       	brne	8000d102 <_dtoa_r+0x75a>
8000d0fa:	04 98       	mov	r8,r2
8000d0fc:	00 95       	mov	r5,r0
8000d0fe:	40 d4       	lddsp	r4,sp[0x34]
8000d100:	c3 78       	rjmp	8000d16e <_dtoa_r+0x7c6>
8000d102:	40 c5       	lddsp	r5,sp[0x30]
8000d104:	58 15       	cp.w	r5,1
8000d106:	e0 89 00 0f 	brgt	8000d124 <_dtoa_r+0x77c>
8000d10a:	41 74       	lddsp	r4,sp[0x5c]
8000d10c:	58 04       	cp.w	r4,0
8000d10e:	c0 40       	breq	8000d116 <_dtoa_r+0x76e>
8000d110:	f4 c9 fb cd 	sub	r9,r10,-1075
8000d114:	c0 48       	rjmp	8000d11c <_dtoa_r+0x774>
8000d116:	41 99       	lddsp	r9,sp[0x64]
8000d118:	f2 09 11 36 	rsub	r9,r9,54
8000d11c:	04 98       	mov	r8,r2
8000d11e:	00 95       	mov	r5,r0
8000d120:	c1 c8       	rjmp	8000d158 <_dtoa_r+0x7b0>
8000d122:	d7 03       	nop
8000d124:	e2 c8 00 01 	sub	r8,r1,1
8000d128:	58 01       	cp.w	r1,0
8000d12a:	e0 05 17 40 	movge	r5,r0
8000d12e:	e2 09 17 40 	movge	r9,r1
8000d132:	e1 d1 e5 15 	sublt	r5,r0,r1
8000d136:	f9 b9 05 00 	movlt	r9,0
8000d13a:	10 32       	cp.w	r2,r8
8000d13c:	e5 d8 e4 18 	subge	r8,r2,r8
8000d140:	f1 d2 e5 18 	sublt	r8,r8,r2
8000d144:	e5 d8 e5 02 	addlt	r2,r2,r8
8000d148:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000d14c:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000d150:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000d154:	f9 b8 05 00 	movlt	r8,0
8000d158:	40 4b       	lddsp	r11,sp[0x10]
8000d15a:	12 0b       	add	r11,r9
8000d15c:	50 08       	stdsp	sp[0x0],r8
8000d15e:	50 4b       	stdsp	sp[0x10],r11
8000d160:	12 00       	add	r0,r9
8000d162:	30 1b       	mov	r11,1
8000d164:	0e 9c       	mov	r12,r7
8000d166:	e0 a0 07 3f 	rcall	8000dfe4 <__i2b>
8000d16a:	40 08       	lddsp	r8,sp[0x0]
8000d16c:	18 94       	mov	r4,r12
8000d16e:	40 4a       	lddsp	r10,sp[0x10]
8000d170:	58 05       	cp.w	r5,0
8000d172:	5f 99       	srgt	r9
8000d174:	58 0a       	cp.w	r10,0
8000d176:	5f 9a       	srgt	r10
8000d178:	f5 e9 00 09 	and	r9,r10,r9
8000d17c:	c0 80       	breq	8000d18c <_dtoa_r+0x7e4>
8000d17e:	40 4c       	lddsp	r12,sp[0x10]
8000d180:	f8 05 0d 49 	min	r9,r12,r5
8000d184:	12 1c       	sub	r12,r9
8000d186:	12 10       	sub	r0,r9
8000d188:	50 4c       	stdsp	sp[0x10],r12
8000d18a:	12 15       	sub	r5,r9
8000d18c:	58 02       	cp.w	r2,0
8000d18e:	e0 8a 00 27 	brle	8000d1dc <_dtoa_r+0x834>
8000d192:	40 db       	lddsp	r11,sp[0x34]
8000d194:	58 0b       	cp.w	r11,0
8000d196:	c1 d0       	breq	8000d1d0 <_dtoa_r+0x828>
8000d198:	58 08       	cp.w	r8,0
8000d19a:	e0 8a 00 17 	brle	8000d1c8 <_dtoa_r+0x820>
8000d19e:	10 9a       	mov	r10,r8
8000d1a0:	50 08       	stdsp	sp[0x0],r8
8000d1a2:	08 9b       	mov	r11,r4
8000d1a4:	0e 9c       	mov	r12,r7
8000d1a6:	e0 a0 07 65 	rcall	8000e070 <__pow5mult>
8000d1aa:	06 9a       	mov	r10,r3
8000d1ac:	18 9b       	mov	r11,r12
8000d1ae:	18 94       	mov	r4,r12
8000d1b0:	0e 9c       	mov	r12,r7
8000d1b2:	e0 a0 06 99 	rcall	8000dee4 <__multiply>
8000d1b6:	18 99       	mov	r9,r12
8000d1b8:	06 9b       	mov	r11,r3
8000d1ba:	50 19       	stdsp	sp[0x4],r9
8000d1bc:	0e 9c       	mov	r12,r7
8000d1be:	e0 a0 05 45 	rcall	8000dc48 <_Bfree>
8000d1c2:	40 19       	lddsp	r9,sp[0x4]
8000d1c4:	40 08       	lddsp	r8,sp[0x0]
8000d1c6:	12 93       	mov	r3,r9
8000d1c8:	e4 08 01 0a 	sub	r10,r2,r8
8000d1cc:	c0 80       	breq	8000d1dc <_dtoa_r+0x834>
8000d1ce:	c0 28       	rjmp	8000d1d2 <_dtoa_r+0x82a>
8000d1d0:	04 9a       	mov	r10,r2
8000d1d2:	06 9b       	mov	r11,r3
8000d1d4:	0e 9c       	mov	r12,r7
8000d1d6:	e0 a0 07 4d 	rcall	8000e070 <__pow5mult>
8000d1da:	18 93       	mov	r3,r12
8000d1dc:	30 1b       	mov	r11,1
8000d1de:	0e 9c       	mov	r12,r7
8000d1e0:	e0 a0 07 02 	rcall	8000dfe4 <__i2b>
8000d1e4:	41 1a       	lddsp	r10,sp[0x44]
8000d1e6:	18 92       	mov	r2,r12
8000d1e8:	58 0a       	cp.w	r10,0
8000d1ea:	e0 8a 00 07 	brle	8000d1f8 <_dtoa_r+0x850>
8000d1ee:	18 9b       	mov	r11,r12
8000d1f0:	0e 9c       	mov	r12,r7
8000d1f2:	e0 a0 07 3f 	rcall	8000e070 <__pow5mult>
8000d1f6:	18 92       	mov	r2,r12
8000d1f8:	40 c9       	lddsp	r9,sp[0x30]
8000d1fa:	58 19       	cp.w	r9,1
8000d1fc:	e0 89 00 14 	brgt	8000d224 <_dtoa_r+0x87c>
8000d200:	40 38       	lddsp	r8,sp[0xc]
8000d202:	58 08       	cp.w	r8,0
8000d204:	c1 01       	brne	8000d224 <_dtoa_r+0x87c>
8000d206:	40 29       	lddsp	r9,sp[0x8]
8000d208:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000d20c:	c0 c1       	brne	8000d224 <_dtoa_r+0x87c>
8000d20e:	12 98       	mov	r8,r9
8000d210:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000d214:	c0 80       	breq	8000d224 <_dtoa_r+0x87c>
8000d216:	40 4c       	lddsp	r12,sp[0x10]
8000d218:	30 1b       	mov	r11,1
8000d21a:	2f fc       	sub	r12,-1
8000d21c:	2f f0       	sub	r0,-1
8000d21e:	50 4c       	stdsp	sp[0x10],r12
8000d220:	50 6b       	stdsp	sp[0x18],r11
8000d222:	c0 38       	rjmp	8000d228 <_dtoa_r+0x880>
8000d224:	30 0a       	mov	r10,0
8000d226:	50 6a       	stdsp	sp[0x18],r10
8000d228:	41 19       	lddsp	r9,sp[0x44]
8000d22a:	58 09       	cp.w	r9,0
8000d22c:	c0 31       	brne	8000d232 <_dtoa_r+0x88a>
8000d22e:	30 1c       	mov	r12,1
8000d230:	c0 98       	rjmp	8000d242 <_dtoa_r+0x89a>
8000d232:	64 48       	ld.w	r8,r2[0x10]
8000d234:	2f c8       	sub	r8,-4
8000d236:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000d23a:	e0 a0 04 77 	rcall	8000db28 <__hi0bits>
8000d23e:	f8 0c 11 20 	rsub	r12,r12,32
8000d242:	40 4b       	lddsp	r11,sp[0x10]
8000d244:	f8 0b 00 08 	add	r8,r12,r11
8000d248:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000d24c:	c0 c0       	breq	8000d264 <_dtoa_r+0x8bc>
8000d24e:	f0 08 11 20 	rsub	r8,r8,32
8000d252:	58 48       	cp.w	r8,4
8000d254:	e0 8a 00 06 	brle	8000d260 <_dtoa_r+0x8b8>
8000d258:	20 48       	sub	r8,4
8000d25a:	10 0b       	add	r11,r8
8000d25c:	50 4b       	stdsp	sp[0x10],r11
8000d25e:	c0 78       	rjmp	8000d26c <_dtoa_r+0x8c4>
8000d260:	58 48       	cp.w	r8,4
8000d262:	c0 70       	breq	8000d270 <_dtoa_r+0x8c8>
8000d264:	40 4a       	lddsp	r10,sp[0x10]
8000d266:	2e 48       	sub	r8,-28
8000d268:	10 0a       	add	r10,r8
8000d26a:	50 4a       	stdsp	sp[0x10],r10
8000d26c:	10 00       	add	r0,r8
8000d26e:	10 05       	add	r5,r8
8000d270:	58 00       	cp.w	r0,0
8000d272:	e0 8a 00 08 	brle	8000d282 <_dtoa_r+0x8da>
8000d276:	06 9b       	mov	r11,r3
8000d278:	00 9a       	mov	r10,r0
8000d27a:	0e 9c       	mov	r12,r7
8000d27c:	e0 a0 05 f0 	rcall	8000de5c <__lshift>
8000d280:	18 93       	mov	r3,r12
8000d282:	40 49       	lddsp	r9,sp[0x10]
8000d284:	58 09       	cp.w	r9,0
8000d286:	e0 8a 00 08 	brle	8000d296 <_dtoa_r+0x8ee>
8000d28a:	04 9b       	mov	r11,r2
8000d28c:	12 9a       	mov	r10,r9
8000d28e:	0e 9c       	mov	r12,r7
8000d290:	e0 a0 05 e6 	rcall	8000de5c <__lshift>
8000d294:	18 92       	mov	r2,r12
8000d296:	41 48       	lddsp	r8,sp[0x50]
8000d298:	58 08       	cp.w	r8,0
8000d29a:	c1 b0       	breq	8000d2d0 <_dtoa_r+0x928>
8000d29c:	04 9b       	mov	r11,r2
8000d29e:	06 9c       	mov	r12,r3
8000d2a0:	e0 a0 04 bb 	rcall	8000dc16 <__mcmp>
8000d2a4:	c1 64       	brge	8000d2d0 <_dtoa_r+0x928>
8000d2a6:	06 9b       	mov	r11,r3
8000d2a8:	30 09       	mov	r9,0
8000d2aa:	30 aa       	mov	r10,10
8000d2ac:	0e 9c       	mov	r12,r7
8000d2ae:	e0 a0 06 a3 	rcall	8000dff4 <__multadd>
8000d2b2:	20 16       	sub	r6,1
8000d2b4:	18 93       	mov	r3,r12
8000d2b6:	40 dc       	lddsp	r12,sp[0x34]
8000d2b8:	58 0c       	cp.w	r12,0
8000d2ba:	c0 31       	brne	8000d2c0 <_dtoa_r+0x918>
8000d2bc:	40 91       	lddsp	r1,sp[0x24]
8000d2be:	c0 98       	rjmp	8000d2d0 <_dtoa_r+0x928>
8000d2c0:	08 9b       	mov	r11,r4
8000d2c2:	40 91       	lddsp	r1,sp[0x24]
8000d2c4:	30 09       	mov	r9,0
8000d2c6:	30 aa       	mov	r10,10
8000d2c8:	0e 9c       	mov	r12,r7
8000d2ca:	e0 a0 06 95 	rcall	8000dff4 <__multadd>
8000d2ce:	18 94       	mov	r4,r12
8000d2d0:	58 01       	cp.w	r1,0
8000d2d2:	5f a9       	srle	r9
8000d2d4:	40 cb       	lddsp	r11,sp[0x30]
8000d2d6:	58 2b       	cp.w	r11,2
8000d2d8:	5f 98       	srgt	r8
8000d2da:	f3 e8 00 08 	and	r8,r9,r8
8000d2de:	c2 50       	breq	8000d328 <_dtoa_r+0x980>
8000d2e0:	58 01       	cp.w	r1,0
8000d2e2:	c1 11       	brne	8000d304 <_dtoa_r+0x95c>
8000d2e4:	04 9b       	mov	r11,r2
8000d2e6:	02 99       	mov	r9,r1
8000d2e8:	30 5a       	mov	r10,5
8000d2ea:	0e 9c       	mov	r12,r7
8000d2ec:	e0 a0 06 84 	rcall	8000dff4 <__multadd>
8000d2f0:	18 92       	mov	r2,r12
8000d2f2:	18 9b       	mov	r11,r12
8000d2f4:	06 9c       	mov	r12,r3
8000d2f6:	e0 a0 04 90 	rcall	8000dc16 <__mcmp>
8000d2fa:	e0 89 00 0f 	brgt	8000d318 <_dtoa_r+0x970>
8000d2fe:	c0 38       	rjmp	8000d304 <_dtoa_r+0x95c>
8000d300:	30 02       	mov	r2,0
8000d302:	04 94       	mov	r4,r2
8000d304:	40 ea       	lddsp	r10,sp[0x38]
8000d306:	30 09       	mov	r9,0
8000d308:	5c da       	com	r10
8000d30a:	40 85       	lddsp	r5,sp[0x20]
8000d30c:	50 6a       	stdsp	sp[0x18],r10
8000d30e:	50 49       	stdsp	sp[0x10],r9
8000d310:	c0 f9       	rjmp	8000d52e <_dtoa_r+0xb86>
8000d312:	08 92       	mov	r2,r4
8000d314:	40 66       	lddsp	r6,sp[0x18]
8000d316:	04 94       	mov	r4,r2
8000d318:	2f f6       	sub	r6,-1
8000d31a:	50 66       	stdsp	sp[0x18],r6
8000d31c:	33 18       	mov	r8,49
8000d31e:	40 85       	lddsp	r5,sp[0x20]
8000d320:	0a c8       	st.b	r5++,r8
8000d322:	30 08       	mov	r8,0
8000d324:	50 48       	stdsp	sp[0x10],r8
8000d326:	c0 49       	rjmp	8000d52e <_dtoa_r+0xb86>
8000d328:	40 dc       	lddsp	r12,sp[0x34]
8000d32a:	58 0c       	cp.w	r12,0
8000d32c:	e0 80 00 b5 	breq	8000d496 <_dtoa_r+0xaee>
8000d330:	58 05       	cp.w	r5,0
8000d332:	e0 8a 00 08 	brle	8000d342 <_dtoa_r+0x99a>
8000d336:	08 9b       	mov	r11,r4
8000d338:	0a 9a       	mov	r10,r5
8000d33a:	0e 9c       	mov	r12,r7
8000d33c:	e0 a0 05 90 	rcall	8000de5c <__lshift>
8000d340:	18 94       	mov	r4,r12
8000d342:	40 6b       	lddsp	r11,sp[0x18]
8000d344:	58 0b       	cp.w	r11,0
8000d346:	c0 31       	brne	8000d34c <_dtoa_r+0x9a4>
8000d348:	08 9c       	mov	r12,r4
8000d34a:	c1 38       	rjmp	8000d370 <_dtoa_r+0x9c8>
8000d34c:	68 1b       	ld.w	r11,r4[0x4]
8000d34e:	0e 9c       	mov	r12,r7
8000d350:	e0 a0 04 96 	rcall	8000dc7c <_Balloc>
8000d354:	68 4a       	ld.w	r10,r4[0x10]
8000d356:	18 95       	mov	r5,r12
8000d358:	e8 cb ff f4 	sub	r11,r4,-12
8000d35c:	2f ea       	sub	r10,-2
8000d35e:	2f 4c       	sub	r12,-12
8000d360:	a3 6a       	lsl	r10,0x2
8000d362:	fe b0 e5 6d 	rcall	80009e3c <memcpy>
8000d366:	0a 9b       	mov	r11,r5
8000d368:	30 1a       	mov	r10,1
8000d36a:	0e 9c       	mov	r12,r7
8000d36c:	e0 a0 05 78 	rcall	8000de5c <__lshift>
8000d370:	50 44       	stdsp	sp[0x10],r4
8000d372:	40 3a       	lddsp	r10,sp[0xc]
8000d374:	30 19       	mov	r9,1
8000d376:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000d37a:	18 94       	mov	r4,r12
8000d37c:	50 da       	stdsp	sp[0x34],r10
8000d37e:	40 85       	lddsp	r5,sp[0x20]
8000d380:	50 99       	stdsp	sp[0x24],r9
8000d382:	50 26       	stdsp	sp[0x8],r6
8000d384:	50 e1       	stdsp	sp[0x38],r1
8000d386:	04 9b       	mov	r11,r2
8000d388:	06 9c       	mov	r12,r3
8000d38a:	fe b0 fa 7f 	rcall	8000c888 <quorem>
8000d38e:	40 4b       	lddsp	r11,sp[0x10]
8000d390:	f8 c0 ff d0 	sub	r0,r12,-48
8000d394:	06 9c       	mov	r12,r3
8000d396:	e0 a0 04 40 	rcall	8000dc16 <__mcmp>
8000d39a:	08 9a       	mov	r10,r4
8000d39c:	50 6c       	stdsp	sp[0x18],r12
8000d39e:	04 9b       	mov	r11,r2
8000d3a0:	0e 9c       	mov	r12,r7
8000d3a2:	e0 a0 04 f5 	rcall	8000dd8c <__mdiff>
8000d3a6:	18 91       	mov	r1,r12
8000d3a8:	78 38       	ld.w	r8,r12[0xc]
8000d3aa:	58 08       	cp.w	r8,0
8000d3ac:	c0 30       	breq	8000d3b2 <_dtoa_r+0xa0a>
8000d3ae:	30 16       	mov	r6,1
8000d3b0:	c0 68       	rjmp	8000d3bc <_dtoa_r+0xa14>
8000d3b2:	18 9b       	mov	r11,r12
8000d3b4:	06 9c       	mov	r12,r3
8000d3b6:	e0 a0 04 30 	rcall	8000dc16 <__mcmp>
8000d3ba:	18 96       	mov	r6,r12
8000d3bc:	0e 9c       	mov	r12,r7
8000d3be:	02 9b       	mov	r11,r1
8000d3c0:	e0 a0 04 44 	rcall	8000dc48 <_Bfree>
8000d3c4:	40 cc       	lddsp	r12,sp[0x30]
8000d3c6:	ed ec 10 08 	or	r8,r6,r12
8000d3ca:	c0 d1       	brne	8000d3e4 <_dtoa_r+0xa3c>
8000d3cc:	40 db       	lddsp	r11,sp[0x34]
8000d3ce:	58 0b       	cp.w	r11,0
8000d3d0:	c0 a1       	brne	8000d3e4 <_dtoa_r+0xa3c>
8000d3d2:	40 26       	lddsp	r6,sp[0x8]
8000d3d4:	e0 40 00 39 	cp.w	r0,57
8000d3d8:	c3 00       	breq	8000d438 <_dtoa_r+0xa90>
8000d3da:	40 6a       	lddsp	r10,sp[0x18]
8000d3dc:	58 0a       	cp.w	r10,0
8000d3de:	e0 89 00 24 	brgt	8000d426 <_dtoa_r+0xa7e>
8000d3e2:	c2 f8       	rjmp	8000d440 <_dtoa_r+0xa98>
8000d3e4:	40 69       	lddsp	r9,sp[0x18]
8000d3e6:	58 09       	cp.w	r9,0
8000d3e8:	c0 85       	brlt	8000d3f8 <_dtoa_r+0xa50>
8000d3ea:	12 98       	mov	r8,r9
8000d3ec:	40 cc       	lddsp	r12,sp[0x30]
8000d3ee:	18 48       	or	r8,r12
8000d3f0:	c1 d1       	brne	8000d42a <_dtoa_r+0xa82>
8000d3f2:	40 db       	lddsp	r11,sp[0x34]
8000d3f4:	58 0b       	cp.w	r11,0
8000d3f6:	c1 a1       	brne	8000d42a <_dtoa_r+0xa82>
8000d3f8:	0c 99       	mov	r9,r6
8000d3fa:	40 26       	lddsp	r6,sp[0x8]
8000d3fc:	58 09       	cp.w	r9,0
8000d3fe:	e0 8a 00 21 	brle	8000d440 <_dtoa_r+0xa98>
8000d402:	06 9b       	mov	r11,r3
8000d404:	30 1a       	mov	r10,1
8000d406:	0e 9c       	mov	r12,r7
8000d408:	e0 a0 05 2a 	rcall	8000de5c <__lshift>
8000d40c:	04 9b       	mov	r11,r2
8000d40e:	18 93       	mov	r3,r12
8000d410:	e0 a0 04 03 	rcall	8000dc16 <__mcmp>
8000d414:	e0 89 00 06 	brgt	8000d420 <_dtoa_r+0xa78>
8000d418:	c1 41       	brne	8000d440 <_dtoa_r+0xa98>
8000d41a:	ed b0 00 00 	bld	r0,0x0
8000d41e:	c1 11       	brne	8000d440 <_dtoa_r+0xa98>
8000d420:	e0 40 00 39 	cp.w	r0,57
8000d424:	c0 a0       	breq	8000d438 <_dtoa_r+0xa90>
8000d426:	2f f0       	sub	r0,-1
8000d428:	c0 c8       	rjmp	8000d440 <_dtoa_r+0xa98>
8000d42a:	58 06       	cp.w	r6,0
8000d42c:	e0 8a 00 0c 	brle	8000d444 <_dtoa_r+0xa9c>
8000d430:	40 26       	lddsp	r6,sp[0x8]
8000d432:	e0 40 00 39 	cp.w	r0,57
8000d436:	c0 41       	brne	8000d43e <_dtoa_r+0xa96>
8000d438:	33 98       	mov	r8,57
8000d43a:	0a c8       	st.b	r5++,r8
8000d43c:	c6 78       	rjmp	8000d50a <_dtoa_r+0xb62>
8000d43e:	2f f0       	sub	r0,-1
8000d440:	0a c0       	st.b	r5++,r0
8000d442:	c7 58       	rjmp	8000d52c <_dtoa_r+0xb84>
8000d444:	0a c0       	st.b	r5++,r0
8000d446:	40 9a       	lddsp	r10,sp[0x24]
8000d448:	40 e9       	lddsp	r9,sp[0x38]
8000d44a:	12 3a       	cp.w	r10,r9
8000d44c:	c4 30       	breq	8000d4d2 <_dtoa_r+0xb2a>
8000d44e:	06 9b       	mov	r11,r3
8000d450:	30 09       	mov	r9,0
8000d452:	30 aa       	mov	r10,10
8000d454:	0e 9c       	mov	r12,r7
8000d456:	e0 a0 05 cf 	rcall	8000dff4 <__multadd>
8000d45a:	40 48       	lddsp	r8,sp[0x10]
8000d45c:	18 93       	mov	r3,r12
8000d45e:	08 38       	cp.w	r8,r4
8000d460:	c0 91       	brne	8000d472 <_dtoa_r+0xaca>
8000d462:	10 9b       	mov	r11,r8
8000d464:	30 09       	mov	r9,0
8000d466:	30 aa       	mov	r10,10
8000d468:	0e 9c       	mov	r12,r7
8000d46a:	e0 a0 05 c5 	rcall	8000dff4 <__multadd>
8000d46e:	50 4c       	stdsp	sp[0x10],r12
8000d470:	c0 e8       	rjmp	8000d48c <_dtoa_r+0xae4>
8000d472:	40 4b       	lddsp	r11,sp[0x10]
8000d474:	30 09       	mov	r9,0
8000d476:	30 aa       	mov	r10,10
8000d478:	0e 9c       	mov	r12,r7
8000d47a:	e0 a0 05 bd 	rcall	8000dff4 <__multadd>
8000d47e:	08 9b       	mov	r11,r4
8000d480:	50 4c       	stdsp	sp[0x10],r12
8000d482:	30 09       	mov	r9,0
8000d484:	30 aa       	mov	r10,10
8000d486:	0e 9c       	mov	r12,r7
8000d488:	e0 a0 05 b6 	rcall	8000dff4 <__multadd>
8000d48c:	18 94       	mov	r4,r12
8000d48e:	40 9c       	lddsp	r12,sp[0x24]
8000d490:	2f fc       	sub	r12,-1
8000d492:	50 9c       	stdsp	sp[0x24],r12
8000d494:	c7 9b       	rjmp	8000d386 <_dtoa_r+0x9de>
8000d496:	30 18       	mov	r8,1
8000d498:	06 90       	mov	r0,r3
8000d49a:	40 85       	lddsp	r5,sp[0x20]
8000d49c:	08 93       	mov	r3,r4
8000d49e:	0c 94       	mov	r4,r6
8000d4a0:	10 96       	mov	r6,r8
8000d4a2:	04 9b       	mov	r11,r2
8000d4a4:	00 9c       	mov	r12,r0
8000d4a6:	fe b0 f9 f1 	rcall	8000c888 <quorem>
8000d4aa:	2d 0c       	sub	r12,-48
8000d4ac:	0a cc       	st.b	r5++,r12
8000d4ae:	02 36       	cp.w	r6,r1
8000d4b0:	c0 a4       	brge	8000d4c4 <_dtoa_r+0xb1c>
8000d4b2:	00 9b       	mov	r11,r0
8000d4b4:	30 09       	mov	r9,0
8000d4b6:	30 aa       	mov	r10,10
8000d4b8:	0e 9c       	mov	r12,r7
8000d4ba:	2f f6       	sub	r6,-1
8000d4bc:	e0 a0 05 9c 	rcall	8000dff4 <__multadd>
8000d4c0:	18 90       	mov	r0,r12
8000d4c2:	cf 0b       	rjmp	8000d4a2 <_dtoa_r+0xafa>
8000d4c4:	08 96       	mov	r6,r4
8000d4c6:	30 0b       	mov	r11,0
8000d4c8:	06 94       	mov	r4,r3
8000d4ca:	50 4b       	stdsp	sp[0x10],r11
8000d4cc:	00 93       	mov	r3,r0
8000d4ce:	18 90       	mov	r0,r12
8000d4d0:	c0 28       	rjmp	8000d4d4 <_dtoa_r+0xb2c>
8000d4d2:	40 26       	lddsp	r6,sp[0x8]
8000d4d4:	06 9b       	mov	r11,r3
8000d4d6:	30 1a       	mov	r10,1
8000d4d8:	0e 9c       	mov	r12,r7
8000d4da:	e0 a0 04 c1 	rcall	8000de5c <__lshift>
8000d4de:	04 9b       	mov	r11,r2
8000d4e0:	18 93       	mov	r3,r12
8000d4e2:	e0 a0 03 9a 	rcall	8000dc16 <__mcmp>
8000d4e6:	e0 89 00 12 	brgt	8000d50a <_dtoa_r+0xb62>
8000d4ea:	c1 b1       	brne	8000d520 <_dtoa_r+0xb78>
8000d4ec:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000d4f0:	c0 d1       	brne	8000d50a <_dtoa_r+0xb62>
8000d4f2:	c1 78       	rjmp	8000d520 <_dtoa_r+0xb78>
8000d4f4:	40 89       	lddsp	r9,sp[0x20]
8000d4f6:	12 38       	cp.w	r8,r9
8000d4f8:	c0 30       	breq	8000d4fe <_dtoa_r+0xb56>
8000d4fa:	10 95       	mov	r5,r8
8000d4fc:	c0 88       	rjmp	8000d50c <_dtoa_r+0xb64>
8000d4fe:	2f f6       	sub	r6,-1
8000d500:	50 66       	stdsp	sp[0x18],r6
8000d502:	33 18       	mov	r8,49
8000d504:	40 8c       	lddsp	r12,sp[0x20]
8000d506:	b8 88       	st.b	r12[0x0],r8
8000d508:	c1 38       	rjmp	8000d52e <_dtoa_r+0xb86>
8000d50a:	33 9a       	mov	r10,57
8000d50c:	0a 98       	mov	r8,r5
8000d50e:	11 79       	ld.ub	r9,--r8
8000d510:	f4 09 18 00 	cp.b	r9,r10
8000d514:	cf 00       	breq	8000d4f4 <_dtoa_r+0xb4c>
8000d516:	2f f9       	sub	r9,-1
8000d518:	b0 89       	st.b	r8[0x0],r9
8000d51a:	c0 98       	rjmp	8000d52c <_dtoa_r+0xb84>
8000d51c:	10 95       	mov	r5,r8
8000d51e:	c0 28       	rjmp	8000d522 <_dtoa_r+0xb7a>
8000d520:	33 09       	mov	r9,48
8000d522:	0a 98       	mov	r8,r5
8000d524:	11 7a       	ld.ub	r10,--r8
8000d526:	f2 0a 18 00 	cp.b	r10,r9
8000d52a:	cf 90       	breq	8000d51c <_dtoa_r+0xb74>
8000d52c:	50 66       	stdsp	sp[0x18],r6
8000d52e:	04 9b       	mov	r11,r2
8000d530:	0e 9c       	mov	r12,r7
8000d532:	e0 a0 03 8b 	rcall	8000dc48 <_Bfree>
8000d536:	58 04       	cp.w	r4,0
8000d538:	c1 20       	breq	8000d55c <_dtoa_r+0xbb4>
8000d53a:	40 4b       	lddsp	r11,sp[0x10]
8000d53c:	08 3b       	cp.w	r11,r4
8000d53e:	5f 19       	srne	r9
8000d540:	58 0b       	cp.w	r11,0
8000d542:	5f 18       	srne	r8
8000d544:	f3 e8 00 08 	and	r8,r9,r8
8000d548:	c0 40       	breq	8000d550 <_dtoa_r+0xba8>
8000d54a:	0e 9c       	mov	r12,r7
8000d54c:	e0 a0 03 7e 	rcall	8000dc48 <_Bfree>
8000d550:	08 9b       	mov	r11,r4
8000d552:	0e 9c       	mov	r12,r7
8000d554:	e0 a0 03 7a 	rcall	8000dc48 <_Bfree>
8000d558:	c0 28       	rjmp	8000d55c <_dtoa_r+0xbb4>
8000d55a:	50 66       	stdsp	sp[0x18],r6
8000d55c:	0e 9c       	mov	r12,r7
8000d55e:	06 9b       	mov	r11,r3
8000d560:	e0 a0 03 74 	rcall	8000dc48 <_Bfree>
8000d564:	30 08       	mov	r8,0
8000d566:	aa 88       	st.b	r5[0x0],r8
8000d568:	40 68       	lddsp	r8,sp[0x18]
8000d56a:	41 5a       	lddsp	r10,sp[0x54]
8000d56c:	2f f8       	sub	r8,-1
8000d56e:	41 29       	lddsp	r9,sp[0x48]
8000d570:	95 08       	st.w	r10[0x0],r8
8000d572:	40 8c       	lddsp	r12,sp[0x20]
8000d574:	58 09       	cp.w	r9,0
8000d576:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000d57a:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000d57e:	2e 6d       	sub	sp,-104
8000d580:	d8 32       	popm	r0-r7,pc
8000d582:	d7 03       	nop

8000d584 <_fclose_r>:
8000d584:	d4 21       	pushm	r4-r7,lr
8000d586:	18 96       	mov	r6,r12
8000d588:	16 97       	mov	r7,r11
8000d58a:	58 0b       	cp.w	r11,0
8000d58c:	c0 31       	brne	8000d592 <_fclose_r+0xe>
8000d58e:	16 95       	mov	r5,r11
8000d590:	c5 28       	rjmp	8000d634 <_fclose_r+0xb0>
8000d592:	fe b0 e5 b9 	rcall	8000a104 <__sfp_lock_acquire>
8000d596:	58 06       	cp.w	r6,0
8000d598:	c0 70       	breq	8000d5a6 <_fclose_r+0x22>
8000d59a:	6c 68       	ld.w	r8,r6[0x18]
8000d59c:	58 08       	cp.w	r8,0
8000d59e:	c0 41       	brne	8000d5a6 <_fclose_r+0x22>
8000d5a0:	0c 9c       	mov	r12,r6
8000d5a2:	fe b0 e6 03 	rcall	8000a1a8 <__sinit>
8000d5a6:	fe c8 dd 7e 	sub	r8,pc,-8834
8000d5aa:	10 37       	cp.w	r7,r8
8000d5ac:	c0 31       	brne	8000d5b2 <_fclose_r+0x2e>
8000d5ae:	6c 07       	ld.w	r7,r6[0x0]
8000d5b0:	c0 c8       	rjmp	8000d5c8 <_fclose_r+0x44>
8000d5b2:	fe c8 dd 6a 	sub	r8,pc,-8854
8000d5b6:	10 37       	cp.w	r7,r8
8000d5b8:	c0 31       	brne	8000d5be <_fclose_r+0x3a>
8000d5ba:	6c 17       	ld.w	r7,r6[0x4]
8000d5bc:	c0 68       	rjmp	8000d5c8 <_fclose_r+0x44>
8000d5be:	fe c8 dd 56 	sub	r8,pc,-8874
8000d5c2:	10 37       	cp.w	r7,r8
8000d5c4:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000d5c8:	8e 69       	ld.sh	r9,r7[0xc]
8000d5ca:	30 08       	mov	r8,0
8000d5cc:	f0 09 19 00 	cp.h	r9,r8
8000d5d0:	c0 51       	brne	8000d5da <_fclose_r+0x56>
8000d5d2:	fe b0 e5 9a 	rcall	8000a106 <__sfp_lock_release>
8000d5d6:	30 05       	mov	r5,0
8000d5d8:	c2 e8       	rjmp	8000d634 <_fclose_r+0xb0>
8000d5da:	0e 9b       	mov	r11,r7
8000d5dc:	0c 9c       	mov	r12,r6
8000d5de:	c3 5c       	rcall	8000d648 <_fflush_r>
8000d5e0:	6e c8       	ld.w	r8,r7[0x30]
8000d5e2:	18 95       	mov	r5,r12
8000d5e4:	58 08       	cp.w	r8,0
8000d5e6:	c0 60       	breq	8000d5f2 <_fclose_r+0x6e>
8000d5e8:	6e 8b       	ld.w	r11,r7[0x20]
8000d5ea:	0c 9c       	mov	r12,r6
8000d5ec:	5d 18       	icall	r8
8000d5ee:	f9 b5 05 ff 	movlt	r5,-1
8000d5f2:	8e 68       	ld.sh	r8,r7[0xc]
8000d5f4:	ed b8 00 07 	bld	r8,0x7
8000d5f8:	c0 51       	brne	8000d602 <_fclose_r+0x7e>
8000d5fa:	6e 4b       	ld.w	r11,r7[0x10]
8000d5fc:	0c 9c       	mov	r12,r6
8000d5fe:	fe b0 e6 69 	rcall	8000a2d0 <_free_r>
8000d602:	6e db       	ld.w	r11,r7[0x34]
8000d604:	58 0b       	cp.w	r11,0
8000d606:	c0 a0       	breq	8000d61a <_fclose_r+0x96>
8000d608:	ee c8 ff bc 	sub	r8,r7,-68
8000d60c:	10 3b       	cp.w	r11,r8
8000d60e:	c0 40       	breq	8000d616 <_fclose_r+0x92>
8000d610:	0c 9c       	mov	r12,r6
8000d612:	fe b0 e6 5f 	rcall	8000a2d0 <_free_r>
8000d616:	30 08       	mov	r8,0
8000d618:	8f d8       	st.w	r7[0x34],r8
8000d61a:	6f 2b       	ld.w	r11,r7[0x48]
8000d61c:	58 0b       	cp.w	r11,0
8000d61e:	c0 70       	breq	8000d62c <_fclose_r+0xa8>
8000d620:	0c 9c       	mov	r12,r6
8000d622:	fe b0 e6 57 	rcall	8000a2d0 <_free_r>
8000d626:	30 08       	mov	r8,0
8000d628:	ef 48 00 48 	st.w	r7[72],r8
8000d62c:	30 08       	mov	r8,0
8000d62e:	ae 68       	st.h	r7[0xc],r8
8000d630:	fe b0 e5 6b 	rcall	8000a106 <__sfp_lock_release>
8000d634:	0a 9c       	mov	r12,r5
8000d636:	d8 22       	popm	r4-r7,pc

8000d638 <fclose>:
8000d638:	d4 01       	pushm	lr
8000d63a:	e0 68 04 b8 	mov	r8,1208
8000d63e:	18 9b       	mov	r11,r12
8000d640:	70 0c       	ld.w	r12,r8[0x0]
8000d642:	ca 1f       	rcall	8000d584 <_fclose_r>
8000d644:	d8 02       	popm	pc
8000d646:	d7 03       	nop

8000d648 <_fflush_r>:
8000d648:	d4 21       	pushm	r4-r7,lr
8000d64a:	16 97       	mov	r7,r11
8000d64c:	18 96       	mov	r6,r12
8000d64e:	76 48       	ld.w	r8,r11[0x10]
8000d650:	58 08       	cp.w	r8,0
8000d652:	e0 80 00 81 	breq	8000d754 <_fflush_r+0x10c>
8000d656:	58 0c       	cp.w	r12,0
8000d658:	c0 60       	breq	8000d664 <_fflush_r+0x1c>
8000d65a:	78 68       	ld.w	r8,r12[0x18]
8000d65c:	58 08       	cp.w	r8,0
8000d65e:	c0 31       	brne	8000d664 <_fflush_r+0x1c>
8000d660:	fe b0 e5 a4 	rcall	8000a1a8 <__sinit>
8000d664:	fe c8 de 3c 	sub	r8,pc,-8644
8000d668:	10 37       	cp.w	r7,r8
8000d66a:	c0 31       	brne	8000d670 <_fflush_r+0x28>
8000d66c:	6c 07       	ld.w	r7,r6[0x0]
8000d66e:	c0 c8       	rjmp	8000d686 <_fflush_r+0x3e>
8000d670:	fe c8 de 28 	sub	r8,pc,-8664
8000d674:	10 37       	cp.w	r7,r8
8000d676:	c0 31       	brne	8000d67c <_fflush_r+0x34>
8000d678:	6c 17       	ld.w	r7,r6[0x4]
8000d67a:	c0 68       	rjmp	8000d686 <_fflush_r+0x3e>
8000d67c:	fe c8 de 14 	sub	r8,pc,-8684
8000d680:	10 37       	cp.w	r7,r8
8000d682:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000d686:	8e 6a       	ld.sh	r10,r7[0xc]
8000d688:	14 98       	mov	r8,r10
8000d68a:	ed ba 00 03 	bld	r10,0x3
8000d68e:	c4 20       	breq	8000d712 <_fflush_r+0xca>
8000d690:	ab ba       	sbr	r10,0xb
8000d692:	ae 6a       	st.h	r7[0xc],r10
8000d694:	6e 18       	ld.w	r8,r7[0x4]
8000d696:	58 08       	cp.w	r8,0
8000d698:	e0 89 00 06 	brgt	8000d6a4 <_fflush_r+0x5c>
8000d69c:	6f 08       	ld.w	r8,r7[0x40]
8000d69e:	58 08       	cp.w	r8,0
8000d6a0:	e0 8a 00 5a 	brle	8000d754 <_fflush_r+0x10c>
8000d6a4:	6e b8       	ld.w	r8,r7[0x2c]
8000d6a6:	58 08       	cp.w	r8,0
8000d6a8:	c5 60       	breq	8000d754 <_fflush_r+0x10c>
8000d6aa:	e2 1a 10 00 	andl	r10,0x1000,COH
8000d6ae:	c0 30       	breq	8000d6b4 <_fflush_r+0x6c>
8000d6b0:	6f 55       	ld.w	r5,r7[0x54]
8000d6b2:	c0 f8       	rjmp	8000d6d0 <_fflush_r+0x88>
8000d6b4:	30 19       	mov	r9,1
8000d6b6:	6e 8b       	ld.w	r11,r7[0x20]
8000d6b8:	0c 9c       	mov	r12,r6
8000d6ba:	5d 18       	icall	r8
8000d6bc:	18 95       	mov	r5,r12
8000d6be:	5b fc       	cp.w	r12,-1
8000d6c0:	c0 81       	brne	8000d6d0 <_fflush_r+0x88>
8000d6c2:	6c 38       	ld.w	r8,r6[0xc]
8000d6c4:	59 d8       	cp.w	r8,29
8000d6c6:	c4 70       	breq	8000d754 <_fflush_r+0x10c>
8000d6c8:	8e 68       	ld.sh	r8,r7[0xc]
8000d6ca:	a7 a8       	sbr	r8,0x6
8000d6cc:	ae 68       	st.h	r7[0xc],r8
8000d6ce:	d8 22       	popm	r4-r7,pc
8000d6d0:	8e 68       	ld.sh	r8,r7[0xc]
8000d6d2:	ed b8 00 02 	bld	r8,0x2
8000d6d6:	c0 91       	brne	8000d6e8 <_fflush_r+0xa0>
8000d6d8:	6e 18       	ld.w	r8,r7[0x4]
8000d6da:	10 15       	sub	r5,r8
8000d6dc:	6e d8       	ld.w	r8,r7[0x34]
8000d6de:	58 08       	cp.w	r8,0
8000d6e0:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000d6e4:	eb d8 e1 15 	subne	r5,r5,r8
8000d6e8:	6e b8       	ld.w	r8,r7[0x2c]
8000d6ea:	0c 9c       	mov	r12,r6
8000d6ec:	30 09       	mov	r9,0
8000d6ee:	0a 9a       	mov	r10,r5
8000d6f0:	6e 8b       	ld.w	r11,r7[0x20]
8000d6f2:	5d 18       	icall	r8
8000d6f4:	8e 68       	ld.sh	r8,r7[0xc]
8000d6f6:	0a 3c       	cp.w	r12,r5
8000d6f8:	c2 61       	brne	8000d744 <_fflush_r+0xfc>
8000d6fa:	ab d8       	cbr	r8,0xb
8000d6fc:	30 0c       	mov	r12,0
8000d6fe:	6e 49       	ld.w	r9,r7[0x10]
8000d700:	ae 68       	st.h	r7[0xc],r8
8000d702:	8f 1c       	st.w	r7[0x4],r12
8000d704:	8f 09       	st.w	r7[0x0],r9
8000d706:	ed b8 00 0c 	bld	r8,0xc
8000d70a:	c2 51       	brne	8000d754 <_fflush_r+0x10c>
8000d70c:	ef 45 00 54 	st.w	r7[84],r5
8000d710:	d8 22       	popm	r4-r7,pc
8000d712:	6e 45       	ld.w	r5,r7[0x10]
8000d714:	58 05       	cp.w	r5,0
8000d716:	c1 f0       	breq	8000d754 <_fflush_r+0x10c>
8000d718:	6e 04       	ld.w	r4,r7[0x0]
8000d71a:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000d71e:	8f 05       	st.w	r7[0x0],r5
8000d720:	f9 b8 01 00 	movne	r8,0
8000d724:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000d728:	0a 14       	sub	r4,r5
8000d72a:	8f 28       	st.w	r7[0x8],r8
8000d72c:	c1 18       	rjmp	8000d74e <_fflush_r+0x106>
8000d72e:	08 99       	mov	r9,r4
8000d730:	0a 9a       	mov	r10,r5
8000d732:	6e a8       	ld.w	r8,r7[0x28]
8000d734:	6e 8b       	ld.w	r11,r7[0x20]
8000d736:	0c 9c       	mov	r12,r6
8000d738:	5d 18       	icall	r8
8000d73a:	18 14       	sub	r4,r12
8000d73c:	58 0c       	cp.w	r12,0
8000d73e:	e0 89 00 07 	brgt	8000d74c <_fflush_r+0x104>
8000d742:	8e 68       	ld.sh	r8,r7[0xc]
8000d744:	a7 a8       	sbr	r8,0x6
8000d746:	3f fc       	mov	r12,-1
8000d748:	ae 68       	st.h	r7[0xc],r8
8000d74a:	d8 22       	popm	r4-r7,pc
8000d74c:	18 05       	add	r5,r12
8000d74e:	58 04       	cp.w	r4,0
8000d750:	fe 99 ff ef 	brgt	8000d72e <_fflush_r+0xe6>
8000d754:	d8 2a       	popm	r4-r7,pc,r12=0
8000d756:	d7 03       	nop

8000d758 <__sfvwrite_r>:
8000d758:	d4 31       	pushm	r0-r7,lr
8000d75a:	20 3d       	sub	sp,12
8000d75c:	14 94       	mov	r4,r10
8000d75e:	18 95       	mov	r5,r12
8000d760:	16 97       	mov	r7,r11
8000d762:	74 28       	ld.w	r8,r10[0x8]
8000d764:	58 08       	cp.w	r8,0
8000d766:	e0 80 01 3e 	breq	8000d9e2 <__sfvwrite_r+0x28a>
8000d76a:	96 68       	ld.sh	r8,r11[0xc]
8000d76c:	ed b8 00 03 	bld	r8,0x3
8000d770:	c0 41       	brne	8000d778 <__sfvwrite_r+0x20>
8000d772:	76 48       	ld.w	r8,r11[0x10]
8000d774:	58 08       	cp.w	r8,0
8000d776:	c0 c1       	brne	8000d78e <__sfvwrite_r+0x36>
8000d778:	0e 9b       	mov	r11,r7
8000d77a:	0a 9c       	mov	r12,r5
8000d77c:	fe b0 f8 08 	rcall	8000c78c <__swsetup_r>
8000d780:	c0 70       	breq	8000d78e <__sfvwrite_r+0x36>
8000d782:	8e 68       	ld.sh	r8,r7[0xc]
8000d784:	a7 a8       	sbr	r8,0x6
8000d786:	ae 68       	st.h	r7[0xc],r8
8000d788:	30 98       	mov	r8,9
8000d78a:	8b 38       	st.w	r5[0xc],r8
8000d78c:	c2 99       	rjmp	8000d9de <__sfvwrite_r+0x286>
8000d78e:	8e 63       	ld.sh	r3,r7[0xc]
8000d790:	68 00       	ld.w	r0,r4[0x0]
8000d792:	06 96       	mov	r6,r3
8000d794:	e2 16 00 02 	andl	r6,0x2,COH
8000d798:	c2 10       	breq	8000d7da <__sfvwrite_r+0x82>
8000d79a:	30 03       	mov	r3,0
8000d79c:	e0 62 04 00 	mov	r2,1024
8000d7a0:	06 96       	mov	r6,r3
8000d7a2:	c0 48       	rjmp	8000d7aa <__sfvwrite_r+0x52>
8000d7a4:	60 03       	ld.w	r3,r0[0x0]
8000d7a6:	60 16       	ld.w	r6,r0[0x4]
8000d7a8:	2f 80       	sub	r0,-8
8000d7aa:	58 06       	cp.w	r6,0
8000d7ac:	cf c0       	breq	8000d7a4 <__sfvwrite_r+0x4c>
8000d7ae:	e0 46 04 00 	cp.w	r6,1024
8000d7b2:	ec 09 17 80 	movls	r9,r6
8000d7b6:	e4 09 17 b0 	movhi	r9,r2
8000d7ba:	06 9a       	mov	r10,r3
8000d7bc:	6e a8       	ld.w	r8,r7[0x28]
8000d7be:	6e 8b       	ld.w	r11,r7[0x20]
8000d7c0:	0a 9c       	mov	r12,r5
8000d7c2:	5d 18       	icall	r8
8000d7c4:	18 16       	sub	r6,r12
8000d7c6:	58 0c       	cp.w	r12,0
8000d7c8:	e0 8a 01 08 	brle	8000d9d8 <__sfvwrite_r+0x280>
8000d7cc:	68 28       	ld.w	r8,r4[0x8]
8000d7ce:	18 18       	sub	r8,r12
8000d7d0:	89 28       	st.w	r4[0x8],r8
8000d7d2:	e0 80 01 08 	breq	8000d9e2 <__sfvwrite_r+0x28a>
8000d7d6:	18 03       	add	r3,r12
8000d7d8:	ce 9b       	rjmp	8000d7aa <__sfvwrite_r+0x52>
8000d7da:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000d7de:	c0 70       	breq	8000d7ec <__sfvwrite_r+0x94>
8000d7e0:	50 06       	stdsp	sp[0x0],r6
8000d7e2:	0c 93       	mov	r3,r6
8000d7e4:	0c 91       	mov	r1,r6
8000d7e6:	50 15       	stdsp	sp[0x4],r5
8000d7e8:	08 92       	mov	r2,r4
8000d7ea:	c9 c8       	rjmp	8000d922 <__sfvwrite_r+0x1ca>
8000d7ec:	06 96       	mov	r6,r3
8000d7ee:	08 91       	mov	r1,r4
8000d7f0:	c0 48       	rjmp	8000d7f8 <__sfvwrite_r+0xa0>
8000d7f2:	60 03       	ld.w	r3,r0[0x0]
8000d7f4:	60 16       	ld.w	r6,r0[0x4]
8000d7f6:	2f 80       	sub	r0,-8
8000d7f8:	58 06       	cp.w	r6,0
8000d7fa:	cf c0       	breq	8000d7f2 <__sfvwrite_r+0x9a>
8000d7fc:	8e 68       	ld.sh	r8,r7[0xc]
8000d7fe:	6e 24       	ld.w	r4,r7[0x8]
8000d800:	10 99       	mov	r9,r8
8000d802:	e2 19 02 00 	andl	r9,0x200,COH
8000d806:	c5 60       	breq	8000d8b2 <__sfvwrite_r+0x15a>
8000d808:	08 36       	cp.w	r6,r4
8000d80a:	c4 53       	brcs	8000d894 <__sfvwrite_r+0x13c>
8000d80c:	10 99       	mov	r9,r8
8000d80e:	e2 19 04 80 	andl	r9,0x480,COH
8000d812:	c4 10       	breq	8000d894 <__sfvwrite_r+0x13c>
8000d814:	6e 4b       	ld.w	r11,r7[0x10]
8000d816:	6e 09       	ld.w	r9,r7[0x0]
8000d818:	16 19       	sub	r9,r11
8000d81a:	50 09       	stdsp	sp[0x0],r9
8000d81c:	6e 59       	ld.w	r9,r7[0x14]
8000d81e:	10 9c       	mov	r12,r8
8000d820:	f2 09 00 1a 	add	r10,r9,r9<<0x1
8000d824:	30 28       	mov	r8,2
8000d826:	f4 08 0c 08 	divs	r8,r10,r8
8000d82a:	fa e9 00 04 	st.d	sp[4],r8
8000d82e:	10 94       	mov	r4,r8
8000d830:	40 09       	lddsp	r9,sp[0x0]
8000d832:	e2 1c 04 00 	andl	r12,0x400,COH
8000d836:	2f f9       	sub	r9,-1
8000d838:	0c 09       	add	r9,r6
8000d83a:	12 38       	cp.w	r8,r9
8000d83c:	f2 04 17 30 	movlo	r4,r9
8000d840:	58 0c       	cp.w	r12,0
8000d842:	c1 10       	breq	8000d864 <__sfvwrite_r+0x10c>
8000d844:	08 9b       	mov	r11,r4
8000d846:	0a 9c       	mov	r12,r5
8000d848:	fe b0 e0 e4 	rcall	80009a10 <_malloc_r>
8000d84c:	18 92       	mov	r2,r12
8000d84e:	c1 50       	breq	8000d878 <__sfvwrite_r+0x120>
8000d850:	40 0a       	lddsp	r10,sp[0x0]
8000d852:	6e 4b       	ld.w	r11,r7[0x10]
8000d854:	fe b0 e2 f4 	rcall	80009e3c <memcpy>
8000d858:	8e 68       	ld.sh	r8,r7[0xc]
8000d85a:	e0 18 fb 7f 	andl	r8,0xfb7f
8000d85e:	a7 b8       	sbr	r8,0x7
8000d860:	ae 68       	st.h	r7[0xc],r8
8000d862:	c0 e8       	rjmp	8000d87e <__sfvwrite_r+0x126>
8000d864:	08 9a       	mov	r10,r4
8000d866:	0a 9c       	mov	r12,r5
8000d868:	e0 a0 04 5e 	rcall	8000e124 <_realloc_r>
8000d86c:	18 92       	mov	r2,r12
8000d86e:	c0 81       	brne	8000d87e <__sfvwrite_r+0x126>
8000d870:	6e 4b       	ld.w	r11,r7[0x10]
8000d872:	0a 9c       	mov	r12,r5
8000d874:	fe b0 e5 2e 	rcall	8000a2d0 <_free_r>
8000d878:	30 c8       	mov	r8,12
8000d87a:	8b 38       	st.w	r5[0xc],r8
8000d87c:	ca e8       	rjmp	8000d9d8 <__sfvwrite_r+0x280>
8000d87e:	40 0a       	lddsp	r10,sp[0x0]
8000d880:	40 09       	lddsp	r9,sp[0x0]
8000d882:	e8 0a 01 0a 	sub	r10,r4,r10
8000d886:	e4 09 00 08 	add	r8,r2,r9
8000d88a:	8f 54       	st.w	r7[0x14],r4
8000d88c:	8f 2a       	st.w	r7[0x8],r10
8000d88e:	8f 08       	st.w	r7[0x0],r8
8000d890:	8f 42       	st.w	r7[0x10],r2
8000d892:	0c 94       	mov	r4,r6
8000d894:	08 36       	cp.w	r6,r4
8000d896:	ec 04 17 30 	movlo	r4,r6
8000d89a:	06 9b       	mov	r11,r3
8000d89c:	08 9a       	mov	r10,r4
8000d89e:	6e 0c       	ld.w	r12,r7[0x0]
8000d8a0:	c2 5d       	rcall	8000daea <memmove>
8000d8a2:	6e 08       	ld.w	r8,r7[0x0]
8000d8a4:	08 08       	add	r8,r4
8000d8a6:	8f 08       	st.w	r7[0x0],r8
8000d8a8:	6e 28       	ld.w	r8,r7[0x8]
8000d8aa:	08 18       	sub	r8,r4
8000d8ac:	0c 94       	mov	r4,r6
8000d8ae:	8f 28       	st.w	r7[0x8],r8
8000d8b0:	c2 d8       	rjmp	8000d90a <__sfvwrite_r+0x1b2>
8000d8b2:	08 36       	cp.w	r6,r4
8000d8b4:	5f ba       	srhi	r10
8000d8b6:	6e 0c       	ld.w	r12,r7[0x0]
8000d8b8:	6e 48       	ld.w	r8,r7[0x10]
8000d8ba:	10 3c       	cp.w	r12,r8
8000d8bc:	5f b8       	srhi	r8
8000d8be:	f5 e8 00 08 	and	r8,r10,r8
8000d8c2:	f2 08 18 00 	cp.b	r8,r9
8000d8c6:	c0 c0       	breq	8000d8de <__sfvwrite_r+0x186>
8000d8c8:	06 9b       	mov	r11,r3
8000d8ca:	08 9a       	mov	r10,r4
8000d8cc:	c0 fd       	rcall	8000daea <memmove>
8000d8ce:	6e 08       	ld.w	r8,r7[0x0]
8000d8d0:	08 08       	add	r8,r4
8000d8d2:	0e 9b       	mov	r11,r7
8000d8d4:	8f 08       	st.w	r7[0x0],r8
8000d8d6:	0a 9c       	mov	r12,r5
8000d8d8:	cb 8e       	rcall	8000d648 <_fflush_r>
8000d8da:	c1 80       	breq	8000d90a <__sfvwrite_r+0x1b2>
8000d8dc:	c7 e8       	rjmp	8000d9d8 <__sfvwrite_r+0x280>
8000d8de:	6e 59       	ld.w	r9,r7[0x14]
8000d8e0:	12 36       	cp.w	r6,r9
8000d8e2:	c0 a3       	brcs	8000d8f6 <__sfvwrite_r+0x19e>
8000d8e4:	6e a8       	ld.w	r8,r7[0x28]
8000d8e6:	06 9a       	mov	r10,r3
8000d8e8:	6e 8b       	ld.w	r11,r7[0x20]
8000d8ea:	0a 9c       	mov	r12,r5
8000d8ec:	5d 18       	icall	r8
8000d8ee:	18 94       	mov	r4,r12
8000d8f0:	e0 89 00 0d 	brgt	8000d90a <__sfvwrite_r+0x1b2>
8000d8f4:	c7 28       	rjmp	8000d9d8 <__sfvwrite_r+0x280>
8000d8f6:	0c 9a       	mov	r10,r6
8000d8f8:	06 9b       	mov	r11,r3
8000d8fa:	cf 8c       	rcall	8000daea <memmove>
8000d8fc:	6e 08       	ld.w	r8,r7[0x0]
8000d8fe:	0c 08       	add	r8,r6
8000d900:	0c 94       	mov	r4,r6
8000d902:	8f 08       	st.w	r7[0x0],r8
8000d904:	6e 28       	ld.w	r8,r7[0x8]
8000d906:	0c 18       	sub	r8,r6
8000d908:	8f 28       	st.w	r7[0x8],r8
8000d90a:	62 28       	ld.w	r8,r1[0x8]
8000d90c:	08 18       	sub	r8,r4
8000d90e:	83 28       	st.w	r1[0x8],r8
8000d910:	c6 90       	breq	8000d9e2 <__sfvwrite_r+0x28a>
8000d912:	08 16       	sub	r6,r4
8000d914:	08 03       	add	r3,r4
8000d916:	c7 1b       	rjmp	8000d7f8 <__sfvwrite_r+0xa0>
8000d918:	60 03       	ld.w	r3,r0[0x0]
8000d91a:	60 11       	ld.w	r1,r0[0x4]
8000d91c:	30 08       	mov	r8,0
8000d91e:	2f 80       	sub	r0,-8
8000d920:	50 08       	stdsp	sp[0x0],r8
8000d922:	58 01       	cp.w	r1,0
8000d924:	cf a0       	breq	8000d918 <__sfvwrite_r+0x1c0>
8000d926:	40 0a       	lddsp	r10,sp[0x0]
8000d928:	58 0a       	cp.w	r10,0
8000d92a:	c1 41       	brne	8000d952 <__sfvwrite_r+0x1fa>
8000d92c:	e2 c6 ff ff 	sub	r6,r1,-1
8000d930:	02 9a       	mov	r10,r1
8000d932:	30 ab       	mov	r11,10
8000d934:	06 9c       	mov	r12,r3
8000d936:	cc fc       	rcall	8000dad4 <memchr>
8000d938:	f8 c8 ff ff 	sub	r8,r12,-1
8000d93c:	58 0c       	cp.w	r12,0
8000d93e:	f1 d3 e1 16 	subne	r6,r8,r3
8000d942:	f9 b9 01 01 	movne	r9,1
8000d946:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000d94a:	f9 b8 00 01 	moveq	r8,1
8000d94e:	fb f8 0a 00 	st.weq	sp[0x0],r8
8000d952:	02 36       	cp.w	r6,r1
8000d954:	ec 04 17 80 	movls	r4,r6
8000d958:	e2 04 17 b0 	movhi	r4,r1
8000d95c:	6e 59       	ld.w	r9,r7[0x14]
8000d95e:	6e 25       	ld.w	r5,r7[0x8]
8000d960:	f2 05 00 05 	add	r5,r9,r5
8000d964:	0a 34       	cp.w	r4,r5
8000d966:	5f 9a       	srgt	r10
8000d968:	6e 0c       	ld.w	r12,r7[0x0]
8000d96a:	6e 48       	ld.w	r8,r7[0x10]
8000d96c:	10 3c       	cp.w	r12,r8
8000d96e:	5f b8       	srhi	r8
8000d970:	f5 e8 00 08 	and	r8,r10,r8
8000d974:	30 0a       	mov	r10,0
8000d976:	f4 08 18 00 	cp.b	r8,r10
8000d97a:	c0 c0       	breq	8000d992 <__sfvwrite_r+0x23a>
8000d97c:	06 9b       	mov	r11,r3
8000d97e:	0a 9a       	mov	r10,r5
8000d980:	cb 5c       	rcall	8000daea <memmove>
8000d982:	6e 08       	ld.w	r8,r7[0x0]
8000d984:	0a 08       	add	r8,r5
8000d986:	0e 9b       	mov	r11,r7
8000d988:	8f 08       	st.w	r7[0x0],r8
8000d98a:	40 1c       	lddsp	r12,sp[0x4]
8000d98c:	c5 ee       	rcall	8000d648 <_fflush_r>
8000d98e:	c1 70       	breq	8000d9bc <__sfvwrite_r+0x264>
8000d990:	c2 48       	rjmp	8000d9d8 <__sfvwrite_r+0x280>
8000d992:	12 34       	cp.w	r4,r9
8000d994:	c0 a5       	brlt	8000d9a8 <__sfvwrite_r+0x250>
8000d996:	6e a8       	ld.w	r8,r7[0x28]
8000d998:	06 9a       	mov	r10,r3
8000d99a:	6e 8b       	ld.w	r11,r7[0x20]
8000d99c:	40 1c       	lddsp	r12,sp[0x4]
8000d99e:	5d 18       	icall	r8
8000d9a0:	18 95       	mov	r5,r12
8000d9a2:	e0 89 00 0d 	brgt	8000d9bc <__sfvwrite_r+0x264>
8000d9a6:	c1 98       	rjmp	8000d9d8 <__sfvwrite_r+0x280>
8000d9a8:	08 9a       	mov	r10,r4
8000d9aa:	06 9b       	mov	r11,r3
8000d9ac:	c9 fc       	rcall	8000daea <memmove>
8000d9ae:	6e 08       	ld.w	r8,r7[0x0]
8000d9b0:	08 08       	add	r8,r4
8000d9b2:	08 95       	mov	r5,r4
8000d9b4:	8f 08       	st.w	r7[0x0],r8
8000d9b6:	6e 28       	ld.w	r8,r7[0x8]
8000d9b8:	08 18       	sub	r8,r4
8000d9ba:	8f 28       	st.w	r7[0x8],r8
8000d9bc:	0a 16       	sub	r6,r5
8000d9be:	c0 61       	brne	8000d9ca <__sfvwrite_r+0x272>
8000d9c0:	0e 9b       	mov	r11,r7
8000d9c2:	40 1c       	lddsp	r12,sp[0x4]
8000d9c4:	c4 2e       	rcall	8000d648 <_fflush_r>
8000d9c6:	c0 91       	brne	8000d9d8 <__sfvwrite_r+0x280>
8000d9c8:	50 06       	stdsp	sp[0x0],r6
8000d9ca:	64 28       	ld.w	r8,r2[0x8]
8000d9cc:	0a 18       	sub	r8,r5
8000d9ce:	85 28       	st.w	r2[0x8],r8
8000d9d0:	c0 90       	breq	8000d9e2 <__sfvwrite_r+0x28a>
8000d9d2:	0a 11       	sub	r1,r5
8000d9d4:	0a 03       	add	r3,r5
8000d9d6:	ca 6b       	rjmp	8000d922 <__sfvwrite_r+0x1ca>
8000d9d8:	8e 68       	ld.sh	r8,r7[0xc]
8000d9da:	a7 a8       	sbr	r8,0x6
8000d9dc:	ae 68       	st.h	r7[0xc],r8
8000d9de:	3f fc       	mov	r12,-1
8000d9e0:	c0 28       	rjmp	8000d9e4 <__sfvwrite_r+0x28c>
8000d9e2:	30 0c       	mov	r12,0
8000d9e4:	2f dd       	sub	sp,-12
8000d9e6:	d8 32       	popm	r0-r7,pc

8000d9e8 <_localeconv_r>:
8000d9e8:	fe cc dd 7c 	sub	r12,pc,-8836
8000d9ec:	5e fc       	retal	r12
8000d9ee:	d7 03       	nop

8000d9f0 <_lseek_r>:
8000d9f0:	d4 21       	pushm	r4-r7,lr
8000d9f2:	16 98       	mov	r8,r11
8000d9f4:	18 97       	mov	r7,r12
8000d9f6:	10 9c       	mov	r12,r8
8000d9f8:	30 08       	mov	r8,0
8000d9fa:	14 9b       	mov	r11,r10
8000d9fc:	e0 66 0c c0 	mov	r6,3264
8000da00:	12 9a       	mov	r10,r9
8000da02:	8d 08       	st.w	r6[0x0],r8
8000da04:	fe b0 e2 e4 	rcall	80009fcc <_lseek>
8000da08:	5b fc       	cp.w	r12,-1
8000da0a:	c0 51       	brne	8000da14 <_lseek_r+0x24>
8000da0c:	6c 08       	ld.w	r8,r6[0x0]
8000da0e:	58 08       	cp.w	r8,0
8000da10:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000da14:	d8 22       	popm	r4-r7,pc
8000da16:	d7 03       	nop

8000da18 <__smakebuf_r>:
8000da18:	d4 21       	pushm	r4-r7,lr
8000da1a:	20 fd       	sub	sp,60
8000da1c:	96 68       	ld.sh	r8,r11[0xc]
8000da1e:	16 97       	mov	r7,r11
8000da20:	18 96       	mov	r6,r12
8000da22:	e2 18 00 02 	andl	r8,0x2,COH
8000da26:	c3 d1       	brne	8000daa0 <__smakebuf_r+0x88>
8000da28:	96 7b       	ld.sh	r11,r11[0xe]
8000da2a:	f0 0b 19 00 	cp.h	r11,r8
8000da2e:	c0 55       	brlt	8000da38 <__smakebuf_r+0x20>
8000da30:	1a 9a       	mov	r10,sp
8000da32:	e0 a0 05 07 	rcall	8000e440 <_fstat_r>
8000da36:	c0 f4       	brge	8000da54 <__smakebuf_r+0x3c>
8000da38:	8e 65       	ld.sh	r5,r7[0xc]
8000da3a:	0a 98       	mov	r8,r5
8000da3c:	ab b8       	sbr	r8,0xb
8000da3e:	e2 15 00 80 	andl	r5,0x80,COH
8000da42:	ae 68       	st.h	r7[0xc],r8
8000da44:	30 04       	mov	r4,0
8000da46:	e0 68 04 00 	mov	r8,1024
8000da4a:	f9 b5 01 40 	movne	r5,64
8000da4e:	f0 05 17 00 	moveq	r5,r8
8000da52:	c1 c8       	rjmp	8000da8a <__smakebuf_r+0x72>
8000da54:	40 18       	lddsp	r8,sp[0x4]
8000da56:	e2 18 f0 00 	andl	r8,0xf000,COH
8000da5a:	e0 48 20 00 	cp.w	r8,8192
8000da5e:	5f 04       	sreq	r4
8000da60:	e0 48 80 00 	cp.w	r8,32768
8000da64:	c0 e1       	brne	8000da80 <__smakebuf_r+0x68>
8000da66:	6e b9       	ld.w	r9,r7[0x2c]
8000da68:	fe c8 35 bc 	sub	r8,pc,13756
8000da6c:	10 39       	cp.w	r9,r8
8000da6e:	c0 91       	brne	8000da80 <__smakebuf_r+0x68>
8000da70:	8e 68       	ld.sh	r8,r7[0xc]
8000da72:	e0 65 04 00 	mov	r5,1024
8000da76:	ab a8       	sbr	r8,0xa
8000da78:	ef 45 00 50 	st.w	r7[80],r5
8000da7c:	ae 68       	st.h	r7[0xc],r8
8000da7e:	c0 68       	rjmp	8000da8a <__smakebuf_r+0x72>
8000da80:	8e 68       	ld.sh	r8,r7[0xc]
8000da82:	e0 65 04 00 	mov	r5,1024
8000da86:	ab b8       	sbr	r8,0xb
8000da88:	ae 68       	st.h	r7[0xc],r8
8000da8a:	0a 9b       	mov	r11,r5
8000da8c:	0c 9c       	mov	r12,r6
8000da8e:	fe b0 df c1 	rcall	80009a10 <_malloc_r>
8000da92:	8e 68       	ld.sh	r8,r7[0xc]
8000da94:	c0 d1       	brne	8000daae <__smakebuf_r+0x96>
8000da96:	ed b8 00 09 	bld	r8,0x9
8000da9a:	c1 b0       	breq	8000dad0 <__smakebuf_r+0xb8>
8000da9c:	a1 b8       	sbr	r8,0x1
8000da9e:	ae 68       	st.h	r7[0xc],r8
8000daa0:	ee c8 ff b9 	sub	r8,r7,-71
8000daa4:	8f 48       	st.w	r7[0x10],r8
8000daa6:	8f 08       	st.w	r7[0x0],r8
8000daa8:	30 18       	mov	r8,1
8000daaa:	8f 58       	st.w	r7[0x14],r8
8000daac:	c1 28       	rjmp	8000dad0 <__smakebuf_r+0xb8>
8000daae:	a7 b8       	sbr	r8,0x7
8000dab0:	8f 4c       	st.w	r7[0x10],r12
8000dab2:	ae 68       	st.h	r7[0xc],r8
8000dab4:	8f 55       	st.w	r7[0x14],r5
8000dab6:	fe c8 39 ae 	sub	r8,pc,14766
8000daba:	8f 0c       	st.w	r7[0x0],r12
8000dabc:	8d a8       	st.w	r6[0x28],r8
8000dabe:	58 04       	cp.w	r4,0
8000dac0:	c0 80       	breq	8000dad0 <__smakebuf_r+0xb8>
8000dac2:	8e 7c       	ld.sh	r12,r7[0xe]
8000dac4:	fe b0 e2 a2 	rcall	8000a008 <isatty>
8000dac8:	c0 40       	breq	8000dad0 <__smakebuf_r+0xb8>
8000daca:	8e 68       	ld.sh	r8,r7[0xc]
8000dacc:	a1 a8       	sbr	r8,0x0
8000dace:	ae 68       	st.h	r7[0xc],r8
8000dad0:	2f 1d       	sub	sp,-60
8000dad2:	d8 22       	popm	r4-r7,pc

8000dad4 <memchr>:
8000dad4:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000dad8:	c0 68       	rjmp	8000dae4 <memchr+0x10>
8000dada:	20 1a       	sub	r10,1
8000dadc:	19 88       	ld.ub	r8,r12[0x0]
8000dade:	16 38       	cp.w	r8,r11
8000dae0:	5e 0c       	reteq	r12
8000dae2:	2f fc       	sub	r12,-1
8000dae4:	58 0a       	cp.w	r10,0
8000dae6:	cf a1       	brne	8000dada <memchr+0x6>
8000dae8:	5e fa       	retal	r10

8000daea <memmove>:
8000daea:	d4 01       	pushm	lr
8000daec:	18 3b       	cp.w	r11,r12
8000daee:	c1 92       	brcc	8000db20 <memmove+0x36>
8000daf0:	f6 0a 00 09 	add	r9,r11,r10
8000daf4:	12 3c       	cp.w	r12,r9
8000daf6:	c1 52       	brcc	8000db20 <memmove+0x36>
8000daf8:	f8 0a 00 0b 	add	r11,r12,r10
8000dafc:	30 08       	mov	r8,0
8000dafe:	c0 68       	rjmp	8000db0a <memmove+0x20>
8000db00:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000db04:	20 1a       	sub	r10,1
8000db06:	f6 08 0b 0e 	st.b	r11[r8],lr
8000db0a:	20 18       	sub	r8,1
8000db0c:	58 0a       	cp.w	r10,0
8000db0e:	cf 91       	brne	8000db00 <memmove+0x16>
8000db10:	d8 02       	popm	pc
8000db12:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000db16:	20 1a       	sub	r10,1
8000db18:	f8 08 0b 09 	st.b	r12[r8],r9
8000db1c:	2f f8       	sub	r8,-1
8000db1e:	c0 28       	rjmp	8000db22 <memmove+0x38>
8000db20:	30 08       	mov	r8,0
8000db22:	58 0a       	cp.w	r10,0
8000db24:	cf 71       	brne	8000db12 <memmove+0x28>
8000db26:	d8 02       	popm	pc

8000db28 <__hi0bits>:
8000db28:	18 98       	mov	r8,r12
8000db2a:	e0 1c 00 00 	andl	r12,0x0
8000db2e:	f0 09 15 10 	lsl	r9,r8,0x10
8000db32:	58 0c       	cp.w	r12,0
8000db34:	f2 08 17 00 	moveq	r8,r9
8000db38:	f9 bc 00 10 	moveq	r12,16
8000db3c:	f9 bc 01 00 	movne	r12,0
8000db40:	10 9a       	mov	r10,r8
8000db42:	f0 09 15 08 	lsl	r9,r8,0x8
8000db46:	e6 1a ff 00 	andh	r10,0xff00,COH
8000db4a:	f7 bc 00 f8 	subeq	r12,-8
8000db4e:	f2 08 17 00 	moveq	r8,r9
8000db52:	10 9a       	mov	r10,r8
8000db54:	f0 09 15 04 	lsl	r9,r8,0x4
8000db58:	e6 1a f0 00 	andh	r10,0xf000,COH
8000db5c:	f7 bc 00 fc 	subeq	r12,-4
8000db60:	f2 08 17 00 	moveq	r8,r9
8000db64:	10 9a       	mov	r10,r8
8000db66:	f0 09 15 02 	lsl	r9,r8,0x2
8000db6a:	e6 1a c0 00 	andh	r10,0xc000,COH
8000db6e:	f7 bc 00 fe 	subeq	r12,-2
8000db72:	f2 08 17 00 	moveq	r8,r9
8000db76:	58 08       	cp.w	r8,0
8000db78:	5e 5c       	retlt	r12
8000db7a:	ed b8 00 1e 	bld	r8,0x1e
8000db7e:	f9 bc 01 20 	movne	r12,32
8000db82:	f7 bc 00 ff 	subeq	r12,-1
8000db86:	5e fc       	retal	r12

8000db88 <__lo0bits>:
8000db88:	18 99       	mov	r9,r12
8000db8a:	78 08       	ld.w	r8,r12[0x0]
8000db8c:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000db90:	c1 50       	breq	8000dbba <__lo0bits+0x32>
8000db92:	ed b8 00 00 	bld	r8,0x0
8000db96:	c0 21       	brne	8000db9a <__lo0bits+0x12>
8000db98:	5e fd       	retal	0
8000db9a:	10 9b       	mov	r11,r8
8000db9c:	f0 0a 16 01 	lsr	r10,r8,0x1
8000dba0:	e2 1b 00 02 	andl	r11,0x2,COH
8000dba4:	a3 88       	lsr	r8,0x2
8000dba6:	58 0b       	cp.w	r11,0
8000dba8:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000dbac:	f9 bc 01 01 	movne	r12,1
8000dbb0:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000dbb4:	f9 bc 00 02 	moveq	r12,2
8000dbb8:	5e fc       	retal	r12
8000dbba:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000dbbe:	f0 0b 16 10 	lsr	r11,r8,0x10
8000dbc2:	58 0a       	cp.w	r10,0
8000dbc4:	f6 08 17 00 	moveq	r8,r11
8000dbc8:	f9 bc 00 10 	moveq	r12,16
8000dbcc:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000dbd0:	f0 0a 16 08 	lsr	r10,r8,0x8
8000dbd4:	58 0b       	cp.w	r11,0
8000dbd6:	f7 bc 00 f8 	subeq	r12,-8
8000dbda:	f4 08 17 00 	moveq	r8,r10
8000dbde:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000dbe2:	f0 0a 16 04 	lsr	r10,r8,0x4
8000dbe6:	58 0b       	cp.w	r11,0
8000dbe8:	f7 bc 00 fc 	subeq	r12,-4
8000dbec:	f4 08 17 00 	moveq	r8,r10
8000dbf0:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000dbf4:	f0 0a 16 02 	lsr	r10,r8,0x2
8000dbf8:	58 0b       	cp.w	r11,0
8000dbfa:	f7 bc 00 fe 	subeq	r12,-2
8000dbfe:	f4 08 17 00 	moveq	r8,r10
8000dc02:	ed b8 00 00 	bld	r8,0x0
8000dc06:	c0 60       	breq	8000dc12 <__lo0bits+0x8a>
8000dc08:	a1 98       	lsr	r8,0x1
8000dc0a:	c0 31       	brne	8000dc10 <__lo0bits+0x88>
8000dc0c:	32 0c       	mov	r12,32
8000dc0e:	5e fc       	retal	r12
8000dc10:	2f fc       	sub	r12,-1
8000dc12:	93 08       	st.w	r9[0x0],r8
8000dc14:	5e fc       	retal	r12

8000dc16 <__mcmp>:
8000dc16:	d4 01       	pushm	lr
8000dc18:	18 98       	mov	r8,r12
8000dc1a:	76 49       	ld.w	r9,r11[0x10]
8000dc1c:	78 4c       	ld.w	r12,r12[0x10]
8000dc1e:	12 1c       	sub	r12,r9
8000dc20:	c1 31       	brne	8000dc46 <__mcmp+0x30>
8000dc22:	2f b9       	sub	r9,-5
8000dc24:	a3 69       	lsl	r9,0x2
8000dc26:	12 0b       	add	r11,r9
8000dc28:	f0 09 00 09 	add	r9,r8,r9
8000dc2c:	2e c8       	sub	r8,-20
8000dc2e:	13 4e       	ld.w	lr,--r9
8000dc30:	17 4a       	ld.w	r10,--r11
8000dc32:	14 3e       	cp.w	lr,r10
8000dc34:	c0 60       	breq	8000dc40 <__mcmp+0x2a>
8000dc36:	f9 bc 03 ff 	movlo	r12,-1
8000dc3a:	f9 bc 02 01 	movhs	r12,1
8000dc3e:	d8 02       	popm	pc
8000dc40:	10 39       	cp.w	r9,r8
8000dc42:	fe 9b ff f6 	brhi	8000dc2e <__mcmp+0x18>
8000dc46:	d8 02       	popm	pc

8000dc48 <_Bfree>:
8000dc48:	d4 21       	pushm	r4-r7,lr
8000dc4a:	18 97       	mov	r7,r12
8000dc4c:	16 95       	mov	r5,r11
8000dc4e:	78 96       	ld.w	r6,r12[0x24]
8000dc50:	58 06       	cp.w	r6,0
8000dc52:	c0 91       	brne	8000dc64 <_Bfree+0x1c>
8000dc54:	31 0c       	mov	r12,16
8000dc56:	fe b0 de d5 	rcall	80009a00 <malloc>
8000dc5a:	99 36       	st.w	r12[0xc],r6
8000dc5c:	8f 9c       	st.w	r7[0x24],r12
8000dc5e:	99 16       	st.w	r12[0x4],r6
8000dc60:	99 26       	st.w	r12[0x8],r6
8000dc62:	99 06       	st.w	r12[0x0],r6
8000dc64:	58 05       	cp.w	r5,0
8000dc66:	c0 90       	breq	8000dc78 <_Bfree+0x30>
8000dc68:	6a 19       	ld.w	r9,r5[0x4]
8000dc6a:	6e 98       	ld.w	r8,r7[0x24]
8000dc6c:	70 38       	ld.w	r8,r8[0xc]
8000dc6e:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000dc72:	8b 0a       	st.w	r5[0x0],r10
8000dc74:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000dc78:	d8 22       	popm	r4-r7,pc
8000dc7a:	d7 03       	nop

8000dc7c <_Balloc>:
8000dc7c:	d4 21       	pushm	r4-r7,lr
8000dc7e:	18 97       	mov	r7,r12
8000dc80:	16 96       	mov	r6,r11
8000dc82:	78 95       	ld.w	r5,r12[0x24]
8000dc84:	58 05       	cp.w	r5,0
8000dc86:	c0 91       	brne	8000dc98 <_Balloc+0x1c>
8000dc88:	31 0c       	mov	r12,16
8000dc8a:	fe b0 de bb 	rcall	80009a00 <malloc>
8000dc8e:	99 35       	st.w	r12[0xc],r5
8000dc90:	8f 9c       	st.w	r7[0x24],r12
8000dc92:	99 15       	st.w	r12[0x4],r5
8000dc94:	99 25       	st.w	r12[0x8],r5
8000dc96:	99 05       	st.w	r12[0x0],r5
8000dc98:	6e 95       	ld.w	r5,r7[0x24]
8000dc9a:	6a 38       	ld.w	r8,r5[0xc]
8000dc9c:	58 08       	cp.w	r8,0
8000dc9e:	c0 b1       	brne	8000dcb4 <_Balloc+0x38>
8000dca0:	31 0a       	mov	r10,16
8000dca2:	30 4b       	mov	r11,4
8000dca4:	0e 9c       	mov	r12,r7
8000dca6:	fe b0 de 7b 	rcall	8000999c <_calloc_r>
8000dcaa:	8b 3c       	st.w	r5[0xc],r12
8000dcac:	6e 98       	ld.w	r8,r7[0x24]
8000dcae:	70 3c       	ld.w	r12,r8[0xc]
8000dcb0:	58 0c       	cp.w	r12,0
8000dcb2:	c1 b0       	breq	8000dce8 <_Balloc+0x6c>
8000dcb4:	6e 98       	ld.w	r8,r7[0x24]
8000dcb6:	70 38       	ld.w	r8,r8[0xc]
8000dcb8:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000dcbc:	70 0c       	ld.w	r12,r8[0x0]
8000dcbe:	58 0c       	cp.w	r12,0
8000dcc0:	c0 40       	breq	8000dcc8 <_Balloc+0x4c>
8000dcc2:	78 09       	ld.w	r9,r12[0x0]
8000dcc4:	91 09       	st.w	r8[0x0],r9
8000dcc6:	c0 e8       	rjmp	8000dce2 <_Balloc+0x66>
8000dcc8:	0e 9c       	mov	r12,r7
8000dcca:	30 17       	mov	r7,1
8000dccc:	0e 9b       	mov	r11,r7
8000dcce:	ee 06 09 47 	lsl	r7,r7,r6
8000dcd2:	ee ca ff fb 	sub	r10,r7,-5
8000dcd6:	a3 6a       	lsl	r10,0x2
8000dcd8:	fe b0 de 62 	rcall	8000999c <_calloc_r>
8000dcdc:	c0 60       	breq	8000dce8 <_Balloc+0x6c>
8000dcde:	99 16       	st.w	r12[0x4],r6
8000dce0:	99 27       	st.w	r12[0x8],r7
8000dce2:	30 08       	mov	r8,0
8000dce4:	99 38       	st.w	r12[0xc],r8
8000dce6:	99 48       	st.w	r12[0x10],r8
8000dce8:	d8 22       	popm	r4-r7,pc
8000dcea:	d7 03       	nop

8000dcec <__d2b>:
8000dcec:	d4 31       	pushm	r0-r7,lr
8000dcee:	20 2d       	sub	sp,8
8000dcf0:	16 93       	mov	r3,r11
8000dcf2:	12 96       	mov	r6,r9
8000dcf4:	10 95       	mov	r5,r8
8000dcf6:	14 92       	mov	r2,r10
8000dcf8:	30 1b       	mov	r11,1
8000dcfa:	cc 1f       	rcall	8000dc7c <_Balloc>
8000dcfc:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000dd00:	50 09       	stdsp	sp[0x0],r9
8000dd02:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000dd06:	b5 a9       	sbr	r9,0x14
8000dd08:	f0 01 16 14 	lsr	r1,r8,0x14
8000dd0c:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000dd10:	18 94       	mov	r4,r12
8000dd12:	58 02       	cp.w	r2,0
8000dd14:	c1 d0       	breq	8000dd4e <__d2b+0x62>
8000dd16:	fa cc ff f8 	sub	r12,sp,-8
8000dd1a:	18 d2       	st.w	--r12,r2
8000dd1c:	c3 6f       	rcall	8000db88 <__lo0bits>
8000dd1e:	40 18       	lddsp	r8,sp[0x4]
8000dd20:	c0 d0       	breq	8000dd3a <__d2b+0x4e>
8000dd22:	40 09       	lddsp	r9,sp[0x0]
8000dd24:	f8 0a 11 20 	rsub	r10,r12,32
8000dd28:	f2 0a 09 4a 	lsl	r10,r9,r10
8000dd2c:	f5 e8 10 08 	or	r8,r10,r8
8000dd30:	89 58       	st.w	r4[0x14],r8
8000dd32:	f2 0c 0a 49 	lsr	r9,r9,r12
8000dd36:	50 09       	stdsp	sp[0x0],r9
8000dd38:	c0 28       	rjmp	8000dd3c <__d2b+0x50>
8000dd3a:	89 58       	st.w	r4[0x14],r8
8000dd3c:	40 08       	lddsp	r8,sp[0x0]
8000dd3e:	58 08       	cp.w	r8,0
8000dd40:	f9 b3 01 02 	movne	r3,2
8000dd44:	f9 b3 00 01 	moveq	r3,1
8000dd48:	89 68       	st.w	r4[0x18],r8
8000dd4a:	89 43       	st.w	r4[0x10],r3
8000dd4c:	c0 88       	rjmp	8000dd5c <__d2b+0x70>
8000dd4e:	1a 9c       	mov	r12,sp
8000dd50:	c1 cf       	rcall	8000db88 <__lo0bits>
8000dd52:	30 13       	mov	r3,1
8000dd54:	40 08       	lddsp	r8,sp[0x0]
8000dd56:	2e 0c       	sub	r12,-32
8000dd58:	89 43       	st.w	r4[0x10],r3
8000dd5a:	89 58       	st.w	r4[0x14],r8
8000dd5c:	58 01       	cp.w	r1,0
8000dd5e:	c0 90       	breq	8000dd70 <__d2b+0x84>
8000dd60:	e2 c1 04 33 	sub	r1,r1,1075
8000dd64:	18 01       	add	r1,r12
8000dd66:	8d 01       	st.w	r6[0x0],r1
8000dd68:	f8 0c 11 35 	rsub	r12,r12,53
8000dd6c:	8b 0c       	st.w	r5[0x0],r12
8000dd6e:	c0 c8       	rjmp	8000dd86 <__d2b+0x9a>
8000dd70:	e6 c8 ff fc 	sub	r8,r3,-4
8000dd74:	f8 cc 04 32 	sub	r12,r12,1074
8000dd78:	a5 73       	lsl	r3,0x5
8000dd7a:	8d 0c       	st.w	r6[0x0],r12
8000dd7c:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000dd80:	cd 4e       	rcall	8000db28 <__hi0bits>
8000dd82:	18 13       	sub	r3,r12
8000dd84:	8b 03       	st.w	r5[0x0],r3
8000dd86:	08 9c       	mov	r12,r4
8000dd88:	2f ed       	sub	sp,-8
8000dd8a:	d8 32       	popm	r0-r7,pc

8000dd8c <__mdiff>:
8000dd8c:	d4 31       	pushm	r0-r7,lr
8000dd8e:	74 48       	ld.w	r8,r10[0x10]
8000dd90:	76 45       	ld.w	r5,r11[0x10]
8000dd92:	16 97       	mov	r7,r11
8000dd94:	14 96       	mov	r6,r10
8000dd96:	10 15       	sub	r5,r8
8000dd98:	c1 31       	brne	8000ddbe <__mdiff+0x32>
8000dd9a:	2f b8       	sub	r8,-5
8000dd9c:	ee ce ff ec 	sub	lr,r7,-20
8000dda0:	a3 68       	lsl	r8,0x2
8000dda2:	f4 08 00 0b 	add	r11,r10,r8
8000dda6:	ee 08 00 08 	add	r8,r7,r8
8000ddaa:	11 4a       	ld.w	r10,--r8
8000ddac:	17 49       	ld.w	r9,--r11
8000ddae:	12 3a       	cp.w	r10,r9
8000ddb0:	c0 30       	breq	8000ddb6 <__mdiff+0x2a>
8000ddb2:	c0 e2       	brcc	8000ddce <__mdiff+0x42>
8000ddb4:	c0 78       	rjmp	8000ddc2 <__mdiff+0x36>
8000ddb6:	1c 38       	cp.w	r8,lr
8000ddb8:	fe 9b ff f9 	brhi	8000ddaa <__mdiff+0x1e>
8000ddbc:	c4 98       	rjmp	8000de4e <__mdiff+0xc2>
8000ddbe:	58 05       	cp.w	r5,0
8000ddc0:	c0 64       	brge	8000ddcc <__mdiff+0x40>
8000ddc2:	0e 98       	mov	r8,r7
8000ddc4:	30 15       	mov	r5,1
8000ddc6:	0c 97       	mov	r7,r6
8000ddc8:	10 96       	mov	r6,r8
8000ddca:	c0 28       	rjmp	8000ddce <__mdiff+0x42>
8000ddcc:	30 05       	mov	r5,0
8000ddce:	6e 1b       	ld.w	r11,r7[0x4]
8000ddd0:	c5 6f       	rcall	8000dc7c <_Balloc>
8000ddd2:	6e 49       	ld.w	r9,r7[0x10]
8000ddd4:	6c 44       	ld.w	r4,r6[0x10]
8000ddd6:	99 35       	st.w	r12[0xc],r5
8000ddd8:	2f b4       	sub	r4,-5
8000ddda:	f2 c5 ff fb 	sub	r5,r9,-5
8000ddde:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000dde2:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000dde6:	2e c6       	sub	r6,-20
8000dde8:	2e c7       	sub	r7,-20
8000ddea:	f8 c8 ff ec 	sub	r8,r12,-20
8000ddee:	30 0a       	mov	r10,0
8000ddf0:	0f 0e       	ld.w	lr,r7++
8000ddf2:	0d 0b       	ld.w	r11,r6++
8000ddf4:	fc 02 16 10 	lsr	r2,lr,0x10
8000ddf8:	f6 03 16 10 	lsr	r3,r11,0x10
8000ddfc:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000de00:	e4 03 01 03 	sub	r3,r2,r3
8000de04:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000de08:	fc 0b 01 0b 	sub	r11,lr,r11
8000de0c:	f6 0a 00 0a 	add	r10,r11,r10
8000de10:	b0 1a       	st.h	r8[0x2],r10
8000de12:	b1 4a       	asr	r10,0x10
8000de14:	e6 0a 00 0a 	add	r10,r3,r10
8000de18:	b0 0a       	st.h	r8[0x0],r10
8000de1a:	2f c8       	sub	r8,-4
8000de1c:	b1 4a       	asr	r10,0x10
8000de1e:	08 36       	cp.w	r6,r4
8000de20:	ce 83       	brcs	8000ddf0 <__mdiff+0x64>
8000de22:	c0 d8       	rjmp	8000de3c <__mdiff+0xb0>
8000de24:	0f 0b       	ld.w	r11,r7++
8000de26:	f6 0e 16 10 	lsr	lr,r11,0x10
8000de2a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000de2e:	16 0a       	add	r10,r11
8000de30:	b0 1a       	st.h	r8[0x2],r10
8000de32:	b1 4a       	asr	r10,0x10
8000de34:	1c 0a       	add	r10,lr
8000de36:	b0 0a       	st.h	r8[0x0],r10
8000de38:	2f c8       	sub	r8,-4
8000de3a:	b1 4a       	asr	r10,0x10
8000de3c:	0a 37       	cp.w	r7,r5
8000de3e:	cf 33       	brcs	8000de24 <__mdiff+0x98>
8000de40:	c0 28       	rjmp	8000de44 <__mdiff+0xb8>
8000de42:	20 19       	sub	r9,1
8000de44:	11 4a       	ld.w	r10,--r8
8000de46:	58 0a       	cp.w	r10,0
8000de48:	cf d0       	breq	8000de42 <__mdiff+0xb6>
8000de4a:	99 49       	st.w	r12[0x10],r9
8000de4c:	d8 32       	popm	r0-r7,pc
8000de4e:	30 0b       	mov	r11,0
8000de50:	c1 6f       	rcall	8000dc7c <_Balloc>
8000de52:	30 18       	mov	r8,1
8000de54:	99 48       	st.w	r12[0x10],r8
8000de56:	30 08       	mov	r8,0
8000de58:	99 58       	st.w	r12[0x14],r8
8000de5a:	d8 32       	popm	r0-r7,pc

8000de5c <__lshift>:
8000de5c:	d4 31       	pushm	r0-r7,lr
8000de5e:	16 97       	mov	r7,r11
8000de60:	76 46       	ld.w	r6,r11[0x10]
8000de62:	f4 02 14 05 	asr	r2,r10,0x5
8000de66:	2f f6       	sub	r6,-1
8000de68:	14 93       	mov	r3,r10
8000de6a:	18 94       	mov	r4,r12
8000de6c:	04 06       	add	r6,r2
8000de6e:	76 1b       	ld.w	r11,r11[0x4]
8000de70:	6e 28       	ld.w	r8,r7[0x8]
8000de72:	c0 38       	rjmp	8000de78 <__lshift+0x1c>
8000de74:	2f fb       	sub	r11,-1
8000de76:	a1 78       	lsl	r8,0x1
8000de78:	10 36       	cp.w	r6,r8
8000de7a:	fe 99 ff fd 	brgt	8000de74 <__lshift+0x18>
8000de7e:	08 9c       	mov	r12,r4
8000de80:	cf ee       	rcall	8000dc7c <_Balloc>
8000de82:	30 09       	mov	r9,0
8000de84:	18 95       	mov	r5,r12
8000de86:	f8 c8 ff ec 	sub	r8,r12,-20
8000de8a:	12 9a       	mov	r10,r9
8000de8c:	c0 38       	rjmp	8000de92 <__lshift+0x36>
8000de8e:	10 aa       	st.w	r8++,r10
8000de90:	2f f9       	sub	r9,-1
8000de92:	04 39       	cp.w	r9,r2
8000de94:	cf d5       	brlt	8000de8e <__lshift+0x32>
8000de96:	6e 4b       	ld.w	r11,r7[0x10]
8000de98:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000de9c:	2f bb       	sub	r11,-5
8000de9e:	ee c9 ff ec 	sub	r9,r7,-20
8000dea2:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000dea6:	58 03       	cp.w	r3,0
8000dea8:	c1 30       	breq	8000dece <__lshift+0x72>
8000deaa:	e6 0c 11 20 	rsub	r12,r3,32
8000deae:	30 0a       	mov	r10,0
8000deb0:	72 02       	ld.w	r2,r9[0x0]
8000deb2:	e4 03 09 42 	lsl	r2,r2,r3
8000deb6:	04 4a       	or	r10,r2
8000deb8:	10 aa       	st.w	r8++,r10
8000deba:	13 0a       	ld.w	r10,r9++
8000debc:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000dec0:	16 39       	cp.w	r9,r11
8000dec2:	cf 73       	brcs	8000deb0 <__lshift+0x54>
8000dec4:	91 0a       	st.w	r8[0x0],r10
8000dec6:	58 0a       	cp.w	r10,0
8000dec8:	c0 70       	breq	8000ded6 <__lshift+0x7a>
8000deca:	2f f6       	sub	r6,-1
8000decc:	c0 58       	rjmp	8000ded6 <__lshift+0x7a>
8000dece:	13 0a       	ld.w	r10,r9++
8000ded0:	10 aa       	st.w	r8++,r10
8000ded2:	16 39       	cp.w	r9,r11
8000ded4:	cf d3       	brcs	8000dece <__lshift+0x72>
8000ded6:	08 9c       	mov	r12,r4
8000ded8:	20 16       	sub	r6,1
8000deda:	0e 9b       	mov	r11,r7
8000dedc:	8b 46       	st.w	r5[0x10],r6
8000dede:	cb 5e       	rcall	8000dc48 <_Bfree>
8000dee0:	0a 9c       	mov	r12,r5
8000dee2:	d8 32       	popm	r0-r7,pc

8000dee4 <__multiply>:
8000dee4:	d4 31       	pushm	r0-r7,lr
8000dee6:	20 2d       	sub	sp,8
8000dee8:	76 49       	ld.w	r9,r11[0x10]
8000deea:	74 48       	ld.w	r8,r10[0x10]
8000deec:	16 96       	mov	r6,r11
8000deee:	14 95       	mov	r5,r10
8000def0:	10 39       	cp.w	r9,r8
8000def2:	ec 08 17 50 	movlt	r8,r6
8000def6:	ea 06 17 50 	movlt	r6,r5
8000defa:	f0 05 17 50 	movlt	r5,r8
8000defe:	6c 28       	ld.w	r8,r6[0x8]
8000df00:	76 43       	ld.w	r3,r11[0x10]
8000df02:	74 42       	ld.w	r2,r10[0x10]
8000df04:	76 1b       	ld.w	r11,r11[0x4]
8000df06:	e4 03 00 07 	add	r7,r2,r3
8000df0a:	10 37       	cp.w	r7,r8
8000df0c:	f7 bb 09 ff 	subgt	r11,-1
8000df10:	cb 6e       	rcall	8000dc7c <_Balloc>
8000df12:	ee c4 ff fb 	sub	r4,r7,-5
8000df16:	f8 c9 ff ec 	sub	r9,r12,-20
8000df1a:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000df1e:	30 0a       	mov	r10,0
8000df20:	12 98       	mov	r8,r9
8000df22:	c0 28       	rjmp	8000df26 <__multiply+0x42>
8000df24:	10 aa       	st.w	r8++,r10
8000df26:	08 38       	cp.w	r8,r4
8000df28:	cf e3       	brcs	8000df24 <__multiply+0x40>
8000df2a:	2f b3       	sub	r3,-5
8000df2c:	2f b2       	sub	r2,-5
8000df2e:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000df32:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000df36:	ec cb ff ec 	sub	r11,r6,-20
8000df3a:	50 12       	stdsp	sp[0x4],r2
8000df3c:	ea ca ff ec 	sub	r10,r5,-20
8000df40:	c4 48       	rjmp	8000dfc8 <__multiply+0xe4>
8000df42:	94 95       	ld.uh	r5,r10[0x2]
8000df44:	58 05       	cp.w	r5,0
8000df46:	c2 00       	breq	8000df86 <__multiply+0xa2>
8000df48:	12 98       	mov	r8,r9
8000df4a:	16 96       	mov	r6,r11
8000df4c:	30 0e       	mov	lr,0
8000df4e:	50 09       	stdsp	sp[0x0],r9
8000df50:	0d 02       	ld.w	r2,r6++
8000df52:	e4 00 16 10 	lsr	r0,r2,0x10
8000df56:	70 01       	ld.w	r1,r8[0x0]
8000df58:	70 09       	ld.w	r9,r8[0x0]
8000df5a:	b1 81       	lsr	r1,0x10
8000df5c:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000df60:	e0 05 03 41 	mac	r1,r0,r5
8000df64:	ab 32       	mul	r2,r5
8000df66:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000df6a:	00 02       	add	r2,r0
8000df6c:	e4 0e 00 0e 	add	lr,r2,lr
8000df70:	b0 1e       	st.h	r8[0x2],lr
8000df72:	b1 8e       	lsr	lr,0x10
8000df74:	1c 01       	add	r1,lr
8000df76:	b0 01       	st.h	r8[0x0],r1
8000df78:	e2 0e 16 10 	lsr	lr,r1,0x10
8000df7c:	2f c8       	sub	r8,-4
8000df7e:	06 36       	cp.w	r6,r3
8000df80:	ce 83       	brcs	8000df50 <__multiply+0x6c>
8000df82:	40 09       	lddsp	r9,sp[0x0]
8000df84:	91 0e       	st.w	r8[0x0],lr
8000df86:	94 86       	ld.uh	r6,r10[0x0]
8000df88:	58 06       	cp.w	r6,0
8000df8a:	c1 d0       	breq	8000dfc4 <__multiply+0xe0>
8000df8c:	72 02       	ld.w	r2,r9[0x0]
8000df8e:	12 98       	mov	r8,r9
8000df90:	16 9e       	mov	lr,r11
8000df92:	30 05       	mov	r5,0
8000df94:	b0 12       	st.h	r8[0x2],r2
8000df96:	1d 01       	ld.w	r1,lr++
8000df98:	90 82       	ld.uh	r2,r8[0x0]
8000df9a:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000df9e:	ad 30       	mul	r0,r6
8000dfa0:	e0 02 00 02 	add	r2,r0,r2
8000dfa4:	e4 05 00 05 	add	r5,r2,r5
8000dfa8:	b0 05       	st.h	r8[0x0],r5
8000dfaa:	b1 85       	lsr	r5,0x10
8000dfac:	b1 81       	lsr	r1,0x10
8000dfae:	2f c8       	sub	r8,-4
8000dfb0:	ad 31       	mul	r1,r6
8000dfb2:	90 92       	ld.uh	r2,r8[0x2]
8000dfb4:	e2 02 00 02 	add	r2,r1,r2
8000dfb8:	0a 02       	add	r2,r5
8000dfba:	e4 05 16 10 	lsr	r5,r2,0x10
8000dfbe:	06 3e       	cp.w	lr,r3
8000dfc0:	ce a3       	brcs	8000df94 <__multiply+0xb0>
8000dfc2:	91 02       	st.w	r8[0x0],r2
8000dfc4:	2f ca       	sub	r10,-4
8000dfc6:	2f c9       	sub	r9,-4
8000dfc8:	40 18       	lddsp	r8,sp[0x4]
8000dfca:	10 3a       	cp.w	r10,r8
8000dfcc:	cb b3       	brcs	8000df42 <__multiply+0x5e>
8000dfce:	c0 28       	rjmp	8000dfd2 <__multiply+0xee>
8000dfd0:	20 17       	sub	r7,1
8000dfd2:	58 07       	cp.w	r7,0
8000dfd4:	e0 8a 00 05 	brle	8000dfde <__multiply+0xfa>
8000dfd8:	09 48       	ld.w	r8,--r4
8000dfda:	58 08       	cp.w	r8,0
8000dfdc:	cf a0       	breq	8000dfd0 <__multiply+0xec>
8000dfde:	99 47       	st.w	r12[0x10],r7
8000dfe0:	2f ed       	sub	sp,-8
8000dfe2:	d8 32       	popm	r0-r7,pc

8000dfe4 <__i2b>:
8000dfe4:	d4 21       	pushm	r4-r7,lr
8000dfe6:	16 97       	mov	r7,r11
8000dfe8:	30 1b       	mov	r11,1
8000dfea:	c4 9e       	rcall	8000dc7c <_Balloc>
8000dfec:	30 19       	mov	r9,1
8000dfee:	99 57       	st.w	r12[0x14],r7
8000dff0:	99 49       	st.w	r12[0x10],r9
8000dff2:	d8 22       	popm	r4-r7,pc

8000dff4 <__multadd>:
8000dff4:	d4 31       	pushm	r0-r7,lr
8000dff6:	30 08       	mov	r8,0
8000dff8:	12 95       	mov	r5,r9
8000dffa:	16 97       	mov	r7,r11
8000dffc:	18 96       	mov	r6,r12
8000dffe:	76 44       	ld.w	r4,r11[0x10]
8000e000:	f6 c9 ff ec 	sub	r9,r11,-20
8000e004:	72 0b       	ld.w	r11,r9[0x0]
8000e006:	f6 0c 16 10 	lsr	r12,r11,0x10
8000e00a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000e00e:	f4 0c 02 4c 	mul	r12,r10,r12
8000e012:	f4 0b 03 45 	mac	r5,r10,r11
8000e016:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000e01a:	b1 85       	lsr	r5,0x10
8000e01c:	18 05       	add	r5,r12
8000e01e:	ea 0c 15 10 	lsl	r12,r5,0x10
8000e022:	f8 0b 00 0b 	add	r11,r12,r11
8000e026:	12 ab       	st.w	r9++,r11
8000e028:	2f f8       	sub	r8,-1
8000e02a:	b1 85       	lsr	r5,0x10
8000e02c:	08 38       	cp.w	r8,r4
8000e02e:	ce b5       	brlt	8000e004 <__multadd+0x10>
8000e030:	58 05       	cp.w	r5,0
8000e032:	c1 c0       	breq	8000e06a <__multadd+0x76>
8000e034:	6e 28       	ld.w	r8,r7[0x8]
8000e036:	10 34       	cp.w	r4,r8
8000e038:	c1 35       	brlt	8000e05e <__multadd+0x6a>
8000e03a:	6e 1b       	ld.w	r11,r7[0x4]
8000e03c:	0c 9c       	mov	r12,r6
8000e03e:	2f fb       	sub	r11,-1
8000e040:	c1 ee       	rcall	8000dc7c <_Balloc>
8000e042:	6e 4a       	ld.w	r10,r7[0x10]
8000e044:	ee cb ff f4 	sub	r11,r7,-12
8000e048:	18 93       	mov	r3,r12
8000e04a:	2f ea       	sub	r10,-2
8000e04c:	2f 4c       	sub	r12,-12
8000e04e:	a3 6a       	lsl	r10,0x2
8000e050:	fe b0 de f6 	rcall	80009e3c <memcpy>
8000e054:	0e 9b       	mov	r11,r7
8000e056:	0c 9c       	mov	r12,r6
8000e058:	fe b0 fd f8 	rcall	8000dc48 <_Bfree>
8000e05c:	06 97       	mov	r7,r3
8000e05e:	e8 c8 ff ff 	sub	r8,r4,-1
8000e062:	2f b4       	sub	r4,-5
8000e064:	8f 48       	st.w	r7[0x10],r8
8000e066:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000e06a:	0e 9c       	mov	r12,r7
8000e06c:	d8 32       	popm	r0-r7,pc
8000e06e:	d7 03       	nop

8000e070 <__pow5mult>:
8000e070:	d4 31       	pushm	r0-r7,lr
8000e072:	14 96       	mov	r6,r10
8000e074:	18 97       	mov	r7,r12
8000e076:	16 94       	mov	r4,r11
8000e078:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000e07c:	c0 90       	breq	8000e08e <__pow5mult+0x1e>
8000e07e:	20 18       	sub	r8,1
8000e080:	fe c9 e3 d4 	sub	r9,pc,-7212
8000e084:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000e088:	30 09       	mov	r9,0
8000e08a:	cb 5f       	rcall	8000dff4 <__multadd>
8000e08c:	18 94       	mov	r4,r12
8000e08e:	a3 46       	asr	r6,0x2
8000e090:	c3 40       	breq	8000e0f8 <__pow5mult+0x88>
8000e092:	6e 95       	ld.w	r5,r7[0x24]
8000e094:	58 05       	cp.w	r5,0
8000e096:	c0 91       	brne	8000e0a8 <__pow5mult+0x38>
8000e098:	31 0c       	mov	r12,16
8000e09a:	fe b0 dc b3 	rcall	80009a00 <malloc>
8000e09e:	99 35       	st.w	r12[0xc],r5
8000e0a0:	8f 9c       	st.w	r7[0x24],r12
8000e0a2:	99 15       	st.w	r12[0x4],r5
8000e0a4:	99 25       	st.w	r12[0x8],r5
8000e0a6:	99 05       	st.w	r12[0x0],r5
8000e0a8:	6e 93       	ld.w	r3,r7[0x24]
8000e0aa:	66 25       	ld.w	r5,r3[0x8]
8000e0ac:	58 05       	cp.w	r5,0
8000e0ae:	c0 c1       	brne	8000e0c6 <__pow5mult+0x56>
8000e0b0:	e0 6b 02 71 	mov	r11,625
8000e0b4:	0e 9c       	mov	r12,r7
8000e0b6:	c9 7f       	rcall	8000dfe4 <__i2b>
8000e0b8:	87 2c       	st.w	r3[0x8],r12
8000e0ba:	30 08       	mov	r8,0
8000e0bc:	18 95       	mov	r5,r12
8000e0be:	99 08       	st.w	r12[0x0],r8
8000e0c0:	c0 38       	rjmp	8000e0c6 <__pow5mult+0x56>
8000e0c2:	06 9c       	mov	r12,r3
8000e0c4:	18 95       	mov	r5,r12
8000e0c6:	ed b6 00 00 	bld	r6,0x0
8000e0ca:	c0 b1       	brne	8000e0e0 <__pow5mult+0x70>
8000e0cc:	08 9b       	mov	r11,r4
8000e0ce:	0a 9a       	mov	r10,r5
8000e0d0:	0e 9c       	mov	r12,r7
8000e0d2:	c0 9f       	rcall	8000dee4 <__multiply>
8000e0d4:	08 9b       	mov	r11,r4
8000e0d6:	18 93       	mov	r3,r12
8000e0d8:	0e 9c       	mov	r12,r7
8000e0da:	06 94       	mov	r4,r3
8000e0dc:	fe b0 fd b6 	rcall	8000dc48 <_Bfree>
8000e0e0:	a1 56       	asr	r6,0x1
8000e0e2:	c0 b0       	breq	8000e0f8 <__pow5mult+0x88>
8000e0e4:	6a 03       	ld.w	r3,r5[0x0]
8000e0e6:	58 03       	cp.w	r3,0
8000e0e8:	ce d1       	brne	8000e0c2 <__pow5mult+0x52>
8000e0ea:	0a 9a       	mov	r10,r5
8000e0ec:	0a 9b       	mov	r11,r5
8000e0ee:	0e 9c       	mov	r12,r7
8000e0f0:	cf ae       	rcall	8000dee4 <__multiply>
8000e0f2:	8b 0c       	st.w	r5[0x0],r12
8000e0f4:	99 03       	st.w	r12[0x0],r3
8000e0f6:	ce 7b       	rjmp	8000e0c4 <__pow5mult+0x54>
8000e0f8:	08 9c       	mov	r12,r4
8000e0fa:	d8 32       	popm	r0-r7,pc

8000e0fc <_read_r>:
8000e0fc:	d4 21       	pushm	r4-r7,lr
8000e0fe:	16 98       	mov	r8,r11
8000e100:	18 97       	mov	r7,r12
8000e102:	10 9c       	mov	r12,r8
8000e104:	30 08       	mov	r8,0
8000e106:	14 9b       	mov	r11,r10
8000e108:	e0 66 0c c0 	mov	r6,3264
8000e10c:	12 9a       	mov	r10,r9
8000e10e:	8d 08       	st.w	r6[0x0],r8
8000e110:	fe b0 df 68 	rcall	80009fe0 <_read>
8000e114:	5b fc       	cp.w	r12,-1
8000e116:	c0 51       	brne	8000e120 <_read_r+0x24>
8000e118:	6c 08       	ld.w	r8,r6[0x0]
8000e11a:	58 08       	cp.w	r8,0
8000e11c:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000e120:	d8 22       	popm	r4-r7,pc
8000e122:	d7 03       	nop

8000e124 <_realloc_r>:
8000e124:	d4 31       	pushm	r0-r7,lr
8000e126:	20 1d       	sub	sp,4
8000e128:	16 94       	mov	r4,r11
8000e12a:	18 92       	mov	r2,r12
8000e12c:	14 9b       	mov	r11,r10
8000e12e:	58 04       	cp.w	r4,0
8000e130:	c0 51       	brne	8000e13a <_realloc_r+0x16>
8000e132:	fe b0 dc 6f 	rcall	80009a10 <_malloc_r>
8000e136:	18 95       	mov	r5,r12
8000e138:	c5 39       	rjmp	8000e3de <_realloc_r+0x2ba>
8000e13a:	50 0a       	stdsp	sp[0x0],r10
8000e13c:	fe b0 df 2b 	rcall	80009f92 <__malloc_lock>
8000e140:	40 0b       	lddsp	r11,sp[0x0]
8000e142:	f6 c8 ff f5 	sub	r8,r11,-11
8000e146:	e8 c1 00 08 	sub	r1,r4,8
8000e14a:	10 96       	mov	r6,r8
8000e14c:	62 1c       	ld.w	r12,r1[0x4]
8000e14e:	e0 16 ff f8 	andl	r6,0xfff8
8000e152:	59 68       	cp.w	r8,22
8000e154:	f9 b6 08 10 	movls	r6,16
8000e158:	16 36       	cp.w	r6,r11
8000e15a:	5f 38       	srlo	r8
8000e15c:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000e160:	c0 50       	breq	8000e16a <_realloc_r+0x46>
8000e162:	30 c8       	mov	r8,12
8000e164:	30 05       	mov	r5,0
8000e166:	85 38       	st.w	r2[0xc],r8
8000e168:	c3 b9       	rjmp	8000e3de <_realloc_r+0x2ba>
8000e16a:	18 90       	mov	r0,r12
8000e16c:	e0 10 ff fc 	andl	r0,0xfffc
8000e170:	0c 30       	cp.w	r0,r6
8000e172:	e0 84 01 0b 	brge	8000e388 <_realloc_r+0x264>
8000e176:	e0 68 04 bc 	mov	r8,1212
8000e17a:	e2 00 00 09 	add	r9,r1,r0
8000e17e:	70 25       	ld.w	r5,r8[0x8]
8000e180:	0a 39       	cp.w	r9,r5
8000e182:	c0 90       	breq	8000e194 <_realloc_r+0x70>
8000e184:	72 1a       	ld.w	r10,r9[0x4]
8000e186:	a1 ca       	cbr	r10,0x0
8000e188:	f2 0a 00 0a 	add	r10,r9,r10
8000e18c:	74 1a       	ld.w	r10,r10[0x4]
8000e18e:	ed ba 00 00 	bld	r10,0x0
8000e192:	c2 20       	breq	8000e1d6 <_realloc_r+0xb2>
8000e194:	72 1a       	ld.w	r10,r9[0x4]
8000e196:	e0 1a ff fc 	andl	r10,0xfffc
8000e19a:	f4 00 00 03 	add	r3,r10,r0
8000e19e:	0a 39       	cp.w	r9,r5
8000e1a0:	c1 31       	brne	8000e1c6 <_realloc_r+0xa2>
8000e1a2:	ec c7 ff f0 	sub	r7,r6,-16
8000e1a6:	0e 33       	cp.w	r3,r7
8000e1a8:	c1 95       	brlt	8000e1da <_realloc_r+0xb6>
8000e1aa:	e2 06 00 09 	add	r9,r1,r6
8000e1ae:	0c 13       	sub	r3,r6
8000e1b0:	a1 a3       	sbr	r3,0x0
8000e1b2:	93 13       	st.w	r9[0x4],r3
8000e1b4:	91 29       	st.w	r8[0x8],r9
8000e1b6:	04 9c       	mov	r12,r2
8000e1b8:	62 18       	ld.w	r8,r1[0x4]
8000e1ba:	08 95       	mov	r5,r4
8000e1bc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000e1c0:	10 46       	or	r6,r8
8000e1c2:	83 16       	st.w	r1[0x4],r6
8000e1c4:	c0 b9       	rjmp	8000e3da <_realloc_r+0x2b6>
8000e1c6:	0c 33       	cp.w	r3,r6
8000e1c8:	c0 95       	brlt	8000e1da <_realloc_r+0xb6>
8000e1ca:	72 28       	ld.w	r8,r9[0x8]
8000e1cc:	02 97       	mov	r7,r1
8000e1ce:	72 39       	ld.w	r9,r9[0xc]
8000e1d0:	93 28       	st.w	r9[0x8],r8
8000e1d2:	91 39       	st.w	r8[0xc],r9
8000e1d4:	cd c8       	rjmp	8000e38c <_realloc_r+0x268>
8000e1d6:	30 0a       	mov	r10,0
8000e1d8:	14 99       	mov	r9,r10
8000e1da:	ed bc 00 00 	bld	r12,0x0
8000e1de:	e0 80 00 95 	breq	8000e308 <_realloc_r+0x1e4>
8000e1e2:	62 07       	ld.w	r7,r1[0x0]
8000e1e4:	e2 07 01 07 	sub	r7,r1,r7
8000e1e8:	6e 1c       	ld.w	r12,r7[0x4]
8000e1ea:	e0 1c ff fc 	andl	r12,0xfffc
8000e1ee:	58 09       	cp.w	r9,0
8000e1f0:	c5 60       	breq	8000e29c <_realloc_r+0x178>
8000e1f2:	f8 00 00 03 	add	r3,r12,r0
8000e1f6:	0a 39       	cp.w	r9,r5
8000e1f8:	c4 81       	brne	8000e288 <_realloc_r+0x164>
8000e1fa:	14 03       	add	r3,r10
8000e1fc:	ec c9 ff f0 	sub	r9,r6,-16
8000e200:	12 33       	cp.w	r3,r9
8000e202:	c4 d5       	brlt	8000e29c <_realloc_r+0x178>
8000e204:	6e 3a       	ld.w	r10,r7[0xc]
8000e206:	6e 29       	ld.w	r9,r7[0x8]
8000e208:	95 29       	st.w	r10[0x8],r9
8000e20a:	93 3a       	st.w	r9[0xc],r10
8000e20c:	ee c5 ff f8 	sub	r5,r7,-8
8000e210:	e0 ca 00 04 	sub	r10,r0,4
8000e214:	e0 4a 00 24 	cp.w	r10,36
8000e218:	e0 8b 00 25 	brhi	8000e262 <_realloc_r+0x13e>
8000e21c:	0a 99       	mov	r9,r5
8000e21e:	59 3a       	cp.w	r10,19
8000e220:	e0 88 00 1a 	brls	8000e254 <_realloc_r+0x130>
8000e224:	09 09       	ld.w	r9,r4++
8000e226:	8b 09       	st.w	r5[0x0],r9
8000e228:	09 09       	ld.w	r9,r4++
8000e22a:	8f 39       	st.w	r7[0xc],r9
8000e22c:	ee c9 ff f0 	sub	r9,r7,-16
8000e230:	59 ba       	cp.w	r10,27
8000e232:	e0 88 00 11 	brls	8000e254 <_realloc_r+0x130>
8000e236:	09 0b       	ld.w	r11,r4++
8000e238:	93 0b       	st.w	r9[0x0],r11
8000e23a:	09 09       	ld.w	r9,r4++
8000e23c:	8f 59       	st.w	r7[0x14],r9
8000e23e:	ee c9 ff e8 	sub	r9,r7,-24
8000e242:	e0 4a 00 24 	cp.w	r10,36
8000e246:	c0 71       	brne	8000e254 <_realloc_r+0x130>
8000e248:	09 0a       	ld.w	r10,r4++
8000e24a:	93 0a       	st.w	r9[0x0],r10
8000e24c:	ee c9 ff e0 	sub	r9,r7,-32
8000e250:	09 0a       	ld.w	r10,r4++
8000e252:	8f 7a       	st.w	r7[0x1c],r10
8000e254:	09 0a       	ld.w	r10,r4++
8000e256:	12 aa       	st.w	r9++,r10
8000e258:	68 0a       	ld.w	r10,r4[0x0]
8000e25a:	93 0a       	st.w	r9[0x0],r10
8000e25c:	68 1a       	ld.w	r10,r4[0x4]
8000e25e:	93 1a       	st.w	r9[0x4],r10
8000e260:	c0 78       	rjmp	8000e26e <_realloc_r+0x14a>
8000e262:	50 08       	stdsp	sp[0x0],r8
8000e264:	08 9b       	mov	r11,r4
8000e266:	0a 9c       	mov	r12,r5
8000e268:	fe b0 fc 41 	rcall	8000daea <memmove>
8000e26c:	40 08       	lddsp	r8,sp[0x0]
8000e26e:	ee 06 00 09 	add	r9,r7,r6
8000e272:	0c 13       	sub	r3,r6
8000e274:	a1 a3       	sbr	r3,0x0
8000e276:	93 13       	st.w	r9[0x4],r3
8000e278:	91 29       	st.w	r8[0x8],r9
8000e27a:	04 9c       	mov	r12,r2
8000e27c:	6e 18       	ld.w	r8,r7[0x4]
8000e27e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000e282:	10 46       	or	r6,r8
8000e284:	8f 16       	st.w	r7[0x4],r6
8000e286:	ca a8       	rjmp	8000e3da <_realloc_r+0x2b6>
8000e288:	14 03       	add	r3,r10
8000e28a:	0c 33       	cp.w	r3,r6
8000e28c:	c0 85       	brlt	8000e29c <_realloc_r+0x178>
8000e28e:	72 28       	ld.w	r8,r9[0x8]
8000e290:	72 39       	ld.w	r9,r9[0xc]
8000e292:	93 28       	st.w	r9[0x8],r8
8000e294:	91 39       	st.w	r8[0xc],r9
8000e296:	6e 28       	ld.w	r8,r7[0x8]
8000e298:	6e 39       	ld.w	r9,r7[0xc]
8000e29a:	c0 78       	rjmp	8000e2a8 <_realloc_r+0x184>
8000e29c:	f8 00 00 03 	add	r3,r12,r0
8000e2a0:	0c 33       	cp.w	r3,r6
8000e2a2:	c3 35       	brlt	8000e308 <_realloc_r+0x1e4>
8000e2a4:	6e 39       	ld.w	r9,r7[0xc]
8000e2a6:	6e 28       	ld.w	r8,r7[0x8]
8000e2a8:	93 28       	st.w	r9[0x8],r8
8000e2aa:	91 39       	st.w	r8[0xc],r9
8000e2ac:	e0 ca 00 04 	sub	r10,r0,4
8000e2b0:	ee cc ff f8 	sub	r12,r7,-8
8000e2b4:	e0 4a 00 24 	cp.w	r10,36
8000e2b8:	e0 8b 00 24 	brhi	8000e300 <_realloc_r+0x1dc>
8000e2bc:	59 3a       	cp.w	r10,19
8000e2be:	e0 88 00 1a 	brls	8000e2f2 <_realloc_r+0x1ce>
8000e2c2:	09 08       	ld.w	r8,r4++
8000e2c4:	99 08       	st.w	r12[0x0],r8
8000e2c6:	09 08       	ld.w	r8,r4++
8000e2c8:	8f 38       	st.w	r7[0xc],r8
8000e2ca:	ee cc ff f0 	sub	r12,r7,-16
8000e2ce:	59 ba       	cp.w	r10,27
8000e2d0:	e0 88 00 11 	brls	8000e2f2 <_realloc_r+0x1ce>
8000e2d4:	09 08       	ld.w	r8,r4++
8000e2d6:	99 08       	st.w	r12[0x0],r8
8000e2d8:	09 08       	ld.w	r8,r4++
8000e2da:	8f 58       	st.w	r7[0x14],r8
8000e2dc:	ee cc ff e8 	sub	r12,r7,-24
8000e2e0:	e0 4a 00 24 	cp.w	r10,36
8000e2e4:	c0 71       	brne	8000e2f2 <_realloc_r+0x1ce>
8000e2e6:	09 08       	ld.w	r8,r4++
8000e2e8:	99 08       	st.w	r12[0x0],r8
8000e2ea:	ee cc ff e0 	sub	r12,r7,-32
8000e2ee:	09 08       	ld.w	r8,r4++
8000e2f0:	8f 78       	st.w	r7[0x1c],r8
8000e2f2:	09 08       	ld.w	r8,r4++
8000e2f4:	18 a8       	st.w	r12++,r8
8000e2f6:	68 08       	ld.w	r8,r4[0x0]
8000e2f8:	99 08       	st.w	r12[0x0],r8
8000e2fa:	68 18       	ld.w	r8,r4[0x4]
8000e2fc:	99 18       	st.w	r12[0x4],r8
8000e2fe:	c4 78       	rjmp	8000e38c <_realloc_r+0x268>
8000e300:	08 9b       	mov	r11,r4
8000e302:	fe b0 fb f4 	rcall	8000daea <memmove>
8000e306:	c4 38       	rjmp	8000e38c <_realloc_r+0x268>
8000e308:	04 9c       	mov	r12,r2
8000e30a:	fe b0 db 83 	rcall	80009a10 <_malloc_r>
8000e30e:	18 95       	mov	r5,r12
8000e310:	c3 a0       	breq	8000e384 <_realloc_r+0x260>
8000e312:	62 18       	ld.w	r8,r1[0x4]
8000e314:	f8 c9 00 08 	sub	r9,r12,8
8000e318:	a1 c8       	cbr	r8,0x0
8000e31a:	e2 08 00 08 	add	r8,r1,r8
8000e31e:	10 39       	cp.w	r9,r8
8000e320:	c0 71       	brne	8000e32e <_realloc_r+0x20a>
8000e322:	72 13       	ld.w	r3,r9[0x4]
8000e324:	02 97       	mov	r7,r1
8000e326:	e0 13 ff fc 	andl	r3,0xfffc
8000e32a:	00 03       	add	r3,r0
8000e32c:	c3 08       	rjmp	8000e38c <_realloc_r+0x268>
8000e32e:	e0 ca 00 04 	sub	r10,r0,4
8000e332:	e0 4a 00 24 	cp.w	r10,36
8000e336:	e0 8b 00 20 	brhi	8000e376 <_realloc_r+0x252>
8000e33a:	08 99       	mov	r9,r4
8000e33c:	18 98       	mov	r8,r12
8000e33e:	59 3a       	cp.w	r10,19
8000e340:	e0 88 00 14 	brls	8000e368 <_realloc_r+0x244>
8000e344:	13 0b       	ld.w	r11,r9++
8000e346:	10 ab       	st.w	r8++,r11
8000e348:	13 0b       	ld.w	r11,r9++
8000e34a:	10 ab       	st.w	r8++,r11
8000e34c:	59 ba       	cp.w	r10,27
8000e34e:	e0 88 00 0d 	brls	8000e368 <_realloc_r+0x244>
8000e352:	13 0b       	ld.w	r11,r9++
8000e354:	10 ab       	st.w	r8++,r11
8000e356:	13 0b       	ld.w	r11,r9++
8000e358:	10 ab       	st.w	r8++,r11
8000e35a:	e0 4a 00 24 	cp.w	r10,36
8000e35e:	c0 51       	brne	8000e368 <_realloc_r+0x244>
8000e360:	13 0a       	ld.w	r10,r9++
8000e362:	10 aa       	st.w	r8++,r10
8000e364:	13 0a       	ld.w	r10,r9++
8000e366:	10 aa       	st.w	r8++,r10
8000e368:	13 0a       	ld.w	r10,r9++
8000e36a:	10 aa       	st.w	r8++,r10
8000e36c:	72 0a       	ld.w	r10,r9[0x0]
8000e36e:	91 0a       	st.w	r8[0x0],r10
8000e370:	72 19       	ld.w	r9,r9[0x4]
8000e372:	91 19       	st.w	r8[0x4],r9
8000e374:	c0 48       	rjmp	8000e37c <_realloc_r+0x258>
8000e376:	08 9b       	mov	r11,r4
8000e378:	fe b0 fb b9 	rcall	8000daea <memmove>
8000e37c:	08 9b       	mov	r11,r4
8000e37e:	04 9c       	mov	r12,r2
8000e380:	fe b0 df a8 	rcall	8000a2d0 <_free_r>
8000e384:	04 9c       	mov	r12,r2
8000e386:	c2 a8       	rjmp	8000e3da <_realloc_r+0x2b6>
8000e388:	00 93       	mov	r3,r0
8000e38a:	02 97       	mov	r7,r1
8000e38c:	e6 06 01 09 	sub	r9,r3,r6
8000e390:	6e 18       	ld.w	r8,r7[0x4]
8000e392:	58 f9       	cp.w	r9,15
8000e394:	e0 88 00 16 	brls	8000e3c0 <_realloc_r+0x29c>
8000e398:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000e39c:	ed e8 10 08 	or	r8,r6,r8
8000e3a0:	8f 18       	st.w	r7[0x4],r8
8000e3a2:	12 98       	mov	r8,r9
8000e3a4:	a1 a8       	sbr	r8,0x0
8000e3a6:	ee 06 00 0b 	add	r11,r7,r6
8000e3aa:	f6 09 00 09 	add	r9,r11,r9
8000e3ae:	97 18       	st.w	r11[0x4],r8
8000e3b0:	72 18       	ld.w	r8,r9[0x4]
8000e3b2:	a1 a8       	sbr	r8,0x0
8000e3b4:	2f 8b       	sub	r11,-8
8000e3b6:	93 18       	st.w	r9[0x4],r8
8000e3b8:	04 9c       	mov	r12,r2
8000e3ba:	fe b0 df 8b 	rcall	8000a2d0 <_free_r>
8000e3be:	c0 b8       	rjmp	8000e3d4 <_realloc_r+0x2b0>
8000e3c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000e3c4:	e7 e8 10 08 	or	r8,r3,r8
8000e3c8:	8f 18       	st.w	r7[0x4],r8
8000e3ca:	ee 03 00 03 	add	r3,r7,r3
8000e3ce:	66 18       	ld.w	r8,r3[0x4]
8000e3d0:	a1 a8       	sbr	r8,0x0
8000e3d2:	87 18       	st.w	r3[0x4],r8
8000e3d4:	04 9c       	mov	r12,r2
8000e3d6:	ee c5 ff f8 	sub	r5,r7,-8
8000e3da:	fe b0 dd dd 	rcall	80009f94 <__malloc_unlock>
8000e3de:	0a 9c       	mov	r12,r5
8000e3e0:	2f fd       	sub	sp,-4
8000e3e2:	d8 32       	popm	r0-r7,pc

8000e3e4 <__isinfd>:
8000e3e4:	14 98       	mov	r8,r10
8000e3e6:	fc 19 7f f0 	movh	r9,0x7ff0
8000e3ea:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000e3ee:	f0 0b 11 00 	rsub	r11,r8,0
8000e3f2:	f7 e8 10 08 	or	r8,r11,r8
8000e3f6:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000e3fa:	f2 08 01 08 	sub	r8,r9,r8
8000e3fe:	f0 0c 11 00 	rsub	r12,r8,0
8000e402:	f9 e8 10 08 	or	r8,r12,r8
8000e406:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000e40a:	2f fc       	sub	r12,-1
8000e40c:	5e fc       	retal	r12

8000e40e <__isnand>:
8000e40e:	14 98       	mov	r8,r10
8000e410:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000e414:	f0 0c 11 00 	rsub	r12,r8,0
8000e418:	10 4c       	or	r12,r8
8000e41a:	fc 18 7f f0 	movh	r8,0x7ff0
8000e41e:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000e422:	f0 0c 01 0c 	sub	r12,r8,r12
8000e426:	bf 9c       	lsr	r12,0x1f
8000e428:	5e fc       	retal	r12

8000e42a <strlen>:
8000e42a:	30 09       	mov	r9,0
8000e42c:	18 98       	mov	r8,r12
8000e42e:	c0 28       	rjmp	8000e432 <strlen+0x8>
8000e430:	2f f8       	sub	r8,-1
8000e432:	11 8a       	ld.ub	r10,r8[0x0]
8000e434:	f2 0a 18 00 	cp.b	r10,r9
8000e438:	cf c1       	brne	8000e430 <strlen+0x6>
8000e43a:	f0 0c 01 0c 	sub	r12,r8,r12
8000e43e:	5e fc       	retal	r12

8000e440 <_fstat_r>:
8000e440:	d4 21       	pushm	r4-r7,lr
8000e442:	16 98       	mov	r8,r11
8000e444:	18 97       	mov	r7,r12
8000e446:	10 9c       	mov	r12,r8
8000e448:	30 08       	mov	r8,0
8000e44a:	e0 66 0c c0 	mov	r6,3264
8000e44e:	14 9b       	mov	r11,r10
8000e450:	8d 08       	st.w	r6[0x0],r8
8000e452:	fe b0 dd ef 	rcall	8000a030 <_fstat>
8000e456:	5b fc       	cp.w	r12,-1
8000e458:	c0 51       	brne	8000e462 <_fstat_r+0x22>
8000e45a:	6c 08       	ld.w	r8,r6[0x0]
8000e45c:	58 08       	cp.w	r8,0
8000e45e:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000e462:	d8 22       	popm	r4-r7,pc

8000e464 <__avr32_f64_mul>:
8000e464:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000e468:	e0 80 00 dc 	breq	8000e620 <__avr32_f64_mul_op1_zero>
8000e46c:	d4 21       	pushm	r4-r7,lr
8000e46e:	f7 e9 20 0e 	eor	lr,r11,r9
8000e472:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000e476:	30 15       	mov	r5,1
8000e478:	c4 30       	breq	8000e4fe <__avr32_f64_mul_op1_subnormal>
8000e47a:	ab 6b       	lsl	r11,0xa
8000e47c:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000e480:	ab 6a       	lsl	r10,0xa
8000e482:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000e486:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000e48a:	c5 c0       	breq	8000e542 <__avr32_f64_mul_op2_subnormal>
8000e48c:	a1 78       	lsl	r8,0x1
8000e48e:	5c f9       	rol	r9
8000e490:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000e494:	e0 47 07 ff 	cp.w	r7,2047
8000e498:	c7 70       	breq	8000e586 <__avr32_f64_mul_op_nan_or_inf>
8000e49a:	e0 46 07 ff 	cp.w	r6,2047
8000e49e:	c7 40       	breq	8000e586 <__avr32_f64_mul_op_nan_or_inf>
8000e4a0:	ee 06 00 0c 	add	r12,r7,r6
8000e4a4:	e0 2c 03 fe 	sub	r12,1022
8000e4a8:	f6 08 06 44 	mulu.d	r4,r11,r8
8000e4ac:	f4 09 07 44 	macu.d	r4,r10,r9
8000e4b0:	f4 08 06 46 	mulu.d	r6,r10,r8
8000e4b4:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000e4b8:	08 07       	add	r7,r4
8000e4ba:	f4 05 00 4a 	adc	r10,r10,r5
8000e4be:	5c 0b       	acr	r11
8000e4c0:	ed bb 00 14 	bld	r11,0x14
8000e4c4:	c0 50       	breq	8000e4ce <__avr32_f64_mul+0x6a>
8000e4c6:	a1 77       	lsl	r7,0x1
8000e4c8:	5c fa       	rol	r10
8000e4ca:	5c fb       	rol	r11
8000e4cc:	20 1c       	sub	r12,1
8000e4ce:	58 0c       	cp.w	r12,0
8000e4d0:	e0 8a 00 6f 	brle	8000e5ae <__avr32_f64_mul_res_subnormal>
8000e4d4:	e0 4c 07 ff 	cp.w	r12,2047
8000e4d8:	e0 84 00 9c 	brge	8000e610 <__avr32_f64_mul_res_inf>
8000e4dc:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000e4e0:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000e4e4:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000e4e8:	ee 17 80 00 	eorh	r7,0x8000
8000e4ec:	f1 b7 04 20 	satu	r7,0x1
8000e4f0:	0e 0a       	add	r10,r7
8000e4f2:	5c 0b       	acr	r11
8000e4f4:	ed be 00 1f 	bld	lr,0x1f
8000e4f8:	ef bb 00 1f 	bst	r11,0x1f
8000e4fc:	d8 22       	popm	r4-r7,pc

8000e4fe <__avr32_f64_mul_op1_subnormal>:
8000e4fe:	e4 1b 00 0f 	andh	r11,0xf
8000e502:	f4 0c 12 00 	clz	r12,r10
8000e506:	f6 06 12 00 	clz	r6,r11
8000e50a:	f7 bc 03 e1 	sublo	r12,-31
8000e50e:	f8 06 17 30 	movlo	r6,r12
8000e512:	f7 b6 02 01 	subhs	r6,1
8000e516:	e0 46 00 20 	cp.w	r6,32
8000e51a:	c0 d4       	brge	8000e534 <__avr32_f64_mul_op1_subnormal+0x36>
8000e51c:	ec 0c 11 20 	rsub	r12,r6,32
8000e520:	f6 06 09 4b 	lsl	r11,r11,r6
8000e524:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000e528:	18 4b       	or	r11,r12
8000e52a:	f4 06 09 4a 	lsl	r10,r10,r6
8000e52e:	20 b6       	sub	r6,11
8000e530:	0c 17       	sub	r7,r6
8000e532:	ca ab       	rjmp	8000e486 <__avr32_f64_mul+0x22>
8000e534:	f4 06 09 4b 	lsl	r11,r10,r6
8000e538:	c6 40       	breq	8000e600 <__avr32_f64_mul_res_zero>
8000e53a:	30 0a       	mov	r10,0
8000e53c:	20 b6       	sub	r6,11
8000e53e:	0c 17       	sub	r7,r6
8000e540:	ca 3b       	rjmp	8000e486 <__avr32_f64_mul+0x22>

8000e542 <__avr32_f64_mul_op2_subnormal>:
8000e542:	e4 19 00 0f 	andh	r9,0xf
8000e546:	f0 0c 12 00 	clz	r12,r8
8000e54a:	f2 05 12 00 	clz	r5,r9
8000e54e:	f7 bc 03 ea 	sublo	r12,-22
8000e552:	f8 05 17 30 	movlo	r5,r12
8000e556:	f7 b5 02 0a 	subhs	r5,10
8000e55a:	e0 45 00 20 	cp.w	r5,32
8000e55e:	c0 d4       	brge	8000e578 <__avr32_f64_mul_op2_subnormal+0x36>
8000e560:	ea 0c 11 20 	rsub	r12,r5,32
8000e564:	f2 05 09 49 	lsl	r9,r9,r5
8000e568:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000e56c:	18 49       	or	r9,r12
8000e56e:	f0 05 09 48 	lsl	r8,r8,r5
8000e572:	20 25       	sub	r5,2
8000e574:	0a 16       	sub	r6,r5
8000e576:	c8 fb       	rjmp	8000e494 <__avr32_f64_mul+0x30>
8000e578:	f0 05 09 49 	lsl	r9,r8,r5
8000e57c:	c4 20       	breq	8000e600 <__avr32_f64_mul_res_zero>
8000e57e:	30 08       	mov	r8,0
8000e580:	20 25       	sub	r5,2
8000e582:	0a 16       	sub	r6,r5
8000e584:	c8 8b       	rjmp	8000e494 <__avr32_f64_mul+0x30>

8000e586 <__avr32_f64_mul_op_nan_or_inf>:
8000e586:	e4 19 00 0f 	andh	r9,0xf
8000e58a:	e4 1b 00 0f 	andh	r11,0xf
8000e58e:	14 4b       	or	r11,r10
8000e590:	10 49       	or	r9,r8
8000e592:	e0 47 07 ff 	cp.w	r7,2047
8000e596:	c0 91       	brne	8000e5a8 <__avr32_f64_mul_op1_not_naninf>
8000e598:	58 0b       	cp.w	r11,0
8000e59a:	c3 81       	brne	8000e60a <__avr32_f64_mul_res_nan>
8000e59c:	e0 46 07 ff 	cp.w	r6,2047
8000e5a0:	c3 81       	brne	8000e610 <__avr32_f64_mul_res_inf>
8000e5a2:	58 09       	cp.w	r9,0
8000e5a4:	c3 60       	breq	8000e610 <__avr32_f64_mul_res_inf>
8000e5a6:	c3 28       	rjmp	8000e60a <__avr32_f64_mul_res_nan>

8000e5a8 <__avr32_f64_mul_op1_not_naninf>:
8000e5a8:	58 09       	cp.w	r9,0
8000e5aa:	c3 30       	breq	8000e610 <__avr32_f64_mul_res_inf>
8000e5ac:	c2 f8       	rjmp	8000e60a <__avr32_f64_mul_res_nan>

8000e5ae <__avr32_f64_mul_res_subnormal>:
8000e5ae:	5c 3c       	neg	r12
8000e5b0:	2f fc       	sub	r12,-1
8000e5b2:	f1 bc 04 c0 	satu	r12,0x6
8000e5b6:	e0 4c 00 20 	cp.w	r12,32
8000e5ba:	c1 14       	brge	8000e5dc <__avr32_f64_mul_res_subnormal+0x2e>
8000e5bc:	f8 08 11 20 	rsub	r8,r12,32
8000e5c0:	0e 46       	or	r6,r7
8000e5c2:	ee 0c 0a 47 	lsr	r7,r7,r12
8000e5c6:	f4 08 09 49 	lsl	r9,r10,r8
8000e5ca:	12 47       	or	r7,r9
8000e5cc:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000e5d0:	f6 08 09 49 	lsl	r9,r11,r8
8000e5d4:	12 4a       	or	r10,r9
8000e5d6:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000e5da:	c8 3b       	rjmp	8000e4e0 <__avr32_f64_mul+0x7c>
8000e5dc:	f8 08 11 20 	rsub	r8,r12,32
8000e5e0:	f9 b9 00 00 	moveq	r9,0
8000e5e4:	c0 30       	breq	8000e5ea <__avr32_f64_mul_res_subnormal+0x3c>
8000e5e6:	f6 08 09 49 	lsl	r9,r11,r8
8000e5ea:	0e 46       	or	r6,r7
8000e5ec:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000e5f0:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000e5f4:	f3 ea 10 07 	or	r7,r9,r10
8000e5f8:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000e5fc:	30 0b       	mov	r11,0
8000e5fe:	c7 1b       	rjmp	8000e4e0 <__avr32_f64_mul+0x7c>

8000e600 <__avr32_f64_mul_res_zero>:
8000e600:	1c 9b       	mov	r11,lr
8000e602:	e6 1b 80 00 	andh	r11,0x8000,COH
8000e606:	30 0a       	mov	r10,0
8000e608:	d8 22       	popm	r4-r7,pc

8000e60a <__avr32_f64_mul_res_nan>:
8000e60a:	3f fb       	mov	r11,-1
8000e60c:	3f fa       	mov	r10,-1
8000e60e:	d8 22       	popm	r4-r7,pc

8000e610 <__avr32_f64_mul_res_inf>:
8000e610:	f0 6b 00 00 	mov	r11,-1048576
8000e614:	ed be 00 1f 	bld	lr,0x1f
8000e618:	ef bb 00 1f 	bst	r11,0x1f
8000e61c:	30 0a       	mov	r10,0
8000e61e:	d8 22       	popm	r4-r7,pc

8000e620 <__avr32_f64_mul_op1_zero>:
8000e620:	f7 e9 20 0b 	eor	r11,r11,r9
8000e624:	e6 1b 80 00 	andh	r11,0x8000,COH
8000e628:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000e62c:	e0 4c 07 ff 	cp.w	r12,2047
8000e630:	5e 1c       	retne	r12
8000e632:	3f fa       	mov	r10,-1
8000e634:	3f fb       	mov	r11,-1
8000e636:	5e fc       	retal	r12

8000e638 <__avr32_f64_sub_from_add>:
8000e638:	ee 19 80 00 	eorh	r9,0x8000

8000e63c <__avr32_f64_sub>:
8000e63c:	f7 e9 20 0c 	eor	r12,r11,r9
8000e640:	e0 86 00 ca 	brmi	8000e7d4 <__avr32_f64_add_from_sub>
8000e644:	eb cd 40 e0 	pushm	r5-r7,lr
8000e648:	16 9c       	mov	r12,r11
8000e64a:	e6 1c 80 00 	andh	r12,0x8000,COH
8000e64e:	bf db       	cbr	r11,0x1f
8000e650:	bf d9       	cbr	r9,0x1f
8000e652:	10 3a       	cp.w	r10,r8
8000e654:	f2 0b 13 00 	cpc	r11,r9
8000e658:	c0 92       	brcc	8000e66a <__avr32_f64_sub+0x2e>
8000e65a:	16 97       	mov	r7,r11
8000e65c:	12 9b       	mov	r11,r9
8000e65e:	0e 99       	mov	r9,r7
8000e660:	14 97       	mov	r7,r10
8000e662:	10 9a       	mov	r10,r8
8000e664:	0e 98       	mov	r8,r7
8000e666:	ee 1c 80 00 	eorh	r12,0x8000
8000e66a:	f6 07 16 14 	lsr	r7,r11,0x14
8000e66e:	ab 7b       	lsl	r11,0xb
8000e670:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000e674:	ab 7a       	lsl	r10,0xb
8000e676:	bf bb       	sbr	r11,0x1f
8000e678:	f2 06 16 14 	lsr	r6,r9,0x14
8000e67c:	c4 40       	breq	8000e704 <__avr32_f64_sub_opL_subnormal>
8000e67e:	ab 79       	lsl	r9,0xb
8000e680:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000e684:	ab 78       	lsl	r8,0xb
8000e686:	bf b9       	sbr	r9,0x1f

8000e688 <__avr32_f64_sub_opL_subnormal_done>:
8000e688:	e0 47 07 ff 	cp.w	r7,2047
8000e68c:	c4 f0       	breq	8000e72a <__avr32_f64_sub_opH_nan_or_inf>
8000e68e:	0e 26       	rsub	r6,r7
8000e690:	c1 20       	breq	8000e6b4 <__avr32_f64_sub_shift_done>
8000e692:	ec 05 11 20 	rsub	r5,r6,32
8000e696:	e0 46 00 20 	cp.w	r6,32
8000e69a:	c7 c2       	brcc	8000e792 <__avr32_f64_sub_longshift>
8000e69c:	f0 05 09 4e 	lsl	lr,r8,r5
8000e6a0:	f2 05 09 45 	lsl	r5,r9,r5
8000e6a4:	f0 06 0a 48 	lsr	r8,r8,r6
8000e6a8:	f2 06 0a 49 	lsr	r9,r9,r6
8000e6ac:	0a 48       	or	r8,r5
8000e6ae:	58 0e       	cp.w	lr,0
8000e6b0:	5f 1e       	srne	lr
8000e6b2:	1c 48       	or	r8,lr

8000e6b4 <__avr32_f64_sub_shift_done>:
8000e6b4:	10 1a       	sub	r10,r8
8000e6b6:	f6 09 01 4b 	sbc	r11,r11,r9
8000e6ba:	f6 06 12 00 	clz	r6,r11
8000e6be:	c0 e0       	breq	8000e6da <__avr32_f64_sub_longnormalize_done>
8000e6c0:	c7 83       	brcs	8000e7b0 <__avr32_f64_sub_longnormalize>
8000e6c2:	ec 0e 11 20 	rsub	lr,r6,32
8000e6c6:	f6 06 09 4b 	lsl	r11,r11,r6
8000e6ca:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000e6ce:	1c 4b       	or	r11,lr
8000e6d0:	f4 06 09 4a 	lsl	r10,r10,r6
8000e6d4:	0c 17       	sub	r7,r6
8000e6d6:	e0 8a 00 39 	brle	8000e748 <__avr32_f64_sub_subnormal_result>

8000e6da <__avr32_f64_sub_longnormalize_done>:
8000e6da:	f4 09 15 15 	lsl	r9,r10,0x15
8000e6de:	ab 9a       	lsr	r10,0xb
8000e6e0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000e6e4:	ab 9b       	lsr	r11,0xb
8000e6e6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000e6ea:	18 4b       	or	r11,r12

8000e6ec <__avr32_f64_sub_round>:
8000e6ec:	fc 17 80 00 	movh	r7,0x8000
8000e6f0:	ed ba 00 00 	bld	r10,0x0
8000e6f4:	f7 b7 01 ff 	subne	r7,-1
8000e6f8:	0e 39       	cp.w	r9,r7
8000e6fa:	5f 29       	srhs	r9
8000e6fc:	12 0a       	add	r10,r9
8000e6fe:	5c 0b       	acr	r11
8000e700:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000e704 <__avr32_f64_sub_opL_subnormal>:
8000e704:	ab 79       	lsl	r9,0xb
8000e706:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000e70a:	ab 78       	lsl	r8,0xb
8000e70c:	f3 e8 10 0e 	or	lr,r9,r8
8000e710:	f9 b6 01 01 	movne	r6,1
8000e714:	ee 0e 11 00 	rsub	lr,r7,0
8000e718:	f9 b7 00 01 	moveq	r7,1
8000e71c:	ef bb 00 1f 	bst	r11,0x1f
8000e720:	f7 ea 10 0e 	or	lr,r11,r10
8000e724:	f9 b7 00 00 	moveq	r7,0
8000e728:	cb 0b       	rjmp	8000e688 <__avr32_f64_sub_opL_subnormal_done>

8000e72a <__avr32_f64_sub_opH_nan_or_inf>:
8000e72a:	bf db       	cbr	r11,0x1f
8000e72c:	f7 ea 10 0e 	or	lr,r11,r10
8000e730:	c0 81       	brne	8000e740 <__avr32_f64_sub_return_nan>
8000e732:	e0 46 07 ff 	cp.w	r6,2047
8000e736:	c0 50       	breq	8000e740 <__avr32_f64_sub_return_nan>
8000e738:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000e73c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000e740 <__avr32_f64_sub_return_nan>:
8000e740:	3f fa       	mov	r10,-1
8000e742:	3f fb       	mov	r11,-1
8000e744:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000e748 <__avr32_f64_sub_subnormal_result>:
8000e748:	5c 37       	neg	r7
8000e74a:	2f f7       	sub	r7,-1
8000e74c:	f1 b7 04 c0 	satu	r7,0x6
8000e750:	e0 47 00 20 	cp.w	r7,32
8000e754:	c1 14       	brge	8000e776 <__avr32_f64_sub_subnormal_result+0x2e>
8000e756:	ee 08 11 20 	rsub	r8,r7,32
8000e75a:	f4 08 09 49 	lsl	r9,r10,r8
8000e75e:	5f 16       	srne	r6
8000e760:	f4 07 0a 4a 	lsr	r10,r10,r7
8000e764:	0c 4a       	or	r10,r6
8000e766:	f6 08 09 49 	lsl	r9,r11,r8
8000e76a:	f5 e9 10 0a 	or	r10,r10,r9
8000e76e:	f4 07 0a 4b 	lsr	r11,r10,r7
8000e772:	30 07       	mov	r7,0
8000e774:	cb 3b       	rjmp	8000e6da <__avr32_f64_sub_longnormalize_done>
8000e776:	ee 08 11 40 	rsub	r8,r7,64
8000e77a:	f6 08 09 49 	lsl	r9,r11,r8
8000e77e:	14 49       	or	r9,r10
8000e780:	5f 16       	srne	r6
8000e782:	f6 07 0a 4a 	lsr	r10,r11,r7
8000e786:	0c 4a       	or	r10,r6
8000e788:	30 0b       	mov	r11,0
8000e78a:	30 07       	mov	r7,0
8000e78c:	ca 7b       	rjmp	8000e6da <__avr32_f64_sub_longnormalize_done>
8000e78e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000e792 <__avr32_f64_sub_longshift>:
8000e792:	f1 b6 04 c0 	satu	r6,0x6
8000e796:	f0 0e 17 00 	moveq	lr,r8
8000e79a:	c0 40       	breq	8000e7a2 <__avr32_f64_sub_longshift+0x10>
8000e79c:	f2 05 09 4e 	lsl	lr,r9,r5
8000e7a0:	10 4e       	or	lr,r8
8000e7a2:	f2 06 0a 48 	lsr	r8,r9,r6
8000e7a6:	30 09       	mov	r9,0
8000e7a8:	58 0e       	cp.w	lr,0
8000e7aa:	5f 1e       	srne	lr
8000e7ac:	1c 48       	or	r8,lr
8000e7ae:	c8 3b       	rjmp	8000e6b4 <__avr32_f64_sub_shift_done>

8000e7b0 <__avr32_f64_sub_longnormalize>:
8000e7b0:	f4 06 12 00 	clz	r6,r10
8000e7b4:	f9 b7 03 00 	movlo	r7,0
8000e7b8:	f9 b6 03 00 	movlo	r6,0
8000e7bc:	f9 bc 03 00 	movlo	r12,0
8000e7c0:	f7 b6 02 e0 	subhs	r6,-32
8000e7c4:	f4 06 09 4b 	lsl	r11,r10,r6
8000e7c8:	30 0a       	mov	r10,0
8000e7ca:	0c 17       	sub	r7,r6
8000e7cc:	fe 9a ff be 	brle	8000e748 <__avr32_f64_sub_subnormal_result>
8000e7d0:	c8 5b       	rjmp	8000e6da <__avr32_f64_sub_longnormalize_done>
8000e7d2:	d7 03       	nop

8000e7d4 <__avr32_f64_add_from_sub>:
8000e7d4:	ee 19 80 00 	eorh	r9,0x8000

8000e7d8 <__avr32_f64_add>:
8000e7d8:	f7 e9 20 0c 	eor	r12,r11,r9
8000e7dc:	fe 96 ff 2e 	brmi	8000e638 <__avr32_f64_sub_from_add>
8000e7e0:	eb cd 40 e0 	pushm	r5-r7,lr
8000e7e4:	16 9c       	mov	r12,r11
8000e7e6:	e6 1c 80 00 	andh	r12,0x8000,COH
8000e7ea:	bf db       	cbr	r11,0x1f
8000e7ec:	bf d9       	cbr	r9,0x1f
8000e7ee:	12 3b       	cp.w	r11,r9
8000e7f0:	c0 72       	brcc	8000e7fe <__avr32_f64_add+0x26>
8000e7f2:	16 97       	mov	r7,r11
8000e7f4:	12 9b       	mov	r11,r9
8000e7f6:	0e 99       	mov	r9,r7
8000e7f8:	14 97       	mov	r7,r10
8000e7fa:	10 9a       	mov	r10,r8
8000e7fc:	0e 98       	mov	r8,r7
8000e7fe:	30 0e       	mov	lr,0
8000e800:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000e804:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000e808:	b5 ab       	sbr	r11,0x14
8000e80a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000e80e:	c6 20       	breq	8000e8d2 <__avr32_f64_add_op2_subnormal>
8000e810:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000e814:	b5 a9       	sbr	r9,0x14
8000e816:	e0 47 07 ff 	cp.w	r7,2047
8000e81a:	c2 80       	breq	8000e86a <__avr32_f64_add_opH_nan_or_inf>
8000e81c:	0e 26       	rsub	r6,r7
8000e81e:	c1 20       	breq	8000e842 <__avr32_f64_add_shift_done>
8000e820:	e0 46 00 36 	cp.w	r6,54
8000e824:	c1 52       	brcc	8000e84e <__avr32_f64_add_res_of_done>
8000e826:	ec 05 11 20 	rsub	r5,r6,32
8000e82a:	e0 46 00 20 	cp.w	r6,32
8000e82e:	c3 52       	brcc	8000e898 <__avr32_f64_add_longshift>
8000e830:	f0 05 09 4e 	lsl	lr,r8,r5
8000e834:	f2 05 09 45 	lsl	r5,r9,r5
8000e838:	f0 06 0a 48 	lsr	r8,r8,r6
8000e83c:	f2 06 0a 49 	lsr	r9,r9,r6
8000e840:	0a 48       	or	r8,r5

8000e842 <__avr32_f64_add_shift_done>:
8000e842:	10 0a       	add	r10,r8
8000e844:	f6 09 00 4b 	adc	r11,r11,r9
8000e848:	ed bb 00 15 	bld	r11,0x15
8000e84c:	c3 40       	breq	8000e8b4 <__avr32_f64_add_res_of>

8000e84e <__avr32_f64_add_res_of_done>:
8000e84e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000e852:	18 4b       	or	r11,r12

8000e854 <__avr32_f64_add_round>:
8000e854:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000e858:	18 4e       	or	lr,r12
8000e85a:	ee 1e 80 00 	eorh	lr,0x8000
8000e85e:	f1 be 04 20 	satu	lr,0x1
8000e862:	1c 0a       	add	r10,lr
8000e864:	5c 0b       	acr	r11
8000e866:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000e86a <__avr32_f64_add_opH_nan_or_inf>:
8000e86a:	b5 cb       	cbr	r11,0x14
8000e86c:	f7 ea 10 0e 	or	lr,r11,r10
8000e870:	c1 01       	brne	8000e890 <__avr32_f64_add_return_nan>
8000e872:	e0 46 07 ff 	cp.w	r6,2047
8000e876:	c0 30       	breq	8000e87c <__avr32_f64_add_opL_nan_or_inf>
8000e878:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000e87c <__avr32_f64_add_opL_nan_or_inf>:
8000e87c:	b5 c9       	cbr	r9,0x14
8000e87e:	f3 e8 10 0e 	or	lr,r9,r8
8000e882:	c0 71       	brne	8000e890 <__avr32_f64_add_return_nan>
8000e884:	30 0a       	mov	r10,0
8000e886:	fc 1b 7f f0 	movh	r11,0x7ff0
8000e88a:	18 4b       	or	r11,r12
8000e88c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000e890 <__avr32_f64_add_return_nan>:
8000e890:	3f fa       	mov	r10,-1
8000e892:	3f fb       	mov	r11,-1
8000e894:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000e898 <__avr32_f64_add_longshift>:
8000e898:	f1 b6 04 c0 	satu	r6,0x6
8000e89c:	f0 0e 17 00 	moveq	lr,r8
8000e8a0:	c0 60       	breq	8000e8ac <__avr32_f64_add_longshift+0x14>
8000e8a2:	f2 05 09 4e 	lsl	lr,r9,r5
8000e8a6:	58 08       	cp.w	r8,0
8000e8a8:	5f 18       	srne	r8
8000e8aa:	10 4e       	or	lr,r8
8000e8ac:	f2 06 0a 48 	lsr	r8,r9,r6
8000e8b0:	30 09       	mov	r9,0
8000e8b2:	cc 8b       	rjmp	8000e842 <__avr32_f64_add_shift_done>

8000e8b4 <__avr32_f64_add_res_of>:
8000e8b4:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000e8b8:	a1 9b       	lsr	r11,0x1
8000e8ba:	5d 0a       	ror	r10
8000e8bc:	5d 0e       	ror	lr
8000e8be:	2f f7       	sub	r7,-1
8000e8c0:	e0 47 07 ff 	cp.w	r7,2047
8000e8c4:	f9 ba 00 00 	moveq	r10,0
8000e8c8:	f9 bb 00 00 	moveq	r11,0
8000e8cc:	f9 be 00 00 	moveq	lr,0
8000e8d0:	cb fb       	rjmp	8000e84e <__avr32_f64_add_res_of_done>

8000e8d2 <__avr32_f64_add_op2_subnormal>:
8000e8d2:	30 16       	mov	r6,1
8000e8d4:	58 07       	cp.w	r7,0
8000e8d6:	ca 01       	brne	8000e816 <__avr32_f64_add+0x3e>
8000e8d8:	b5 cb       	cbr	r11,0x14
8000e8da:	10 0a       	add	r10,r8
8000e8dc:	f6 09 00 4b 	adc	r11,r11,r9
8000e8e0:	18 4b       	or	r11,r12
8000e8e2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e8e6:	d7 03       	nop

8000e8e8 <__avr32_f64_to_u32>:
8000e8e8:	58 0b       	cp.w	r11,0
8000e8ea:	5e 6d       	retmi	0

8000e8ec <__avr32_f64_to_s32>:
8000e8ec:	f6 0c 15 01 	lsl	r12,r11,0x1
8000e8f0:	b5 9c       	lsr	r12,0x15
8000e8f2:	e0 2c 03 ff 	sub	r12,1023
8000e8f6:	5e 3d       	retlo	0
8000e8f8:	f8 0c 11 1f 	rsub	r12,r12,31
8000e8fc:	16 99       	mov	r9,r11
8000e8fe:	ab 7b       	lsl	r11,0xb
8000e900:	bf bb       	sbr	r11,0x1f
8000e902:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000e906:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000e90a:	a1 79       	lsl	r9,0x1
8000e90c:	5e 2b       	reths	r11
8000e90e:	5c 3b       	neg	r11
8000e910:	5e fb       	retal	r11

8000e912 <__avr32_u32_to_f64>:
8000e912:	f8 cb 00 00 	sub	r11,r12,0
8000e916:	30 0c       	mov	r12,0
8000e918:	c0 38       	rjmp	8000e91e <__avr32_s32_to_f64+0x4>

8000e91a <__avr32_s32_to_f64>:
8000e91a:	18 9b       	mov	r11,r12
8000e91c:	5c 4b       	abs	r11
8000e91e:	30 0a       	mov	r10,0
8000e920:	5e 0b       	reteq	r11
8000e922:	d4 01       	pushm	lr
8000e924:	e0 69 04 1e 	mov	r9,1054
8000e928:	f6 08 12 00 	clz	r8,r11
8000e92c:	c1 70       	breq	8000e95a <__avr32_s32_to_f64+0x40>
8000e92e:	c0 c3       	brcs	8000e946 <__avr32_s32_to_f64+0x2c>
8000e930:	f0 0e 11 20 	rsub	lr,r8,32
8000e934:	f6 08 09 4b 	lsl	r11,r11,r8
8000e938:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000e93c:	1c 4b       	or	r11,lr
8000e93e:	f4 08 09 4a 	lsl	r10,r10,r8
8000e942:	10 19       	sub	r9,r8
8000e944:	c0 b8       	rjmp	8000e95a <__avr32_s32_to_f64+0x40>
8000e946:	f4 08 12 00 	clz	r8,r10
8000e94a:	f9 b8 03 00 	movlo	r8,0
8000e94e:	f7 b8 02 e0 	subhs	r8,-32
8000e952:	f4 08 09 4b 	lsl	r11,r10,r8
8000e956:	30 0a       	mov	r10,0
8000e958:	10 19       	sub	r9,r8
8000e95a:	58 09       	cp.w	r9,0
8000e95c:	e0 89 00 30 	brgt	8000e9bc <__avr32_s32_to_f64+0xa2>
8000e960:	5c 39       	neg	r9
8000e962:	2f f9       	sub	r9,-1
8000e964:	e0 49 00 36 	cp.w	r9,54
8000e968:	c0 43       	brcs	8000e970 <__avr32_s32_to_f64+0x56>
8000e96a:	30 0b       	mov	r11,0
8000e96c:	30 0a       	mov	r10,0
8000e96e:	c2 68       	rjmp	8000e9ba <__avr32_s32_to_f64+0xa0>
8000e970:	2f 69       	sub	r9,-10
8000e972:	f2 08 11 20 	rsub	r8,r9,32
8000e976:	e0 49 00 20 	cp.w	r9,32
8000e97a:	c0 b2       	brcc	8000e990 <__avr32_s32_to_f64+0x76>
8000e97c:	f4 08 09 4e 	lsl	lr,r10,r8
8000e980:	f6 08 09 48 	lsl	r8,r11,r8
8000e984:	f4 09 0a 4a 	lsr	r10,r10,r9
8000e988:	f6 09 0a 4b 	lsr	r11,r11,r9
8000e98c:	10 4b       	or	r11,r8
8000e98e:	c0 88       	rjmp	8000e99e <__avr32_s32_to_f64+0x84>
8000e990:	f6 08 09 4e 	lsl	lr,r11,r8
8000e994:	14 4e       	or	lr,r10
8000e996:	16 9a       	mov	r10,r11
8000e998:	30 0b       	mov	r11,0
8000e99a:	f4 09 0a 4a 	lsr	r10,r10,r9
8000e99e:	ed ba 00 00 	bld	r10,0x0
8000e9a2:	c0 92       	brcc	8000e9b4 <__avr32_s32_to_f64+0x9a>
8000e9a4:	1c 7e       	tst	lr,lr
8000e9a6:	c0 41       	brne	8000e9ae <__avr32_s32_to_f64+0x94>
8000e9a8:	ed ba 00 01 	bld	r10,0x1
8000e9ac:	c0 42       	brcc	8000e9b4 <__avr32_s32_to_f64+0x9a>
8000e9ae:	2f fa       	sub	r10,-1
8000e9b0:	f7 bb 02 ff 	subhs	r11,-1
8000e9b4:	5c fc       	rol	r12
8000e9b6:	5d 0b       	ror	r11
8000e9b8:	5d 0a       	ror	r10
8000e9ba:	d8 02       	popm	pc
8000e9bc:	e0 68 03 ff 	mov	r8,1023
8000e9c0:	ed ba 00 0b 	bld	r10,0xb
8000e9c4:	f7 b8 00 ff 	subeq	r8,-1
8000e9c8:	10 0a       	add	r10,r8
8000e9ca:	5c 0b       	acr	r11
8000e9cc:	f7 b9 03 fe 	sublo	r9,-2
8000e9d0:	e0 49 07 ff 	cp.w	r9,2047
8000e9d4:	c0 55       	brlt	8000e9de <__avr32_s32_to_f64+0xc4>
8000e9d6:	30 0a       	mov	r10,0
8000e9d8:	fc 1b ff e0 	movh	r11,0xffe0
8000e9dc:	c0 c8       	rjmp	8000e9f4 <__floatsidf_return_op1>
8000e9de:	ed bb 00 1f 	bld	r11,0x1f
8000e9e2:	f7 b9 01 01 	subne	r9,1
8000e9e6:	ab 9a       	lsr	r10,0xb
8000e9e8:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000e9ec:	a1 7b       	lsl	r11,0x1
8000e9ee:	ab 9b       	lsr	r11,0xb
8000e9f0:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000e9f4 <__floatsidf_return_op1>:
8000e9f4:	a1 7c       	lsl	r12,0x1
8000e9f6:	5d 0b       	ror	r11
8000e9f8:	d8 02       	popm	pc

8000e9fa <__avr32_f64_cmp_eq>:
8000e9fa:	10 3a       	cp.w	r10,r8
8000e9fc:	f2 0b 13 00 	cpc	r11,r9
8000ea00:	c0 80       	breq	8000ea10 <__avr32_f64_cmp_eq+0x16>
8000ea02:	a1 7b       	lsl	r11,0x1
8000ea04:	a1 79       	lsl	r9,0x1
8000ea06:	14 4b       	or	r11,r10
8000ea08:	12 4b       	or	r11,r9
8000ea0a:	10 4b       	or	r11,r8
8000ea0c:	5e 0f       	reteq	1
8000ea0e:	5e fd       	retal	0
8000ea10:	a1 7b       	lsl	r11,0x1
8000ea12:	fc 1c ff e0 	movh	r12,0xffe0
8000ea16:	58 0a       	cp.w	r10,0
8000ea18:	f8 0b 13 00 	cpc	r11,r12
8000ea1c:	5e 8f       	retls	1
8000ea1e:	5e fd       	retal	0

8000ea20 <__avr32_f64_cmp_ge>:
8000ea20:	1a de       	st.w	--sp,lr
8000ea22:	1a d7       	st.w	--sp,r7
8000ea24:	a1 7b       	lsl	r11,0x1
8000ea26:	5f 3c       	srlo	r12
8000ea28:	a1 79       	lsl	r9,0x1
8000ea2a:	5f 37       	srlo	r7
8000ea2c:	5c fc       	rol	r12
8000ea2e:	fc 1e ff e0 	movh	lr,0xffe0
8000ea32:	58 0a       	cp.w	r10,0
8000ea34:	fc 0b 13 00 	cpc	r11,lr
8000ea38:	e0 8b 00 1d 	brhi	8000ea72 <__avr32_f64_cmp_ge+0x52>
8000ea3c:	58 08       	cp.w	r8,0
8000ea3e:	fc 09 13 00 	cpc	r9,lr
8000ea42:	e0 8b 00 18 	brhi	8000ea72 <__avr32_f64_cmp_ge+0x52>
8000ea46:	58 0b       	cp.w	r11,0
8000ea48:	f5 ba 00 00 	subfeq	r10,0
8000ea4c:	c1 50       	breq	8000ea76 <__avr32_f64_cmp_ge+0x56>
8000ea4e:	1b 07       	ld.w	r7,sp++
8000ea50:	1b 0e       	ld.w	lr,sp++
8000ea52:	58 3c       	cp.w	r12,3
8000ea54:	c0 a0       	breq	8000ea68 <__avr32_f64_cmp_ge+0x48>
8000ea56:	58 1c       	cp.w	r12,1
8000ea58:	c0 33       	brcs	8000ea5e <__avr32_f64_cmp_ge+0x3e>
8000ea5a:	5e 0f       	reteq	1
8000ea5c:	5e 1d       	retne	0
8000ea5e:	10 3a       	cp.w	r10,r8
8000ea60:	f2 0b 13 00 	cpc	r11,r9
8000ea64:	5e 2f       	reths	1
8000ea66:	5e 3d       	retlo	0
8000ea68:	14 38       	cp.w	r8,r10
8000ea6a:	f6 09 13 00 	cpc	r9,r11
8000ea6e:	5e 2f       	reths	1
8000ea70:	5e 3d       	retlo	0
8000ea72:	1b 07       	ld.w	r7,sp++
8000ea74:	d8 0a       	popm	pc,r12=0
8000ea76:	58 17       	cp.w	r7,1
8000ea78:	5f 0c       	sreq	r12
8000ea7a:	58 09       	cp.w	r9,0
8000ea7c:	f5 b8 00 00 	subfeq	r8,0
8000ea80:	1b 07       	ld.w	r7,sp++
8000ea82:	1b 0e       	ld.w	lr,sp++
8000ea84:	5e 0f       	reteq	1
8000ea86:	5e fc       	retal	r12

8000ea88 <__avr32_f64_cmp_lt>:
8000ea88:	1a de       	st.w	--sp,lr
8000ea8a:	1a d7       	st.w	--sp,r7
8000ea8c:	a1 7b       	lsl	r11,0x1
8000ea8e:	5f 3c       	srlo	r12
8000ea90:	a1 79       	lsl	r9,0x1
8000ea92:	5f 37       	srlo	r7
8000ea94:	5c fc       	rol	r12
8000ea96:	fc 1e ff e0 	movh	lr,0xffe0
8000ea9a:	58 0a       	cp.w	r10,0
8000ea9c:	fc 0b 13 00 	cpc	r11,lr
8000eaa0:	e0 8b 00 1d 	brhi	8000eada <__avr32_f64_cmp_lt+0x52>
8000eaa4:	58 08       	cp.w	r8,0
8000eaa6:	fc 09 13 00 	cpc	r9,lr
8000eaaa:	e0 8b 00 18 	brhi	8000eada <__avr32_f64_cmp_lt+0x52>
8000eaae:	58 0b       	cp.w	r11,0
8000eab0:	f5 ba 00 00 	subfeq	r10,0
8000eab4:	c1 50       	breq	8000eade <__avr32_f64_cmp_lt+0x56>
8000eab6:	1b 07       	ld.w	r7,sp++
8000eab8:	1b 0e       	ld.w	lr,sp++
8000eaba:	58 3c       	cp.w	r12,3
8000eabc:	c0 a0       	breq	8000ead0 <__avr32_f64_cmp_lt+0x48>
8000eabe:	58 1c       	cp.w	r12,1
8000eac0:	c0 33       	brcs	8000eac6 <__avr32_f64_cmp_lt+0x3e>
8000eac2:	5e 0d       	reteq	0
8000eac4:	5e 1f       	retne	1
8000eac6:	10 3a       	cp.w	r10,r8
8000eac8:	f2 0b 13 00 	cpc	r11,r9
8000eacc:	5e 2d       	reths	0
8000eace:	5e 3f       	retlo	1
8000ead0:	14 38       	cp.w	r8,r10
8000ead2:	f6 09 13 00 	cpc	r9,r11
8000ead6:	5e 2d       	reths	0
8000ead8:	5e 3f       	retlo	1
8000eada:	1b 07       	ld.w	r7,sp++
8000eadc:	d8 0a       	popm	pc,r12=0
8000eade:	58 17       	cp.w	r7,1
8000eae0:	5f 1c       	srne	r12
8000eae2:	58 09       	cp.w	r9,0
8000eae4:	f5 b8 00 00 	subfeq	r8,0
8000eae8:	1b 07       	ld.w	r7,sp++
8000eaea:	1b 0e       	ld.w	lr,sp++
8000eaec:	5e 0d       	reteq	0
8000eaee:	5e fc       	retal	r12

8000eaf0 <__avr32_f64_div>:
8000eaf0:	eb cd 40 ff 	pushm	r0-r7,lr
8000eaf4:	f7 e9 20 0e 	eor	lr,r11,r9
8000eaf8:	f6 07 16 14 	lsr	r7,r11,0x14
8000eafc:	a9 7b       	lsl	r11,0x9
8000eafe:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000eb02:	a9 7a       	lsl	r10,0x9
8000eb04:	bd bb       	sbr	r11,0x1d
8000eb06:	e4 1b 3f ff 	andh	r11,0x3fff
8000eb0a:	ab d7       	cbr	r7,0xb
8000eb0c:	e0 80 00 cc 	breq	8000eca4 <__avr32_f64_div_round_subnormal+0x54>
8000eb10:	e0 47 07 ff 	cp.w	r7,2047
8000eb14:	e0 84 00 b5 	brge	8000ec7e <__avr32_f64_div_round_subnormal+0x2e>
8000eb18:	f2 06 16 14 	lsr	r6,r9,0x14
8000eb1c:	a9 79       	lsl	r9,0x9
8000eb1e:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000eb22:	a9 78       	lsl	r8,0x9
8000eb24:	bd b9       	sbr	r9,0x1d
8000eb26:	e4 19 3f ff 	andh	r9,0x3fff
8000eb2a:	ab d6       	cbr	r6,0xb
8000eb2c:	e0 80 00 e2 	breq	8000ecf0 <__avr32_f64_div_round_subnormal+0xa0>
8000eb30:	e0 46 07 ff 	cp.w	r6,2047
8000eb34:	e0 84 00 b2 	brge	8000ec98 <__avr32_f64_div_round_subnormal+0x48>
8000eb38:	0c 17       	sub	r7,r6
8000eb3a:	fe 37 fc 01 	sub	r7,-1023
8000eb3e:	fc 1c 80 00 	movh	r12,0x8000
8000eb42:	f8 03 16 01 	lsr	r3,r12,0x1
8000eb46:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000eb4a:	5c d4       	com	r4
8000eb4c:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000eb50:	e6 09 06 44 	mulu.d	r4,r3,r9
8000eb54:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000eb58:	e6 05 06 44 	mulu.d	r4,r3,r5
8000eb5c:	ea 03 15 02 	lsl	r3,r5,0x2
8000eb60:	e6 09 06 44 	mulu.d	r4,r3,r9
8000eb64:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000eb68:	e6 05 06 44 	mulu.d	r4,r3,r5
8000eb6c:	ea 03 15 02 	lsl	r3,r5,0x2
8000eb70:	e6 09 06 44 	mulu.d	r4,r3,r9
8000eb74:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000eb78:	e6 05 06 44 	mulu.d	r4,r3,r5
8000eb7c:	ea 03 15 02 	lsl	r3,r5,0x2
8000eb80:	e6 08 06 40 	mulu.d	r0,r3,r8
8000eb84:	e4 09 07 40 	macu.d	r0,r2,r9
8000eb88:	e6 09 06 44 	mulu.d	r4,r3,r9
8000eb8c:	02 04       	add	r4,r1
8000eb8e:	5c 05       	acr	r5
8000eb90:	a3 65       	lsl	r5,0x2
8000eb92:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000eb96:	a3 64       	lsl	r4,0x2
8000eb98:	5c 34       	neg	r4
8000eb9a:	f8 05 01 45 	sbc	r5,r12,r5
8000eb9e:	e6 04 06 40 	mulu.d	r0,r3,r4
8000eba2:	e4 05 07 40 	macu.d	r0,r2,r5
8000eba6:	e6 05 06 44 	mulu.d	r4,r3,r5
8000ebaa:	02 04       	add	r4,r1
8000ebac:	5c 05       	acr	r5
8000ebae:	ea 03 15 02 	lsl	r3,r5,0x2
8000ebb2:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000ebb6:	e8 02 15 02 	lsl	r2,r4,0x2
8000ebba:	e6 08 06 40 	mulu.d	r0,r3,r8
8000ebbe:	e4 09 07 40 	macu.d	r0,r2,r9
8000ebc2:	e6 09 06 44 	mulu.d	r4,r3,r9
8000ebc6:	02 04       	add	r4,r1
8000ebc8:	5c 05       	acr	r5
8000ebca:	a3 65       	lsl	r5,0x2
8000ebcc:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000ebd0:	a3 64       	lsl	r4,0x2
8000ebd2:	5c 34       	neg	r4
8000ebd4:	f8 05 01 45 	sbc	r5,r12,r5
8000ebd8:	e6 04 06 40 	mulu.d	r0,r3,r4
8000ebdc:	e4 05 07 40 	macu.d	r0,r2,r5
8000ebe0:	e6 05 06 44 	mulu.d	r4,r3,r5
8000ebe4:	02 04       	add	r4,r1
8000ebe6:	5c 05       	acr	r5
8000ebe8:	ea 03 15 02 	lsl	r3,r5,0x2
8000ebec:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000ebf0:	e8 02 15 02 	lsl	r2,r4,0x2
8000ebf4:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000ebf8:	e4 0b 07 40 	macu.d	r0,r2,r11
8000ebfc:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000ec00:	02 02       	add	r2,r1
8000ec02:	5c 03       	acr	r3
8000ec04:	ed b3 00 1c 	bld	r3,0x1c
8000ec08:	c0 90       	breq	8000ec1a <__avr32_f64_div+0x12a>
8000ec0a:	a1 72       	lsl	r2,0x1
8000ec0c:	5c f3       	rol	r3
8000ec0e:	20 17       	sub	r7,1
8000ec10:	a3 9a       	lsr	r10,0x3
8000ec12:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000ec16:	a3 9b       	lsr	r11,0x3
8000ec18:	c0 58       	rjmp	8000ec22 <__avr32_f64_div+0x132>
8000ec1a:	a5 8a       	lsr	r10,0x4
8000ec1c:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000ec20:	a5 8b       	lsr	r11,0x4
8000ec22:	58 07       	cp.w	r7,0
8000ec24:	e0 8a 00 8b 	brle	8000ed3a <__avr32_f64_div_res_subnormal>
8000ec28:	e0 12 ff 00 	andl	r2,0xff00
8000ec2c:	e8 12 00 80 	orl	r2,0x80
8000ec30:	e6 08 06 40 	mulu.d	r0,r3,r8
8000ec34:	e4 09 07 40 	macu.d	r0,r2,r9
8000ec38:	e4 08 06 44 	mulu.d	r4,r2,r8
8000ec3c:	e6 09 06 48 	mulu.d	r8,r3,r9
8000ec40:	00 05       	add	r5,r0
8000ec42:	f0 01 00 48 	adc	r8,r8,r1
8000ec46:	5c 09       	acr	r9
8000ec48:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000ec4c:	58 04       	cp.w	r4,0
8000ec4e:	5c 25       	cpc	r5

8000ec50 <__avr32_f64_div_round_subnormal>:
8000ec50:	f4 08 13 00 	cpc	r8,r10
8000ec54:	f6 09 13 00 	cpc	r9,r11
8000ec58:	5f 36       	srlo	r6
8000ec5a:	f8 06 17 00 	moveq	r6,r12
8000ec5e:	e4 0a 16 08 	lsr	r10,r2,0x8
8000ec62:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000ec66:	e6 0b 16 08 	lsr	r11,r3,0x8
8000ec6a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000ec6e:	ed be 00 1f 	bld	lr,0x1f
8000ec72:	ef bb 00 1f 	bst	r11,0x1f
8000ec76:	0c 0a       	add	r10,r6
8000ec78:	5c 0b       	acr	r11
8000ec7a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000ec7e:	e4 1b 00 0f 	andh	r11,0xf
8000ec82:	14 4b       	or	r11,r10
8000ec84:	e0 81 00 a7 	brne	8000edd2 <__avr32_f64_div_res_subnormal+0x98>
8000ec88:	f2 06 16 14 	lsr	r6,r9,0x14
8000ec8c:	ab d6       	cbr	r6,0xb
8000ec8e:	e0 46 07 ff 	cp.w	r6,2047
8000ec92:	e0 81 00 a4 	brne	8000edda <__avr32_f64_div_res_subnormal+0xa0>
8000ec96:	c9 e8       	rjmp	8000edd2 <__avr32_f64_div_res_subnormal+0x98>
8000ec98:	e4 19 00 0f 	andh	r9,0xf
8000ec9c:	10 49       	or	r9,r8
8000ec9e:	e0 81 00 9a 	brne	8000edd2 <__avr32_f64_div_res_subnormal+0x98>
8000eca2:	c9 28       	rjmp	8000edc6 <__avr32_f64_div_res_subnormal+0x8c>
8000eca4:	a3 7b       	lsl	r11,0x3
8000eca6:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000ecaa:	a3 7a       	lsl	r10,0x3
8000ecac:	f5 eb 10 04 	or	r4,r10,r11
8000ecb0:	e0 80 00 a0 	breq	8000edf0 <__avr32_f64_div_op1_zero>
8000ecb4:	f6 04 12 00 	clz	r4,r11
8000ecb8:	c1 70       	breq	8000ece6 <__avr32_f64_div_round_subnormal+0x96>
8000ecba:	c0 c3       	brcs	8000ecd2 <__avr32_f64_div_round_subnormal+0x82>
8000ecbc:	e8 05 11 20 	rsub	r5,r4,32
8000ecc0:	f6 04 09 4b 	lsl	r11,r11,r4
8000ecc4:	f4 05 0a 45 	lsr	r5,r10,r5
8000ecc8:	0a 4b       	or	r11,r5
8000ecca:	f4 04 09 4a 	lsl	r10,r10,r4
8000ecce:	08 17       	sub	r7,r4
8000ecd0:	c0 b8       	rjmp	8000ece6 <__avr32_f64_div_round_subnormal+0x96>
8000ecd2:	f4 04 12 00 	clz	r4,r10
8000ecd6:	f9 b4 03 00 	movlo	r4,0
8000ecda:	f7 b4 02 e0 	subhs	r4,-32
8000ecde:	f4 04 09 4b 	lsl	r11,r10,r4
8000ece2:	30 0a       	mov	r10,0
8000ece4:	08 17       	sub	r7,r4
8000ece6:	a3 8a       	lsr	r10,0x2
8000ece8:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000ecec:	a3 8b       	lsr	r11,0x2
8000ecee:	c1 1b       	rjmp	8000eb10 <__avr32_f64_div+0x20>
8000ecf0:	a3 79       	lsl	r9,0x3
8000ecf2:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000ecf6:	a3 78       	lsl	r8,0x3
8000ecf8:	f3 e8 10 04 	or	r4,r9,r8
8000ecfc:	c6 f0       	breq	8000edda <__avr32_f64_div_res_subnormal+0xa0>
8000ecfe:	f2 04 12 00 	clz	r4,r9
8000ed02:	c1 70       	breq	8000ed30 <__avr32_f64_div_round_subnormal+0xe0>
8000ed04:	c0 c3       	brcs	8000ed1c <__avr32_f64_div_round_subnormal+0xcc>
8000ed06:	e8 05 11 20 	rsub	r5,r4,32
8000ed0a:	f2 04 09 49 	lsl	r9,r9,r4
8000ed0e:	f0 05 0a 45 	lsr	r5,r8,r5
8000ed12:	0a 49       	or	r9,r5
8000ed14:	f0 04 09 48 	lsl	r8,r8,r4
8000ed18:	08 16       	sub	r6,r4
8000ed1a:	c0 b8       	rjmp	8000ed30 <__avr32_f64_div_round_subnormal+0xe0>
8000ed1c:	f0 04 12 00 	clz	r4,r8
8000ed20:	f9 b4 03 00 	movlo	r4,0
8000ed24:	f7 b4 02 e0 	subhs	r4,-32
8000ed28:	f0 04 09 49 	lsl	r9,r8,r4
8000ed2c:	30 08       	mov	r8,0
8000ed2e:	08 16       	sub	r6,r4
8000ed30:	a3 88       	lsr	r8,0x2
8000ed32:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000ed36:	a3 89       	lsr	r9,0x2
8000ed38:	cf ca       	rjmp	8000eb30 <__avr32_f64_div+0x40>

8000ed3a <__avr32_f64_div_res_subnormal>:
8000ed3a:	5c 37       	neg	r7
8000ed3c:	2f f7       	sub	r7,-1
8000ed3e:	f1 b7 04 c0 	satu	r7,0x6
8000ed42:	e0 47 00 20 	cp.w	r7,32
8000ed46:	c1 54       	brge	8000ed70 <__avr32_f64_div_res_subnormal+0x36>
8000ed48:	ee 06 11 20 	rsub	r6,r7,32
8000ed4c:	e4 07 0a 42 	lsr	r2,r2,r7
8000ed50:	e6 06 09 4c 	lsl	r12,r3,r6
8000ed54:	18 42       	or	r2,r12
8000ed56:	e6 07 0a 43 	lsr	r3,r3,r7
8000ed5a:	f4 06 09 41 	lsl	r1,r10,r6
8000ed5e:	f4 07 0a 4a 	lsr	r10,r10,r7
8000ed62:	f6 06 09 4c 	lsl	r12,r11,r6
8000ed66:	18 4a       	or	r10,r12
8000ed68:	f6 07 0a 4b 	lsr	r11,r11,r7
8000ed6c:	30 00       	mov	r0,0
8000ed6e:	c1 58       	rjmp	8000ed98 <__avr32_f64_div_res_subnormal+0x5e>
8000ed70:	ee 06 11 20 	rsub	r6,r7,32
8000ed74:	f9 b0 00 00 	moveq	r0,0
8000ed78:	f9 bc 00 00 	moveq	r12,0
8000ed7c:	c0 50       	breq	8000ed86 <__avr32_f64_div_res_subnormal+0x4c>
8000ed7e:	f4 06 09 40 	lsl	r0,r10,r6
8000ed82:	f6 06 09 4c 	lsl	r12,r11,r6
8000ed86:	e6 07 0a 42 	lsr	r2,r3,r7
8000ed8a:	30 03       	mov	r3,0
8000ed8c:	f4 07 0a 41 	lsr	r1,r10,r7
8000ed90:	18 41       	or	r1,r12
8000ed92:	f6 07 0a 4a 	lsr	r10,r11,r7
8000ed96:	30 0b       	mov	r11,0
8000ed98:	e0 12 ff 00 	andl	r2,0xff00
8000ed9c:	e8 12 00 80 	orl	r2,0x80
8000eda0:	e6 08 06 46 	mulu.d	r6,r3,r8
8000eda4:	e4 09 07 46 	macu.d	r6,r2,r9
8000eda8:	e4 08 06 44 	mulu.d	r4,r2,r8
8000edac:	e6 09 06 48 	mulu.d	r8,r3,r9
8000edb0:	0c 05       	add	r5,r6
8000edb2:	f0 07 00 48 	adc	r8,r8,r7
8000edb6:	5c 09       	acr	r9
8000edb8:	30 07       	mov	r7,0
8000edba:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000edbe:	00 34       	cp.w	r4,r0
8000edc0:	e2 05 13 00 	cpc	r5,r1
8000edc4:	c4 6b       	rjmp	8000ec50 <__avr32_f64_div_round_subnormal>
8000edc6:	1c 9b       	mov	r11,lr
8000edc8:	e6 1b 80 00 	andh	r11,0x8000,COH
8000edcc:	30 0a       	mov	r10,0
8000edce:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000edd2:	3f fb       	mov	r11,-1
8000edd4:	30 0a       	mov	r10,0
8000edd6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000edda:	f5 eb 10 04 	or	r4,r10,r11
8000edde:	c0 90       	breq	8000edf0 <__avr32_f64_div_op1_zero>
8000ede0:	1c 9b       	mov	r11,lr
8000ede2:	e6 1b 80 00 	andh	r11,0x8000,COH
8000ede6:	ea 1b 7f f0 	orh	r11,0x7ff0
8000edea:	30 0a       	mov	r10,0
8000edec:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000edf0 <__avr32_f64_div_op1_zero>:
8000edf0:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000edf4:	ce f0       	breq	8000edd2 <__avr32_f64_div_res_subnormal+0x98>
8000edf6:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000edfa:	e0 44 07 ff 	cp.w	r4,2047
8000edfe:	ce 41       	brne	8000edc6 <__avr32_f64_div_res_subnormal+0x8c>
8000ee00:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000ee04:	ce 10       	breq	8000edc6 <__avr32_f64_div_res_subnormal+0x8c>
8000ee06:	ce 6b       	rjmp	8000edd2 <__avr32_f64_div_res_subnormal+0x98>

8000ee08 <__avr32_udiv64>:
8000ee08:	d4 31       	pushm	r0-r7,lr
8000ee0a:	1a 97       	mov	r7,sp
8000ee0c:	20 3d       	sub	sp,12
8000ee0e:	10 9c       	mov	r12,r8
8000ee10:	12 9e       	mov	lr,r9
8000ee12:	14 93       	mov	r3,r10
8000ee14:	58 09       	cp.w	r9,0
8000ee16:	e0 81 00 bd 	brne	8000ef90 <__avr32_udiv64+0x188>
8000ee1a:	16 38       	cp.w	r8,r11
8000ee1c:	e0 88 00 40 	brls	8000ee9c <__avr32_udiv64+0x94>
8000ee20:	f0 08 12 00 	clz	r8,r8
8000ee24:	c0 d0       	breq	8000ee3e <__avr32_udiv64+0x36>
8000ee26:	f6 08 09 4b 	lsl	r11,r11,r8
8000ee2a:	f0 09 11 20 	rsub	r9,r8,32
8000ee2e:	f8 08 09 4c 	lsl	r12,r12,r8
8000ee32:	f4 09 0a 49 	lsr	r9,r10,r9
8000ee36:	f4 08 09 43 	lsl	r3,r10,r8
8000ee3a:	f3 eb 10 0b 	or	r11,r9,r11
8000ee3e:	f8 0e 16 10 	lsr	lr,r12,0x10
8000ee42:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000ee46:	f6 0e 0d 00 	divu	r0,r11,lr
8000ee4a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000ee4e:	00 99       	mov	r9,r0
8000ee50:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000ee54:	e0 0a 02 48 	mul	r8,r0,r10
8000ee58:	10 3b       	cp.w	r11,r8
8000ee5a:	c0 a2       	brcc	8000ee6e <__avr32_udiv64+0x66>
8000ee5c:	20 19       	sub	r9,1
8000ee5e:	18 0b       	add	r11,r12
8000ee60:	18 3b       	cp.w	r11,r12
8000ee62:	c0 63       	brcs	8000ee6e <__avr32_udiv64+0x66>
8000ee64:	10 3b       	cp.w	r11,r8
8000ee66:	f7 b9 03 01 	sublo	r9,1
8000ee6a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000ee6e:	f6 08 01 01 	sub	r1,r11,r8
8000ee72:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000ee76:	e2 0e 0d 00 	divu	r0,r1,lr
8000ee7a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000ee7e:	00 98       	mov	r8,r0
8000ee80:	e0 0a 02 4a 	mul	r10,r0,r10
8000ee84:	14 33       	cp.w	r3,r10
8000ee86:	c0 82       	brcc	8000ee96 <__avr32_udiv64+0x8e>
8000ee88:	20 18       	sub	r8,1
8000ee8a:	18 03       	add	r3,r12
8000ee8c:	18 33       	cp.w	r3,r12
8000ee8e:	c0 43       	brcs	8000ee96 <__avr32_udiv64+0x8e>
8000ee90:	14 33       	cp.w	r3,r10
8000ee92:	f7 b8 03 01 	sublo	r8,1
8000ee96:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000ee9a:	cd f8       	rjmp	8000f058 <__avr32_udiv64+0x250>
8000ee9c:	58 08       	cp.w	r8,0
8000ee9e:	c0 51       	brne	8000eea8 <__avr32_udiv64+0xa0>
8000eea0:	30 19       	mov	r9,1
8000eea2:	f2 08 0d 08 	divu	r8,r9,r8
8000eea6:	10 9c       	mov	r12,r8
8000eea8:	f8 06 12 00 	clz	r6,r12
8000eeac:	c0 41       	brne	8000eeb4 <__avr32_udiv64+0xac>
8000eeae:	18 1b       	sub	r11,r12
8000eeb0:	30 19       	mov	r9,1
8000eeb2:	c4 08       	rjmp	8000ef32 <__avr32_udiv64+0x12a>
8000eeb4:	ec 01 11 20 	rsub	r1,r6,32
8000eeb8:	f4 01 0a 49 	lsr	r9,r10,r1
8000eebc:	f8 06 09 4c 	lsl	r12,r12,r6
8000eec0:	f6 06 09 48 	lsl	r8,r11,r6
8000eec4:	f6 01 0a 41 	lsr	r1,r11,r1
8000eec8:	f3 e8 10 08 	or	r8,r9,r8
8000eecc:	f8 03 16 10 	lsr	r3,r12,0x10
8000eed0:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000eed4:	e2 03 0d 00 	divu	r0,r1,r3
8000eed8:	f0 0b 16 10 	lsr	r11,r8,0x10
8000eedc:	00 9e       	mov	lr,r0
8000eede:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000eee2:	e0 05 02 49 	mul	r9,r0,r5
8000eee6:	12 3b       	cp.w	r11,r9
8000eee8:	c0 a2       	brcc	8000eefc <__avr32_udiv64+0xf4>
8000eeea:	20 1e       	sub	lr,1
8000eeec:	18 0b       	add	r11,r12
8000eeee:	18 3b       	cp.w	r11,r12
8000eef0:	c0 63       	brcs	8000eefc <__avr32_udiv64+0xf4>
8000eef2:	12 3b       	cp.w	r11,r9
8000eef4:	f7 be 03 01 	sublo	lr,1
8000eef8:	f7 dc e3 0b 	addcs	r11,r11,r12
8000eefc:	12 1b       	sub	r11,r9
8000eefe:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000ef02:	f6 03 0d 02 	divu	r2,r11,r3
8000ef06:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000ef0a:	04 99       	mov	r9,r2
8000ef0c:	e4 05 02 4b 	mul	r11,r2,r5
8000ef10:	16 38       	cp.w	r8,r11
8000ef12:	c0 a2       	brcc	8000ef26 <__avr32_udiv64+0x11e>
8000ef14:	20 19       	sub	r9,1
8000ef16:	18 08       	add	r8,r12
8000ef18:	18 38       	cp.w	r8,r12
8000ef1a:	c0 63       	brcs	8000ef26 <__avr32_udiv64+0x11e>
8000ef1c:	16 38       	cp.w	r8,r11
8000ef1e:	f7 b9 03 01 	sublo	r9,1
8000ef22:	f1 dc e3 08 	addcs	r8,r8,r12
8000ef26:	f4 06 09 43 	lsl	r3,r10,r6
8000ef2a:	f0 0b 01 0b 	sub	r11,r8,r11
8000ef2e:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000ef32:	f8 06 16 10 	lsr	r6,r12,0x10
8000ef36:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000ef3a:	f6 06 0d 00 	divu	r0,r11,r6
8000ef3e:	e6 0b 16 10 	lsr	r11,r3,0x10
8000ef42:	00 9a       	mov	r10,r0
8000ef44:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000ef48:	e0 0e 02 48 	mul	r8,r0,lr
8000ef4c:	10 3b       	cp.w	r11,r8
8000ef4e:	c0 a2       	brcc	8000ef62 <__avr32_udiv64+0x15a>
8000ef50:	20 1a       	sub	r10,1
8000ef52:	18 0b       	add	r11,r12
8000ef54:	18 3b       	cp.w	r11,r12
8000ef56:	c0 63       	brcs	8000ef62 <__avr32_udiv64+0x15a>
8000ef58:	10 3b       	cp.w	r11,r8
8000ef5a:	f7 ba 03 01 	sublo	r10,1
8000ef5e:	f7 dc e3 0b 	addcs	r11,r11,r12
8000ef62:	f6 08 01 01 	sub	r1,r11,r8
8000ef66:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000ef6a:	e2 06 0d 00 	divu	r0,r1,r6
8000ef6e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000ef72:	00 98       	mov	r8,r0
8000ef74:	e0 0e 02 4b 	mul	r11,r0,lr
8000ef78:	16 33       	cp.w	r3,r11
8000ef7a:	c0 82       	brcc	8000ef8a <__avr32_udiv64+0x182>
8000ef7c:	20 18       	sub	r8,1
8000ef7e:	18 03       	add	r3,r12
8000ef80:	18 33       	cp.w	r3,r12
8000ef82:	c0 43       	brcs	8000ef8a <__avr32_udiv64+0x182>
8000ef84:	16 33       	cp.w	r3,r11
8000ef86:	f7 b8 03 01 	sublo	r8,1
8000ef8a:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000ef8e:	c6 98       	rjmp	8000f060 <__avr32_udiv64+0x258>
8000ef90:	16 39       	cp.w	r9,r11
8000ef92:	e0 8b 00 65 	brhi	8000f05c <__avr32_udiv64+0x254>
8000ef96:	f2 09 12 00 	clz	r9,r9
8000ef9a:	c0 b1       	brne	8000efb0 <__avr32_udiv64+0x1a8>
8000ef9c:	10 3a       	cp.w	r10,r8
8000ef9e:	5f 2a       	srhs	r10
8000efa0:	1c 3b       	cp.w	r11,lr
8000efa2:	5f b8       	srhi	r8
8000efa4:	10 4a       	or	r10,r8
8000efa6:	f2 0a 18 00 	cp.b	r10,r9
8000efaa:	c5 90       	breq	8000f05c <__avr32_udiv64+0x254>
8000efac:	30 18       	mov	r8,1
8000efae:	c5 98       	rjmp	8000f060 <__avr32_udiv64+0x258>
8000efb0:	f0 09 09 46 	lsl	r6,r8,r9
8000efb4:	f2 03 11 20 	rsub	r3,r9,32
8000efb8:	fc 09 09 4e 	lsl	lr,lr,r9
8000efbc:	f0 03 0a 48 	lsr	r8,r8,r3
8000efc0:	f6 09 09 4c 	lsl	r12,r11,r9
8000efc4:	f4 03 0a 42 	lsr	r2,r10,r3
8000efc8:	ef 46 ff f4 	st.w	r7[-12],r6
8000efcc:	f6 03 0a 43 	lsr	r3,r11,r3
8000efd0:	18 42       	or	r2,r12
8000efd2:	f1 ee 10 0c 	or	r12,r8,lr
8000efd6:	f8 01 16 10 	lsr	r1,r12,0x10
8000efda:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000efde:	e6 01 0d 04 	divu	r4,r3,r1
8000efe2:	e4 03 16 10 	lsr	r3,r2,0x10
8000efe6:	08 9e       	mov	lr,r4
8000efe8:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000efec:	e8 06 02 48 	mul	r8,r4,r6
8000eff0:	10 33       	cp.w	r3,r8
8000eff2:	c0 a2       	brcc	8000f006 <__avr32_udiv64+0x1fe>
8000eff4:	20 1e       	sub	lr,1
8000eff6:	18 03       	add	r3,r12
8000eff8:	18 33       	cp.w	r3,r12
8000effa:	c0 63       	brcs	8000f006 <__avr32_udiv64+0x1fe>
8000effc:	10 33       	cp.w	r3,r8
8000effe:	f7 be 03 01 	sublo	lr,1
8000f002:	e7 dc e3 03 	addcs	r3,r3,r12
8000f006:	10 13       	sub	r3,r8
8000f008:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000f00c:	e6 01 0d 00 	divu	r0,r3,r1
8000f010:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000f014:	00 98       	mov	r8,r0
8000f016:	e0 06 02 46 	mul	r6,r0,r6
8000f01a:	0c 3b       	cp.w	r11,r6
8000f01c:	c0 a2       	brcc	8000f030 <__avr32_udiv64+0x228>
8000f01e:	20 18       	sub	r8,1
8000f020:	18 0b       	add	r11,r12
8000f022:	18 3b       	cp.w	r11,r12
8000f024:	c0 63       	brcs	8000f030 <__avr32_udiv64+0x228>
8000f026:	0c 3b       	cp.w	r11,r6
8000f028:	f7 dc e3 0b 	addcs	r11,r11,r12
8000f02c:	f7 b8 03 01 	sublo	r8,1
8000f030:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000f034:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000f038:	0c 1b       	sub	r11,r6
8000f03a:	f0 04 06 42 	mulu.d	r2,r8,r4
8000f03e:	06 95       	mov	r5,r3
8000f040:	16 35       	cp.w	r5,r11
8000f042:	e0 8b 00 0a 	brhi	8000f056 <__avr32_udiv64+0x24e>
8000f046:	5f 0b       	sreq	r11
8000f048:	f4 09 09 49 	lsl	r9,r10,r9
8000f04c:	12 32       	cp.w	r2,r9
8000f04e:	5f b9       	srhi	r9
8000f050:	f7 e9 00 09 	and	r9,r11,r9
8000f054:	c0 60       	breq	8000f060 <__avr32_udiv64+0x258>
8000f056:	20 18       	sub	r8,1
8000f058:	30 09       	mov	r9,0
8000f05a:	c0 38       	rjmp	8000f060 <__avr32_udiv64+0x258>
8000f05c:	30 09       	mov	r9,0
8000f05e:	12 98       	mov	r8,r9
8000f060:	10 9a       	mov	r10,r8
8000f062:	12 93       	mov	r3,r9
8000f064:	10 92       	mov	r2,r8
8000f066:	12 9b       	mov	r11,r9
8000f068:	2f dd       	sub	sp,-12
8000f06a:	d8 32       	popm	r0-r7,pc

8000f06c <__avr32_umod64>:
8000f06c:	d4 31       	pushm	r0-r7,lr
8000f06e:	1a 97       	mov	r7,sp
8000f070:	20 3d       	sub	sp,12
8000f072:	10 9c       	mov	r12,r8
8000f074:	12 95       	mov	r5,r9
8000f076:	14 9e       	mov	lr,r10
8000f078:	16 91       	mov	r1,r11
8000f07a:	16 96       	mov	r6,r11
8000f07c:	58 09       	cp.w	r9,0
8000f07e:	e0 81 00 81 	brne	8000f180 <__avr32_umod64+0x114>
8000f082:	16 38       	cp.w	r8,r11
8000f084:	e0 88 00 12 	brls	8000f0a8 <__avr32_umod64+0x3c>
8000f088:	f0 08 12 00 	clz	r8,r8
8000f08c:	c4 e0       	breq	8000f128 <__avr32_umod64+0xbc>
8000f08e:	f6 08 09 46 	lsl	r6,r11,r8
8000f092:	f8 08 09 4c 	lsl	r12,r12,r8
8000f096:	f0 0b 11 20 	rsub	r11,r8,32
8000f09a:	f4 08 09 4e 	lsl	lr,r10,r8
8000f09e:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000f0a2:	f7 e6 10 06 	or	r6,r11,r6
8000f0a6:	c4 18       	rjmp	8000f128 <__avr32_umod64+0xbc>
8000f0a8:	58 08       	cp.w	r8,0
8000f0aa:	c0 51       	brne	8000f0b4 <__avr32_umod64+0x48>
8000f0ac:	30 19       	mov	r9,1
8000f0ae:	f2 08 0d 08 	divu	r8,r9,r8
8000f0b2:	10 9c       	mov	r12,r8
8000f0b4:	f8 08 12 00 	clz	r8,r12
8000f0b8:	c0 31       	brne	8000f0be <__avr32_umod64+0x52>
8000f0ba:	18 16       	sub	r6,r12
8000f0bc:	c3 68       	rjmp	8000f128 <__avr32_umod64+0xbc>
8000f0be:	f0 03 11 20 	rsub	r3,r8,32
8000f0c2:	f4 03 0a 4b 	lsr	r11,r10,r3
8000f0c6:	f8 08 09 4c 	lsl	r12,r12,r8
8000f0ca:	ec 08 09 49 	lsl	r9,r6,r8
8000f0ce:	ec 03 0a 43 	lsr	r3,r6,r3
8000f0d2:	f7 e9 10 09 	or	r9,r11,r9
8000f0d6:	f8 05 16 10 	lsr	r5,r12,0x10
8000f0da:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000f0de:	e6 05 0d 02 	divu	r2,r3,r5
8000f0e2:	f2 0e 16 10 	lsr	lr,r9,0x10
8000f0e6:	ec 02 02 4b 	mul	r11,r6,r2
8000f0ea:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000f0ee:	16 3e       	cp.w	lr,r11
8000f0f0:	c0 72       	brcc	8000f0fe <__avr32_umod64+0x92>
8000f0f2:	18 0e       	add	lr,r12
8000f0f4:	18 3e       	cp.w	lr,r12
8000f0f6:	c0 43       	brcs	8000f0fe <__avr32_umod64+0x92>
8000f0f8:	16 3e       	cp.w	lr,r11
8000f0fa:	fd dc e3 0e 	addcs	lr,lr,r12
8000f0fe:	fc 0b 01 03 	sub	r3,lr,r11
8000f102:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000f106:	e6 05 0d 02 	divu	r2,r3,r5
8000f10a:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000f10e:	a5 36       	mul	r6,r2
8000f110:	0c 39       	cp.w	r9,r6
8000f112:	c0 72       	brcc	8000f120 <__avr32_umod64+0xb4>
8000f114:	18 09       	add	r9,r12
8000f116:	18 39       	cp.w	r9,r12
8000f118:	c0 43       	brcs	8000f120 <__avr32_umod64+0xb4>
8000f11a:	0c 39       	cp.w	r9,r6
8000f11c:	f3 dc e3 09 	addcs	r9,r9,r12
8000f120:	f2 06 01 06 	sub	r6,r9,r6
8000f124:	f4 08 09 4e 	lsl	lr,r10,r8
8000f128:	f8 0a 16 10 	lsr	r10,r12,0x10
8000f12c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000f130:	ec 0a 0d 02 	divu	r2,r6,r10
8000f134:	fc 09 16 10 	lsr	r9,lr,0x10
8000f138:	ea 02 02 4b 	mul	r11,r5,r2
8000f13c:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000f140:	16 39       	cp.w	r9,r11
8000f142:	c0 72       	brcc	8000f150 <__avr32_umod64+0xe4>
8000f144:	18 09       	add	r9,r12
8000f146:	18 39       	cp.w	r9,r12
8000f148:	c0 43       	brcs	8000f150 <__avr32_umod64+0xe4>
8000f14a:	16 39       	cp.w	r9,r11
8000f14c:	f3 dc e3 09 	addcs	r9,r9,r12
8000f150:	f2 0b 01 0b 	sub	r11,r9,r11
8000f154:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000f158:	f6 0a 0d 0a 	divu	r10,r11,r10
8000f15c:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000f160:	ea 0a 02 4a 	mul	r10,r5,r10
8000f164:	14 3e       	cp.w	lr,r10
8000f166:	c0 72       	brcc	8000f174 <__avr32_umod64+0x108>
8000f168:	18 0e       	add	lr,r12
8000f16a:	18 3e       	cp.w	lr,r12
8000f16c:	c0 43       	brcs	8000f174 <__avr32_umod64+0x108>
8000f16e:	14 3e       	cp.w	lr,r10
8000f170:	fd dc e3 0e 	addcs	lr,lr,r12
8000f174:	fc 0a 01 0a 	sub	r10,lr,r10
8000f178:	30 0b       	mov	r11,0
8000f17a:	f4 08 0a 4a 	lsr	r10,r10,r8
8000f17e:	c7 b8       	rjmp	8000f274 <__avr32_umod64+0x208>
8000f180:	16 39       	cp.w	r9,r11
8000f182:	e0 8b 00 79 	brhi	8000f274 <__avr32_umod64+0x208>
8000f186:	f2 09 12 00 	clz	r9,r9
8000f18a:	c1 21       	brne	8000f1ae <__avr32_umod64+0x142>
8000f18c:	10 3a       	cp.w	r10,r8
8000f18e:	5f 2b       	srhs	r11
8000f190:	0a 31       	cp.w	r1,r5
8000f192:	5f ba       	srhi	r10
8000f194:	f7 ea 10 0a 	or	r10,r11,r10
8000f198:	f2 0a 18 00 	cp.b	r10,r9
8000f19c:	c0 60       	breq	8000f1a8 <__avr32_umod64+0x13c>
8000f19e:	fc 08 01 0c 	sub	r12,lr,r8
8000f1a2:	e2 05 01 46 	sbc	r6,r1,r5
8000f1a6:	18 9e       	mov	lr,r12
8000f1a8:	0c 9b       	mov	r11,r6
8000f1aa:	1c 9a       	mov	r10,lr
8000f1ac:	c6 48       	rjmp	8000f274 <__avr32_umod64+0x208>
8000f1ae:	ea 09 09 4c 	lsl	r12,r5,r9
8000f1b2:	f2 06 11 20 	rsub	r6,r9,32
8000f1b6:	f6 09 09 4b 	lsl	r11,r11,r9
8000f1ba:	f0 09 09 42 	lsl	r2,r8,r9
8000f1be:	ef 46 ff f4 	st.w	r7[-12],r6
8000f1c2:	f0 06 0a 48 	lsr	r8,r8,r6
8000f1c6:	18 48       	or	r8,r12
8000f1c8:	e2 06 0a 4c 	lsr	r12,r1,r6
8000f1cc:	f4 09 09 43 	lsl	r3,r10,r9
8000f1d0:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000f1d4:	f4 06 0a 4a 	lsr	r10,r10,r6
8000f1d8:	16 4a       	or	r10,r11
8000f1da:	f0 0b 16 10 	lsr	r11,r8,0x10
8000f1de:	f8 0b 0d 04 	divu	r4,r12,r11
8000f1e2:	f4 0c 16 10 	lsr	r12,r10,0x10
8000f1e6:	08 91       	mov	r1,r4
8000f1e8:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000f1ec:	e8 0e 02 46 	mul	r6,r4,lr
8000f1f0:	0c 3c       	cp.w	r12,r6
8000f1f2:	c0 a2       	brcc	8000f206 <__avr32_umod64+0x19a>
8000f1f4:	20 11       	sub	r1,1
8000f1f6:	10 0c       	add	r12,r8
8000f1f8:	10 3c       	cp.w	r12,r8
8000f1fa:	c0 63       	brcs	8000f206 <__avr32_umod64+0x19a>
8000f1fc:	0c 3c       	cp.w	r12,r6
8000f1fe:	f7 b1 03 01 	sublo	r1,1
8000f202:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000f206:	0c 1c       	sub	r12,r6
8000f208:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000f20c:	f8 0b 0d 04 	divu	r4,r12,r11
8000f210:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000f214:	08 96       	mov	r6,r4
8000f216:	e8 0e 02 4e 	mul	lr,r4,lr
8000f21a:	1c 3b       	cp.w	r11,lr
8000f21c:	c0 a2       	brcc	8000f230 <__avr32_umod64+0x1c4>
8000f21e:	20 16       	sub	r6,1
8000f220:	10 0b       	add	r11,r8
8000f222:	10 3b       	cp.w	r11,r8
8000f224:	c0 63       	brcs	8000f230 <__avr32_umod64+0x1c4>
8000f226:	1c 3b       	cp.w	r11,lr
8000f228:	f7 b6 03 01 	sublo	r6,1
8000f22c:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000f230:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000f234:	1c 1b       	sub	r11,lr
8000f236:	e2 02 06 40 	mulu.d	r0,r1,r2
8000f23a:	00 9e       	mov	lr,r0
8000f23c:	02 9c       	mov	r12,r1
8000f23e:	16 3c       	cp.w	r12,r11
8000f240:	e0 8b 00 08 	brhi	8000f250 <__avr32_umod64+0x1e4>
8000f244:	5f 06       	sreq	r6
8000f246:	06 30       	cp.w	r0,r3
8000f248:	5f ba       	srhi	r10
8000f24a:	ed ea 00 0a 	and	r10,r6,r10
8000f24e:	c0 60       	breq	8000f25a <__avr32_umod64+0x1ee>
8000f250:	fc 02 01 04 	sub	r4,lr,r2
8000f254:	f8 08 01 4c 	sbc	r12,r12,r8
8000f258:	08 9e       	mov	lr,r4
8000f25a:	e6 0e 01 0a 	sub	r10,r3,lr
8000f25e:	f6 0c 01 4c 	sbc	r12,r11,r12
8000f262:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000f266:	f8 09 0a 4b 	lsr	r11,r12,r9
8000f26a:	f4 09 0a 4a 	lsr	r10,r10,r9
8000f26e:	f8 01 09 4c 	lsl	r12,r12,r1
8000f272:	18 4a       	or	r10,r12
8000f274:	2f dd       	sub	sp,-12
8000f276:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

8000f400 <_evba>:
8000f400:	c0 08       	rjmp	8000f400 <_evba>
	...

8000f404 <_handle_TLB_Multiple_Hit>:
8000f404:	c0 08       	rjmp	8000f404 <_handle_TLB_Multiple_Hit>
	...

8000f408 <_handle_Bus_Error_Data_Fetch>:
8000f408:	c0 08       	rjmp	8000f408 <_handle_Bus_Error_Data_Fetch>
	...

8000f40c <_handle_Bus_Error_Instruction_Fetch>:
8000f40c:	c0 08       	rjmp	8000f40c <_handle_Bus_Error_Instruction_Fetch>
	...

8000f410 <_handle_NMI>:
8000f410:	c0 08       	rjmp	8000f410 <_handle_NMI>
	...

8000f414 <_handle_Instruction_Address>:
8000f414:	c0 08       	rjmp	8000f414 <_handle_Instruction_Address>
	...

8000f418 <_handle_ITLB_Protection>:
8000f418:	c0 08       	rjmp	8000f418 <_handle_ITLB_Protection>
	...

8000f41c <_handle_Breakpoint>:
8000f41c:	c0 08       	rjmp	8000f41c <_handle_Breakpoint>
	...

8000f420 <_handle_Illegal_Opcode>:
8000f420:	c0 08       	rjmp	8000f420 <_handle_Illegal_Opcode>
	...

8000f424 <_handle_Unimplemented_Instruction>:
8000f424:	c0 08       	rjmp	8000f424 <_handle_Unimplemented_Instruction>
	...

8000f428 <_handle_Privilege_Violation>:
8000f428:	c0 08       	rjmp	8000f428 <_handle_Privilege_Violation>
	...

8000f42c <_handle_Floating_Point>:
8000f42c:	c0 08       	rjmp	8000f42c <_handle_Floating_Point>
	...

8000f430 <_handle_Coprocessor_Absent>:
8000f430:	c0 08       	rjmp	8000f430 <_handle_Coprocessor_Absent>
	...

8000f434 <_handle_Data_Address_Read>:
8000f434:	c0 08       	rjmp	8000f434 <_handle_Data_Address_Read>
	...

8000f438 <_handle_Data_Address_Write>:
8000f438:	c0 08       	rjmp	8000f438 <_handle_Data_Address_Write>
	...

8000f43c <_handle_DTLB_Protection_Read>:
8000f43c:	c0 08       	rjmp	8000f43c <_handle_DTLB_Protection_Read>
	...

8000f440 <_handle_DTLB_Protection_Write>:
8000f440:	c0 08       	rjmp	8000f440 <_handle_DTLB_Protection_Write>
	...

8000f444 <_handle_DTLB_Modified>:
8000f444:	c0 08       	rjmp	8000f444 <_handle_DTLB_Modified>
	...

8000f450 <_handle_ITLB_Miss>:
8000f450:	c0 08       	rjmp	8000f450 <_handle_ITLB_Miss>
	...

8000f460 <_handle_DTLB_Miss_Read>:
8000f460:	c0 08       	rjmp	8000f460 <_handle_DTLB_Miss_Read>
	...

8000f470 <_handle_DTLB_Miss_Write>:
8000f470:	c0 08       	rjmp	8000f470 <_handle_DTLB_Miss_Write>
	...

8000f500 <_handle_Supervisor_Call>:
8000f500:	c0 08       	rjmp	8000f500 <_handle_Supervisor_Call>
8000f502:	d7 03       	nop

8000f504 <_int0>:
8000f504:	30 0c       	mov	r12,0
8000f506:	fe b0 a5 bd 	rcall	80004080 <_get_interrupt_handler>
8000f50a:	58 0c       	cp.w	r12,0
8000f50c:	f8 0f 17 10 	movne	pc,r12
8000f510:	d6 03       	rete

8000f512 <_int1>:
8000f512:	30 1c       	mov	r12,1
8000f514:	fe b0 a5 b6 	rcall	80004080 <_get_interrupt_handler>
8000f518:	58 0c       	cp.w	r12,0
8000f51a:	f8 0f 17 10 	movne	pc,r12
8000f51e:	d6 03       	rete

8000f520 <_int2>:
8000f520:	30 2c       	mov	r12,2
8000f522:	fe b0 a5 af 	rcall	80004080 <_get_interrupt_handler>
8000f526:	58 0c       	cp.w	r12,0
8000f528:	f8 0f 17 10 	movne	pc,r12
8000f52c:	d6 03       	rete

8000f52e <_int3>:
8000f52e:	30 3c       	mov	r12,3
8000f530:	fe b0 a5 a8 	rcall	80004080 <_get_interrupt_handler>
8000f534:	58 0c       	cp.w	r12,0
8000f536:	f8 0f 17 10 	movne	pc,r12
8000f53a:	d6 03       	rete
8000f53c:	d7 03       	nop
8000f53e:	d7 03       	nop
8000f540:	d7 03       	nop
8000f542:	d7 03       	nop
8000f544:	d7 03       	nop
8000f546:	d7 03       	nop
8000f548:	d7 03       	nop
8000f54a:	d7 03       	nop
8000f54c:	d7 03       	nop
8000f54e:	d7 03       	nop
8000f550:	d7 03       	nop
8000f552:	d7 03       	nop
8000f554:	d7 03       	nop
8000f556:	d7 03       	nop
8000f558:	d7 03       	nop
8000f55a:	d7 03       	nop
8000f55c:	d7 03       	nop
8000f55e:	d7 03       	nop
8000f560:	d7 03       	nop
8000f562:	d7 03       	nop
8000f564:	d7 03       	nop
8000f566:	d7 03       	nop
8000f568:	d7 03       	nop
8000f56a:	d7 03       	nop
8000f56c:	d7 03       	nop
8000f56e:	d7 03       	nop
8000f570:	d7 03       	nop
8000f572:	d7 03       	nop
8000f574:	d7 03       	nop
8000f576:	d7 03       	nop
8000f578:	d7 03       	nop
8000f57a:	d7 03       	nop
8000f57c:	d7 03       	nop
8000f57e:	d7 03       	nop
8000f580:	d7 03       	nop
8000f582:	d7 03       	nop
8000f584:	d7 03       	nop
8000f586:	d7 03       	nop
8000f588:	d7 03       	nop
8000f58a:	d7 03       	nop
8000f58c:	d7 03       	nop
8000f58e:	d7 03       	nop
8000f590:	d7 03       	nop
8000f592:	d7 03       	nop
8000f594:	d7 03       	nop
8000f596:	d7 03       	nop
8000f598:	d7 03       	nop
8000f59a:	d7 03       	nop
8000f59c:	d7 03       	nop
8000f59e:	d7 03       	nop
8000f5a0:	d7 03       	nop
8000f5a2:	d7 03       	nop
8000f5a4:	d7 03       	nop
8000f5a6:	d7 03       	nop
8000f5a8:	d7 03       	nop
8000f5aa:	d7 03       	nop
8000f5ac:	d7 03       	nop
8000f5ae:	d7 03       	nop
8000f5b0:	d7 03       	nop
8000f5b2:	d7 03       	nop
8000f5b4:	d7 03       	nop
8000f5b6:	d7 03       	nop
8000f5b8:	d7 03       	nop
8000f5ba:	d7 03       	nop
8000f5bc:	d7 03       	nop
8000f5be:	d7 03       	nop
8000f5c0:	d7 03       	nop
8000f5c2:	d7 03       	nop
8000f5c4:	d7 03       	nop
8000f5c6:	d7 03       	nop
8000f5c8:	d7 03       	nop
8000f5ca:	d7 03       	nop
8000f5cc:	d7 03       	nop
8000f5ce:	d7 03       	nop
8000f5d0:	d7 03       	nop
8000f5d2:	d7 03       	nop
8000f5d4:	d7 03       	nop
8000f5d6:	d7 03       	nop
8000f5d8:	d7 03       	nop
8000f5da:	d7 03       	nop
8000f5dc:	d7 03       	nop
8000f5de:	d7 03       	nop
8000f5e0:	d7 03       	nop
8000f5e2:	d7 03       	nop
8000f5e4:	d7 03       	nop
8000f5e6:	d7 03       	nop
8000f5e8:	d7 03       	nop
8000f5ea:	d7 03       	nop
8000f5ec:	d7 03       	nop
8000f5ee:	d7 03       	nop
8000f5f0:	d7 03       	nop
8000f5f2:	d7 03       	nop
8000f5f4:	d7 03       	nop
8000f5f6:	d7 03       	nop
8000f5f8:	d7 03       	nop
8000f5fa:	d7 03       	nop
8000f5fc:	d7 03       	nop
8000f5fe:	d7 03       	nop
