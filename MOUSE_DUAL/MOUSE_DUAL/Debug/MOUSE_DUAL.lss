
MOUSE_DUAL.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ca64  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000ec00  8000ec00  0000f000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000007c4  8000ee00  8000ee00  0000f200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8000f5c4  8000f5c4  0000f9c4  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         000008fc  00000008  8000f5c8  0000fc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000904  8000fec4  00010504  2**0
                  ALLOC
  9 .bss          000003d0  00000908  00000908  00000000  2**2
                  ALLOC
 10 .heap         0000e328  00000cd8  00000cd8  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  00010504  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00001630  00000000  00000000  00010538  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00003001  00000000  00000000  00011b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   000b5623  00000000  00000000  00014b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00008742  00000000  00000000  000ca18c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00020d5c  00000000  00000000  000d28ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000388c  00000000  00000000  000f362c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c248  00000000  00000000  000f6eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000e6e6  00000000  00000000  00103100  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 01e2ecf5  00000000  00000000  001117e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00001e50  00000000  00000000  01f404e0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf 8d 40 	sub	pc,pc,-29376

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf ad 44 	sub	pc,pc,-21180

Disassembly of section .text:

80002008 <dip204_select>:
80002008:	d4 01       	pushm	lr
8000200a:	30 2b       	mov	r11,2
/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
8000200c:	fe 7c 28 00 	mov	r12,-55296
80002010:	f0 1f 00 02 	mcall	80002018 <dip204_select+0x10>
}
80002014:	d8 02       	popm	pc
80002016:	00 00       	add	r0,r0
80002018:	80 00       	ld.sh	r0,r0[0x0]
8000201a:	26 0a       	sub	r10,96

8000201c <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
8000201c:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
80002020:	f8 c8 ff f8 	sub	r8,r12,-8
80002024:	30 69       	mov	r9,6
80002026:	f2 08 18 00 	cp.b	r8,r9
8000202a:	e0 8b 00 0f 	brhi	80002048 <dip204_write_byte+0x2c>
8000202e:	30 19       	mov	r9,1
80002030:	f2 08 09 48 	lsl	r8,r9,r8
80002034:	e2 18 00 55 	andl	r8,0x55,COH
80002038:	c0 80       	breq	80002048 <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
8000203a:	18 9b       	mov	r11,r12
8000203c:	fe 7c 28 00 	mov	r12,-55296
80002040:	f0 1f 00 0c 	mcall	80002070 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
80002044:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002048:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
8000204a:	f8 07 16 18 	lsr	r7,r12,0x18
8000204e:	0e 9b       	mov	r11,r7
80002050:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002054:	fe 7c 28 00 	mov	r12,-55296
80002058:	f0 1f 00 06 	mcall	80002070 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
8000205c:	ee 0b 15 04 	lsl	r11,r7,0x4
80002060:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002064:	fe 7c 28 00 	mov	r12,-55296
80002068:	f0 1f 00 02 	mcall	80002070 <dip204_write_byte+0x54>
8000206c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002070:	80 00       	ld.sh	r0,r0[0x0]
80002072:	27 40       	sub	r0,116

80002074 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002074:	eb cd 40 c0 	pushm	r6-r7,lr
80002078:	20 1d       	sub	sp,4
8000207a:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
8000207c:	fa c7 ff fc 	sub	r7,sp,-4
80002080:	30 08       	mov	r8,0
80002082:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002084:	30 0b       	mov	r11,0
80002086:	fe 7c 28 00 	mov	r12,-55296
8000208a:	f0 1f 00 08 	mcall	800020a8 <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
8000208e:	0e 9b       	mov	r11,r7
80002090:	fe 7c 28 00 	mov	r12,-55296
80002094:	f0 1f 00 06 	mcall	800020ac <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002098:	1b b8       	ld.ub	r8,sp[0x3]
8000209a:	5c 98       	brev	r8
8000209c:	b9 88       	lsr	r8,0x18
8000209e:	ac 88       	st.b	r6[0x0],r8
}
800020a0:	2f fd       	sub	sp,-4
800020a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020a6:	00 00       	add	r0,r0
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	27 40       	sub	r0,116
800020ac:	80 00       	ld.sh	r0,r0[0x0]
800020ae:	27 5c       	sub	r12,117

800020b0 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
800020b0:	eb cd 40 c0 	pushm	r6-r7,lr
800020b4:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
800020b6:	fa c7 ff fc 	sub	r7,sp,-4
800020ba:	30 08       	mov	r8,0
800020bc:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
800020be:	e0 6c 00 fc 	mov	r12,252
800020c2:	f0 1f 00 07 	mcall	800020dc <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
800020c6:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
800020c8:	0e 9c       	mov	r12,r7
800020ca:	f0 1f 00 06 	mcall	800020e0 <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
800020ce:	1b b8       	ld.ub	r8,sp[0x3]
800020d0:	ec 08 18 00 	cp.b	r8,r6
800020d4:	cf a5       	brlt	800020c8 <dip204_wait_busy+0x18>
}
800020d6:	2f fd       	sub	sp,-4
800020d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	20 1c       	sub	r12,1
800020e0:	80 00       	ld.sh	r0,r0[0x0]
800020e2:	20 74       	sub	r4,7

800020e4 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
800020e4:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
800020e6:	30 2b       	mov	r11,2
800020e8:	fe 7c 28 00 	mov	r12,-55296
800020ec:	f0 1f 00 02 	mcall	800020f4 <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
800020f0:	d8 02       	popm	pc
800020f2:	00 00       	add	r0,r0
800020f4:	80 00       	ld.sh	r0,r0[0x0]
800020f6:	26 56       	sub	r6,101

800020f8 <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
800020f8:	d4 21       	pushm	r4-r7,lr
800020fa:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
800020fc:	fa ca ff d4 	sub	r10,sp,-44
80002100:	18 9b       	mov	r11,r12
80002102:	1a 9c       	mov	r12,sp
80002104:	f0 1f 00 1e 	mcall	8000217c <dip204_printf_string+0x84>
80002108:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
8000210a:	31 38       	mov	r8,19
8000210c:	f0 0c 18 00 	cp.b	r12,r8
80002110:	e0 8b 00 0e 	brhi	8000212c <dip204_printf_string+0x34>
80002114:	30 0a       	mov	r10,0
80002116:	31 49       	mov	r9,20
80002118:	fa c8 ff e8 	sub	r8,sp,-24
8000211c:	18 08       	add	r8,r12
8000211e:	f1 6a ff e8 	st.b	r8[-24],r10
80002122:	2f fc       	sub	r12,-1
80002124:	5c 5c       	castu.b	r12
80002126:	f2 0c 18 00 	cp.b	r12,r9
8000212a:	cf 71       	brne	80002118 <dip204_printf_string+0x20>
  va_end(arg);
  dip204_select();
8000212c:	f0 1f 00 15 	mcall	80002180 <dip204_printf_string+0x88>
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002130:	30 08       	mov	r8,0
80002132:	1b 89       	ld.ub	r9,sp[0x0]
80002134:	f0 09 18 00 	cp.b	r9,r8
80002138:	c1 e0       	breq	80002174 <dip204_printf_string+0x7c>
8000213a:	30 06       	mov	r6,0
8000213c:	0c 97       	mov	r7,r6
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
8000213e:	e0 64 00 fa 	mov	r4,250
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002142:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002144:	08 9c       	mov	r12,r4
80002146:	f0 1f 00 10 	mcall	80002184 <dip204_printf_string+0x8c>
    /* Send byte */
    dip204_write_byte(string[i]);
8000214a:	fa c8 ff e8 	sub	r8,sp,-24
8000214e:	f0 06 00 06 	add	r6,r8,r6
80002152:	ed 3c ff e8 	ld.ub	r12,r6[-24]
80002156:	f0 1f 00 0c 	mcall	80002184 <dip204_printf_string+0x8c>
    /* go to next char */
    i++;
8000215a:	2f f7       	sub	r7,-1
8000215c:	5c 57       	castu.b	r7
    dip204_wait_busy();
8000215e:	f0 1f 00 0b 	mcall	80002188 <dip204_printf_string+0x90>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002162:	0e 96       	mov	r6,r7
80002164:	fa c8 ff e8 	sub	r8,sp,-24
80002168:	0e 08       	add	r8,r7
8000216a:	f1 38 ff e8 	ld.ub	r8,r8[-24]
8000216e:	ea 08 18 00 	cp.b	r8,r5
80002172:	ce 91       	brne	80002144 <dip204_printf_string+0x4c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002174:	f0 1f 00 06 	mcall	8000218c <dip204_printf_string+0x94>
}
80002178:	2f ad       	sub	sp,-24
8000217a:	d8 22       	popm	r4-r7,pc
8000217c:	80 00       	ld.sh	r0,r0[0x0]
8000217e:	98 7c       	ld.sh	r12,r12[0xe]
80002180:	80 00       	ld.sh	r0,r0[0x0]
80002182:	20 08       	sub	r8,0
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	20 1c       	sub	r12,1
80002188:	80 00       	ld.sh	r0,r0[0x0]
8000218a:	20 b0       	sub	r0,11
8000218c:	80 00       	ld.sh	r0,r0[0x0]
8000218e:	20 e4       	sub	r4,14

80002190 <dip204_write_string>:
  dip204_unselect();
}


void dip204_write_string(const char *string)
{
80002190:	eb cd 40 f8 	pushm	r3-r7,lr
80002194:	18 94       	mov	r4,r12
  unsigned char i=0;

  dip204_select();
80002196:	f0 1f 00 11 	mcall	800021d8 <dip204_write_string+0x48>
  /* for all chars in string */
  while(string[i]!=0)
8000219a:	09 89       	ld.ub	r9,r4[0x0]
8000219c:	30 08       	mov	r8,0
8000219e:	f0 09 18 00 	cp.b	r9,r8
800021a2:	c1 60       	breq	800021ce <dip204_write_string+0x3e>
800021a4:	08 96       	mov	r6,r4
800021a6:	30 07       	mov	r7,0
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
800021a8:	e0 63 00 fa 	mov	r3,250
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
800021ac:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
800021ae:	06 9c       	mov	r12,r3
800021b0:	f0 1f 00 0b 	mcall	800021dc <dip204_write_string+0x4c>
    /* Send byte */
    dip204_write_byte(string[i]);
800021b4:	0d 8c       	ld.ub	r12,r6[0x0]
800021b6:	f0 1f 00 0a 	mcall	800021dc <dip204_write_string+0x4c>
    /* go to next char */
    i++;
800021ba:	2f f7       	sub	r7,-1
800021bc:	5c 57       	castu.b	r7
    dip204_wait_busy();
800021be:	f0 1f 00 09 	mcall	800021e0 <dip204_write_string+0x50>
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
800021c2:	e8 07 00 06 	add	r6,r4,r7
800021c6:	0d 88       	ld.ub	r8,r6[0x0]
800021c8:	ea 08 18 00 	cp.b	r8,r5
800021cc:	cf 11       	brne	800021ae <dip204_write_string+0x1e>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
800021ce:	f0 1f 00 06 	mcall	800021e4 <dip204_write_string+0x54>
}
800021d2:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800021d6:	00 00       	add	r0,r0
800021d8:	80 00       	ld.sh	r0,r0[0x0]
800021da:	20 08       	sub	r8,0
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	20 1c       	sub	r12,1
800021e0:	80 00       	ld.sh	r0,r0[0x0]
800021e2:	20 b0       	sub	r0,11
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	20 e4       	sub	r4,14

800021e8 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
800021e8:	eb cd 40 c0 	pushm	r6-r7,lr
800021ec:	18 96       	mov	r6,r12
800021ee:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
800021f0:	f0 1f 00 11 	mcall	80002234 <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
800021f4:	31 48       	mov	r8,20
800021f6:	f0 06 18 00 	cp.b	r6,r8
800021fa:	5f 89       	srls	r9
800021fc:	30 48       	mov	r8,4
800021fe:	f0 07 18 00 	cp.b	r7,r8
80002202:	5f 88       	srls	r8
80002204:	f3 e8 00 08 	and	r8,r9,r8
80002208:	c0 31       	brne	8000220e <dip204_set_cursor_position+0x26>
8000220a:	30 06       	mov	r6,0
8000220c:	c0 68       	rjmp	80002218 <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
8000220e:	28 16       	sub	r6,-127
80002210:	20 17       	sub	r7,1
80002212:	a5 77       	lsl	r7,0x5
80002214:	0e 06       	add	r6,r7
80002216:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002218:	e0 6c 00 f8 	mov	r12,248
8000221c:	f0 1f 00 07 	mcall	80002238 <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002220:	0c 9c       	mov	r12,r6
80002222:	f0 1f 00 06 	mcall	80002238 <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
80002226:	f0 1f 00 06 	mcall	8000223c <dip204_set_cursor_position+0x54>
  dip204_unselect();
8000222a:	f0 1f 00 06 	mcall	80002240 <dip204_set_cursor_position+0x58>
}
8000222e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002232:	00 00       	add	r0,r0
80002234:	80 00       	ld.sh	r0,r0[0x0]
80002236:	20 08       	sub	r8,0
80002238:	80 00       	ld.sh	r0,r0[0x0]
8000223a:	20 1c       	sub	r12,1
8000223c:	80 00       	ld.sh	r0,r0[0x0]
8000223e:	20 b0       	sub	r0,11
80002240:	80 00       	ld.sh	r0,r0[0x0]
80002242:	20 e4       	sub	r4,14

80002244 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002244:	d4 01       	pushm	lr
  /* select the LCD chip */
  dip204_select();
80002246:	f0 1f 00 08 	mcall	80002264 <dip204_hide_cursor+0x20>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
8000224a:	e0 6c 00 f8 	mov	r12,248
8000224e:	f0 1f 00 07 	mcall	80002268 <dip204_hide_cursor+0x24>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002252:	30 cc       	mov	r12,12
80002254:	f0 1f 00 05 	mcall	80002268 <dip204_hide_cursor+0x24>
  dip204_wait_busy();
80002258:	f0 1f 00 05 	mcall	8000226c <dip204_hide_cursor+0x28>
  /* unselect chip */
  dip204_unselect();
8000225c:	f0 1f 00 05 	mcall	80002270 <dip204_hide_cursor+0x2c>
}
80002260:	d8 02       	popm	pc
80002262:	00 00       	add	r0,r0
80002264:	80 00       	ld.sh	r0,r0[0x0]
80002266:	20 08       	sub	r8,0
80002268:	80 00       	ld.sh	r0,r0[0x0]
8000226a:	20 1c       	sub	r12,1
8000226c:	80 00       	ld.sh	r0,r0[0x0]
8000226e:	20 b0       	sub	r0,11
80002270:	80 00       	ld.sh	r0,r0[0x0]
80002272:	20 e4       	sub	r4,14

80002274 <dip204_clear_display>:
  dip204_unselect();
}


void dip204_clear_display(void)
{
80002274:	d4 01       	pushm	lr
  dip204_select();
80002276:	f0 1f 00 13 	mcall	800022c0 <dip204_clear_display+0x4c>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
8000227a:	e0 6c 00 f8 	mov	r12,248
8000227e:	f0 1f 00 12 	mcall	800022c4 <dip204_clear_display+0x50>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002282:	30 1c       	mov	r12,1
80002284:	f0 1f 00 10 	mcall	800022c4 <dip204_clear_display+0x50>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002288:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000228c:	e0 69 bb 80 	mov	r9,48000
80002290:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002294:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002298:	14 38       	cp.w	r8,r10
8000229a:	e0 88 00 08 	brls	800022aa <dip204_clear_display+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000229e:	12 38       	cp.w	r8,r9
800022a0:	fe 98 ff fa 	brls	80002294 <dip204_clear_display+0x20>
800022a4:	12 3a       	cp.w	r10,r9
800022a6:	c0 73       	brcs	800022b4 <dip204_clear_display+0x40>
800022a8:	cf 6b       	rjmp	80002294 <dip204_clear_display+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022aa:	12 38       	cp.w	r8,r9
800022ac:	e0 8b 00 04 	brhi	800022b4 <dip204_clear_display+0x40>
800022b0:	12 3a       	cp.w	r10,r9
800022b2:	cf 12       	brcc	80002294 <dip204_clear_display+0x20>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
800022b4:	f0 1f 00 05 	mcall	800022c8 <dip204_clear_display+0x54>
  dip204_unselect();
800022b8:	f0 1f 00 05 	mcall	800022cc <dip204_clear_display+0x58>
}
800022bc:	d8 02       	popm	pc
800022be:	00 00       	add	r0,r0
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	20 08       	sub	r8,0
800022c4:	80 00       	ld.sh	r0,r0[0x0]
800022c6:	20 1c       	sub	r12,1
800022c8:	80 00       	ld.sh	r0,r0[0x0]
800022ca:	20 b0       	sub	r0,11
800022cc:	80 00       	ld.sh	r0,r0[0x0]
800022ce:	20 e4       	sub	r4,14

800022d0 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
800022d0:	eb cd 40 80 	pushm	r7,lr
800022d4:	20 4d       	sub	sp,16
800022d6:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
800022d8:	58 1c       	cp.w	r12,1
800022da:	c3 01       	brne	8000233a <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
800022dc:	30 69       	mov	r9,6
800022de:	4f a8       	lddpc	r8,800024c4 <dip204_init+0x1f4>
800022e0:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
800022e2:	30 2b       	mov	r11,2
800022e4:	33 2c       	mov	r12,50
800022e6:	f0 1f 00 79 	mcall	800024c8 <dip204_init+0x1f8>

    // PWM controller configuration
    pwm_opt.diva=0;
800022ea:	30 08       	mov	r8,0
800022ec:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
800022ee:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
800022f0:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
800022f2:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
800022f4:	1a 9c       	mov	r12,sp
800022f6:	f0 1f 00 76 	mcall	800024cc <dip204_init+0x1fc>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
800022fa:	58 07       	cp.w	r7,0
800022fc:	f9 b7 01 31 	movne	r7,49
80002300:	f9 b7 00 01 	moveq	r7,1
80002304:	4f 38       	lddpc	r8,800024d0 <dip204_init+0x200>
80002306:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80002308:	4f 3b       	lddpc	r11,800024d4 <dip204_init+0x204>
8000230a:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
8000230c:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80002310:	ab a8       	sbr	r8,0xa
80002312:	30 89       	mov	r9,8
80002314:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80002318:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
8000231a:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
8000231c:	33 28       	mov	r8,50
8000231e:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80002320:	30 08       	mov	r8,0
80002322:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
80002324:	4e 87       	lddpc	r7,800024c4 <dip204_init+0x1f4>
80002326:	6e 0c       	ld.w	r12,r7[0x0]
80002328:	f0 1f 00 6c 	mcall	800024d8 <dip204_init+0x208>
    // start PWM
    pwm_start_channels(1 << channel_id);
8000232c:	6e 08       	ld.w	r8,r7[0x0]
8000232e:	30 1c       	mov	r12,1
80002330:	f8 08 09 4c 	lsl	r12,r12,r8
80002334:	f0 1f 00 6a 	mcall	800024dc <dip204_init+0x20c>
80002338:	c0 a8       	rjmp	8000234c <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
8000233a:	58 0b       	cp.w	r11,0
8000233c:	c0 50       	breq	80002346 <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
8000233e:	33 2c       	mov	r12,50
80002340:	f0 1f 00 68 	mcall	800024e0 <dip204_init+0x210>
80002344:	c0 48       	rjmp	8000234c <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80002346:	33 2c       	mov	r12,50
80002348:	f0 1f 00 67 	mcall	800024e4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000234c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002350:	e2 79 a9 80 	mov	r9,240000
80002354:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002358:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000235c:	14 38       	cp.w	r8,r10
8000235e:	e0 88 00 08 	brls	8000236e <dip204_init+0x9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002362:	12 38       	cp.w	r8,r9
80002364:	fe 98 ff fa 	brls	80002358 <dip204_init+0x88>
80002368:	12 3a       	cp.w	r10,r9
8000236a:	c6 e3       	brcs	80002446 <dip204_init+0x176>
8000236c:	cf 6b       	rjmp	80002358 <dip204_init+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000236e:	12 38       	cp.w	r8,r9
80002370:	e0 8b 00 6b 	brhi	80002446 <dip204_init+0x176>
80002374:	12 3a       	cp.w	r10,r9
80002376:	c6 83       	brcs	80002446 <dip204_init+0x176>
80002378:	cf 0b       	rjmp	80002358 <dip204_init+0x88>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000237a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000237e:	14 38       	cp.w	r8,r10
80002380:	e0 88 00 08 	brls	80002390 <dip204_init+0xc0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002384:	12 38       	cp.w	r8,r9
80002386:	fe 98 ff fa 	brls	8000237a <dip204_init+0xaa>
8000238a:	12 3a       	cp.w	r10,r9
8000238c:	c6 b3       	brcs	80002462 <dip204_init+0x192>
8000238e:	cf 6b       	rjmp	8000237a <dip204_init+0xaa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002390:	12 38       	cp.w	r8,r9
80002392:	e0 8b 00 68 	brhi	80002462 <dip204_init+0x192>
80002396:	12 3a       	cp.w	r10,r9
80002398:	c6 53       	brcs	80002462 <dip204_init+0x192>
8000239a:	cf 0b       	rjmp	8000237a <dip204_init+0xaa>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000239c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800023a0:	14 38       	cp.w	r8,r10
800023a2:	e0 88 00 08 	brls	800023b2 <dip204_init+0xe2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023a6:	12 38       	cp.w	r8,r9
800023a8:	fe 98 ff fa 	brls	8000239c <dip204_init+0xcc>
800023ac:	12 3a       	cp.w	r10,r9
800023ae:	c6 23       	brcs	80002472 <dip204_init+0x1a2>
800023b0:	cf 6b       	rjmp	8000239c <dip204_init+0xcc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023b2:	12 38       	cp.w	r8,r9
800023b4:	e0 8b 00 5f 	brhi	80002472 <dip204_init+0x1a2>
800023b8:	12 3a       	cp.w	r10,r9
800023ba:	c5 c3       	brcs	80002472 <dip204_init+0x1a2>
800023bc:	cf 0b       	rjmp	8000239c <dip204_init+0xcc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023be:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800023c2:	14 38       	cp.w	r8,r10
800023c4:	e0 88 00 08 	brls	800023d4 <dip204_init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023c8:	12 38       	cp.w	r8,r9
800023ca:	fe 98 ff fa 	brls	800023be <dip204_init+0xee>
800023ce:	12 3a       	cp.w	r10,r9
800023d0:	c5 93       	brcs	80002482 <dip204_init+0x1b2>
800023d2:	cf 6b       	rjmp	800023be <dip204_init+0xee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023d4:	12 38       	cp.w	r8,r9
800023d6:	e0 8b 00 56 	brhi	80002482 <dip204_init+0x1b2>
800023da:	12 3a       	cp.w	r10,r9
800023dc:	c5 33       	brcs	80002482 <dip204_init+0x1b2>
800023de:	cf 0b       	rjmp	800023be <dip204_init+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023e0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800023e4:	14 38       	cp.w	r8,r10
800023e6:	e0 88 00 08 	brls	800023f6 <dip204_init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023ea:	12 38       	cp.w	r8,r9
800023ec:	fe 98 ff fa 	brls	800023e0 <dip204_init+0x110>
800023f0:	12 3a       	cp.w	r10,r9
800023f2:	c5 03       	brcs	80002492 <dip204_init+0x1c2>
800023f4:	cf 6b       	rjmp	800023e0 <dip204_init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023f6:	12 38       	cp.w	r8,r9
800023f8:	e0 8b 00 4d 	brhi	80002492 <dip204_init+0x1c2>
800023fc:	12 3a       	cp.w	r10,r9
800023fe:	c4 a3       	brcs	80002492 <dip204_init+0x1c2>
80002400:	cf 0b       	rjmp	800023e0 <dip204_init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002402:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002406:	14 38       	cp.w	r8,r10
80002408:	e0 88 00 08 	brls	80002418 <dip204_init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000240c:	12 38       	cp.w	r8,r9
8000240e:	fe 98 ff fa 	brls	80002402 <dip204_init+0x132>
80002412:	12 3a       	cp.w	r10,r9
80002414:	c4 93       	brcs	800024a6 <dip204_init+0x1d6>
80002416:	cf 6b       	rjmp	80002402 <dip204_init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002418:	12 38       	cp.w	r8,r9
8000241a:	e0 8b 00 46 	brhi	800024a6 <dip204_init+0x1d6>
8000241e:	12 3a       	cp.w	r10,r9
80002420:	c4 33       	brcs	800024a6 <dip204_init+0x1d6>
80002422:	cf 0b       	rjmp	80002402 <dip204_init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002424:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002428:	14 38       	cp.w	r8,r10
8000242a:	e0 88 00 08 	brls	8000243a <dip204_init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000242e:	12 38       	cp.w	r8,r9
80002430:	fe 98 ff fa 	brls	80002424 <dip204_init+0x154>
80002434:	12 3a       	cp.w	r10,r9
80002436:	c4 03       	brcs	800024b6 <dip204_init+0x1e6>
80002438:	cf 6b       	rjmp	80002424 <dip204_init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000243a:	12 38       	cp.w	r8,r9
8000243c:	e0 8b 00 3d 	brhi	800024b6 <dip204_init+0x1e6>
80002440:	12 3a       	cp.w	r10,r9
80002442:	c3 a3       	brcs	800024b6 <dip204_init+0x1e6>
80002444:	cf 0b       	rjmp	80002424 <dip204_init+0x154>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
80002446:	f0 1f 00 29 	mcall	800024e8 <dip204_init+0x218>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
8000244a:	e0 6c 00 f8 	mov	r12,248
8000244e:	f0 1f 00 28 	mcall	800024ec <dip204_init+0x21c>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80002452:	33 4c       	mov	r12,52
80002454:	f0 1f 00 26 	mcall	800024ec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002458:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000245c:	f0 ca d1 20 	sub	r10,r8,-12000
80002460:	c8 db       	rjmp	8000237a <dip204_init+0xaa>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
80002462:	30 9c       	mov	r12,9
80002464:	f0 1f 00 22 	mcall	800024ec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002468:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000246c:	f0 ca d1 20 	sub	r10,r8,-12000
80002470:	c9 6b       	rjmp	8000239c <dip204_init+0xcc>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80002472:	33 0c       	mov	r12,48
80002474:	f0 1f 00 1e 	mcall	800024ec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002478:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000247c:	f0 ca d1 20 	sub	r10,r8,-12000
80002480:	c9 fb       	rjmp	800023be <dip204_init+0xee>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
80002482:	30 fc       	mov	r12,15
80002484:	f0 1f 00 1a 	mcall	800024ec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002488:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000248c:	f0 ca d1 20 	sub	r10,r8,-12000
80002490:	ca 8b       	rjmp	800023e0 <dip204_init+0x110>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
80002492:	30 1c       	mov	r12,1
80002494:	f0 1f 00 16 	mcall	800024ec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002498:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000249c:	e0 69 ea 60 	mov	r9,60000
800024a0:	f0 09 00 0a 	add	r10,r8,r9
800024a4:	ca fb       	rjmp	80002402 <dip204_init+0x132>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
800024a6:	30 6c       	mov	r12,6
800024a8:	f0 1f 00 11 	mcall	800024ec <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800024ac:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800024b0:	f0 ca d1 20 	sub	r10,r8,-12000
800024b4:	cb 8b       	rjmp	80002424 <dip204_init+0x154>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
800024b6:	f0 1f 00 0f 	mcall	800024f0 <dip204_init+0x220>
  // unselect chip
  dip204_unselect();
800024ba:	f0 1f 00 0f 	mcall	800024f4 <dip204_init+0x224>
}
800024be:	2f cd       	sub	sp,-16
800024c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800024c4:	00 00       	add	r0,r0
800024c6:	00 08       	add	r8,r0
800024c8:	80 00       	ld.sh	r0,r0[0x0]
800024ca:	48 e8       	lddpc	r8,80002500 <pwm_channel_init+0x8>
800024cc:	80 00       	ld.sh	r0,r0[0x0]
800024ce:	25 40       	sub	r0,84
800024d0:	00 00       	add	r0,r0
800024d2:	09 28       	ld.uh	r8,r4++
800024d4:	00 00       	add	r0,r0
800024d6:	09 08       	ld.w	r8,r4++
800024d8:	80 00       	ld.sh	r0,r0[0x0]
800024da:	24 f8       	sub	r8,79
800024dc:	80 00       	ld.sh	r0,r0[0x0]
800024de:	25 2e       	sub	lr,82
800024e0:	80 00       	ld.sh	r0,r0[0x0]
800024e2:	4a 6c       	lddpc	r12,80002578 <pwm_init+0x38>
800024e4:	80 00       	ld.sh	r0,r0[0x0]
800024e6:	4a 50       	lddpc	r0,80002578 <pwm_init+0x38>
800024e8:	80 00       	ld.sh	r0,r0[0x0]
800024ea:	20 08       	sub	r8,0
800024ec:	80 00       	ld.sh	r0,r0[0x0]
800024ee:	20 1c       	sub	r12,1
800024f0:	80 00       	ld.sh	r0,r0[0x0]
800024f2:	20 b0       	sub	r0,11
800024f4:	80 00       	ld.sh	r0,r0[0x0]
800024f6:	20 e4       	sub	r4,14

800024f8 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
800024f8:	58 0b       	cp.w	r11,0
800024fa:	c1 90       	breq	8000252c <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
800024fc:	58 6c       	cp.w	r12,6
800024fe:	e0 8b 00 17 	brhi	8000252c <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80002502:	76 0a       	ld.w	r10,r11[0x0]
80002504:	fe 78 30 00 	mov	r8,-53248
80002508:	f8 c9 ff f0 	sub	r9,r12,-16
8000250c:	a5 79       	lsl	r9,0x5
8000250e:	f0 09 00 09 	add	r9,r8,r9
80002512:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80002514:	76 19       	ld.w	r9,r11[0x4]
80002516:	a5 7c       	lsl	r12,0x5
80002518:	f0 0c 00 0c 	add	r12,r8,r12
8000251c:	f8 c8 fd fc 	sub	r8,r12,-516
80002520:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80002522:	76 28       	ld.w	r8,r11[0x8]
80002524:	f8 cc fd f8 	sub	r12,r12,-520
80002528:	99 08       	st.w	r12[0x0],r8
8000252a:	5e fd       	retal	0

  return PWM_SUCCESS;
8000252c:	5e ff       	retal	1

8000252e <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
8000252e:	18 98       	mov	r8,r12
80002530:	e0 18 ff 80 	andl	r8,0xff80
80002534:	c0 20       	breq	80002538 <pwm_start_channels+0xa>
80002536:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80002538:	fe 78 30 00 	mov	r8,-53248
8000253c:	91 1c       	st.w	r8[0x4],r12
8000253e:	5e fd       	retal	0

80002540 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002540:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
80002544:	58 0c       	cp.w	r12,0
80002546:	c0 21       	brne	8000254a <pwm_init+0xa>
80002548:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000254a:	e6 18 00 01 	andh	r8,0x1,COH
8000254e:	c0 91       	brne	80002560 <pwm_init+0x20>
80002550:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002552:	fe 78 30 00 	mov	r8,-53248
80002556:	37 f9       	mov	r9,127
80002558:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000255a:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
8000255c:	d5 03       	csrf	0x10
8000255e:	c0 68       	rjmp	8000256a <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002560:	fe 78 30 00 	mov	r8,-53248
80002564:	37 f9       	mov	r9,127
80002566:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002568:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000256a:	78 08       	ld.w	r8,r12[0x0]
8000256c:	78 39       	ld.w	r9,r12[0xc]
8000256e:	a9 69       	lsl	r9,0x8
80002570:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80002574:	78 18       	ld.w	r8,r12[0x4]
80002576:	10 49       	or	r9,r8
80002578:	78 28       	ld.w	r8,r12[0x8]
8000257a:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
8000257e:	fe 78 30 00 	mov	r8,-53248
80002582:	91 09       	st.w	r8[0x0],r9
80002584:	5e fd       	retal	0

80002586 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80002586:	f8 c8 00 01 	sub	r8,r12,1
8000258a:	f0 0b 00 0b 	add	r11,r8,r11
8000258e:	f6 0c 0d 0a 	divu	r10,r11,r12
80002592:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80002594:	f4 c8 00 01 	sub	r8,r10,1
80002598:	e0 48 00 fe 	cp.w	r8,254
8000259c:	e0 88 00 03 	brls	800025a2 <getBaudDiv+0x1c>
800025a0:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800025a2:	5c 8c       	casts.h	r12
}
800025a4:	5e fc       	retal	r12

800025a6 <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800025a6:	f7 39 00 0d 	ld.ub	r9,r11[13]
800025aa:	30 18       	mov	r8,1
800025ac:	f0 09 18 00 	cp.b	r9,r8
800025b0:	e0 88 00 04 	brls	800025b8 <spi_initMaster+0x12>
800025b4:	30 2c       	mov	r12,2
800025b6:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800025b8:	e0 68 00 80 	mov	r8,128
800025bc:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800025be:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
800025c0:	30 19       	mov	r9,1
800025c2:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800025c6:	f7 39 00 0d 	ld.ub	r9,r11[13]
800025ca:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
800025ce:	30 09       	mov	r9,0
800025d0:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800025d4:	30 fa       	mov	r10,15
800025d6:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
800025da:	99 18       	st.w	r12[0x4],r8
800025dc:	5e f9       	retal	r9

800025de <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800025de:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800025e0:	30 18       	mov	r8,1
800025e2:	f0 0b 18 00 	cp.b	r11,r8
800025e6:	5f be       	srhi	lr
800025e8:	f0 0a 18 00 	cp.b	r10,r8
800025ec:	5f b8       	srhi	r8
800025ee:	fd e8 10 08 	or	r8,lr,r8
800025f2:	c0 30       	breq	800025f8 <spi_selectionMode+0x1a>
800025f4:	30 2c       	mov	r12,2
800025f6:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
800025f8:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
800025fa:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800025fe:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80002602:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80002606:	99 18       	st.w	r12[0x4],r8
80002608:	d8 0a       	popm	pc,r12=0

8000260a <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000260a:	78 18       	ld.w	r8,r12[0x4]
8000260c:	ea 18 00 0f 	orh	r8,0xf
80002610:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80002612:	78 18       	ld.w	r8,r12[0x4]
80002614:	e2 18 00 04 	andl	r8,0x4,COH
80002618:	c0 f0       	breq	80002636 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000261a:	30 e8       	mov	r8,14
8000261c:	f0 0b 18 00 	cp.b	r11,r8
80002620:	e0 8b 00 19 	brhi	80002652 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80002624:	78 18       	ld.w	r8,r12[0x4]
80002626:	b1 6b       	lsl	r11,0x10
80002628:	ea 1b ff f0 	orh	r11,0xfff0
8000262c:	e8 1b ff ff 	orl	r11,0xffff
80002630:	10 6b       	and	r11,r8
80002632:	99 1b       	st.w	r12[0x4],r11
80002634:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80002636:	30 38       	mov	r8,3
80002638:	f0 0b 18 00 	cp.b	r11,r8
8000263c:	e0 8b 00 0b 	brhi	80002652 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002640:	78 18       	ld.w	r8,r12[0x4]
80002642:	2f 0b       	sub	r11,-16
80002644:	30 19       	mov	r9,1
80002646:	f2 0b 09 4b 	lsl	r11,r9,r11
8000264a:	5c db       	com	r11
8000264c:	10 6b       	and	r11,r8
8000264e:	99 1b       	st.w	r12[0x4],r11
80002650:	5e fd       	retal	0
80002652:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80002654:	5e fc       	retal	r12

80002656 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002656:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000265a:	c0 58       	rjmp	80002664 <spi_unselectChip+0xe>
		if (!timeout--) {
8000265c:	58 08       	cp.w	r8,0
8000265e:	c0 21       	brne	80002662 <spi_unselectChip+0xc>
80002660:	5e ff       	retal	1
80002662:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002664:	78 49       	ld.w	r9,r12[0x10]
80002666:	e2 19 02 00 	andl	r9,0x200,COH
8000266a:	cf 90       	breq	8000265c <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000266c:	78 18       	ld.w	r8,r12[0x4]
8000266e:	ea 18 00 0f 	orh	r8,0xf
80002672:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80002674:	fc 18 01 00 	movh	r8,0x100
80002678:	99 08       	st.w	r12[0x0],r8
8000267a:	5e fd       	retal	0

8000267c <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
8000267c:	eb cd 40 f8 	pushm	r3-r7,lr
80002680:	18 95       	mov	r5,r12
80002682:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002684:	f7 36 00 0c 	ld.ub	r6,r11[12]
80002688:	30 38       	mov	r8,3
8000268a:	f0 06 18 00 	cp.b	r6,r8
8000268e:	e0 8b 00 4d 	brhi	80002728 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80002692:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002696:	30 18       	mov	r8,1
80002698:	f0 04 18 00 	cp.b	r4,r8
8000269c:	e0 8b 00 46 	brhi	80002728 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800026a0:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800026a4:	30 78       	mov	r8,7
800026a6:	f0 03 18 00 	cp.b	r3,r8
800026aa:	e0 88 00 3f 	brls	80002728 <spi_setupChipReg+0xac>
800026ae:	31 08       	mov	r8,16
800026b0:	f0 03 18 00 	cp.b	r3,r8
800026b4:	e0 8b 00 3a 	brhi	80002728 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800026b8:	14 9b       	mov	r11,r10
800026ba:	6e 1c       	ld.w	r12,r7[0x4]
800026bc:	f0 1f 00 1d 	mcall	80002730 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800026c0:	c3 45       	brlt	80002728 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800026c2:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800026c4:	ec 09 16 01 	lsr	r9,r6,0x1
800026c8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800026cc:	ec 16 00 01 	eorl	r6,0x1
800026d0:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800026d4:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800026d8:	20 83       	sub	r3,8
800026da:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800026de:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800026e2:	ef 39 00 09 	ld.ub	r9,r7[9]
800026e6:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800026ea:	ef 39 00 0a 	ld.ub	r9,r7[10]
800026ee:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
800026f2:	0f 89       	ld.ub	r9,r7[0x0]
800026f4:	30 1a       	mov	r10,1
800026f6:	f4 09 18 00 	cp.b	r9,r10
800026fa:	c0 e0       	breq	80002716 <spi_setupChipReg+0x9a>
800026fc:	c0 a3       	brcs	80002710 <spi_setupChipReg+0x94>
800026fe:	30 2a       	mov	r10,2
80002700:	f4 09 18 00 	cp.b	r9,r10
80002704:	c0 c0       	breq	8000271c <spi_setupChipReg+0xa0>
80002706:	30 3a       	mov	r10,3
80002708:	f4 09 18 00 	cp.b	r9,r10
8000270c:	c0 e1       	brne	80002728 <spi_setupChipReg+0xac>
8000270e:	c0 a8       	rjmp	80002722 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80002710:	8b c8       	st.w	r5[0x30],r8
80002712:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80002716:	8b d8       	st.w	r5[0x34],r8
80002718:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
8000271c:	8b e8       	st.w	r5[0x38],r8
8000271e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80002722:	8b f8       	st.w	r5[0x3c],r8
80002724:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80002728:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
8000272a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000272e:	00 00       	add	r0,r0
80002730:	80 00       	ld.sh	r0,r0[0x0]
80002732:	25 86       	sub	r6,88

80002734 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002734:	30 18       	mov	r8,1
80002736:	99 08       	st.w	r12[0x0],r8
}
80002738:	5e fc       	retal	r12

8000273a <spi_disable>:

void spi_disable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIDIS_MASK;
8000273a:	30 28       	mov	r8,2
8000273c:	99 08       	st.w	r12[0x0],r8
}
8000273e:	5e fc       	retal	r12

80002740 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80002740:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002744:	c0 58       	rjmp	8000274e <spi_write+0xe>
		if (!timeout--) {
80002746:	58 08       	cp.w	r8,0
80002748:	c0 21       	brne	8000274c <spi_write+0xc>
8000274a:	5e ff       	retal	1
8000274c:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000274e:	78 49       	ld.w	r9,r12[0x10]
80002750:	e2 19 00 02 	andl	r9,0x2,COH
80002754:	cf 90       	breq	80002746 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002756:	5c 7b       	castu.h	r11
80002758:	99 3b       	st.w	r12[0xc],r11
8000275a:	5e fd       	retal	0

8000275c <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
8000275c:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80002760:	c0 58       	rjmp	8000276a <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80002762:	58 08       	cp.w	r8,0
80002764:	c0 21       	brne	80002768 <spi_read+0xc>
80002766:	5e ff       	retal	1
80002768:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
8000276a:	78 49       	ld.w	r9,r12[0x10]
8000276c:	e2 19 02 01 	andl	r9,0x201,COH
80002770:	e0 49 02 01 	cp.w	r9,513
80002774:	cf 71       	brne	80002762 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80002776:	78 28       	ld.w	r8,r12[0x8]
80002778:	b6 08       	st.h	r11[0x0],r8
8000277a:	5e fd       	retal	0

8000277c <udi_hid_mouse_send_report>:
	return udi_hid_mouse_move(0, 1);
}


static bool udi_hid_mouse_send_report(void)
{
8000277c:	d4 01       	pushm	lr
	if (udi_hid_mouse_report_trans_ongoing)
8000277e:	48 f8       	lddpc	r8,800027b8 <udi_hid_mouse_send_report+0x3c>
80002780:	11 89       	ld.ub	r9,r8[0x0]
80002782:	30 08       	mov	r8,0
80002784:	f0 09 18 00 	cp.b	r9,r8
80002788:	c0 20       	breq	8000278c <udi_hid_mouse_send_report+0x10>
8000278a:	d8 0a       	popm	pc,r12=0
		return false;	// Transfer on going then send this one after transfer complete

	// Copy report on other array used only for transfer
	memcpy(udi_hid_mouse_report_trans, udi_hid_mouse_report,
8000278c:	48 ca       	lddpc	r10,800027bc <udi_hid_mouse_send_report+0x40>
8000278e:	48 d8       	lddpc	r8,800027c0 <udi_hid_mouse_send_report+0x44>
80002790:	70 09       	ld.w	r9,r8[0x0]
80002792:	95 09       	st.w	r10[0x0],r9
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
80002794:	30 09       	mov	r9,0
80002796:	2f f8       	sub	r8,-1
80002798:	10 c9       	st.b	r8++,r9
8000279a:	10 c9       	st.b	r8++,r9
8000279c:	b0 89       	st.b	r8[0x0],r9
	udi_hid_mouse_b_report_valid = false;
8000279e:	48 a8       	lddpc	r8,800027c4 <udi_hid_mouse_send_report+0x48>
800027a0:	b0 89       	st.b	r8[0x0],r9

	// Send report
	udi_hid_mouse_report_trans_ongoing =
			udd_ep_run(	UDI_MIDI_EP_IN,
800027a2:	48 a8       	lddpc	r8,800027c8 <udi_hid_mouse_send_report+0x4c>
800027a4:	30 49       	mov	r9,4
800027a6:	30 0b       	mov	r11,0
800027a8:	e0 6c 00 82 	mov	r12,130
800027ac:	f0 1f 00 08 	mcall	800027cc <udi_hid_mouse_send_report+0x50>
			UDI_HID_MOUSE_REPORT_SIZE);
	memset(&udi_hid_mouse_report[1], 0, 3);	// Keep status of btn for next report
	udi_hid_mouse_b_report_valid = false;

	// Send report
	udi_hid_mouse_report_trans_ongoing =
800027b0:	48 28       	lddpc	r8,800027b8 <udi_hid_mouse_send_report+0x3c>
800027b2:	b0 8c       	st.b	r8[0x0],r12
							false,
							udi_hid_mouse_report_trans,
							UDI_HID_MOUSE_REPORT_SIZE,
							udi_hid_mouse_report_sent);
	return udi_hid_mouse_report_trans_ongoing;
}
800027b4:	d8 02       	popm	pc
800027b6:	00 00       	add	r0,r0
800027b8:	00 00       	add	r0,r0
800027ba:	09 30       	ld.ub	r0,r4++
800027bc:	00 00       	add	r0,r0
800027be:	09 48       	ld.w	r8,--r4
800027c0:	00 00       	add	r0,r0
800027c2:	09 2c       	ld.uh	r12,r4++
800027c4:	00 00       	add	r0,r0
800027c6:	09 4c       	ld.w	r12,--r4
800027c8:	80 00       	ld.sh	r0,r0[0x0]
800027ca:	27 d0       	sub	r0,125
800027cc:	80 00       	ld.sh	r0,r0[0x0]
800027ce:	50 78       	stdsp	sp[0x1c],r8

800027d0 <udi_hid_mouse_report_sent>:


static void udi_hid_mouse_report_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
800027d0:	d4 01       	pushm	lr
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// Valid report sending
	udi_hid_mouse_report_trans_ongoing = false;
800027d2:	30 08       	mov	r8,0
800027d4:	48 59       	lddpc	r9,800027e8 <udi_hid_mouse_report_sent+0x18>
800027d6:	b2 88       	st.b	r9[0x0],r8
	if (udi_hid_mouse_b_report_valid) {
800027d8:	48 59       	lddpc	r9,800027ec <udi_hid_mouse_report_sent+0x1c>
800027da:	13 89       	ld.ub	r9,r9[0x0]
800027dc:	f0 09 18 00 	cp.b	r9,r8
800027e0:	c0 30       	breq	800027e6 <udi_hid_mouse_report_sent+0x16>
		// Send new valid report
		udi_hid_mouse_send_report();
800027e2:	f0 1f 00 04 	mcall	800027f0 <udi_hid_mouse_report_sent+0x20>
800027e6:	d8 02       	popm	pc
800027e8:	00 00       	add	r0,r0
800027ea:	09 30       	ld.ub	r0,r4++
800027ec:	00 00       	add	r0,r0
800027ee:	09 4c       	ld.w	r12,--r4
800027f0:	80 00       	ld.sh	r0,r0[0x0]
800027f2:	27 7c       	sub	r12,119

800027f4 <udi_hid_mouse_move>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_mouse_move(int8_t pos, uint8_t index_report)
{
800027f4:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027f8:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
800027fc:	d3 03       	ssrf	0x10

	irqflags_t flags = cpu_irq_save();

	// Add position in HID mouse report
	s16_newpos = (int8_t) udi_hid_mouse_report[index_report];
	s16_newpos += pos;
800027fe:	49 28       	lddpc	r8,80002844 <udi_hid_mouse_move+0x50>
80002800:	f0 0b 06 08 	ld.sb	r8,r8[r11]
80002804:	5c 6c       	casts.b	r12
80002806:	f0 0c 00 0c 	add	r12,r8,r12
8000280a:	5c 8c       	casts.h	r12
	if ((-127 > s16_newpos) || (127 < s16_newpos)) {
8000280c:	f8 c9 ff 81 	sub	r9,r12,-127
80002810:	e0 68 00 fe 	mov	r8,254
80002814:	f0 09 19 00 	cp.h	r9,r8
80002818:	e0 88 00 08 	brls	80002828 <udi_hid_mouse_move+0x34>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000281c:	e6 17 00 01 	andh	r7,0x1,COH
80002820:	c0 21       	brne	80002824 <udi_hid_mouse_move+0x30>
      cpu_irq_enable();
80002822:	d5 03       	csrf	0x10
   }

	barrier();
80002824:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;	// Overflow of report
	}
	udi_hid_mouse_report[index_report] = (uint8_t) s16_newpos;
80002828:	48 78       	lddpc	r8,80002844 <udi_hid_mouse_move+0x50>
8000282a:	f0 0b 0b 0c 	st.b	r8[r11],r12

	// Valid and send report
	udi_hid_mouse_b_report_valid = true;
8000282e:	30 19       	mov	r9,1
80002830:	48 68       	lddpc	r8,80002848 <udi_hid_mouse_move+0x54>
80002832:	b0 89       	st.b	r8[0x0],r9
	udi_hid_mouse_send_report();
80002834:	f0 1f 00 06 	mcall	8000284c <udi_hid_mouse_move+0x58>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002838:	e6 17 00 01 	andh	r7,0x1,COH
8000283c:	c0 21       	brne	80002840 <udi_hid_mouse_move+0x4c>
      cpu_irq_enable();
8000283e:	d5 03       	csrf	0x10
   }

	barrier();
80002840:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80002844:	00 00       	add	r0,r0
80002846:	09 2c       	ld.uh	r12,r4++
80002848:	00 00       	add	r0,r0
8000284a:	09 4c       	ld.w	r12,--r4
8000284c:	80 00       	ld.sh	r0,r0[0x0]
8000284e:	27 7c       	sub	r12,119

80002850 <udi_hid_mouse_btn>:
	return true;
}


static bool udi_hid_mouse_btn(bool b_state, uint8_t btn)
{
80002850:	d4 01       	pushm	lr
	// Modify buttons report
	if (HID_MOUSE_BTN_DOWN == b_state)
80002852:	58 0c       	cp.w	r12,0
80002854:	c0 60       	breq	80002860 <udi_hid_mouse_btn+0x10>
		udi_hid_mouse_report[0] |= btn;
80002856:	48 88       	lddpc	r8,80002874 <udi_hid_mouse_btn+0x24>
80002858:	11 89       	ld.ub	r9,r8[0x0]
8000285a:	12 4b       	or	r11,r9
8000285c:	b0 8b       	st.b	r8[0x0],r11
8000285e:	c0 68       	rjmp	8000286a <udi_hid_mouse_btn+0x1a>
	else
		udi_hid_mouse_report[0] &= ~(unsigned)btn;
80002860:	48 58       	lddpc	r8,80002874 <udi_hid_mouse_btn+0x24>
80002862:	5c db       	com	r11
80002864:	11 89       	ld.ub	r9,r8[0x0]
80002866:	12 6b       	and	r11,r9
80002868:	b0 8b       	st.b	r8[0x0],r11
	// Use mouse move routine
	return udi_hid_mouse_move(0, 1);
8000286a:	30 1b       	mov	r11,1
8000286c:	30 0c       	mov	r12,0
8000286e:	f0 1f 00 03 	mcall	80002878 <udi_hid_mouse_btn+0x28>
}
80002872:	d8 02       	popm	pc
80002874:	00 00       	add	r0,r0
80002876:	09 2c       	ld.uh	r12,r4++
80002878:	80 00       	ld.sh	r0,r0[0x0]
8000287a:	27 f4       	sub	r4,127

8000287c <udi_hid_mouse_btnleft>:
{
	return udi_hid_mouse_btn(b_state, 0x02);
}

bool udi_hid_mouse_btnleft(bool b_state)
{
8000287c:	d4 01       	pushm	lr
	return udi_hid_mouse_btn(b_state, 0x01);
8000287e:	30 1b       	mov	r11,1
80002880:	f0 1f 00 02 	mcall	80002888 <udi_hid_mouse_btnleft+0xc>
}
80002884:	d8 02       	popm	pc
80002886:	00 00       	add	r0,r0
80002888:	80 00       	ld.sh	r0,r0[0x0]
8000288a:	28 50       	sub	r0,-123

8000288c <udi_hid_mouse_btnright>:
{
	return udi_hid_mouse_btn(b_state, 0x04);
}

bool udi_hid_mouse_btnright(bool b_state)
{
8000288c:	d4 01       	pushm	lr
	return udi_hid_mouse_btn(b_state, 0x02);
8000288e:	30 2b       	mov	r11,2
80002890:	f0 1f 00 02 	mcall	80002898 <udi_hid_mouse_btnright+0xc>
}
80002894:	d8 02       	popm	pc
80002896:	00 00       	add	r0,r0
80002898:	80 00       	ld.sh	r0,r0[0x0]
8000289a:	28 50       	sub	r0,-123

8000289c <udi_hid_mouse_btnmiddle>:
{
	return udi_hid_mouse_move(pos_x, 1);
}

bool udi_hid_mouse_btnmiddle(bool b_state)
{
8000289c:	d4 01       	pushm	lr
	return udi_hid_mouse_btn(b_state, 0x04);
8000289e:	30 4b       	mov	r11,4
800028a0:	f0 1f 00 02 	mcall	800028a8 <udi_hid_mouse_btnmiddle+0xc>
}
800028a4:	d8 02       	popm	pc
800028a6:	00 00       	add	r0,r0
800028a8:	80 00       	ld.sh	r0,r0[0x0]
800028aa:	28 50       	sub	r0,-123

800028ac <udi_hid_mouse_moveX>:
{
	return udi_hid_mouse_move(pos_y, 2);
}

bool udi_hid_mouse_moveX(int8_t pos_x)
{
800028ac:	d4 01       	pushm	lr
	return udi_hid_mouse_move(pos_x, 1);
800028ae:	30 1b       	mov	r11,1
800028b0:	5c 6c       	casts.b	r12
800028b2:	f0 1f 00 02 	mcall	800028b8 <udi_hid_mouse_moveX+0xc>
}
800028b6:	d8 02       	popm	pc
800028b8:	80 00       	ld.sh	r0,r0[0x0]
800028ba:	27 f4       	sub	r4,127

800028bc <udi_hid_mouse_moveY>:
{
	return udi_hid_mouse_move(pos, 3);
}

bool udi_hid_mouse_moveY(int8_t pos_y)
{
800028bc:	d4 01       	pushm	lr
	return udi_hid_mouse_move(pos_y, 2);
800028be:	30 2b       	mov	r11,2
800028c0:	5c 6c       	casts.b	r12
800028c2:	f0 1f 00 02 	mcall	800028c8 <udi_hid_mouse_moveY+0xc>
}
800028c6:	d8 02       	popm	pc
800028c8:	80 00       	ld.sh	r0,r0[0x0]
800028ca:	27 f4       	sub	r4,127

800028cc <MIDI_Host_ReceiveEventPacket>:
	return PIPE_RWSTREAM_NoError;
}

bool MIDI_Host_ReceiveEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
800028cc:	d4 01       	pushm	lr
800028ce:	16 98       	mov	r8,r11
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
800028d0:	4b 29       	lddpc	r9,80002998 <MIDI_Host_ReceiveEventPacket+0xcc>
800028d2:	13 8a       	ld.ub	r10,r9[0x0]
800028d4:	30 b9       	mov	r9,11
800028d6:	f2 0a 18 00 	cp.b	r10,r9
800028da:	c5 e1       	brne	80002996 <MIDI_Host_ReceiveEventPacket+0xca>
800028dc:	f9 3a 00 10 	ld.ub	r10,r12[16]
800028e0:	30 09       	mov	r9,0
800028e2:	f2 0a 18 00 	cp.b	r10,r9
800028e6:	c5 80       	breq	80002996 <MIDI_Host_ReceiveEventPacket+0xca>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				USB_Pipe_SelectedPipe = (Address & PIPE_EPNUM_MASK);
800028e8:	19 8a       	ld.ub	r10,r12[0x0]
800028ea:	f5 da c0 04 	bfextu	r10,r10,0x0,0x4
800028ee:	4a c9       	lddpc	r9,8000299c <MIDI_Host_ReceiveEventPacket+0xd0>
800028f0:	93 0a       	st.w	r9[0x0],r10

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].pfreezec = true;
800028f2:	72 0a       	ld.w	r10,r9[0x0]
800028f4:	a3 6a       	lsl	r10,0x2
800028f6:	e0 3a f9 e0 	sub	r10,129504
800028fa:	74 0b       	ld.w	r11,r10[0x0]
800028fc:	30 1c       	mov	r12,1
800028fe:	f7 dc d2 21 	bfins	r11,r12,0x11,0x1
80002902:	95 0b       	st.w	r10[0x0],r11
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].rxini;
80002904:	72 09       	ld.w	r9,r9[0x0]
80002906:	a3 69       	lsl	r9,0x2
80002908:	e0 39 fa d0 	sub	r9,129744
8000290c:	72 09       	ld.w	r9,r9[0x0]
	bool DataReady = false;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
8000290e:	18 69       	and	r9,r12
80002910:	c0 31       	brne	80002916 <MIDI_Host_ReceiveEventPacket+0x4a>
80002912:	30 0c       	mov	r12,0
80002914:	c3 68       	rjmp	80002980 <MIDI_Host_ReceiveEventPacket+0xb4>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].pbyct;
80002916:	4a 29       	lddpc	r9,8000299c <MIDI_Host_ReceiveEventPacket+0xd0>
80002918:	72 09       	ld.w	r9,r9[0x0]
8000291a:	a3 69       	lsl	r9,0x2
8000291c:	e0 39 fa d0 	sub	r9,129744
80002920:	72 09       	ld.w	r9,r9[0x0]
80002922:	f3 d9 c2 8b 	bfextu	r9,r9,0x14,0xb
	{
		if (Pipe_BytesInPipe())
80002926:	c0 31       	brne	8000292c <MIDI_Host_ReceiveEventPacket+0x60>
80002928:	30 0c       	mov	r12,0
8000292a:	c0 78       	rjmp	80002938 <MIDI_Host_ReceiveEventPacket+0x6c>
		{
			Pipe_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
8000292c:	30 0a       	mov	r10,0
8000292e:	30 4b       	mov	r11,4
80002930:	10 9c       	mov	r12,r8
80002932:	f0 1f 00 1c 	mcall	800029a0 <MIDI_Host_ReceiveEventPacket+0xd4>
80002936:	30 1c       	mov	r12,1
80002938:	49 98       	lddpc	r8,8000299c <MIDI_Host_ReceiveEventPacket+0xd0>
8000293a:	70 08       	ld.w	r8,r8[0x0]
8000293c:	a3 68       	lsl	r8,0x2
8000293e:	e0 38 fa d0 	sub	r8,129744
80002942:	70 08       	ld.w	r8,r8[0x0]
80002944:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
			DataReady = true;
		}

		if (!(Pipe_BytesInPipe()))
80002948:	c1 c1       	brne	80002980 <MIDI_Host_ReceiveEventPacket+0xb4>
			 *  \ingroup Group_PipePacketManagement_UC3
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				(&AVR32_USBB.UPSTA0CLR)[USB_Pipe_SelectedPipe].rxinic   = true;
8000294a:	49 58       	lddpc	r8,8000299c <MIDI_Host_ReceiveEventPacket+0xd0>
8000294c:	70 09       	ld.w	r9,r8[0x0]
8000294e:	a3 69       	lsl	r9,0x2
80002950:	e0 39 fa a0 	sub	r9,129696
80002954:	72 0a       	ld.w	r10,r9[0x0]
80002956:	30 1b       	mov	r11,1
80002958:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
8000295c:	93 0a       	st.w	r9[0x0],r10
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].fifoconc = true;
8000295e:	70 09       	ld.w	r9,r8[0x0]
80002960:	a3 69       	lsl	r9,0x2
80002962:	e0 39 f9 e0 	sub	r9,129504
80002966:	72 0a       	ld.w	r10,r9[0x0]
80002968:	f5 db d1 c1 	bfins	r10,r11,0xe,0x1
8000296c:	93 0a       	st.w	r9[0x0],r10
				USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe] = &AVR32_USBB_SLAVE[USB_Pipe_SelectedPipe * PIPE_HSB_ADDRESS_SPACE_SIZE];
8000296e:	70 09       	ld.w	r9,r8[0x0]
80002970:	70 0a       	ld.w	r10,r8[0x0]
80002972:	b1 6a       	lsl	r10,0x10
80002974:	fc 18 e0 00 	movh	r8,0xe000
80002978:	10 0a       	add	r10,r8
8000297a:	48 b8       	lddpc	r8,800029a4 <MIDI_Host_ReceiveEventPacket+0xd8>
8000297c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				(&AVR32_USBB.UPCON0SET)[USB_Pipe_SelectedPipe].pfreezes = true;
80002980:	48 78       	lddpc	r8,8000299c <MIDI_Host_ReceiveEventPacket+0xd0>
80002982:	70 08       	ld.w	r8,r8[0x0]
80002984:	a3 68       	lsl	r8,0x2
80002986:	e0 38 fa 10 	sub	r8,129552
8000298a:	70 09       	ld.w	r9,r8[0x0]
8000298c:	30 1a       	mov	r10,1
8000298e:	f3 da d2 21 	bfins	r9,r10,0x11,0x1
80002992:	91 09       	st.w	r8[0x0],r9
		  Pipe_ClearIN();
	}

	Pipe_Freeze();

	return DataReady;
80002994:	d8 02       	popm	pc
80002996:	da 0a       	popm	pc,r12=1
80002998:	00 00       	add	r0,r0
8000299a:	09 4d       	ld.w	sp,--r4
8000299c:	00 00       	add	r0,r0
8000299e:	09 58       	ld.sh	r8,--r4
800029a0:	80 00       	ld.sh	r0,r0[0x0]
800029a2:	3c 34       	mov	r4,-61
800029a4:	00 00       	add	r0,r0
800029a6:	0c 1c       	sub	r12,r6

800029a8 <MIDI_Host_Flush>:
	return DESCRIPTOR_SEARCH_NotFound;
}


uint8_t MIDI_Host_Flush(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
800029a8:	d4 01       	pushm	lr
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
800029aa:	4a d8       	lddpc	r8,80002a5c <MIDI_Host_Flush+0xb4>
800029ac:	11 89       	ld.ub	r9,r8[0x0]
800029ae:	30 b8       	mov	r8,11
800029b0:	f0 09 18 00 	cp.b	r9,r8
800029b4:	c5 11       	brne	80002a56 <MIDI_Host_Flush+0xae>
800029b6:	f9 39 00 10 	ld.ub	r9,r12[16]
800029ba:	30 08       	mov	r8,0
800029bc:	f0 09 18 00 	cp.b	r9,r8
800029c0:	c4 b0       	breq	80002a56 <MIDI_Host_Flush+0xae>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				USB_Pipe_SelectedPipe = (Address & PIPE_EPNUM_MASK);
800029c2:	f9 39 00 08 	ld.ub	r9,r12[8]
800029c6:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
800029ca:	4a 68       	lddpc	r8,80002a60 <MIDI_Host_Flush+0xb8>
800029cc:	91 09       	st.w	r8[0x0],r9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].pfreezec = true;
800029ce:	70 09       	ld.w	r9,r8[0x0]
800029d0:	a3 69       	lsl	r9,0x2
800029d2:	e0 39 f9 e0 	sub	r9,129504
800029d6:	72 0a       	ld.w	r10,r9[0x0]
800029d8:	30 1b       	mov	r11,1
800029da:	f5 db d2 21 	bfins	r10,r11,0x11,0x1
800029de:	93 0a       	st.w	r9[0x0],r10
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].pbyct;
800029e0:	70 08       	ld.w	r8,r8[0x0]
800029e2:	a3 68       	lsl	r8,0x2
800029e4:	e0 38 fa d0 	sub	r8,129744
800029e8:	70 08       	ld.w	r8,r8[0x0]
800029ea:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_BytesInPipe())
800029ee:	c2 90       	breq	80002a40 <MIDI_Host_Flush+0x98>
			 *  \ingroup Group_PipePacketManagement_UC3
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				(&AVR32_USBB.UPSTA0CLR)[USB_Pipe_SelectedPipe].txoutic  = true;
800029f0:	49 c8       	lddpc	r8,80002a60 <MIDI_Host_Flush+0xb8>
800029f2:	70 09       	ld.w	r9,r8[0x0]
800029f4:	a3 69       	lsl	r9,0x2
800029f6:	e0 39 fa a0 	sub	r9,129696
800029fa:	72 0a       	ld.w	r10,r9[0x0]
800029fc:	f5 db d0 21 	bfins	r10,r11,0x1,0x1
80002a00:	93 0a       	st.w	r9[0x0],r10
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].fifoconc = true;
80002a02:	70 09       	ld.w	r9,r8[0x0]
80002a04:	a3 69       	lsl	r9,0x2
80002a06:	e0 39 f9 e0 	sub	r9,129504
80002a0a:	72 0a       	ld.w	r10,r9[0x0]
80002a0c:	f5 db d1 c1 	bfins	r10,r11,0xe,0x1
80002a10:	93 0a       	st.w	r9[0x0],r10
				USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe] = &AVR32_USBB_SLAVE[USB_Pipe_SelectedPipe * PIPE_HSB_ADDRESS_SPACE_SIZE];
80002a12:	70 09       	ld.w	r9,r8[0x0]
80002a14:	70 0a       	ld.w	r10,r8[0x0]
80002a16:	b1 6a       	lsl	r10,0x10
80002a18:	fc 18 e0 00 	movh	r8,0xe000
80002a1c:	10 0a       	add	r10,r8
80002a1e:	49 28       	lddpc	r8,80002a64 <MIDI_Host_Flush+0xbc>
80002a20:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	{
		Pipe_ClearOUT();

		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
80002a24:	f0 1f 00 11 	mcall	80002a68 <MIDI_Host_Flush+0xc0>
80002a28:	c0 c0       	breq	80002a40 <MIDI_Host_Flush+0x98>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				(&AVR32_USBB.UPCON0SET)[USB_Pipe_SelectedPipe].pfreezes = true;
80002a2a:	48 e8       	lddpc	r8,80002a60 <MIDI_Host_Flush+0xb8>
80002a2c:	70 08       	ld.w	r8,r8[0x0]
80002a2e:	a3 68       	lsl	r8,0x2
80002a30:	e0 38 fa 10 	sub	r8,129552
80002a34:	70 09       	ld.w	r9,r8[0x0]
80002a36:	30 1a       	mov	r10,1
80002a38:	f3 da d2 21 	bfins	r9,r10,0x11,0x1
80002a3c:	91 09       	st.w	r8[0x0],r9
		{
			Pipe_Freeze();
			return ErrorCode;
80002a3e:	d8 02       	popm	pc
80002a40:	48 88       	lddpc	r8,80002a60 <MIDI_Host_Flush+0xb8>
80002a42:	70 08       	ld.w	r8,r8[0x0]
80002a44:	a3 68       	lsl	r8,0x2
80002a46:	e0 38 fa 10 	sub	r8,129552
80002a4a:	70 09       	ld.w	r9,r8[0x0]
80002a4c:	30 1a       	mov	r10,1
80002a4e:	f3 da d2 21 	bfins	r9,r10,0x11,0x1
80002a52:	91 09       	st.w	r8[0x0],r9
80002a54:	d8 0a       	popm	pc,r12=0
		}
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
80002a56:	30 2c       	mov	r12,2
}
80002a58:	d8 02       	popm	pc
80002a5a:	00 00       	add	r0,r0
80002a5c:	00 00       	add	r0,r0
80002a5e:	09 4d       	ld.w	sp,--r4
80002a60:	00 00       	add	r0,r0
80002a62:	09 58       	ld.sh	r8,--r4
80002a64:	00 00       	add	r0,r0
80002a66:	0c 1c       	sub	r12,r6
80002a68:	80 00       	ld.sh	r0,r0[0x0]
80002a6a:	3e 9c       	mov	r12,-23

80002a6c <uhi_midi_start_trans_report>:
	UHI_MIDI_CHANGE(dev, false);
	USB_HostState = 0;
}

static void uhi_midi_start_trans_report(usb_add_t add)
{
80002a6c:	d4 01       	pushm	lr
	// Start transfer on interrupt endpoint IN
	uhd_ep_run(add, uhi_midi_dev.ep_in, true, uhi_midi_dev.report,
80002a6e:	48 8b       	lddpc	r11,80002a8c <uhi_midi_start_trans_report+0x20>
80002a70:	48 88       	lddpc	r8,80002a90 <uhi_midi_start_trans_report+0x24>
80002a72:	1a d8       	st.w	--sp,r8
80002a74:	30 08       	mov	r8,0
80002a76:	1a d8       	st.w	--sp,r8
80002a78:	f7 38 00 08 	ld.ub	r8,r11[8]
80002a7c:	76 19       	ld.w	r9,r11[0x4]
80002a7e:	30 1a       	mov	r10,1
80002a80:	f7 3b 00 09 	ld.ub	r11,r11[9]
80002a84:	f0 1f 00 04 	mcall	80002a94 <uhi_midi_start_trans_report+0x28>
80002a88:	2f ed       	sub	sp,-8
	uhi_midi_dev.report_size, 0, uhi_midi_report_reception);
}
80002a8a:	d8 02       	popm	pc
80002a8c:	00 00       	add	r0,r0
80002a8e:	00 a0       	st.w	r0++,r0
80002a90:	80 00       	ld.sh	r0,r0[0x0]
80002a92:	2a 98       	sub	r8,-87
80002a94:	80 00       	ld.sh	r0,r0[0x0]
80002a96:	62 44       	ld.w	r4,r1[0x10]

80002a98 <uhi_midi_report_reception>:
	usb_add_t add,
	usb_ep_t ep,
	uhd_trans_status_t status,
	iram_size_t nb_transfered)

{
80002a98:	d4 01       	pushm	lr
	uint8_t i;
	unsigned short val;
	UNUSED(ep);

	if ((status == UHD_TRANS_NOTRESPONDING) || (status == UHD_TRANS_TIMEOUT)) {
80002a9a:	58 5a       	cp.w	r10,5
80002a9c:	5f 09       	sreq	r9
80002a9e:	58 7a       	cp.w	r10,7
80002aa0:	5f 08       	sreq	r8
80002aa2:	f3 e8 10 08 	or	r8,r9,r8
80002aa6:	c0 30       	breq	80002aac <uhi_midi_report_reception+0x14>
		uhi_midi_start_trans_report(add);
80002aa8:	f0 1f 00 02 	mcall	80002ab0 <uhi_midi_report_reception+0x18>
80002aac:	d8 02       	popm	pc
80002aae:	00 00       	add	r0,r0
80002ab0:	80 00       	ld.sh	r0,r0[0x0]
80002ab2:	2a 6c       	sub	r12,-90

80002ab4 <uhi_midi_uninstall>:
	uhi_midi_start_trans_report(dev->address);
	UHI_MIDI_CHANGE(dev, true);
}

void uhi_midi_uninstall(uhc_device_t* dev)
{
80002ab4:	eb cd 40 80 	pushm	r7,lr
	if (uhi_midi_dev.dev != dev) {
80002ab8:	48 88       	lddpc	r8,80002ad8 <uhi_midi_uninstall+0x24>
80002aba:	70 08       	ld.w	r8,r8[0x0]
80002abc:	18 38       	cp.w	r8,r12
80002abe:	c0 a1       	brne	80002ad2 <uhi_midi_uninstall+0x1e>
		return; // Device not enabled in this interface
	}
	uhi_midi_dev.dev = NULL;
80002ac0:	30 07       	mov	r7,0
80002ac2:	48 69       	lddpc	r9,80002ad8 <uhi_midi_uninstall+0x24>
80002ac4:	93 07       	st.w	r9[0x0],r7
	UHI_MIDI_CHANGE(dev, false);
80002ac6:	0e 9b       	mov	r11,r7
80002ac8:	10 9c       	mov	r12,r8
80002aca:	f0 1f 00 05 	mcall	80002adc <uhi_midi_uninstall+0x28>
	USB_HostState = 0;
80002ace:	48 58       	lddpc	r8,80002ae0 <uhi_midi_uninstall+0x2c>
80002ad0:	b0 87       	st.b	r8[0x0],r7
80002ad2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ad6:	00 00       	add	r0,r0
80002ad8:	00 00       	add	r0,r0
80002ada:	00 a0       	st.w	r0++,r0
80002adc:	80 00       	ld.sh	r0,r0[0x0]
80002ade:	41 f8       	lddsp	r8,sp[0x7c]
80002ae0:	00 00       	add	r0,r0
80002ae2:	09 4d       	ld.w	sp,--r4

80002ae4 <uhi_midi_enable>:
	}
	return UHC_ENUM_UNSUPPORTED; // No interface supported
}

void uhi_midi_enable(uhc_device_t* dev)
{
80002ae4:	eb cd 40 80 	pushm	r7,lr
	if (uhi_midi_dev.dev != dev) {
80002ae8:	48 78       	lddpc	r8,80002b04 <uhi_midi_enable+0x20>
80002aea:	70 07       	ld.w	r7,r8[0x0]
80002aec:	18 37       	cp.w	r7,r12
80002aee:	c0 91       	brne	80002b00 <uhi_midi_enable+0x1c>
		return;  // No interface to enable
	}

	// Init value
	uhi_midi_start_trans_report(dev->address);
80002af0:	ef 3c 00 12 	ld.ub	r12,r7[18]
80002af4:	f0 1f 00 05 	mcall	80002b08 <uhi_midi_enable+0x24>
	UHI_MIDI_CHANGE(dev, true);
80002af8:	30 1b       	mov	r11,1
80002afa:	0e 9c       	mov	r12,r7
80002afc:	f0 1f 00 04 	mcall	80002b0c <uhi_midi_enable+0x28>
80002b00:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b04:	00 00       	add	r0,r0
80002b06:	00 a0       	st.w	r0++,r0
80002b08:	80 00       	ld.sh	r0,r0[0x0]
80002b0a:	2a 6c       	sub	r12,-90
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	41 f8       	lddsp	r8,sp[0x7c]

80002b10 <uhi_midi_install>:
 * \name Functions required by UHC
 * @{
 */

uhc_enum_status_t uhi_midi_install(uhc_device_t* dev)
{
80002b10:	d4 31       	pushm	r0-r7,lr
80002b12:	20 1d       	sub	sp,4
80002b14:	18 97       	mov	r7,r12
	bool b_iface_supported;
	uint16_t conf_desc_lgt;
	usb_iface_desc_t *ptr_iface;
	
	
	if (uhi_midi_dev.dev != NULL) {
80002b16:	4b 28       	lddpc	r8,80002bdc <uhi_midi_install+0xcc>
80002b18:	70 08       	ld.w	r8,r8[0x0]
80002b1a:	58 08       	cp.w	r8,0
80002b1c:	c0 30       	breq	80002b22 <uhi_midi_install+0x12>
80002b1e:	30 5c       	mov	r12,5
80002b20:	c5 c8       	rjmp	80002bd8 <uhi_midi_install+0xc8>
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
80002b22:	78 6b       	ld.w	r11,r12[0x18]
80002b24:	17 a9       	ld.ub	r9,r11[0x2]
80002b26:	17 b8       	ld.ub	r8,r11[0x3]
80002b28:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80002b2c:	5c c8       	swap.bh	r8
80002b2e:	5c 88       	casts.h	r8
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	while(conf_desc_lgt) {
80002b30:	c0 31       	brne	80002b36 <uhi_midi_install+0x26>
80002b32:	30 1c       	mov	r12,1
80002b34:	c5 28       	rjmp	80002bd8 <uhi_midi_install+0xc8>
	
	if (uhi_midi_dev.dev != NULL) {
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
80002b36:	4a a9       	lddpc	r9,80002bdc <uhi_midi_install+0xcc>
80002b38:	f3 31 00 09 	ld.ub	r1,r9[9]
80002b3c:	f3 32 00 0a 	ld.ub	r2,r9[10]
80002b40:	30 0e       	mov	lr,0
	b_iface_supported = false;
	while(conf_desc_lgt) {
		switch (ptr_iface->bDescriptorType) {
80002b42:	30 4a       	mov	r10,4

		case USB_DT_INTERFACE:
			USB_HostState = 0;
80002b44:	4a 74       	lddpc	r4,80002be0 <uhi_midi_install+0xd0>
80002b46:	30 06       	mov	r6,0
			if ((ptr_iface->bInterfaceClass == AUDIO_CLASS) && (ptr_iface->bInterfaceProtocol == 0) ) {
80002b48:	30 13       	mov	r3,1
				default:
					break;
			}
			uhi_midi_dev.dev = dev;
			// All endpoints of all interfaces supported allocated
			return UHC_ENUM_SUCCESS;
80002b4a:	1c 95       	mov	r5,lr
		case USB_DT_INTERFACE:
			USB_HostState = 0;
			if ((ptr_iface->bInterfaceClass == AUDIO_CLASS) && (ptr_iface->bInterfaceProtocol == 0) ) {
				// USB MIDI interface found
				// Start allocation endpoint(s)
				USB_HostState = 11;
80002b4c:	30 b0       	mov	r0,11
80002b4e:	50 0e       	stdsp	sp[0x0],lr
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	while(conf_desc_lgt) {
		switch (ptr_iface->bDescriptorType) {
80002b50:	30 5c       	mov	r12,5
80002b52:	17 99       	ld.ub	r9,r11[0x1]
80002b54:	f4 09 18 00 	cp.b	r9,r10
80002b58:	c0 50       	breq	80002b62 <uhi_midi_install+0x52>
80002b5a:	f8 09 18 00 	cp.b	r9,r12
80002b5e:	c3 11       	brne	80002bc0 <uhi_midi_install+0xb0>
80002b60:	c0 f8       	rjmp	80002b7e <uhi_midi_install+0x6e>

		case USB_DT_INTERFACE:
			USB_HostState = 0;
80002b62:	a8 86       	st.b	r4[0x0],r6
			if ((ptr_iface->bInterfaceClass == AUDIO_CLASS) && (ptr_iface->bInterfaceProtocol == 0) ) {
80002b64:	17 d9       	ld.ub	r9,r11[0x5]
80002b66:	e6 09 18 00 	cp.b	r9,r3
80002b6a:	c2 a1       	brne	80002bbe <uhi_midi_install+0xae>
80002b6c:	17 f9       	ld.ub	r9,r11[0x7]
80002b6e:	ec 09 18 00 	cp.b	r9,r6
80002b72:	c2 61       	brne	80002bbe <uhi_midi_install+0xae>
				// USB MIDI interface found
				// Start allocation endpoint(s)
				USB_HostState = 11;
80002b74:	a8 80       	st.b	r4[0x0],r0
80002b76:	0a 92       	mov	r2,r5
80002b78:	40 01       	lddsp	r1,sp[0x0]
80002b7a:	30 1e       	mov	lr,1
	while(conf_desc_lgt) {
		switch (ptr_iface->bDescriptorType) {

		case USB_DT_INTERFACE:
			USB_HostState = 0;
			if ((ptr_iface->bInterfaceClass == AUDIO_CLASS) && (ptr_iface->bInterfaceProtocol == 0) ) {
80002b7c:	c2 28       	rjmp	80002bc0 <uhi_midi_install+0xb0>
			}
			break;

		case USB_DT_ENDPOINT:
			//  Allocation of the endpoint
			if (!b_iface_supported) {
80002b7e:	58 0e       	cp.w	lr,0
80002b80:	c2 00       	breq	80002bc0 <uhi_midi_install+0xb0>
80002b82:	49 78       	lddpc	r8,80002bdc <uhi_midi_install+0xcc>
80002b84:	f1 61 00 09 	st.b	r8[9],r1
80002b88:	f1 62 00 0a 	st.b	r8[10],r2
				break;
			}
			if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
80002b8c:	16 96       	mov	r6,r11
80002b8e:	ef 3c 00 12 	ld.ub	r12,r7[18]
80002b92:	f0 1f 00 15 	mcall	80002be4 <uhi_midi_install+0xd4>
80002b96:	c0 31       	brne	80002b9c <uhi_midi_install+0x8c>
80002b98:	30 4c       	mov	r12,4
80002b9a:	c1 f8       	rjmp	80002bd8 <uhi_midi_install+0xc8>
				return UHC_ENUM_HARDWARE_LIMIT; // Endpoint allocation fail
			}
			switch(((usb_ep_desc_t*)ptr_iface)->bmAttributes & USB_EP_TYPE_MASK)
80002b9c:	0d b8       	ld.ub	r8,r6[0x3]
80002b9e:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002ba2:	58 28       	cp.w	r8,2
80002ba4:	c0 91       	brne	80002bb6 <uhi_midi_install+0xa6>
			{
				case USB_EP_TYPE_BULK:
					if(((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN)
80002ba6:	0d a8       	ld.ub	r8,r6[0x2]
80002ba8:	30 09       	mov	r9,0
80002baa:	f2 08 18 00 	cp.b	r8,r9
80002bae:	c0 44       	brge	80002bb6 <uhi_midi_install+0xa6>
						uhi_midi_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
80002bb0:	48 b9       	lddpc	r9,80002bdc <uhi_midi_install+0xcc>
80002bb2:	f3 68 00 09 	st.b	r9[9],r8
						uhi_midi_dev.ep_out = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
					break;
				default:
					break;
			}
			uhi_midi_dev.dev = dev;
80002bb6:	48 a8       	lddpc	r8,80002bdc <uhi_midi_install+0xcc>
80002bb8:	91 07       	st.w	r8[0x0],r7
80002bba:	30 0c       	mov	r12,0
			// All endpoints of all interfaces supported allocated
			return UHC_ENUM_SUCCESS;
80002bbc:	c0 e8       	rjmp	80002bd8 <uhi_midi_install+0xc8>
80002bbe:	0a 9e       	mov	lr,r5
		default:
			// Ignore descriptor
			break;
		}
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
80002bc0:	17 89       	ld.ub	r9,r11[0x0]
80002bc2:	12 18       	sub	r8,r9
80002bc4:	5c 88       	casts.h	r8
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	while(conf_desc_lgt) {
80002bc6:	c0 30       	breq	80002bcc <uhi_midi_install+0xbc>
			// Ignore descriptor
			break;
		}
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
80002bc8:	12 0b       	add	r11,r9
80002bca:	cc 4b       	rjmp	80002b52 <uhi_midi_install+0x42>
80002bcc:	48 48       	lddpc	r8,80002bdc <uhi_midi_install+0xcc>
80002bce:	f1 61 00 09 	st.b	r8[9],r1
80002bd2:	f1 62 00 0a 	st.b	r8[10],r2
80002bd6:	30 1c       	mov	r12,1
	}
	return UHC_ENUM_UNSUPPORTED; // No interface supported
}
80002bd8:	2f fd       	sub	sp,-4
80002bda:	d8 32       	popm	r0-r7,pc
80002bdc:	00 00       	add	r0,r0
80002bde:	00 a0       	st.w	r0++,r0
80002be0:	00 00       	add	r0,r0
80002be2:	09 4d       	ld.w	sp,--r4
80002be4:	80 00       	ld.sh	r0,r0[0x0]
80002be6:	66 84       	ld.w	r4,r3[0x20]

80002be8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
80002be8:	eb cd 40 80 	pushm	r7,lr
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return *(USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint]++);
80002bec:	fe f7 03 fc 	ld.w	r7,pc[1020]
80002bf0:	6e 0a       	ld.w	r10,r7[0x0]
80002bf2:	fe f8 03 fa 	ld.w	r8,pc[1018]
80002bf6:	f0 0a 03 29 	ld.w	r9,r8[r10<<0x2]
80002bfa:	13 3b       	ld.ub	r11,r9++
80002bfc:	f0 0a 09 29 	st.w	r8[r10<<0x2],r9
	#if defined(ARCH_BIG_ENDIAN)
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
80002c00:	fe f9 03 f0 	ld.w	r9,pc[1008]
80002c04:	b2 8b       	st.b	r9[0x0],r11
80002c06:	6e 0b       	ld.w	r11,r7[0x0]
80002c08:	f0 0b 03 2a 	ld.w	r10,r8[r11<<0x2]
80002c0c:	15 3c       	ld.ub	r12,r10++
80002c0e:	f0 0b 09 2a 	st.w	r8[r11<<0x2],r10
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
80002c12:	b2 9c       	st.b	r9[0x1],r12
			 *  \return Next two bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_Read_16_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_Read_16_LE(void)
			{
				uint16_t Byte0 = *(USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint]++);
80002c14:	6e 0b       	ld.w	r11,r7[0x0]
80002c16:	f0 0b 03 2a 	ld.w	r10,r8[r11<<0x2]
80002c1a:	15 3c       	ld.ub	r12,r10++
80002c1c:	f0 0b 09 2a 	st.w	r8[r11<<0x2],r10
				uint16_t Byte1 = *(USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint]++);
80002c20:	6e 0b       	ld.w	r11,r7[0x0]
80002c22:	f0 0b 03 2a 	ld.w	r10,r8[r11<<0x2]
80002c26:	15 3e       	ld.ub	lr,r10++
80002c28:	f0 0b 09 2a 	st.w	r8[r11<<0x2],r10
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
80002c2c:	b2 ae       	st.b	r9[0x2],lr
80002c2e:	b2 bc       	st.b	r9[0x3],r12
			 *  \return Next two bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_Read_16_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_Read_16_LE(void)
			{
				uint16_t Byte0 = *(USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint]++);
80002c30:	6e 0b       	ld.w	r11,r7[0x0]
80002c32:	f0 0b 03 2a 	ld.w	r10,r8[r11<<0x2]
80002c36:	15 3c       	ld.ub	r12,r10++
80002c38:	f0 0b 09 2a 	st.w	r8[r11<<0x2],r10
				uint16_t Byte1 = *(USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint]++);
80002c3c:	6e 0b       	ld.w	r11,r7[0x0]
80002c3e:	f0 0b 03 2a 	ld.w	r10,r8[r11<<0x2]
80002c42:	15 3e       	ld.ub	lr,r10++
80002c44:	f0 0b 09 2a 	st.w	r8[r11<<0x2],r10
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
80002c48:	b2 ce       	st.b	r9[0x4],lr
80002c4a:	b2 dc       	st.b	r9[0x5],r12
			 *  \return Next two bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_Read_16_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_Read_16_LE(void)
			{
				uint16_t Byte0 = *(USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint]++);
80002c4c:	6e 0b       	ld.w	r11,r7[0x0]
80002c4e:	f0 0b 03 2a 	ld.w	r10,r8[r11<<0x2]
80002c52:	15 3c       	ld.ub	r12,r10++
80002c54:	f0 0b 09 2a 	st.w	r8[r11<<0x2],r10
				uint16_t Byte1 = *(USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint]++);
80002c58:	6e 0b       	ld.w	r11,r7[0x0]
80002c5a:	f0 0b 03 2a 	ld.w	r10,r8[r11<<0x2]
80002c5e:	15 3e       	ld.ub	lr,r10++
80002c60:	f0 0b 09 2a 	st.w	r8[r11<<0x2],r10
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
80002c64:	b2 ee       	st.b	r9[0x6],lr
80002c66:	b2 fc       	st.b	r9[0x7],r12

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
80002c68:	f0 1f 00 e3 	mcall	80002ff4 <USB_Device_ProcessControlRequest+0x40c>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return (&AVR32_USBB.UESTA0)[USB_Endpoint_SelectedEndpoint].rxstpi;
80002c6c:	6e 08       	ld.w	r8,r7[0x0]
80002c6e:	a3 68       	lsl	r8,0x2
80002c70:	e0 38 fe d0 	sub	r8,130768
80002c74:	70 08       	ld.w	r8,r8[0x0]

	if (Endpoint_IsSETUPReceived())
80002c76:	e2 18 00 04 	andl	r8,0x4,COH
80002c7a:	e0 80 01 90 	breq	80002f9a <USB_Device_ProcessControlRequest+0x3b2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
80002c7e:	fe f8 03 72 	ld.w	r8,pc[882]
80002c82:	11 8a       	ld.ub	r10,r8[0x0]

		switch (USB_ControlRequest.bRequest)
80002c84:	11 98       	ld.ub	r8,r8[0x1]
80002c86:	30 39       	mov	r9,3
80002c88:	f2 08 18 00 	cp.b	r8,r9
80002c8c:	e0 80 00 86 	breq	80002d98 <USB_Device_ProcessControlRequest+0x1b0>
80002c90:	e0 8b 00 0a 	brhi	80002ca4 <USB_Device_ProcessControlRequest+0xbc>
80002c94:	58 08       	cp.w	r8,0
80002c96:	c1 20       	breq	80002cba <USB_Device_ProcessControlRequest+0xd2>
80002c98:	30 19       	mov	r9,1
80002c9a:	f2 08 18 00 	cp.b	r8,r9
80002c9e:	e0 81 01 7e 	brne	80002f9a <USB_Device_ProcessControlRequest+0x3b2>
80002ca2:	c7 b8       	rjmp	80002d98 <USB_Device_ProcessControlRequest+0x1b0>
80002ca4:	30 59       	mov	r9,5
80002ca6:	f2 08 18 00 	cp.b	r8,r9
80002caa:	e0 80 01 07 	breq	80002eb8 <USB_Device_ProcessControlRequest+0x2d0>
80002cae:	30 89       	mov	r9,8
80002cb0:	f2 08 18 00 	cp.b	r8,r9
80002cb4:	e0 81 01 73 	brne	80002f9a <USB_Device_ProcessControlRequest+0x3b2>
80002cb8:	c3 99       	rjmp	80002f2a <USB_Device_ProcessControlRequest+0x342>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
80002cba:	38 08       	mov	r8,-128
80002cbc:	f0 0a 18 00 	cp.b	r10,r8
80002cc0:	5f 09       	sreq	r9
80002cc2:	38 28       	mov	r8,-126
80002cc4:	f0 0a 18 00 	cp.b	r10,r8
80002cc8:	5f 08       	sreq	r8
80002cca:	f3 e8 10 08 	or	r8,r9,r8
80002cce:	e0 80 01 66 	breq	80002f9a <USB_Device_ProcessControlRequest+0x3b2>

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;

	switch (USB_ControlRequest.bmRequestType)
80002cd2:	38 08       	mov	r8,-128
80002cd4:	f0 0a 18 00 	cp.b	r10,r8
80002cd8:	c0 70       	breq	80002ce6 <USB_Device_ProcessControlRequest+0xfe>
80002cda:	38 28       	mov	r8,-126
80002cdc:	f0 0a 18 00 	cp.b	r10,r8
80002ce0:	e0 81 01 5d 	brne	80002f9a <USB_Device_ProcessControlRequest+0x3b2>
80002ce4:	c0 d8       	rjmp	80002cfe <USB_Device_ProcessControlRequest+0x116>
80002ce6:	fe f8 03 12 	ld.w	r8,pc[786]
80002cea:	11 87       	ld.ub	r7,r8[0x0]
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
80002cec:	fe f8 03 10 	ld.w	r8,pc[784]
80002cf0:	11 89       	ld.ub	r9,r8[0x0]
80002cf2:	30 08       	mov	r8,0
80002cf4:	f0 09 18 00 	cp.b	r9,r8
80002cf8:	c1 40       	breq	80002d20 <USB_Device_ProcessControlRequest+0x138>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
80002cfa:	a1 b7       	sbr	r7,0x1
80002cfc:	c1 28       	rjmp	80002d20 <USB_Device_ProcessControlRequest+0x138>
			 *  \param[in] Address  Endpoint address to select.
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				USB_Endpoint_SelectedEndpoint = (Address & ENDPOINT_EPNUM_MASK);
80002cfe:	fe f8 02 f2 	ld.w	r8,pc[754]
80002d02:	11 d9       	ld.ub	r9,r8[0x5]
80002d04:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80002d08:	fe f8 02 e0 	ld.w	r8,pc[736]
80002d0c:	91 09       	st.w	r8[0x0],r9
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return (&AVR32_USBB.UECON0)[USB_Endpoint_SelectedEndpoint].stallrq;
80002d0e:	70 09       	ld.w	r9,r8[0x0]
80002d10:	a3 69       	lsl	r9,0x2
80002d12:	e0 39 fe 40 	sub	r9,130624
80002d16:	72 07       	ld.w	r7,r9[0x0]
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
80002d18:	ef d7 c2 61 	bfextu	r7,r7,0x13,0x1
			 *  \param[in] Address  Endpoint address to select.
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				USB_Endpoint_SelectedEndpoint = (Address & ENDPOINT_EPNUM_MASK);
80002d1c:	30 09       	mov	r9,0
80002d1e:	91 09       	st.w	r8[0x0],r9
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				(&AVR32_USBB.UESTA0CLR)[USB_Endpoint_SelectedEndpoint].rxstpic = true;
80002d20:	fe f8 02 c8 	ld.w	r8,pc[712]
80002d24:	70 09       	ld.w	r9,r8[0x0]
80002d26:	a3 69       	lsl	r9,0x2
80002d28:	e0 39 fe a0 	sub	r9,130720
80002d2c:	72 0b       	ld.w	r11,r9[0x0]
80002d2e:	30 1a       	mov	r10,1
80002d30:	f7 da d0 41 	bfins	r11,r10,0x2,0x1
80002d34:	93 0b       	st.w	r9[0x0],r11
				USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint] = &AVR32_USBB_SLAVE[USB_Endpoint_SelectedEndpoint * ENDPOINT_HSB_ADDRESS_SPACE_SIZE];
80002d36:	70 0b       	ld.w	r11,r8[0x0]
80002d38:	70 0e       	ld.w	lr,r8[0x0]
80002d3a:	fe f9 02 b2 	ld.w	r9,pc[690]
80002d3e:	b1 6e       	lsl	lr,0x10
80002d40:	fc 1c e0 00 	movh	r12,0xe000
80002d44:	18 0e       	add	lr,r12
80002d46:	f2 0b 09 2e 	st.w	r9[r11<<0x2],lr
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				*(USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint]++) = (Data & 0xFF);
80002d4a:	70 0e       	ld.w	lr,r8[0x0]
80002d4c:	f2 0e 03 2b 	ld.w	r11,r9[lr<<0x2]
80002d50:	16 c7       	st.b	r11++,r7
80002d52:	f2 0e 09 2b 	st.w	r9[lr<<0x2],r11
				*(USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint]++) = (Data >> 8);
80002d56:	70 0e       	ld.w	lr,r8[0x0]
80002d58:	f2 0e 03 2b 	ld.w	r11,r9[lr<<0x2]
80002d5c:	30 07       	mov	r7,0
80002d5e:	16 c7       	st.b	r11++,r7
80002d60:	f2 0e 09 2b 	st.w	r9[lr<<0x2],r11
			 *  \ingroup Group_EndpointPacketManagement_UC3
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				(&AVR32_USBB.UESTA0CLR)[USB_Endpoint_SelectedEndpoint].txinic   = true;
80002d64:	70 0b       	ld.w	r11,r8[0x0]
80002d66:	a3 6b       	lsl	r11,0x2
80002d68:	e0 3b fe a0 	sub	r11,130720
80002d6c:	76 0e       	ld.w	lr,r11[0x0]
80002d6e:	fd da d0 01 	bfins	lr,r10,0x0,0x1
80002d72:	97 0e       	st.w	r11[0x0],lr
				(&AVR32_USBB.UECON0CLR)[USB_Endpoint_SelectedEndpoint].fifoconc = true;
80002d74:	70 0b       	ld.w	r11,r8[0x0]
80002d76:	a3 6b       	lsl	r11,0x2
80002d78:	e0 3b fd e0 	sub	r11,130528
80002d7c:	76 0e       	ld.w	lr,r11[0x0]
80002d7e:	fd da d1 c1 	bfins	lr,r10,0xe,0x1
80002d82:	97 0e       	st.w	r11[0x0],lr
				USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint] = &AVR32_USBB_SLAVE[USB_Endpoint_SelectedEndpoint * ENDPOINT_HSB_ADDRESS_SPACE_SIZE];
80002d84:	70 0a       	ld.w	r10,r8[0x0]
80002d86:	70 08       	ld.w	r8,r8[0x0]
80002d88:	b1 68       	lsl	r8,0x10
80002d8a:	f0 0c 00 0c 	add	r12,r8,r12
80002d8e:	f2 0a 09 2c 	st.w	r9[r10<<0x2],r12
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
80002d92:	f0 1f 00 9c 	mcall	80003000 <USB_Device_ProcessControlRequest+0x418>
80002d96:	c0 29       	rjmp	80002f9a <USB_Device_ProcessControlRequest+0x3b2>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
80002d98:	30 09       	mov	r9,0
80002d9a:	f2 0a 18 00 	cp.b	r10,r9
80002d9e:	5f 0c       	sreq	r12
80002da0:	30 2b       	mov	r11,2
80002da2:	f6 0a 18 00 	cp.b	r10,r11
80002da6:	5f 0b       	sreq	r11
80002da8:	f9 eb 10 0b 	or	r11,r12,r11
80002dac:	f2 0b 18 00 	cp.b	r11,r9
80002db0:	e0 80 00 f5 	breq	80002f9a <USB_Device_ProcessControlRequest+0x3b2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
80002db4:	f5 da c0 05 	bfextu	r10,r10,0x0,0x5
80002db8:	c0 50       	breq	80002dc2 <USB_Device_ProcessControlRequest+0x1da>
80002dba:	58 2a       	cp.w	r10,2
80002dbc:	e0 81 00 ef 	brne	80002f9a <USB_Device_ProcessControlRequest+0x3b2>
80002dc0:	c1 18       	rjmp	80002de2 <USB_Device_ProcessControlRequest+0x1fa>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
80002dc2:	fe f9 02 2e 	ld.w	r9,pc[558]
80002dc6:	13 ba       	ld.ub	r10,r9[0x3]
80002dc8:	30 19       	mov	r9,1
80002dca:	f2 0a 18 00 	cp.b	r10,r9
80002dce:	e0 81 00 e6 	brne	80002f9a <USB_Device_ProcessControlRequest+0x3b2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
80002dd2:	30 39       	mov	r9,3
80002dd4:	f2 08 18 00 	cp.b	r8,r9
80002dd8:	5f 09       	sreq	r9
80002dda:	fe f8 02 22 	ld.w	r8,pc[546]
80002dde:	b0 89       	st.b	r8[0x0],r9
80002de0:	c5 48       	rjmp	80002e88 <USB_Device_ProcessControlRequest+0x2a0>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
80002de2:	fe f8 02 0e 	ld.w	r8,pc[526]
80002de6:	11 b9       	ld.ub	r9,r8[0x3]
80002de8:	30 08       	mov	r8,0
80002dea:	f0 09 18 00 	cp.b	r9,r8
80002dee:	c4 d1       	brne	80002e88 <USB_Device_ProcessControlRequest+0x2a0>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
80002df0:	fe f8 02 00 	ld.w	r8,pc[512]
80002df4:	11 d8       	ld.ub	r8,r8[0x5]
80002df6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4

				if (EndpointIndex == ENDPOINT_CONTROLEP)
80002dfa:	e0 80 00 d0 	breq	80002f9a <USB_Device_ProcessControlRequest+0x3b2>
			 *  \param[in] Address  Endpoint address to select.
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				USB_Endpoint_SelectedEndpoint = (Address & ENDPOINT_EPNUM_MASK);
80002dfe:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002e02:	4f a9       	lddpc	r9,80002fe8 <USB_Device_ProcessControlRequest+0x400>
80002e04:	93 08       	st.w	r9[0x0],r8
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((AVR32_USBB.uerst & (AVR32_USBB_EPEN0_MASK << USB_Endpoint_SelectedEndpoint)) ? true : false);
80002e06:	fe 6a 00 00 	mov	r10,-131072
80002e0a:	74 7a       	ld.w	r10,r10[0x1c]
80002e0c:	72 09       	ld.w	r9,r9[0x0]
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
80002e0e:	30 1b       	mov	r11,1
80002e10:	f6 09 09 49 	lsl	r9,r11,r9
80002e14:	14 69       	and	r9,r10
80002e16:	c3 90       	breq	80002e88 <USB_Device_ProcessControlRequest+0x2a0>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
80002e18:	4f 69       	lddpc	r9,80002ff0 <USB_Device_ProcessControlRequest+0x408>
80002e1a:	13 9a       	ld.ub	r10,r9[0x1]
80002e1c:	30 39       	mov	r9,3
80002e1e:	f2 0a 18 00 	cp.b	r10,r9
80002e22:	c0 b1       	brne	80002e38 <USB_Device_ProcessControlRequest+0x250>
			 *  \ingroup Group_EndpointPacketManagement_UC3
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				(&AVR32_USBB.UECON0SET)[USB_Endpoint_SelectedEndpoint].stallrqs = true;
80002e24:	4f 18       	lddpc	r8,80002fe8 <USB_Device_ProcessControlRequest+0x400>
80002e26:	70 08       	ld.w	r8,r8[0x0]
80002e28:	a3 68       	lsl	r8,0x2
80002e2a:	e0 38 fe 10 	sub	r8,130576
80002e2e:	70 09       	ld.w	r9,r8[0x0]
80002e30:	f3 db d2 61 	bfins	r9,r11,0x13,0x1
80002e34:	91 09       	st.w	r8[0x0],r9
80002e36:	c2 98       	rjmp	80002e88 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \ingroup Group_EndpointPacketManagement_UC3
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				(&AVR32_USBB.UECON0CLR)[USB_Endpoint_SelectedEndpoint].stallrqc = true;
80002e38:	4e cb       	lddpc	r11,80002fe8 <USB_Device_ProcessControlRequest+0x400>
80002e3a:	76 09       	ld.w	r9,r11[0x0]
80002e3c:	a3 69       	lsl	r9,0x2
80002e3e:	e0 39 fd e0 	sub	r9,130528
80002e42:	72 0c       	ld.w	r12,r9[0x0]
80002e44:	30 1a       	mov	r10,1
80002e46:	f9 da d2 61 	bfins	r12,r10,0x13,0x1
80002e4a:	93 0c       	st.w	r9[0x0],r12
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				uint32_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

				AVR32_USBB.uerst |=  (AVR32_USBB_EPRST0_MASK << EndpointNumber);
80002e4c:	fe 69 00 00 	mov	r9,-131072
80002e50:	72 7e       	ld.w	lr,r9[0x1c]
80002e52:	e0 7c 00 00 	mov	r12,65536
80002e56:	f8 08 09 4c 	lsl	r12,r12,r8
80002e5a:	f9 ee 10 0e 	or	lr,r12,lr
80002e5e:	93 7e       	st.w	r9[0x1c],lr
				AVR32_USBB.uerst &= ~(AVR32_USBB_EPRST0_MASK << EndpointNumber);
80002e60:	72 7e       	ld.w	lr,r9[0x1c]
80002e62:	5c dc       	com	r12
80002e64:	1c 6c       	and	r12,lr
80002e66:	93 7c       	st.w	r9[0x1c],r12
				USB_Endpoint_FIFOPos[EndpointNumber] = &AVR32_USBB_SLAVE[EndpointNumber * ENDPOINT_HSB_ADDRESS_SPACE_SIZE];
80002e68:	f0 0c 15 10 	lsl	r12,r8,0x10
80002e6c:	fc 19 e0 00 	movh	r9,0xe000
80002e70:	12 0c       	add	r12,r9
80002e72:	4d f9       	lddpc	r9,80002fec <USB_Device_ProcessControlRequest+0x404>
80002e74:	f2 08 09 2c 	st.w	r9[r8<<0x2],r12

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				(&AVR32_USBB.UECON0SET)[USB_Endpoint_SelectedEndpoint].rstdts = true;
80002e78:	76 08       	ld.w	r8,r11[0x0]
80002e7a:	a3 68       	lsl	r8,0x2
80002e7c:	e0 38 fe 10 	sub	r8,130576
80002e80:	70 09       	ld.w	r9,r8[0x0]
80002e82:	f3 da d2 41 	bfins	r9,r10,0x12,0x1
80002e86:	91 09       	st.w	r8[0x0],r9
			 *  \param[in] Address  Endpoint address to select.
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				USB_Endpoint_SelectedEndpoint = (Address & ENDPOINT_EPNUM_MASK);
80002e88:	4d 88       	lddpc	r8,80002fe8 <USB_Device_ProcessControlRequest+0x400>
80002e8a:	30 09       	mov	r9,0
80002e8c:	91 09       	st.w	r8[0x0],r9
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				(&AVR32_USBB.UESTA0CLR)[USB_Endpoint_SelectedEndpoint].rxstpic = true;
80002e8e:	70 09       	ld.w	r9,r8[0x0]
80002e90:	a3 69       	lsl	r9,0x2
80002e92:	e0 39 fe a0 	sub	r9,130720
80002e96:	72 0a       	ld.w	r10,r9[0x0]
80002e98:	30 1b       	mov	r11,1
80002e9a:	f5 db d0 41 	bfins	r10,r11,0x2,0x1
80002e9e:	93 0a       	st.w	r9[0x0],r10
				USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint] = &AVR32_USBB_SLAVE[USB_Endpoint_SelectedEndpoint * ENDPOINT_HSB_ADDRESS_SPACE_SIZE];
80002ea0:	70 09       	ld.w	r9,r8[0x0]
80002ea2:	70 0a       	ld.w	r10,r8[0x0]
80002ea4:	b1 6a       	lsl	r10,0x10
80002ea6:	fc 18 e0 00 	movh	r8,0xe000
80002eaa:	10 0a       	add	r10,r8
80002eac:	4d 08       	lddpc	r8,80002fec <USB_Device_ProcessControlRequest+0x404>
80002eae:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
80002eb2:	f0 1f 00 54 	mcall	80003000 <USB_Device_ProcessControlRequest+0x418>
80002eb6:	c7 28       	rjmp	80002f9a <USB_Device_ProcessControlRequest+0x3b2>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
80002eb8:	58 0a       	cp.w	r10,0
80002eba:	c7 01       	brne	80002f9a <USB_Device_ProcessControlRequest+0x3b2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
80002ebc:	4c d8       	lddpc	r8,80002ff0 <USB_Device_ProcessControlRequest+0x408>
80002ebe:	11 b7       	ld.ub	r7,r8[0x3]
80002ec0:	ef d7 c0 07 	bfextu	r7,r7,0x0,0x7
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				AVR32_USBB.UDCON.uadd  = Address;
80002ec4:	fe 68 00 00 	mov	r8,-131072
80002ec8:	70 09       	ld.w	r9,r8[0x0]
80002eca:	f3 d7 d0 07 	bfins	r9,r7,0x0,0x7
80002ece:	91 09       	st.w	r8[0x0],r9
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				(&AVR32_USBB.UESTA0CLR)[USB_Endpoint_SelectedEndpoint].rxstpic = true;
80002ed0:	4c 68       	lddpc	r8,80002fe8 <USB_Device_ProcessControlRequest+0x400>
80002ed2:	70 09       	ld.w	r9,r8[0x0]
80002ed4:	a3 69       	lsl	r9,0x2
80002ed6:	e0 39 fe a0 	sub	r9,130720
80002eda:	72 0a       	ld.w	r10,r9[0x0]
80002edc:	30 1b       	mov	r11,1
80002ede:	f5 db d0 41 	bfins	r10,r11,0x2,0x1
80002ee2:	93 0a       	st.w	r9[0x0],r10
				USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint] = &AVR32_USBB_SLAVE[USB_Endpoint_SelectedEndpoint * ENDPOINT_HSB_ADDRESS_SPACE_SIZE];
80002ee4:	70 09       	ld.w	r9,r8[0x0]
80002ee6:	70 0a       	ld.w	r10,r8[0x0]
80002ee8:	b1 6a       	lsl	r10,0x10
80002eea:	fc 18 e0 00 	movh	r8,0xe000
80002eee:	10 0a       	add	r10,r8
80002ef0:	4b f8       	lddpc	r8,80002fec <USB_Device_ProcessControlRequest+0x404>
80002ef2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
80002ef6:	f0 1f 00 43 	mcall	80003000 <USB_Device_ProcessControlRequest+0x418>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return (&AVR32_USBB.UESTA0)[USB_Endpoint_SelectedEndpoint].txini;
80002efa:	4b c9       	lddpc	r9,80002fe8 <USB_Device_ProcessControlRequest+0x400>
80002efc:	72 08       	ld.w	r8,r9[0x0]
80002efe:	a3 68       	lsl	r8,0x2
80002f00:	e0 38 fe d0 	sub	r8,130768
80002f04:	70 08       	ld.w	r8,r8[0x0]

	while (!(Endpoint_IsINReady()));
80002f06:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002f0a:	cf 90       	breq	80002efc <USB_Device_ProcessControlRequest+0x314>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				AVR32_USBB.UDCON.adden = true;
80002f0c:	fe 68 00 00 	mov	r8,-131072
80002f10:	70 09       	ld.w	r9,r8[0x0]
80002f12:	30 1a       	mov	r10,1
80002f14:	f3 da d0 e1 	bfins	r9,r10,0x7,0x1
80002f18:	91 09       	st.w	r8[0x0],r9

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
80002f1a:	58 07       	cp.w	r7,0
80002f1c:	f9 b7 01 03 	movne	r7,3
80002f20:	f9 b7 00 02 	moveq	r7,2
80002f24:	4b 88       	lddpc	r8,80003004 <USB_Device_ProcessControlRequest+0x41c>
80002f26:	b0 87       	st.b	r8[0x0],r7
80002f28:	c3 98       	rjmp	80002f9a <USB_Device_ProcessControlRequest+0x3b2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
80002f2a:	38 08       	mov	r8,-128
80002f2c:	f0 0a 18 00 	cp.b	r10,r8
80002f30:	c3 51       	brne	80002f9a <USB_Device_ProcessControlRequest+0x3b2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				(&AVR32_USBB.UESTA0CLR)[USB_Endpoint_SelectedEndpoint].rxstpic = true;
80002f32:	4a e8       	lddpc	r8,80002fe8 <USB_Device_ProcessControlRequest+0x400>
80002f34:	70 09       	ld.w	r9,r8[0x0]
80002f36:	a3 69       	lsl	r9,0x2
80002f38:	e0 39 fe a0 	sub	r9,130720
80002f3c:	72 0b       	ld.w	r11,r9[0x0]
80002f3e:	30 1a       	mov	r10,1
80002f40:	f7 da d0 41 	bfins	r11,r10,0x2,0x1
80002f44:	93 0b       	st.w	r9[0x0],r11
				USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint] = &AVR32_USBB_SLAVE[USB_Endpoint_SelectedEndpoint * ENDPOINT_HSB_ADDRESS_SPACE_SIZE];
80002f46:	70 0b       	ld.w	r11,r8[0x0]
80002f48:	70 0e       	ld.w	lr,r8[0x0]
80002f4a:	4a 99       	lddpc	r9,80002fec <USB_Device_ProcessControlRequest+0x404>
80002f4c:	b1 6e       	lsl	lr,0x10
80002f4e:	fc 1c e0 00 	movh	r12,0xe000
80002f52:	18 0e       	add	lr,r12
80002f54:	f2 0b 09 2e 	st.w	r9[r11<<0x2],lr

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
80002f58:	4a cb       	lddpc	r11,80003008 <USB_Device_ProcessControlRequest+0x420>
80002f5a:	17 87       	ld.ub	r7,r11[0x0]
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				*(USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint]++) = Data;
80002f5c:	70 0e       	ld.w	lr,r8[0x0]
80002f5e:	f2 0e 03 2b 	ld.w	r11,r9[lr<<0x2]
80002f62:	16 c7       	st.b	r11++,r7
80002f64:	f2 0e 09 2b 	st.w	r9[lr<<0x2],r11
			 *  \ingroup Group_EndpointPacketManagement_UC3
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				(&AVR32_USBB.UESTA0CLR)[USB_Endpoint_SelectedEndpoint].txinic   = true;
80002f68:	70 0b       	ld.w	r11,r8[0x0]
80002f6a:	a3 6b       	lsl	r11,0x2
80002f6c:	e0 3b fe a0 	sub	r11,130720
80002f70:	76 0e       	ld.w	lr,r11[0x0]
80002f72:	fd da d0 01 	bfins	lr,r10,0x0,0x1
80002f76:	97 0e       	st.w	r11[0x0],lr
				(&AVR32_USBB.UECON0CLR)[USB_Endpoint_SelectedEndpoint].fifoconc = true;
80002f78:	70 0b       	ld.w	r11,r8[0x0]
80002f7a:	a3 6b       	lsl	r11,0x2
80002f7c:	e0 3b fd e0 	sub	r11,130528
80002f80:	76 0e       	ld.w	lr,r11[0x0]
80002f82:	fd da d1 c1 	bfins	lr,r10,0xe,0x1
80002f86:	97 0e       	st.w	r11[0x0],lr
				USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint] = &AVR32_USBB_SLAVE[USB_Endpoint_SelectedEndpoint * ENDPOINT_HSB_ADDRESS_SPACE_SIZE];
80002f88:	70 0a       	ld.w	r10,r8[0x0]
80002f8a:	70 08       	ld.w	r8,r8[0x0]
80002f8c:	b1 68       	lsl	r8,0x10
80002f8e:	f0 0c 00 0c 	add	r12,r8,r12
80002f92:	f2 0a 09 2c 	st.w	r9[r10<<0x2],r12
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
80002f96:	f0 1f 00 1b 	mcall	80003000 <USB_Device_ProcessControlRequest+0x418>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return (&AVR32_USBB.UESTA0)[USB_Endpoint_SelectedEndpoint].rxstpi;
80002f9a:	49 48       	lddpc	r8,80002fe8 <USB_Device_ProcessControlRequest+0x400>
80002f9c:	70 08       	ld.w	r8,r8[0x0]
80002f9e:	a3 68       	lsl	r8,0x2
80002fa0:	e0 38 fe d0 	sub	r8,130768
80002fa4:	70 08       	ld.w	r8,r8[0x0]
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
80002fa6:	e2 18 00 04 	andl	r8,0x4,COH
80002faa:	c1 c0       	breq	80002fe2 <USB_Device_ProcessControlRequest+0x3fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				(&AVR32_USBB.UESTA0CLR)[USB_Endpoint_SelectedEndpoint].rxstpic = true;
80002fac:	48 f8       	lddpc	r8,80002fe8 <USB_Device_ProcessControlRequest+0x400>
80002fae:	70 09       	ld.w	r9,r8[0x0]
80002fb0:	a3 69       	lsl	r9,0x2
80002fb2:	e0 39 fe a0 	sub	r9,130720
80002fb6:	72 0b       	ld.w	r11,r9[0x0]
80002fb8:	30 1a       	mov	r10,1
80002fba:	f7 da d0 41 	bfins	r11,r10,0x2,0x1
80002fbe:	93 0b       	st.w	r9[0x0],r11
				USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint] = &AVR32_USBB_SLAVE[USB_Endpoint_SelectedEndpoint * ENDPOINT_HSB_ADDRESS_SPACE_SIZE];
80002fc0:	70 0b       	ld.w	r11,r8[0x0]
80002fc2:	70 0c       	ld.w	r12,r8[0x0]
80002fc4:	b1 6c       	lsl	r12,0x10
80002fc6:	fc 19 e0 00 	movh	r9,0xe000
80002fca:	12 0c       	add	r12,r9
80002fcc:	48 89       	lddpc	r9,80002fec <USB_Device_ProcessControlRequest+0x404>
80002fce:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
			 *  \ingroup Group_EndpointPacketManagement_UC3
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				(&AVR32_USBB.UECON0SET)[USB_Endpoint_SelectedEndpoint].stallrqs = true;
80002fd2:	70 08       	ld.w	r8,r8[0x0]
80002fd4:	a3 68       	lsl	r8,0x2
80002fd6:	e0 38 fe 10 	sub	r8,130576
80002fda:	70 09       	ld.w	r9,r8[0x0]
80002fdc:	f3 da d2 61 	bfins	r9,r10,0x13,0x1
80002fe0:	91 09       	st.w	r8[0x0],r9
80002fe2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fe6:	00 00       	add	r0,r0
80002fe8:	00 00       	add	r0,r0
80002fea:	09 50       	ld.sh	r0,--r4
80002fec:	00 00       	add	r0,r0
80002fee:	0c 00       	add	r0,r6
80002ff0:	00 00       	add	r0,r0
80002ff2:	0b f6       	ld.ub	r6,r5[0x7]
80002ff4:	80 00       	ld.sh	r0,r0[0x0]
80002ff6:	34 e8       	mov	r8,78
80002ff8:	00 00       	add	r0,r0
80002ffa:	0b f1       	ld.ub	r1,r5[0x7]
80002ffc:	00 00       	add	r0,r0
80002ffe:	0b f2       	ld.ub	r2,r5[0x7]
80003000:	80 00       	ld.sh	r0,r0[0x0]
80003002:	36 3c       	mov	r12,99
80003004:	00 00       	add	r0,r0
80003006:	0b f5       	ld.ub	r5,r5[0x7]
80003008:	00 00       	add	r0,r0
8000300a:	0b f0       	ld.ub	r0,r5[0x7]

8000300c <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
8000300c:	eb cd 40 fc 	pushm	r2-r7,lr
80003010:	18 96       	mov	r6,r12
80003012:	e0 67 03 e8 	mov	r7,1000
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
80003016:	30 13       	mov	r3,1
80003018:	30 22       	mov	r2,2
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].txouti;
8000301a:	49 a5       	lddpc	r5,80003080 <USB_Host_WaitForIOS+0x74>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
8000301c:	30 14       	mov	r4,1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
8000301e:	c0 c8       	rjmp	80003036 <USB_Host_WaitForIOS+0x2a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
80003020:	08 9c       	mov	r12,r4
80003022:	f0 1f 00 19 	mcall	80003084 <USB_Host_WaitForIOS+0x78>
80003026:	c2 b1       	brne	8000307c <USB_Host_WaitForIOS+0x70>
		  return ErrorCode;

		if (!(TimeoutCounter--))
80003028:	58 07       	cp.w	r7,0
8000302a:	c0 41       	brne	80003032 <USB_Host_WaitForIOS+0x26>
8000302c:	30 4c       	mov	r12,4
8000302e:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003032:	20 17       	sub	r7,1
80003034:	5c 87       	casts.h	r7
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
80003036:	58 06       	cp.w	r6,0
80003038:	c0 a1       	brne	8000304c <USB_Host_WaitForIOS+0x40>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].txstpi;
8000303a:	6a 08       	ld.w	r8,r5[0x0]
8000303c:	a3 68       	lsl	r8,0x2
8000303e:	e0 38 fa d0 	sub	r8,129744
80003042:	70 08       	ld.w	r8,r8[0x0]
80003044:	e2 18 00 04 	andl	r8,0x4,COH
80003048:	ce c0       	breq	80003020 <USB_Host_WaitForIOS+0x14>
8000304a:	c1 88       	rjmp	8000307a <USB_Host_WaitForIOS+0x6e>
8000304c:	e6 06 18 00 	cp.b	r6,r3
80003050:	c0 a1       	brne	80003064 <USB_Host_WaitForIOS+0x58>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].rxini;
80003052:	6a 08       	ld.w	r8,r5[0x0]
80003054:	a3 68       	lsl	r8,0x2
80003056:	e0 38 fa d0 	sub	r8,129744
8000305a:	70 08       	ld.w	r8,r8[0x0]
8000305c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003060:	ce 00       	breq	80003020 <USB_Host_WaitForIOS+0x14>
80003062:	c0 c8       	rjmp	8000307a <USB_Host_WaitForIOS+0x6e>
80003064:	e4 06 18 00 	cp.b	r6,r2
80003068:	cd c1       	brne	80003020 <USB_Host_WaitForIOS+0x14>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].txouti;
8000306a:	6a 08       	ld.w	r8,r5[0x0]
8000306c:	a3 68       	lsl	r8,0x2
8000306e:	e0 38 fa d0 	sub	r8,129744
80003072:	70 08       	ld.w	r8,r8[0x0]
80003074:	e2 18 00 02 	andl	r8,0x2,COH
80003078:	cd 40       	breq	80003020 <USB_Host_WaitForIOS+0x14>
8000307a:	30 0c       	mov	r12,0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
8000307c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003080:	00 00       	add	r0,r0
80003082:	09 58       	ld.sh	r8,--r4
80003084:	80 00       	ld.sh	r0,r0[0x0]
80003086:	37 04       	mov	r4,112

80003088 <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
80003088:	d4 31       	pushm	r0-r7,lr
8000308a:	18 96       	mov	r6,r12
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return AVR32_USBB.UHCON.sofe;
8000308c:	fe 68 00 00 	mov	r8,-131072
80003090:	f0 f2 04 00 	ld.w	r2,r8[1024]

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
80003094:	fe f9 04 3c 	ld.w	r9,pc[1084]
80003098:	13 e7       	ld.ub	r7,r9[0x6]
8000309a:	13 f9       	ld.ub	r9,r9[0x7]
8000309c:	f3 e7 10 87 	or	r7,r9,r7<<0x8
800030a0:	5c 87       	casts.h	r7
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				AVR32_USBB.UHCON.sofe = true;
800030a2:	f0 f9 04 00 	ld.w	r9,r8[1024]
800030a6:	30 1c       	mov	r12,1
800030a8:	f3 dc d1 01 	bfins	r9,r12,0x8,0x1
800030ac:	f1 49 04 00 	st.w	r8[1024],r9

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
800030b0:	f0 1f 01 09 	mcall	800034d4 <USB_Host_SendControlRequest+0x44c>
800030b4:	e0 81 01 e6 	brne	80003480 <USB_Host_SendControlRequest+0x3f8>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				(&AVR32_USBB.UPCFG0)[USB_Pipe_SelectedPipe].ptoken = Token;
800030b8:	fe f9 04 20 	ld.w	r9,pc[1056]
800030bc:	72 08       	ld.w	r8,r9[0x0]
800030be:	a3 68       	lsl	r8,0x2
800030c0:	e0 38 fb 00 	sub	r8,129792
800030c4:	70 0a       	ld.w	r10,r8[0x0]
800030c6:	f5 dc d1 02 	bfins	r10,r12,0x8,0x2
800030ca:	91 0a       	st.w	r8[0x0],r10

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				(&AVR32_USBB.uperr0)[USB_Pipe_SelectedPipe] = 0;
800030cc:	72 08       	ld.w	r8,r9[0x0]
800030ce:	a3 68       	lsl	r8,0x2
800030d0:	e0 38 f9 80 	sub	r8,129408
800030d4:	91 0c       	st.w	r8[0x0],r12
				(&AVR32_USBB.UPSTA0CLR)[USB_Pipe_SelectedPipe].overfic  = true;
800030d6:	72 08       	ld.w	r8,r9[0x0]
800030d8:	a3 68       	lsl	r8,0x2
800030da:	e0 38 fa a0 	sub	r8,129696
800030de:	70 0a       	ld.w	r10,r8[0x0]
800030e0:	30 1b       	mov	r11,1
800030e2:	f5 db d0 a1 	bfins	r10,r11,0x5,0x1
800030e6:	91 0a       	st.w	r8[0x0],r10

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].pfreezec = true;
800030e8:	72 08       	ld.w	r8,r9[0x0]
800030ea:	a3 68       	lsl	r8,0x2
800030ec:	e0 38 f9 e0 	sub	r8,129504
800030f0:	70 0a       	ld.w	r10,r8[0x0]
800030f2:	f5 db d2 21 	bfins	r10,r11,0x11,0x1
800030f6:	91 0a       	st.w	r8[0x0],r10
	Pipe_ClearError();

	Pipe_Unfreeze();

	#if defined(ARCH_BIG_ENDIAN)
	Pipe_Write_8(USB_ControlRequest.bmRequestType);
800030f8:	fe fa 03 d8 	ld.w	r10,pc[984]
800030fc:	15 83       	ld.ub	r3,r10[0x0]
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				*(USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe]++) = Data;
800030fe:	72 04       	ld.w	r4,r9[0x0]
80003100:	fe f8 03 dc 	ld.w	r8,pc[988]
80003104:	f0 04 03 25 	ld.w	r5,r8[r4<<0x2]
80003108:	0a c3       	st.b	r5++,r3
8000310a:	f0 04 09 25 	st.w	r8[r4<<0x2],r5
	Pipe_Write_8(USB_ControlRequest.bRequest);
8000310e:	15 93       	ld.ub	r3,r10[0x1]
80003110:	72 04       	ld.w	r4,r9[0x0]
80003112:	f0 04 03 25 	ld.w	r5,r8[r4<<0x2]
80003116:	0a c3       	st.b	r5++,r3
80003118:	f0 04 09 25 	st.w	r8[r4<<0x2],r5
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
8000311c:	15 a3       	ld.ub	r3,r10[0x2]
8000311e:	15 b5       	ld.ub	r5,r10[0x3]
80003120:	eb e3 10 83 	or	r3,r5,r3<<0x8
80003124:	5c 83       	casts.h	r3
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				*(USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe]++) = (Data & 0xFF);
80003126:	72 04       	ld.w	r4,r9[0x0]
80003128:	e3 d3 c0 08 	bfextu	r1,r3,0x0,0x8
8000312c:	f0 04 03 25 	ld.w	r5,r8[r4<<0x2]
80003130:	0a c1       	st.b	r5++,r1
80003132:	f0 04 09 25 	st.w	r8[r4<<0x2],r5
				*(USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe]++) = (Data >> 8);
80003136:	72 04       	ld.w	r4,r9[0x0]
80003138:	e7 d3 c1 08 	bfextu	r3,r3,0x8,0x8
8000313c:	f0 04 03 25 	ld.w	r5,r8[r4<<0x2]
80003140:	0a c3       	st.b	r5++,r3
80003142:	f0 04 09 25 	st.w	r8[r4<<0x2],r5
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
80003146:	15 c3       	ld.ub	r3,r10[0x4]
80003148:	15 d5       	ld.ub	r5,r10[0x5]
8000314a:	eb e3 10 83 	or	r3,r5,r3<<0x8
8000314e:	5c 83       	casts.h	r3
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				*(USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe]++) = (Data & 0xFF);
80003150:	72 04       	ld.w	r4,r9[0x0]
80003152:	e3 d3 c0 08 	bfextu	r1,r3,0x0,0x8
80003156:	f0 04 03 25 	ld.w	r5,r8[r4<<0x2]
8000315a:	0a c1       	st.b	r5++,r1
8000315c:	f0 04 09 25 	st.w	r8[r4<<0x2],r5
				*(USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe]++) = (Data >> 8);
80003160:	72 04       	ld.w	r4,r9[0x0]
80003162:	e7 d3 c1 08 	bfextu	r3,r3,0x8,0x8
80003166:	f0 04 03 25 	ld.w	r5,r8[r4<<0x2]
8000316a:	0a c3       	st.b	r5++,r3
8000316c:	f0 04 09 25 	st.w	r8[r4<<0x2],r5
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
80003170:	15 e4       	ld.ub	r4,r10[0x6]
80003172:	15 fa       	ld.ub	r10,r10[0x7]
80003174:	f5 e4 10 84 	or	r4,r10,r4<<0x8
80003178:	5c 84       	casts.h	r4
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				*(USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe]++) = (Data & 0xFF);
8000317a:	72 05       	ld.w	r5,r9[0x0]
8000317c:	08 93       	mov	r3,r4
8000317e:	5c 53       	castu.b	r3
80003180:	f0 05 03 2a 	ld.w	r10,r8[r5<<0x2]
80003184:	14 c3       	st.b	r10++,r3
80003186:	f0 05 09 2a 	st.w	r8[r5<<0x2],r10
				*(USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe]++) = (Data >> 8);
8000318a:	72 05       	ld.w	r5,r9[0x0]
8000318c:	e9 d4 c1 08 	bfextu	r4,r4,0x8,0x8
80003190:	f0 05 03 2a 	ld.w	r10,r8[r5<<0x2]
80003194:	14 c4       	st.b	r10++,r4
80003196:	f0 05 09 2a 	st.w	r8[r5<<0x2],r10
			 *  \ingroup Group_PipePacketManagement_UC3
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				(&AVR32_USBB.UPSTA0CLR)[USB_Pipe_SelectedPipe].txstpic = true;
8000319a:	72 0a       	ld.w	r10,r9[0x0]
8000319c:	a3 6a       	lsl	r10,0x2
8000319e:	e0 3a fa a0 	sub	r10,129696
800031a2:	74 05       	ld.w	r5,r10[0x0]
800031a4:	eb db d0 41 	bfins	r5,r11,0x2,0x1
800031a8:	95 05       	st.w	r10[0x0],r5
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].fifoconc = true;
800031aa:	72 0a       	ld.w	r10,r9[0x0]
800031ac:	a3 6a       	lsl	r10,0x2
800031ae:	e0 3a f9 e0 	sub	r10,129504
800031b2:	74 05       	ld.w	r5,r10[0x0]
800031b4:	eb db d1 c1 	bfins	r5,r11,0xe,0x1
800031b8:	95 05       	st.w	r10[0x0],r5
				USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe] = &AVR32_USBB_SLAVE[USB_Pipe_SelectedPipe * PIPE_HSB_ADDRESS_SPACE_SIZE];
800031ba:	72 0a       	ld.w	r10,r9[0x0]
800031bc:	72 0b       	ld.w	r11,r9[0x0]
800031be:	b1 6b       	lsl	r11,0x10
800031c0:	fc 19 e0 00 	movh	r9,0xe000
800031c4:	f6 09 00 09 	add	r9,r11,r9
800031c8:	f0 0a 09 29 	st.w	r8[r10<<0x2],r9
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
800031cc:	f0 1f 00 c5 	mcall	800034e0 <USB_Host_SendControlRequest+0x458>
800031d0:	e0 81 01 58 	brne	80003480 <USB_Host_SendControlRequest+0x3f8>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				(&AVR32_USBB.UPCON0SET)[USB_Pipe_SelectedPipe].pfreezes = true;
800031d4:	fe f8 03 04 	ld.w	r8,pc[772]
800031d8:	70 08       	ld.w	r8,r8[0x0]
800031da:	a3 68       	lsl	r8,0x2
800031dc:	e0 38 fa 10 	sub	r8,129552
800031e0:	70 09       	ld.w	r9,r8[0x0]
800031e2:	30 1c       	mov	r12,1
800031e4:	f3 dc d2 21 	bfins	r9,r12,0x11,0x1
800031e8:	91 09       	st.w	r8[0x0],r9
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
800031ea:	f0 1f 00 bb 	mcall	800034d4 <USB_Host_SendControlRequest+0x44c>
800031ee:	e0 81 01 49 	brne	80003480 <USB_Host_SendControlRequest+0x3f8>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
800031f2:	fe f8 02 de 	ld.w	r8,pc[734]
800031f6:	11 89       	ld.ub	r9,r8[0x0]
800031f8:	30 08       	mov	r8,0
800031fa:	f0 09 18 00 	cp.b	r9,r8
800031fe:	e0 84 00 a3 	brge	80003344 <USB_Host_SendControlRequest+0x2bc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				(&AVR32_USBB.UPCFG0)[USB_Pipe_SelectedPipe].ptoken = Token;
80003202:	fe f8 02 d6 	ld.w	r8,pc[726]
80003206:	70 08       	ld.w	r8,r8[0x0]
80003208:	a3 68       	lsl	r8,0x2
8000320a:	e0 38 fb 00 	sub	r8,129792
8000320e:	70 09       	ld.w	r9,r8[0x0]
80003210:	30 1a       	mov	r10,1
80003212:	f3 da d1 02 	bfins	r9,r10,0x8,0x2
80003216:	91 09       	st.w	r8[0x0],r9
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
80003218:	58 06       	cp.w	r6,0
8000321a:	c5 d0       	breq	800032d4 <USB_Host_SendControlRequest+0x24c>
		{
			while (DataLen)
8000321c:	58 07       	cp.w	r7,0
8000321e:	c5 b0       	breq	800032d4 <USB_Host_SendControlRequest+0x24c>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].pfreezec = true;
80003220:	fe f5 02 b8 	ld.w	r5,pc[696]
80003224:	14 93       	mov	r3,r10
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return *(USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe]++);
80003226:	fe f4 02 b6 	ld.w	r4,pc[694]
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				(&AVR32_USBB.UPSTA0CLR)[USB_Pipe_SelectedPipe].rxinic   = true;
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].fifoconc = true;
				USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe] = &AVR32_USBB_SLAVE[USB_Pipe_SelectedPipe * PIPE_HSB_ADDRESS_SPACE_SIZE];
8000322a:	fc 11 e0 00 	movh	r1,0xe000

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].pfreezec = true;
8000322e:	6a 08       	ld.w	r8,r5[0x0]
80003230:	a3 68       	lsl	r8,0x2
80003232:	e0 38 f9 e0 	sub	r8,129504
80003236:	70 09       	ld.w	r9,r8[0x0]
80003238:	f3 d3 d2 21 	bfins	r9,r3,0x11,0x1
8000323c:	91 09       	st.w	r8[0x0],r9
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
8000323e:	06 9c       	mov	r12,r3
80003240:	f0 1f 00 a8 	mcall	800034e0 <USB_Host_SendControlRequest+0x458>
80003244:	e0 81 01 1e 	brne	80003480 <USB_Host_SendControlRequest+0x3f8>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].pbyct;
80003248:	6a 08       	ld.w	r8,r5[0x0]
8000324a:	a3 68       	lsl	r8,0x2
8000324c:	e0 38 fa d0 	sub	r8,129744
80003250:	70 08       	ld.w	r8,r8[0x0]
80003252:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
80003256:	f9 b7 00 00 	moveq	r7,0
8000325a:	6a 08       	ld.w	r8,r5[0x0]
8000325c:	a3 68       	lsl	r8,0x2
8000325e:	e0 38 fa d0 	sub	r8,129744
80003262:	70 08       	ld.w	r8,r8[0x0]
80003264:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
80003268:	c1 60       	breq	80003294 <USB_Host_SendControlRequest+0x20c>
8000326a:	58 07       	cp.w	r7,0
8000326c:	c1 40       	breq	80003294 <USB_Host_SendControlRequest+0x20c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return *(USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe]++);
8000326e:	6a 09       	ld.w	r9,r5[0x0]
80003270:	e8 09 03 28 	ld.w	r8,r4[r9<<0x2]
80003274:	11 3a       	ld.ub	r10,r8++
80003276:	e8 09 09 28 	st.w	r4[r9<<0x2],r8
				{
					*(DataStream++) = Pipe_Read_8();
8000327a:	0c ca       	st.b	r6++,r10
					DataLen--;
8000327c:	20 17       	sub	r7,1
8000327e:	5c 87       	casts.h	r7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].pbyct;
80003280:	6a 08       	ld.w	r8,r5[0x0]
80003282:	a3 68       	lsl	r8,0x2
80003284:	e0 38 fa d0 	sub	r8,129744
80003288:	70 08       	ld.w	r8,r8[0x0]
8000328a:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
8000328e:	c0 30       	breq	80003294 <USB_Host_SendControlRequest+0x20c>
80003290:	58 07       	cp.w	r7,0
80003292:	ce e1       	brne	8000326e <USB_Host_SendControlRequest+0x1e6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				(&AVR32_USBB.UPCON0SET)[USB_Pipe_SelectedPipe].pfreezes = true;
80003294:	6a 08       	ld.w	r8,r5[0x0]
80003296:	a3 68       	lsl	r8,0x2
80003298:	e0 38 fa 10 	sub	r8,129552
8000329c:	70 09       	ld.w	r9,r8[0x0]
8000329e:	f3 d3 d2 21 	bfins	r9,r3,0x11,0x1
800032a2:	91 09       	st.w	r8[0x0],r9
			 *  \ingroup Group_PipePacketManagement_UC3
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				(&AVR32_USBB.UPSTA0CLR)[USB_Pipe_SelectedPipe].rxinic   = true;
800032a4:	6a 08       	ld.w	r8,r5[0x0]
800032a6:	a3 68       	lsl	r8,0x2
800032a8:	e0 38 fa a0 	sub	r8,129696
800032ac:	70 09       	ld.w	r9,r8[0x0]
800032ae:	f3 d3 d0 01 	bfins	r9,r3,0x0,0x1
800032b2:	91 09       	st.w	r8[0x0],r9
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].fifoconc = true;
800032b4:	6a 08       	ld.w	r8,r5[0x0]
800032b6:	a3 68       	lsl	r8,0x2
800032b8:	e0 38 f9 e0 	sub	r8,129504
800032bc:	70 09       	ld.w	r9,r8[0x0]
800032be:	f3 d3 d1 c1 	bfins	r9,r3,0xe,0x1
800032c2:	91 09       	st.w	r8[0x0],r9
				USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe] = &AVR32_USBB_SLAVE[USB_Pipe_SelectedPipe * PIPE_HSB_ADDRESS_SPACE_SIZE];
800032c4:	6a 08       	ld.w	r8,r5[0x0]
800032c6:	6a 09       	ld.w	r9,r5[0x0]
800032c8:	b1 69       	lsl	r9,0x10
800032ca:	02 09       	add	r9,r1
800032cc:	e8 08 09 29 	st.w	r4[r8<<0x2],r9
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
800032d0:	58 07       	cp.w	r7,0
800032d2:	ca e1       	brne	8000322e <USB_Host_SendControlRequest+0x1a6>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				(&AVR32_USBB.UPCFG0)[USB_Pipe_SelectedPipe].ptoken = Token;
800032d4:	fe f8 02 04 	ld.w	r8,pc[516]
800032d8:	70 09       	ld.w	r9,r8[0x0]
800032da:	a3 69       	lsl	r9,0x2
800032dc:	e0 39 fb 00 	sub	r9,129792
800032e0:	72 0a       	ld.w	r10,r9[0x0]
800032e2:	30 2c       	mov	r12,2
800032e4:	f5 dc d1 02 	bfins	r10,r12,0x8,0x2
800032e8:	93 0a       	st.w	r9[0x0],r10

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].pfreezec = true;
800032ea:	70 08       	ld.w	r8,r8[0x0]
800032ec:	f0 0c 09 48 	lsl	r8,r8,r12
800032f0:	e0 38 f9 e0 	sub	r8,129504
800032f4:	70 09       	ld.w	r9,r8[0x0]
800032f6:	30 1a       	mov	r10,1
800032f8:	f3 da d2 21 	bfins	r9,r10,0x11,0x1
800032fc:	91 09       	st.w	r8[0x0],r9
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
800032fe:	f0 1f 00 79 	mcall	800034e0 <USB_Host_SendControlRequest+0x458>
80003302:	e0 81 00 bf 	brne	80003480 <USB_Host_SendControlRequest+0x3f8>
			 *  \ingroup Group_PipePacketManagement_UC3
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				(&AVR32_USBB.UPSTA0CLR)[USB_Pipe_SelectedPipe].txoutic  = true;
80003306:	4f 58       	lddpc	r8,800034d8 <USB_Host_SendControlRequest+0x450>
80003308:	70 09       	ld.w	r9,r8[0x0]
8000330a:	a3 69       	lsl	r9,0x2
8000330c:	e0 39 fa a0 	sub	r9,129696
80003310:	72 0a       	ld.w	r10,r9[0x0]
80003312:	30 1b       	mov	r11,1
80003314:	f5 db d0 21 	bfins	r10,r11,0x1,0x1
80003318:	93 0a       	st.w	r9[0x0],r10
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].fifoconc = true;
8000331a:	70 09       	ld.w	r9,r8[0x0]
8000331c:	a3 69       	lsl	r9,0x2
8000331e:	e0 39 f9 e0 	sub	r9,129504
80003322:	72 0a       	ld.w	r10,r9[0x0]
80003324:	f5 db d1 c1 	bfins	r10,r11,0xe,0x1
80003328:	93 0a       	st.w	r9[0x0],r10
				USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe] = &AVR32_USBB_SLAVE[USB_Pipe_SelectedPipe * PIPE_HSB_ADDRESS_SPACE_SIZE];
8000332a:	70 09       	ld.w	r9,r8[0x0]
8000332c:	70 0a       	ld.w	r10,r8[0x0]
8000332e:	b1 6a       	lsl	r10,0x10
80003330:	fc 18 e0 00 	movh	r8,0xe000
80003334:	10 0a       	add	r10,r8
80003336:	4e a8       	lddpc	r8,800034dc <USB_Host_SendControlRequest+0x454>
80003338:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
8000333c:	30 2c       	mov	r12,2
8000333e:	f0 1f 00 69 	mcall	800034e0 <USB_Host_SendControlRequest+0x458>
80003342:	c9 f8       	rjmp	80003480 <USB_Host_SendControlRequest+0x3f8>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
80003344:	58 06       	cp.w	r6,0
80003346:	c6 d0       	breq	80003420 <USB_Host_SendControlRequest+0x398>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				(&AVR32_USBB.UPCFG0)[USB_Pipe_SelectedPipe].ptoken = Token;
80003348:	4e 48       	lddpc	r8,800034d8 <USB_Host_SendControlRequest+0x450>
8000334a:	70 09       	ld.w	r9,r8[0x0]
8000334c:	a3 69       	lsl	r9,0x2
8000334e:	e0 39 fb 00 	sub	r9,129792
80003352:	72 0a       	ld.w	r10,r9[0x0]
80003354:	30 2b       	mov	r11,2
80003356:	f5 db d1 02 	bfins	r10,r11,0x8,0x2
8000335a:	93 0a       	st.w	r9[0x0],r10

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].pfreezec = true;
8000335c:	70 08       	ld.w	r8,r8[0x0]
8000335e:	f0 0b 09 48 	lsl	r8,r8,r11
80003362:	e0 38 f9 e0 	sub	r8,129504
80003366:	70 09       	ld.w	r9,r8[0x0]
80003368:	30 1a       	mov	r10,1
8000336a:	f3 da d2 21 	bfins	r9,r10,0x11,0x1
8000336e:	91 09       	st.w	r8[0x0],r9
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
80003370:	58 07       	cp.w	r7,0
80003372:	c4 90       	breq	80003404 <USB_Host_SendControlRequest+0x37c>
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
80003374:	16 90       	mov	r0,r11
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].pbyct;
80003376:	4d 95       	lddpc	r5,800034d8 <USB_Host_SendControlRequest+0x450>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
80003378:	4d b3       	lddpc	r3,800034e4 <USB_Host_SendControlRequest+0x45c>
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				*(USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe]++) = Data;
8000337a:	4d 94       	lddpc	r4,800034dc <USB_Host_SendControlRequest+0x454>
			 *  \ingroup Group_PipePacketManagement_UC3
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				(&AVR32_USBB.UPSTA0CLR)[USB_Pipe_SelectedPipe].txoutic  = true;
8000337c:	14 91       	mov	r1,r10
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
8000337e:	00 9c       	mov	r12,r0
80003380:	f0 1f 00 58 	mcall	800034e0 <USB_Host_SendControlRequest+0x458>
80003384:	e0 81 00 7e 	brne	80003480 <USB_Host_SendControlRequest+0x3f8>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
80003388:	58 07       	cp.w	r7,0
8000338a:	c2 30       	breq	800033d0 <USB_Host_SendControlRequest+0x348>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].pbyct;
8000338c:	6a 08       	ld.w	r8,r5[0x0]
8000338e:	a3 68       	lsl	r8,0x2
80003390:	e0 38 fa d0 	sub	r8,129744
80003394:	70 08       	ld.w	r8,r8[0x0]
80003396:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
8000339a:	07 89       	ld.ub	r9,r3[0x0]
8000339c:	f0 09 19 00 	cp.h	r9,r8
800033a0:	e0 88 00 18 	brls	800033d0 <USB_Host_SendControlRequest+0x348>
				{
					Pipe_Write_8(*(DataStream++));
800033a4:	0d 3a       	ld.ub	r10,r6++
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				*(USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe]++) = Data;
800033a6:	6a 09       	ld.w	r9,r5[0x0]
800033a8:	e8 09 03 28 	ld.w	r8,r4[r9<<0x2]
800033ac:	10 ca       	st.b	r8++,r10
800033ae:	e8 09 09 28 	st.w	r4[r9<<0x2],r8
					DataLen--;
800033b2:	20 17       	sub	r7,1
800033b4:	5c 87       	casts.h	r7
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
800033b6:	c0 d0       	breq	800033d0 <USB_Host_SendControlRequest+0x348>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].pbyct;
800033b8:	6a 08       	ld.w	r8,r5[0x0]
800033ba:	a3 68       	lsl	r8,0x2
800033bc:	e0 38 fa d0 	sub	r8,129744
800033c0:	70 08       	ld.w	r8,r8[0x0]
800033c2:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
800033c6:	07 89       	ld.ub	r9,r3[0x0]
800033c8:	f0 09 19 00 	cp.h	r9,r8
800033cc:	fe 9b ff ec 	brhi	800033a4 <USB_Host_SendControlRequest+0x31c>
			 *  \ingroup Group_PipePacketManagement_UC3
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				(&AVR32_USBB.UPSTA0CLR)[USB_Pipe_SelectedPipe].txoutic  = true;
800033d0:	6a 08       	ld.w	r8,r5[0x0]
800033d2:	a3 68       	lsl	r8,0x2
800033d4:	e0 38 fa a0 	sub	r8,129696
800033d8:	70 09       	ld.w	r9,r8[0x0]
800033da:	f3 d1 d0 21 	bfins	r9,r1,0x1,0x1
800033de:	91 09       	st.w	r8[0x0],r9
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].fifoconc = true;
800033e0:	6a 08       	ld.w	r8,r5[0x0]
800033e2:	a3 68       	lsl	r8,0x2
800033e4:	e0 38 f9 e0 	sub	r8,129504
800033e8:	70 09       	ld.w	r9,r8[0x0]
800033ea:	f3 d1 d1 c1 	bfins	r9,r1,0xe,0x1
800033ee:	91 09       	st.w	r8[0x0],r9
				USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe] = &AVR32_USBB_SLAVE[USB_Pipe_SelectedPipe * PIPE_HSB_ADDRESS_SPACE_SIZE];
800033f0:	6a 08       	ld.w	r8,r5[0x0]
800033f2:	6a 09       	ld.w	r9,r5[0x0]
800033f4:	b1 69       	lsl	r9,0x10
800033f6:	fc 1a e0 00 	movh	r10,0xe000
800033fa:	14 09       	add	r9,r10
800033fc:	e8 08 09 29 	st.w	r4[r8<<0x2],r9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
80003400:	58 07       	cp.w	r7,0
80003402:	cb e1       	brne	8000337e <USB_Host_SendControlRequest+0x2f6>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
80003404:	30 2c       	mov	r12,2
80003406:	f0 1f 00 37 	mcall	800034e0 <USB_Host_SendControlRequest+0x458>
8000340a:	c3 b1       	brne	80003480 <USB_Host_SendControlRequest+0x3f8>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				(&AVR32_USBB.UPCON0SET)[USB_Pipe_SelectedPipe].pfreezes = true;
8000340c:	4b 38       	lddpc	r8,800034d8 <USB_Host_SendControlRequest+0x450>
8000340e:	70 08       	ld.w	r8,r8[0x0]
80003410:	a3 68       	lsl	r8,0x2
80003412:	e0 38 fa 10 	sub	r8,129552
80003416:	70 09       	ld.w	r9,r8[0x0]
80003418:	30 1a       	mov	r10,1
8000341a:	f3 da d2 21 	bfins	r9,r10,0x11,0x1
8000341e:	91 09       	st.w	r8[0x0],r9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				(&AVR32_USBB.UPCFG0)[USB_Pipe_SelectedPipe].ptoken = Token;
80003420:	4a e8       	lddpc	r8,800034d8 <USB_Host_SendControlRequest+0x450>
80003422:	70 09       	ld.w	r9,r8[0x0]
80003424:	a3 69       	lsl	r9,0x2
80003426:	e0 39 fb 00 	sub	r9,129792
8000342a:	72 0a       	ld.w	r10,r9[0x0]
8000342c:	30 1c       	mov	r12,1
8000342e:	f5 dc d1 02 	bfins	r10,r12,0x8,0x2
80003432:	93 0a       	st.w	r9[0x0],r10

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].pfreezec = true;
80003434:	70 08       	ld.w	r8,r8[0x0]
80003436:	a3 68       	lsl	r8,0x2
80003438:	e0 38 f9 e0 	sub	r8,129504
8000343c:	70 09       	ld.w	r9,r8[0x0]
8000343e:	f3 dc d2 21 	bfins	r9,r12,0x11,0x1
80003442:	91 09       	st.w	r8[0x0],r9
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
80003444:	f0 1f 00 27 	mcall	800034e0 <USB_Host_SendControlRequest+0x458>
80003448:	c1 c1       	brne	80003480 <USB_Host_SendControlRequest+0x3f8>
			 *  \ingroup Group_PipePacketManagement_UC3
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				(&AVR32_USBB.UPSTA0CLR)[USB_Pipe_SelectedPipe].rxinic   = true;
8000344a:	4a 48       	lddpc	r8,800034d8 <USB_Host_SendControlRequest+0x450>
8000344c:	70 09       	ld.w	r9,r8[0x0]
8000344e:	a3 69       	lsl	r9,0x2
80003450:	e0 39 fa a0 	sub	r9,129696
80003454:	72 0a       	ld.w	r10,r9[0x0]
80003456:	30 1b       	mov	r11,1
80003458:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
8000345c:	93 0a       	st.w	r9[0x0],r10
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].fifoconc = true;
8000345e:	70 09       	ld.w	r9,r8[0x0]
80003460:	a3 69       	lsl	r9,0x2
80003462:	e0 39 f9 e0 	sub	r9,129504
80003466:	72 0a       	ld.w	r10,r9[0x0]
80003468:	f5 db d1 c1 	bfins	r10,r11,0xe,0x1
8000346c:	93 0a       	st.w	r9[0x0],r10
				USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe] = &AVR32_USBB_SLAVE[USB_Pipe_SelectedPipe * PIPE_HSB_ADDRESS_SPACE_SIZE];
8000346e:	70 09       	ld.w	r9,r8[0x0]
80003470:	70 0a       	ld.w	r10,r8[0x0]
80003472:	b1 6a       	lsl	r10,0x10
80003474:	fc 18 e0 00 	movh	r8,0xe000
80003478:	10 0a       	add	r10,r8
8000347a:	49 98       	lddpc	r8,800034dc <USB_Host_SendControlRequest+0x454>
8000347c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				(&AVR32_USBB.UPCON0SET)[USB_Pipe_SelectedPipe].pfreezes = true;
80003480:	49 68       	lddpc	r8,800034d8 <USB_Host_SendControlRequest+0x450>
80003482:	70 08       	ld.w	r8,r8[0x0]
80003484:	a3 68       	lsl	r8,0x2
80003486:	e0 38 fa 10 	sub	r8,129552
8000348a:	70 09       	ld.w	r9,r8[0x0]
8000348c:	30 1a       	mov	r10,1
8000348e:	f3 da d2 21 	bfins	r9,r10,0x11,0x1
80003492:	91 09       	st.w	r8[0x0],r9
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
80003494:	e2 12 01 00 	andl	r2,0x100,COH
80003498:	c0 a0       	breq	800034ac <USB_Host_SendControlRequest+0x424>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				AVR32_USBB.UHCON.sofe = false;
8000349a:	fe 68 00 00 	mov	r8,-131072
8000349e:	f0 f9 04 00 	ld.w	r9,r8[1024]
800034a2:	30 0a       	mov	r10,0
800034a4:	f3 da d1 01 	bfins	r9,r10,0x8,0x1
800034a8:	f1 49 04 00 	st.w	r8[1024],r9
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				uint32_t PipeNumber = (Address & PIPE_EPNUM_MASK);

				AVR32_USBB.uprst |=  (AVR32_USBB_PRST0_MASK << PipeNumber);
800034ac:	fe 68 00 00 	mov	r8,-131072
800034b0:	f0 f9 04 1c 	ld.w	r9,r8[1052]
800034b4:	b1 a9       	sbr	r9,0x10
800034b6:	f1 49 04 1c 	st.w	r8[1052],r9
				AVR32_USBB.uprst &= ~(AVR32_USBB_PRST0_MASK << PipeNumber);
800034ba:	f0 f9 04 1c 	ld.w	r9,r8[1052]
800034be:	b1 c9       	cbr	r9,0x10
800034c0:	f1 49 04 1c 	st.w	r8[1052],r9
				USB_Pipe_FIFOPos[PipeNumber] = &AVR32_USBB_SLAVE[PipeNumber * PIPE_HSB_ADDRESS_SPACE_SIZE];
800034c4:	fc 19 e0 00 	movh	r9,0xe000
800034c8:	48 58       	lddpc	r8,800034dc <USB_Host_SendControlRequest+0x454>
800034ca:	91 09       	st.w	r8[0x0],r9
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
800034cc:	d8 32       	popm	r0-r7,pc
800034ce:	00 00       	add	r0,r0
800034d0:	00 00       	add	r0,r0
800034d2:	0b f6       	ld.ub	r6,r5[0x7]
800034d4:	80 00       	ld.sh	r0,r0[0x0]
800034d6:	37 04       	mov	r4,112
800034d8:	00 00       	add	r0,r0
800034da:	09 58       	ld.sh	r8,--r4
800034dc:	00 00       	add	r0,r0
800034de:	0c 1c       	sub	r12,r6
800034e0:	80 00       	ld.sh	r0,r0[0x0]
800034e2:	30 0c       	mov	r12,0
800034e4:	00 00       	add	r0,r0
800034e6:	00 c1       	st.b	r0++,r1

800034e8 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
800034e8:	5e fc       	retal	r12
800034ea:	d7 03       	nop

800034ec <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
800034ec:	eb cd 40 c0 	pushm	r6-r7,lr
	#if defined(USB_CAN_BE_BOTH)
		if (USB_CurrentMode == USB_MODE_Device)
800034f0:	49 e8       	lddpc	r8,80003568 <USB_USBTask+0x7c>
800034f2:	11 89       	ld.ub	r9,r8[0x0]
800034f4:	30 18       	mov	r8,1
800034f6:	f0 09 18 00 	cp.b	r9,r8
800034fa:	c1 f1       	brne	80003538 <USB_USBTask+0x4c>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
800034fc:	49 c8       	lddpc	r8,8000356c <USB_USBTask+0x80>
800034fe:	11 88       	ld.ub	r8,r8[0x0]
80003500:	58 08       	cp.w	r8,0
80003502:	c3 00       	breq	80003562 <USB_USBTask+0x76>
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint32_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_GetEndpointDirection(void)
			{
				return ((&AVR32_USBB.UECFG0)[USB_Endpoint_SelectedEndpoint].epdir ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT);
80003504:	49 b8       	lddpc	r8,80003570 <USB_USBTask+0x84>
80003506:	70 08       	ld.w	r8,r8[0x0]
80003508:	a3 68       	lsl	r8,0x2
8000350a:	e0 38 ff 00 	sub	r8,130816
8000350e:	70 08       	ld.w	r8,r8[0x0]
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return (USB_Endpoint_SelectedEndpoint | Endpoint_GetEndpointDirection());
80003510:	49 88       	lddpc	r8,80003570 <USB_USBTask+0x84>
80003512:	70 07       	ld.w	r7,r8[0x0]
			 *  \param[in] Address  Endpoint address to select.
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				USB_Endpoint_SelectedEndpoint = (Address & ENDPOINT_EPNUM_MASK);
80003514:	30 09       	mov	r9,0
80003516:	91 09       	st.w	r8[0x0],r9
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return (&AVR32_USBB.UESTA0)[USB_Endpoint_SelectedEndpoint].rxstpi;
80003518:	70 08       	ld.w	r8,r8[0x0]
8000351a:	a3 68       	lsl	r8,0x2
8000351c:	e0 38 fe d0 	sub	r8,130768
80003520:	70 08       	ld.w	r8,r8[0x0]

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
80003522:	e2 18 00 04 	andl	r8,0x4,COH
80003526:	c0 30       	breq	8000352c <USB_USBTask+0x40>
	  USB_Device_ProcessControlRequest();
80003528:	f0 1f 00 13 	mcall	80003574 <USB_USBTask+0x88>
			 *  \param[in] Address  Endpoint address to select.
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				USB_Endpoint_SelectedEndpoint = (Address & ENDPOINT_EPNUM_MASK);
8000352c:	ef d7 c0 04 	bfextu	r7,r7,0x0,0x4
80003530:	49 08       	lddpc	r8,80003570 <USB_USBTask+0x84>
80003532:	91 07       	st.w	r8[0x0],r7
80003534:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
void USB_USBTask(void)
{
	#if defined(USB_CAN_BE_BOTH)
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
80003538:	48 c8       	lddpc	r8,80003568 <USB_USBTask+0x7c>
8000353a:	11 89       	ld.ub	r9,r8[0x0]
8000353c:	30 28       	mov	r8,2
8000353e:	f0 09 18 00 	cp.b	r9,r8
80003542:	c1 01       	brne	80003562 <USB_USBTask+0x76>
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (((&AVR32_USBB.UPCFG0)[USB_Pipe_SelectedPipe].ptoken == PIPE_TOKEN_OUT) ? PIPE_DIR_OUT : PIPE_DIR_IN);
80003544:	48 d8       	lddpc	r8,80003578 <USB_USBTask+0x8c>
80003546:	70 08       	ld.w	r8,r8[0x0]
80003548:	a3 68       	lsl	r8,0x2
8000354a:	e0 38 fb 00 	sub	r8,129792
8000354e:	70 08       	ld.w	r8,r8[0x0]
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (USB_Pipe_SelectedPipe | Pipe_GetPipeDirection());
80003550:	48 a7       	lddpc	r7,80003578 <USB_USBTask+0x8c>
80003552:	6e 06       	ld.w	r6,r7[0x0]
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				USB_Pipe_SelectedPipe = (Address & PIPE_EPNUM_MASK);
80003554:	30 08       	mov	r8,0
80003556:	8f 08       	st.w	r7[0x0],r8
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
80003558:	f0 1f 00 09 	mcall	8000357c <USB_USBTask+0x90>
8000355c:	ed d6 c0 04 	bfextu	r6,r6,0x0,0x4
80003560:	8f 06       	st.w	r7[0x0],r6
80003562:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003566:	00 00       	add	r0,r0
80003568:	00 00       	add	r0,r0
8000356a:	09 5c       	ld.sh	r12,--r4
8000356c:	00 00       	add	r0,r0
8000356e:	0b f5       	ld.ub	r5,r5[0x7]
80003570:	00 00       	add	r0,r0
80003572:	09 50       	ld.sh	r0,--r4
80003574:	80 00       	ld.sh	r0,r0[0x0]
80003576:	2b e8       	sub	r8,-66
80003578:	00 00       	add	r0,r0
8000357a:	09 58       	ld.sh	r8,--r4
8000357c:	80 00       	ld.sh	r0,r0[0x0]
8000357e:	39 50       	mov	r0,-107

80003580 <Endpoint_ConfigureEndpoint_Prv>:
	return true;
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint32_t UECFG0Data)
{
80003580:	eb cd 40 fc 	pushm	r2-r7,lr
	USB_Endpoint_FIFOPos[Number] = &AVR32_USBB_SLAVE[Number * ENDPOINT_HSB_ADDRESS_SPACE_SIZE];
80003584:	18 93       	mov	r3,r12
80003586:	f8 09 15 10 	lsl	r9,r12,0x10
8000358a:	fc 18 e0 00 	movh	r8,0xe000
8000358e:	10 09       	add	r9,r8
80003590:	4a 98       	lddpc	r8,80003634 <Endpoint_ConfigureEndpoint_Prv+0xb4>
80003592:	f0 0c 09 29 	st.w	r8[r12<<0x2],r9
	(&AVR32_USBB.uecfg0)[Number] = 0;
	(&AVR32_USBB.uecfg0)[Number] = UECFG0Data;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
80003596:	30 68       	mov	r8,6
80003598:	f0 0c 18 00 	cp.b	r12,r8
8000359c:	e0 88 00 3f 	brls	8000361a <Endpoint_ConfigureEndpoint_Prv+0x9a>
800035a0:	c3 78       	rjmp	8000360e <Endpoint_ConfigureEndpoint_Prv+0x8e>
800035a2:	10 9e       	mov	lr,r8
800035a4:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
800035a8:	95 09       	st.w	r10[0x0],r9
	{
		uint32_t UECFG0Temp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
800035aa:	f0 0c 18 00 	cp.b	r12,r8
800035ae:	c0 31       	brne	800035b4 <Endpoint_ConfigureEndpoint_Prv+0x34>
800035b0:	16 99       	mov	r9,r11
800035b2:	c0 68       	rjmp	800035be <Endpoint_ConfigureEndpoint_Prv+0x3e>
		{
			UECFG0Temp = UECFG0Data;
		}
		else
		{
			UECFG0Temp = (&AVR32_USBB.uecfg0)[EPNum];
800035b4:	f0 09 15 02 	lsl	r9,r8,0x2
800035b8:	e0 39 ff 00 	sub	r9,130816
800035bc:	72 09       	ld.w	r9,r9[0x0]
		}

		if (!(UECFG0Temp & AVR32_USBB_ALLOC_MASK))
800035be:	12 96       	mov	r6,r9
800035c0:	e2 16 00 02 	andl	r6,0x2,COH
800035c4:	c1 f0       	breq	80003602 <Endpoint_ConfigureEndpoint_Prv+0x82>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				AVR32_USBB.uerst &= ~(AVR32_USBB_EPEN0_MASK << USB_Endpoint_SelectedEndpoint);
800035c6:	6e 72       	ld.w	r2,r7[0x1c]
800035c8:	74 06       	ld.w	r6,r10[0x0]
800035ca:	ea 06 09 46 	lsl	r6,r5,r6
800035ce:	5c d6       	com	r6
800035d0:	04 66       	and	r6,r2
800035d2:	8f 76       	st.w	r7[0x1c],r6
		  continue;

		Endpoint_DisableEndpoint();
		(&AVR32_USBB.uecfg0)[EPNum] &= ~AVR32_USBB_ALLOC_MASK;
800035d4:	a3 6e       	lsl	lr,0x2
800035d6:	e0 3e ff 00 	sub	lr,130816
800035da:	7c 06       	ld.w	r6,lr[0x0]
800035dc:	a1 d6       	cbr	r6,0x1
800035de:	9d 06       	st.w	lr[0x0],r6
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				AVR32_USBB.uerst |=  (AVR32_USBB_EPEN0_MASK << USB_Endpoint_SelectedEndpoint);
800035e0:	6e 72       	ld.w	r2,r7[0x1c]
800035e2:	74 06       	ld.w	r6,r10[0x0]
800035e4:	ea 06 09 46 	lsl	r6,r5,r6
800035e8:	04 46       	or	r6,r2
800035ea:	8f 76       	st.w	r7[0x1c],r6

		Endpoint_EnableEndpoint();
		(&AVR32_USBB.uecfg0)[EPNum] = UECFG0Temp;
800035ec:	9d 09       	st.w	lr[0x0],r9
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return (&AVR32_USBB.UESTA0)[USB_Endpoint_SelectedEndpoint].cfgok;
800035ee:	74 09       	ld.w	r9,r10[0x0]
800035f0:	a3 69       	lsl	r9,0x2
800035f2:	e0 39 fe d0 	sub	r9,130768
800035f6:	72 09       	ld.w	r9,r9[0x0]

		if (!(Endpoint_IsConfigured()))
800035f8:	e6 19 00 04 	andh	r9,0x4,COH
800035fc:	c0 31       	brne	80003602 <Endpoint_ConfigureEndpoint_Prv+0x82>
800035fe:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
	(&AVR32_USBB.uecfg0)[Number] = 0;
	(&AVR32_USBB.uecfg0)[Number] = UECFG0Data;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
80003602:	2f f8       	sub	r8,-1
80003604:	5c 58       	castu.b	r8
80003606:	e8 08 18 00 	cp.b	r8,r4
8000360a:	fe 98 ff cc 	brls	800035a2 <Endpoint_ConfigureEndpoint_Prv+0x22>
			 *  \param[in] Address  Endpoint address to select.
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				USB_Endpoint_SelectedEndpoint = (Address & ENDPOINT_EPNUM_MASK);
8000360e:	e7 d3 c0 04 	bfextu	r3,r3,0x0,0x4
80003612:	48 a8       	lddpc	r8,80003638 <Endpoint_ConfigureEndpoint_Prv+0xb8>
80003614:	91 03       	st.w	r8[0x0],r3
80003616:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
8000361a:	f3 dc c0 04 	bfextu	r9,r12,0x0,0x4
8000361e:	48 78       	lddpc	r8,80003638 <Endpoint_ConfigureEndpoint_Prv+0xb8>
80003620:	91 09       	st.w	r8[0x0],r9
80003622:	18 9e       	mov	lr,r12
80003624:	18 98       	mov	r8,r12
80003626:	16 99       	mov	r9,r11
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				AVR32_USBB.uerst &= ~(AVR32_USBB_EPEN0_MASK << USB_Endpoint_SelectedEndpoint);
80003628:	fe 67 00 00 	mov	r7,-131072
8000362c:	48 3a       	lddpc	r10,80003638 <Endpoint_ConfigureEndpoint_Prv+0xb8>
8000362e:	30 15       	mov	r5,1
80003630:	30 64       	mov	r4,6
80003632:	cc 6b       	rjmp	800035be <Endpoint_ConfigureEndpoint_Prv+0x3e>
80003634:	00 00       	add	r0,r0
80003636:	0c 00       	add	r0,r6
80003638:	00 00       	add	r0,r0
8000363a:	09 50       	ld.sh	r0,--r4

8000363c <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
8000363c:	4a e8       	lddpc	r8,800036f4 <Endpoint_ClearStatusStage+0xb8>
8000363e:	11 89       	ld.ub	r9,r8[0x0]
80003640:	30 08       	mov	r8,0
80003642:	f0 09 18 00 	cp.b	r9,r8
80003646:	c3 04       	brge	800036a6 <Endpoint_ClearStatusStage+0x6a>
80003648:	c0 58       	rjmp	80003652 <Endpoint_ClearStatusStage+0x16>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
8000364a:	15 88       	ld.ub	r8,r10[0x0]
8000364c:	58 08       	cp.w	r8,0
8000364e:	c0 41       	brne	80003656 <Endpoint_ClearStatusStage+0x1a>
80003650:	5e fc       	retal	r12
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return (&AVR32_USBB.UESTA0)[USB_Endpoint_SelectedEndpoint].rxouti;
80003652:	4a a9       	lddpc	r9,800036f8 <Endpoint_ClearStatusStage+0xbc>
80003654:	4a aa       	lddpc	r10,800036fc <Endpoint_ClearStatusStage+0xc0>
80003656:	72 08       	ld.w	r8,r9[0x0]
80003658:	a3 68       	lsl	r8,0x2
8000365a:	e0 38 fe d0 	sub	r8,130768
8000365e:	70 08       	ld.w	r8,r8[0x0]

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
80003660:	e2 18 00 02 	andl	r8,0x2,COH
80003664:	cf 30       	breq	8000364a <Endpoint_ClearStatusStage+0xe>
			 *  \ingroup Group_EndpointPacketManagement_UC3
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				(&AVR32_USBB.UESTA0CLR)[USB_Endpoint_SelectedEndpoint].rxoutic  = true;
80003666:	4a 58       	lddpc	r8,800036f8 <Endpoint_ClearStatusStage+0xbc>
80003668:	70 09       	ld.w	r9,r8[0x0]
8000366a:	a3 69       	lsl	r9,0x2
8000366c:	e0 39 fe a0 	sub	r9,130720
80003670:	72 0a       	ld.w	r10,r9[0x0]
80003672:	30 1b       	mov	r11,1
80003674:	f5 db d0 21 	bfins	r10,r11,0x1,0x1
80003678:	93 0a       	st.w	r9[0x0],r10
				(&AVR32_USBB.UECON0CLR)[USB_Endpoint_SelectedEndpoint].fifoconc = true;
8000367a:	70 09       	ld.w	r9,r8[0x0]
8000367c:	a3 69       	lsl	r9,0x2
8000367e:	e0 39 fd e0 	sub	r9,130528
80003682:	72 0a       	ld.w	r10,r9[0x0]
80003684:	f5 db d1 c1 	bfins	r10,r11,0xe,0x1
80003688:	93 0a       	st.w	r9[0x0],r10
				USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint] = &AVR32_USBB_SLAVE[USB_Endpoint_SelectedEndpoint * ENDPOINT_HSB_ADDRESS_SPACE_SIZE];
8000368a:	70 09       	ld.w	r9,r8[0x0]
8000368c:	70 0a       	ld.w	r10,r8[0x0]
8000368e:	b1 6a       	lsl	r10,0x10
80003690:	fc 18 e0 00 	movh	r8,0xe000
80003694:	10 0a       	add	r10,r8
80003696:	49 b8       	lddpc	r8,80003700 <Endpoint_ClearStatusStage+0xc4>
80003698:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000369c:	5e fc       	retal	r12
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
8000369e:	15 88       	ld.ub	r8,r10[0x0]
800036a0:	58 08       	cp.w	r8,0
800036a2:	c0 41       	brne	800036aa <Endpoint_ClearStatusStage+0x6e>
800036a4:	5e fc       	retal	r12
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return (&AVR32_USBB.UESTA0)[USB_Endpoint_SelectedEndpoint].txini;
800036a6:	49 59       	lddpc	r9,800036f8 <Endpoint_ClearStatusStage+0xbc>
800036a8:	49 5a       	lddpc	r10,800036fc <Endpoint_ClearStatusStage+0xc0>
800036aa:	72 08       	ld.w	r8,r9[0x0]
800036ac:	a3 68       	lsl	r8,0x2
800036ae:	e0 38 fe d0 	sub	r8,130768
800036b2:	70 08       	ld.w	r8,r8[0x0]

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
800036b4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800036b8:	cf 30       	breq	8000369e <Endpoint_ClearStatusStage+0x62>
			 *  \ingroup Group_EndpointPacketManagement_UC3
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				(&AVR32_USBB.UESTA0CLR)[USB_Endpoint_SelectedEndpoint].txinic   = true;
800036ba:	49 08       	lddpc	r8,800036f8 <Endpoint_ClearStatusStage+0xbc>
800036bc:	70 09       	ld.w	r9,r8[0x0]
800036be:	a3 69       	lsl	r9,0x2
800036c0:	e0 39 fe a0 	sub	r9,130720
800036c4:	72 0a       	ld.w	r10,r9[0x0]
800036c6:	30 1b       	mov	r11,1
800036c8:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
800036cc:	93 0a       	st.w	r9[0x0],r10
				(&AVR32_USBB.UECON0CLR)[USB_Endpoint_SelectedEndpoint].fifoconc = true;
800036ce:	70 09       	ld.w	r9,r8[0x0]
800036d0:	a3 69       	lsl	r9,0x2
800036d2:	e0 39 fd e0 	sub	r9,130528
800036d6:	72 0a       	ld.w	r10,r9[0x0]
800036d8:	f5 db d1 c1 	bfins	r10,r11,0xe,0x1
800036dc:	93 0a       	st.w	r9[0x0],r10
				USB_Endpoint_FIFOPos[USB_Endpoint_SelectedEndpoint] = &AVR32_USBB_SLAVE[USB_Endpoint_SelectedEndpoint * ENDPOINT_HSB_ADDRESS_SPACE_SIZE];
800036de:	70 09       	ld.w	r9,r8[0x0]
800036e0:	70 0a       	ld.w	r10,r8[0x0]
800036e2:	b1 6a       	lsl	r10,0x10
800036e4:	fc 18 e0 00 	movh	r8,0xe000
800036e8:	10 0a       	add	r10,r8
800036ea:	48 68       	lddpc	r8,80003700 <Endpoint_ClearStatusStage+0xc4>
800036ec:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800036f0:	5e fc       	retal	r12
800036f2:	00 00       	add	r0,r0
800036f4:	00 00       	add	r0,r0
800036f6:	0b f6       	ld.ub	r6,r5[0x7]
800036f8:	00 00       	add	r0,r0
800036fa:	09 50       	ld.sh	r0,--r4
800036fc:	00 00       	add	r0,r0
800036fe:	0b f5       	ld.ub	r5,r5[0x7]
80003700:	00 00       	add	r0,r0
80003702:	0c 00       	add	r0,r6

80003704 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
80003704:	eb cd 40 f8 	pushm	r3-r7,lr
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return AVR32_USBB.UHCON.sofe;
80003708:	fe 68 00 00 	mov	r8,-131072
8000370c:	f0 f4 04 00 	ld.w	r4,r8[1024]
					case USB_INT_RXSTPI:
						return (&AVR32_USBB.UECON0)[USB_Endpoint_SelectedEndpoint].rxstpe;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return AVR32_USBB.UHINTE.hsofie;
80003710:	f0 f5 04 10 	ld.w	r5,r8[1040]
						(&AVR32_USBB.UECON0CLR)[USB_Endpoint_SelectedEndpoint].rxstpec = true;
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						AVR32_USBB.UHINTECLR.hsofiec  = true;
80003714:	f0 fa 04 14 	ld.w	r10,r8[1044]
80003718:	30 19       	mov	r9,1
8000371a:	f5 d9 d0 a1 	bfins	r10,r9,0x5,0x1
8000371e:	f1 4a 04 14 	st.w	r8[1044],r10
						(&AVR32_USBB.UESTA0CLR)[USB_Endpoint_SelectedEndpoint].rxstpic = true;
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						AVR32_USBB.UHINTCLR.hsofic   = true;
80003722:	f0 fa 04 08 	ld.w	r10,r8[1032]
80003726:	f5 d9 d0 a1 	bfins	r10,r9,0x5,0x1
8000372a:	f1 4a 04 08 	st.w	r8[1032],r10
						(void)AVR32_USBB.UHINTCLR;
8000372e:	f0 fa 04 08 	ld.w	r10,r8[1032]
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				AVR32_USBB.UHCON.sofe = true;
80003732:	f0 fa 04 00 	ld.w	r10,r8[1024]
80003736:	f5 d9 d1 01 	bfins	r10,r9,0x8,0x1
8000373a:	f1 4a 04 00 	st.w	r8[1024],r10
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
8000373e:	58 0c       	cp.w	r12,0
80003740:	c5 a0       	breq	800037f4 <USB_Host_WaitMS+0xf0>
						(&AVR32_USBB.UESTA0CLR)[USB_Endpoint_SelectedEndpoint].rxstpic = true;
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						AVR32_USBB.UHINTCLR.hsofic   = true;
80003742:	12 93       	mov	r3,r9
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
80003744:	4b ae       	lddpc	lr,8000382c <USB_Host_WaitMS+0x128>
80003746:	30 1b       	mov	r11,1
80003748:	4b a6       	lddpc	r6,80003830 <USB_Host_WaitMS+0x12c>
8000374a:	30 27       	mov	r7,2
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return (((&AVR32_USBB.upsta0)[USB_Pipe_SelectedPipe] &
8000374c:	4b a9       	lddpc	r9,80003834 <USB_Host_WaitMS+0x130>
					case USB_INT_RXSTPI:
						return (&AVR32_USBB.UESTA0)[USB_Endpoint_SelectedEndpoint].rxstpi;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return AVR32_USBB.UHINT.hsofi;
8000374e:	f0 fa 04 04 	ld.w	r10,r8[1028]

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
80003752:	e2 1a 00 20 	andl	r10,0x20,COH
80003756:	c0 b0       	breq	8000376c <USB_Host_WaitMS+0x68>
						(&AVR32_USBB.UESTA0CLR)[USB_Endpoint_SelectedEndpoint].rxstpic = true;
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						AVR32_USBB.UHINTCLR.hsofic   = true;
80003758:	f0 fa 04 08 	ld.w	r10,r8[1032]
8000375c:	f5 d3 d0 a1 	bfins	r10,r3,0x5,0x1
80003760:	f1 4a 04 08 	st.w	r8[1032],r10
						(void)AVR32_USBB.UHINTCLR;
80003764:	f0 fa 04 08 	ld.w	r10,r8[1032]
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
80003768:	20 1c       	sub	r12,1
8000376a:	5c 5c       	castu.b	r12
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
8000376c:	1d 8a       	ld.ub	r10,lr[0x0]
8000376e:	f6 0a 18 00 	cp.b	r10,r11
80003772:	c3 f0       	breq	800037f0 <USB_Host_WaitMS+0xec>
80003774:	0d 8a       	ld.ub	r10,r6[0x0]
80003776:	ee 0a 18 00 	cp.b	r10,r7
8000377a:	c3 b1       	brne	800037f0 <USB_Host_WaitMS+0xec>
8000377c:	72 0a       	ld.w	r10,r9[0x0]
8000377e:	a3 6a       	lsl	r10,0x2
80003780:	e0 3a fa d0 	sub	r10,129744
80003784:	74 0a       	ld.w	r10,r10[0x0]
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
80003786:	e2 1a 00 28 	andl	r10,0x28,COH
8000378a:	c1 30       	breq	800037b0 <USB_Host_WaitMS+0xac>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				(&AVR32_USBB.uperr0)[USB_Pipe_SelectedPipe] = 0;
8000378c:	4a a8       	lddpc	r8,80003834 <USB_Host_WaitMS+0x130>
8000378e:	70 09       	ld.w	r9,r8[0x0]
80003790:	a3 69       	lsl	r9,0x2
80003792:	e0 39 f9 80 	sub	r9,129408
80003796:	30 0a       	mov	r10,0
80003798:	93 0a       	st.w	r9[0x0],r10
				(&AVR32_USBB.UPSTA0CLR)[USB_Pipe_SelectedPipe].overfic  = true;
8000379a:	70 08       	ld.w	r8,r8[0x0]
8000379c:	a3 68       	lsl	r8,0x2
8000379e:	e0 38 fa a0 	sub	r8,129696
800037a2:	70 09       	ld.w	r9,r8[0x0]
800037a4:	30 1a       	mov	r10,1
800037a6:	f3 da d0 a1 	bfins	r9,r10,0x5,0x1
800037aa:	91 09       	st.w	r8[0x0],r9
800037ac:	30 2c       	mov	r12,2
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
800037ae:	c2 48       	rjmp	800037f6 <USB_Host_WaitMS+0xf2>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].rxstalldi;
800037b0:	72 0a       	ld.w	r10,r9[0x0]
800037b2:	a3 6a       	lsl	r10,0x2
800037b4:	e0 3a fa d0 	sub	r10,129744
800037b8:	74 0a       	ld.w	r10,r10[0x0]
		}

		if (Pipe_IsStalled())
800037ba:	e2 1a 00 40 	andl	r10,0x40,COH
800037be:	c1 60       	breq	800037ea <USB_Host_WaitMS+0xe6>
			 *  \ingroup Group_PipePacketManagement_UC3
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				(&AVR32_USBB.UPSTA0CLR)[USB_Pipe_SelectedPipe].rxstalldic = true;
800037c0:	49 d8       	lddpc	r8,80003834 <USB_Host_WaitMS+0x130>
800037c2:	70 09       	ld.w	r9,r8[0x0]
800037c4:	a3 69       	lsl	r9,0x2
800037c6:	e0 39 fa a0 	sub	r9,129696
800037ca:	72 0a       	ld.w	r10,r9[0x0]
800037cc:	30 1b       	mov	r11,1
800037ce:	f5 db d0 c1 	bfins	r10,r11,0x6,0x1
800037d2:	93 0a       	st.w	r9[0x0],r10
				USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe] = &AVR32_USBB_SLAVE[USB_Pipe_SelectedPipe * PIPE_HSB_ADDRESS_SPACE_SIZE];
800037d4:	70 09       	ld.w	r9,r8[0x0]
800037d6:	70 0a       	ld.w	r10,r8[0x0]
800037d8:	b1 6a       	lsl	r10,0x10
800037da:	fc 18 e0 00 	movh	r8,0xe000
800037de:	10 0a       	add	r10,r8
800037e0:	49 68       	lddpc	r8,80003838 <USB_Host_WaitMS+0x134>
800037e2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800037e6:	30 3c       	mov	r12,3
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;

			break;
800037e8:	c0 78       	rjmp	800037f6 <USB_Host_WaitMS+0xf2>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
800037ea:	58 0c       	cp.w	r12,0
800037ec:	cb 11       	brne	8000374e <USB_Host_WaitMS+0x4a>
800037ee:	c0 38       	rjmp	800037f4 <USB_Host_WaitMS+0xf0>
800037f0:	30 1c       	mov	r12,1
800037f2:	c0 28       	rjmp	800037f6 <USB_Host_WaitMS+0xf2>
800037f4:	30 0c       	mov	r12,0

			break;
		}
	}

	if (BusSuspended)
800037f6:	e2 14 01 00 	andl	r4,0x100,COH
800037fa:	c0 a0       	breq	8000380e <USB_Host_WaitMS+0x10a>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				AVR32_USBB.UHCON.sofe = false;
800037fc:	fe 68 00 00 	mov	r8,-131072
80003800:	f0 f9 04 00 	ld.w	r9,r8[1024]
80003804:	30 0a       	mov	r10,0
80003806:	f3 da d1 01 	bfins	r9,r10,0x8,0x1
8000380a:	f1 49 04 00 	st.w	r8[1024],r9
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
8000380e:	e2 15 00 20 	andl	r5,0x20,COH
80003812:	c0 a0       	breq	80003826 <USB_Host_WaitMS+0x122>
						(&AVR32_USBB.UECON0SET)[USB_Endpoint_SelectedEndpoint].rxstpes = true;
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						AVR32_USBB.UHINTESET.hsofies  = true;
80003814:	fe 68 00 00 	mov	r8,-131072
80003818:	f0 f9 04 18 	ld.w	r9,r8[1048]
8000381c:	30 1a       	mov	r10,1
8000381e:	f3 da d0 a1 	bfins	r9,r10,0x5,0x1
80003822:	f1 49 04 18 	st.w	r8[1048],r9
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
80003826:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000382a:	00 00       	add	r0,r0
8000382c:	00 00       	add	r0,r0
8000382e:	09 4d       	ld.w	sp,--r4
80003830:	00 00       	add	r0,r0
80003832:	09 5c       	ld.sh	r12,--r4
80003834:	00 00       	add	r0,r0
80003836:	09 58       	ld.sh	r8,--r4
80003838:	00 00       	add	r0,r0
8000383a:	0c 1c       	sub	r12,r6

8000383c <USB_Host_ResetDevice>:

static void USB_Host_ResetDevice(void)
{
8000383c:	d4 01       	pushm	lr
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return AVR32_USBB.UHCON.sofe;
8000383e:	fe 68 00 00 	mov	r8,-131072
80003842:	f0 fc 04 00 	ld.w	r12,r8[1024]
						break;
					case USB_INT_DCONNI:
						AVR32_USBB.UHINTECLR.dconniec = true;
						break;
					case USB_INT_DDISCI:
						AVR32_USBB.UHINTECLR.ddisciec = true;
80003846:	f0 f9 04 14 	ld.w	r9,r8[1044]
8000384a:	30 1a       	mov	r10,1
8000384c:	f3 da d0 21 	bfins	r9,r10,0x1,0x1
80003850:	f1 49 04 14 	st.w	r8[1044],r9
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				AVR32_USBB.UHCON.reset = true;
80003854:	f0 f9 04 00 	ld.w	r9,r8[1024]
80003858:	f3 da d1 21 	bfins	r9,r10,0x9,0x1
8000385c:	f1 49 04 00 	st.w	r8[1024],r9
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return AVR32_USBB.UHCON.reset;
80003860:	10 99       	mov	r9,r8
80003862:	f2 f8 04 00 	ld.w	r8,r9[1024]
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
80003866:	e2 18 02 00 	andl	r8,0x200,COH
8000386a:	cf c0       	breq	80003862 <USB_Host_ResetDevice+0x26>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				AVR32_USBB.UHCON.sofe = true;
8000386c:	fe 68 00 00 	mov	r8,-131072
80003870:	f0 fa 04 00 	ld.w	r10,r8[1024]
80003874:	30 19       	mov	r9,1
80003876:	f5 d9 d1 01 	bfins	r10,r9,0x8,0x1
8000387a:	f1 4a 04 00 	st.w	r8[1024],r10
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
8000387e:	30 0b       	mov	r11,0
80003880:	4b 3a       	lddpc	r10,8000394c <USB_Host_ResetDevice+0x110>
80003882:	b4 8b       	st.b	r10[0x0],r11
					case USB_INT_RXSTPI:
						return (&AVR32_USBB.UECON0)[USB_Endpoint_SelectedEndpoint].rxstpe;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return AVR32_USBB.UHINTE.hsofie;
80003884:	f0 fe 04 10 	ld.w	lr,r8[1040]
						(&AVR32_USBB.UECON0CLR)[USB_Endpoint_SelectedEndpoint].rxstpec = true;
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						AVR32_USBB.UHINTECLR.hsofiec  = true;
80003888:	f0 fa 04 14 	ld.w	r10,r8[1044]
8000388c:	f5 d9 d0 a1 	bfins	r10,r9,0x5,0x1
80003890:	f1 4a 04 14 	st.w	r8[1044],r10
						(&AVR32_USBB.UESTA0CLR)[USB_Endpoint_SelectedEndpoint].rxstpic = true;
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						AVR32_USBB.UHINTCLR.hsofic   = true;
80003894:	f0 fa 04 08 	ld.w	r10,r8[1032]
80003898:	f5 d9 d0 a1 	bfins	r10,r9,0x5,0x1
8000389c:	f1 4a 04 08 	st.w	r8[1032],r10
						(void)AVR32_USBB.UHINTCLR;
800038a0:	f0 f9 04 08 	ld.w	r9,r8[1032]
					case USB_INT_RXSTPI:
						return (&AVR32_USBB.UESTA0)[USB_Endpoint_SelectedEndpoint].rxstpi;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return AVR32_USBB.UHINT.hsofi;
800038a4:	f0 f8 04 04 	ld.w	r8,r8[1028]
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
800038a8:	e2 18 00 20 	andl	r8,0x20,COH
800038ac:	c2 20       	breq	800038f0 <USB_Host_ResetDevice+0xb4>
800038ae:	c0 68       	rjmp	800038ba <USB_Host_ResetDevice+0x7e>
800038b0:	f6 f8 04 04 	ld.w	r8,r11[1028]
800038b4:	e2 18 00 20 	andl	r8,0x20,COH
800038b8:	c2 00       	breq	800038f8 <USB_Host_ResetDevice+0xbc>
						(&AVR32_USBB.UESTA0CLR)[USB_Endpoint_SelectedEndpoint].rxstpic = true;
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						AVR32_USBB.UHINTCLR.hsofic   = true;
800038ba:	fe 68 00 00 	mov	r8,-131072
800038be:	f0 f9 04 08 	ld.w	r9,r8[1032]
800038c2:	30 1a       	mov	r10,1
800038c4:	f3 da d0 a1 	bfins	r9,r10,0x5,0x1
800038c8:	f1 49 04 08 	st.w	r8[1032],r9
						(void)AVR32_USBB.UHINTCLR;
800038cc:	f0 f9 04 08 	ld.w	r9,r8[1032]
					case USB_INT_DCONNI:
						AVR32_USBB.UHINTCLR.dconnic  = true;
						(void)AVR32_USBB.UHINTCLR;
						break;
					case USB_INT_DDISCI:
						AVR32_USBB.UHINTCLR.ddiscic  = true;
800038d0:	f0 f9 04 08 	ld.w	r9,r8[1032]
800038d4:	f3 da d0 21 	bfins	r9,r10,0x1,0x1
800038d8:	f1 49 04 08 	st.w	r8[1032],r9
						(void)AVR32_USBB.UHINTCLR;
800038dc:	f0 f8 04 08 	ld.w	r8,r8[1032]
800038e0:	c1 28       	rjmp	80003904 <USB_Host_ResetDevice+0xc8>
				}
				#elif (ARCH == ARCH_UC3)
				while (Milliseconds--)
				{
					__builtin_mtsr(AVR32_COUNT, 0);
					while ((uint32_t)__builtin_mfsr(AVR32_COUNT) < (F_CPU / 1000));
800038e2:	e1 b8 00 42 	mfsr	r8,0x108
800038e6:	e0 48 2e df 	cp.w	r8,11999
800038ea:	fe 98 ff fc 	brls	800038e2 <USB_Host_ResetDevice+0xa6>
800038ee:	c0 88       	rjmp	800038fe <USB_Host_ResetDevice+0xc2>
800038f0:	30 a9       	mov	r9,10
					  _delay_ms(1);
				}
				#elif (ARCH == ARCH_UC3)
				while (Milliseconds--)
				{
					__builtin_mtsr(AVR32_COUNT, 0);
800038f2:	30 0a       	mov	r10,0
					case USB_INT_RXSTPI:
						return (&AVR32_USBB.UESTA0)[USB_Endpoint_SelectedEndpoint].rxstpi;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return AVR32_USBB.UHINT.hsofi;
800038f4:	fe 6b 00 00 	mov	r11,-131072
800038f8:	e3 ba 00 42 	mtsr	0x108,r10
800038fc:	cf 3b       	rjmp	800038e2 <USB_Host_ResetDevice+0xa6>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
800038fe:	20 19       	sub	r9,1
80003900:	5c 59       	castu.b	r9
80003902:	cd 71       	brne	800038b0 <USB_Host_ResetDevice+0x74>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
80003904:	1c 98       	mov	r8,lr
80003906:	e2 18 00 20 	andl	r8,0x20,COH
8000390a:	c0 a0       	breq	8000391e <USB_Host_ResetDevice+0xe2>
						(&AVR32_USBB.UECON0SET)[USB_Endpoint_SelectedEndpoint].rxstpes = true;
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						AVR32_USBB.UHINTESET.hsofies  = true;
8000390c:	fe 68 00 00 	mov	r8,-131072
80003910:	f0 f9 04 18 	ld.w	r9,r8[1048]
80003914:	30 1a       	mov	r10,1
80003916:	f3 da d0 a1 	bfins	r9,r10,0x5,0x1
8000391a:	f1 49 04 18 	st.w	r8[1048],r9
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
8000391e:	e2 1c 01 00 	andl	r12,0x100,COH
80003922:	c0 a0       	breq	80003936 <USB_Host_ResetDevice+0xfa>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				AVR32_USBB.UHCON.sofe = false;
80003924:	fe 68 00 00 	mov	r8,-131072
80003928:	f0 f9 04 00 	ld.w	r9,r8[1024]
8000392c:	30 0a       	mov	r10,0
8000392e:	f3 da d1 01 	bfins	r9,r10,0x8,0x1
80003932:	f1 49 04 00 	st.w	r8[1024],r9
						break;
					case USB_INT_DCONNI:
						AVR32_USBB.UHINTESET.dconnies = true;
						break;
					case USB_INT_DDISCI:
						AVR32_USBB.UHINTESET.ddiscies = true;
80003936:	fe 68 00 00 	mov	r8,-131072
8000393a:	f0 f9 04 18 	ld.w	r9,r8[1048]
8000393e:	30 1a       	mov	r10,1
80003940:	f3 da d0 21 	bfins	r9,r10,0x1,0x1
80003944:	f1 49 04 18 	st.w	r8[1048],r9
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
80003948:	d8 02       	popm	pc
8000394a:	00 00       	add	r0,r0
8000394c:	00 00       	add	r0,r0
8000394e:	0b f3       	ld.ub	r3,r5[0x7]

80003950 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
80003950:	eb cd 40 80 	pushm	r7,lr
80003954:	20 2d       	sub	sp,8
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
80003956:	fe f8 02 92 	ld.w	r8,pc[658]
8000395a:	11 88       	ld.ub	r8,r8[0x0]
8000395c:	58 98       	cp.w	r8,9
8000395e:	e0 8b 01 41 	brhi	80003be0 <USB_Host_ProcessNextHostState+0x290>
80003962:	fe f9 02 8a 	ld.w	r9,pc[650]
80003966:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
8000396a:	fe f8 02 86 	ld.w	r8,pc[646]
8000396e:	90 07       	ld.sh	r7,r8[0x0]
80003970:	58 07       	cp.w	r7,0
80003972:	e0 80 01 37 	breq	80003be0 <USB_Host_ProcessNextHostState+0x290>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
80003976:	30 1c       	mov	r12,1
80003978:	f0 1f 00 9f 	mcall	80003bf4 <USB_Host_ProcessNextHostState+0x2a4>
8000397c:	18 9b       	mov	r11,r12
8000397e:	c0 90       	breq	80003990 <USB_Host_ProcessNextHostState+0x40>
				{
					USB_HostState = PostWaitState;
80003980:	fe f8 02 78 	ld.w	r8,pc[632]
80003984:	11 89       	ld.ub	r9,r8[0x0]
80003986:	fe f8 02 62 	ld.w	r8,pc[610]
8000398a:	b0 89       	st.b	r8[0x0],r9
8000398c:	30 1c       	mov	r12,1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
8000398e:	c2 39       	rjmp	80003bd4 <USB_Host_ProcessNextHostState+0x284>
				}

				if (!(--WaitMSRemaining))
80003990:	0e 98       	mov	r8,r7
80003992:	20 18       	sub	r8,1
80003994:	5c 88       	casts.h	r8
80003996:	fe f9 02 5a 	ld.w	r9,pc[602]
8000399a:	b2 08       	st.h	r9[0x0],r8
8000399c:	58 08       	cp.w	r8,0
8000399e:	e0 81 01 21 	brne	80003be0 <USB_Host_ProcessNextHostState+0x290>
				  USB_HostState = PostWaitState;
800039a2:	fe f8 02 56 	ld.w	r8,pc[598]
800039a6:	11 89       	ld.ub	r9,r8[0x0]
800039a8:	fe f8 02 40 	ld.w	r8,pc[576]
800039ac:	b0 89       	st.b	r8[0x0],r9
800039ae:	c1 99       	rjmp	80003be0 <USB_Host_ProcessNextHostState+0x290>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
800039b0:	e0 69 03 e8 	mov	r9,1000
800039b4:	fe f8 02 3c 	ld.w	r8,pc[572]
800039b8:	b0 09       	st.h	r8[0x0],r9

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
800039ba:	30 39       	mov	r9,3
800039bc:	fe f8 02 2c 	ld.w	r8,pc[556]
800039c0:	b0 89       	st.b	r8[0x0],r9
			break;
800039c2:	c0 f9       	rjmp	80003be0 <USB_Host_ProcessNextHostState+0x290>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
800039c4:	fe f9 02 2c 	ld.w	r9,pc[556]
800039c8:	92 08       	ld.sh	r8,r9[0x0]
800039ca:	f0 ca 00 01 	sub	r10,r8,1
800039ce:	b2 0a       	st.h	r9[0x0],r10
800039d0:	58 08       	cp.w	r8,0
800039d2:	c0 b0       	breq	800039e8 <USB_Host_ProcessNextHostState+0x98>
800039d4:	30 08       	mov	r8,0
800039d6:	e3 b8 00 42 	mtsr	0x108,r8
					while ((uint32_t)__builtin_mfsr(AVR32_COUNT) < (F_CPU / 1000));
800039da:	e1 b8 00 42 	mfsr	r8,0x108
800039de:	e0 48 2e df 	cp.w	r8,11999
800039e2:	fe 98 ff fc 	brls	800039da <USB_Host_ProcessNextHostState+0x8a>
800039e6:	cf d8       	rjmp	80003be0 <USB_Host_ProcessNextHostState+0x290>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				AVR32_USBB.USBSTACLR.vbusrqc = true;
800039e8:	fe 68 00 00 	mov	r8,-131072
800039ec:	f0 fa 08 08 	ld.w	r10,r8[2056]
800039f0:	30 19       	mov	r9,1
800039f2:	f5 d9 d1 21 	bfins	r10,r9,0x9,0x1
800039f6:	f1 4a 08 08 	st.w	r8[2056],r10

		/* Inline Functions: */
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				AVR32_USBB.USBCON.otgpade = true;
800039fa:	f0 fa 08 00 	ld.w	r10,r8[2048]
800039fe:	f5 d9 d1 81 	bfins	r10,r9,0xc,0x1
80003a02:	f1 4a 08 00 	st.w	r8[2048],r10
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				AVR32_USBB.USBCON.vbushwc = false;
80003a06:	f0 fa 08 00 	ld.w	r10,r8[2048]
80003a0a:	30 0b       	mov	r11,0
80003a0c:	f5 db d1 01 	bfins	r10,r11,0x8,0x1
80003a10:	f1 4a 08 00 	st.w	r8[2048],r10
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				AVR32_USBB.USBSTASET.vbusrqs = true;
80003a14:	f0 fa 08 0c 	ld.w	r10,r8[2060]
80003a18:	f5 d9 d1 21 	bfins	r10,r9,0x9,0x1
80003a1c:	f1 4a 08 0c 	st.w	r8[2060],r10
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
80003a20:	30 49       	mov	r9,4
80003a22:	4f 28       	lddpc	r8,80003be8 <USB_Host_ProcessNextHostState+0x298>
80003a24:	b0 89       	st.b	r8[0x0],r9
			}

			break;
80003a26:	cd d8       	rjmp	80003be0 <USB_Host_ProcessNextHostState+0x290>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return AVR32_USBB.UHINT.hsofi;
					case USB_INT_DCONNI:
						return AVR32_USBB.UHINT.dconni;
80003a28:	fe 68 00 00 	mov	r8,-131072
80003a2c:	f0 f8 04 04 	ld.w	r8,r8[1028]
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
80003a30:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003a34:	e0 80 00 d6 	breq	80003be0 <USB_Host_ProcessNextHostState+0x290>
					case USB_INT_HSOFI:
						AVR32_USBB.UHINTCLR.hsofic   = true;
						(void)AVR32_USBB.UHINTCLR;
						break;
					case USB_INT_DCONNI:
						AVR32_USBB.UHINTCLR.dconnic  = true;
80003a38:	fe 68 00 00 	mov	r8,-131072
80003a3c:	f0 fa 04 08 	ld.w	r10,r8[1032]
80003a40:	30 19       	mov	r9,1
80003a42:	f5 d9 d0 01 	bfins	r10,r9,0x0,0x1
80003a46:	f1 4a 04 08 	st.w	r8[1032],r10
						(void)AVR32_USBB.UHINTCLR;
80003a4a:	f0 fa 04 08 	ld.w	r10,r8[1032]
						break;
					case USB_INT_DDISCI:
						AVR32_USBB.UHINTCLR.ddiscic  = true;
80003a4e:	f0 fa 04 08 	ld.w	r10,r8[1032]
80003a52:	f5 d9 d0 21 	bfins	r10,r9,0x1,0x1
80003a56:	f1 4a 04 08 	st.w	r8[1032],r10
						(void)AVR32_USBB.UHINTCLR;
80003a5a:	f0 fa 04 08 	ld.w	r10,r8[1032]
					case USB_INT_BCERRI:
						AVR32_USBB.USBSTACLR.bcerric = true;
						(void)AVR32_USBB.USBSTACLR;
						break;
					case USB_INT_VBERRI:
						AVR32_USBB.USBSTACLR.vberric = true;
80003a5e:	f0 fa 08 08 	ld.w	r10,r8[2056]
80003a62:	f5 d9 d0 61 	bfins	r10,r9,0x3,0x1
80003a66:	f1 4a 08 08 	st.w	r8[2056],r10
						(void)AVR32_USBB.USBSTACLR;
80003a6a:	f0 fa 08 08 	ld.w	r10,r8[2056]
						break;
					case USB_INT_BCERRI:
						AVR32_USBB.USBCON.bcerre      = true;
						break;
					case USB_INT_VBERRI:
						AVR32_USBB.USBCON.vberre      = true;
80003a6e:	f0 fa 08 00 	ld.w	r10,r8[2048]
80003a72:	f5 d9 d0 61 	bfins	r10,r9,0x3,0x1
80003a76:	f1 4a 08 00 	st.w	r8[2048],r10
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				AVR32_USBB.UHCON.sofe = true;
80003a7a:	f0 fa 04 00 	ld.w	r10,r8[1024]
80003a7e:	f5 d9 d1 01 	bfins	r10,r9,0x8,0x1
80003a82:	f1 4a 04 00 	st.w	r8[1024],r10

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
80003a86:	f0 1f 00 5e 	mcall	80003bfc <USB_Host_ProcessNextHostState+0x2ac>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
80003a8a:	30 09       	mov	r9,0
80003a8c:	4d 78       	lddpc	r8,80003be8 <USB_Host_ProcessNextHostState+0x298>
80003a8e:	b0 89       	st.b	r8[0x0],r9
80003a90:	36 49       	mov	r9,100
80003a92:	4d 88       	lddpc	r8,80003bf0 <USB_Host_ProcessNextHostState+0x2a0>
80003a94:	b0 09       	st.h	r8[0x0],r9
80003a96:	30 59       	mov	r9,5
80003a98:	4d 88       	lddpc	r8,80003bf8 <USB_Host_ProcessNextHostState+0x2a8>
80003a9a:	b0 89       	st.b	r8[0x0],r9
80003a9c:	ca 28       	rjmp	80003be0 <USB_Host_ProcessNextHostState+0x290>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
80003a9e:	f0 1f 00 59 	mcall	80003c00 <USB_Host_ProcessNextHostState+0x2b0>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
80003aa2:	30 09       	mov	r9,0
80003aa4:	4d 18       	lddpc	r8,80003be8 <USB_Host_ProcessNextHostState+0x298>
80003aa6:	b0 89       	st.b	r8[0x0],r9
80003aa8:	e0 69 00 c8 	mov	r9,200
80003aac:	4d 18       	lddpc	r8,80003bf0 <USB_Host_ProcessNextHostState+0x2a0>
80003aae:	b0 09       	st.h	r8[0x0],r9
80003ab0:	30 69       	mov	r9,6
80003ab2:	4d 28       	lddpc	r8,80003bf8 <USB_Host_ProcessNextHostState+0x2a8>
80003ab4:	b0 89       	st.b	r8[0x0],r9
			break;
80003ab6:	c9 58       	rjmp	80003be0 <USB_Host_ProcessNextHostState+0x290>
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
80003ab8:	30 18       	mov	r8,1
80003aba:	34 09       	mov	r9,64
80003abc:	30 0a       	mov	r10,0
80003abe:	14 9b       	mov	r11,r10
80003ac0:	14 9c       	mov	r12,r10
80003ac2:	f0 1f 00 51 	mcall	80003c04 <USB_Host_ProcessNextHostState+0x2b4>
80003ac6:	e0 80 00 85 	breq	80003bd0 <USB_Host_ProcessNextHostState+0x280>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
80003aca:	30 79       	mov	r9,7
80003acc:	4c 78       	lddpc	r8,80003be8 <USB_Host_ProcessNextHostState+0x298>
80003ace:	b0 89       	st.b	r8[0x0],r9
			break;
80003ad0:	c8 88       	rjmp	80003be0 <USB_Host_ProcessNextHostState+0x290>
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
80003ad2:	30 8a       	mov	r10,8
80003ad4:	4c db       	lddpc	r11,80003c08 <USB_Host_ProcessNextHostState+0x2b8>
80003ad6:	4c ec       	lddpc	r12,80003c0c <USB_Host_ProcessNextHostState+0x2bc>
80003ad8:	f0 1f 00 4e 	mcall	80003c10 <USB_Host_ProcessNextHostState+0x2c0>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				USB_Pipe_SelectedPipe = (Address & PIPE_EPNUM_MASK);
80003adc:	30 09       	mov	r9,0
80003ade:	4c e8       	lddpc	r8,80003c14 <USB_Host_ProcessNextHostState+0x2c4>
80003ae0:	91 09       	st.w	r8[0x0],r9
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
80003ae2:	1a 9c       	mov	r12,sp
80003ae4:	f0 1f 00 4d 	mcall	80003c18 <USB_Host_ProcessNextHostState+0x2c8>
80003ae8:	18 9b       	mov	r11,r12
80003aea:	c7 11       	brne	80003bcc <USB_Host_ProcessNextHostState+0x27c>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
80003aec:	1b f9       	ld.ub	r9,sp[0x7]
80003aee:	4c c8       	lddpc	r8,80003c1c <USB_Host_ProcessNextHostState+0x2cc>
80003af0:	b0 89       	st.b	r8[0x0],r9

			USB_Host_ResetDevice();
80003af2:	f0 1f 00 44 	mcall	80003c00 <USB_Host_ProcessNextHostState+0x2b0>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
80003af6:	30 09       	mov	r9,0
80003af8:	4b c8       	lddpc	r8,80003be8 <USB_Host_ProcessNextHostState+0x298>
80003afa:	b0 89       	st.b	r8[0x0],r9
80003afc:	e0 69 00 c8 	mov	r9,200
80003b00:	4b c8       	lddpc	r8,80003bf0 <USB_Host_ProcessNextHostState+0x2a0>
80003b02:	b0 09       	st.h	r8[0x0],r9
80003b04:	30 89       	mov	r9,8
80003b06:	4b d8       	lddpc	r8,80003bf8 <USB_Host_ProcessNextHostState+0x2a8>
80003b08:	b0 89       	st.b	r8[0x0],r9
			break;
80003b0a:	c6 b8       	rjmp	80003be0 <USB_Host_ProcessNextHostState+0x290>
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
80003b0c:	30 18       	mov	r8,1
80003b0e:	4c 49       	lddpc	r9,80003c1c <USB_Host_ProcessNextHostState+0x2cc>
80003b10:	13 89       	ld.ub	r9,r9[0x0]
80003b12:	30 0a       	mov	r10,0
80003b14:	14 9b       	mov	r11,r10
80003b16:	14 9c       	mov	r12,r10
80003b18:	f0 1f 00 3b 	mcall	80003c04 <USB_Host_ProcessNextHostState+0x2b4>
80003b1c:	c5 a0       	breq	80003bd0 <USB_Host_ProcessNextHostState+0x280>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
80003b1e:	30 8a       	mov	r10,8
80003b20:	4c 0b       	lddpc	r11,80003c20 <USB_Host_ProcessNextHostState+0x2d0>
80003b22:	4b bc       	lddpc	r12,80003c0c <USB_Host_ProcessNextHostState+0x2bc>
80003b24:	f0 1f 00 3b 	mcall	80003c10 <USB_Host_ProcessNextHostState+0x2c0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
80003b28:	30 0c       	mov	r12,0
80003b2a:	f0 1f 00 3c 	mcall	80003c18 <USB_Host_ProcessNextHostState+0x2c8>
80003b2e:	18 9b       	mov	r11,r12
80003b30:	c4 e1       	brne	80003bcc <USB_Host_ProcessNextHostState+0x27c>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
80003b32:	30 09       	mov	r9,0
80003b34:	4a d8       	lddpc	r8,80003be8 <USB_Host_ProcessNextHostState+0x298>
80003b36:	b0 89       	st.b	r8[0x0],r9
80003b38:	36 49       	mov	r9,100
80003b3a:	4a e8       	lddpc	r8,80003bf0 <USB_Host_ProcessNextHostState+0x2a0>
80003b3c:	b0 09       	st.h	r8[0x0],r9
80003b3e:	30 99       	mov	r9,9
80003b40:	4a e8       	lddpc	r8,80003bf8 <USB_Host_ProcessNextHostState+0x2a8>
80003b42:	b0 89       	st.b	r8[0x0],r9
			break;
80003b44:	c4 e8       	rjmp	80003be0 <USB_Host_ProcessNextHostState+0x290>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				AVR32_USBB.UHADDR1.uhaddr_p0 = Address;
80003b46:	fe 68 00 00 	mov	r8,-131072
80003b4a:	f0 fa 04 24 	ld.w	r10,r8[1060]
80003b4e:	30 19       	mov	r9,1
80003b50:	f5 d9 d0 07 	bfins	r10,r9,0x0,0x7
80003b54:	f1 4a 04 24 	st.w	r8[1060],r10
				AVR32_USBB.UHADDR1.uhaddr_p1 = Address;
80003b58:	f0 fa 04 24 	ld.w	r10,r8[1060]
80003b5c:	f5 d9 d1 07 	bfins	r10,r9,0x8,0x7
80003b60:	f1 4a 04 24 	st.w	r8[1060],r10
				AVR32_USBB.UHADDR1.uhaddr_p2 = Address;
80003b64:	f0 fa 04 24 	ld.w	r10,r8[1060]
80003b68:	f5 d9 d2 07 	bfins	r10,r9,0x10,0x7
80003b6c:	f1 4a 04 24 	st.w	r8[1060],r10
				AVR32_USBB.UHADDR1.uhaddr_p3 = Address;
80003b70:	f0 fa 04 24 	ld.w	r10,r8[1060]
80003b74:	f5 d9 d3 07 	bfins	r10,r9,0x18,0x7
80003b78:	f1 4a 04 24 	st.w	r8[1060],r10
				AVR32_USBB.UHADDR2.uhaddr_p4 = Address;
80003b7c:	f0 fa 04 28 	ld.w	r10,r8[1064]
80003b80:	f5 d9 d0 07 	bfins	r10,r9,0x0,0x7
80003b84:	f1 4a 04 28 	st.w	r8[1064],r10
				AVR32_USBB.UHADDR2.uhaddr_p5 = Address;
80003b88:	f0 fa 04 28 	ld.w	r10,r8[1064]
80003b8c:	f5 d9 d1 07 	bfins	r10,r9,0x8,0x7
80003b90:	f1 4a 04 28 	st.w	r8[1064],r10
				AVR32_USBB.UHADDR2.uhaddr_p6 = Address;
80003b94:	f0 fa 04 28 	ld.w	r10,r8[1064]
80003b98:	f5 d9 d2 07 	bfins	r10,r9,0x10,0x7
80003b9c:	f1 4a 04 28 	st.w	r8[1064],r10
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
80003ba0:	30 a9       	mov	r9,10
80003ba2:	49 28       	lddpc	r8,80003be8 <USB_Host_ProcessNextHostState+0x298>
80003ba4:	b0 89       	st.b	r8[0x0],r9

			EVENT_USB_Host_DeviceEnumerationComplete();
80003ba6:	f0 1f 00 20 	mcall	80003c24 <USB_Host_ProcessNextHostState+0x2d4>
80003baa:	c1 b8       	rjmp	80003be0 <USB_Host_ProcessNextHostState+0x290>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
80003bac:	f0 1f 00 1f 	mcall	80003c28 <USB_Host_ProcessNextHostState+0x2d8>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				AVR32_USBB.USBSTACLR.vbusrqc = true;
80003bb0:	fe 68 00 00 	mov	r8,-131072
80003bb4:	f0 f9 08 08 	ld.w	r9,r8[2056]
80003bb8:	30 1a       	mov	r10,1
80003bba:	f3 da d1 21 	bfins	r9,r10,0x9,0x1
80003bbe:	f1 49 08 08 	st.w	r8[2056],r9

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
80003bc2:	f0 1f 00 1b 	mcall	80003c2c <USB_Host_ProcessNextHostState+0x2dc>

		USB_ResetInterface();
80003bc6:	f0 1f 00 1b 	mcall	80003c30 <USB_Host_ProcessNextHostState+0x2e0>
80003bca:	c0 b8       	rjmp	80003be0 <USB_Host_ProcessNextHostState+0x290>
	}
}
80003bcc:	30 3c       	mov	r12,3
80003bce:	c0 38       	rjmp	80003bd4 <USB_Host_ProcessNextHostState+0x284>
80003bd0:	30 0b       	mov	r11,0
80003bd2:	30 4c       	mov	r12,4

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
80003bd4:	48 58       	lddpc	r8,80003be8 <USB_Host_ProcessNextHostState+0x298>
80003bd6:	11 89       	ld.ub	r9,r8[0x0]
80003bd8:	30 18       	mov	r8,1
80003bda:	f0 09 18 00 	cp.b	r9,r8
80003bde:	ce 71       	brne	80003bac <USB_Host_ProcessNextHostState+0x25c>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
80003be0:	2f ed       	sub	sp,-8
80003be2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003be6:	00 00       	add	r0,r0
80003be8:	00 00       	add	r0,r0
80003bea:	09 4d       	ld.w	sp,--r4
80003bec:	80 00       	ld.sh	r0,r0[0x0]
80003bee:	ee 00 00 00 	add	r0,r7,r0
80003bf2:	09 56       	ld.sh	r6,--r4
80003bf4:	80 00       	ld.sh	r0,r0[0x0]
80003bf6:	37 04       	mov	r4,112
80003bf8:	00 00       	add	r0,r0
80003bfa:	09 54       	ld.sh	r4,--r4
80003bfc:	80 00       	ld.sh	r0,r0[0x0]
80003bfe:	3e 3c       	mov	r12,-29
80003c00:	80 00       	ld.sh	r0,r0[0x0]
80003c02:	38 3c       	mov	r12,-125
80003c04:	80 00       	ld.sh	r0,r0[0x0]
80003c06:	3c f8       	mov	r8,-49
80003c08:	80 00       	ld.sh	r0,r0[0x0]
80003c0a:	ee 30 00 00 	sub	r0,983040
80003c0e:	0b f6       	ld.ub	r6,r5[0x7]
80003c10:	80 00       	ld.sh	r0,r0[0x0]
80003c12:	95 e4       	st.w	r10[0x38],r4
80003c14:	00 00       	add	r0,r0
80003c16:	09 58       	ld.sh	r8,--r4
80003c18:	80 00       	ld.sh	r0,r0[0x0]
80003c1a:	30 88       	mov	r8,8
80003c1c:	00 00       	add	r0,r0
80003c1e:	00 c1       	st.b	r0++,r1
80003c20:	80 00       	ld.sh	r0,r0[0x0]
80003c22:	ee 28 80 00 	sub	r8,950272
80003c26:	34 e8       	mov	r8,78
80003c28:	80 00       	ld.sh	r0,r0[0x0]
80003c2a:	34 e8       	mov	r8,78
80003c2c:	80 00       	ld.sh	r0,r0[0x0]
80003c2e:	34 e8       	mov	r8,78
80003c30:	80 00       	ld.sh	r0,r0[0x0]
80003c32:	3f 00       	mov	r0,-16

80003c34 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
80003c34:	d4 31       	pushm	r0-r7,lr
80003c36:	20 1d       	sub	sp,4
80003c38:	18 93       	mov	r3,r12
80003c3a:	16 96       	mov	r6,r11
80003c3c:	14 91       	mov	r1,r10
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				(&AVR32_USBB.UPCFG0)[USB_Pipe_SelectedPipe].ptoken = Token;
80003c3e:	4a c8       	lddpc	r8,80003cec <Pipe_Read_Stream_LE+0xb8>
80003c40:	70 08       	ld.w	r8,r8[0x0]
80003c42:	a3 68       	lsl	r8,0x2
80003c44:	e0 38 fb 00 	sub	r8,129792
80003c48:	70 09       	ld.w	r9,r8[0x0]
80003c4a:	30 1a       	mov	r10,1
80003c4c:	f3 da d1 02 	bfins	r9,r10,0x8,0x2
80003c50:	91 09       	st.w	r8[0x0],r9
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
80003c52:	f0 1f 00 28 	mcall	80003cf0 <Pipe_Read_Stream_LE+0xbc>
80003c56:	50 0c       	stdsp	sp[0x0],r12
80003c58:	c4 71       	brne	80003ce6 <Pipe_Read_Stream_LE+0xb2>
	  return ErrorCode;

	if (BytesProcessed != NULL)
80003c5a:	58 01       	cp.w	r1,0
80003c5c:	c0 60       	breq	80003c68 <Pipe_Read_Stream_LE+0x34>
	{
		Length -= *BytesProcessed;
80003c5e:	82 08       	ld.sh	r8,r1[0x0]
80003c60:	10 16       	sub	r6,r8
80003c62:	5c 86       	casts.h	r6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
80003c64:	5c 78       	castu.h	r8
80003c66:	10 03       	add	r3,r8
	}

	while (Length)
80003c68:	58 06       	cp.w	r6,0
80003c6a:	c3 e0       	breq	80003ce6 <Pipe_Read_Stream_LE+0xb2>
80003c6c:	30 04       	mov	r4,0
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].rwall;
80003c6e:	4a 07       	lddpc	r7,80003cec <Pipe_Read_Stream_LE+0xb8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return *(USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe]++);
80003c70:	4a 15       	lddpc	r5,80003cf4 <Pipe_Read_Stream_LE+0xc0>
			 *  \ingroup Group_PipePacketManagement_UC3
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				(&AVR32_USBB.UPSTA0CLR)[USB_Pipe_SelectedPipe].rxinic   = true;
80003c72:	30 12       	mov	r2,1
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].fifoconc = true;
				USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe] = &AVR32_USBB_SLAVE[USB_Pipe_SelectedPipe * PIPE_HSB_ADDRESS_SPACE_SIZE];
80003c74:	fc 10 e0 00 	movh	r0,0xe000
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].rwall;
80003c78:	6e 08       	ld.w	r8,r7[0x0]
80003c7a:	a3 68       	lsl	r8,0x2
80003c7c:	e0 38 fa d0 	sub	r8,129744
80003c80:	70 08       	ld.w	r8,r8[0x0]
	{
		if (!(Pipe_IsReadWriteAllowed()))
80003c82:	e6 18 00 01 	andh	r8,0x1,COH
80003c86:	c2 31       	brne	80003ccc <Pipe_Read_Stream_LE+0x98>
			 *  \ingroup Group_PipePacketManagement_UC3
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				(&AVR32_USBB.UPSTA0CLR)[USB_Pipe_SelectedPipe].rxinic   = true;
80003c88:	6e 08       	ld.w	r8,r7[0x0]
80003c8a:	a3 68       	lsl	r8,0x2
80003c8c:	e0 38 fa a0 	sub	r8,129696
80003c90:	70 09       	ld.w	r9,r8[0x0]
80003c92:	f3 d2 d0 01 	bfins	r9,r2,0x0,0x1
80003c96:	91 09       	st.w	r8[0x0],r9
				(&AVR32_USBB.UPCON0CLR)[USB_Pipe_SelectedPipe].fifoconc = true;
80003c98:	6e 08       	ld.w	r8,r7[0x0]
80003c9a:	a3 68       	lsl	r8,0x2
80003c9c:	e0 38 f9 e0 	sub	r8,129504
80003ca0:	70 09       	ld.w	r9,r8[0x0]
80003ca2:	f3 d2 d1 c1 	bfins	r9,r2,0xe,0x1
80003ca6:	91 09       	st.w	r8[0x0],r9
				USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe] = &AVR32_USBB_SLAVE[USB_Pipe_SelectedPipe * PIPE_HSB_ADDRESS_SPACE_SIZE];
80003ca8:	6e 08       	ld.w	r8,r7[0x0]
80003caa:	6e 09       	ld.w	r9,r7[0x0]
80003cac:	b1 69       	lsl	r9,0x10
80003cae:	00 09       	add	r9,r0
80003cb0:	ea 08 09 29 	st.w	r5[r8<<0x2],r9
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
80003cb4:	58 01       	cp.w	r1,0
80003cb6:	c0 70       	breq	80003cc4 <Pipe_Read_Stream_LE+0x90>
			{
				*BytesProcessed += BytesInTransfer;
80003cb8:	82 08       	ld.sh	r8,r1[0x0]
80003cba:	f0 04 00 04 	add	r4,r8,r4
80003cbe:	a2 04       	st.h	r1[0x0],r4
80003cc0:	30 4c       	mov	r12,4
				return PIPE_RWSTREAM_IncompleteTransfer;
80003cc2:	c1 38       	rjmp	80003ce8 <Pipe_Read_Stream_LE+0xb4>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
80003cc4:	f0 1f 00 0b 	mcall	80003cf0 <Pipe_Read_Stream_LE+0xbc>
80003cc8:	c0 d0       	breq	80003ce2 <Pipe_Read_Stream_LE+0xae>
80003cca:	c0 f8       	rjmp	80003ce8 <Pipe_Read_Stream_LE+0xb4>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return *(USB_Pipe_FIFOPos[USB_Pipe_SelectedPipe]++);
80003ccc:	6e 09       	ld.w	r9,r7[0x0]
80003cce:	ea 09 03 28 	ld.w	r8,r5[r9<<0x2]
80003cd2:	11 3a       	ld.ub	r10,r8++
80003cd4:	ea 09 09 28 	st.w	r5[r9<<0x2],r8
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
80003cd8:	06 ca       	st.b	r3++,r10
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
80003cda:	20 16       	sub	r6,1
80003cdc:	5c 86       	casts.h	r6
			BytesInTransfer++;
80003cde:	2f f4       	sub	r4,-1
80003ce0:	5c 84       	casts.h	r4
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
80003ce2:	58 06       	cp.w	r6,0
80003ce4:	cc a1       	brne	80003c78 <Pipe_Read_Stream_LE+0x44>
80003ce6:	40 0c       	lddsp	r12,sp[0x0]
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
80003ce8:	2f fd       	sub	sp,-4
80003cea:	d8 32       	popm	r0-r7,pc
80003cec:	00 00       	add	r0,r0
80003cee:	09 58       	ld.sh	r8,--r4
80003cf0:	80 00       	ld.sh	r0,r0[0x0]
80003cf2:	3e 9c       	mov	r12,-23
80003cf4:	00 00       	add	r0,r0
80003cf6:	0c 1c       	sub	r12,r6

80003cf8 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
80003cf8:	d4 31       	pushm	r0-r7,lr
80003cfa:	20 2d       	sub	sp,8
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
80003cfc:	e7 dc c0 04 	bfextu	r3,r12,0x0,0x4
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
80003d00:	30 0e       	mov	lr,0
80003d02:	f8 0e 18 00 	cp.b	lr,r12
80003d06:	f9 bc 09 01 	movgt	r12,1
80003d0a:	f9 bc 0a 02 	movle	r12,2

	if (Number >= PIPE_TOTAL_PIPES)
80003d0e:	30 6e       	mov	lr,6
80003d10:	fc 03 18 00 	cp.b	r3,lr
80003d14:	e0 8b 00 8d 	brhi	80003e2e <Pipe_ConfigurePipe+0x136>
	  return false;

	if (Type == EP_TYPE_CONTROL)
80003d18:	58 0b       	cp.w	r11,0
80003d1a:	f9 bc 00 00 	moveq	r12,0
	  Token = PIPE_TOKEN_SETUP;

	USB_Pipe_FIFOPos[Number]     = &AVR32_USBB_SLAVE[Number * PIPE_HSB_ADDRESS_SPACE_SIZE];
80003d1e:	50 13       	stdsp	sp[0x4],r3
80003d20:	e6 07 15 10 	lsl	r7,r3,0x10
80003d24:	fc 1e e0 00 	movh	lr,0xe000
80003d28:	1c 07       	add	r7,lr
80003d2a:	4c 3e       	lddpc	lr,80003e34 <Pipe_ConfigurePipe+0x13c>
80003d2c:	fc 03 09 27 	st.w	lr[r3<<0x2],r7

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0Temp = (AVR32_USBB_ALLOC_MASK |
80003d30:	ad 6b       	lsl	r11,0xc
80003d32:	a1 bb       	sbr	r11,0x1
80003d34:	f5 da c0 04 	bfextu	r10,r10,0x0,0x4
80003d38:	f7 ea 11 0a 	or	r10,r11,r10<<0x10
80003d3c:	f5 ec 10 8c 	or	r12,r10,r12<<0x8
80003d40:	06 9a       	mov	r10,r3
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				USB_Pipe_SelectedPipe = (Address & PIPE_EPNUM_MASK);
80003d42:	4b eb       	lddpc	r11,80003e38 <Pipe_ConfigurePipe+0x140>
80003d44:	30 11       	mov	r1,1
80003d46:	f0 01 18 00 	cp.b	r1,r8
80003d4a:	f9 be 03 0c 	movlo	lr,12
80003d4e:	f9 be 02 00 	movhs	lr,0
80003d52:	18 4e       	or	lr,r12
80003d54:	50 0e       	stdsp	sp[0x0],lr
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
80003d56:	e0 6e 00 ff 	mov	lr,255
80003d5a:	30 0c       	mov	r12,0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				USB_Pipe_SelectedPipe = (Address & PIPE_EPNUM_MASK);
80003d5c:	14 95       	mov	r5,r10
80003d5e:	ef da c0 04 	bfextu	r7,r10,0x0,0x4
80003d62:	97 07       	st.w	r11[0x0],r7
	{
		uint32_t UPCFG0Temp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
80003d64:	e6 0a 18 00 	cp.b	r10,r3
80003d68:	c1 f1       	brne	80003da6 <Pipe_ConfigurePipe+0xae>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
80003d6a:	30 87       	mov	r7,8
80003d6c:	ee 09 19 00 	cp.h	r9,r7
80003d70:	e0 8b 00 04 	brhi	80003d78 <Pipe_ConfigurePipe+0x80>
80003d74:	30 07       	mov	r7,0
80003d76:	c1 28       	rjmp	80003d9a <Pipe_ConfigurePipe+0xa2>
80003d78:	30 86       	mov	r6,8
80003d7a:	30 07       	mov	r7,0
				{
					MaskVal++;
80003d7c:	2f f7       	sub	r7,-1
80003d7e:	5c 57       	castu.b	r7
					CheckBytes <<= 1;
80003d80:	a1 76       	lsl	r6,0x1
80003d82:	5c 86       	casts.h	r6
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
80003d84:	ec 09 19 00 	cp.h	r9,r6
80003d88:	5f b2       	srhi	r2
80003d8a:	fc 06 19 00 	cp.h	r6,lr
80003d8e:	5f 84       	srls	r4
80003d90:	08 62       	and	r2,r4
80003d92:	04 94       	mov	r4,r2
80003d94:	f8 02 18 00 	cp.b	r2,r12
80003d98:	cf 21       	brne	80003d7c <Pipe_ConfigurePipe+0x84>
		{
			UPCFG0Temp = (AVR32_USBB_ALLOC_MASK |
80003d9a:	a5 67       	lsl	r7,0x4
80003d9c:	5c 57       	castu.b	r7
80003d9e:	40 06       	lddsp	r6,sp[0x0]
80003da0:	ed e7 10 07 	or	r7,r6,r7
80003da4:	c0 68       	rjmp	80003db0 <Pipe_ConfigurePipe+0xb8>
			              Pipe_BytesToEPSizeMask(Size) |
			              ((EndpointAddress & PIPE_EPNUM_MASK) << AVR32_USBB_PEPNUM_OFFSET));
		}
		else
		{
			UPCFG0Temp = (&AVR32_USBB.upcfg0)[PNum];
80003da6:	f4 07 15 02 	lsl	r7,r10,0x2
80003daa:	e0 37 fb 00 	sub	r7,129792
80003dae:	6e 07       	ld.w	r7,r7[0x0]
		}

		if (!(UPCFG0Temp & AVR32_USBB_ALLOC_MASK))
80003db0:	0e 96       	mov	r6,r7
80003db2:	e2 16 00 02 	andl	r6,0x2,COH
80003db6:	c2 e0       	breq	80003e12 <Pipe_ConfigurePipe+0x11a>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				AVR32_USBB.uprst &= ~(AVR32_USBB_PEN0_MASK << USB_Pipe_SelectedPipe);
80003db8:	fe 66 00 00 	mov	r6,-131072
80003dbc:	ec f2 04 1c 	ld.w	r2,r6[1052]
80003dc0:	76 00       	ld.w	r0,r11[0x0]
80003dc2:	30 14       	mov	r4,1
80003dc4:	e8 00 09 40 	lsl	r0,r4,r0
80003dc8:	5c d0       	com	r0
80003dca:	e1 e2 00 02 	and	r2,r0,r2
80003dce:	ed 42 04 1c 	st.w	r6[1052],r2
		  continue;

		Pipe_DisablePipe();
		(&AVR32_USBB.upcfg0)[PNum] &= ~AVR32_USBB_ALLOC_MASK;
80003dd2:	a3 65       	lsl	r5,0x2
80003dd4:	e0 35 fb 00 	sub	r5,129792
80003dd8:	6a 02       	ld.w	r2,r5[0x0]
80003dda:	a1 d2       	cbr	r2,0x1
80003ddc:	8b 02       	st.w	r5[0x0],r2
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				AVR32_USBB.uprst |=  (AVR32_USBB_PEN0_MASK << USB_Pipe_SelectedPipe);
80003dde:	ec f2 04 1c 	ld.w	r2,r6[1052]
80003de2:	76 00       	ld.w	r0,r11[0x0]
80003de4:	e8 00 09 40 	lsl	r0,r4,r0
80003de8:	e1 e2 10 02 	or	r2,r0,r2
80003dec:	ed 42 04 1c 	st.w	r6[1052],r2

		Pipe_EnablePipe();
		(&AVR32_USBB.upcfg0)[PNum] = UPCFG0Temp;
80003df0:	8b 07       	st.w	r5[0x0],r7

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				(&AVR32_USBB.UPINRQ0)[USB_Pipe_SelectedPipe].inmode = true;
80003df2:	76 07       	ld.w	r7,r11[0x0]
80003df4:	a3 67       	lsl	r7,0x2
80003df6:	e0 37 f9 b0 	sub	r7,129456
80003dfa:	6e 06       	ld.w	r6,r7[0x0]
80003dfc:	ed d4 d1 01 	bfins	r6,r4,0x8,0x1
80003e00:	8f 06       	st.w	r7[0x0],r6
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].cfgok;
80003e02:	76 07       	ld.w	r7,r11[0x0]
80003e04:	a3 67       	lsl	r7,0x2
80003e06:	e0 37 fa d0 	sub	r7,129744
80003e0a:	6e 07       	ld.w	r7,r7[0x0]

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
80003e0c:	e6 17 00 04 	andh	r7,0x4,COH
80003e10:	c0 f0       	breq	80003e2e <Pipe_ConfigurePipe+0x136>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
80003e12:	2f fa       	sub	r10,-1
80003e14:	5c 5a       	castu.b	r10
80003e16:	30 67       	mov	r7,6
80003e18:	ee 0a 18 00 	cp.b	r10,r7
80003e1c:	fe 98 ff a0 	brls	80003d5c <Pipe_ConfigurePipe+0x64>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				USB_Pipe_SelectedPipe = (Address & PIPE_EPNUM_MASK);
80003e20:	40 18       	lddsp	r8,sp[0x4]
80003e22:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80003e26:	48 58       	lddpc	r8,80003e38 <Pipe_ConfigurePipe+0x140>
80003e28:	91 09       	st.w	r8[0x0],r9
80003e2a:	30 1c       	mov	r12,1
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
80003e2c:	c0 28       	rjmp	80003e30 <Pipe_ConfigurePipe+0x138>
80003e2e:	30 0c       	mov	r12,0
#endif
}
80003e30:	2f ed       	sub	sp,-8
80003e32:	d8 32       	popm	r0-r7,pc
80003e34:	00 00       	add	r0,r0
80003e36:	0c 1c       	sub	r12,r6
80003e38:	00 00       	add	r0,r0
80003e3a:	09 58       	ld.sh	r8,--r4

80003e3c <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
80003e3c:	eb cd 40 fc 	pushm	r2-r7,lr
80003e40:	fc 1c e0 00 	movh	r12,0xe000
80003e44:	fe 68 05 00 	mov	r8,-129792
80003e48:	30 09       	mov	r9,0
80003e4a:	49 3b       	lddpc	r11,80003e94 <Pipe_ClearPipes+0x58>
	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		(&AVR32_USBB.upcfg0)[PNum]    = 0;
80003e4c:	12 95       	mov	r5,r9
		(&AVR32_USBB.upcon0clr)[PNum] = -1;
80003e4e:	3f f6       	mov	r6,-1
		USB_Pipe_FIFOPos[PNum]        = &AVR32_USBB_SLAVE[PNum * 0x10000];
80003e50:	49 27       	lddpc	r7,80003e98 <Pipe_ClearPipes+0x5c>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				AVR32_USBB.uprst &= ~(AVR32_USBB_PEN0_MASK << USB_Pipe_SelectedPipe);
80003e52:	fe 6a 00 00 	mov	r10,-131072
80003e56:	30 1e       	mov	lr,1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				USB_Pipe_SelectedPipe = (Address & PIPE_EPNUM_MASK);
80003e58:	e9 d9 c0 04 	bfextu	r4,r9,0x0,0x4
80003e5c:	97 04       	st.w	r11[0x0],r4
void Pipe_ClearPipes(void)
{
	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		(&AVR32_USBB.upcfg0)[PNum]    = 0;
80003e5e:	91 05       	st.w	r8[0x0],r5
80003e60:	f0 c4 fe e0 	sub	r4,r8,-288
		(&AVR32_USBB.upcon0clr)[PNum] = -1;
80003e64:	89 06       	st.w	r4[0x0],r6
		USB_Pipe_FIFOPos[PNum]        = &AVR32_USBB_SLAVE[PNum * 0x10000];
80003e66:	f0 07 00 04 	add	r4,r8,r7
80003e6a:	fe 24 05 00 	sub	r4,-129792
80003e6e:	89 0c       	st.w	r4[0x0],r12
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				AVR32_USBB.uprst &= ~(AVR32_USBB_PEN0_MASK << USB_Pipe_SelectedPipe);
80003e70:	f4 f3 04 1c 	ld.w	r3,r10[1052]
80003e74:	76 04       	ld.w	r4,r11[0x0]
80003e76:	fc 04 09 44 	lsl	r4,lr,r4
80003e7a:	5c d4       	com	r4
80003e7c:	06 64       	and	r4,r3
80003e7e:	f5 44 04 1c 	st.w	r10[1052],r4
80003e82:	2f f9       	sub	r9,-1
80003e84:	2f c8       	sub	r8,-4
80003e86:	fe 3c 00 00 	sub	r12,-65536
#endif
}

void Pipe_ClearPipes(void)
{
	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
80003e8a:	58 79       	cp.w	r9,7
80003e8c:	ce 61       	brne	80003e58 <Pipe_ClearPipes+0x1c>
		(&AVR32_USBB.upcfg0)[PNum]    = 0;
		(&AVR32_USBB.upcon0clr)[PNum] = -1;
		USB_Pipe_FIFOPos[PNum]        = &AVR32_USBB_SLAVE[PNum * 0x10000];
		Pipe_DisablePipe();
	}
}
80003e8e:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003e92:	00 00       	add	r0,r0
80003e94:	00 00       	add	r0,r0
80003e96:	09 58       	ld.sh	r8,--r4
80003e98:	00 00       	add	r0,r0
80003e9a:	0c 1c       	sub	r12,r6

80003e9c <Pipe_WaitUntilReady>:
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (&AVR32_USBB.UPCFG0)[USB_Pipe_SelectedPipe].ptoken;
80003e9c:	49 78       	lddpc	r8,80003ef8 <Pipe_WaitUntilReady+0x5c>

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
80003e9e:	30 19       	mov	r9,1
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
80003ea0:	49 7b       	lddpc	r11,80003efc <Pipe_WaitUntilReady+0x60>
80003ea2:	70 0a       	ld.w	r10,r8[0x0]
80003ea4:	a3 6a       	lsl	r10,0x2
80003ea6:	e0 3a fb 00 	sub	r10,129792
80003eaa:	74 0a       	ld.w	r10,r10[0x0]
80003eac:	f5 da c1 02 	bfextu	r10,r10,0x8,0x2

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
80003eb0:	f2 0a 18 00 	cp.b	r10,r9
80003eb4:	c0 a1       	brne	80003ec8 <Pipe_WaitUntilReady+0x2c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].rxini;
80003eb6:	70 0a       	ld.w	r10,r8[0x0]
80003eb8:	a3 6a       	lsl	r10,0x2
80003eba:	e0 3a fa d0 	sub	r10,129744
80003ebe:	74 0a       	ld.w	r10,r10[0x0]
		{
			if (Pipe_IsINReceived())
80003ec0:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80003ec4:	c0 a0       	breq	80003ed8 <Pipe_WaitUntilReady+0x3c>
80003ec6:	c1 88       	rjmp	80003ef6 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].txouti;
80003ec8:	70 0a       	ld.w	r10,r8[0x0]
80003eca:	a3 6a       	lsl	r10,0x2
80003ecc:	e0 3a fa d0 	sub	r10,129744
80003ed0:	74 0a       	ld.w	r10,r10[0x0]
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
80003ed2:	e2 1a 00 02 	andl	r10,0x2,COH
80003ed6:	c1 01       	brne	80003ef6 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return (&AVR32_USBB.UPSTA0)[USB_Pipe_SelectedPipe].rxstalldi;
80003ed8:	70 0a       	ld.w	r10,r8[0x0]
80003eda:	a3 6a       	lsl	r10,0x2
80003edc:	e0 3a fa d0 	sub	r10,129744
80003ee0:	74 0a       	ld.w	r10,r10[0x0]
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
80003ee2:	e2 1a 00 40 	andl	r10,0x40,COH
80003ee6:	c0 20       	breq	80003eea <Pipe_WaitUntilReady+0x4e>
80003ee8:	5e ff       	retal	1
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
80003eea:	17 8a       	ld.ub	r10,r11[0x0]
80003eec:	f2 0a 18 00 	cp.b	r10,r9
80003ef0:	cd 91       	brne	80003ea2 <Pipe_WaitUntilReady+0x6>
80003ef2:	30 2c       	mov	r12,2
80003ef4:	5e fc       	retal	r12
80003ef6:	5e fd       	retal	0
80003ef8:	00 00       	add	r0,r0
80003efa:	09 58       	ld.sh	r8,--r4
80003efc:	00 00       	add	r0,r0
80003efe:	09 4d       	ld.w	sp,--r4

80003f00 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
80003f00:	eb cd 40 c0 	pushm	r6-r7,lr
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = AVR32_USBB.USBCON.uide;
80003f04:	fe 68 00 00 	mov	r8,-131072
80003f08:	f0 f6 08 00 	ld.w	r6,r8[2048]
	#endif

	AVR32_PM.GCCTRL[AVR32_PM_GCLK_USBB].pllsel = !(USB_Options & USB_OPT_GCLK_SRC_OSC);
80003f0c:	fe f9 02 00 	ld.w	r9,pc[512]
80003f10:	13 8b       	ld.ub	r11,r9[0x0]
80003f12:	ec 1b 00 04 	eorl	r11,0x4
80003f16:	f7 db c0 41 	bfextu	r11,r11,0x2,0x1
80003f1a:	fe 78 0c 00 	mov	r8,-62464
80003f1e:	71 ca       	ld.w	r10,r8[0x70]
80003f20:	f5 db d0 21 	bfins	r10,r11,0x1,0x1
80003f24:	f1 4a 00 70 	st.w	r8[112],r10
	AVR32_PM.GCCTRL[AVR32_PM_GCLK_USBB].oscsel = !(USB_Options & USB_OPT_GCLK_CHANNEL_0);
80003f28:	13 8a       	ld.ub	r10,r9[0x0]
80003f2a:	ec 1a 00 08 	eorl	r10,0x8
80003f2e:	f5 da c0 61 	bfextu	r10,r10,0x3,0x1
80003f32:	71 c9       	ld.w	r9,r8[0x70]
80003f34:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80003f38:	f1 49 00 70 	st.w	r8[112],r9
	AVR32_PM.GCCTRL[AVR32_PM_GCLK_USBB].diven  = (F_USB != USB_CLOCK_REQUIRED_FREQ);
80003f3c:	4f 59       	lddpc	r9,80004110 <USB_ResetInterface+0x210>
80003f3e:	72 0b       	ld.w	r11,r9[0x0]
80003f40:	e0 69 6c 00 	mov	r9,27648
80003f44:	ea 19 02 dc 	orh	r9,0x2dc
80003f48:	12 3b       	cp.w	r11,r9
80003f4a:	5f 19       	srne	r9
80003f4c:	71 ca       	ld.w	r10,r8[0x70]
80003f4e:	f5 d9 d0 81 	bfins	r10,r9,0x4,0x1
80003f52:	f1 4a 00 70 	st.w	r8[112],r10
	AVR32_PM.GCCTRL[AVR32_PM_GCLK_USBB].div    = (F_USB == USB_CLOCK_REQUIRED_FREQ) ? 0 : (uint32_t)((F_USB / USB_CLOCK_REQUIRED_FREQ / 2) - 1);
80003f56:	58 09       	cp.w	r9,0
80003f58:	c0 31       	brne	80003f5e <USB_ResetInterface+0x5e>
80003f5a:	30 0b       	mov	r11,0
80003f5c:	c0 a8       	rjmp	80003f70 <USB_ResetInterface+0x70>
80003f5e:	e0 68 9f 81 	mov	r8,40833
80003f62:	ea 18 16 5e 	orh	r8,0x165e
80003f66:	f6 08 06 4a 	mulu.d	r10,r11,r8
80003f6a:	b7 9b       	lsr	r11,0x17
80003f6c:	20 1b       	sub	r11,1
80003f6e:	5c 5b       	castu.b	r11
80003f70:	fe 78 0c 00 	mov	r8,-62464
80003f74:	71 c9       	ld.w	r9,r8[0x70]
80003f76:	f3 db d1 08 	bfins	r9,r11,0x8,0x8
80003f7a:	f1 49 00 70 	st.w	r8[112],r9
	AVR32_PM.GCCTRL[AVR32_PM_GCLK_USBB].cen    = true;
80003f7e:	71 c9       	ld.w	r9,r8[0x70]
80003f80:	30 17       	mov	r7,1
80003f82:	f3 d7 d0 41 	bfins	r9,r7,0x2,0x1
80003f86:	f1 49 00 70 	st.w	r8[112],r9

	USB_INT_DisableAllInterrupts();
80003f8a:	f0 1f 00 63 	mcall	80004114 <USB_ResetInterface+0x214>
	USB_INT_ClearAllInterrupts();
80003f8e:	f0 1f 00 63 	mcall	80004118 <USB_ResetInterface+0x218>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				AVR32_USBB.USBCON.usbe = false;
80003f92:	fe 68 00 00 	mov	r8,-131072
80003f96:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003f9a:	30 0a       	mov	r10,0
80003f9c:	f3 da d1 e1 	bfins	r9,r10,0xf,0x1
80003fa0:	f1 49 08 00 	st.w	r8[2048],r9
				AVR32_USBB.USBCON.usbe = true;
80003fa4:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003fa8:	f3 d7 d1 e1 	bfins	r9,r7,0xf,0x1
80003fac:	f1 49 08 00 	st.w	r8[2048],r9

	USB_Controller_Reset();

	#if defined(USB_CAN_BE_BOTH)
	if (UIDModeSelectEnabled)
80003fb0:	e6 16 01 00 	andh	r6,0x100,COH
80003fb4:	c0 70       	breq	80003fc2 <USB_ResetInterface+0xc2>
					case USB_INT_VBUSTI:
						AVR32_USBB.USBCON.vbuste      = true;
						break;
					#if defined(USB_CAN_BE_BOTH)
					case USB_INT_IDTI:
						AVR32_USBB.USBCON.idte        = true;
80003fb6:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003fba:	f3 d7 d0 01 	bfins	r9,r7,0x0,0x1
80003fbe:	f1 49 08 00 	st.w	r8[2048],r9
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				AVR32_USBB.USBCON.frzclk = false;
80003fc2:	fe 68 00 00 	mov	r8,-131072
80003fc6:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003fca:	30 0a       	mov	r10,0
80003fcc:	f3 da d1 c1 	bfins	r9,r10,0xe,0x1
80003fd0:	f1 49 08 00 	st.w	r8[2048],r9
	  USB_INT_Enable(USB_INT_IDTI);
	#endif

	USB_CLK_Unfreeze();

	if (USB_CurrentMode == USB_MODE_Device)
80003fd4:	4d 28       	lddpc	r8,8000411c <USB_ResetInterface+0x21c>
80003fd6:	11 89       	ld.ub	r9,r8[0x0]
80003fd8:	30 18       	mov	r8,1
80003fda:	f0 09 18 00 	cp.b	r9,r8
80003fde:	c5 e1       	brne	8000409a <USB_ResetInterface+0x19a>
	{
		#if defined(USB_CAN_BE_DEVICE)
		AVR32_USBB.USBCON.uimod = true;
80003fe0:	fe 68 00 00 	mov	r8,-131072
80003fe4:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003fe8:	30 1a       	mov	r10,1
80003fea:	f3 da d3 21 	bfins	r9,r10,0x19,0x1
80003fee:	f1 49 08 00 	st.w	r8[2048],r9
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
80003ff2:	30 08       	mov	r8,0
80003ff4:	4c b9       	lddpc	r9,80004120 <USB_ResetInterface+0x220>
80003ff6:	b2 88       	st.b	r9[0x0],r8
	USB_Device_ConfigurationNumber  = 0;
80003ff8:	4c b9       	lddpc	r9,80004124 <USB_ResetInterface+0x224>
80003ffa:	b2 88       	st.b	r9[0x0],r8

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
80003ffc:	4c b9       	lddpc	r9,80004128 <USB_ResetInterface+0x228>
80003ffe:	b2 88       	st.b	r9[0x0],r8
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
80004000:	4c b9       	lddpc	r9,8000412c <USB_ResetInterface+0x22c>
80004002:	b2 88       	st.b	r9[0x0],r8

	/*if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DeviceDescriptorPtr) != NO_DESCRIPTOR)
	  USB_Device_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;*/
	#endif

	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
80004004:	4c 28       	lddpc	r8,8000410c <USB_ResetInterface+0x20c>
80004006:	11 88       	ld.ub	r8,r8[0x0]
80004008:	14 68       	and	r8,r10
8000400a:	c0 80       	breq	8000401a <USB_ResetInterface+0x11a>
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_Device_SetLowSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetLowSpeed(void)
			{
				AVR32_USBB.UDCON.ls      = true;
8000400c:	fe 68 00 00 	mov	r8,-131072
80004010:	70 09       	ld.w	r9,r8[0x0]
80004012:	f3 da d1 81 	bfins	r9,r10,0xc,0x1
80004016:	91 09       	st.w	r8[0x0],r9
80004018:	c0 88       	rjmp	80004028 <USB_ResetInterface+0x128>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				AVR32_USBB.UDCON.ls      = false;
8000401a:	fe 68 00 00 	mov	r8,-131072
8000401e:	70 09       	ld.w	r9,r8[0x0]
80004020:	30 0a       	mov	r10,0
80004022:	f3 da d1 81 	bfins	r9,r10,0xc,0x1
80004026:	91 09       	st.w	r8[0x0],r9
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_VBUSTI:
						AVR32_USBB.USBCON.vbuste      = true;
80004028:	fe 68 00 00 	mov	r8,-131072
8000402c:	f0 f9 08 00 	ld.w	r9,r8[2048]
80004030:	30 1a       	mov	r10,1
80004032:	f3 da d0 21 	bfins	r9,r10,0x1,0x1
80004036:	f1 49 08 00 	st.w	r8[2048],r9
8000403a:	4b e8       	lddpc	r8,80004130 <USB_ResetInterface+0x230>
8000403c:	11 8a       	ld.ub	r10,r8[0x0]
			static inline uint32_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
8000403e:	30 88       	mov	r8,8
80004040:	f0 0a 19 00 	cp.h	r10,r8
80004044:	e0 8b 00 04 	brhi	8000404c <USB_ResetInterface+0x14c>
80004048:	30 09       	mov	r9,0
8000404a:	c0 b8       	rjmp	80004060 <USB_ResetInterface+0x160>
8000404c:	30 88       	mov	r8,8
8000404e:	30 09       	mov	r9,0
				{
					MaskVal++;
80004050:	2f f9       	sub	r9,-1
80004052:	5c 59       	castu.b	r9
					CheckBytes <<= 1;
80004054:	a1 78       	lsl	r8,0x1
80004056:	5c 88       	casts.h	r8
			static inline uint32_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
80004058:	f0 0a 19 00 	cp.h	r10,r8
8000405c:	fe 9b ff fa 	brhi	80004050 <USB_ResetInterface+0x150>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
80004060:	a5 69       	lsl	r9,0x4
80004062:	12 9b       	mov	r11,r9
80004064:	e8 1b 00 03 	orl	r11,0x3
80004068:	30 0c       	mov	r12,0
8000406a:	f0 1f 00 33 	mcall	80004134 <USB_ResetInterface+0x234>
					case USB_INT_WAKEUPI:
						AVR32_USBB.UDINTCLR.wakeupc  = true;
						(void)AVR32_USBB.UDINTCLR;
						break;
					case USB_INT_SUSPI:
						AVR32_USBB.UDINTCLR.suspc    = true;
8000406e:	fe 68 00 00 	mov	r8,-131072
80004072:	70 2a       	ld.w	r10,r8[0x8]
80004074:	30 19       	mov	r9,1
80004076:	f5 d9 d0 01 	bfins	r10,r9,0x0,0x1
8000407a:	91 2a       	st.w	r8[0x8],r10
						(void)AVR32_USBB.UDINTCLR;
8000407c:	70 2a       	ld.w	r10,r8[0x8]
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						AVR32_USBB.UDINTESET.wakeupes = true;
						break;
					case USB_INT_SUSPI:
						AVR32_USBB.UDINTESET.suspes   = true;
8000407e:	70 6a       	ld.w	r10,r8[0x18]
80004080:	f5 d9 d0 01 	bfins	r10,r9,0x0,0x1
80004084:	91 6a       	st.w	r8[0x18],r10
						break;
					case USB_INT_EORSTI:
						AVR32_USBB.UDINTESET.eorstes  = true;
80004086:	70 6a       	ld.w	r10,r8[0x18]
80004088:	f5 d9 d0 61 	bfins	r10,r9,0x3,0x1
8000408c:	91 6a       	st.w	r8[0x18],r10
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				AVR32_USBB.UDCON.detach = false;
8000408e:	70 09       	ld.w	r9,r8[0x0]
80004090:	30 0a       	mov	r10,0
80004092:	f3 da d1 01 	bfins	r9,r10,0x8,0x1
80004096:	91 09       	st.w	r8[0x0],r9
80004098:	c2 f8       	rjmp	800040f6 <USB_ResetInterface+0x1f6>
		AVR32_USBB.USBCON.uimod = true;

		USB_Init_Device();
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
8000409a:	4a 18       	lddpc	r8,8000411c <USB_ResetInterface+0x21c>
8000409c:	11 89       	ld.ub	r9,r8[0x0]
8000409e:	30 28       	mov	r8,2
800040a0:	f0 09 18 00 	cp.b	r9,r8
800040a4:	c2 91       	brne	800040f6 <USB_ResetInterface+0x1f6>
		#if defined(INVERTED_VBUS_ENABLE_LINE)
		AVR32_USBB.USBCON.vbuspo = true;
		#endif

		#if defined(USB_CAN_BE_HOST)
		AVR32_USBB.USBCON.uimod = false;
800040a6:	fe 68 00 00 	mov	r8,-131072
800040aa:	f0 fa 08 00 	ld.w	r10,r8[2048]
800040ae:	30 09       	mov	r9,0
800040b0:	f5 d9 d3 21 	bfins	r10,r9,0x19,0x1
800040b4:	f1 4a 08 00 	st.w	r8[2048],r10
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
800040b8:	30 1b       	mov	r11,1
800040ba:	4a 0a       	lddpc	r10,80004138 <USB_ResetInterface+0x238>
800040bc:	b4 8b       	st.b	r10[0x0],r11
	USB_Host_ConfigurationNumber = 0;
800040be:	4a 0a       	lddpc	r10,8000413c <USB_ResetInterface+0x23c>
800040c0:	b4 89       	st.b	r10[0x0],r9
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
800040c2:	34 0b       	mov	r11,64
800040c4:	49 fa       	lddpc	r10,80004140 <USB_ResetInterface+0x240>
800040c6:	b4 8b       	st.b	r10[0x0],r11
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				AVR32_USBB.USBSTASET.vbusrqs = true;
800040c8:	f0 fb 08 0c 	ld.w	r11,r8[2060]
800040cc:	30 1a       	mov	r10,1
800040ce:	f7 da d1 21 	bfins	r11,r10,0x9,0x1
800040d2:	f1 4b 08 0c 	st.w	r8[2060],r11
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						AVR32_USBB.UHINTESET.hsofies  = true;
						break;
					case USB_INT_DCONNI:
						AVR32_USBB.UHINTESET.dconnies = true;
800040d6:	f0 fb 04 18 	ld.w	r11,r8[1048]
800040da:	f7 da d0 01 	bfins	r11,r10,0x0,0x1
800040de:	f1 4b 04 18 	st.w	r8[1048],r11
						break;
					case USB_INT_RSTI:
						AVR32_USBB.UHINTESET.rsties   = true;
						break;
					case USB_INT_BCERRI:
						AVR32_USBB.USBCON.bcerre      = true;
800040e2:	f0 fb 08 00 	ld.w	r11,r8[2048]
800040e6:	f7 da d0 81 	bfins	r11,r10,0x4,0x1
800040ea:	f1 4b 08 00 	st.w	r8[2048],r11
800040ee:	70 0a       	ld.w	r10,r8[0x0]
800040f0:	f5 d9 d1 01 	bfins	r10,r9,0x8,0x1
800040f4:	91 0a       	st.w	r8[0x0],r10

		/* Inline Functions: */
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				AVR32_USBB.USBCON.otgpade = true;
800040f6:	fe 68 00 00 	mov	r8,-131072
800040fa:	f0 f9 08 00 	ld.w	r9,r8[2048]
800040fe:	30 1a       	mov	r10,1
80004100:	f3 da d1 81 	bfins	r9,r10,0xc,0x1
80004104:	f1 49 08 00 	st.w	r8[2048],r9
		USB_Init_Host();
		#endif
	}

	USB_OTGPAD_On();
}
80004108:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000410c:	00 00       	add	r0,r0
8000410e:	0c 38       	cp.w	r8,r6
80004110:	00 00       	add	r0,r0
80004112:	00 c4       	st.b	r0++,r4
80004114:	80 00       	ld.sh	r0,r0[0x0]
80004116:	41 44       	lddsp	r4,sp[0x50]
80004118:	80 00       	ld.sh	r0,r0[0x0]
8000411a:	41 6c       	lddsp	r12,sp[0x58]
8000411c:	00 00       	add	r0,r0
8000411e:	09 5c       	ld.sh	r12,--r4
80004120:	00 00       	add	r0,r0
80004122:	0b f5       	ld.ub	r5,r5[0x7]
80004124:	00 00       	add	r0,r0
80004126:	0b f0       	ld.ub	r0,r5[0x7]
80004128:	00 00       	add	r0,r0
8000412a:	0b f2       	ld.ub	r2,r5[0x7]
8000412c:	00 00       	add	r0,r0
8000412e:	0b f1       	ld.ub	r1,r5[0x7]
80004130:	00 00       	add	r0,r0
80004132:	00 c0       	st.b	r0++,r0
80004134:	80 00       	ld.sh	r0,r0[0x0]
80004136:	35 80       	mov	r0,88
80004138:	00 00       	add	r0,r0
8000413a:	09 4d       	ld.w	sp,--r4
8000413c:	00 00       	add	r0,r0
8000413e:	0b f3       	ld.ub	r3,r5[0x7]
80004140:	00 00       	add	r0,r0
80004142:	00 c1       	st.b	r0++,r1

80004144 <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	AVR32_USBB.USBCON.vbuste     = false;
80004144:	fe 68 00 00 	mov	r8,-131072
80004148:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000414c:	30 0a       	mov	r10,0
8000414e:	f3 da d0 21 	bfins	r9,r10,0x1,0x1
80004152:	f1 49 08 00 	st.w	r8[2048],r9
	AVR32_USBB.USBCON.idte       = false;
80004156:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000415a:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
8000415e:	f1 49 08 00 	st.w	r8[2048],r9

	AVR32_USBB.uhinteclr         = -1;
80004162:	3f f9       	mov	r9,-1
80004164:	f1 49 04 14 	st.w	r8[1044],r9
	AVR32_USBB.udinteclr         = -1;
80004168:	91 59       	st.w	r8[0x14],r9
}
8000416a:	5e fc       	retal	r12

8000416c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	AVR32_USBB.USBSTACLR.vbustic = true;
8000416c:	fe 68 00 00 	mov	r8,-131072
80004170:	f0 f9 08 08 	ld.w	r9,r8[2056]
80004174:	30 1a       	mov	r10,1
80004176:	f3 da d0 21 	bfins	r9,r10,0x1,0x1
8000417a:	f1 49 08 08 	st.w	r8[2056],r9
	AVR32_USBB.USBSTACLR.idtic   = true;
8000417e:	f0 f9 08 08 	ld.w	r9,r8[2056]
80004182:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80004186:	f1 49 08 08 	st.w	r8[2056],r9

	AVR32_USBB.uhintclr          = -1;
8000418a:	3f f9       	mov	r9,-1
8000418c:	f1 49 04 08 	st.w	r8[1032],r9
	AVR32_USBB.udintclr          = -1;
80004190:	91 29       	st.w	r8[0x8],r9
}
80004192:	5e fc       	retal	r12

80004194 <ui_host_vbus_change>:
bool ui_midi_plug = false;

void ui_host_vbus_change(bool b_vbus_present)
{
	UNUSED(b_vbus_present);
}
80004194:	5e fc       	retal	r12

80004196 <ui_host_vbus_error>:

void ui_host_vbus_error(void)
{
}
80004196:	5e fc       	retal	r12

80004198 <ui_host_enum_event>:
	}
}

void ui_host_enum_event(uhc_device_t * dev, uhc_enum_status_t status)
{
	ui_enum_status = status;
80004198:	49 08       	lddpc	r8,800041d8 <ui_host_enum_event+0x40>
8000419a:	91 0b       	st.w	r8[0x0],r11
	if (ui_enum_status == UHC_ENUM_SUCCESS) {
8000419c:	58 0b       	cp.w	r11,0
8000419e:	5e 1c       	retne	r12
		ui_x = 0, ui_y = 0, ui_scroll = 0;
800041a0:	30 08       	mov	r8,0
800041a2:	48 f9       	lddpc	r9,800041dc <ui_host_enum_event+0x44>
800041a4:	b2 88       	st.b	r9[0x0],r8
800041a6:	48 f9       	lddpc	r9,800041e0 <ui_host_enum_event+0x48>
800041a8:	b2 88       	st.b	r9[0x0],r8
800041aa:	48 f9       	lddpc	r9,800041e4 <ui_host_enum_event+0x4c>
800041ac:	b2 88       	st.b	r9[0x0],r8
		switch (dev->speed) {
800041ae:	78 58       	ld.w	r8,r12[0x14]
800041b0:	58 18       	cp.w	r8,1
800041b2:	c0 80       	breq	800041c2 <ui_host_enum_event+0x2a>
800041b4:	58 28       	cp.w	r8,2
800041b6:	c0 b1       	brne	800041cc <ui_host_enum_event+0x34>
		case UHD_SPEED_HIGH:
			ui_device_speed_blink = 250;
800041b8:	e0 69 00 fa 	mov	r9,250
800041bc:	48 b8       	lddpc	r8,800041e8 <ui_host_enum_event+0x50>
800041be:	b0 09       	st.h	r8[0x0],r9
			break;
800041c0:	5e fc       	retal	r12
		case UHD_SPEED_FULL:
			ui_device_speed_blink = 500;
800041c2:	e0 69 01 f4 	mov	r9,500
800041c6:	48 98       	lddpc	r8,800041e8 <ui_host_enum_event+0x50>
800041c8:	b0 09       	st.h	r8[0x0],r9
			break;
800041ca:	5e fc       	retal	r12
		case UHD_SPEED_LOW:
		default:
			ui_device_speed_blink = 1000;
800041cc:	e0 69 03 e8 	mov	r9,1000
800041d0:	48 68       	lddpc	r8,800041e8 <ui_host_enum_event+0x50>
800041d2:	b0 09       	st.h	r8[0x0],r9
800041d4:	5e fc       	retal	r12
800041d6:	00 00       	add	r0,r0
800041d8:	00 00       	add	r0,r0
800041da:	00 c8       	st.b	r0++,r8
800041dc:	00 00       	add	r0,r0
800041de:	09 5d       	ld.sh	sp,--r4
800041e0:	00 00       	add	r0,r0
800041e2:	09 5e       	ld.sh	lr,--r4
800041e4:	00 00       	add	r0,r0
800041e6:	09 6d       	ld.uh	sp,--r4
800041e8:	00 00       	add	r0,r0
800041ea:	09 62       	ld.uh	r2,--r4

800041ec <ui_uhi_hid_mouse_change>:
	}
}

void ui_uhi_hid_mouse_change(uhc_device_t * dev, bool b_plug)
{
	ui_hid_mouse_plug = b_plug;
800041ec:	48 28       	lddpc	r8,800041f4 <ui_uhi_hid_mouse_change+0x8>
800041ee:	b0 8b       	st.b	r8[0x0],r11
}
800041f0:	5e fc       	retal	r12
800041f2:	00 00       	add	r0,r0
800041f4:	00 00       	add	r0,r0
800041f6:	09 65       	ld.uh	r5,--r4

800041f8 <ui_uhi_midi_change>:

void ui_uhi_midi_change(uhc_device_t * dev, bool b_plug)
{
	ui_midi_plug = b_plug;
800041f8:	48 28       	lddpc	r8,80004200 <ui_uhi_midi_change+0x8>
800041fa:	b0 8b       	st.b	r8[0x0],r11
}
800041fc:	5e fc       	retal	r12
800041fe:	00 00       	add	r0,r0
80004200:	00 00       	add	r0,r0
80004202:	09 61       	ld.uh	r1,--r4

80004204 <ui_device_resume_action>:
{
	ui_init();
}

void ui_device_resume_action(void)
{
80004204:	d4 01       	pushm	lr
	LED_On(LED1);
80004206:	30 2c       	mov	r12,2
80004208:	f0 1f 00 02 	mcall	80004210 <ui_device_resume_action+0xc>
}
8000420c:	d8 02       	popm	pc
8000420e:	00 00       	add	r0,r0
80004210:	80 00       	ld.sh	r0,r0[0x0]
80004212:	47 14       	lddsp	r4,sp[0x1c4]

80004214 <ui_host_hid_mouse_btn_right>:
		LED_Off(LED_BI0_GREEN);
	}
}

void ui_host_hid_mouse_btn_right(bool b_state)
{
80004214:	d4 01       	pushm	lr
	if (b_state) {
80004216:	58 0c       	cp.w	r12,0
80004218:	c0 50       	breq	80004222 <ui_host_hid_mouse_btn_right+0xe>
		LED_On(LED_BI0_RED);
8000421a:	31 0c       	mov	r12,16
8000421c:	f0 1f 00 04 	mcall	8000422c <ui_host_hid_mouse_btn_right+0x18>
80004220:	d8 02       	popm	pc
		} else {
		LED_Off(LED_BI0_RED);
80004222:	31 0c       	mov	r12,16
80004224:	f0 1f 00 03 	mcall	80004230 <ui_host_hid_mouse_btn_right+0x1c>
80004228:	d8 02       	popm	pc
8000422a:	00 00       	add	r0,r0
8000422c:	80 00       	ld.sh	r0,r0[0x0]
8000422e:	47 14       	lddsp	r4,sp[0x1c4]
80004230:	80 00       	ld.sh	r0,r0[0x0]
80004232:	47 64       	lddsp	r4,sp[0x1d8]

80004234 <ui_host_hid_mouse_btn_left>:
		}*/
	}
}

void ui_host_hid_mouse_btn_left(bool b_state)
{
80004234:	d4 01       	pushm	lr
	if (b_state) {
80004236:	58 0c       	cp.w	r12,0
80004238:	c0 50       	breq	80004242 <ui_host_hid_mouse_btn_left+0xe>
		LED_On(LED_BI0_GREEN);
8000423a:	32 0c       	mov	r12,32
8000423c:	f0 1f 00 04 	mcall	8000424c <ui_host_hid_mouse_btn_left+0x18>
80004240:	d8 02       	popm	pc
		} else {
		LED_Off(LED_BI0_GREEN);
80004242:	32 0c       	mov	r12,32
80004244:	f0 1f 00 03 	mcall	80004250 <ui_host_hid_mouse_btn_left+0x1c>
80004248:	d8 02       	popm	pc
8000424a:	00 00       	add	r0,r0
8000424c:	80 00       	ld.sh	r0,r0[0x0]
8000424e:	47 14       	lddsp	r4,sp[0x1c4]
80004250:	80 00       	ld.sh	r0,r0[0x0]
80004252:	47 64       	lddsp	r4,sp[0x1d8]

80004254 <ui_host_connection_event>:
void ui_host_vbus_error(void)
{
}

void ui_host_connection_event(uhc_device_t *dev, bool b_present)
{
80004254:	eb cd 40 80 	pushm	r7,lr
80004258:	16 97       	mov	r7,r11
	LED_Off(LED1);
8000425a:	30 2c       	mov	r12,2
8000425c:	f0 1f 00 11 	mcall	800042a0 <ui_host_connection_event+0x4c>
	LED_Off(LED2);
80004260:	30 4c       	mov	r12,4
80004262:	f0 1f 00 10 	mcall	800042a0 <ui_host_connection_event+0x4c>
	LED_Off(LED3);
80004266:	30 8c       	mov	r12,8
80004268:	f0 1f 00 0e 	mcall	800042a0 <ui_host_connection_event+0x4c>
	LED_Off(LED_BI0_GREEN);
8000426c:	32 0c       	mov	r12,32
8000426e:	f0 1f 00 0d 	mcall	800042a0 <ui_host_connection_event+0x4c>
	LED_Off(LED_BI0_RED);
80004272:	31 0c       	mov	r12,16
80004274:	f0 1f 00 0b 	mcall	800042a0 <ui_host_connection_event+0x4c>
	LED_Off(LED_BI1_GREEN);
80004278:	e0 6c 00 80 	mov	r12,128
8000427c:	f0 1f 00 09 	mcall	800042a0 <ui_host_connection_event+0x4c>
	LED_Off(LED_BI1_RED);
80004280:	34 0c       	mov	r12,64
80004282:	f0 1f 00 08 	mcall	800042a0 <ui_host_connection_event+0x4c>
	if (b_present) {
80004286:	58 07       	cp.w	r7,0
80004288:	c0 60       	breq	80004294 <ui_host_connection_event+0x40>
		LED_On(LED1);
8000428a:	30 2c       	mov	r12,2
8000428c:	f0 1f 00 06 	mcall	800042a4 <ui_host_connection_event+0x50>
80004290:	e3 cd 80 80 	ldm	sp++,r7,pc
	} else {
		ui_enum_status = UHC_ENUM_DISCONNECT;
80004294:	30 79       	mov	r9,7
80004296:	48 58       	lddpc	r8,800042a8 <ui_host_connection_event+0x54>
80004298:	91 09       	st.w	r8[0x0],r9
8000429a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000429e:	00 00       	add	r0,r0
800042a0:	80 00       	ld.sh	r0,r0[0x0]
800042a2:	47 64       	lddsp	r4,sp[0x1d8]
800042a4:	80 00       	ld.sh	r0,r0[0x0]
800042a6:	47 14       	lddsp	r4,sp[0x1c4]
800042a8:	00 00       	add	r0,r0
800042aa:	00 c8       	st.b	r0++,r8

800042ac <ui_init>:
/**
 * \name Main user interface functions
 * @{
 */
void ui_init(void)
{
800042ac:	d4 01       	pushm	lr
	LED_Off(LED0);
800042ae:	30 1c       	mov	r12,1
800042b0:	f0 1f 00 0d 	mcall	800042e4 <ui_init+0x38>
	LED_Off(LED1);
800042b4:	30 2c       	mov	r12,2
800042b6:	f0 1f 00 0c 	mcall	800042e4 <ui_init+0x38>
	LED_Off(LED2);
800042ba:	30 4c       	mov	r12,4
800042bc:	f0 1f 00 0a 	mcall	800042e4 <ui_init+0x38>
	LED_Off(LED3);
800042c0:	30 8c       	mov	r12,8
800042c2:	f0 1f 00 09 	mcall	800042e4 <ui_init+0x38>
	LED_Off(LED_BI0_GREEN);
800042c6:	32 0c       	mov	r12,32
800042c8:	f0 1f 00 07 	mcall	800042e4 <ui_init+0x38>
	LED_Off(LED_BI0_RED);
800042cc:	31 0c       	mov	r12,16
800042ce:	f0 1f 00 06 	mcall	800042e4 <ui_init+0x38>
	LED_Off(LED_BI1_GREEN);
800042d2:	e0 6c 00 80 	mov	r12,128
800042d6:	f0 1f 00 04 	mcall	800042e4 <ui_init+0x38>
	LED_Off(LED_BI1_RED);
800042da:	34 0c       	mov	r12,64
800042dc:	f0 1f 00 02 	mcall	800042e4 <ui_init+0x38>
}
800042e0:	d8 02       	popm	pc
800042e2:	00 00       	add	r0,r0
800042e4:	80 00       	ld.sh	r0,r0[0x0]
800042e6:	47 64       	lddsp	r4,sp[0x1d8]

800042e8 <ui_device_suspend_action>:
void ui_stop_write(void)
{
}
*/
void ui_device_suspend_action(void)
{
800042e8:	d4 01       	pushm	lr
	ui_init();
800042ea:	f0 1f 00 02 	mcall	800042f0 <ui_device_suspend_action+0x8>
}
800042ee:	d8 02       	popm	pc
800042f0:	80 00       	ld.sh	r0,r0[0x0]
800042f2:	42 ac       	lddsp	r12,sp[0xa8]

800042f4 <ui_usb_mode_change>:
	LED_Off(LED_BI1_GREEN);
	LED_Off(LED_BI1_RED);
}

void ui_usb_mode_change(bool b_host_mode)
{
800042f4:	eb cd 40 80 	pushm	r7,lr
800042f8:	18 97       	mov	r7,r12
	ui_init();
800042fa:	f0 1f 00 05 	mcall	8000430c <ui_usb_mode_change+0x18>
	if (b_host_mode) {
800042fe:	58 07       	cp.w	r7,0
80004300:	c0 40       	breq	80004308 <ui_usb_mode_change+0x14>
		LED_On(LED0);
80004302:	30 1c       	mov	r12,1
80004304:	f0 1f 00 03 	mcall	80004310 <ui_usb_mode_change+0x1c>
80004308:	e3 cd 80 80 	ldm	sp++,r7,pc
8000430c:	80 00       	ld.sh	r0,r0[0x0]
8000430e:	42 ac       	lddsp	r12,sp[0xa8]
80004310:	80 00       	ld.sh	r0,r0[0x0]
80004312:	47 14       	lddsp	r4,sp[0x1c4]

80004314 <ui_device_sof_action>:
{
	ui_device_b_mouse_enable = false;
}

void ui_device_sof_action(void)
{
80004314:	eb cd 40 80 	pushm	r7,lr
	static bool btn_left_last_state = HID_MOUSE_BTN_UP;
	static bool btn_right_last_state = HID_MOUSE_BTN_UP;
	static bool btn_middle_last_state = HID_MOUSE_BTN_UP;
	static uint8_t cpt_sof = 0;

	if (!ui_device_b_mouse_enable)
80004318:	4c 18       	lddpc	r8,8000441c <ui_device_sof_action+0x108>
8000431a:	11 89       	ld.ub	r9,r8[0x0]
8000431c:	30 08       	mov	r8,0
8000431e:	f0 09 18 00 	cp.b	r9,r8
80004322:	e0 80 00 7a 	breq	80004416 <ui_device_sof_action+0x102>
	return;

	framenumber = udd_get_frame_number();
80004326:	f0 1f 00 3f 	mcall	80004420 <ui_device_sof_action+0x10c>
	if ((framenumber % 1000) == 0) {
8000432a:	5c 7c       	castu.h	r12
8000432c:	e0 69 4d d3 	mov	r9,19923
80004330:	ea 19 10 62 	orh	r9,0x1062
80004334:	f8 09 06 48 	mulu.d	r8,r12,r9
80004338:	f2 08 16 06 	lsr	r8,r9,0x6
8000433c:	e0 69 03 e8 	mov	r9,1000
80004340:	b3 38       	mul	r8,r9
80004342:	10 1c       	sub	r12,r8
80004344:	5c 8c       	casts.h	r12
80004346:	c0 51       	brne	80004350 <ui_device_sof_action+0x3c>
		LED_On(LED2);
80004348:	30 4c       	mov	r12,4
8000434a:	f0 1f 00 37 	mcall	80004424 <ui_device_sof_action+0x110>
8000434e:	c0 98       	rjmp	80004360 <ui_device_sof_action+0x4c>
	}
	if ((framenumber % 1000) == 500) {
80004350:	e0 68 01 f4 	mov	r8,500
80004354:	f0 0c 19 00 	cp.h	r12,r8
80004358:	c0 41       	brne	80004360 <ui_device_sof_action+0x4c>
		LED_Off(LED2);
8000435a:	30 4c       	mov	r12,4
8000435c:	f0 1f 00 33 	mcall	80004428 <ui_device_sof_action+0x114>
	}
	// Scan process running each 2ms
	cpt_sof++;
80004360:	4b 39       	lddpc	r9,8000442c <ui_device_sof_action+0x118>
80004362:	13 88       	ld.ub	r8,r9[0x0]
80004364:	2f f8       	sub	r8,-1
80004366:	b2 88       	st.b	r9[0x0],r8
	if (2 > cpt_sof)
80004368:	30 19       	mov	r9,1
8000436a:	f2 08 18 00 	cp.b	r8,r9
8000436e:	e0 88 00 54 	brls	80004416 <ui_device_sof_action+0x102>
	return;
	cpt_sof = 0;
80004372:	30 09       	mov	r9,0
80004374:	4a e8       	lddpc	r8,8000442c <ui_device_sof_action+0x118>
80004376:	b0 89       	st.b	r8[0x0],r9

	// Scan buttons on switch 0 (left), 1 (middle), 2 (right)
	b_btn_state = (!gpio_get_pin_value(GPIO_PUSH_BUTTON_0)) ?
80004378:	35 8c       	mov	r12,88
8000437a:	f0 1f 00 2e 	mcall	80004430 <ui_device_sof_action+0x11c>
8000437e:	ec 1c 00 01 	eorl	r12,0x1
80004382:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_left_last_state) {
80004386:	4a c8       	lddpc	r8,80004434 <ui_device_sof_action+0x120>
80004388:	11 88       	ld.ub	r8,r8[0x0]
8000438a:	ee 08 18 00 	cp.b	r8,r7
8000438e:	c0 60       	breq	8000439a <ui_device_sof_action+0x86>
		udi_hid_mouse_btnleft(b_btn_state);
80004390:	0e 9c       	mov	r12,r7
80004392:	f0 1f 00 2a 	mcall	80004438 <ui_device_sof_action+0x124>
		btn_left_last_state = b_btn_state;
80004396:	4a 88       	lddpc	r8,80004434 <ui_device_sof_action+0x120>
80004398:	b0 87       	st.b	r8[0x0],r7
	}
	b_btn_state = (!gpio_get_pin_value(GPIO_PUSH_BUTTON_1)) ?
8000439a:	35 5c       	mov	r12,85
8000439c:	f0 1f 00 25 	mcall	80004430 <ui_device_sof_action+0x11c>
800043a0:	ec 1c 00 01 	eorl	r12,0x1
800043a4:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_middle_last_state) {
800043a8:	4a 58       	lddpc	r8,8000443c <ui_device_sof_action+0x128>
800043aa:	11 88       	ld.ub	r8,r8[0x0]
800043ac:	ee 08 18 00 	cp.b	r8,r7
800043b0:	c0 60       	breq	800043bc <ui_device_sof_action+0xa8>
		udi_hid_mouse_btnmiddle(b_btn_state);
800043b2:	0e 9c       	mov	r12,r7
800043b4:	f0 1f 00 23 	mcall	80004440 <ui_device_sof_action+0x12c>
		btn_middle_last_state = b_btn_state;
800043b8:	4a 18       	lddpc	r8,8000443c <ui_device_sof_action+0x128>
800043ba:	b0 87       	st.b	r8[0x0],r7
	}
	b_btn_state = (!gpio_get_pin_value(GPIO_PUSH_BUTTON_2)) ?
800043bc:	35 2c       	mov	r12,82
800043be:	f0 1f 00 1d 	mcall	80004430 <ui_device_sof_action+0x11c>
800043c2:	ec 1c 00 01 	eorl	r12,0x1
800043c6:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
	HID_MOUSE_BTN_DOWN : HID_MOUSE_BTN_UP;
	if (b_btn_state != btn_right_last_state) {
800043ca:	49 f8       	lddpc	r8,80004444 <ui_device_sof_action+0x130>
800043cc:	11 88       	ld.ub	r8,r8[0x0]
800043ce:	ee 08 18 00 	cp.b	r8,r7
800043d2:	c0 60       	breq	800043de <ui_device_sof_action+0xca>
		udi_hid_mouse_btnright(b_btn_state);
800043d4:	0e 9c       	mov	r12,r7
800043d6:	f0 1f 00 1d 	mcall	80004448 <ui_device_sof_action+0x134>
		btn_right_last_state = b_btn_state;
800043da:	49 b8       	lddpc	r8,80004444 <ui_device_sof_action+0x130>
800043dc:	b0 87       	st.b	r8[0x0],r7
 *
 * \return \c true if the joystick is on the right, otherwise \c 0.
 */
__always_inline static int is_joystick_right( void )
{
  return (gpio_get_pin_value(GPIO_JOYSTICK_RIGHT)) == GPIO_JOYSTICK_RIGHT_PRESSED;
800043de:	31 cc       	mov	r12,28
800043e0:	f0 1f 00 14 	mcall	80004430 <ui_device_sof_action+0x11c>
	}
	// Joystick used to move mouse
	if (is_joystick_right())
800043e4:	c0 41       	brne	800043ec <ui_device_sof_action+0xd8>
	udi_hid_mouse_moveX(MOUSE_MOVE_RANGE);
800043e6:	30 3c       	mov	r12,3
800043e8:	f0 1f 00 19 	mcall	8000444c <ui_device_sof_action+0x138>
 *
 * \return \c true if the joystick is on the left, otherwise \c 0.
 */
__always_inline static int is_joystick_left( void )
{
  return (gpio_get_pin_value(GPIO_JOYSTICK_LEFT)) == GPIO_JOYSTICK_LEFT_PRESSED;
800043ec:	31 9c       	mov	r12,25
800043ee:	f0 1f 00 11 	mcall	80004430 <ui_device_sof_action+0x11c>
	if (is_joystick_left())
800043f2:	c0 41       	brne	800043fa <ui_device_sof_action+0xe6>
	udi_hid_mouse_moveX(-MOUSE_MOVE_RANGE);
800043f4:	3f dc       	mov	r12,-3
800043f6:	f0 1f 00 16 	mcall	8000444c <ui_device_sof_action+0x138>
 *
 * \return \c true if the joystick is up, otherwise \c 0.
 */
__always_inline static int is_joystick_up( void )
{
  return (gpio_get_pin_value(GPIO_JOYSTICK_UP)) == GPIO_JOYSTICK_UP_PRESSED;
800043fa:	31 ac       	mov	r12,26
800043fc:	f0 1f 00 0d 	mcall	80004430 <ui_device_sof_action+0x11c>
	if (is_joystick_up())
80004400:	c0 41       	brne	80004408 <ui_device_sof_action+0xf4>
	udi_hid_mouse_moveY(-MOUSE_MOVE_RANGE);
80004402:	3f dc       	mov	r12,-3
80004404:	f0 1f 00 13 	mcall	80004450 <ui_device_sof_action+0x13c>
 *
 * \return \c true if the joystick is down, otherwise \c 0.
 */
__always_inline static int is_joystick_down( void )
{
  return (gpio_get_pin_value(GPIO_JOYSTICK_DOWN)) == GPIO_JOYSTICK_DOWN_PRESSED;
80004408:	31 bc       	mov	r12,27
8000440a:	f0 1f 00 0a 	mcall	80004430 <ui_device_sof_action+0x11c>
	if (is_joystick_down())
8000440e:	c0 41       	brne	80004416 <ui_device_sof_action+0x102>
	udi_hid_mouse_moveY(MOUSE_MOVE_RANGE);
80004410:	30 3c       	mov	r12,3
80004412:	f0 1f 00 10 	mcall	80004450 <ui_device_sof_action+0x13c>
80004416:	e3 cd 80 80 	ldm	sp++,r7,pc
8000441a:	00 00       	add	r0,r0
8000441c:	00 00       	add	r0,r0
8000441e:	09 6b       	ld.uh	r11,--r4
80004420:	80 00       	ld.sh	r0,r0[0x0]
80004422:	4c 36       	lddpc	r6,8000452c <ui_wakeup_isr+0x2c>
80004424:	80 00       	ld.sh	r0,r0[0x0]
80004426:	47 14       	lddsp	r4,sp[0x1c4]
80004428:	80 00       	ld.sh	r0,r0[0x0]
8000442a:	47 64       	lddsp	r4,sp[0x1d8]
8000442c:	00 00       	add	r0,r0
8000442e:	09 6c       	ld.uh	r12,--r4
80004430:	80 00       	ld.sh	r0,r0[0x0]
80004432:	4a 3a       	lddpc	r10,800044bc <ui_enable_asynchronous_interrupt+0x40>
80004434:	00 00       	add	r0,r0
80004436:	09 5f       	ld.sh	pc,--r4
80004438:	80 00       	ld.sh	r0,r0[0x0]
8000443a:	28 7c       	sub	r12,-121
8000443c:	00 00       	add	r0,r0
8000443e:	09 64       	ld.uh	r4,--r4
80004440:	80 00       	ld.sh	r0,r0[0x0]
80004442:	28 9c       	sub	r12,-119
80004444:	00 00       	add	r0,r0
80004446:	09 6a       	ld.uh	r10,--r4
80004448:	80 00       	ld.sh	r0,r0[0x0]
8000444a:	28 8c       	sub	r12,-120
8000444c:	80 00       	ld.sh	r0,r0[0x0]
8000444e:	28 ac       	sub	r12,-118
80004450:	80 00       	ld.sh	r0,r0[0x0]
80004452:	28 bc       	sub	r12,-117

80004454 <ui_disable_asynchronous_interrupt>:

/**
 * \brief Disables interrupt pin change
 */
static void ui_disable_asynchronous_interrupt(void)
{
80004454:	d4 01       	pushm	lr
	eic_disable_line(&AVR32_EIC, EXT_NMI);
80004456:	30 8b       	mov	r11,8
80004458:	fe 7c 0d 80 	mov	r12,-62080
8000445c:	f0 1f 00 03 	mcall	80004468 <ui_disable_asynchronous_interrupt+0x14>

	/* Disable joystick input change ITs. */
	gpio_disable_pin_interrupt(GPIO_JOYSTICK_PUSH);
80004460:	31 4c       	mov	r12,20
80004462:	f0 1f 00 03 	mcall	8000446c <ui_disable_asynchronous_interrupt+0x18>
}
80004466:	d8 02       	popm	pc
80004468:	80 00       	ld.sh	r0,r0[0x0]
8000446a:	48 92       	lddpc	r2,8000448c <ui_enable_asynchronous_interrupt+0x10>
8000446c:	80 00       	ld.sh	r0,r0[0x0]
8000446e:	4a ce       	lddpc	lr,8000451c <ui_wakeup_isr+0x1c>

80004470 <ui_host_wakeup_event>:
{
	ui_midi_plug = b_plug;
}

void ui_host_wakeup_event(void)
{
80004470:	d4 01       	pushm	lr
	ui_disable_asynchronous_interrupt();
80004472:	f0 1f 00 02 	mcall	80004478 <ui_host_wakeup_event+0x8>
}
80004476:	d8 02       	popm	pc
80004478:	80 00       	ld.sh	r0,r0[0x0]
8000447a:	44 54       	lddsp	r4,sp[0x114]

8000447c <ui_enable_asynchronous_interrupt>:

/**
 * \brief Initializes and enables interrupt pin change
 */
static void ui_enable_asynchronous_interrupt(void)
{
8000447c:	eb cd 40 80 	pushm	r7,lr
80004480:	20 2d       	sub	sp,8
		.eic_level = EIC_LEVEL_LOW_LEVEL,
		// Enable filter.
		.eic_filter = EIC_FILTER_ENABLED,
		// For Wake Up mode, initialize in asynchronous mode
		.eic_async = EIC_ASYNCH_MODE
	};
80004482:	30 6a       	mov	r10,6
80004484:	49 6b       	lddpc	r11,800044dc <ui_enable_asynchronous_interrupt+0x60>
80004486:	fa cc ff fe 	sub	r12,sp,-2
8000448a:	f0 1f 00 16 	mcall	800044e0 <ui_enable_asynchronous_interrupt+0x64>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000448e:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80004492:	d3 03       	ssrf	0x10

	/* register joystick handler on level 0 */
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(ui_wakeup_isr,
80004494:	30 0a       	mov	r10,0
80004496:	34 2b       	mov	r11,66
80004498:	49 3c       	lddpc	r12,800044e4 <ui_enable_asynchronous_interrupt+0x68>
8000449a:	f0 1f 00 14 	mcall	800044e8 <ui_enable_asynchronous_interrupt+0x6c>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000449e:	e6 17 00 01 	andh	r7,0x1,COH
800044a2:	c0 21       	brne	800044a6 <ui_enable_asynchronous_interrupt+0x2a>
      cpu_irq_enable();
800044a4:	d5 03       	csrf	0x10
			AVR32_GPIO_IRQ_0 + (GPIO_JOYSTICK_PUSH / 8), 0);
	cpu_irq_restore(flags);

	/* configure joystick to produce IT on all state change */
	gpio_enable_pin_interrupt(GPIO_JOYSTICK_PUSH, GPIO_PIN_CHANGE);
800044a6:	30 0b       	mov	r11,0
800044a8:	31 4c       	mov	r12,20
800044aa:	f0 1f 00 11 	mcall	800044ec <ui_enable_asynchronous_interrupt+0x70>
	 * wake up from the STATIC sleep mode).
	 *
	 * First, map the interrupt line to the GPIO pin with the right
	 * peripheral function.
	 */
	gpio_enable_module_pin(GPIO_JOYSTICK_PUSH, AVR32_EIC_EXTINT_8_FUNCTION);
800044ae:	30 0b       	mov	r11,0
800044b0:	31 4c       	mov	r12,20
800044b2:	f0 1f 00 10 	mcall	800044f0 <ui_enable_asynchronous_interrupt+0x74>
	/*
	 * Enable the internal pull-up resistor on that pin (because the EIC is
	 * configured such that the interrupt will trigger on low-level, see
	 * eic_options.eic_level).
	 */
	gpio_enable_pin_pull_up(GPIO_JOYSTICK_PUSH);
800044b6:	31 4c       	mov	r12,20
800044b8:	f0 1f 00 0f 	mcall	800044f4 <ui_enable_asynchronous_interrupt+0x78>

	// Init the EIC controller with the set options.
	eic_init(&AVR32_EIC, &eic_options, sizeof(eic_options) /
800044bc:	30 1a       	mov	r10,1
800044be:	fa cb ff fe 	sub	r11,sp,-2
800044c2:	fe 7c 0d 80 	mov	r12,-62080
800044c6:	f0 1f 00 0d 	mcall	800044f8 <ui_enable_asynchronous_interrupt+0x7c>
			sizeof(eic_options_t));

	// Enable External Interrupt Controller Line
	eic_enable_line(&AVR32_EIC, EXT_NMI);
800044ca:	30 8b       	mov	r11,8
800044cc:	fe 7c 0d 80 	mov	r12,-62080
800044d0:	f0 1f 00 0b 	mcall	800044fc <ui_enable_asynchronous_interrupt+0x80>
}
800044d4:	2f ed       	sub	sp,-8
800044d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800044da:	00 00       	add	r0,r0
800044dc:	80 00       	ld.sh	r0,r0[0x0]
800044de:	ee 38 80 00 	sub	r8,1015808
800044e2:	95 e4       	st.w	r10[0x38],r4
800044e4:	80 00       	ld.sh	r0,r0[0x0]
800044e6:	45 00       	lddsp	r0,sp[0x140]
800044e8:	80 00       	ld.sh	r0,r0[0x0]
800044ea:	4a fc       	lddpc	r12,800045a4 <ui_host_sof_event+0x74>
800044ec:	80 00       	ld.sh	r0,r0[0x0]
800044ee:	4a 88       	lddpc	r8,8000458c <ui_host_sof_event+0x5c>
800044f0:	80 00       	ld.sh	r0,r0[0x0]
800044f2:	48 e8       	lddpc	r8,80004528 <ui_wakeup_isr+0x28>
800044f4:	80 00       	ld.sh	r0,r0[0x0]
800044f6:	49 6c       	lddpc	r12,8000454c <ui_host_sof_event+0x1c>
800044f8:	80 00       	ld.sh	r0,r0[0x0]
800044fa:	47 b8       	lddsp	r8,sp[0x1ec]
800044fc:	80 00       	ld.sh	r0,r0[0x0]
800044fe:	48 88       	lddpc	r8,8000451c <ui_wakeup_isr+0x1c>

80004500 <ui_wakeup_isr>:

/**
 * \brief Interrupt handler for interrupt pin change
 */
ISR(ui_wakeup_isr, AVR32_GPIO_IRQ_GROUP, 0)
{
80004500:	d4 01       	pushm	lr
	// Clear GPIO interrupt.
	gpio_clear_pin_interrupt_flag(GPIO_JOYSTICK_PUSH);
80004502:	31 4c       	mov	r12,20
80004504:	f0 1f 00 07 	mcall	80004520 <ui_wakeup_isr+0x20>

	// Clear External Interrupt Line else Wakeup event always enabled
	eic_clear_interrupt_line(&AVR32_EIC, EXT_NMI);
80004508:	30 8b       	mov	r11,8
8000450a:	fe 7c 0d 80 	mov	r12,-62080
8000450e:	f0 1f 00 06 	mcall	80004524 <ui_wakeup_isr+0x24>

	ui_disable_asynchronous_interrupt();
80004512:	f0 1f 00 06 	mcall	80004528 <ui_wakeup_isr+0x28>

	// Wakeup host and device
	uhc_resume();
80004516:	f0 1f 00 06 	mcall	8000452c <ui_wakeup_isr+0x2c>
}
8000451a:	d4 02       	popm	lr
8000451c:	d6 03       	rete
8000451e:	00 00       	add	r0,r0
80004520:	80 00       	ld.sh	r0,r0[0x0]
80004522:	4a e4       	lddpc	r4,800045d8 <ui_host_sof_event+0xa8>
80004524:	80 00       	ld.sh	r0,r0[0x0]
80004526:	48 9c       	lddpc	r12,80004548 <ui_host_sof_event+0x18>
80004528:	80 00       	ld.sh	r0,r0[0x0]
8000452a:	44 54       	lddsp	r4,sp[0x114]
8000452c:	80 00       	ld.sh	r0,r0[0x0]
8000452e:	84 6c       	ld.sh	r12,r2[0xc]

80004530 <ui_host_sof_event>:
{
	ui_disable_asynchronous_interrupt();
}

void ui_host_sof_event(void)
{
80004530:	d4 01       	pushm	lr
	bool b_btn_state;
	static bool btn_suspend = false;
	static bool btn_suspend_and_remotewakeup = false;
	static uint16_t counter_sof = 0;

	if (ui_enum_status == UHC_ENUM_SUCCESS) {
80004532:	4b 98       	lddpc	r8,80004614 <ui_host_sof_event+0xe4>
80004534:	70 08       	ld.w	r8,r8[0x0]
80004536:	58 08       	cp.w	r8,0
80004538:	c6 d1       	brne	80004612 <ui_host_sof_event+0xe2>

		// Display device enumerated and in active mode
		if (++counter_sof > ui_device_speed_blink) {
8000453a:	4b 89       	lddpc	r9,80004618 <ui_host_sof_event+0xe8>
8000453c:	92 08       	ld.sh	r8,r9[0x0]
8000453e:	2f f8       	sub	r8,-1
80004540:	b2 08       	st.h	r9[0x0],r8
80004542:	4b 79       	lddpc	r9,8000461c <ui_host_sof_event+0xec>
80004544:	92 09       	ld.sh	r9,r9[0x0]
80004546:	f0 09 19 00 	cp.h	r9,r8
8000454a:	c1 52       	brcc	80004574 <ui_host_sof_event+0x44>
			counter_sof = 0;
8000454c:	30 08       	mov	r8,0
8000454e:	4b 39       	lddpc	r9,80004618 <ui_host_sof_event+0xe8>
80004550:	b2 08       	st.h	r9[0x0],r8
			if (ui_hid_mouse_plug) {
80004552:	4b 49       	lddpc	r9,80004620 <ui_host_sof_event+0xf0>
80004554:	13 89       	ld.ub	r9,r9[0x0]
80004556:	f0 09 18 00 	cp.b	r9,r8
8000455a:	c0 40       	breq	80004562 <ui_host_sof_event+0x32>
				LED_Toggle(LED2);
8000455c:	30 4c       	mov	r12,4
8000455e:	f0 1f 00 32 	mcall	80004624 <ui_host_sof_event+0xf4>
			}
			if (ui_midi_plug) {
80004562:	4b 28       	lddpc	r8,80004628 <ui_host_sof_event+0xf8>
80004564:	11 89       	ld.ub	r9,r8[0x0]
80004566:	30 08       	mov	r8,0
80004568:	f0 09 18 00 	cp.b	r9,r8
8000456c:	c0 40       	breq	80004574 <ui_host_sof_event+0x44>
				LED_Toggle(LED3);
8000456e:	30 8c       	mov	r12,8
80004570:	f0 1f 00 2d 	mcall	80004624 <ui_host_sof_event+0xf4>
			}
		}
		
		// Scan button to enter in suspend mode
		b_btn_state = !gpio_get_pin_value(GPIO_PUSH_BUTTON_0);
80004574:	35 8c       	mov	r12,88
80004576:	f0 1f 00 2e 	mcall	8000462c <ui_host_sof_event+0xfc>
8000457a:	ec 1c 00 01 	eorl	r12,0x1
8000457e:	5c 5c       	castu.b	r12
		if (b_btn_state != btn_suspend) {
80004580:	4a c8       	lddpc	r8,80004630 <ui_host_sof_event+0x100>
80004582:	11 88       	ld.ub	r8,r8[0x0]
80004584:	f8 08 18 00 	cp.b	r8,r12
80004588:	c1 e0       	breq	800045c4 <ui_host_sof_event+0x94>
			// Button have changed
			btn_suspend = b_btn_state;
8000458a:	4a a8       	lddpc	r8,80004630 <ui_host_sof_event+0x100>
8000458c:	b0 8c       	st.b	r8[0x0],r12
			if (b_btn_state) {
8000458e:	58 0c       	cp.w	r12,0
80004590:	c1 a0       	breq	800045c4 <ui_host_sof_event+0x94>
				// Button has been pressed
				LED_Off(LED2);
80004592:	30 4c       	mov	r12,4
80004594:	f0 1f 00 28 	mcall	80004634 <ui_host_sof_event+0x104>
				LED_Off(LED3);
80004598:	30 8c       	mov	r12,8
8000459a:	f0 1f 00 27 	mcall	80004634 <ui_host_sof_event+0x104>
				LED_Off(LED_BI0_GREEN);
8000459e:	32 0c       	mov	r12,32
800045a0:	f0 1f 00 25 	mcall	80004634 <ui_host_sof_event+0x104>
				LED_Off(LED_BI0_RED);
800045a4:	31 0c       	mov	r12,16
800045a6:	f0 1f 00 24 	mcall	80004634 <ui_host_sof_event+0x104>
				LED_Off(LED_BI1_GREEN);
800045aa:	e0 6c 00 80 	mov	r12,128
800045ae:	f0 1f 00 22 	mcall	80004634 <ui_host_sof_event+0x104>
				LED_Off(LED_BI1_RED);
800045b2:	34 0c       	mov	r12,64
800045b4:	f0 1f 00 20 	mcall	80004634 <ui_host_sof_event+0x104>
				ui_enable_asynchronous_interrupt();
800045b8:	f0 1f 00 20 	mcall	80004638 <ui_host_sof_event+0x108>
				uhc_suspend(false);
800045bc:	30 0c       	mov	r12,0
800045be:	f0 1f 00 20 	mcall	8000463c <ui_host_sof_event+0x10c>
				return;
800045c2:	d8 02       	popm	pc
			}
		}

		// Scan button to enter in suspend mode and remote wakeup
		b_btn_state = !gpio_get_pin_value(GPIO_PUSH_BUTTON_1);
800045c4:	35 5c       	mov	r12,85
800045c6:	f0 1f 00 1a 	mcall	8000462c <ui_host_sof_event+0xfc>
800045ca:	ec 1c 00 01 	eorl	r12,0x1
800045ce:	5c 5c       	castu.b	r12
		if (b_btn_state != btn_suspend_and_remotewakeup) {
800045d0:	49 c8       	lddpc	r8,80004640 <ui_host_sof_event+0x110>
800045d2:	11 88       	ld.ub	r8,r8[0x0]
800045d4:	f8 08 18 00 	cp.b	r8,r12
800045d8:	c1 d0       	breq	80004612 <ui_host_sof_event+0xe2>
			// Button have changed
			btn_suspend_and_remotewakeup = b_btn_state;
800045da:	49 a8       	lddpc	r8,80004640 <ui_host_sof_event+0x110>
800045dc:	b0 8c       	st.b	r8[0x0],r12
			if (b_btn_state) {
800045de:	58 0c       	cp.w	r12,0
800045e0:	c1 90       	breq	80004612 <ui_host_sof_event+0xe2>
				// Button has been pressed
				LED_Off(LED2);
800045e2:	30 4c       	mov	r12,4
800045e4:	f0 1f 00 14 	mcall	80004634 <ui_host_sof_event+0x104>
				LED_Off(LED3);
800045e8:	30 8c       	mov	r12,8
800045ea:	f0 1f 00 13 	mcall	80004634 <ui_host_sof_event+0x104>
				LED_Off(LED_BI0_GREEN);
800045ee:	32 0c       	mov	r12,32
800045f0:	f0 1f 00 11 	mcall	80004634 <ui_host_sof_event+0x104>
				LED_Off(LED_BI0_RED);
800045f4:	31 0c       	mov	r12,16
800045f6:	f0 1f 00 10 	mcall	80004634 <ui_host_sof_event+0x104>
				LED_Off(LED_BI1_GREEN);
800045fa:	e0 6c 00 80 	mov	r12,128
800045fe:	f0 1f 00 0e 	mcall	80004634 <ui_host_sof_event+0x104>
				LED_Off(LED_BI1_RED);
80004602:	34 0c       	mov	r12,64
80004604:	f0 1f 00 0c 	mcall	80004634 <ui_host_sof_event+0x104>
				ui_enable_asynchronous_interrupt();
80004608:	f0 1f 00 0c 	mcall	80004638 <ui_host_sof_event+0x108>
				uhc_suspend(true);
8000460c:	30 1c       	mov	r12,1
8000460e:	f0 1f 00 0c 	mcall	8000463c <ui_host_sof_event+0x10c>
80004612:	d8 02       	popm	pc
80004614:	00 00       	add	r0,r0
80004616:	00 c8       	st.b	r0++,r8
80004618:	00 00       	add	r0,r0
8000461a:	09 68       	ld.uh	r8,--r4
8000461c:	00 00       	add	r0,r0
8000461e:	09 62       	ld.uh	r2,--r4
80004620:	00 00       	add	r0,r0
80004622:	09 65       	ld.uh	r5,--r4
80004624:	80 00       	ld.sh	r0,r0[0x0]
80004626:	46 c4       	lddsp	r4,sp[0x1b0]
80004628:	00 00       	add	r0,r0
8000462a:	09 61       	ld.uh	r1,--r4
8000462c:	80 00       	ld.sh	r0,r0[0x0]
8000462e:	4a 3a       	lddpc	r10,800046b8 <board_init+0x74>
80004630:	00 00       	add	r0,r0
80004632:	09 66       	ld.uh	r6,--r4
80004634:	80 00       	ld.sh	r0,r0[0x0]
80004636:	47 64       	lddsp	r4,sp[0x1d8]
80004638:	80 00       	ld.sh	r0,r0[0x0]
8000463a:	44 7c       	lddsp	r12,sp[0x11c]
8000463c:	80 00       	ld.sh	r0,r0[0x0]
8000463e:	84 84       	ld.uh	r4,r2[0x0]
80004640:	00 00       	add	r0,r0
80004642:	09 60       	ld.uh	r0,--r4

80004644 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80004644:	d4 01       	pushm	lr
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004646:	30 3b       	mov	r11,3
80004648:	33 bc       	mov	r12,59
8000464a:	f0 1f 00 1e 	mcall	800046c0 <board_init+0x7c>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000464e:	30 3b       	mov	r11,3
80004650:	33 cc       	mov	r12,60
80004652:	f0 1f 00 1c 	mcall	800046c0 <board_init+0x7c>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004656:	30 3b       	mov	r11,3
80004658:	33 dc       	mov	r12,61
8000465a:	f0 1f 00 1a 	mcall	800046c0 <board_init+0x7c>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000465e:	30 3b       	mov	r11,3
80004660:	33 ec       	mov	r12,62
80004662:	f0 1f 00 18 	mcall	800046c0 <board_init+0x7c>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004666:	30 3b       	mov	r11,3
80004668:	33 3c       	mov	r12,51
8000466a:	f0 1f 00 16 	mcall	800046c0 <board_init+0x7c>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000466e:	30 3b       	mov	r11,3
80004670:	33 4c       	mov	r12,52
80004672:	f0 1f 00 14 	mcall	800046c0 <board_init+0x7c>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004676:	30 3b       	mov	r11,3
80004678:	33 5c       	mov	r12,53
8000467a:	f0 1f 00 12 	mcall	800046c0 <board_init+0x7c>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000467e:	30 3b       	mov	r11,3
80004680:	33 6c       	mov	r12,54
80004682:	f0 1f 00 10 	mcall	800046c0 <board_init+0x7c>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
80004686:	30 0b       	mov	r11,0
80004688:	35 8c       	mov	r12,88
8000468a:	f0 1f 00 0e 	mcall	800046c0 <board_init+0x7c>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
8000468e:	30 0b       	mov	r11,0
80004690:	35 5c       	mov	r12,85
80004692:	f0 1f 00 0c 	mcall	800046c0 <board_init+0x7c>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
80004696:	30 0b       	mov	r11,0
80004698:	35 2c       	mov	r12,82
8000469a:	f0 1f 00 0a 	mcall	800046c0 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
8000469e:	30 0b       	mov	r11,0
800046a0:	31 4c       	mov	r12,20
800046a2:	f0 1f 00 08 	mcall	800046c0 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
800046a6:	30 0b       	mov	r11,0
800046a8:	31 9c       	mov	r12,25
800046aa:	f0 1f 00 06 	mcall	800046c0 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
800046ae:	30 0b       	mov	r11,0
800046b0:	31 ac       	mov	r12,26
800046b2:	f0 1f 00 04 	mcall	800046c0 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
800046b6:	30 0b       	mov	r11,0
800046b8:	31 bc       	mov	r12,27
800046ba:	f0 1f 00 02 	mcall	800046c0 <board_init+0x7c>
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
800046be:	d8 02       	popm	pc
800046c0:	80 00       	ld.sh	r0,r0[0x0]
800046c2:	49 82       	lddpc	r2,80004720 <LED_On+0xc>

800046c4 <LED_Toggle>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800046c4:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);
800046c8:	49 18       	lddpc	r8,8000470c <LED_Toggle+0x48>
800046ca:	70 09       	ld.w	r9,r8[0x0]
800046cc:	f9 e9 20 09 	eor	r9,r12,r9
800046d0:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800046d2:	58 0c       	cp.w	r12,0
800046d4:	5e 0c       	reteq	r12
800046d6:	48 f8       	lddpc	r8,80004710 <LED_Toggle+0x4c>
800046d8:	21 08       	sub	r8,16
  {
    // Select the next specified LED and toggle it.
    led_shift = 1 + ctz(leds);
800046da:	18 9a       	mov	r10,r12
800046dc:	5c 9a       	brev	r10
800046de:	f4 0a 12 00 	clz	r10,r10
800046e2:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
800046e4:	f4 09 15 04 	lsl	r9,r10,0x4
800046e8:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800046ea:	70 09       	ld.w	r9,r8[0x0]
800046ec:	a9 69       	lsl	r9,0x8
800046ee:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
800046f2:	70 1b       	ld.w	r11,r8[0x4]
800046f4:	f3 4b 00 5c 	st.w	r9[92],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800046f8:	70 1b       	ld.w	r11,r8[0x4]
800046fa:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800046fe:	70 1b       	ld.w	r11,r8[0x4]
80004700:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80004702:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80004706:	ce a1       	brne	800046da <LED_Toggle+0x16>
80004708:	5e fc       	retal	r12
8000470a:	00 00       	add	r0,r0
8000470c:	00 00       	add	r0,r0
8000470e:	00 cc       	st.b	r0++,r12
80004710:	80 00       	ld.sh	r0,r0[0x0]
80004712:	ee 40 f9 dc 	cp.w	r0,981468

80004714 <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80004714:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80004718:	49 18       	lddpc	r8,8000475c <LED_On+0x48>
8000471a:	70 09       	ld.w	r9,r8[0x0]
8000471c:	f9 e9 10 09 	or	r9,r12,r9
80004720:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80004722:	58 0c       	cp.w	r12,0
80004724:	5e 0c       	reteq	r12
80004726:	48 f8       	lddpc	r8,80004760 <LED_On+0x4c>
80004728:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
8000472a:	18 9a       	mov	r10,r12
8000472c:	5c 9a       	brev	r10
8000472e:	f4 0a 12 00 	clz	r10,r10
80004732:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80004734:	f4 09 15 04 	lsl	r9,r10,0x4
80004738:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000473a:	70 09       	ld.w	r9,r8[0x0]
8000473c:	a9 69       	lsl	r9,0x8
8000473e:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80004742:	70 1b       	ld.w	r11,r8[0x4]
80004744:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80004748:	70 1b       	ld.w	r11,r8[0x4]
8000474a:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000474e:	70 1b       	ld.w	r11,r8[0x4]
80004750:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80004752:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80004756:	ce a1       	brne	8000472a <LED_On+0x16>
80004758:	5e fc       	retal	r12
8000475a:	00 00       	add	r0,r0
8000475c:	00 00       	add	r0,r0
8000475e:	00 cc       	st.b	r0++,r12
80004760:	80 00       	ld.sh	r0,r0[0x0]
80004762:	ee 40 f9 dc 	cp.w	r0,981468

80004764 <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80004764:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80004768:	49 28       	lddpc	r8,800047b0 <LED_Off+0x4c>
8000476a:	70 09       	ld.w	r9,r8[0x0]
8000476c:	f8 0a 11 ff 	rsub	r10,r12,-1
80004770:	f5 e9 00 09 	and	r9,r10,r9
80004774:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80004776:	58 0c       	cp.w	r12,0
80004778:	5e 0c       	reteq	r12
8000477a:	48 f8       	lddpc	r8,800047b4 <LED_Off+0x50>
8000477c:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
8000477e:	18 9a       	mov	r10,r12
80004780:	5c 9a       	brev	r10
80004782:	f4 0a 12 00 	clz	r10,r10
80004786:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80004788:	f4 09 15 04 	lsl	r9,r10,0x4
8000478c:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000478e:	70 09       	ld.w	r9,r8[0x0]
80004790:	a9 69       	lsl	r9,0x8
80004792:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80004796:	70 1b       	ld.w	r11,r8[0x4]
80004798:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8000479c:	70 1b       	ld.w	r11,r8[0x4]
8000479e:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800047a2:	70 1b       	ld.w	r11,r8[0x4]
800047a4:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
800047a6:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800047aa:	ce a1       	brne	8000477e <LED_Off+0x1a>
800047ac:	5e fc       	retal	r12
800047ae:	00 00       	add	r0,r0
800047b0:	00 00       	add	r0,r0
800047b2:	00 cc       	st.b	r0++,r12
800047b4:	80 00       	ld.sh	r0,r0[0x0]
800047b6:	ee 40 eb cd 	cp.w	r0,977869

800047b8 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
800047b8:	eb cd 40 e0 	pushm	r5-r7,lr
	int i;
	for (i = 0; i < nb_lines; i++)
800047bc:	58 0a       	cp.w	r10,0
800047be:	c6 30       	breq	80004884 <eic_init+0xcc>
800047c0:	30 08       	mov	r8,0
800047c2:	10 97       	mov	r7,r8
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800047c4:	30 19       	mov	r9,1
800047c6:	30 1e       	mov	lr,1
800047c8:	f0 08 00 18 	add	r8,r8,r8<<0x1
800047cc:	f6 08 00 18 	add	r8,r11,r8<<0x1
800047d0:	11 96       	ld.ub	r6,r8[0x1]
800047d2:	f2 06 18 00 	cp.b	r6,r9
800047d6:	c0 71       	brne	800047e4 <eic_init+0x2c>
			? (eic->mode | (1 << opt[i].eic_line))
800047d8:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800047da:	11 86       	ld.ub	r6,r8[0x0]
800047dc:	fc 06 09 46 	lsl	r6,lr,r6
800047e0:	0a 46       	or	r6,r5
800047e2:	c0 78       	rjmp	800047f0 <eic_init+0x38>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
800047e4:	78 55       	ld.w	r5,r12[0x14]
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800047e6:	11 86       	ld.ub	r6,r8[0x0]
800047e8:	fc 06 09 46 	lsl	r6,lr,r6
800047ec:	5c d6       	com	r6
800047ee:	0a 66       	and	r6,r5
800047f0:	99 56       	st.w	r12[0x14],r6
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
800047f2:	11 a6       	ld.ub	r6,r8[0x2]
800047f4:	f2 06 18 00 	cp.b	r6,r9
800047f8:	c0 71       	brne	80004806 <eic_init+0x4e>
			? (eic->edge | (1 << opt[i].eic_line))
800047fa:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
800047fc:	11 86       	ld.ub	r6,r8[0x0]
800047fe:	fc 06 09 46 	lsl	r6,lr,r6
80004802:	0a 46       	or	r6,r5
80004804:	c0 78       	rjmp	80004812 <eic_init+0x5a>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80004806:	78 65       	ld.w	r5,r12[0x18]
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80004808:	11 86       	ld.ub	r6,r8[0x0]
8000480a:	fc 06 09 46 	lsl	r6,lr,r6
8000480e:	5c d6       	com	r6
80004810:	0a 66       	and	r6,r5
80004812:	99 66       	st.w	r12[0x18],r6
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80004814:	11 b6       	ld.ub	r6,r8[0x3]
80004816:	f2 06 18 00 	cp.b	r6,r9
8000481a:	c0 71       	brne	80004828 <eic_init+0x70>
			? (eic->level | (1 << opt[i].eic_line))
8000481c:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000481e:	11 86       	ld.ub	r6,r8[0x0]
80004820:	fc 06 09 46 	lsl	r6,lr,r6
80004824:	0a 46       	or	r6,r5
80004826:	c0 78       	rjmp	80004834 <eic_init+0x7c>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80004828:	78 75       	ld.w	r5,r12[0x1c]
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8000482a:	11 86       	ld.ub	r6,r8[0x0]
8000482c:	fc 06 09 46 	lsl	r6,lr,r6
80004830:	5c d6       	com	r6
80004832:	0a 66       	and	r6,r5
80004834:	99 76       	st.w	r12[0x1c],r6
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80004836:	11 c6       	ld.ub	r6,r8[0x4]
80004838:	f2 06 18 00 	cp.b	r6,r9
8000483c:	c0 71       	brne	8000484a <eic_init+0x92>
			? (eic->filter | (1 << opt[i].eic_line))
8000483e:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80004840:	11 86       	ld.ub	r6,r8[0x0]
80004842:	fc 06 09 46 	lsl	r6,lr,r6
80004846:	0a 46       	or	r6,r5
80004848:	c0 78       	rjmp	80004856 <eic_init+0x9e>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
8000484a:	78 85       	ld.w	r5,r12[0x20]
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8000484c:	11 86       	ld.ub	r6,r8[0x0]
8000484e:	fc 06 09 46 	lsl	r6,lr,r6
80004852:	5c d6       	com	r6
80004854:	0a 66       	and	r6,r5
80004856:	99 86       	st.w	r12[0x20],r6
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80004858:	11 d6       	ld.ub	r6,r8[0x5]
8000485a:	f2 06 18 00 	cp.b	r6,r9
8000485e:	c0 71       	brne	8000486c <eic_init+0xb4>
			? (eic->async | (1 << opt[i].eic_line))
80004860:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80004862:	11 88       	ld.ub	r8,r8[0x0]
80004864:	fc 08 09 48 	lsl	r8,lr,r8
80004868:	0c 48       	or	r8,r6
8000486a:	c0 78       	rjmp	80004878 <eic_init+0xc0>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
8000486c:	78 a6       	ld.w	r6,r12[0x28]
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
8000486e:	11 88       	ld.ub	r8,r8[0x0]
80004870:	fc 08 09 48 	lsl	r8,lr,r8
80004874:	5c d8       	com	r8
80004876:	0c 68       	and	r8,r6
80004878:	99 a8       	st.w	r12[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
8000487a:	2f f7       	sub	r7,-1
8000487c:	0e 98       	mov	r8,r7
8000487e:	0e 3a       	cp.w	r10,r7
80004880:	fe 9b ff a4 	brhi	800047c8 <eic_init+0x10>
80004884:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80004888 <eic_enable_line>:
}

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Enable line line_number
	eic->en = 1 << line_number;
80004888:	30 18       	mov	r8,1
8000488a:	f0 0b 09 48 	lsl	r8,r8,r11
8000488e:	99 c8       	st.w	r12[0x30],r8
}
80004890:	5e fc       	retal	r12

80004892 <eic_disable_line>:
}

void eic_disable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	// Disable line line_number
	eic->dis = 1 << line_number;
80004892:	30 18       	mov	r8,1
80004894:	f0 0b 09 48 	lsl	r8,r8,r11
80004898:	99 d8       	st.w	r12[0x34],r8
}
8000489a:	5e fc       	retal	r12

8000489c <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000489c:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800048a0:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
800048a2:	30 19       	mov	r9,1
800048a4:	f2 0b 09 4b 	lsl	r11,r9,r11
800048a8:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
800048aa:	78 39       	ld.w	r9,r12[0xc]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800048ac:	e6 18 00 01 	andh	r8,0x1,COH
800048b0:	c0 21       	brne	800048b4 <eic_clear_interrupt_line+0x18>
      cpu_irq_enable();
800048b2:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800048b4:	5e fc       	retal	r12

800048b6 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800048b6:	fe 68 14 00 	mov	r8,-125952
800048ba:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800048bc:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800048c0:	91 09       	st.w	r8[0x0],r9
}
800048c2:	5e fc       	retal	r12

800048c4 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
800048c4:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
800048c6:	e0 68 8a 3f 	mov	r8,35391
800048ca:	ea 18 01 f7 	orh	r8,0x1f7
800048ce:	10 3c       	cp.w	r12,r8
800048d0:	e0 88 00 06 	brls	800048dc <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
800048d4:	30 1c       	mov	r12,1
800048d6:	f0 1f 00 04 	mcall	800048e4 <flashc_set_bus_freq+0x20>
800048da:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
800048dc:	30 0c       	mov	r12,0
800048de:	f0 1f 00 02 	mcall	800048e4 <flashc_set_bus_freq+0x20>
800048e2:	d8 02       	popm	pc
800048e4:	80 00       	ld.sh	r0,r0[0x0]
800048e6:	48 b6       	lddpc	r6,80004910 <gpio_enable_module_pin+0x28>

800048e8 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800048e8:	f8 08 16 05 	lsr	r8,r12,0x5
800048ec:	a9 68       	lsl	r8,0x8
800048ee:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
800048f2:	58 1b       	cp.w	r11,1
800048f4:	c0 d0       	breq	8000490e <gpio_enable_module_pin+0x26>
800048f6:	c0 63       	brcs	80004902 <gpio_enable_module_pin+0x1a>
800048f8:	58 2b       	cp.w	r11,2
800048fa:	c1 00       	breq	8000491a <gpio_enable_module_pin+0x32>
800048fc:	58 3b       	cp.w	r11,3
800048fe:	c1 40       	breq	80004926 <gpio_enable_module_pin+0x3e>
80004900:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004902:	30 19       	mov	r9,1
80004904:	f2 0c 09 49 	lsl	r9,r9,r12
80004908:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000490a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000490c:	c1 28       	rjmp	80004930 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000490e:	30 19       	mov	r9,1
80004910:	f2 0c 09 49 	lsl	r9,r9,r12
80004914:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004916:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80004918:	c0 c8       	rjmp	80004930 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000491a:	30 19       	mov	r9,1
8000491c:	f2 0c 09 49 	lsl	r9,r9,r12
80004920:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004922:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80004924:	c0 68       	rjmp	80004930 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004926:	30 19       	mov	r9,1
80004928:	f2 0c 09 49 	lsl	r9,r9,r12
8000492c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000492e:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80004930:	30 19       	mov	r9,1
80004932:	f2 0c 09 4c 	lsl	r12,r9,r12
80004936:	91 2c       	st.w	r8[0x8],r12
80004938:	5e fd       	retal	0
8000493a:	d7 03       	nop

8000493c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000493c:	d4 21       	pushm	r4-r7,lr
8000493e:	18 97       	mov	r7,r12
80004940:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80004942:	58 0b       	cp.w	r11,0
80004944:	c0 31       	brne	8000494a <gpio_enable_module+0xe>
80004946:	30 05       	mov	r5,0
80004948:	c0 d8       	rjmp	80004962 <gpio_enable_module+0x26>
8000494a:	30 06       	mov	r6,0
8000494c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000494e:	6e 1b       	ld.w	r11,r7[0x4]
80004950:	6e 0c       	ld.w	r12,r7[0x0]
80004952:	f0 1f 00 06 	mcall	80004968 <gpio_enable_module+0x2c>
80004956:	18 45       	or	r5,r12
		gpiomap++;
80004958:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000495a:	2f f6       	sub	r6,-1
8000495c:	0c 34       	cp.w	r4,r6
8000495e:	fe 9b ff f8 	brhi	8000494e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80004962:	0a 9c       	mov	r12,r5
80004964:	d8 22       	popm	r4-r7,pc
80004966:	00 00       	add	r0,r0
80004968:	80 00       	ld.sh	r0,r0[0x0]
8000496a:	48 e8       	lddpc	r8,800049a0 <gpio_configure_pin+0x1e>

8000496c <gpio_enable_pin_pull_up>:
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000496c:	f8 08 16 05 	lsr	r8,r12,0x5
80004970:	a9 68       	lsl	r8,0x8
80004972:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->puers = 1 << (pin & 0x1F);
80004976:	30 19       	mov	r9,1
80004978:	f2 0c 09 4c 	lsl	r12,r9,r12
8000497c:	f1 4c 00 74 	st.w	r8[116],r12
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
80004980:	5e fc       	retal	r12

80004982 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004982:	f8 08 16 05 	lsr	r8,r12,0x5
80004986:	a9 68       	lsl	r8,0x8
80004988:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
8000498c:	16 99       	mov	r9,r11
8000498e:	e2 19 00 04 	andl	r9,0x4,COH
80004992:	c0 70       	breq	800049a0 <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
80004994:	30 19       	mov	r9,1
80004996:	f2 0c 09 49 	lsl	r9,r9,r12
8000499a:	f1 49 00 74 	st.w	r8[116],r9
8000499e:	c0 68       	rjmp	800049aa <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800049a0:	30 19       	mov	r9,1
800049a2:	f2 0c 09 49 	lsl	r9,r9,r12
800049a6:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800049aa:	16 99       	mov	r9,r11
800049ac:	e2 19 00 80 	andl	r9,0x80,COH
800049b0:	c2 40       	breq	800049f8 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800049b2:	16 99       	mov	r9,r11
800049b4:	e2 19 01 80 	andl	r9,0x180,COH
800049b8:	c0 90       	breq	800049ca <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800049ba:	30 19       	mov	r9,1
800049bc:	f2 0c 09 49 	lsl	r9,r9,r12
800049c0:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800049c4:	f1 49 00 b8 	st.w	r8[184],r9
800049c8:	c1 88       	rjmp	800049f8 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
800049ca:	16 99       	mov	r9,r11
800049cc:	e2 19 02 80 	andl	r9,0x280,COH
800049d0:	c0 90       	breq	800049e2 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
800049d2:	30 19       	mov	r9,1
800049d4:	f2 0c 09 49 	lsl	r9,r9,r12
800049d8:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800049dc:	f1 49 00 b8 	st.w	r8[184],r9
800049e0:	c0 c8       	rjmp	800049f8 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
800049e2:	16 99       	mov	r9,r11
800049e4:	e2 19 03 80 	andl	r9,0x380,COH
800049e8:	c0 80       	breq	800049f8 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800049ea:	30 19       	mov	r9,1
800049ec:	f2 0c 09 49 	lsl	r9,r9,r12
800049f0:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
800049f4:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
800049f8:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
800049fc:	c1 50       	breq	80004a26 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
800049fe:	e2 1b 00 02 	andl	r11,0x2,COH
80004a02:	c0 70       	breq	80004a10 <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80004a04:	30 19       	mov	r9,1
80004a06:	f2 0c 09 49 	lsl	r9,r9,r12
80004a0a:	f1 49 00 54 	st.w	r8[84],r9
80004a0e:	c0 68       	rjmp	80004a1a <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80004a10:	30 19       	mov	r9,1
80004a12:	f2 0c 09 49 	lsl	r9,r9,r12
80004a16:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80004a1a:	30 19       	mov	r9,1
80004a1c:	f2 0c 09 49 	lsl	r9,r9,r12
80004a20:	f1 49 00 44 	st.w	r8[68],r9
80004a24:	c0 68       	rjmp	80004a30 <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80004a26:	30 19       	mov	r9,1
80004a28:	f2 0c 09 49 	lsl	r9,r9,r12
80004a2c:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004a30:	30 19       	mov	r9,1
80004a32:	f2 0c 09 4c 	lsl	r12,r9,r12
80004a36:	91 1c       	st.w	r8[0x4],r12
}
80004a38:	5e fc       	retal	r12

80004a3a <gpio_get_pin_value>:
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004a3a:	f8 08 16 05 	lsr	r8,r12,0x5
80004a3e:	a9 68       	lsl	r8,0x8
80004a40:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80004a44:	71 88       	ld.w	r8,r8[0x60]
80004a46:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80004a4a:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80004a4e:	5e fc       	retal	r12

80004a50 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004a50:	f8 08 16 05 	lsr	r8,r12,0x5
80004a54:	a9 68       	lsl	r8,0x8
80004a56:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80004a5a:	30 19       	mov	r9,1
80004a5c:	f2 0c 09 4c 	lsl	r12,r9,r12
80004a60:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80004a64:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004a68:	91 1c       	st.w	r8[0x4],r12
}
80004a6a:	5e fc       	retal	r12

80004a6c <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004a6c:	f8 08 16 05 	lsr	r8,r12,0x5
80004a70:	a9 68       	lsl	r8,0x8
80004a72:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80004a76:	30 19       	mov	r9,1
80004a78:	f2 0c 09 4c 	lsl	r12,r9,r12
80004a7c:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80004a80:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004a84:	91 1c       	st.w	r8[0x4],r12
}
80004a86:	5e fc       	retal	r12

80004a88 <gpio_enable_pin_interrupt>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004a88:	f8 08 16 05 	lsr	r8,r12,0x5
80004a8c:	a9 68       	lsl	r8,0x8
80004a8e:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80004a92:	30 19       	mov	r9,1
80004a94:	f2 0c 09 4c 	lsl	r12,r9,r12
80004a98:	f1 4c 00 c4 	st.w	r8[196],r12
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
80004a9c:	12 3b       	cp.w	r11,r9
80004a9e:	c0 a0       	breq	80004ab2 <gpio_enable_pin_interrupt+0x2a>
80004aa0:	c0 43       	brcs	80004aa8 <gpio_enable_pin_interrupt+0x20>
80004aa2:	58 2b       	cp.w	r11,2
80004aa4:	c1 11       	brne	80004ac6 <gpio_enable_pin_interrupt+0x3e>
80004aa6:	c0 b8       	rjmp	80004abc <gpio_enable_pin_interrupt+0x34>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80004aa8:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
80004aac:	f1 4c 00 b8 	st.w	r8[184],r12
80004ab0:	c0 c8       	rjmp	80004ac8 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
80004ab2:	f1 4c 00 a4 	st.w	r8[164],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
80004ab6:	f1 4c 00 b8 	st.w	r8[184],r12
80004aba:	c0 78       	rjmp	80004ac8 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80004abc:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1s = 1 << (pin & 0x1F);
80004ac0:	f1 4c 00 b4 	st.w	r8[180],r12
80004ac4:	c0 28       	rjmp	80004ac8 <gpio_enable_pin_interrupt+0x40>
80004ac6:	5e ff       	retal	1
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80004ac8:	f1 4c 00 94 	st.w	r8[148],r12
80004acc:	5e fd       	retal	0

80004ace <gpio_disable_pin_interrupt>:
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_interrupt(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004ace:	f8 08 16 05 	lsr	r8,r12,0x5
80004ad2:	a9 68       	lsl	r8,0x8
80004ad4:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->ierc = 1 << (pin & 0x1F);
80004ad8:	30 19       	mov	r9,1
80004ada:	f2 0c 09 4c 	lsl	r12,r9,r12
80004ade:	f1 4c 00 98 	st.w	r8[152],r12
}
80004ae2:	5e fc       	retal	r12

80004ae4 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004ae4:	f8 08 16 05 	lsr	r8,r12,0x5
80004ae8:	a9 68       	lsl	r8,0x8
80004aea:	e0 28 f0 00 	sub	r8,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
80004aee:	30 19       	mov	r9,1
80004af0:	f2 0c 09 4c 	lsl	r12,r9,r12
80004af4:	f1 4c 00 d8 	st.w	r8[216],r12
#endif
}
80004af8:	5e fc       	retal	r12

80004afa <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80004afa:	c0 08       	rjmp	80004afa <_unhandled_interrupt>

80004afc <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80004afc:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80004b00:	49 99       	lddpc	r9,80004b64 <INTC_register_interrupt+0x68>
80004b02:	f2 08 00 39 	add	r9,r9,r8<<0x3
80004b06:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80004b0a:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80004b0c:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80004b10:	58 0a       	cp.w	r10,0
80004b12:	c0 91       	brne	80004b24 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004b14:	49 59       	lddpc	r9,80004b68 <INTC_register_interrupt+0x6c>
80004b16:	49 6a       	lddpc	r10,80004b6c <INTC_register_interrupt+0x70>
80004b18:	12 1a       	sub	r10,r9
80004b1a:	fe 79 08 00 	mov	r9,-63488
80004b1e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80004b22:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80004b24:	58 1a       	cp.w	r10,1
80004b26:	c0 a1       	brne	80004b3a <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80004b28:	49 09       	lddpc	r9,80004b68 <INTC_register_interrupt+0x6c>
80004b2a:	49 2a       	lddpc	r10,80004b70 <INTC_register_interrupt+0x74>
80004b2c:	12 1a       	sub	r10,r9
80004b2e:	bf aa       	sbr	r10,0x1e
80004b30:	fe 79 08 00 	mov	r9,-63488
80004b34:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80004b38:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80004b3a:	58 2a       	cp.w	r10,2
80004b3c:	c0 a1       	brne	80004b50 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80004b3e:	48 b9       	lddpc	r9,80004b68 <INTC_register_interrupt+0x6c>
80004b40:	48 da       	lddpc	r10,80004b74 <INTC_register_interrupt+0x78>
80004b42:	12 1a       	sub	r10,r9
80004b44:	bf ba       	sbr	r10,0x1f
80004b46:	fe 79 08 00 	mov	r9,-63488
80004b4a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80004b4e:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80004b50:	48 69       	lddpc	r9,80004b68 <INTC_register_interrupt+0x6c>
80004b52:	48 aa       	lddpc	r10,80004b78 <INTC_register_interrupt+0x7c>
80004b54:	12 1a       	sub	r10,r9
80004b56:	ea 1a c0 00 	orh	r10,0xc000
80004b5a:	fe 79 08 00 	mov	r9,-63488
80004b5e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80004b62:	5e fc       	retal	r12
80004b64:	80 00       	ld.sh	r0,r0[0x0]
80004b66:	ee c0 80 00 	sub	r0,r7,-32768
80004b6a:	ec 00       	*unknown*
80004b6c:	80 00       	ld.sh	r0,r0[0x0]
80004b6e:	ed 04 80 00 	ld.sh	r4,r6[-32768]
80004b72:	ed 12 80 00 	ld.uh	r2,r6[-32768]
80004b76:	ed 20 80 00 	ld.sb	r0,r6[-32768]
80004b7a:	ed 2e d4 21 	ld.sb	lr,r6[-11231]

80004b7c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80004b7c:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80004b7e:	49 18       	lddpc	r8,80004bc0 <INTC_init_interrupts+0x44>
80004b80:	e3 b8 00 01 	mtsr	0x4,r8
80004b84:	49 0e       	lddpc	lr,80004bc4 <INTC_init_interrupts+0x48>
80004b86:	30 07       	mov	r7,0
80004b88:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80004b8a:	49 0c       	lddpc	r12,80004bc8 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004b8c:	49 05       	lddpc	r5,80004bcc <INTC_init_interrupts+0x50>
80004b8e:	10 15       	sub	r5,r8
80004b90:	fe 76 08 00 	mov	r6,-63488
80004b94:	c1 08       	rjmp	80004bb4 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80004b96:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80004b98:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004b9a:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80004b9c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80004ba0:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004ba2:	10 3a       	cp.w	r10,r8
80004ba4:	fe 9b ff fc 	brhi	80004b9c <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004ba8:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004bac:	2f f7       	sub	r7,-1
80004bae:	2f 8e       	sub	lr,-8
80004bb0:	59 47       	cp.w	r7,20
80004bb2:	c0 50       	breq	80004bbc <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004bb4:	7c 08       	ld.w	r8,lr[0x0]
80004bb6:	58 08       	cp.w	r8,0
80004bb8:	ce f1       	brne	80004b96 <INTC_init_interrupts+0x1a>
80004bba:	cf 7b       	rjmp	80004ba8 <INTC_init_interrupts+0x2c>
80004bbc:	d8 22       	popm	r4-r7,pc
80004bbe:	00 00       	add	r0,r0
80004bc0:	80 00       	ld.sh	r0,r0[0x0]
80004bc2:	ec 00       	*unknown*
80004bc4:	80 00       	ld.sh	r0,r0[0x0]
80004bc6:	ee c0 80 00 	sub	r0,r7,-32768
80004bca:	4a fa       	lddpc	r10,80004c84 <udd_ep_set_halt+0x20>
80004bcc:	80 00       	ld.sh	r0,r0[0x0]
80004bce:	ed 04 fe 78 	ld.sh	r4,r6[-392]

80004bd0 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80004bd0:	fe 78 08 00 	mov	r8,-63488
80004bd4:	e0 69 00 83 	mov	r9,131
80004bd8:	f2 0c 01 0c 	sub	r12,r9,r12
80004bdc:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80004be0:	f2 ca ff c0 	sub	r10,r9,-64
80004be4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004be8:	58 08       	cp.w	r8,0
80004bea:	c0 21       	brne	80004bee <_get_interrupt_handler+0x1e>
80004bec:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004bee:	f0 08 12 00 	clz	r8,r8
80004bf2:	48 5a       	lddpc	r10,80004c04 <_get_interrupt_handler+0x34>
80004bf4:	f4 09 00 39 	add	r9,r10,r9<<0x3
80004bf8:	f0 08 11 1f 	rsub	r8,r8,31
80004bfc:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004bfe:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80004c02:	5e fc       	retal	r12
80004c04:	80 00       	ld.sh	r0,r0[0x0]
80004c06:	ee c0 fe 68 	sub	r0,r7,-408

80004c08 <udd_set_address>:
}


void udd_set_address(uint8_t address)
{
	udd_disable_address();
80004c08:	fe 68 00 00 	mov	r8,-131072
80004c0c:	70 09       	ld.w	r9,r8[0x0]
80004c0e:	a7 d9       	cbr	r9,0x7
80004c10:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
80004c12:	70 09       	ld.w	r9,r8[0x0]
80004c14:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80004c18:	e0 19 ff 80 	andl	r9,0xff80
80004c1c:	f9 e9 10 09 	or	r9,r12,r9
80004c20:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80004c22:	70 09       	ld.w	r9,r8[0x0]
80004c24:	a7 b9       	sbr	r9,0x7
80004c26:	91 09       	st.w	r8[0x0],r9
}
80004c28:	5e fc       	retal	r12

80004c2a <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
80004c2a:	fe 68 00 00 	mov	r8,-131072
80004c2e:	70 0c       	ld.w	r12,r8[0x0]
}
80004c30:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80004c34:	5e fc       	retal	r12

80004c36 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
80004c36:	fe 68 00 20 	mov	r8,-131040
80004c3a:	70 0c       	ld.w	r12,r8[0x0]
}
80004c3c:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
80004c40:	5e fc       	retal	r12
80004c42:	d7 03       	nop

80004c44 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
80004c44:	48 28       	lddpc	r8,80004c4c <udd_set_setup_payload+0x8>
80004c46:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
80004c48:	b0 6b       	st.h	r8[0xc],r11
}
80004c4a:	5e fc       	retal	r12
80004c4c:	00 00       	add	r0,r0
80004c4e:	0c 3c       	cp.w	r12,r6

80004c50 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80004c50:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80004c54:	a3 68       	lsl	r8,0x2
80004c56:	e0 38 fe 40 	sub	r8,130624
80004c5a:	70 0c       	ld.w	r12,r8[0x0]
}
80004c5c:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80004c60:	5e fc       	retal	r12
80004c62:	d7 03       	nop

80004c64 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
80004c64:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80004c66:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index) {
80004c6a:	30 29       	mov	r9,2
80004c6c:	f2 08 18 00 	cp.b	r8,r9
80004c70:	e0 8b 00 49 	brhi	80004d02 <udd_ep_set_halt+0x9e>
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
80004c74:	f0 09 15 02 	lsl	r9,r8,0x2
80004c78:	fe 6e 01 c0 	mov	lr,-130624
80004c7c:	f2 0e 00 0a 	add	r10,r9,lr
80004c80:	74 0a       	ld.w	r10,r10[0x0]
80004c82:	e6 1a 00 08 	andh	r10,0x8,COH
80004c86:	c3 f1       	brne	80004d04 <udd_ep_set_halt+0xa0>

	if (USB_DEVICE_MAX_EP < index) {
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];
80004c88:	f0 ca 00 01 	sub	r10,r8,1
80004c8c:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
80004c90:	49 eb       	lddpc	r11,80004d08 <udd_ep_set_halt+0xa4>
80004c92:	f6 0a 00 2a 	add	r10,r11,r10<<0x2

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
80004c96:	74 0b       	ld.w	r11,r10[0x0]
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
80004c98:	16 9e       	mov	lr,r11
80004c9a:	e6 1e 20 00 	andh	lr,0x2000,COH
80004c9e:	c3 31       	brne	80004d04 <udd_ep_set_halt+0xa0>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
80004ca0:	58 0b       	cp.w	r11,0
80004ca2:	c3 05       	brlt	80004d02 <udd_ep_set_halt+0x9e>
		return false; // Job on going, stall impossible
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
80004ca4:	30 0b       	mov	r11,0
80004ca6:	f6 0c 18 00 	cp.b	r12,r11
80004caa:	c1 94       	brge	80004cdc <udd_ep_set_halt+0x78>
80004cac:	fe 6c 01 30 	mov	r12,-130768
80004cb0:	f2 0c 00 0b 	add	r11,r9,r12
80004cb4:	76 0b       	ld.w	r11,r11[0x0]
80004cb6:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
80004cba:	c1 10       	breq	80004cdc <udd_ep_set_halt+0x78>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
80004cbc:	74 0b       	ld.w	r11,r10[0x0]
80004cbe:	30 1c       	mov	r12,1
80004cc0:	f7 dc d3 a1 	bfins	r11,r12,0x1d,0x1
80004cc4:	95 0b       	st.w	r10[0x0],r11
			udd_enable_bank_interrupt(index);
80004cc6:	e0 39 fe 10 	sub	r9,130576
80004cca:	e0 6a 10 00 	mov	r10,4096
80004cce:	93 0a       	st.w	r9[0x0],r10
			udd_enable_endpoint_interrupt(index);
80004cd0:	f4 08 09 48 	lsl	r8,r10,r8
80004cd4:	fe 69 00 00 	mov	r9,-131072
80004cd8:	93 68       	st.w	r9[0x18],r8
			return true;
80004cda:	d8 02       	popm	pc
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
80004cdc:	fe 6a 01 00 	mov	r10,-130816
80004ce0:	f2 0a 00 08 	add	r8,r9,r10
80004ce4:	70 0a       	ld.w	r10,r8[0x0]
80004ce6:	a9 da       	cbr	r10,0x9
80004ce8:	91 0a       	st.w	r8[0x0],r10
	udd_ack_stall(index);
80004cea:	fe 6e 01 60 	mov	lr,-130720
80004cee:	f2 0e 00 08 	add	r8,r9,lr
80004cf2:	34 0a       	mov	r10,64
80004cf4:	91 0a       	st.w	r8[0x0],r10
	udd_enable_stall_handshake(index);
80004cf6:	e0 39 fe 10 	sub	r9,130576
80004cfa:	e8 68 00 00 	mov	r8,524288
80004cfe:	93 08       	st.w	r9[0x0],r8
80004d00:	da 0a       	popm	pc,r12=1
	return true;
80004d02:	d8 0a       	popm	pc,r12=0
80004d04:	da 0a       	popm	pc,r12=1
80004d06:	00 00       	add	r0,r0
80004d08:	00 00       	add	r0,r0
80004d0a:	0a 60       	and	r0,r5

80004d0c <udd_ep_clear_halt>:
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80004d0c:	d4 01       	pushm	lr
	bool b_stall_cleared = false;
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80004d0e:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
80004d12:	30 28       	mov	r8,2
80004d14:	f0 0c 18 00 	cp.b	r12,r8
80004d18:	e0 88 00 03 	brls	80004d1e <udd_ep_clear_halt+0x12>
80004d1c:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
80004d1e:	18 99       	mov	r9,r12
80004d20:	f8 c8 00 01 	sub	r8,r12,1
80004d24:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004d28:	4a aa       	lddpc	r10,80004dd0 <udd_ep_clear_halt+0xc4>
80004d2a:	f4 08 00 28 	add	r8,r10,r8<<0x2

	if (ptr_job->stall_requested) {
80004d2e:	70 0a       	ld.w	r10,r8[0x0]
80004d30:	e6 1a 20 00 	andh	r10,0x2000,COH
80004d34:	c0 31       	brne	80004d3a <udd_ep_clear_halt+0x2e>
80004d36:	30 0b       	mov	r11,0
80004d38:	c1 38       	rjmp	80004d5e <udd_ep_clear_halt+0x52>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
80004d3a:	70 0a       	ld.w	r10,r8[0x0]
80004d3c:	30 0b       	mov	r11,0
80004d3e:	f5 db d3 a1 	bfins	r10,r11,0x1d,0x1
80004d42:	91 0a       	st.w	r8[0x0],r10
		udd_disable_bank_interrupt(ep);
80004d44:	f8 0b 15 02 	lsl	r11,r12,0x2
80004d48:	e0 3b fd e0 	sub	r11,130528
80004d4c:	e0 6a 10 00 	mov	r10,4096
80004d50:	97 0a       	st.w	r11[0x0],r10
		udd_disable_endpoint_interrupt(ep);
80004d52:	f4 0c 09 4c 	lsl	r12,r10,r12
80004d56:	fe 6b 00 00 	mov	r11,-131072
80004d5a:	97 5c       	st.w	r11[0x14],r12
80004d5c:	30 1b       	mov	r11,1
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
80004d5e:	a3 69       	lsl	r9,0x2
80004d60:	fe 6c 01 c0 	mov	r12,-130624
80004d64:	f2 0c 00 0a 	add	r10,r9,r12
80004d68:	74 0a       	ld.w	r10,r10[0x0]
80004d6a:	e6 1a 00 08 	andh	r10,0x8,COH
80004d6e:	c2 30       	breq	80004db4 <udd_ep_clear_halt+0xa8>
		if (Is_udd_stall(ep)) {
80004d70:	fe 6b 01 30 	mov	r11,-130768
80004d74:	f2 0b 00 0a 	add	r10,r9,r11
80004d78:	74 0a       	ld.w	r10,r10[0x0]
80004d7a:	e2 1a 00 40 	andl	r10,0x40,COH
80004d7e:	c0 e0       	breq	80004d9a <udd_ep_clear_halt+0x8e>
			udd_ack_stall(ep);
80004d80:	fe 6c 01 60 	mov	r12,-130720
80004d84:	f2 0c 00 0a 	add	r10,r9,r12
80004d88:	34 0b       	mov	r11,64
80004d8a:	95 0b       	st.w	r10[0x0],r11
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
80004d8c:	fe 6b 01 f0 	mov	r11,-130576
80004d90:	f2 0b 00 0a 	add	r10,r9,r11
80004d94:	e4 6b 00 00 	mov	r11,262144
80004d98:	95 0b       	st.w	r10[0x0],r11
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
80004d9a:	fe 6c 02 20 	mov	r12,-130528
80004d9e:	f2 0c 00 0a 	add	r10,r9,r12
80004da2:	e8 6b 00 00 	mov	r11,524288
80004da6:	95 0b       	st.w	r10[0x0],r11
		udd_enable_endpoint_bank_autoswitch(ep);
80004da8:	e0 39 ff 00 	sub	r9,130816
80004dac:	72 0a       	ld.w	r10,r9[0x0]
80004dae:	a9 ba       	sbr	r10,0x9
80004db0:	93 0a       	st.w	r9[0x0],r10
80004db2:	c0 38       	rjmp	80004db8 <udd_ep_clear_halt+0xac>
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
80004db4:	58 0b       	cp.w	r11,0
80004db6:	c0 b0       	breq	80004dcc <udd_ep_clear_halt+0xc0>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
80004db8:	70 09       	ld.w	r9,r8[0x0]
80004dba:	58 09       	cp.w	r9,0
80004dbc:	c0 84       	brge	80004dcc <udd_ep_clear_halt+0xc0>
			ptr_job->busy = false;
80004dbe:	30 0a       	mov	r10,0
80004dc0:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
80004dc4:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
80004dc6:	70 48       	ld.w	r8,r8[0x10]
80004dc8:	5d 18       	icall	r8
80004dca:	da 0a       	popm	pc,r12=1
80004dcc:	da 0a       	popm	pc,r12=1
80004dce:	00 00       	add	r0,r0
80004dd0:	00 00       	add	r0,r0
80004dd2:	0a 60       	and	r0,r5

80004dd4 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80004dd4:	30 59       	mov	r9,5
80004dd6:	48 58       	lddpc	r8,80004de8 <udd_ctrl_stall_data+0x14>
80004dd8:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80004dda:	e8 69 00 00 	mov	r9,524288
80004dde:	fe 68 01 f0 	mov	r8,-130576
80004de2:	91 09       	st.w	r8[0x0],r9
}
80004de4:	5e fc       	retal	r12
80004de6:	00 00       	add	r0,r0
80004de8:	00 00       	add	r0,r0
80004dea:	0a 90       	mov	r0,r5

80004dec <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
80004dec:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80004dee:	48 48       	lddpc	r8,80004dfc <udd_ctrl_endofrequest+0x10>
80004df0:	70 48       	ld.w	r8,r8[0x10]
80004df2:	58 08       	cp.w	r8,0
80004df4:	c0 20       	breq	80004df8 <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
80004df6:	5d 18       	icall	r8
80004df8:	d8 02       	popm	pc
80004dfa:	00 00       	add	r0,r0
80004dfc:	00 00       	add	r0,r0
80004dfe:	0c 3c       	cp.w	r12,r6

80004e00 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
80004e00:	d4 01       	pushm	lr
80004e02:	16 99       	mov	r9,r11
	if (ptr_job->busy == false) {
80004e04:	78 08       	ld.w	r8,r12[0x0]
80004e06:	58 08       	cp.w	r8,0
80004e08:	c1 84       	brge	80004e38 <udd_ep_finish_job+0x38>
		return; // No on-going job
	}
	ptr_job->busy = false;
80004e0a:	30 0b       	mov	r11,0
80004e0c:	f1 db d3 e1 	bfins	r8,r11,0x1f,0x1
80004e10:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans) {
80004e12:	78 48       	ld.w	r8,r12[0x10]
80004e14:	58 08       	cp.w	r8,0
80004e16:	c1 10       	breq	80004e38 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
80004e18:	f4 0b 15 02 	lsl	r11,r10,0x2
80004e1c:	e0 3b ff 00 	sub	r11,130816
80004e20:	76 0b       	ld.w	r11,r11[0x0]
80004e22:	e2 1b 01 00 	andl	r11,0x100,COH
80004e26:	c0 60       	breq	80004e32 <udd_ep_finish_job+0x32>
		ep_num |= USB_EP_DIR_IN;
80004e28:	ea 1a ff ff 	orh	r10,0xffff
80004e2c:	e8 1a ff 80 	orl	r10,0xff80
80004e30:	5c 5a       	castu.b	r10
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80004e32:	78 2b       	ld.w	r11,r12[0x8]
80004e34:	12 9c       	mov	r12,r9
80004e36:	5d 18       	icall	r8
80004e38:	d8 02       	popm	pc
80004e3a:	d7 03       	nop

80004e3c <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
80004e3c:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
80004e3e:	f5 dc c0 04 	bfextu	r10,r12,0x0,0x4

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
80004e42:	f4 cc 00 01 	sub	r12,r10,1
80004e46:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80004e4a:	30 1b       	mov	r11,1
80004e4c:	48 38       	lddpc	r8,80004e58 <udd_ep_abort_job+0x1c>
80004e4e:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
80004e52:	f0 1f 00 03 	mcall	80004e5c <udd_ep_abort_job+0x20>
}
80004e56:	d8 02       	popm	pc
80004e58:	00 00       	add	r0,r0
80004e5a:	0a 60       	and	r0,r5
80004e5c:	80 00       	ld.sh	r0,r0[0x0]
80004e5e:	4e 00       	lddpc	r0,80004fdc <udd_ep_trans_done+0xbc>

80004e60 <udd_ep_abort>:
	return true;
}


void udd_ep_abort(udd_ep_id_t ep)
{
80004e60:	d4 01       	pushm	lr
	uint8_t index = ep & USB_EP_ADDR_MASK;
80004e62:	f3 dc c0 04 	bfextu	r9,r12,0x0,0x4

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
80004e66:	f2 c8 00 01 	sub	r8,r9,1
80004e6a:	fc 1a 02 00 	movh	r10,0x200
80004e6e:	f4 08 09 4a 	lsl	r10,r10,r8
80004e72:	fe 68 00 00 	mov	r8,-131072
80004e76:	91 5a       	st.w	r8[0x14],r10
	udd_endpoint_dma_set_control(index, 0);
80004e78:	f2 0a 15 04 	lsl	r10,r9,0x4
80004e7c:	e0 3a fd 00 	sub	r10,130304
80004e80:	30 0b       	mov	r11,0
80004e82:	95 2b       	st.w	r10[0x8],r11
	// Kill banks
	udd_disable_endpoint_interrupt(index);
80004e84:	e0 6a 10 00 	mov	r10,4096
80004e88:	f4 09 09 4a 	lsl	r10,r10,r9
80004e8c:	91 5a       	st.w	r8[0x14],r10
	while (udd_nb_busy_bank(index)) {
80004e8e:	a3 69       	lsl	r9,0x2
80004e90:	fe 68 01 30 	mov	r8,-130768
80004e94:	f2 08 00 0a 	add	r10,r9,r8
		udd_kill_last_in_bank(index);
80004e98:	fe 68 01 f0 	mov	r8,-130576
80004e9c:	f2 08 00 0e 	add	lr,r9,r8
80004ea0:	e0 6b 20 00 	mov	r11,8192
		while(Is_udd_killing_last_in_bank(index));
80004ea4:	e0 39 fe 40 	sub	r9,130624
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
80004ea8:	c0 68       	rjmp	80004eb4 <udd_ep_abort+0x54>
		udd_kill_last_in_bank(index);
80004eaa:	9d 0b       	st.w	lr[0x0],r11
		while(Is_udd_killing_last_in_bank(index));
80004eac:	72 08       	ld.w	r8,r9[0x0]
80004eae:	e2 18 20 00 	andl	r8,0x2000,COH
80004eb2:	cf d1       	brne	80004eac <udd_ep_abort+0x4c>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
80004eb4:	74 08       	ld.w	r8,r10[0x0]
80004eb6:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80004eba:	cf 81       	brne	80004eaa <udd_ep_abort+0x4a>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
80004ebc:	f0 1f 00 02 	mcall	80004ec4 <udd_ep_abort+0x64>
}
80004ec0:	d8 02       	popm	pc
80004ec2:	00 00       	add	r0,r0
80004ec4:	80 00       	ld.sh	r0,r0[0x0]
80004ec6:	4e 3c       	lddpc	r12,80005050 <udd_ep_trans_done+0x130>

80004ec8 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
80004ec8:	eb cd 40 80 	pushm	r7,lr
	uint8_t index = ep & USB_EP_ADDR_MASK;
80004ecc:	ef dc c0 04 	bfextu	r7,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index) {
80004ed0:	30 28       	mov	r8,2
80004ed2:	f0 07 18 00 	cp.b	r7,r8
80004ed6:	e0 8b 00 1f 	brhi	80004f14 <udd_ep_free+0x4c>
		return;
	}
	udd_disable_endpoint(index);
80004eda:	fe 68 00 00 	mov	r8,-131072
80004ede:	70 7a       	ld.w	r10,r8[0x1c]
80004ee0:	30 19       	mov	r9,1
80004ee2:	f2 07 09 49 	lsl	r9,r9,r7
80004ee6:	5c d9       	com	r9
80004ee8:	14 69       	and	r9,r10
80004eea:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
80004eec:	ee 08 15 02 	lsl	r8,r7,0x2
80004ef0:	e0 38 ff 00 	sub	r8,130816
80004ef4:	70 09       	ld.w	r9,r8[0x0]
80004ef6:	a1 d9       	cbr	r9,0x1
80004ef8:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
80004efa:	f0 1f 00 08 	mcall	80004f18 <udd_ep_free+0x50>
	udd_ep_job[index - 1].stall_requested = false;
80004efe:	20 17       	sub	r7,1
80004f00:	ee 07 00 27 	add	r7,r7,r7<<0x2
80004f04:	48 68       	lddpc	r8,80004f1c <udd_ep_free+0x54>
80004f06:	f0 07 00 27 	add	r7,r8,r7<<0x2
80004f0a:	6e 08       	ld.w	r8,r7[0x0]
80004f0c:	30 09       	mov	r9,0
80004f0e:	f1 d9 d3 a1 	bfins	r8,r9,0x1d,0x1
80004f12:	8f 08       	st.w	r7[0x0],r8
80004f14:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f18:	80 00       	ld.sh	r0,r0[0x0]
80004f1a:	4e 3c       	lddpc	r12,800050a4 <udd_ep_run+0x2c>
80004f1c:	00 00       	add	r0,r0
80004f1e:	0a 60       	and	r0,r5

80004f20 <udd_ep_trans_done>:
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

static void udd_ep_trans_done(udd_ep_id_t ep)
{
80004f20:	eb cd 40 c0 	pushm	r6-r7,lr
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
80004f24:	18 99       	mov	r9,r12
80004f26:	f8 c8 00 01 	sub	r8,r12,1
80004f2a:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004f2e:	4d 1a       	lddpc	r10,80005070 <udd_ep_trans_done+0x150>
80004f30:	f4 08 00 28 	add	r8,r10,r8<<0x2

	if (!ptr_job->busy) {
80004f34:	70 0a       	ld.w	r10,r8[0x0]
80004f36:	58 0a       	cp.w	r10,0
80004f38:	e0 84 00 99 	brge	8000506a <udd_ep_trans_done+0x14a>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80004f3c:	70 3a       	ld.w	r10,r8[0xc]
80004f3e:	70 2b       	ld.w	r11,r8[0x8]
80004f40:	16 3a       	cp.w	r10,r11
80004f42:	c6 10       	breq	80005004 <udd_ep_trans_done+0xe4>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80004f44:	f6 0a 01 0a 	sub	r10,r11,r10

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80004f48:	e0 5a 00 00 	cp.w	r10,65536
80004f4c:	e0 88 00 06 	brls	80004f58 <udd_ep_trans_done+0x38>
80004f50:	e0 7a 00 00 	mov	r10,65536
80004f54:	30 0e       	mov	lr,0
80004f56:	c0 38       	rjmp	80004f5c <udd_ep_trans_done+0x3c>
			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
80004f58:	f4 0e 15 10 	lsl	lr,r10,0x10
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
80004f5c:	f2 0b 15 02 	lsl	r11,r9,0x2
80004f60:	e0 3b ff 00 	sub	r11,130816
80004f64:	76 07       	ld.w	r7,r11[0x0]
80004f66:	e2 17 01 00 	andl	r7,0x100,COH
80004f6a:	c1 20       	breq	80004f8e <udd_ep_trans_done+0x6e>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
80004f6c:	76 0b       	ld.w	r11,r11[0x0]
80004f6e:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
80004f72:	30 87       	mov	r7,8
80004f74:	ee 0b 09 4b 	lsl	r11,r7,r11
80004f78:	20 1b       	sub	r11,1
80004f7a:	f5 eb 00 0b 	and	r11,r10,r11
80004f7e:	c1 80       	breq	80004fae <udd_ep_trans_done+0x8e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
80004f80:	0e 4e       	or	lr,r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80004f82:	70 0b       	ld.w	r11,r8[0x0]
80004f84:	30 07       	mov	r7,0
80004f86:	f7 d7 d3 c1 	bfins	r11,r7,0x1e,0x1
80004f8a:	91 0b       	st.w	r8[0x0],r11
80004f8c:	c1 18       	rjmp	80004fae <udd_ep_trans_done+0x8e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
80004f8e:	76 07       	ld.w	r7,r11[0x0]
80004f90:	ef d7 c1 62 	bfextu	r7,r7,0xb,0x2
80004f94:	58 17       	cp.w	r7,1
80004f96:	c0 a1       	brne	80004faa <udd_ep_trans_done+0x8a>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
80004f98:	76 0b       	ld.w	r11,r11[0x0]
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
80004f9a:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
80004f9e:	30 87       	mov	r7,8
80004fa0:	ee 0b 09 4b 	lsl	r11,r7,r11
80004fa4:	16 3a       	cp.w	r10,r11
80004fa6:	e0 8b 00 04 	brhi	80004fae <udd_ep_trans_done+0x8e>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
80004faa:	e8 1e 00 14 	orl	lr,0x14
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80004fae:	f2 0b 15 04 	lsl	r11,r9,0x4
80004fb2:	e0 3b fd 00 	sub	r11,130304
80004fb6:	70 16       	ld.w	r6,r8[0x4]
80004fb8:	70 37       	ld.w	r7,r8[0xc]
80004fba:	ec 07 00 07 	add	r7,r6,r7
80004fbe:	97 17       	st.w	r11[0x4],r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004fc0:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80004fc4:	d3 03       	ssrf	0x10
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if ( !(udd_endpoint_dma_get_status(ep)
80004fc6:	76 37       	ld.w	r7,r11[0xc]
80004fc8:	e2 17 00 10 	andl	r7,0x10,COH
80004fcc:	c1 61       	brne	80004ff8 <udd_ep_trans_done+0xd8>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80004fce:	e8 1e 00 21 	orl	lr,0x21
		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if ( !(udd_endpoint_dma_get_status(ep)
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
80004fd2:	97 2e       	st.w	r11[0x8],lr
			ptr_job->nb_trans += next_trans;
80004fd4:	70 39       	ld.w	r9,r8[0xc]
80004fd6:	f2 0a 00 0a 	add	r10,r9,r10
80004fda:	91 3a       	st.w	r8[0xc],r10
			udd_enable_endpoint_dma_interrupt(ep);
80004fdc:	20 1c       	sub	r12,1
80004fde:	fc 18 02 00 	movh	r8,0x200
80004fe2:	f0 0c 09 4c 	lsl	r12,r8,r12
80004fe6:	fe 68 00 00 	mov	r8,-131072
80004fea:	91 6c       	st.w	r8[0x18],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004fec:	e6 16 00 01 	andh	r6,0x1,COH
80004ff0:	c0 21       	brne	80004ff4 <udd_ep_trans_done+0xd4>
      cpu_irq_enable();
80004ff2:	d5 03       	csrf	0x10
			cpu_irq_restore(flags);
			return;
80004ff4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004ff8:	e6 16 00 01 	andh	r6,0x1,COH
80004ffc:	c0 21       	brne	80005000 <udd_ep_trans_done+0xe0>
      cpu_irq_enable();
80004ffe:	d5 03       	csrf	0x10
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80005000:	70 3a       	ld.w	r10,r8[0xc]
80005002:	91 2a       	st.w	r8[0x8],r10
	}
	if (Is_udd_endpoint_in(ep)) {
80005004:	a3 69       	lsl	r9,0x2
80005006:	fe 6b 01 00 	mov	r11,-130816
8000500a:	f2 0b 00 0a 	add	r10,r9,r11
8000500e:	74 0a       	ld.w	r10,r10[0x0]
80005010:	e2 1a 01 00 	andl	r10,0x100,COH
80005014:	c2 60       	breq	80005060 <udd_ep_trans_done+0x140>
		if (ptr_job->b_shortpacket) {
80005016:	70 0a       	ld.w	r10,r8[0x0]
80005018:	e6 1a 40 00 	andh	r10,0x4000,COH
8000501c:	c2 20       	breq	80005060 <udd_ep_trans_done+0x140>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
8000501e:	fe 6a 01 60 	mov	r10,-130720
80005022:	f2 0a 00 08 	add	r8,r9,r10
80005026:	30 1a       	mov	r10,1
80005028:	91 0a       	st.w	r8[0x0],r10
			if (Is_udd_write_enabled(ep)) {
8000502a:	fe 6b 01 30 	mov	r11,-130768
8000502e:	f2 0b 00 08 	add	r8,r9,r11
80005032:	70 08       	ld.w	r8,r8[0x0]
80005034:	e6 18 00 01 	andh	r8,0x1,COH
80005038:	c0 70       	breq	80005046 <udd_ep_trans_done+0x126>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
8000503a:	fe 6a 01 90 	mov	r10,-130672
8000503e:	f2 0a 00 08 	add	r8,r9,r10
80005042:	30 1a       	mov	r10,1
80005044:	91 0a       	st.w	r8[0x0],r10
			}
			udd_enable_in_send_interrupt(ep);
80005046:	e0 39 fe 10 	sub	r9,130576
8000504a:	30 18       	mov	r8,1
8000504c:	93 08       	st.w	r9[0x0],r8
			udd_enable_endpoint_interrupt(ep);
8000504e:	e0 68 10 00 	mov	r8,4096
80005052:	f0 0c 09 4c 	lsl	r12,r8,r12
80005056:	fe 68 00 00 	mov	r8,-131072
8000505a:	91 6c       	st.w	r8[0x18],r12
			return;
8000505c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
80005060:	18 9a       	mov	r10,r12
80005062:	30 0b       	mov	r11,0
80005064:	10 9c       	mov	r12,r8
80005066:	f0 1f 00 04 	mcall	80005074 <udd_ep_trans_done+0x154>
8000506a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000506e:	00 00       	add	r0,r0
80005070:	00 00       	add	r0,r0
80005072:	0a 60       	and	r0,r5
80005074:	80 00       	ld.sh	r0,r0[0x0]
80005076:	4e 00       	lddpc	r0,800051f4 <udd_attach+0x40>

80005078 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80005078:	eb cd 40 e0 	pushm	r5-r7,lr
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
8000507c:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep) {
80005080:	30 2e       	mov	lr,2
80005082:	fc 0c 18 00 	cp.b	r12,lr
80005086:	e0 8b 00 40 	brhi	80005106 <udd_ep_run+0x8e>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
8000508a:	fe 6e 00 00 	mov	lr,-131072
8000508e:	7c 77       	ld.w	r7,lr[0x1c]
80005090:	18 96       	mov	r6,r12
80005092:	30 1e       	mov	lr,1
80005094:	fc 0c 09 4e 	lsl	lr,lr,r12
80005098:	0e 6e       	and	lr,r7
8000509a:	c3 60       	breq	80005106 <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
8000509c:	f8 0e 15 02 	lsl	lr,r12,0x2
800050a0:	e0 3e fe 40 	sub	lr,130624
800050a4:	7c 0e       	ld.w	lr,lr[0x0]
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800050a6:	e6 1e 00 08 	andh	lr,0x8,COH
800050aa:	c2 e1       	brne	80005106 <udd_ep_run+0x8e>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
800050ac:	20 1c       	sub	r12,1
800050ae:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
800050b2:	49 77       	lddpc	r7,8000510c <udd_ep_run+0x94>
800050b4:	ee 0c 00 2e 	add	lr,r7,r12<<0x2

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
800050b8:	7c 0c       	ld.w	r12,lr[0x0]
800050ba:	e6 1c 20 00 	andh	r12,0x2000,COH
800050be:	c2 41       	brne	80005106 <udd_ep_run+0x8e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800050c0:	e1 bc 00 00 	mfsr	r12,0x0
	cpu_irq_disable();
800050c4:	d3 03       	ssrf	0x10
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
800050c6:	7c 07       	ld.w	r7,lr[0x0]
800050c8:	58 07       	cp.w	r7,0
800050ca:	c0 74       	brge	800050d8 <udd_ep_run+0x60>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800050cc:	e6 1c 00 01 	andh	r12,0x1,COH
800050d0:	c0 21       	brne	800050d4 <udd_ep_run+0x5c>
      cpu_irq_enable();
800050d2:	d5 03       	csrf	0x10
   }

	barrier();
800050d4:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
800050d8:	7c 07       	ld.w	r7,lr[0x0]
800050da:	30 15       	mov	r5,1
800050dc:	ef d5 d3 e1 	bfins	r7,r5,0x1f,0x1
800050e0:	9d 07       	st.w	lr[0x0],r7
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800050e2:	e6 1c 00 01 	andh	r12,0x1,COH
800050e6:	c0 21       	brne	800050ea <udd_ep_run+0x72>
      cpu_irq_enable();
800050e8:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
800050ea:	9d 1a       	st.w	lr[0x4],r10
	ptr_job->buf_size = buf_size;
800050ec:	9d 29       	st.w	lr[0x8],r9
	ptr_job->nb_trans = 0;
800050ee:	30 09       	mov	r9,0
800050f0:	9d 39       	st.w	lr[0xc],r9
	ptr_job->call_trans = callback;
800050f2:	9d 48       	st.w	lr[0x10],r8
	ptr_job->b_shortpacket = b_shortpacket;
800050f4:	7c 08       	ld.w	r8,lr[0x0]
800050f6:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
800050fa:	9d 08       	st.w	lr[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
800050fc:	0c 9c       	mov	r12,r6
800050fe:	f0 1f 00 05 	mcall	80005110 <udd_ep_run+0x98>
80005102:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
80005106:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000510a:	00 00       	add	r0,r0
8000510c:	00 00       	add	r0,r0
8000510e:	0a 60       	and	r0,r5
80005110:	80 00       	ld.sh	r0,r0[0x0]
80005112:	4f 20       	lddpc	r0,800052d8 <udd_ctrl_init+0x20>

80005114 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
80005114:	58 0c       	cp.w	r12,0
80005116:	c1 b1       	brne	8000514c <udd_sleep_mode+0x38>
80005118:	49 b8       	lddpc	r8,80005184 <udd_sleep_mode+0x70>
8000511a:	11 89       	ld.ub	r9,r8[0x0]
8000511c:	30 08       	mov	r8,0
8000511e:	f0 09 18 00 	cp.b	r9,r8
80005122:	c2 e0       	breq	8000517e <udd_sleep_mode+0x6a>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
80005124:	49 98       	lddpc	r8,80005188 <udd_sleep_mode+0x74>
80005126:	11 99       	ld.ub	r9,r8[0x1]
80005128:	30 08       	mov	r8,0
8000512a:	f0 09 18 00 	cp.b	r9,r8
8000512e:	c0 21       	brne	80005132 <udd_sleep_mode+0x1e>
80005130:	c0 08       	rjmp	80005130 <udd_sleep_mode+0x1c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005132:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80005136:	d3 03       	ssrf	0x10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80005138:	49 48       	lddpc	r8,80005188 <udd_sleep_mode+0x74>
8000513a:	11 9a       	ld.ub	r10,r8[0x1]
8000513c:	20 1a       	sub	r10,1
8000513e:	b0 9a       	st.b	r8[0x1],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005140:	12 98       	mov	r8,r9
80005142:	e6 18 00 01 	andh	r8,0x1,COH
80005146:	c0 21       	brne	8000514a <udd_sleep_mode+0x36>
      cpu_irq_enable();
80005148:	d5 03       	csrf	0x10
   }

	barrier();
8000514a:	c1 a8       	rjmp	8000517e <udd_sleep_mode+0x6a>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
8000514c:	48 e8       	lddpc	r8,80005184 <udd_sleep_mode+0x70>
8000514e:	11 89       	ld.ub	r9,r8[0x0]
80005150:	30 08       	mov	r8,0
80005152:	f0 09 18 00 	cp.b	r9,r8
80005156:	c1 41       	brne	8000517e <udd_sleep_mode+0x6a>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
80005158:	48 c8       	lddpc	r8,80005188 <udd_sleep_mode+0x74>
8000515a:	11 99       	ld.ub	r9,r8[0x1]
8000515c:	3f f8       	mov	r8,-1
8000515e:	f0 09 18 00 	cp.b	r9,r8
80005162:	c0 21       	brne	80005166 <udd_sleep_mode+0x52>
80005164:	c0 08       	rjmp	80005164 <udd_sleep_mode+0x50>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005166:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000516a:	d3 03       	ssrf	0x10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
8000516c:	48 78       	lddpc	r8,80005188 <udd_sleep_mode+0x74>
8000516e:	11 9a       	ld.ub	r10,r8[0x1]
80005170:	2f fa       	sub	r10,-1
80005172:	b0 9a       	st.b	r8[0x1],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005174:	12 98       	mov	r8,r9
80005176:	e6 18 00 01 	andh	r8,0x1,COH
8000517a:	c0 21       	brne	8000517e <udd_sleep_mode+0x6a>
      cpu_irq_enable();
8000517c:	d5 03       	csrf	0x10
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
8000517e:	48 28       	lddpc	r8,80005184 <udd_sleep_mode+0x70>
80005180:	b0 8c       	st.b	r8[0x0],r12
}
80005182:	5e fc       	retal	r12
80005184:	00 00       	add	r0,r0
80005186:	0a 88       	andn	r8,r5
80005188:	00 00       	add	r0,r0
8000518a:	0c 68       	and	r8,r6

8000518c <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
8000518c:	d4 01       	pushm	lr
	otg_unfreeze_clock();
8000518e:	fe 68 08 00 	mov	r8,-129024
80005192:	70 09       	ld.w	r9,r8[0x0]
80005194:	af c9       	cbr	r9,0xe
80005196:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
80005198:	fe 69 00 00 	mov	r9,-131072
8000519c:	72 0a       	ld.w	r10,r9[0x0]
8000519e:	a9 aa       	sbr	r10,0x8
800051a0:	93 0a       	st.w	r9[0x0],r10
	otg_freeze_clock();
800051a2:	70 09       	ld.w	r9,r8[0x0]
800051a4:	af a9       	sbr	r9,0xe
800051a6:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
800051a8:	30 0c       	mov	r12,0
800051aa:	f0 1f 00 02 	mcall	800051b0 <udd_detach+0x24>
}
800051ae:	d8 02       	popm	pc
800051b0:	80 00       	ld.sh	r0,r0[0x0]
800051b2:	51 14       	stdsp	sp[0x44],r4

800051b4 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
800051b4:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800051b8:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
800051bc:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
800051be:	30 1c       	mov	r12,1
800051c0:	f0 1f 00 19 	mcall	80005224 <udd_attach+0x70>
	otg_unfreeze_clock();
800051c4:	fe 68 08 00 	mov	r8,-129024
800051c8:	70 09       	ld.w	r9,r8[0x0]
800051ca:	af c9       	cbr	r9,0xe
800051cc:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );
800051ce:	fe 68 08 04 	mov	r8,-129020
800051d2:	70 09       	ld.w	r9,r8[0x0]
800051d4:	e2 19 40 00 	andl	r9,0x4000,COH
800051d8:	cf d0       	breq	800051d2 <udd_attach+0x1e>

	// Authorize attach if Vbus is present
	udd_attach_device();
800051da:	fe 68 00 00 	mov	r8,-131072
800051de:	70 09       	ld.w	r9,r8[0x0]
800051e0:	a9 c9       	cbr	r9,0x8
800051e2:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
800051e4:	fe 68 00 18 	mov	r8,-131048
800051e8:	30 8c       	mov	r12,8
800051ea:	91 0c       	st.w	r8[0x0],r12
	udd_enable_suspend_interrupt();
800051ec:	30 1a       	mov	r10,1
800051ee:	91 0a       	st.w	r8[0x0],r10
	udd_enable_wake_up_interrupt();
800051f0:	31 09       	mov	r9,16
800051f2:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
800051f4:	30 4b       	mov	r11,4
800051f6:	91 0b       	st.w	r8[0x0],r11
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interrupts flag
	udd_ack_reset();
800051f8:	fe 68 00 08 	mov	r8,-131064
800051fc:	91 0c       	st.w	r8[0x0],r12
	udd_ack_sof();
800051fe:	91 0b       	st.w	r8[0x0],r11
	udd_ack_msof();
80005200:	30 2b       	mov	r11,2
80005202:	91 0b       	st.w	r8[0x0],r11
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
80005204:	fe 6b 00 0c 	mov	r11,-131060
80005208:	97 0a       	st.w	r11[0x0],r10
#endif
	udd_ack_wake_up();
8000520a:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
8000520c:	fe 68 08 00 	mov	r8,-129024
80005210:	70 09       	ld.w	r9,r8[0x0]
80005212:	af a9       	sbr	r9,0xe
80005214:	91 09       	st.w	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005216:	e6 17 00 01 	andh	r7,0x1,COH
8000521a:	c0 21       	brne	8000521e <udd_attach+0x6a>
      cpu_irq_enable();
8000521c:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
8000521e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005222:	00 00       	add	r0,r0
80005224:	80 00       	ld.sh	r0,r0[0x0]
80005226:	51 14       	stdsp	sp[0x44],r4

80005228 <udd_disable>:
	cpu_irq_restore(flags);
}


void udd_disable(void)
{
80005228:	eb cd 40 80 	pushm	r7,lr
	irqflags_t flags;

#ifdef UHD_ENABLE
# ifdef USB_ID
	if (Is_otg_id_host()) {
8000522c:	fe 68 08 04 	mov	r8,-129020
80005230:	70 08       	ld.w	r8,r8[0x0]
80005232:	e2 18 04 00 	andl	r8,0x400,COH
80005236:	c2 20       	breq	8000527a <udd_disable+0x52>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005238:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
8000523c:	d3 03       	ssrf	0x10
	}
# endif
#endif

	flags = cpu_irq_save();
	otg_unfreeze_clock();
8000523e:	fe 68 08 00 	mov	r8,-129024
80005242:	70 09       	ld.w	r9,r8[0x0]
80005244:	af c9       	cbr	r9,0xe
80005246:	91 09       	st.w	r8[0x0],r9
	udd_detach();
80005248:	f0 1f 00 0e 	mcall	80005280 <udd_disable+0x58>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
8000524c:	48 e8       	lddpc	r8,80005284 <udd_disable+0x5c>
8000524e:	11 b9       	ld.ub	r9,r8[0x3]
80005250:	30 08       	mov	r8,0
80005252:	f0 09 18 00 	cp.b	r9,r8
80005256:	c0 21       	brne	8000525a <udd_disable+0x32>
80005258:	c0 08       	rjmp	80005258 <udd_disable+0x30>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000525a:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000525e:	d3 03       	ssrf	0x10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80005260:	48 98       	lddpc	r8,80005284 <udd_disable+0x5c>
80005262:	11 ba       	ld.ub	r10,r8[0x3]
80005264:	20 1a       	sub	r10,1
80005266:	b0 ba       	st.b	r8[0x3],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005268:	12 98       	mov	r8,r9
8000526a:	e6 18 00 01 	andh	r8,0x1,COH
8000526e:	c0 21       	brne	80005272 <udd_disable+0x4a>
      cpu_irq_enable();
80005270:	d5 03       	csrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005272:	e6 17 00 01 	andh	r7,0x1,COH
80005276:	c0 21       	brne	8000527a <udd_disable+0x52>
      cpu_irq_enable();
80005278:	d5 03       	csrf	0x10
   }

	barrier();
8000527a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000527e:	00 00       	add	r0,r0
80005280:	80 00       	ld.sh	r0,r0[0x0]
80005282:	51 8c       	stdsp	sp[0x60],r12
80005284:	00 00       	add	r0,r0
80005286:	0c 68       	and	r8,r6

80005288 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80005288:	30 39       	mov	r9,3
8000528a:	48 b8       	lddpc	r8,800052b4 <udd_ctrl_send_zlp_in+0x2c>
8000528c:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000528e:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80005292:	d3 03       	ssrf	0x10

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80005294:	fe 6a 01 60 	mov	r10,-130720
80005298:	30 19       	mov	r9,1
8000529a:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
8000529c:	fe 68 01 f0 	mov	r8,-130576
800052a0:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
800052a2:	30 89       	mov	r9,8
800052a4:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
800052a6:	91 09       	st.w	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800052a8:	16 98       	mov	r8,r11
800052aa:	e6 18 00 01 	andh	r8,0x1,COH
800052ae:	c0 21       	brne	800052b2 <udd_ctrl_send_zlp_in+0x2a>
      cpu_irq_enable();
800052b0:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800052b2:	5e fc       	retal	r12
800052b4:	00 00       	add	r0,r0
800052b6:	0a 90       	mov	r0,r5

800052b8 <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800052b8:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800052bc:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
800052be:	30 1a       	mov	r10,1
800052c0:	fe 69 02 20 	mov	r9,-130528
800052c4:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800052c6:	e6 18 00 01 	andh	r8,0x1,COH
800052ca:	c0 21       	brne	800052ce <udd_ctrl_init+0x16>
      cpu_irq_enable();
800052cc:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
800052ce:	30 29       	mov	r9,2
800052d0:	fe 68 01 60 	mov	r8,-130720
800052d4:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
800052d6:	48 59       	lddpc	r9,800052e8 <udd_ctrl_init+0x30>
800052d8:	30 08       	mov	r8,0
800052da:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
800052dc:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
800052de:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
800052e0:	48 39       	lddpc	r9,800052ec <udd_ctrl_init+0x34>
800052e2:	93 08       	st.w	r9[0x0],r8
}
800052e4:	5e fc       	retal	r12
800052e6:	00 00       	add	r0,r0
800052e8:	00 00       	add	r0,r0
800052ea:	0c 3c       	cp.w	r12,r6
800052ec:	00 00       	add	r0,r0
800052ee:	0a 90       	mov	r0,r5

800052f0 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
800052f0:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800052f4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800052f8:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
800052fa:	30 1a       	mov	r10,1
800052fc:	fe 69 02 20 	mov	r9,-130528
80005300:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005302:	e6 18 00 01 	andh	r8,0x1,COH
80005306:	c0 21       	brne	8000530a <udd_ctrl_in_sent+0x1a>
      cpu_irq_enable();
80005308:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000530a:	4c 38       	lddpc	r8,80005414 <udd_ctrl_in_sent+0x124>
8000530c:	70 08       	ld.w	r8,r8[0x0]
8000530e:	58 38       	cp.w	r8,3
80005310:	c0 71       	brne	8000531e <udd_ctrl_in_sent+0x2e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80005312:	f0 1f 00 42 	mcall	80005418 <udd_ctrl_in_sent+0x128>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80005316:	f0 1f 00 42 	mcall	8000541c <udd_ctrl_in_sent+0x12c>
		return;
8000531a:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
8000531e:	4c 18       	lddpc	r8,80005420 <udd_ctrl_in_sent+0x130>
80005320:	90 08       	ld.sh	r8,r8[0x0]
80005322:	4c 19       	lddpc	r9,80005424 <udd_ctrl_in_sent+0x134>
80005324:	92 67       	ld.sh	r7,r9[0xc]
80005326:	10 17       	sub	r7,r8
80005328:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
8000532a:	c3 01       	brne	8000538a <udd_ctrl_in_sent+0x9a>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000532c:	4b f9       	lddpc	r9,80005428 <udd_ctrl_in_sent+0x138>
8000532e:	92 0a       	ld.sh	r10,r9[0x0]
80005330:	f4 08 00 08 	add	r8,r10,r8
80005334:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
80005336:	4b c9       	lddpc	r9,80005424 <udd_ctrl_in_sent+0x134>
80005338:	92 39       	ld.sh	r9,r9[0x6]
8000533a:	f0 09 19 00 	cp.h	r9,r8
8000533e:	c0 70       	breq	8000534c <udd_ctrl_in_sent+0x5c>
80005340:	4b b8       	lddpc	r8,8000542c <udd_ctrl_in_sent+0x13c>
80005342:	11 89       	ld.ub	r9,r8[0x0]
80005344:	30 08       	mov	r8,0
80005346:	f0 09 18 00 	cp.b	r9,r8
8000534a:	c1 50       	breq	80005374 <udd_ctrl_in_sent+0x84>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000534c:	30 49       	mov	r9,4
8000534e:	4b 28       	lddpc	r8,80005414 <udd_ctrl_in_sent+0x124>
80005350:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005352:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80005356:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80005358:	31 08       	mov	r8,16
8000535a:	fe 6a 01 60 	mov	r10,-130720
8000535e:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
80005360:	fe 6a 01 f0 	mov	r10,-130576
80005364:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005366:	12 98       	mov	r8,r9
80005368:	e6 18 00 01 	andh	r8,0x1,COH
8000536c:	c0 21       	brne	80005370 <udd_ctrl_in_sent+0x80>
      cpu_irq_enable();
8000536e:	d5 03       	csrf	0x10
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
80005370:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
80005374:	4a c8       	lddpc	r8,80005424 <udd_ctrl_in_sent+0x134>
80005376:	70 5c       	ld.w	r12,r8[0x14]
80005378:	58 0c       	cp.w	r12,0
8000537a:	c1 20       	breq	8000539e <udd_ctrl_in_sent+0xae>
8000537c:	5d 1c       	icall	r12
8000537e:	c1 00       	breq	8000539e <udd_ctrl_in_sent+0xae>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
80005380:	30 09       	mov	r9,0
80005382:	4a 88       	lddpc	r8,80005420 <udd_ctrl_in_sent+0x130>
80005384:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
80005386:	4a 88       	lddpc	r8,80005424 <udd_ctrl_in_sent+0x134>
80005388:	90 67       	ld.sh	r7,r8[0xc]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
8000538a:	30 78       	mov	r8,7
8000538c:	f0 07 19 00 	cp.h	r7,r8
80005390:	e0 88 00 07 	brls	8000539e <udd_ctrl_in_sent+0xae>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
80005394:	30 09       	mov	r9,0
80005396:	4a 68       	lddpc	r8,8000542c <udd_ctrl_in_sent+0x13c>
80005398:	b0 89       	st.b	r8[0x0],r9
8000539a:	30 87       	mov	r7,8
8000539c:	c0 48       	rjmp	800053a4 <udd_ctrl_in_sent+0xb4>
	} else {
		b_shortpacket = true;
8000539e:	30 19       	mov	r9,1
800053a0:	4a 38       	lddpc	r8,8000542c <udd_ctrl_in_sent+0x13c>
800053a2:	b0 89       	st.b	r8[0x0],r9
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800053a4:	4a 08       	lddpc	r8,80005424 <udd_ctrl_in_sent+0x134>
800053a6:	70 2a       	ld.w	r10,r8[0x8]
800053a8:	49 e8       	lddpc	r8,80005420 <udd_ctrl_in_sent+0x130>
800053aa:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800053ac:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
800053b0:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
800053b2:	fe 68 01 30 	mov	r8,-130768
800053b6:	70 08       	ld.w	r8,r8[0x0]
800053b8:	e2 18 00 02 	andl	r8,0x2,COH
800053bc:	c0 41       	brne	800053c4 <udd_ctrl_in_sent+0xd4>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800053be:	58 07       	cp.w	r7,0
800053c0:	c0 b1       	brne	800053d6 <udd_ctrl_in_sent+0xe6>
800053c2:	c1 68       	rjmp	800053ee <udd_ctrl_in_sent+0xfe>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800053c4:	e6 1b 00 01 	andh	r11,0x1,COH
800053c8:	c0 21       	brne	800053cc <udd_ctrl_in_sent+0xdc>
      cpu_irq_enable();
800053ca:	d5 03       	csrf	0x10
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800053cc:	30 49       	mov	r9,4
800053ce:	49 28       	lddpc	r8,80005414 <udd_ctrl_in_sent+0x124>
800053d0:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
800053d2:	e3 cd 80 80 	ldm	sp++,r7,pc
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800053d6:	5c 79       	castu.h	r9
800053d8:	f4 09 00 09 	add	r9,r10,r9
800053dc:	fc 18 e0 00 	movh	r8,0xe000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
800053e0:	13 3a       	ld.ub	r10,r9++
800053e2:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800053e4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800053e8:	ee 0a 19 00 	cp.h	r10,r7
800053ec:	cf a3       	brcs	800053e0 <udd_ctrl_in_sent+0xf0>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800053ee:	48 d8       	lddpc	r8,80005420 <udd_ctrl_in_sent+0x130>
800053f0:	90 09       	ld.sh	r9,r8[0x0]
800053f2:	f2 07 00 07 	add	r7,r9,r7
800053f6:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800053f8:	30 18       	mov	r8,1
800053fa:	fe 69 01 60 	mov	r9,-130720
800053fe:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
80005400:	fe 69 01 f0 	mov	r9,-130576
80005404:	93 08       	st.w	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005406:	e6 1b 00 01 	andh	r11,0x1,COH
8000540a:	c0 21       	brne	8000540e <udd_ctrl_in_sent+0x11e>
      cpu_irq_enable();
8000540c:	d5 03       	csrf	0x10
   }

	barrier();
8000540e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005412:	00 00       	add	r0,r0
80005414:	00 00       	add	r0,r0
80005416:	0a 90       	mov	r0,r5
80005418:	80 00       	ld.sh	r0,r0[0x0]
8000541a:	4d ec       	lddpc	r12,80005590 <udd_ep_alloc+0x160>
8000541c:	80 00       	ld.sh	r0,r0[0x0]
8000541e:	52 b8       	stdsp	sp[0xac],r8
80005420:	00 00       	add	r0,r0
80005422:	0a 8a       	andn	r10,r5
80005424:	00 00       	add	r0,r0
80005426:	0c 3c       	cp.w	r12,r6
80005428:	00 00       	add	r0,r0
8000542a:	0a 5c       	eor	r12,r5
8000542c:	00 00       	add	r0,r0
8000542e:	0a 8c       	andn	r12,r5

80005430 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80005430:	d4 31       	pushm	r0-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
80005432:	ef dc c0 04 	bfextu	r7,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP) {
80005436:	30 28       	mov	r8,2
80005438:	f0 07 18 00 	cp.b	r7,r8
8000543c:	e0 8b 00 ae 	brhi	80005598 <udd_ep_alloc+0x168>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
80005440:	fe 68 00 00 	mov	r8,-131072
80005444:	70 78       	ld.w	r8,r8[0x1c]
80005446:	30 15       	mov	r5,1
80005448:	ea 07 09 45 	lsl	r5,r5,r7
8000544c:	eb e8 00 08 	and	r8,r5,r8
80005450:	e0 81 00 a4 	brne	80005598 <udd_ep_alloc+0x168>
		return false;
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80005454:	f1 db c0 02 	bfextu	r8,r11,0x0,0x2
80005458:	58 18       	cp.w	r8,1
8000545a:	e0 85 00 9f 	brlt	80005598 <udd_ep_alloc+0x168>
8000545e:	58 28       	cp.w	r8,2
80005460:	e0 8a 00 07 	brle	8000546e <udd_ep_alloc+0x3e>
80005464:	58 38       	cp.w	r8,3
80005466:	e0 81 00 99 	brne	80005598 <udd_ep_alloc+0x168>
8000546a:	30 09       	mov	r9,0
8000546c:	c0 28       	rjmp	80005470 <udd_ep_alloc+0x40>
8000546e:	30 19       	mov	r9,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80005470:	ee 08 15 02 	lsl	r8,r7,0x2
80005474:	e0 38 ff 00 	sub	r8,130816
80005478:	70 0e       	ld.w	lr,r8[0x0]
8000547a:	5c 7a       	castu.h	r10
8000547c:	30 86       	mov	r6,8
8000547e:	f4 06 0c 4a 	max	r10,r10,r6
80005482:	e0 66 04 00 	mov	r6,1024
80005486:	f4 06 0d 4a 	min	r10,r10,r6
8000548a:	a1 7a       	lsl	r10,0x1
8000548c:	20 1a       	sub	r10,1
8000548e:	f4 0a 12 00 	clz	r10,r10
80005492:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
80005496:	ab 7b       	lsl	r11,0xb
80005498:	e2 1b 18 00 	andl	r11,0x1800,COH
8000549c:	f7 ec 10 8b 	or	r11,r11,r12<<0x8
800054a0:	f4 0c 11 1c 	rsub	r12,r10,28
800054a4:	f7 ec 10 4c 	or	r12,r11,r12<<0x4
800054a8:	f9 e9 10 29 	or	r9,r12,r9<<0x2
800054ac:	e2 19 19 7c 	andl	r9,0x197c,COH
800054b0:	1c 9a       	mov	r10,lr
800054b2:	e0 1a e6 83 	andl	r10,0xe683
800054b6:	14 49       	or	r9,r10
800054b8:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
800054ba:	5c 85       	casts.h	r5

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800054bc:	30 18       	mov	r8,1
800054be:	f0 07 18 00 	cp.b	r7,r8
800054c2:	e0 8b 00 1d 	brhi	800054fc <udd_ep_alloc+0xcc>
800054c6:	fe 69 01 08 	mov	r9,-130808
800054ca:	30 28       	mov	r8,2
		if (Is_udd_endpoint_enabled(i)) {
800054cc:	fe 6b 00 00 	mov	r11,-131072
800054d0:	30 1e       	mov	lr,1
800054d2:	76 7c       	ld.w	r12,r11[0x1c]
800054d4:	fc 08 09 4a 	lsl	r10,lr,r8
800054d8:	f5 ec 00 0c 	and	r12,r10,r12
800054dc:	c0 b0       	breq	800054f2 <udd_ep_alloc+0xc2>
			ep_allocated |= 1 << i;
800054de:	f5 e5 10 05 	or	r5,r10,r5
800054e2:	5c 85       	casts.h	r5
			udd_disable_endpoint(i);
800054e4:	76 7c       	ld.w	r12,r11[0x1c]
800054e6:	5c da       	com	r10
800054e8:	18 6a       	and	r10,r12
800054ea:	97 7a       	st.w	r11[0x1c],r10
			udd_unallocate_memory(i);
800054ec:	72 0a       	ld.w	r10,r9[0x0]
800054ee:	a1 da       	cbr	r10,0x1
800054f0:	93 0a       	st.w	r9[0x0],r10
800054f2:	20 18       	sub	r8,1
800054f4:	20 49       	sub	r9,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800054f6:	f0 07 18 00 	cp.b	r7,r8
800054fa:	ce c3       	brcs	800054d2 <udd_ep_alloc+0xa2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
800054fc:	5c 75       	castu.h	r5
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
800054fe:	4a 83       	lddpc	r3,8000559c <udd_ep_alloc+0x16c>
			bool b_restart = ptr_job->busy;
			ptr_job->busy = false;
80005500:	30 02       	mov	r2,0

			udd_allocate_memory(i);
			udd_enable_endpoint(i);
80005502:	fe 64 00 00 	mov	r4,-131072
80005506:	30 11       	mov	r1,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80005508:	30 26       	mov	r6,2
		if (ep_allocated & (1 << i)) {
8000550a:	0e 9c       	mov	r12,r7
8000550c:	ea 07 08 48 	asr	r8,r5,r7
80005510:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005514:	c3 b0       	breq	8000558a <udd_ep_alloc+0x15a>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
80005516:	ee ce 00 01 	sub	lr,r7,1
8000551a:	fc 0e 00 2e 	add	lr,lr,lr<<0x2
8000551e:	e6 0e 00 2e 	add	lr,r3,lr<<0x2
			bool b_restart = ptr_job->busy;
80005522:	7c 0a       	ld.w	r10,lr[0x0]
			ptr_job->busy = false;
80005524:	14 98       	mov	r8,r10
80005526:	f1 d2 d3 e1 	bfins	r8,r2,0x1f,0x1
8000552a:	9d 08       	st.w	lr[0x0],r8

			udd_allocate_memory(i);
8000552c:	ee 08 15 02 	lsl	r8,r7,0x2
80005530:	fe 6b 01 00 	mov	r11,-130816
80005534:	f0 0b 00 09 	add	r9,r8,r11
80005538:	72 0b       	ld.w	r11,r9[0x0]
8000553a:	a1 bb       	sbr	r11,0x1
8000553c:	93 0b       	st.w	r9[0x0],r11
			udd_enable_endpoint(i);
8000553e:	68 7b       	ld.w	r11,r4[0x1c]
80005540:	e2 07 09 40 	lsl	r0,r1,r7
80005544:	e1 eb 10 0b 	or	r11,r0,r11
80005548:	89 7b       	st.w	r4[0x1c],r11
			if (!Is_udd_endpoint_configured(i)) {
8000554a:	e0 38 fe d0 	sub	r8,130768
8000554e:	70 08       	ld.w	r8,r8[0x0]
80005550:	e6 18 00 04 	andh	r8,0x4,COH
80005554:	c0 e1       	brne	80005570 <udd_ep_alloc+0x140>
				if (NULL == ptr_job->call_trans) {
80005556:	7c 48       	ld.w	r8,lr[0x10]
80005558:	58 08       	cp.w	r8,0
8000555a:	c1 f0       	breq	80005598 <udd_ep_alloc+0x168>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
8000555c:	72 09       	ld.w	r9,r9[0x0]
8000555e:	e2 19 01 00 	andl	r9,0x100,COH
80005562:	c0 20       	breq	80005566 <udd_ep_alloc+0x136>
					i |= USB_EP_DIR_IN;
80005564:	a7 b7       	sbr	r7,0x7
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
80005566:	0e 9a       	mov	r10,r7
80005568:	7c 2b       	ld.w	r11,lr[0x8]
8000556a:	30 1c       	mov	r12,1
8000556c:	5d 18       	icall	r8
8000556e:	d8 3a       	popm	r0-r7,pc,r12=0
						ptr_job->buf_size, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
80005570:	72 08       	ld.w	r8,r9[0x0]
80005572:	a9 b8       	sbr	r8,0x9
80005574:	93 08       	st.w	r9[0x0],r8
			if (b_restart) {
80005576:	58 0a       	cp.w	r10,0
80005578:	c0 94       	brge	8000558a <udd_ep_alloc+0x15a>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
8000557a:	7c 0b       	ld.w	r11,lr[0x0]
8000557c:	7c 48       	ld.w	r8,lr[0x10]
8000557e:	7c 29       	ld.w	r9,lr[0x8]
80005580:	7c 1a       	ld.w	r10,lr[0x4]
80005582:	f7 db c3 c1 	bfextu	r11,r11,0x1e,0x1
80005586:	f0 1f 00 07 	mcall	800055a0 <udd_ep_alloc+0x170>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
8000558a:	2f f7       	sub	r7,-1
8000558c:	5c 57       	castu.b	r7
8000558e:	ec 07 18 00 	cp.b	r7,r6
80005592:	fe 98 ff bc 	brls	8000550a <udd_ep_alloc+0xda>
80005596:	da 3a       	popm	r0-r7,pc,r12=1
80005598:	d8 3a       	popm	r0-r7,pc,r12=0
8000559a:	00 00       	add	r0,r0
8000559c:	00 00       	add	r0,r0
8000559e:	0a 60       	and	r0,r5
800055a0:	80 00       	ld.sh	r0,r0[0x0]
800055a2:	50 78       	stdsp	sp[0x1c],r8

800055a4 <udd_enable>:
	return true;
}


void udd_enable(void)
{
800055a4:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800055a8:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
800055ac:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

#ifdef UHD_ENABLE
	//* DUAL ROLE INITIALIZATION
	if (otg_dual_enable()) {
800055ae:	f0 1f 00 35 	mcall	80005680 <udd_enable+0xdc>
800055b2:	c0 70       	breq	800055c0 <udd_enable+0x1c>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800055b4:	e6 17 00 01 	andh	r7,0x1,COH
800055b8:	c0 21       	brne	800055bc <udd_enable+0x18>
      cpu_irq_enable();
800055ba:	d5 03       	csrf	0x10
		// The current mode has been started by otg_dual_enable()
		cpu_irq_restore(flags);
		return;
800055bc:	e3 cd 80 80 	ldm	sp++,r7,pc
	pm_asyn_wake_up_enable(AVR32_PM_AWEN_USB_WAKEN_MASK);
#endif

# if (defined USB_ID) && (defined UHD_ENABLE)
	// Check that the device mode is selected by ID pin
	if (!Is_otg_id_device()) {
800055c0:	fe 68 08 04 	mov	r8,-129020
800055c4:	70 08       	ld.w	r8,r8[0x0]
800055c6:	e2 18 04 00 	andl	r8,0x400,COH
800055ca:	c0 71       	brne	800055d8 <udd_enable+0x34>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800055cc:	e6 17 00 01 	andh	r7,0x1,COH
800055d0:	c0 21       	brne	800055d4 <udd_enable+0x30>
      cpu_irq_enable();
800055d2:	d5 03       	csrf	0x10
		cpu_irq_restore(flags);
		return; // Device is not the current mode
800055d4:	e3 cd 80 80 	ldm	sp++,r7,pc
	otg_disable_id_pin();
	otg_force_device_mode();
# endif

	// Enable USB hardware
	otg_enable_pad();
800055d8:	fe 68 08 00 	mov	r8,-129024
800055dc:	70 09       	ld.w	r9,r8[0x0]
800055de:	ad a9       	sbr	r9,0xc
800055e0:	91 09       	st.w	r8[0x0],r9
	otg_enable();
800055e2:	70 09       	ld.w	r9,r8[0x0]
800055e4:	af b9       	sbr	r9,0xf
800055e6:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
800055e8:	70 09       	ld.w	r9,r8[0x0]
800055ea:	af c9       	cbr	r9,0xe
800055ec:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
800055ee:	70 08       	ld.w	r8,r8[0x0]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
800055f0:	4a 58       	lddpc	r8,80005684 <udd_enable+0xe0>
800055f2:	70 09       	ld.w	r9,r8[0x0]
800055f4:	30 0a       	mov	r10,0
		udd_ep_job[i].stall_requested = false;
800055f6:	f3 d9 c0 1f 	bfextu	r9,r9,0x0,0x1f
800055fa:	f3 da d3 a1 	bfins	r9,r10,0x1d,0x1
800055fe:	91 09       	st.w	r8[0x0],r9

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80005600:	70 59       	ld.w	r9,r8[0x14]
		udd_ep_job[i].stall_requested = false;
80005602:	f3 d9 c0 1f 	bfextu	r9,r9,0x0,0x1f
80005606:	f3 da d3 a1 	bfins	r9,r10,0x1d,0x1
8000560a:	91 59       	st.w	r8[0x14],r9

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
8000560c:	fe 68 00 00 	mov	r8,-131072
80005610:	70 09       	ld.w	r9,r8[0x0]
80005612:	ad c9       	cbr	r9,0xc
80005614:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80005616:	70 09       	ld.w	r9,r8[0x0]
80005618:	e8 19 0c 00 	orl	r9,0xc00
8000561c:	91 09       	st.w	r8[0x0],r9
#  endif
#endif
	otg_ack_vbus_transition();
8000561e:	30 29       	mov	r9,2
80005620:	fe 68 08 08 	mov	r8,-129016
80005624:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80005626:	fe 68 08 04 	mov	r8,-129020
8000562a:	70 08       	ld.w	r8,r8[0x0]
8000562c:	e2 18 08 00 	andl	r8,0x800,COH
80005630:	c0 40       	breq	80005638 <udd_enable+0x94>
		otg_raise_vbus_transition();
80005632:	fe 68 08 0c 	mov	r8,-129012
80005636:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
80005638:	fe 68 08 00 	mov	r8,-129024
8000563c:	70 09       	ld.w	r9,r8[0x0]
8000563e:	a1 b9       	sbr	r9,0x1
80005640:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80005642:	70 09       	ld.w	r9,r8[0x0]
80005644:	af a9       	sbr	r9,0xe
80005646:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80005648:	30 09       	mov	r9,0
8000564a:	49 08       	lddpc	r8,80005688 <udd_enable+0xe4>
8000564c:	b0 89       	st.b	r8[0x0],r9
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
8000564e:	49 08       	lddpc	r8,8000568c <udd_enable+0xe8>
80005650:	11 b9       	ld.ub	r9,r8[0x3]
80005652:	3f f8       	mov	r8,-1
80005654:	f0 09 18 00 	cp.b	r9,r8
80005658:	c0 21       	brne	8000565c <udd_enable+0xb8>
8000565a:	c0 08       	rjmp	8000565a <udd_enable+0xb6>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000565c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80005660:	d3 03       	ssrf	0x10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80005662:	48 b8       	lddpc	r8,8000568c <udd_enable+0xe8>
80005664:	11 ba       	ld.ub	r10,r8[0x3]
80005666:	2f fa       	sub	r10,-1
80005668:	b0 ba       	st.b	r8[0x3],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000566a:	12 98       	mov	r8,r9
8000566c:	e6 18 00 01 	andh	r8,0x1,COH
80005670:	c0 21       	brne	80005674 <udd_enable+0xd0>
      cpu_irq_enable();
80005672:	d5 03       	csrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005674:	e6 17 00 01 	andh	r7,0x1,COH
80005678:	c0 21       	brne	8000567c <udd_enable+0xd8>
      cpu_irq_enable();
8000567a:	d5 03       	csrf	0x10
   }

	barrier();
8000567c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005680:	80 00       	ld.sh	r0,r0[0x0]
80005682:	69 5c       	ld.w	r12,r4[0x54]
80005684:	00 00       	add	r0,r0
80005686:	0a 60       	and	r0,r5
80005688:	00 00       	add	r0,r0
8000568a:	0a 88       	andn	r8,r5
8000568c:	00 00       	add	r0,r0
8000568e:	0c 68       	and	r8,r6

80005690 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
80005690:	eb cd 40 fc 	pushm	r2-r7,lr
	if (Is_udd_sof()) {
80005694:	fe 68 00 04 	mov	r8,-131068
80005698:	70 08       	ld.w	r8,r8[0x0]
8000569a:	e2 18 00 04 	andl	r8,0x4,COH
8000569e:	c1 10       	breq	800056c0 <udd_interrupt+0x30>
		udd_ack_sof();
800056a0:	30 49       	mov	r9,4
800056a2:	fe 68 00 08 	mov	r8,-131064
800056a6:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
800056a8:	fe 68 08 04 	mov	r8,-129020
800056ac:	70 08       	ld.w	r8,r8[0x0]
800056ae:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
800056b2:	c0 31       	brne	800056b8 <udd_interrupt+0x28>
			udc_sof_notify();
800056b4:	f0 1f 01 75 	mcall	80005c88 <udd_interrupt+0x5f8>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
800056b8:	f0 1f 01 75 	mcall	80005c8c <udd_interrupt+0x5fc>
#endif
		goto udd_interrupt_end;
800056bc:	e0 8f 02 d4 	bral	80005c64 <udd_interrupt+0x5d4>
	}
	if (Is_udd_msof()) {
800056c0:	fe 68 00 04 	mov	r8,-131068
800056c4:	70 08       	ld.w	r8,r8[0x0]
800056c6:	e2 18 00 02 	andl	r8,0x2,COH
800056ca:	c0 90       	breq	800056dc <udd_interrupt+0x4c>
		udd_ack_msof();
800056cc:	30 29       	mov	r9,2
800056ce:	fe 68 00 08 	mov	r8,-131064
800056d2:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
800056d4:	f0 1f 01 6d 	mcall	80005c88 <udd_interrupt+0x5f8>
		goto udd_interrupt_end;
800056d8:	e0 8f 02 c6 	bral	80005c64 <udd_interrupt+0x5d4>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
800056dc:	fe 68 00 00 	mov	r8,-131072
800056e0:	70 18       	ld.w	r8,r8[0x4]
800056e2:	e2 18 10 00 	andl	r8,0x1000,COH
800056e6:	e0 80 01 6e 	breq	800059c2 <udd_interrupt+0x332>
		return false; // No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
800056ea:	fe 68 02 20 	mov	r8,-130528
800056ee:	31 09       	mov	r9,16
800056f0:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
800056f2:	30 89       	mov	r9,8
800056f4:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
800056f6:	fe 68 01 30 	mov	r8,-130768
800056fa:	70 08       	ld.w	r8,r8[0x0]
800056fc:	e2 18 00 04 	andl	r8,0x4,COH
80005700:	e0 80 00 81 	breq	80005802 <udd_interrupt+0x172>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80005704:	fe f8 05 8c 	ld.w	r8,pc[1420]
80005708:	70 08       	ld.w	r8,r8[0x0]
8000570a:	58 08       	cp.w	r8,0
8000570c:	c0 50       	breq	80005716 <udd_interrupt+0x86>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
8000570e:	f0 1f 01 62 	mcall	80005c94 <udd_interrupt+0x604>

		// Reinitializes control endpoint management
		udd_ctrl_init();
80005712:	f0 1f 01 62 	mcall	80005c98 <udd_interrupt+0x608>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80005716:	fe 68 01 30 	mov	r8,-130768
8000571a:	70 08       	ld.w	r8,r8[0x0]
8000571c:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80005720:	58 88       	cp.w	r8,8
80005722:	c0 90       	breq	80005734 <udd_interrupt+0xa4>
		udd_ctrl_stall_data();
80005724:	f0 1f 01 5e 	mcall	80005c9c <udd_interrupt+0x60c>
		udd_ack_setup_received(0);
80005728:	30 49       	mov	r9,4
8000572a:	fe 68 01 60 	mov	r8,-130720
8000572e:	91 09       	st.w	r8[0x0],r9
80005730:	e0 8f 02 9a 	bral	80005c64 <udd_interrupt+0x5d4>
80005734:	fc 18 e0 00 	movh	r8,0xe000
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80005738:	fe fc 05 68 	ld.w	r12,pc[1384]
8000573c:	fc 1b 20 00 	movh	r11,0x2000
80005740:	f0 0c 00 09 	add	r9,r8,r12
80005744:	11 3a       	ld.ub	r10,r8++
80005746:	f2 0b 0b 0a 	st.b	r9[r11],r10
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
8000574a:	30 8a       	mov	r10,8
8000574c:	ea 1a e0 00 	orh	r10,0xe000
80005750:	14 38       	cp.w	r8,r10
80005752:	cf 71       	brne	80005740 <udd_interrupt+0xb0>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80005754:	fe f8 05 4c 	ld.w	r8,pc[1356]
80005758:	90 19       	ld.sh	r9,r8[0x2]
8000575a:	5c c9       	swap.bh	r9
8000575c:	b0 19       	st.h	r8[0x2],r9
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
8000575e:	90 29       	ld.sh	r9,r8[0x4]
80005760:	5c c9       	swap.bh	r9
80005762:	b0 29       	st.h	r8[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80005764:	90 39       	ld.sh	r9,r8[0x6]
80005766:	5c c9       	swap.bh	r9
80005768:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
8000576a:	f0 1f 01 4f 	mcall	80005ca4 <udd_interrupt+0x614>
8000576e:	c0 91       	brne	80005780 <udd_interrupt+0xf0>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
80005770:	f0 1f 01 4b 	mcall	80005c9c <udd_interrupt+0x60c>
		udd_ack_setup_received(0);
80005774:	30 49       	mov	r9,4
80005776:	fe 68 01 60 	mov	r8,-130720
8000577a:	91 09       	st.w	r8[0x0],r9
8000577c:	e0 8f 02 74 	bral	80005c64 <udd_interrupt+0x5d4>
		return;
	}
	udd_ack_setup_received(0);
80005780:	30 49       	mov	r9,4
80005782:	fe 68 01 60 	mov	r8,-130720
80005786:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80005788:	fe f8 05 18 	ld.w	r8,pc[1304]
8000578c:	11 89       	ld.ub	r9,r8[0x0]
8000578e:	30 08       	mov	r8,0
80005790:	f0 09 18 00 	cp.b	r9,r8
80005794:	c1 04       	brge	800057b4 <udd_interrupt+0x124>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80005796:	30 08       	mov	r8,0
80005798:	fe f9 05 10 	ld.w	r9,pc[1296]
8000579c:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
8000579e:	fe f9 05 0e 	ld.w	r9,pc[1294]
800057a2:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
800057a4:	30 29       	mov	r9,2
800057a6:	fe f8 04 ea 	ld.w	r8,pc[1258]
800057aa:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
800057ac:	f0 1f 01 41 	mcall	80005cb0 <udd_interrupt+0x620>
800057b0:	e0 8f 02 5a 	bral	80005c64 <udd_interrupt+0x5d4>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
800057b4:	fe f8 04 ec 	ld.w	r8,pc[1260]
800057b8:	90 39       	ld.sh	r9,r8[0x6]
800057ba:	30 08       	mov	r8,0
800057bc:	f0 09 19 00 	cp.h	r9,r8
800057c0:	c0 51       	brne	800057ca <udd_interrupt+0x13a>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
800057c2:	f0 1f 01 3d 	mcall	80005cb4 <udd_interrupt+0x624>
800057c6:	e0 8f 02 4f 	bral	80005c64 <udd_interrupt+0x5d4>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
800057ca:	30 08       	mov	r8,0
800057cc:	fe f9 04 dc 	ld.w	r9,pc[1244]
800057d0:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
800057d2:	fe f9 04 da 	ld.w	r9,pc[1242]
800057d6:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
800057d8:	30 19       	mov	r9,1
800057da:	fe f8 04 b6 	ld.w	r8,pc[1206]
800057de:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
800057e0:	31 08       	mov	r8,16
800057e2:	fe 69 01 60 	mov	r9,-130720
800057e6:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800057e8:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800057ec:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
800057ee:	fe 6a 01 f0 	mov	r10,-130576
800057f2:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800057f4:	12 98       	mov	r8,r9
800057f6:	e6 18 00 01 	andh	r8,0x1,COH
800057fa:	c0 21       	brne	800057fe <udd_interrupt+0x16e>
      cpu_irq_enable();
800057fc:	d5 03       	csrf	0x10
   }

	barrier();
800057fe:	e0 8f 02 33 	bral	80005c64 <udd_interrupt+0x5d4>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80005802:	fe 68 01 30 	mov	r8,-130768
80005806:	70 08       	ld.w	r8,r8[0x0]
80005808:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000580c:	c0 b0       	breq	80005822 <udd_interrupt+0x192>
8000580e:	fe 68 01 c0 	mov	r8,-130624
80005812:	70 08       	ld.w	r8,r8[0x0]
80005814:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005818:	c0 50       	breq	80005822 <udd_interrupt+0x192>
		// IN packet sent
		udd_ctrl_in_sent();
8000581a:	f0 1f 01 26 	mcall	80005cb0 <udd_interrupt+0x620>
8000581e:	e0 8f 02 23 	bral	80005c64 <udd_interrupt+0x5d4>
		return true;
	}
	if (Is_udd_out_received(0)) {
80005822:	fe 68 01 30 	mov	r8,-130768
80005826:	70 08       	ld.w	r8,r8[0x0]
80005828:	e2 18 00 02 	andl	r8,0x2,COH
8000582c:	e0 80 00 a8 	breq	8000597c <udd_interrupt+0x2ec>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80005830:	fe f8 04 60 	ld.w	r8,pc[1120]
80005834:	70 08       	ld.w	r8,r8[0x0]
80005836:	58 18       	cp.w	r8,1
80005838:	c1 10       	breq	8000585a <udd_interrupt+0x1ca>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000583a:	58 28       	cp.w	r8,2
8000583c:	5f 09       	sreq	r9
8000583e:	58 48       	cp.w	r8,4
80005840:	5f 08       	sreq	r8
80005842:	f3 e8 10 08 	or	r8,r9,r8
80005846:	c0 40       	breq	8000584e <udd_interrupt+0x1be>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
80005848:	f0 1f 01 13 	mcall	80005c94 <udd_interrupt+0x604>
8000584c:	c0 38       	rjmp	80005852 <udd_interrupt+0x1c2>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
8000584e:	f0 1f 01 14 	mcall	80005c9c <udd_interrupt+0x60c>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80005852:	f0 1f 01 12 	mcall	80005c98 <udd_interrupt+0x608>
80005856:	e0 8f 02 07 	bral	80005c64 <udd_interrupt+0x5d4>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
8000585a:	fe 68 01 30 	mov	r8,-130768
8000585e:	70 0b       	ld.w	r11,r8[0x0]
80005860:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80005864:	fe f8 04 3c 	ld.w	r8,pc[1084]
80005868:	90 69       	ld.sh	r9,r8[0xc]
8000586a:	fe f8 04 42 	ld.w	r8,pc[1090]
8000586e:	90 08       	ld.sh	r8,r8[0x0]
80005870:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80005874:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80005878:	f6 0a 00 0a 	add	r10,r11,r10
8000587c:	14 3c       	cp.w	r12,r10
8000587e:	c0 44       	brge	80005886 <udd_interrupt+0x1f6>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80005880:	10 19       	sub	r9,r8
80005882:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80005886:	fe f9 04 1a 	ld.w	r9,pc[1050]
8000588a:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
8000588c:	58 0b       	cp.w	r11,0
8000588e:	e0 80 01 f1 	breq	80005c70 <udd_interrupt+0x5e0>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80005892:	5c 78       	castu.h	r8
80005894:	10 09       	add	r9,r8
80005896:	fc 18 e0 00 	movh	r8,0xe000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
8000589a:	11 3a       	ld.ub	r10,r8++
8000589c:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
8000589e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800058a2:	f6 0a 19 00 	cp.h	r10,r11
800058a6:	cf a3       	brcs	8000589a <udd_interrupt+0x20a>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
800058a8:	fe f9 04 04 	ld.w	r9,pc[1028]
800058ac:	92 08       	ld.sh	r8,r9[0x0]
800058ae:	16 08       	add	r8,r11
800058b0:	5c 88       	casts.h	r8
800058b2:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
800058b4:	30 89       	mov	r9,8
800058b6:	f2 0b 19 00 	cp.h	r11,r9
800058ba:	c0 e1       	brne	800058d6 <udd_interrupt+0x246>
800058bc:	fe f9 03 e4 	ld.w	r9,pc[996]
800058c0:	92 ba       	ld.uh	r10,r9[0x6]
800058c2:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
800058c6:	fe f9 03 e2 	ld.w	r9,pc[994]
800058ca:	92 89       	ld.uh	r9,r9[0x0]
800058cc:	f6 09 00 09 	add	r9,r11,r9
800058d0:	12 3a       	cp.w	r10,r9
800058d2:	e0 89 00 1a 	brgt	80005906 <udd_interrupt+0x276>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
800058d6:	fe f9 03 ca 	ld.w	r9,pc[970]
800058da:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
800058dc:	72 5c       	ld.w	r12,r9[0x14]
800058de:	58 0c       	cp.w	r12,0
800058e0:	c0 b0       	breq	800058f6 <udd_interrupt+0x266>
			if (!udd_g_ctrlreq.over_under_run()) {
800058e2:	5d 1c       	icall	r12
800058e4:	c0 91       	brne	800058f6 <udd_interrupt+0x266>
				// Stall ZLP
				udd_ctrl_stall_data();
800058e6:	f0 1f 00 ee 	mcall	80005c9c <udd_interrupt+0x60c>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
800058ea:	30 29       	mov	r9,2
800058ec:	fe 68 01 60 	mov	r8,-130720
800058f0:	91 09       	st.w	r8[0x0],r9
800058f2:	e0 8f 01 b9 	bral	80005c64 <udd_interrupt+0x5d4>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
800058f6:	30 29       	mov	r9,2
800058f8:	fe 68 01 60 	mov	r8,-130720
800058fc:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
800058fe:	f0 1f 00 ee 	mcall	80005cb4 <udd_interrupt+0x624>
80005902:	e0 8f 01 b1 	bral	80005c64 <udd_interrupt+0x5d4>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80005906:	fe f9 03 9a 	ld.w	r9,pc[922]
8000590a:	92 69       	ld.sh	r9,r9[0xc]
8000590c:	f0 09 19 00 	cp.h	r9,r8
80005910:	c2 31       	brne	80005956 <udd_interrupt+0x2c6>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80005912:	fe f8 03 8e 	ld.w	r8,pc[910]
80005916:	70 5c       	ld.w	r12,r8[0x14]
80005918:	58 0c       	cp.w	r12,0
8000591a:	c0 91       	brne	8000592c <udd_interrupt+0x29c>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
8000591c:	f0 1f 00 e0 	mcall	80005c9c <udd_interrupt+0x60c>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80005920:	30 29       	mov	r9,2
80005922:	fe 68 01 60 	mov	r8,-130720
80005926:	91 09       	st.w	r8[0x0],r9
80005928:	e0 8f 01 9e 	bral	80005c64 <udd_interrupt+0x5d4>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
8000592c:	5d 1c       	icall	r12
8000592e:	c0 91       	brne	80005940 <udd_interrupt+0x2b0>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80005930:	f0 1f 00 db 	mcall	80005c9c <udd_interrupt+0x60c>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80005934:	30 29       	mov	r9,2
80005936:	fe 68 01 60 	mov	r8,-130720
8000593a:	91 09       	st.w	r8[0x0],r9
8000593c:	e0 8f 01 94 	bral	80005c64 <udd_interrupt+0x5d4>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80005940:	fe f9 03 68 	ld.w	r9,pc[872]
80005944:	fe f8 03 68 	ld.w	r8,pc[872]
80005948:	90 0b       	ld.sh	r11,r8[0x0]
8000594a:	92 0a       	ld.sh	r10,r9[0x0]
8000594c:	f6 0a 00 0a 	add	r10,r11,r10
80005950:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80005952:	30 09       	mov	r9,0
80005954:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80005956:	fe 69 01 60 	mov	r9,-130720
8000595a:	30 28       	mov	r8,2
8000595c:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
8000595e:	31 08       	mov	r8,16
80005960:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005962:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80005966:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80005968:	fe 6a 01 f0 	mov	r10,-130576
8000596c:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000596e:	12 98       	mov	r8,r9
80005970:	e6 18 00 01 	andh	r8,0x1,COH
80005974:	c0 21       	brne	80005978 <udd_interrupt+0x2e8>
      cpu_irq_enable();
80005976:	d5 03       	csrf	0x10
   }

	barrier();
80005978:	e0 8f 01 76 	bral	80005c64 <udd_interrupt+0x5d4>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
8000597c:	fe 68 01 30 	mov	r8,-130768
80005980:	70 08       	ld.w	r8,r8[0x0]
80005982:	e2 18 00 08 	andl	r8,0x8,COH
80005986:	c1 80       	breq	800059b6 <udd_interrupt+0x326>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80005988:	30 89       	mov	r9,8
8000598a:	fe 68 01 60 	mov	r8,-130720
8000598e:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80005990:	fe 68 01 30 	mov	r8,-130768
80005994:	70 08       	ld.w	r8,r8[0x0]
80005996:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000599a:	e0 81 01 65 	brne	80005c64 <udd_interrupt+0x5d4>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000599e:	fe f8 02 f2 	ld.w	r8,pc[754]
800059a2:	70 08       	ld.w	r8,r8[0x0]
800059a4:	58 38       	cp.w	r8,3
800059a6:	e0 81 01 5f 	brne	80005c64 <udd_interrupt+0x5d4>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
800059aa:	e8 69 00 00 	mov	r9,524288
800059ae:	fe 68 01 f0 	mov	r8,-130576
800059b2:	91 09       	st.w	r8[0x0],r9
800059b4:	c5 89       	rjmp	80005c64 <udd_interrupt+0x5d4>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
800059b6:	fe 68 01 30 	mov	r8,-130768
800059ba:	70 08       	ld.w	r8,r8[0x0]
800059bc:	e2 18 00 10 	andl	r8,0x10,COH
800059c0:	c0 d1       	brne	800059da <udd_interrupt+0x34a>
800059c2:	fe f7 02 f6 	ld.w	r7,pc[758]
800059c6:	fe 69 01 34 	mov	r9,-130764
800059ca:	30 06       	mov	r6,0
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
800059cc:	fe 6a 00 00 	mov	r10,-131072
800059d0:	fc 15 02 00 	movh	r5,0x200
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
800059d4:	e0 64 10 00 	mov	r4,4096
800059d8:	c1 e8       	rjmp	80005a14 <udd_interrupt+0x384>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
800059da:	31 09       	mov	r9,16
800059dc:	fe 68 01 60 	mov	r8,-130720
800059e0:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
800059e2:	fe 68 01 30 	mov	r8,-130768
800059e6:	70 08       	ld.w	r8,r8[0x0]
800059e8:	e2 18 00 02 	andl	r8,0x2,COH
800059ec:	e0 81 01 3c 	brne	80005c64 <udd_interrupt+0x5d4>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
800059f0:	fe f8 02 a0 	ld.w	r8,pc[672]
800059f4:	70 08       	ld.w	r8,r8[0x0]
800059f6:	58 18       	cp.w	r8,1
800059f8:	c0 41       	brne	80005a00 <udd_interrupt+0x370>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
800059fa:	f0 1f 00 af 	mcall	80005cb4 <udd_interrupt+0x624>
800059fe:	c3 39       	rjmp	80005c64 <udd_interrupt+0x5d4>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80005a00:	58 48       	cp.w	r8,4
80005a02:	e0 81 01 31 	brne	80005c64 <udd_interrupt+0x5d4>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80005a06:	e8 69 00 00 	mov	r9,524288
80005a0a:	fe 68 01 f0 	mov	r8,-130576
80005a0e:	91 09       	st.w	r8[0x0],r9
80005a10:	c2 a9       	rjmp	80005c64 <udd_interrupt+0x5d4>
80005a12:	16 96       	mov	r6,r11
80005a14:	ec cb ff ff 	sub	r11,r6,-1
80005a18:	0e 98       	mov	r8,r7
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80005a1a:	74 4e       	ld.w	lr,r10[0x10]
80005a1c:	16 9c       	mov	r12,r11
80005a1e:	ea 06 09 46 	lsl	r6,r5,r6
80005a22:	ed ee 00 0e 	and	lr,r6,lr
80005a26:	c1 e0       	breq	80005a62 <udd_interrupt+0x3d2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80005a28:	74 1e       	ld.w	lr,r10[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80005a2a:	ed ee 00 0e 	and	lr,r6,lr
80005a2e:	c1 a0       	breq	80005a62 <udd_interrupt+0x3d2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
80005a30:	f6 09 15 04 	lsl	r9,r11,0x4
80005a34:	e0 39 fd 00 	sub	r9,130304
80005a38:	72 3a       	ld.w	r10,r9[0xc]
80005a3a:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80005a3e:	e0 81 01 13 	brne	80005c64 <udd_interrupt+0x5d4>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
			}
			udd_disable_endpoint_dma_interrupt(ep);
80005a42:	fe 6a 00 00 	mov	r10,-131072
80005a46:	95 56       	st.w	r10[0x14],r6
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
80005a48:	72 39       	ld.w	r9,r9[0xc]
80005a4a:	b1 89       	lsr	r9,0x10
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
80005a4c:	ef fa 10 03 	ld.wne	r10,r7[0xc]
80005a50:	f5 d9 e1 19 	subne	r9,r10,r9
80005a54:	f1 f9 1a 03 	st.wne	r8[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
80005a58:	f1 f9 1a 02 	st.wne	r8[0x8],r9
			}
			udd_ep_trans_done(ep);
80005a5c:	f0 1f 00 98 	mcall	80005cbc <udd_interrupt+0x62c>
80005a60:	c0 29       	rjmp	80005c64 <udd_interrupt+0x5d4>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80005a62:	74 46       	ld.w	r6,r10[0x10]
80005a64:	e8 0c 09 4e 	lsl	lr,r4,r12
80005a68:	fd e6 00 06 	and	r6,lr,r6
80005a6c:	c4 80       	breq	80005afc <udd_interrupt+0x46c>
80005a6e:	e0 76 fe d0 	mov	r6,130768
80005a72:	f2 06 00 02 	add	r2,r9,r6
80005a76:	f2 c6 ff 70 	sub	r6,r9,-144
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80005a7a:	6c 03       	ld.w	r3,r6[0x0]
80005a7c:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80005a80:	c1 70       	breq	80005aae <udd_interrupt+0x41e>
80005a82:	72 03       	ld.w	r3,r9[0x0]
80005a84:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80005a88:	c1 30       	breq	80005aae <udd_interrupt+0x41e>
				udd_disable_in_send_interrupt(ep);
80005a8a:	fe 6a 02 20 	mov	r10,-130528
80005a8e:	e4 0a 00 09 	add	r9,r2,r10
80005a92:	30 1a       	mov	r10,1
80005a94:	93 0a       	st.w	r9[0x0],r10
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
80005a96:	e0 32 fe a0 	sub	r2,130720
80005a9a:	85 0a       	st.w	r2[0x0],r10
				udd_ack_fifocon(ep);
80005a9c:	e0 6a 40 00 	mov	r10,16384
80005aa0:	93 0a       	st.w	r9[0x0],r10
				udd_ep_finish_job(ptr_job, false, ep);
80005aa2:	18 9a       	mov	r10,r12
80005aa4:	30 0b       	mov	r11,0
80005aa6:	10 9c       	mov	r12,r8
80005aa8:	f0 1f 00 86 	mcall	80005cc0 <udd_interrupt+0x630>
80005aac:	cd c8       	rjmp	80005c64 <udd_interrupt+0x5d4>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
80005aae:	6c 0c       	ld.w	r12,r6[0x0]
80005ab0:	e2 1c 10 00 	andl	r12,0x1000,COH
80005ab4:	c2 40       	breq	80005afc <udd_interrupt+0x46c>
80005ab6:	72 0c       	ld.w	r12,r9[0x0]
80005ab8:	f9 dc c1 82 	bfextu	r12,r12,0xc,0x2
80005abc:	c2 01       	brne	80005afc <udd_interrupt+0x46c>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80005abe:	fe 66 02 20 	mov	r6,-130528
80005ac2:	e4 06 00 09 	add	r9,r2,r6
80005ac6:	e0 6a 10 00 	mov	r10,4096
80005aca:	93 0a       	st.w	r9[0x0],r10
				udd_disable_endpoint_interrupt(ep);
80005acc:	fe 69 00 00 	mov	r9,-131072
80005ad0:	93 5e       	st.w	r9[0x14],lr

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
80005ad2:	70 09       	ld.w	r9,r8[0x0]
80005ad4:	30 0a       	mov	r10,0
80005ad6:	f3 da d3 a1 	bfins	r9,r10,0x1d,0x1
80005ada:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_bank_autoswitch(ep);
80005adc:	fe 6a 01 00 	mov	r10,-130816
80005ae0:	e4 0a 00 08 	add	r8,r2,r10
80005ae4:	70 09       	ld.w	r9,r8[0x0]
80005ae6:	a9 d9       	cbr	r9,0x9
80005ae8:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
80005aea:	e0 32 fe 10 	sub	r2,130576
80005aee:	e8 68 00 00 	mov	r8,524288
80005af2:	85 08       	st.w	r2[0x0],r8
				udd_reset_data_toggle(ep);
80005af4:	e4 68 00 00 	mov	r8,262144
80005af8:	85 08       	st.w	r2[0x0],r8
80005afa:	cb 58       	rjmp	80005c64 <udd_interrupt+0x5d4>
80005afc:	2e c7       	sub	r7,-20
80005afe:	2f c9       	sub	r9,-4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80005b00:	58 2b       	cp.w	r11,2
80005b02:	c8 81       	brne	80005a12 <udd_interrupt+0x382>
80005b04:	cb a8       	rjmp	80005c78 <udd_interrupt+0x5e8>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
80005b06:	30 87       	mov	r7,8
80005b08:	fe 68 00 08 	mov	r8,-131064
80005b0c:	91 07       	st.w	r8[0x0],r7
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
80005b0e:	4e b6       	lddpc	r6,80005cb8 <udd_interrupt+0x628>
80005b10:	30 1a       	mov	r10,1
80005b12:	14 9b       	mov	r11,r10
80005b14:	0c 9c       	mov	r12,r6
80005b16:	f0 1f 00 6b 	mcall	80005cc0 <udd_interrupt+0x630>
80005b1a:	30 2a       	mov	r10,2
80005b1c:	30 1b       	mov	r11,1
80005b1e:	ec cc ff ec 	sub	r12,r6,-20
80005b22:	f0 1f 00 68 	mcall	80005cc0 <udd_interrupt+0x630>
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
80005b26:	f0 1f 00 68 	mcall	80005cc4 <udd_interrupt+0x634>
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
80005b2a:	fe 68 00 00 	mov	r8,-131072
80005b2e:	70 09       	ld.w	r9,r8[0x0]
80005b30:	e0 19 ff 80 	andl	r9,0xff80
80005b34:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80005b36:	70 09       	ld.w	r9,r8[0x0]
80005b38:	a7 b9       	sbr	r9,0x7
80005b3a:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80005b3c:	fe 69 01 00 	mov	r9,-130816
80005b40:	72 0a       	ld.w	r10,r9[0x0]
80005b42:	ee 07 0c 47 	max	r7,r7,r7
80005b46:	e0 6b 04 00 	mov	r11,1024
80005b4a:	ee 0b 0d 4b 	min	r11,r7,r11
80005b4e:	a1 7b       	lsl	r11,0x1
80005b50:	20 1b       	sub	r11,1
80005b52:	f6 0b 12 00 	clz	r11,r11
80005b56:	f6 0b 11 1c 	rsub	r11,r11,28
80005b5a:	a5 6b       	lsl	r11,0x4
80005b5c:	e2 1b 19 7c 	andl	r11,0x197c,COH
80005b60:	e0 1a e6 83 	andl	r10,0xe683
80005b64:	f7 ea 10 0a 	or	r10,r11,r10
80005b68:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80005b6a:	72 0a       	ld.w	r10,r9[0x0]
80005b6c:	a1 ba       	sbr	r10,0x1
80005b6e:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
80005b70:	70 79       	ld.w	r9,r8[0x1c]
80005b72:	a1 a9       	sbr	r9,0x0
80005b74:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005b76:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80005b7a:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
80005b7c:	fe 69 01 f0 	mov	r9,-130576
80005b80:	30 4b       	mov	r11,4
80005b82:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80005b84:	30 2b       	mov	r11,2
80005b86:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
80005b88:	e0 69 10 00 	mov	r9,4096
80005b8c:	91 69       	st.w	r8[0x18],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005b8e:	14 98       	mov	r8,r10
80005b90:	e6 18 00 01 	andh	r8,0x1,COH
80005b94:	c0 21       	brne	80005b98 <udd_interrupt+0x508>
      cpu_irq_enable();
80005b96:	d5 03       	csrf	0x10
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
80005b98:	f0 1f 00 40 	mcall	80005c98 <udd_interrupt+0x608>
		goto udd_interrupt_end;
80005b9c:	c6 48       	rjmp	80005c64 <udd_interrupt+0x5d4>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80005b9e:	fe 68 00 10 	mov	r8,-131056
80005ba2:	70 08       	ld.w	r8,r8[0x0]
80005ba4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005ba8:	c1 d0       	breq	80005be2 <udd_interrupt+0x552>
80005baa:	fe 68 00 04 	mov	r8,-131068
80005bae:	70 08       	ld.w	r8,r8[0x0]
80005bb0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005bb4:	c1 70       	breq	80005be2 <udd_interrupt+0x552>
		otg_unfreeze_clock();
80005bb6:	fe 68 08 00 	mov	r8,-129024
80005bba:	70 09       	ld.w	r9,r8[0x0]
80005bbc:	af c9       	cbr	r9,0xe
80005bbe:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80005bc0:	30 1a       	mov	r10,1
80005bc2:	fe 69 00 14 	mov	r9,-131052
80005bc6:	93 0a       	st.w	r9[0x0],r10
		udd_enable_wake_up_interrupt();
80005bc8:	31 0a       	mov	r10,16
80005bca:	fe 69 00 18 	mov	r9,-131048
80005bce:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
80005bd0:	70 09       	ld.w	r9,r8[0x0]
80005bd2:	af a9       	sbr	r9,0xe
80005bd4:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
80005bd6:	30 0c       	mov	r12,0
80005bd8:	f0 1f 00 3c 	mcall	80005cc8 <udd_interrupt+0x638>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
80005bdc:	f0 1f 00 3c 	mcall	80005ccc <udd_interrupt+0x63c>
#endif
		goto udd_interrupt_end;
80005be0:	c4 28       	rjmp	80005c64 <udd_interrupt+0x5d4>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80005be2:	fe 68 00 10 	mov	r8,-131056
80005be6:	70 08       	ld.w	r8,r8[0x0]
80005be8:	e2 18 00 10 	andl	r8,0x10,COH
80005bec:	c1 f0       	breq	80005c2a <udd_interrupt+0x59a>
80005bee:	fe 68 00 04 	mov	r8,-131068
80005bf2:	70 08       	ld.w	r8,r8[0x0]
80005bf4:	e2 18 00 10 	andl	r8,0x10,COH
80005bf8:	c1 90       	breq	80005c2a <udd_interrupt+0x59a>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80005bfa:	fe 68 08 00 	mov	r8,-129024
80005bfe:	70 09       	ld.w	r9,r8[0x0]
80005c00:	af c9       	cbr	r9,0xe
80005c02:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );
80005c04:	fe 69 08 04 	mov	r9,-129020
80005c08:	72 08       	ld.w	r8,r9[0x0]
80005c0a:	e2 18 40 00 	andl	r8,0x4000,COH
80005c0e:	cf d0       	breq	80005c08 <udd_interrupt+0x578>

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80005c10:	31 09       	mov	r9,16
80005c12:	fe 68 00 14 	mov	r8,-131052
80005c16:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
80005c18:	30 1c       	mov	r12,1
80005c1a:	fe 68 00 18 	mov	r8,-131048
80005c1e:	91 0c       	st.w	r8[0x0],r12
		udd_sleep_mode(true); // Enter in IDLE mode
80005c20:	f0 1f 00 2a 	mcall	80005cc8 <udd_interrupt+0x638>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
80005c24:	f0 1f 00 2b 	mcall	80005cd0 <udd_interrupt+0x640>
#endif
		goto udd_interrupt_end;
80005c28:	c1 e8       	rjmp	80005c64 <udd_interrupt+0x5d4>
	}

	if (Is_otg_vbus_transition()) {
80005c2a:	fe 68 08 04 	mov	r8,-129020
80005c2e:	70 08       	ld.w	r8,r8[0x0]
80005c30:	e2 18 00 02 	andl	r8,0x2,COH
80005c34:	c1 80       	breq	80005c64 <udd_interrupt+0x5d4>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
80005c36:	fe 68 08 00 	mov	r8,-129024
80005c3a:	70 09       	ld.w	r9,r8[0x0]
80005c3c:	af c9       	cbr	r9,0xe
80005c3e:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
80005c40:	30 2a       	mov	r10,2
80005c42:	fe 69 08 08 	mov	r9,-129016
80005c46:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock();
80005c48:	70 09       	ld.w	r9,r8[0x0]
80005c4a:	af a9       	sbr	r9,0xe
80005c4c:	91 09       	st.w	r8[0x0],r9
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
80005c4e:	fe 68 08 04 	mov	r8,-129020
80005c52:	70 08       	ld.w	r8,r8[0x0]
80005c54:	e2 18 08 00 	andl	r8,0x800,COH
80005c58:	c0 40       	breq	80005c60 <udd_interrupt+0x5d0>
			udd_attach();
80005c5a:	f0 1f 00 1f 	mcall	80005cd4 <udd_interrupt+0x644>
80005c5e:	c0 38       	rjmp	80005c64 <udd_interrupt+0x5d4>
		} else {
			udd_detach();
80005c60:	f0 1f 00 1e 	mcall	80005cd8 <udd_interrupt+0x648>
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80005c64:	fe 68 00 00 	mov	r8,-131072
80005c68:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80005c6c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80005c70:	48 f9       	lddpc	r9,80005cac <udd_interrupt+0x61c>
80005c72:	b2 08       	st.h	r9[0x0],r8
80005c74:	fe 9f fe 31 	bral	800058d6 <udd_interrupt+0x246>
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80005c78:	fe 68 00 04 	mov	r8,-131068
80005c7c:	70 08       	ld.w	r8,r8[0x0]
80005c7e:	e2 18 00 08 	andl	r8,0x8,COH
80005c82:	c8 e0       	breq	80005b9e <udd_interrupt+0x50e>
80005c84:	c4 1b       	rjmp	80005b06 <udd_interrupt+0x476>
80005c86:	00 00       	add	r0,r0
80005c88:	80 00       	ld.sh	r0,r0[0x0]
80005c8a:	7b ac       	ld.w	r12,sp[0x68]
80005c8c:	80 00       	ld.sh	r0,r0[0x0]
80005c8e:	43 14       	lddsp	r4,sp[0xc4]
80005c90:	00 00       	add	r0,r0
80005c92:	0a 90       	mov	r0,r5
80005c94:	80 00       	ld.sh	r0,r0[0x0]
80005c96:	4d ec       	lddpc	r12,80005e0c <uhd_ctrl_phase_data_out+0x54>
80005c98:	80 00       	ld.sh	r0,r0[0x0]
80005c9a:	52 b8       	stdsp	sp[0xac],r8
80005c9c:	80 00       	ld.sh	r0,r0[0x0]
80005c9e:	4d d4       	lddpc	r4,80005e10 <uhd_ctrl_phase_data_out+0x58>
80005ca0:	00 00       	add	r0,r0
80005ca2:	0c 3c       	cp.w	r12,r6
80005ca4:	80 00       	ld.sh	r0,r0[0x0]
80005ca6:	7e 28       	ld.w	r8,pc[0x8]
80005ca8:	00 00       	add	r0,r0
80005caa:	0a 5c       	eor	r12,r5
80005cac:	00 00       	add	r0,r0
80005cae:	0a 8a       	andn	r10,r5
80005cb0:	80 00       	ld.sh	r0,r0[0x0]
80005cb2:	52 f0       	stdsp	sp[0xbc],r0
80005cb4:	80 00       	ld.sh	r0,r0[0x0]
80005cb6:	52 88       	stdsp	sp[0xa0],r8
80005cb8:	00 00       	add	r0,r0
80005cba:	0a 60       	and	r0,r5
80005cbc:	80 00       	ld.sh	r0,r0[0x0]
80005cbe:	4f 20       	lddpc	r0,80005e84 <uhd_ctrl_phase_data_out+0xcc>
80005cc0:	80 00       	ld.sh	r0,r0[0x0]
80005cc2:	4e 00       	lddpc	r0,80005e40 <uhd_ctrl_phase_data_out+0x88>
80005cc4:	80 00       	ld.sh	r0,r0[0x0]
80005cc6:	7d cc       	ld.w	r12,lr[0x70]
80005cc8:	80 00       	ld.sh	r0,r0[0x0]
80005cca:	51 14       	stdsp	sp[0x44],r4
80005ccc:	80 00       	ld.sh	r0,r0[0x0]
80005cce:	42 e8       	lddsp	r8,sp[0xb8]
80005cd0:	80 00       	ld.sh	r0,r0[0x0]
80005cd2:	42 04       	lddsp	r4,sp[0x80]
80005cd4:	80 00       	ld.sh	r0,r0[0x0]
80005cd6:	51 b4       	stdsp	sp[0x6c],r4
80005cd8:	80 00       	ld.sh	r0,r0[0x0]
80005cda:	51 8c       	stdsp	sp[0x60],r12

80005cdc <uhd_get_speed>:
	cpu_irq_restore(flags);
}

uhd_speed_t uhd_get_speed(void)
{
	switch (uhd_get_speed_mode()) {
80005cdc:	fe 68 08 04 	mov	r8,-129020
80005ce0:	70 08       	ld.w	r8,r8[0x0]
80005ce2:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80005ce6:	58 28       	cp.w	r8,2
80005ce8:	e0 88 00 03 	brls	80005cee <uhd_get_speed+0x12>
80005cec:	5e fd       	retal	0
80005cee:	48 39       	lddpc	r9,80005cf8 <uhd_get_speed+0x1c>
80005cf0:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]

	default:
		Assert(false);
		return UHD_SPEED_LOW;
	}
}
80005cf4:	5e fc       	retal	r12
80005cf6:	00 00       	add	r0,r0
80005cf8:	80 00       	ld.sh	r0,r0[0x0]
80005cfa:	ef 78 48 48 	stcond	r7[18504],r8

80005cfc <uhd_send_reset>:
	return uhd_get_microsof_number();
}

void uhd_send_reset(uhd_callback_reset_t callback)
{
	uhd_reset_callback = callback;
80005cfc:	48 48       	lddpc	r8,80005d0c <uhd_send_reset+0x10>
80005cfe:	91 0c       	st.w	r8[0x0],r12
	uhd_start_reset();
80005d00:	fe 68 04 00 	mov	r8,-130048
80005d04:	70 09       	ld.w	r9,r8[0x0]
80005d06:	a9 b9       	sbr	r9,0x9
80005d08:	91 09       	st.w	r8[0x0],r9
}
80005d0a:	5e fc       	retal	r12
80005d0c:	00 00       	add	r0,r0
80005d0e:	0a 94       	mov	r4,r5

80005d10 <uhd_suspend>:

void uhd_suspend(void)
{
	if (uhd_ctrl_request_timeout) {
80005d10:	49 28       	lddpc	r8,80005d58 <uhd_suspend+0x48>
80005d12:	90 08       	ld.sh	r8,r8[0x0]
80005d14:	58 08       	cp.w	r8,0
80005d16:	c0 50       	breq	80005d20 <uhd_suspend+0x10>
		// Delay suspend after setup requests
		uhd_b_suspend_requested = true;
80005d18:	30 19       	mov	r9,1
80005d1a:	49 18       	lddpc	r8,80005d5c <uhd_suspend+0x4c>
80005d1c:	b0 89       	st.b	r8[0x0],r9
		return;
80005d1e:	5e fc       	retal	r12
80005d20:	fe 69 05 c4 	mov	r9,-129596
80005d24:	30 08       	mov	r8,0
80005d26:	10 9a       	mov	r10,r8
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
80005d28:	e2 6c 00 00 	mov	r12,131072
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80005d2c:	72 0b       	ld.w	r11,r9[0x0]
{
	uhd_reset_callback = callback;
	uhd_start_reset();
}

void uhd_suspend(void)
80005d2e:	2f f8       	sub	r8,-1
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80005d30:	ee 1b 00 02 	eorh	r11,0x2
80005d34:	f7 db c2 21 	bfextu	r11,r11,0x11,0x1
80005d38:	f6 08 09 4b 	lsl	r11,r11,r8
80005d3c:	16 4a       	or	r10,r11
80005d3e:	5c 5a       	castu.b	r10
80005d40:	f2 cb ff d0 	sub	r11,r9,-48
		uhd_freeze_pipe(pipe);
80005d44:	97 0c       	st.w	r11[0x0],r12
80005d46:	2f c9       	sub	r9,-4
		uhd_b_suspend_requested = true;
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80005d48:	58 68       	cp.w	r8,6
80005d4a:	cf 11       	brne	80005d2c <uhd_suspend+0x1c>
80005d4c:	48 58       	lddpc	r8,80005d60 <uhd_suspend+0x50>
80005d4e:	b0 8a       	st.b	r8[0x0],r10
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
80005d50:	30 39       	mov	r9,3
80005d52:	48 58       	lddpc	r8,80005d64 <uhd_suspend+0x54>
80005d54:	b0 89       	st.b	r8[0x0],r9
80005d56:	5e fc       	retal	r12
80005d58:	00 00       	add	r0,r0
80005d5a:	0c 64       	and	r4,r6
80005d5c:	00 00       	add	r0,r0
80005d5e:	0b 18       	ld.sh	r8,r5++
80005d60:	00 00       	add	r0,r0
80005d62:	0b 11       	ld.sh	r1,r5++
80005d64:	00 00       	add	r0,r0
80005d66:	0b 10       	ld.sh	r0,r5++

80005d68 <uhd_is_suspend>:
}

bool uhd_is_suspend(void)
{
	return !Is_uhd_sof_enabled();
80005d68:	fe 68 04 00 	mov	r8,-130048
80005d6c:	70 0c       	ld.w	r12,r8[0x0]
80005d6e:	ec 1c 01 00 	eorl	r12,0x100
}
80005d72:	f9 dc c1 01 	bfextu	r12,r12,0x8,0x1
80005d76:	5e fc       	retal	r12

80005d78 <uhd_ctrl_phase_zlp_in>:
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80005d78:	30 39       	mov	r9,3
80005d7a:	48 f8       	lddpc	r8,80005db4 <uhd_ctrl_phase_zlp_in+0x3c>
80005d7c:	91 09       	st.w	r8[0x0],r9
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80005d7e:	fe 68 05 00 	mov	r8,-129792
80005d82:	70 09       	ld.w	r9,r8[0x0]
80005d84:	e0 19 fc ff 	andl	r9,0xfcff
80005d88:	a9 a9       	sbr	r9,0x8
80005d8a:	91 09       	st.w	r8[0x0],r9
	uhd_ack_in_received(0);
80005d8c:	fe 69 05 60 	mov	r9,-129696
80005d90:	30 18       	mov	r8,1
80005d92:	93 08       	st.w	r9[0x0],r8
	uhd_ack_short_packet(0);
80005d94:	e0 6a 00 80 	mov	r10,128
80005d98:	93 0a       	st.w	r9[0x0],r10
	uhd_enable_in_received_interrupt(0);
80005d9a:	fe 69 05 f0 	mov	r9,-129552
80005d9e:	93 08       	st.w	r9[0x0],r8
	uhd_ack_fifocon(0);
80005da0:	fe 68 06 20 	mov	r8,-129504
80005da4:	e0 69 40 00 	mov	r9,16384
80005da8:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
80005daa:	e2 69 00 00 	mov	r9,131072
80005dae:	91 09       	st.w	r8[0x0],r9
}
80005db0:	5e fc       	retal	r12
80005db2:	00 00       	add	r0,r0
80005db4:	00 00       	add	r0,r0
80005db6:	0c 54       	eor	r4,r6

80005db8 <uhd_ctrl_phase_data_out>:
/**
 * \internal
 * \brief Manages the DATA OUT phase on control endpoint
 */
static void uhd_ctrl_phase_data_out(void)
{
80005db8:	eb cd 40 e0 	pushm	r5-r7,lr
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
80005dbc:	30 19       	mov	r9,1
80005dbe:	4c 98       	lddpc	r8,80005ee0 <uhd_ctrl_phase_data_out+0x128>
80005dc0:	91 09       	st.w	r8[0x0],r9

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
80005dc2:	4c 98       	lddpc	r8,80005ee4 <uhd_ctrl_phase_data_out+0x12c>
80005dc4:	70 0b       	ld.w	r11,r8[0x0]
80005dc6:	17 f9       	ld.ub	r9,r11[0x7]
80005dc8:	f7 38 00 08 	ld.ub	r8,r11[8]
80005dcc:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80005dd0:	4c 69       	lddpc	r9,80005ee8 <uhd_ctrl_phase_data_out+0x130>
80005dd2:	92 09       	ld.sh	r9,r9[0x0]
80005dd4:	f0 09 19 00 	cp.h	r9,r8
80005dd8:	c0 51       	brne	80005de2 <uhd_ctrl_phase_data_out+0x2a>
		// End of DATA phase
		uhd_ctrl_phase_zlp_in();
80005dda:	f0 1f 00 45 	mcall	80005eec <uhd_ctrl_phase_data_out+0x134>
		return;
80005dde:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	}

	if (!uhd_ctrl_request_first->payload_size) {
80005de2:	f7 09 00 10 	ld.sh	r9,r11[16]
80005de6:	30 08       	mov	r8,0
80005de8:	f0 09 19 00 	cp.h	r9,r8
80005dec:	c1 21       	brne	80005e10 <uhd_ctrl_phase_data_out+0x58>
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
				|| !uhd_ctrl_request_first->callback_run(
80005dee:	76 58       	ld.w	r8,r11[0x14]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80005df0:	58 08       	cp.w	r8,0
80005df2:	c0 b0       	breq	80005e08 <uhd_ctrl_phase_data_out+0x50>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80005df4:	fe 69 04 24 	mov	r9,-130012
80005df8:	72 0c       	ld.w	r12,r9[0x0]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80005dfa:	f6 ca ff f0 	sub	r10,r11,-16
80005dfe:	2f 4b       	sub	r11,-12
80005e00:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80005e04:	5d 18       	icall	r8
80005e06:	c0 51       	brne	80005e10 <uhd_ctrl_phase_data_out+0x58>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
				&uhd_ctrl_request_first->payload,
				&uhd_ctrl_request_first->payload_size)) {
			// DATA phase aborted by host
			uhd_ctrl_phase_zlp_in();
80005e08:	f0 1f 00 39 	mcall	80005eec <uhd_ctrl_phase_data_out+0x134>
			return;
80005e0c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80005e10:	fe 68 05 00 	mov	r8,-129792
80005e14:	70 06       	ld.w	r6,r8[0x0]
80005e16:	ed d6 c0 83 	bfextu	r6,r6,0x4,0x3
80005e1a:	30 89       	mov	r9,8
80005e1c:	f2 06 09 46 	lsl	r6,r9,r6
80005e20:	5c 56       	castu.b	r6
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80005e22:	70 09       	ld.w	r9,r8[0x0]
80005e24:	e0 19 fc ff 	andl	r9,0xfcff
80005e28:	a9 b9       	sbr	r9,0x9
80005e2a:	91 09       	st.w	r8[0x0],r9
	uhd_ack_out_ready(0);
80005e2c:	30 29       	mov	r9,2
80005e2e:	fe 68 05 60 	mov	r8,-129696
80005e32:	91 09       	st.w	r8[0x0],r9
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80005e34:	4a c8       	lddpc	r8,80005ee4 <uhd_ctrl_phase_data_out+0x12c>
80005e36:	70 08       	ld.w	r8,r8[0x0]
80005e38:	11 fa       	ld.ub	r10,r8[0x7]
80005e3a:	f1 39 00 08 	ld.ub	r9,r8[8]
80005e3e:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80005e42:	4a aa       	lddpc	r10,80005ee8 <uhd_ctrl_phase_data_out+0x130>
80005e44:	94 0a       	ld.sh	r10,r10[0x0]
80005e46:	f2 0a 19 00 	cp.h	r10,r9
80005e4a:	5f 3b       	srlo	r11
80005e4c:	30 09       	mov	r9,0
80005e4e:	f2 06 18 00 	cp.b	r6,r9
80005e52:	5f 1a       	srne	r10
80005e54:	f7 ea 00 0a 	and	r10,r11,r10
80005e58:	f2 0a 18 00 	cp.b	r10,r9
80005e5c:	c3 30       	breq	80005ec2 <uhd_ctrl_phase_data_out+0x10a>
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
80005e5e:	f1 0a 00 10 	ld.sh	r10,r8[16]
80005e62:	30 09       	mov	r9,0
80005e64:	f2 0a 19 00 	cp.h	r10,r9
80005e68:	c2 d0       	breq	80005ec2 <uhd_ctrl_phase_data_out+0x10a>
80005e6a:	fc 1b e0 00 	movh	r11,0xe000
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
		uhd_ctrl_nb_trans++;
80005e6e:	49 fa       	lddpc	r10,80005ee8 <uhd_ctrl_phase_data_out+0x130>
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
80005e70:	49 de       	lddpc	lr,80005ee4 <uhd_ctrl_phase_data_out+0x12c>

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80005e72:	30 0c       	mov	r12,0
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
80005e74:	12 95       	mov	r5,r9
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
80005e76:	70 39       	ld.w	r9,r8[0xc]
80005e78:	13 37       	ld.ub	r7,r9++
80005e7a:	16 c7       	st.b	r11++,r7
80005e7c:	91 39       	st.w	r8[0xc],r9
		uhd_ctrl_nb_trans++;
80005e7e:	94 08       	ld.sh	r8,r10[0x0]
80005e80:	2f f8       	sub	r8,-1
80005e82:	b4 08       	st.h	r10[0x0],r8
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
80005e84:	7c 08       	ld.w	r8,lr[0x0]
80005e86:	f1 09 00 10 	ld.sh	r9,r8[16]
80005e8a:	20 19       	sub	r9,1
80005e8c:	f1 59 00 10 	st.h	r8[16],r9

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80005e90:	7c 08       	ld.w	r8,lr[0x0]
80005e92:	11 f7       	ld.ub	r7,r8[0x7]
80005e94:	f1 39 00 08 	ld.ub	r9,r8[8]
80005e98:	f3 e7 10 89 	or	r9,r9,r7<<0x8
80005e9c:	94 07       	ld.sh	r7,r10[0x0]
80005e9e:	f2 07 19 00 	cp.h	r7,r9
80005ea2:	5f 37       	srlo	r7
80005ea4:	ec 0b 01 09 	sub	r9,r6,r11
80005ea8:	f8 09 18 00 	cp.b	r9,r12
80005eac:	5f 19       	srne	r9
80005eae:	ef e9 00 09 	and	r9,r7,r9
80005eb2:	f8 09 18 00 	cp.b	r9,r12
80005eb6:	c0 60       	breq	80005ec2 <uhd_ctrl_phase_data_out+0x10a>
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
80005eb8:	f1 09 00 10 	ld.sh	r9,r8[16]
80005ebc:	ea 09 19 00 	cp.h	r9,r5
80005ec0:	cd b1       	brne	80005e76 <uhd_ctrl_phase_data_out+0xbe>
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
		uhd_ctrl_nb_trans++;
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
	}
	uhd_enable_out_ready_interrupt(0);
80005ec2:	30 29       	mov	r9,2
80005ec4:	fe 68 05 f0 	mov	r8,-129552
80005ec8:	91 09       	st.w	r8[0x0],r9
	uhd_ack_fifocon(0);
80005eca:	fe 68 06 20 	mov	r8,-129504
80005ece:	e0 69 40 00 	mov	r9,16384
80005ed2:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
80005ed4:	e2 69 00 00 	mov	r9,131072
80005ed8:	91 09       	st.w	r8[0x0],r9
80005eda:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005ede:	00 00       	add	r0,r0
80005ee0:	00 00       	add	r0,r0
80005ee2:	0c 54       	eor	r4,r6
80005ee4:	00 00       	add	r0,r0
80005ee6:	0c 58       	eor	r8,r6
80005ee8:	00 00       	add	r0,r0
80005eea:	0c 5c       	eor	r12,r6
80005eec:	80 00       	ld.sh	r0,r0[0x0]
80005eee:	5d 78       	*unknown*

80005ef0 <uhd_pipe_get_error>:
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
80005ef0:	a3 6c       	lsl	r12,0x2
80005ef2:	e0 3c f9 80 	sub	r12,129408
80005ef6:	78 08       	ld.w	r8,r12[0x0]
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
80005ef8:	30 09       	mov	r9,0
80005efa:	99 09       	st.w	r12[0x0],r9
80005efc:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005f00:	20 18       	sub	r8,1
80005f02:	58 28       	cp.w	r8,2
80005f04:	e0 88 00 04 	brls	80005f0c <uhd_pipe_get_error+0x1c>
80005f08:	30 6c       	mov	r12,6
80005f0a:	5e fc       	retal	r12
80005f0c:	48 29       	lddpc	r9,80005f14 <uhd_pipe_get_error+0x24>
80005f0e:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
	case AVR32_USBB_UPERR0_DATAPID_MASK:
	case AVR32_USBB_UPERR0_PID_MASK:
	default:
		return UHD_TRANS_PIDFAILURE;
	}
}
80005f12:	5e fc       	retal	r12
80005f14:	80 00       	ld.sh	r0,r0[0x0]
80005f16:	ef 84       	*unknown*

80005f18 <uhd_get_pipe>:
 * \param endp  Endpoint number
 *
 * \return Pipe number
 */
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
80005f18:	eb cd 40 fc 	pushm	r2-r7,lr
80005f1c:	18 98       	mov	r8,r12
80005f1e:	fe 6a 05 00 	mov	r10,-129792
80005f22:	30 09       	mov	r9,0
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80005f24:	fe 64 00 00 	mov	r4,-131072
80005f28:	30 15       	mov	r5,1
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80005f2a:	37 f3       	mov	r3,127
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80005f2c:	e0 62 00 80 	mov	r2,128
 * \param endp  Endpoint number
 *
 * \return Pipe number
 */
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
80005f30:	f9 d9 c0 08 	bfextu	r12,r9,0x0,0x8
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80005f34:	e8 fe 04 1c 	ld.w	lr,r4[1052]
80005f38:	12 96       	mov	r6,r9
80005f3a:	ea 09 09 47 	lsl	r7,r5,r9
80005f3e:	ef ee 00 0e 	and	lr,r7,lr
80005f42:	c2 40       	breq	80005f8a <uhd_get_pipe+0x72>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80005f44:	18 9e       	mov	lr,r12
80005f46:	e2 1e 00 fc 	andl	lr,0xfc,COH
80005f4a:	e0 3e fb dc 	sub	lr,130012
80005f4e:	7c 07       	ld.w	r7,lr[0x0]
80005f50:	ed d9 c0 02 	bfextu	r6,r9,0x0,0x2
80005f54:	a3 76       	lsl	r6,0x3
80005f56:	e6 06 09 46 	lsl	r6,r3,r6
80005f5a:	0c 9e       	mov	lr,r6
80005f5c:	5c 9e       	brev	lr
80005f5e:	fc 0e 12 00 	clz	lr,lr
80005f62:	ef e6 00 06 	and	r6,r7,r6
80005f66:	ec 0e 0a 46 	lsr	r6,r6,lr
80005f6a:	0c 38       	cp.w	r8,r6
80005f6c:	c0 f1       	brne	80005f8a <uhd_get_pipe+0x72>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80005f6e:	74 07       	ld.w	r7,r10[0x0]
80005f70:	74 0e       	ld.w	lr,r10[0x0]
80005f72:	fd de c1 02 	bfextu	lr,lr,0x8,0x2
80005f76:	58 1e       	cp.w	lr,1
80005f78:	e4 0e 17 00 	moveq	lr,r2
80005f7c:	f9 be 01 00 	movne	lr,0
80005f80:	ef d7 c2 04 	bfextu	r7,r7,0x10,0x4
80005f84:	0e 4e       	or	lr,r7
80005f86:	1c 3b       	cp.w	r11,lr
80005f88:	c0 70       	breq	80005f96 <uhd_get_pipe+0x7e>
80005f8a:	2f fc       	sub	r12,-1
80005f8c:	5c 5c       	castu.b	r12
80005f8e:	2f f9       	sub	r9,-1
80005f90:	2f ca       	sub	r10,-4
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80005f92:	58 79       	cp.w	r9,7
80005f94:	cc e1       	brne	80005f30 <uhd_get_pipe+0x18>
			continue;
		}
		break;
	}
	return pipe;
}
80005f96:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80005f9a:	d7 03       	nop

80005f9c <uhd_pipe_finish_job>:
 *
 * \param pipe   Pipe number
 * \param status Status of the transfer
 */
static void uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
80005f9c:	eb cd 40 e0 	pushm	r5-r7,lr
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
80005fa0:	18 9a       	mov	r10,r12
80005fa2:	f8 c9 00 01 	sub	r9,r12,1
80005fa6:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005faa:	49 d8       	lddpc	r8,8000601c <uhd_pipe_finish_job+0x80>
80005fac:	f0 09 00 29 	add	r9,r8,r9<<0x2
	if (ptr_job->busy == false) {
80005fb0:	72 08       	ld.w	r8,r9[0x0]
80005fb2:	58 08       	cp.w	r8,0
80005fb4:	c3 24       	brge	80006018 <uhd_pipe_finish_job+0x7c>
		return; // No job running
	}
	ptr_job->busy = false;
80005fb6:	30 0e       	mov	lr,0
80005fb8:	f1 de d3 e1 	bfins	r8,lr,0x1f,0x1
80005fbc:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_end) {
80005fbe:	72 48       	ld.w	r8,r9[0x10]
80005fc0:	58 08       	cp.w	r8,0
80005fc2:	c2 b0       	breq	80006018 <uhd_pipe_finish_job+0x7c>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80005fc4:	a3 6a       	lsl	r10,0x2
80005fc6:	e0 3a fb 00 	sub	r10,129792
80005fca:	74 0e       	ld.w	lr,r10[0x0]
80005fcc:	74 07       	ld.w	r7,r10[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80005fce:	ef d7 c1 02 	bfextu	r7,r7,0x8,0x2
80005fd2:	e0 6a 00 80 	mov	r10,128
80005fd6:	58 17       	cp.w	r7,1
80005fd8:	f4 07 17 00 	moveq	r7,r10
80005fdc:	f9 b7 01 00 	movne	r7,0
80005fe0:	18 9a       	mov	r10,r12
80005fe2:	e2 1a 03 fc 	andl	r10,0x3fc,COH
80005fe6:	e0 3a fb dc 	sub	r10,130012
80005fea:	74 05       	ld.w	r5,r10[0x0]
80005fec:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
80005ff0:	a3 7c       	lsl	r12,0x3
80005ff2:	37 fa       	mov	r10,127
80005ff4:	f4 0c 09 4a 	lsl	r10,r10,r12
80005ff8:	14 96       	mov	r6,r10
80005ffa:	5c 96       	brev	r6
80005ffc:	ec 06 12 00 	clz	r6,r6
80006000:	fd de c2 04 	bfextu	lr,lr,0x10,0x4
80006004:	f5 e5 00 0c 	and	r12,r10,r5
80006008:	f8 06 0a 4c 	lsr	r12,r12,r6
8000600c:	72 39       	ld.w	r9,r9[0xc]
8000600e:	16 9a       	mov	r10,r11
80006010:	ef ee 10 0b 	or	r11,r7,lr
80006014:	5c 5c       	castu.b	r12
80006016:	5d 18       	icall	r8
80006018:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000601c:	00 00       	add	r0,r0
8000601e:	0a 98       	mov	r8,r5

80006020 <uhd_ep_abort_pipe>:
 *
 * \param pipe   Pipe number
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
80006020:	d4 01       	pushm	lr
80006022:	18 99       	mov	r9,r12
	// Stop transfer
	uhd_reset_pipe(pipe);
80006024:	fe 68 00 00 	mov	r8,-131072
80006028:	f0 fe 04 1c 	ld.w	lr,r8[1052]
8000602c:	e0 7a 00 00 	mov	r10,65536
80006030:	f4 0c 09 4a 	lsl	r10,r10,r12
80006034:	f5 ee 10 0e 	or	lr,r10,lr
80006038:	f1 4e 04 1c 	st.w	r8[1052],lr
8000603c:	f0 fe 04 1c 	ld.w	lr,r8[1052]
80006040:	5c da       	com	r10
80006042:	1c 6a       	and	r10,lr
80006044:	f1 4a 04 1c 	st.w	r8[1052],r10

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80006048:	f8 08 15 02 	lsl	r8,r12,0x2
8000604c:	fe 6e 05 00 	mov	lr,-129792
80006050:	f0 0e 00 0a 	add	r10,r8,lr
80006054:	74 0e       	ld.w	lr,r10[0x0]
80006056:	ab ae       	sbr	lr,0xa
80006058:	95 0e       	st.w	r10[0x0],lr
	uhd_enable_stall_interrupt(pipe);
8000605a:	fe 6e 05 f0 	mov	lr,-129552
8000605e:	f0 0e 00 0a 	add	r10,r8,lr
80006062:	34 0e       	mov	lr,64
80006064:	95 0e       	st.w	r10[0x0],lr
	uhd_enable_pipe_error_interrupt(pipe);
80006066:	30 8e       	mov	lr,8
80006068:	95 0e       	st.w	r10[0x0],lr

	uhd_disable_out_ready_interrupt(pipe);
8000606a:	e0 38 f9 e0 	sub	r8,129504
8000606e:	30 2a       	mov	r10,2
80006070:	91 0a       	st.w	r8[0x0],r10
	uhd_pipe_dma_set_control(pipe, 0);
80006072:	a5 69       	lsl	r9,0x4
80006074:	e0 39 f9 00 	sub	r9,129280
80006078:	30 08       	mov	r8,0
8000607a:	93 28       	st.w	r9[0x8],r8
	uhd_pipe_finish_job(pipe, status);
8000607c:	f0 1f 00 02 	mcall	80006084 <uhd_ep_abort_pipe+0x64>
}
80006080:	d8 02       	popm	pc
80006082:	00 00       	add	r0,r0
80006084:	80 00       	ld.sh	r0,r0[0x0]
80006086:	5f 9c       	srgt	r12

80006088 <uhd_pipe_trans_complet>:
 * \brief Computes and starts the next transfer on a pipe
 *
 * \param pipe  Pipe number
 */
static void uhd_pipe_trans_complet(uint8_t pipe)
{
80006088:	eb cd 40 f8 	pushm	r3-r7,lr
	iram_size_t max_trans;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
8000608c:	18 9a       	mov	r10,r12
8000608e:	f8 c8 00 01 	sub	r8,r12,1
80006092:	f0 08 00 28 	add	r8,r8,r8<<0x2
80006096:	4e a9       	lddpc	r9,8000623c <uhd_pipe_trans_complet+0x1b4>
80006098:	f2 08 00 28 	add	r8,r9,r8<<0x2

	if (!ptr_job->busy) {
8000609c:	70 09       	ld.w	r9,r8[0x0]
8000609e:	58 09       	cp.w	r9,0
800060a0:	e0 84 00 cc 	brge	80006238 <uhd_pipe_trans_complet+0x1b0>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
800060a4:	70 3e       	ld.w	lr,r8[0xc]
800060a6:	70 27       	ld.w	r7,r8[0x8]
800060a8:	0e 3e       	cp.w	lr,r7
800060aa:	e0 80 00 9d 	breq	800061e4 <uhd_pipe_trans_complet+0x15c>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
		max_trans = UHD_PIPE_MAX_TRANS;
		if (uhd_is_pipe_in(pipe)) {
800060ae:	f8 06 15 02 	lsl	r6,r12,0x2
800060b2:	fe 6b 05 00 	mov	r11,-129792
800060b6:	ec 0b 00 09 	add	r9,r6,r11
800060ba:	72 0b       	ld.w	r11,r9[0x0]
800060bc:	f7 db c1 02 	bfextu	r11,r11,0x8,0x2
800060c0:	58 1b       	cp.w	r11,1
800060c2:	c1 21       	brne	800060e6 <uhd_pipe_trans_complet+0x5e>
			// 256 is the maximum of IN requests via UPINRQ
			if ((256L*uhd_get_pipe_size(pipe))<UHD_PIPE_MAX_TRANS) {
800060c4:	72 0b       	ld.w	r11,r9[0x0]
800060c6:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
800060ca:	e0 65 08 00 	mov	r5,2048
800060ce:	ea 0b 09 4b 	lsl	r11,r5,r11
800060d2:	e0 4b ff ff 	cp.w	r11,65535
800060d6:	e0 89 00 08 	brgt	800060e6 <uhd_pipe_trans_complet+0x5e>
				 max_trans = 256L * uhd_get_pipe_size(pipe);
800060da:	72 0b       	ld.w	r11,r9[0x0]
800060dc:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
800060e0:	ea 0b 09 4b 	lsl	r11,r5,r11
800060e4:	c0 38       	rjmp	800060ea <uhd_pipe_trans_complet+0x62>
800060e6:	e0 7b 00 00 	mov	r11,65536
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
800060ea:	ee 0e 01 0e 	sub	lr,r7,lr
800060ee:	1c 3b       	cp.w	r11,lr
800060f0:	fc 0b 17 b0 	movhi	r11,lr
			// The USB hardware supports a maximum
			// transfer size of UHD_PIPE_MAX_TRANS Bytes
			next_trans = max_trans;
		}

		if (next_trans == UHD_PIPE_MAX_TRANS) {
800060f4:	e0 5b 00 00 	cp.w	r11,65536
800060f8:	c0 31       	brne	800060fe <uhd_pipe_trans_complet+0x76>
800060fa:	30 07       	mov	r7,0
800060fc:	c0 38       	rjmp	80006102 <uhd_pipe_trans_complet+0x7a>
			// Set 0 to transfer the maximum
			uhd_dma_ctrl = (0 <<
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			uhd_dma_ctrl = (next_trans <<
800060fe:	f6 07 15 10 	lsl	r7,r11,0x10
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}

		if (uhd_is_pipe_out(pipe)) {
80006102:	72 0e       	ld.w	lr,r9[0x0]
80006104:	fd de c1 02 	bfextu	lr,lr,0x8,0x2
80006108:	58 2e       	cp.w	lr,2
8000610a:	c1 21       	brne	8000612e <uhd_pipe_trans_complet+0xa6>
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
8000610c:	72 0e       	ld.w	lr,r9[0x0]
8000610e:	fd de c0 83 	bfextu	lr,lr,0x4,0x3
80006112:	30 85       	mov	r5,8
80006114:	ea 0e 09 4e 	lsl	lr,r5,lr
80006118:	20 1e       	sub	lr,1
8000611a:	f7 ee 00 0e 	and	lr,r11,lr
8000611e:	c1 70       	breq	8000614c <uhd_pipe_trans_complet+0xc4>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
80006120:	0a 47       	or	r7,r5
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80006122:	70 0e       	ld.w	lr,r8[0x0]
80006124:	30 05       	mov	r5,0
80006126:	fd d5 d3 c1 	bfins	lr,r5,0x1e,0x1
8000612a:	91 0e       	st.w	r8[0x0],lr
8000612c:	c1 08       	rjmp	8000614c <uhd_pipe_trans_complet+0xc4>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
8000612e:	72 0e       	ld.w	lr,r9[0x0]
80006130:	fd de c1 82 	bfextu	lr,lr,0xc,0x2
80006134:	58 1e       	cp.w	lr,1
80006136:	c0 91       	brne	80006148 <uhd_pipe_trans_complet+0xc0>
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
80006138:	72 0e       	ld.w	lr,r9[0x0]
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
8000613a:	fd de c0 83 	bfextu	lr,lr,0x4,0x3
8000613e:	30 85       	mov	r5,8
80006140:	ea 0e 09 4e 	lsl	lr,r5,lr
80006144:	16 3e       	cp.w	lr,r11
80006146:	c0 33       	brcs	8000614c <uhd_pipe_trans_complet+0xc4>
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
				// Enable short packet reception
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOT_IRQ_EN_MASK
80006148:	e8 17 00 14 	orl	r7,0x14
						| AVR32_USBB_UHDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
8000614c:	f4 0e 15 04 	lsl	lr,r10,0x4
80006150:	e0 3e f9 00 	sub	lr,129280
80006154:	70 14       	ld.w	r4,r8[0x4]
80006156:	70 35       	ld.w	r5,r8[0xc]
80006158:	e8 05 00 05 	add	r5,r4,r5
8000615c:	9d 15       	st.w	lr[0x4],r5

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000615e:	e1 b4 00 00 	mfsr	r4,0x0
	cpu_irq_disable();
80006162:	d3 03       	ssrf	0x10
				AVR32_USBB_UHDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if( !(uhd_pipe_dma_get_status(pipe)
80006164:	7c 35       	ld.w	r5,lr[0xc]
80006166:	e2 15 00 10 	andl	r5,0x10,COH
8000616a:	c3 71       	brne	800061d8 <uhd_pipe_trans_complet+0x150>
				& AVR32_USBB_UHDMA1_STATUS_EOT_STA_MASK)) {
			if (uhd_is_pipe_in(pipe)) {
8000616c:	72 0a       	ld.w	r10,r9[0x0]
8000616e:	f5 da c1 02 	bfextu	r10,r10,0x8,0x2
80006172:	58 1a       	cp.w	r10,1
80006174:	c1 d1       	brne	800061ae <uhd_pipe_trans_complet+0x126>
				uhd_in_request_number(pipe,
80006176:	fe 6c 06 50 	mov	r12,-129456
8000617a:	ec 0c 00 0a 	add	r10,r6,r12
8000617e:	74 05       	ld.w	r5,r10[0x0]
80006180:	72 0c       	ld.w	r12,r9[0x0]
80006182:	72 09       	ld.w	r9,r9[0x0]
80006184:	f9 dc c0 83 	bfextu	r12,r12,0x4,0x3
80006188:	30 83       	mov	r3,8
8000618a:	e6 0c 09 4c 	lsl	r12,r3,r12
8000618e:	20 1c       	sub	r12,1
80006190:	16 0c       	add	r12,r11
80006192:	f3 d9 c0 83 	bfextu	r9,r9,0x4,0x3
80006196:	2f d9       	sub	r9,-3
80006198:	f8 09 0a 4c 	lsr	r12,r12,r9
8000619c:	20 1c       	sub	r12,1
8000619e:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8
800061a2:	0a 99       	mov	r9,r5
800061a4:	e0 19 ff 00 	andl	r9,0xff00
800061a8:	f9 e9 10 09 	or	r9,r12,r9
800061ac:	95 09       	st.w	r10[0x0],r9
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
800061ae:	e0 36 f9 e0 	sub	r6,129504
800061b2:	e0 69 10 00 	mov	r9,4096
800061b6:	8d 09       	st.w	r6[0x0],r9
			uhd_unfreeze_pipe(pipe);
800061b8:	e2 69 00 00 	mov	r9,131072
800061bc:	8d 09       	st.w	r6[0x0],r9
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800061be:	e8 17 00 21 	orl	r7,0x21
				uhd_in_request_number(pipe,
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
			uhd_unfreeze_pipe(pipe);
			uhd_pipe_dma_set_control(pipe, uhd_dma_ctrl);
800061c2:	9d 27       	st.w	lr[0x8],r7
			ptr_job->nb_trans += next_trans;
800061c4:	70 39       	ld.w	r9,r8[0xc]
800061c6:	f2 0b 00 0b 	add	r11,r9,r11
800061ca:	91 3b       	st.w	r8[0xc],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800061cc:	e6 14 00 01 	andh	r4,0x1,COH
800061d0:	c0 21       	brne	800061d4 <uhd_pipe_trans_complet+0x14c>
      cpu_irq_enable();
800061d2:	d5 03       	csrf	0x10
			cpu_irq_restore(flags);
			return;
800061d4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800061d8:	e6 14 00 01 	andh	r4,0x1,COH
800061dc:	c0 21       	brne	800061e0 <uhd_pipe_trans_complet+0x158>
      cpu_irq_enable();
800061de:	d5 03       	csrf	0x10
		}
		cpu_irq_restore(flags);
		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
800061e0:	70 39       	ld.w	r9,r8[0xc]
800061e2:	91 29       	st.w	r8[0x8],r9
	}
	if (uhd_is_pipe_out(pipe)) {
800061e4:	a3 6a       	lsl	r10,0x2
800061e6:	fe 6b 05 00 	mov	r11,-129792
800061ea:	f4 0b 00 09 	add	r9,r10,r11
800061ee:	72 09       	ld.w	r9,r9[0x0]
800061f0:	f3 d9 c1 02 	bfextu	r9,r9,0x8,0x2
800061f4:	58 29       	cp.w	r9,2
800061f6:	c1 e1       	brne	80006232 <uhd_pipe_trans_complet+0x1aa>
		if (ptr_job->b_shortpacket) {
800061f8:	70 08       	ld.w	r8,r8[0x0]
800061fa:	e6 18 40 00 	andh	r8,0x4000,COH
800061fe:	c1 a0       	breq	80006232 <uhd_pipe_trans_complet+0x1aa>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			uhd_ack_out_ready(pipe);
80006200:	fe 69 05 60 	mov	r9,-129696
80006204:	f4 09 00 08 	add	r8,r10,r9
80006208:	30 29       	mov	r9,2
8000620a:	91 09       	st.w	r8[0x0],r9
			if (Is_uhd_write_enabled(pipe)) {
8000620c:	fe 6c 05 30 	mov	r12,-129744
80006210:	f4 0c 00 08 	add	r8,r10,r12
80006214:	70 08       	ld.w	r8,r8[0x0]
80006216:	e6 18 00 01 	andh	r8,0x1,COH
8000621a:	c0 60       	breq	80006226 <uhd_pipe_trans_complet+0x19e>
				// Force interrupt in case of pipe already free
				uhd_raise_out_ready(pipe);
8000621c:	fe 6b 05 90 	mov	r11,-129648
80006220:	f4 0b 00 08 	add	r8,r10,r11
80006224:	91 09       	st.w	r8[0x0],r9
			}
			uhd_enable_out_ready_interrupt(pipe);
80006226:	e0 3a fa 10 	sub	r10,129552
8000622a:	30 28       	mov	r8,2
8000622c:	95 08       	st.w	r10[0x0],r8
			return;
8000622e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
		}
	}
	// Call callback to signal end of transfer
	uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
80006232:	30 0b       	mov	r11,0
80006234:	f0 1f 00 03 	mcall	80006240 <uhd_pipe_trans_complet+0x1b8>
80006238:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000623c:	00 00       	add	r0,r0
8000623e:	0a 98       	mov	r8,r5
80006240:	80 00       	ld.sh	r0,r0[0x0]
80006242:	5f 9c       	srgt	r12

80006244 <uhd_ep_run>:
		bool b_shortpacket,
		uint8_t *buf,
		iram_size_t buf_size,
		uint16_t timeout,
		uhd_callback_trans_t callback)
{
80006244:	eb cd 40 f8 	pushm	r3-r7,lr
80006248:	fa c4 ff e8 	sub	r4,sp,-24
8000624c:	14 93       	mov	r3,r10
8000624e:	12 96       	mov	r6,r9
80006250:	10 95       	mov	r5,r8
80006252:	68 07       	ld.w	r7,r4[0x0]
80006254:	68 14       	ld.w	r4,r4[0x4]
	irqflags_t flags;
	uint8_t pipe;
	uhd_pipe_job_t *ptr_job;

	pipe = uhd_get_pipe(add,endp);
80006256:	f0 1f 00 1a 	mcall	800062bc <uhd_ep_run+0x78>
	if (pipe == AVR32_USBB_EPT_NUM) {
8000625a:	30 78       	mov	r8,7
8000625c:	f0 0c 18 00 	cp.b	r12,r8
80006260:	c0 31       	brne	80006266 <uhd_ep_run+0x22>
80006262:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		return false; // pipe not found
	}

	// Get job about pipe
	ptr_job = &uhd_pipe_job[pipe-1];
80006266:	f8 c8 00 01 	sub	r8,r12,1
8000626a:	f0 08 00 28 	add	r8,r8,r8<<0x2
8000626e:	49 59       	lddpc	r9,800062c0 <uhd_ep_run+0x7c>
80006270:	f2 08 00 28 	add	r8,r9,r8<<0x2

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006274:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80006278:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
8000627a:	70 09       	ld.w	r9,r8[0x0]
8000627c:	58 09       	cp.w	r9,0
8000627e:	c0 74       	brge	8000628c <uhd_ep_run+0x48>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006280:	e6 1a 00 01 	andh	r10,0x1,COH
80006284:	c0 21       	brne	80006288 <uhd_ep_run+0x44>
      cpu_irq_enable();
80006286:	d5 03       	csrf	0x10
   }

	barrier();
80006288:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
8000628c:	70 09       	ld.w	r9,r8[0x0]
8000628e:	30 1b       	mov	r11,1
80006290:	f3 db d3 e1 	bfins	r9,r11,0x1f,0x1
80006294:	91 09       	st.w	r8[0x0],r9

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
80006296:	91 16       	st.w	r8[0x4],r6
	ptr_job->buf_size = buf_size;
80006298:	91 25       	st.w	r8[0x8],r5
	ptr_job->nb_trans = 0;
8000629a:	30 09       	mov	r9,0
8000629c:	91 39       	st.w	r8[0xc],r9
	ptr_job->timeout = timeout;
8000629e:	b0 17       	st.h	r8[0x2],r7
	ptr_job->b_shortpacket = b_shortpacket;
800062a0:	70 09       	ld.w	r9,r8[0x0]
800062a2:	f3 d3 d3 c1 	bfins	r9,r3,0x1e,0x1
800062a6:	91 09       	st.w	r8[0x0],r9
	ptr_job->call_end = callback;
800062a8:	91 44       	st.w	r8[0x10],r4
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800062aa:	e6 1a 00 01 	andh	r10,0x1,COH
800062ae:	c0 21       	brne	800062b2 <uhd_ep_run+0x6e>
      cpu_irq_enable();
800062b0:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// Request first transfer
	uhd_pipe_trans_complet(pipe);
800062b2:	f0 1f 00 05 	mcall	800062c4 <uhd_ep_run+0x80>
800062b6:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
800062ba:	00 00       	add	r0,r0
800062bc:	80 00       	ld.sh	r0,r0[0x0]
800062be:	5f 18       	srne	r8
800062c0:	00 00       	add	r0,r0
800062c2:	0a 98       	mov	r8,r5
800062c4:	80 00       	ld.sh	r0,r0[0x0]
800062c6:	60 88       	ld.w	r8,r0[0x20]

800062c8 <uhd_sleep_mode>:
/*! \brief Manages the sleep mode following the USBB state
 *
 * \param new_state  New USBB state
 */
static void uhd_sleep_mode(enum uhd_usbb_state_enum new_state)
{
800062c8:	20 6d       	sub	sp,24
		SLEEPMGR_STOP,   // UHD_STATE_NO_VBUS
#endif
		SLEEPMGR_IDLE,   // UHD_STATE_DISCONNECT
		SLEEPMGR_STATIC, // UHD_STATE_SUSPEND
		SLEEPMGR_IDLE,   // UHD_STATE_IDLE
	};
800062ca:	4a a9       	lddpc	r9,80006370 <uhd_sleep_mode+0xa8>
800062cc:	f2 ea 00 00 	ld.d	r10,r9[0]
800062d0:	fa eb 00 00 	st.d	sp[0],r10
800062d4:	f2 ea 00 08 	ld.d	r10,r9[8]
800062d8:	fa eb 00 08 	st.d	sp[8],r10
800062dc:	f2 ea 00 10 	ld.d	r10,r9[16]
800062e0:	fa eb 00 10 	st.d	sp[16],r10
	static enum uhd_usbb_state_enum uhd_state = UHD_STATE_OFF;

	if (uhd_state == new_state) {
800062e4:	4a 48       	lddpc	r8,80006374 <uhd_sleep_mode+0xac>
800062e6:	70 08       	ld.w	r8,r8[0x0]
800062e8:	18 38       	cp.w	r8,r12
800062ea:	c4 10       	breq	8000636c <uhd_sleep_mode+0xa4>
		return; // No change
	}
	if (new_state != UHD_STATE_OFF) {
800062ec:	58 0c       	cp.w	r12,0
800062ee:	c1 d0       	breq	80006328 <uhd_sleep_mode+0x60>
		// Lock new limit
		sleepmgr_lock_mode( sleep_mode[new_state] );
800062f0:	fa c9 ff e8 	sub	r9,sp,-24
800062f4:	f2 0c 00 28 	add	r8,r9,r12<<0x2
800062f8:	f0 f8 ff e8 	ld.w	r8,r8[-24]
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
800062fc:	49 f9       	lddpc	r9,80006378 <uhd_sleep_mode+0xb0>
800062fe:	f2 08 07 0a 	ld.ub	r10,r9[r8]
80006302:	3f f9       	mov	r9,-1
80006304:	f2 0a 18 00 	cp.b	r10,r9
80006308:	c0 21       	brne	8000630c <uhd_sleep_mode+0x44>
8000630a:	c0 08       	rjmp	8000630a <uhd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000630c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80006310:	d3 03       	ssrf	0x10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80006312:	49 a9       	lddpc	r9,80006378 <uhd_sleep_mode+0xb0>
80006314:	f2 08 07 0b 	ld.ub	r11,r9[r8]
80006318:	2f fb       	sub	r11,-1
8000631a:	f2 08 0b 0b 	st.b	r9[r8],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000631e:	14 98       	mov	r8,r10
80006320:	e6 18 00 01 	andh	r8,0x1,COH
80006324:	c0 21       	brne	80006328 <uhd_sleep_mode+0x60>
      cpu_irq_enable();
80006326:	d5 03       	csrf	0x10
	}
	if (uhd_state != UHD_STATE_OFF) {
80006328:	49 38       	lddpc	r8,80006374 <uhd_sleep_mode+0xac>
8000632a:	70 08       	ld.w	r8,r8[0x0]
8000632c:	58 08       	cp.w	r8,0
8000632e:	c1 d0       	breq	80006368 <uhd_sleep_mode+0xa0>
		// Unlock old limit
		sleepmgr_unlock_mode( sleep_mode[uhd_state] );
80006330:	fa c9 ff e8 	sub	r9,sp,-24
80006334:	f2 08 00 28 	add	r8,r9,r8<<0x2
80006338:	f0 f8 ff e8 	ld.w	r8,r8[-24]
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
8000633c:	48 f9       	lddpc	r9,80006378 <uhd_sleep_mode+0xb0>
8000633e:	f2 08 07 0a 	ld.ub	r10,r9[r8]
80006342:	30 09       	mov	r9,0
80006344:	f2 0a 18 00 	cp.b	r10,r9
80006348:	c0 21       	brne	8000634c <uhd_sleep_mode+0x84>
8000634a:	c0 08       	rjmp	8000634a <uhd_sleep_mode+0x82>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000634c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80006350:	d3 03       	ssrf	0x10
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80006352:	48 a9       	lddpc	r9,80006378 <uhd_sleep_mode+0xb0>
80006354:	f2 08 07 0b 	ld.ub	r11,r9[r8]
80006358:	20 1b       	sub	r11,1
8000635a:	f2 08 0b 0b 	st.b	r9[r8],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000635e:	14 98       	mov	r8,r10
80006360:	e6 18 00 01 	andh	r8,0x1,COH
80006364:	c0 21       	brne	80006368 <uhd_sleep_mode+0xa0>
      cpu_irq_enable();
80006366:	d5 03       	csrf	0x10
	}
	uhd_state = new_state;
80006368:	48 38       	lddpc	r8,80006374 <uhd_sleep_mode+0xac>
8000636a:	91 0c       	st.w	r8[0x0],r12
}
8000636c:	2f ad       	sub	sp,-24
8000636e:	5e fc       	retal	r12
80006370:	80 00       	ld.sh	r0,r0[0x0]
80006372:	ef 60 00 00 	st.b	r7[0],r0
80006376:	0b 14       	ld.sh	r4,r5++
80006378:	00 00       	add	r0,r0
8000637a:	0c 68       	and	r8,r6

8000637c <uhd_resume>:
{
	return !Is_uhd_sof_enabled();
}

void uhd_resume(void)
{
8000637c:	d4 01       	pushm	lr
	if (Is_uhd_sof_enabled()) {
8000637e:	fe 68 04 00 	mov	r8,-130048
80006382:	70 08       	ld.w	r8,r8[0x0]
80006384:	e2 18 01 00 	andl	r8,0x100,COH
80006388:	c0 e0       	breq	800063a4 <uhd_resume+0x28>
		// Currently in IDLE mode (!=Suspend)
		if (uhd_suspend_start) {
8000638a:	49 38       	lddpc	r8,800063d4 <uhd_resume+0x58>
8000638c:	11 89       	ld.ub	r9,r8[0x0]
8000638e:	30 08       	mov	r8,0
80006390:	f0 09 18 00 	cp.b	r9,r8
80006394:	c1 e0       	breq	800063d0 <uhd_resume+0x54>
			// Suspend mode on going
			// then stop it and start resume event
			uhd_suspend_start = 0;
80006396:	10 99       	mov	r9,r8
80006398:	48 f8       	lddpc	r8,800063d4 <uhd_resume+0x58>
8000639a:	b0 89       	st.b	r8[0x0],r9
			uhd_resume_start = 1;
8000639c:	30 19       	mov	r9,1
8000639e:	48 f8       	lddpc	r8,800063d8 <uhd_resume+0x5c>
800063a0:	b0 89       	st.b	r8[0x0],r9
800063a2:	d8 02       	popm	pc
		}
		return;
	}
	// Check USB clock ready after a potential sleep mode < IDLE
	while (!Is_otg_clock_usable());
800063a4:	fe 69 08 04 	mov	r9,-129020
800063a8:	72 08       	ld.w	r8,r9[0x0]
800063aa:	e2 18 40 00 	andl	r8,0x4000,COH
800063ae:	cf d0       	breq	800063a8 <uhd_resume+0x2c>
	otg_unfreeze_clock();
800063b0:	fe 68 08 00 	mov	r8,-129024
800063b4:	70 09       	ld.w	r9,r8[0x0]
800063b6:	af c9       	cbr	r9,0xe
800063b8:	91 09       	st.w	r8[0x0],r9
	uhd_enable_sof();
800063ba:	fe 68 04 00 	mov	r8,-130048
800063be:	70 09       	ld.w	r9,r8[0x0]
800063c0:	a9 a9       	sbr	r9,0x8
800063c2:	91 09       	st.w	r8[0x0],r9
	uhd_send_resume();
800063c4:	70 09       	ld.w	r9,r8[0x0]
800063c6:	ab a9       	sbr	r9,0xa
800063c8:	91 09       	st.w	r8[0x0],r9
	uhd_sleep_mode(UHD_STATE_IDLE);
800063ca:	30 5c       	mov	r12,5
800063cc:	f0 1f 00 04 	mcall	800063dc <uhd_resume+0x60>
800063d0:	d8 02       	popm	pc
800063d2:	00 00       	add	r0,r0
800063d4:	00 00       	add	r0,r0
800063d6:	0b 10       	ld.sh	r0,r5++
800063d8:	00 00       	add	r0,r0
800063da:	0b 13       	ld.sh	r3,r5++
800063dc:	80 00       	ld.sh	r0,r0[0x0]
800063de:	62 c8       	ld.w	r8,r1[0x30]

800063e0 <uhd_ctrl_request_end>:
 * \internal
 * \brief Call the callback linked to control request
 * and start the next request from the queue.
*/
static void uhd_ctrl_request_end(uhd_trans_status_t status)
{
800063e0:	eb cd 40 e0 	pushm	r5-r7,lr
800063e4:	18 95       	mov	r5,r12
	irqflags_t flags;
	uhd_callback_setup_end_t callback_end;
	struct uhd_ctrl_request_t *request_to_free;
	bool b_new_request;

	uhd_ctrl_request_timeout = 0;
800063e6:	30 09       	mov	r9,0
800063e8:	49 78       	lddpc	r8,80006444 <uhd_ctrl_request_end+0x64>
800063ea:	b0 09       	st.h	r8[0x0],r9

	// Remove request from the control request list
	callback_end = uhd_ctrl_request_first->callback_end;
800063ec:	49 78       	lddpc	r8,80006448 <uhd_ctrl_request_end+0x68>
800063ee:	70 0c       	ld.w	r12,r8[0x0]
800063f0:	78 66       	ld.w	r6,r12[0x18]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800063f2:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800063f6:	d3 03       	ssrf	0x10
	request_to_free = uhd_ctrl_request_first;
	flags = cpu_irq_save();
	uhd_ctrl_request_first = uhd_ctrl_request_first->next_request;
800063f8:	70 0a       	ld.w	r10,r8[0x0]
800063fa:	74 77       	ld.w	r7,r10[0x1c]
800063fc:	91 07       	st.w	r8[0x0],r7
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800063fe:	12 98       	mov	r8,r9
80006400:	e6 18 00 01 	andh	r8,0x1,COH
80006404:	c0 21       	brne	80006408 <uhd_ctrl_request_end+0x28>
      cpu_irq_enable();
80006406:	d5 03       	csrf	0x10
	b_new_request = (uhd_ctrl_request_first != NULL);
	cpu_irq_restore(flags);
	free(request_to_free);
80006408:	f0 1f 00 11 	mcall	8000644c <uhd_ctrl_request_end+0x6c>

	// Call callback
	if (callback_end != NULL) {
8000640c:	58 06       	cp.w	r6,0
8000640e:	c0 a0       	breq	80006422 <uhd_ctrl_request_end+0x42>
		callback_end(uhd_get_configured_address(0), status, uhd_ctrl_nb_trans);
80006410:	fe 68 04 24 	mov	r8,-130012
80006414:	70 0c       	ld.w	r12,r8[0x0]
80006416:	48 f8       	lddpc	r8,80006450 <uhd_ctrl_request_end+0x70>
80006418:	90 8a       	ld.uh	r10,r8[0x0]
8000641a:	0a 9b       	mov	r11,r5
8000641c:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80006420:	5d 16       	icall	r6
	}

	// If a setup request is pending and no started by previous callback
	if (b_new_request) {
80006422:	58 07       	cp.w	r7,0
80006424:	c0 30       	breq	8000642a <uhd_ctrl_request_end+0x4a>
		uhd_ctrl_phase_setup();
80006426:	f0 1f 00 0c 	mcall	80006454 <uhd_ctrl_request_end+0x74>
	}
	if (uhd_b_suspend_requested) {
8000642a:	48 c8       	lddpc	r8,80006458 <uhd_ctrl_request_end+0x78>
8000642c:	11 89       	ld.ub	r9,r8[0x0]
8000642e:	30 08       	mov	r8,0
80006430:	f0 09 18 00 	cp.b	r9,r8
80006434:	c0 60       	breq	80006440 <uhd_ctrl_request_end+0x60>
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
80006436:	10 99       	mov	r9,r8
80006438:	48 88       	lddpc	r8,80006458 <uhd_ctrl_request_end+0x78>
8000643a:	b0 89       	st.b	r8[0x0],r9
		uhd_suspend();
8000643c:	f0 1f 00 08 	mcall	8000645c <uhd_ctrl_request_end+0x7c>
80006440:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006444:	00 00       	add	r0,r0
80006446:	0c 64       	and	r4,r6
80006448:	00 00       	add	r0,r0
8000644a:	0c 58       	eor	r8,r6
8000644c:	80 00       	ld.sh	r0,r0[0x0]
8000644e:	91 9c       	st.w	r8[0x24],r12
80006450:	00 00       	add	r0,r0
80006452:	0c 5c       	eor	r12,r6
80006454:	80 00       	ld.sh	r0,r0[0x0]
80006456:	64 60       	ld.w	r0,r2[0x18]
80006458:	00 00       	add	r0,r0
8000645a:	0b 18       	ld.sh	r8,r5++
8000645c:	80 00       	ld.sh	r0,r0[0x0]
8000645e:	5d 10       	icall	r0

80006460 <uhd_ctrl_phase_setup>:
/**
 * \internal
 * \brief Sends a USB setup packet to start a control request sequence
 */
static void uhd_ctrl_phase_setup(void)
{
80006460:	eb cd 40 80 	pushm	r7,lr
80006464:	20 2d       	sub	sp,8
		usb_setup_req_t req;
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
80006466:	30 07       	mov	r7,0
80006468:	4a b8       	lddpc	r8,80006514 <uhd_ctrl_phase_setup+0xb4>
8000646a:	91 07       	st.w	r8[0x0],r7
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
8000646c:	4a b8       	lddpc	r8,80006518 <uhd_ctrl_phase_setup+0xb8>
8000646e:	70 0b       	ld.w	r11,r8[0x0]
80006470:	30 8a       	mov	r10,8
80006472:	2f fb       	sub	r11,-1
80006474:	1a 9c       	mov	r12,sp
80006476:	f0 1f 00 2a 	mcall	8000651c <uhd_ctrl_phase_setup+0xbc>
8000647a:	40 09       	lddsp	r9,sp[0x0]
8000647c:	40 18       	lddsp	r8,sp[0x4]

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
8000647e:	f5 d9 b0 10 	bfexts	r10,r9,0x0,0x10
80006482:	5c ca       	swap.bh	r10
80006484:	5c 8a       	casts.h	r10
80006486:	f3 da d0 10 	bfins	r9,r10,0x0,0x10
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
8000648a:	f0 0a 14 10 	asr	r10,r8,0x10
8000648e:	5c ca       	swap.bh	r10
80006490:	5c 8a       	casts.h	r10
80006492:	f1 da d2 10 	bfins	r8,r10,0x10,0x10
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80006496:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
8000649a:	5c ca       	swap.bh	r10
8000649c:	5c 8a       	casts.h	r10
	uhd_ctrl_nb_trans = 0;
8000649e:	4a 1b       	lddpc	r11,80006520 <uhd_ctrl_phase_setup+0xc0>
800064a0:	b6 07       	st.h	r11[0x0],r7
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
800064a2:	fe 6b 00 00 	mov	r11,-131072
800064a6:	f6 fb 04 1c 	ld.w	r11,r11[1052]
800064aa:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
800064ae:	c0 b0       	breq	800064c4 <uhd_ctrl_phase_setup+0x64>
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
800064b0:	fe 6b 04 24 	mov	r11,-130012
800064b4:	76 0b       	ld.w	r11,r11[0x0]
800064b6:	49 9c       	lddpc	r12,80006518 <uhd_ctrl_phase_setup+0xb8>
800064b8:	78 0c       	ld.w	r12,r12[0x0]
800064ba:	19 8c       	ld.ub	r12,r12[0x0]
800064bc:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7
800064c0:	16 3c       	cp.w	r12,r11
800064c2:	c0 50       	breq	800064cc <uhd_ctrl_phase_setup+0x6c>
		uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
800064c4:	30 1c       	mov	r12,1
800064c6:	f0 1f 00 18 	mcall	80006524 <uhd_ctrl_phase_setup+0xc4>
		return; // Endpoint not valid
800064ca:	c2 28       	rjmp	8000650e <uhd_ctrl_phase_setup+0xae>
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
800064cc:	fe 6b 05 00 	mov	r11,-129792
800064d0:	76 0c       	ld.w	r12,r11[0x0]
800064d2:	e0 1c fc ff 	andl	r12,0xfcff
800064d6:	97 0c       	st.w	r11[0x0],r12
	uhd_ack_setup_ready(0);
800064d8:	30 4c       	mov	r12,4
800064da:	fe 6b 05 60 	mov	r11,-129696
800064de:	97 0c       	st.w	r11[0x0],r12
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
800064e0:	f1 da d0 10 	bfins	r8,r10,0x0,0x10
	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
	Assert(sizeof(setup) == sizeof(uint64_t));
	ptr_ep_data = (volatile uint64_t *)&uhd_get_pipe_fifo_access(0, 64);
	*ptr_ep_data = setup.value64;
800064e4:	12 9b       	mov	r11,r9
800064e6:	10 9a       	mov	r10,r8
800064e8:	fc 18 e0 00 	movh	r8,0xe000
800064ec:	f0 eb 00 00 	st.d	r8[0],r10

	uhd_ctrl_request_timeout = 5000;
800064f0:	e0 69 13 88 	mov	r9,5000
800064f4:	48 d8       	lddpc	r8,80006528 <uhd_ctrl_phase_setup+0xc8>
800064f6:	b0 09       	st.h	r8[0x0],r9
	uhd_enable_setup_ready_interrupt(0);
800064f8:	fe 68 05 f0 	mov	r8,-129552
800064fc:	91 0c       	st.w	r8[0x0],r12
	uhd_ack_fifocon(0);
800064fe:	fe 68 06 20 	mov	r8,-129504
80006502:	e0 69 40 00 	mov	r9,16384
80006506:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
80006508:	e2 69 00 00 	mov	r9,131072
8000650c:	91 09       	st.w	r8[0x0],r9
}
8000650e:	2f ed       	sub	sp,-8
80006510:	e3 cd 80 80 	ldm	sp++,r7,pc
80006514:	00 00       	add	r0,r0
80006516:	0c 54       	eor	r4,r6
80006518:	00 00       	add	r0,r0
8000651a:	0c 58       	eor	r8,r6
8000651c:	80 00       	ld.sh	r0,r0[0x0]
8000651e:	95 e4       	st.w	r10[0x38],r4
80006520:	00 00       	add	r0,r0
80006522:	0c 5c       	eor	r12,r6
80006524:	80 00       	ld.sh	r0,r0[0x0]
80006526:	63 e0       	ld.w	r0,r1[0x78]
80006528:	00 00       	add	r0,r0
8000652a:	0c 64       	and	r4,r6

8000652c <uhd_setup_request>:
		usb_setup_req_t *req,
		uint8_t *payload,
		uint16_t payload_size,
		uhd_callback_setup_run_t callback_run,
		uhd_callback_setup_end_t callback_end)
{
8000652c:	eb cd 40 fe 	pushm	r1-r7,lr
80006530:	18 95       	mov	r5,r12
80006532:	16 96       	mov	r6,r11
80006534:	14 93       	mov	r3,r10
80006536:	12 94       	mov	r4,r9
80006538:	10 92       	mov	r2,r8
8000653a:	40 81       	lddsp	r1,sp[0x20]
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
8000653c:	32 0c       	mov	r12,32
8000653e:	f0 1f 00 18 	mcall	8000659c <uhd_setup_request+0x70>
80006542:	18 97       	mov	r7,r12
	if (request == NULL) {
80006544:	c0 31       	brne	8000654a <uhd_setup_request+0x1e>
80006546:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
		Assert(false);
		return false;
	}

	// Fill structure
	request->add = (uint8_t) add;
8000654a:	18 c5       	st.b	r12++,r5
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
8000654c:	30 8a       	mov	r10,8
8000654e:	0c 9b       	mov	r11,r6
80006550:	f0 1f 00 14 	mcall	800065a0 <uhd_setup_request+0x74>
	request->payload = payload;
80006554:	8f 33       	st.w	r7[0xc],r3
	request->payload_size = payload_size;
80006556:	ef 54 00 10 	st.h	r7[16],r4
	request->callback_run = callback_run;
8000655a:	8f 52       	st.w	r7[0x14],r2
	request->callback_end = callback_end;
8000655c:	8f 61       	st.w	r7[0x18],r1
	request->next_request = NULL;
8000655e:	30 08       	mov	r8,0
80006560:	8f 78       	st.w	r7[0x1c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006562:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80006566:	d3 03       	ssrf	0x10

	// Add this request in the queue
	flags = cpu_irq_save();
	if (uhd_ctrl_request_first == NULL) {
80006568:	48 f8       	lddpc	r8,800065a4 <uhd_setup_request+0x78>
8000656a:	70 08       	ld.w	r8,r8[0x0]
8000656c:	58 08       	cp.w	r8,0
8000656e:	c0 51       	brne	80006578 <uhd_setup_request+0x4c>
		uhd_ctrl_request_first = request;
80006570:	48 d8       	lddpc	r8,800065a4 <uhd_setup_request+0x78>
80006572:	91 07       	st.w	r8[0x0],r7
80006574:	30 18       	mov	r8,1
80006576:	c0 58       	rjmp	80006580 <uhd_setup_request+0x54>
		b_start_request = true;
	} else {
		uhd_ctrl_request_last->next_request = request;
80006578:	48 c8       	lddpc	r8,800065a8 <uhd_setup_request+0x7c>
8000657a:	70 08       	ld.w	r8,r8[0x0]
8000657c:	91 77       	st.w	r8[0x1c],r7
8000657e:	30 08       	mov	r8,0
	}
	uhd_ctrl_request_last = request;
80006580:	48 aa       	lddpc	r10,800065a8 <uhd_setup_request+0x7c>
80006582:	95 07       	st.w	r10[0x0],r7
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006584:	e6 19 00 01 	andh	r9,0x1,COH
80006588:	c0 21       	brne	8000658c <uhd_setup_request+0x60>
      cpu_irq_enable();
8000658a:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (b_start_request) {
8000658c:	58 08       	cp.w	r8,0
8000658e:	c0 31       	brne	80006594 <uhd_setup_request+0x68>
80006590:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
		// Start immediately request
		uhd_ctrl_phase_setup();
80006594:	f0 1f 00 06 	mcall	800065ac <uhd_setup_request+0x80>
80006598:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
8000659c:	80 00       	ld.sh	r0,r0[0x0]
8000659e:	91 ac       	st.w	r8[0x28],r12
800065a0:	80 00       	ld.sh	r0,r0[0x0]
800065a2:	95 e4       	st.w	r10[0x38],r4
800065a4:	00 00       	add	r0,r0
800065a6:	0c 58       	eor	r8,r6
800065a8:	00 00       	add	r0,r0
800065aa:	0c 60       	and	r0,r6
800065ac:	80 00       	ld.sh	r0,r0[0x0]
800065ae:	64 60       	ld.w	r0,r2[0x18]

800065b0 <uhd_ep_free>:
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
800065b0:	d4 31       	pushm	r0-r7,lr
800065b2:	18 92       	mov	r2,r12
800065b4:	16 90       	mov	r0,r11
800065b6:	30 16       	mov	r6,1
800065b8:	30 07       	mov	r7,0
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
800065ba:	fe 64 00 00 	mov	r4,-131072
800065be:	0c 93       	mov	r3,r6
		}
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
800065c0:	30 65       	mov	r5,6
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
800065c2:	37 f1       	mov	r1,127
800065c4:	c0 48       	rjmp	800065cc <uhd_ep_free+0x1c>
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
800065c6:	2f f7       	sub	r7,-1
800065c8:	2f f6       	sub	r6,-1
800065ca:	5c 56       	castu.b	r6
800065cc:	0e 98       	mov	r8,r7
800065ce:	5c 58       	castu.b	r8
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
800065d0:	e8 fa 04 1c 	ld.w	r10,r4[1052]
800065d4:	10 9c       	mov	r12,r8
800065d6:	e6 08 09 49 	lsl	r9,r3,r8
800065da:	f3 ea 00 0a 	and	r10,r9,r10
800065de:	c4 70       	breq	8000666c <uhd_ep_free+0xbc>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
800065e0:	10 9a       	mov	r10,r8
800065e2:	e2 1a 00 fc 	andl	r10,0xfc,COH
800065e6:	e0 3a fb dc 	sub	r10,130012
800065ea:	74 0e       	ld.w	lr,r10[0x0]
800065ec:	f5 d8 c0 02 	bfextu	r10,r8,0x0,0x2
800065f0:	a3 7a       	lsl	r10,0x3
800065f2:	e2 0a 09 4a 	lsl	r10,r1,r10
800065f6:	14 9b       	mov	r11,r10
800065f8:	5c 9b       	brev	r11
800065fa:	f6 0b 12 00 	clz	r11,r11
800065fe:	1c 6a       	and	r10,lr
80006600:	f4 0b 0a 4a 	lsr	r10,r10,r11
80006604:	14 32       	cp.w	r2,r10
80006606:	c3 31       	brne	8000666c <uhd_ep_free+0xbc>
			continue;
		}
		if (endp != 0xFF) {
80006608:	3f fe       	mov	lr,-1
8000660a:	fc 00 18 00 	cp.b	r0,lr
8000660e:	c1 50       	breq	80006638 <uhd_ep_free+0x88>
			// Disable specific endpoint number
			if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80006610:	f0 0a 15 02 	lsl	r10,r8,0x2
80006614:	e0 3a fb 00 	sub	r10,129792
80006618:	74 0b       	ld.w	r11,r10[0x0]
8000661a:	74 0a       	ld.w	r10,r10[0x0]
8000661c:	f5 da c1 02 	bfextu	r10,r10,0x8,0x2
80006620:	e0 6e 00 80 	mov	lr,128
80006624:	58 1a       	cp.w	r10,1
80006626:	fc 0a 17 00 	moveq	r10,lr
8000662a:	f9 ba 01 00 	movne	r10,0
8000662e:	f7 db c2 04 	bfextu	r11,r11,0x10,0x4
80006632:	16 4a       	or	r10,r11
80006634:	14 30       	cp.w	r0,r10
80006636:	c1 b1       	brne	8000666c <uhd_ep_free+0xbc>
				continue; // Mismatch
			}
		}
		// Unalloc pipe
		uhd_disable_pipe(pipe);
80006638:	e8 fa 04 1c 	ld.w	r10,r4[1052]
8000663c:	5c d9       	com	r9
8000663e:	14 69       	and	r9,r10
80006640:	e9 49 04 1c 	st.w	r4[1052],r9
		uhd_unallocate_memory(pipe);
80006644:	f0 09 15 02 	lsl	r9,r8,0x2
80006648:	e0 39 fb 00 	sub	r9,129792
8000664c:	72 0a       	ld.w	r10,r9[0x0]
8000664e:	a1 da       	cbr	r10,0x1
80006650:	93 0a       	st.w	r9[0x0],r10

		// Stop transfer on this pipe
#ifndef USB_HOST_HUB_SUPPORT
		if (pipe == 0) {
80006652:	58 08       	cp.w	r8,0
80006654:	c0 91       	brne	80006666 <uhd_ep_free+0xb6>
			// Endpoint control
			if (uhd_ctrl_request_timeout) {
80006656:	48 9a       	lddpc	r10,80006678 <uhd_ep_free+0xc8>
80006658:	94 08       	ld.sh	r8,r10[0x0]
8000665a:	58 08       	cp.w	r8,0
8000665c:	c0 80       	breq	8000666c <uhd_ep_free+0xbc>
				uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
8000665e:	06 9c       	mov	r12,r3
80006660:	f0 1f 00 07 	mcall	8000667c <uhd_ep_free+0xcc>
80006664:	cb 1b       	rjmp	800065c6 <uhd_ep_free+0x16>
			}
			continue;
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
80006666:	06 9b       	mov	r11,r3
80006668:	f0 1f 00 06 	mcall	80006680 <uhd_ep_free+0xd0>
		}
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
8000666c:	ea 06 18 00 	cp.b	r6,r5
80006670:	fe 98 ff ab 	brls	800065c6 <uhd_ep_free+0x16>
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
	}
}
80006674:	d8 32       	popm	r0-r7,pc
80006676:	00 00       	add	r0,r0
80006678:	00 00       	add	r0,r0
8000667a:	0c 64       	and	r4,r6
8000667c:	80 00       	ld.sh	r0,r0[0x0]
8000667e:	63 e0       	ld.w	r0,r1[0x78]
80006680:	80 00       	ld.sh	r0,r0[0x0]
80006682:	60 20       	ld.w	r0,r0[0x8]

80006684 <uhd_ep_alloc>:
	uhd_enable_pipe_interrupt(0);
	return true;
}

bool uhd_ep_alloc(usb_add_t add, usb_ep_desc_t * ep_desc)
{
80006684:	d4 31       	pushm	r0-r7,lr
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
80006686:	fe 68 00 00 	mov	r8,-131072
8000668a:	f0 f8 04 1c 	ld.w	r8,r8[1052]
8000668e:	e2 18 00 02 	andl	r8,0x2,COH
80006692:	c1 60       	breq	800066be <uhd_ep_alloc+0x3a>
80006694:	30 09       	mov	r9,0
80006696:	fe 64 00 00 	mov	r4,-131072
8000669a:	30 15       	mov	r5,1
8000669c:	f2 c6 ff fe 	sub	r6,r9,-2
800066a0:	5c 56       	castu.b	r6
800066a2:	e8 fa 04 1c 	ld.w	r10,r4[1052]
800066a6:	f2 c8 ff fe 	sub	r8,r9,-2
800066aa:	ea 08 09 4e 	lsl	lr,r5,r8
800066ae:	1c 97       	mov	r7,lr
800066b0:	fd ea 00 0a 	and	r10,lr,r10
800066b4:	c0 90       	breq	800066c6 <uhd_ep_alloc+0x42>
800066b6:	2f f9       	sub	r9,-1
	uint8_t ep_type;
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
800066b8:	58 59       	cp.w	r9,5
800066ba:	cf 11       	brne	8000669c <uhd_ep_alloc+0x18>
800066bc:	c9 a8       	rjmp	800067f0 <uhd_ep_alloc+0x16c>
800066be:	30 27       	mov	r7,2
800066c0:	0e 9e       	mov	lr,r7
800066c2:	30 18       	mov	r8,1
800066c4:	10 96       	mov	r6,r8
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
800066c6:	fe 69 00 00 	mov	r9,-131072
800066ca:	f2 fa 04 1c 	ld.w	r10,r9[1052]
800066ce:	ef ea 10 0a 	or	r10,r7,r10
800066d2:	f3 4a 04 1c 	st.w	r9[1052],r10
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
800066d6:	17 aa       	ld.ub	r10,r11[0x2]
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
800066d8:	30 09       	mov	r9,0
800066da:	f4 09 18 00 	cp.b	r9,r10
800066de:	f9 b3 09 01 	movgt	r3,1
800066e2:	f9 b3 0a 02 	movle	r3,2
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
800066e6:	17 b5       	ld.ub	r5,r11[0x3]
800066e8:	f3 d5 c0 02 	bfextu	r9,r5,0x0,0x2
		// Bank choice
		switch(ep_type) {
800066ec:	30 25       	mov	r5,2
800066ee:	ea 09 18 00 	cp.b	r9,r5
800066f2:	c0 e0       	breq	8000670e <uhd_ep_alloc+0x8a>
800066f4:	30 35       	mov	r5,3
800066f6:	ea 09 18 00 	cp.b	r9,r5
800066fa:	c0 70       	breq	80006708 <uhd_ep_alloc+0x84>
800066fc:	30 15       	mov	r5,1
800066fe:	ea 09 18 00 	cp.b	r9,r5
80006702:	c7 71       	brne	800067f0 <uhd_ep_alloc+0x16c>
		case USB_EP_TYPE_ISOCHRONOUS:
			bank = UHD_ISOCHRONOUS_NB_BANK;
			ep_interval = ep_desc->bInterval;
80006704:	17 e2       	ld.ub	r2,r11[0x6]
80006706:	c0 58       	rjmp	80006710 <uhd_ep_alloc+0x8c>
			break;
		case USB_EP_TYPE_INTERRUPT:
			bank = UHD_INTERRUPT_NB_BANK;
			ep_interval = ep_desc->bInterval;
80006708:	17 e2       	ld.ub	r2,r11[0x6]
8000670a:	30 01       	mov	r1,0
8000670c:	c0 38       	rjmp	80006712 <uhd_ep_alloc+0x8e>
8000670e:	30 02       	mov	r2,0
80006710:	30 11       	mov	r1,1
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
80006712:	ec 04 15 02 	lsl	r4,r6,0x2
80006716:	fe 60 05 00 	mov	r0,-129792
8000671a:	e8 00 00 05 	add	r5,r4,r0
8000671e:	17 c0       	ld.ub	r0,r11[0x4]
80006720:	17 db       	ld.ub	r11,r11[0x5]
80006722:	f7 e0 10 8b 	or	r11,r11,r0<<0x8
80006726:	5c cb       	swap.bh	r11
80006728:	5c 7b       	castu.h	r11
8000672a:	30 80       	mov	r0,8
8000672c:	f6 00 0c 4b 	max	r11,r11,r0
80006730:	e0 60 04 00 	mov	r0,1024
80006734:	f6 00 0d 4b 	min	r11,r11,r0
80006738:	a1 7b       	lsl	r11,0x1
8000673a:	20 1b       	sub	r11,1
8000673c:	f6 0b 12 00 	clz	r11,r11
80006740:	f5 da c0 04 	bfextu	r10,r10,0x0,0x4
80006744:	ad 69       	lsl	r9,0xc
80006746:	f3 ea 11 09 	or	r9,r9,r10<<0x10
8000674a:	00 49       	or	r9,r0
8000674c:	f3 e3 10 83 	or	r3,r9,r3<<0x8
80006750:	e7 e2 11 82 	or	r2,r3,r2<<0x18
80006754:	f6 09 11 1c 	rsub	r9,r11,28
80006758:	e5 e9 10 42 	or	r2,r2,r9<<0x4
8000675c:	e5 e1 10 22 	or	r2,r2,r1<<0x2
80006760:	8b 02       	st.w	r5[0x0],r2
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
80006762:	6a 09       	ld.w	r9,r5[0x0]
80006764:	a1 b9       	sbr	r9,0x1
80006766:	8b 09       	st.w	r5[0x0],r9
		if (!Is_uhd_pipe_configured(pipe)) {
80006768:	fe 6a 05 30 	mov	r10,-129744
8000676c:	e8 0a 00 09 	add	r9,r4,r10
80006770:	72 09       	ld.w	r9,r9[0x0]
80006772:	e6 19 00 04 	andh	r9,0x4,COH
80006776:	c0 a1       	brne	8000678a <uhd_ep_alloc+0x106>
			uhd_disable_pipe(pipe);
80006778:	fe 68 00 00 	mov	r8,-131072
8000677c:	f0 f9 04 1c 	ld.w	r9,r8[1052]
80006780:	5c de       	com	lr
80006782:	12 6e       	and	lr,r9
80006784:	f1 4e 04 1c 	st.w	r8[1052],lr
80006788:	d8 3a       	popm	r0-r7,pc,r12=0
			return false;
		}
		uhd_configure_address(pipe, add);
8000678a:	e2 16 00 fc 	andl	r6,0xfc,COH
8000678e:	e0 36 fb dc 	sub	r6,130012
80006792:	6c 0a       	ld.w	r10,r6[0x0]
80006794:	f3 d8 c0 02 	bfextu	r9,r8,0x0,0x2
80006798:	a3 79       	lsl	r9,0x3
8000679a:	37 fb       	mov	r11,127
8000679c:	f6 09 09 49 	lsl	r9,r11,r9
800067a0:	12 9b       	mov	r11,r9
800067a2:	5c 9b       	brev	r11
800067a4:	f6 0b 12 00 	clz	r11,r11
800067a8:	f8 0b 09 4c 	lsl	r12,r12,r11
800067ac:	12 6c       	and	r12,r9
800067ae:	5c d9       	com	r9
800067b0:	14 69       	and	r9,r10
800067b2:	f9 e9 10 09 	or	r9,r12,r9
800067b6:	8d 09       	st.w	r6[0x0],r9
		uhd_enable_pipe(pipe);
800067b8:	fe 69 00 00 	mov	r9,-131072
800067bc:	f2 fa 04 1c 	ld.w	r10,r9[1052]
800067c0:	14 47       	or	r7,r10
800067c2:	f3 47 04 1c 	st.w	r9[1052],r7

		// Enable endpoint interrupts
		uhd_enable_pipe_dma_interrupt(pipe);
800067c6:	f0 ca 00 01 	sub	r10,r8,1
800067ca:	fc 1b 02 00 	movh	r11,0x200
800067ce:	f6 0a 09 4a 	lsl	r10,r11,r10
800067d2:	f3 4a 04 18 	st.w	r9[1048],r10
		uhd_enable_stall_interrupt(pipe);
800067d6:	e0 34 fa 10 	sub	r4,129552
800067da:	34 0a       	mov	r10,64
800067dc:	89 0a       	st.w	r4[0x0],r10
		uhd_enable_pipe_error_interrupt(pipe);
800067de:	30 8a       	mov	r10,8
800067e0:	89 0a       	st.w	r4[0x0],r10
		uhd_enable_pipe_interrupt(pipe);
800067e2:	e0 6a 01 00 	mov	r10,256
800067e6:	f4 08 09 48 	lsl	r8,r10,r8
800067ea:	f3 48 04 18 	st.w	r9[1048],r8
800067ee:	da 3a       	popm	r0-r7,pc,r12=1
		return true;
800067f0:	d8 3a       	popm	r0-r7,pc,r12=0

800067f2 <uhd_ep0_alloc>:
	uhd_sleep_mode(UHD_STATE_IDLE);
}

bool uhd_ep0_alloc(usb_add_t add, uint8_t ep_size)
{
	if (ep_size < 8) {
800067f2:	30 78       	mov	r8,7
800067f4:	f0 0b 18 00 	cp.b	r11,r8
800067f8:	e0 8b 00 03 	brhi	800067fe <uhd_ep0_alloc+0xc>
800067fc:	5e fd       	retal	0
#error TODO Add USB address in a list
		return true;
	}
#endif

	uhd_enable_pipe(0);
800067fe:	fe 68 00 00 	mov	r8,-131072
80006802:	f0 f9 04 1c 	ld.w	r9,r8[1052]
80006806:	a1 a9       	sbr	r9,0x0
80006808:	f1 49 04 1c 	st.w	r8[1052],r9
	uhd_configure_pipe(0, // Pipe 0
8000680c:	30 89       	mov	r9,8
8000680e:	f6 09 0c 4b 	max	r11,r11,r9
80006812:	e0 69 04 00 	mov	r9,1024
80006816:	f6 09 0d 49 	min	r9,r11,r9
8000681a:	a1 79       	lsl	r9,0x1
8000681c:	20 19       	sub	r9,1
8000681e:	f2 09 12 00 	clz	r9,r9
80006822:	f2 09 11 1c 	rsub	r9,r9,28
80006826:	a5 69       	lsl	r9,0x4
80006828:	fe 68 05 00 	mov	r8,-129792
8000682c:	91 09       	st.w	r8[0x0],r9
#else
			ep_size,
#endif
			AVR32_USBB_UECFG0_EPBK_SINGLE, 0);

	uhd_allocate_memory(0);
8000682e:	70 09       	ld.w	r9,r8[0x0]
80006830:	a1 b9       	sbr	r9,0x1
80006832:	91 09       	st.w	r8[0x0],r9
	if (!Is_uhd_pipe_configured(0)) {
80006834:	fe 68 05 30 	mov	r8,-129744
80006838:	70 08       	ld.w	r8,r8[0x0]
8000683a:	e6 18 00 04 	andh	r8,0x4,COH
8000683e:	c0 91       	brne	80006850 <uhd_ep0_alloc+0x5e>
		uhd_disable_pipe(0);
80006840:	fe 68 00 00 	mov	r8,-131072
80006844:	f0 f9 04 1c 	ld.w	r9,r8[1052]
80006848:	a1 c9       	cbr	r9,0x0
8000684a:	f1 49 04 1c 	st.w	r8[1052],r9
8000684e:	5e fd       	retal	0
		return false;
	}
	uhd_configure_address(0, add);
80006850:	fe 68 04 24 	mov	r8,-130012
80006854:	70 09       	ld.w	r9,r8[0x0]
80006856:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8000685a:	e0 19 ff 80 	andl	r9,0xff80
8000685e:	12 4c       	or	r12,r9
80006860:	91 0c       	st.w	r8[0x0],r12

	// Always enable stall and error interrupts of control endpoint
	uhd_enable_stall_interrupt(0);
80006862:	fe 68 05 f0 	mov	r8,-129552
80006866:	34 09       	mov	r9,64
80006868:	91 09       	st.w	r8[0x0],r9
	uhd_enable_pipe_error_interrupt(0);
8000686a:	30 89       	mov	r9,8
8000686c:	91 09       	st.w	r8[0x0],r9
	uhd_enable_pipe_interrupt(0);
8000686e:	e0 69 01 00 	mov	r9,256
80006872:	fe 68 00 00 	mov	r8,-131072
80006876:	f1 49 04 18 	st.w	r8[1048],r9
8000687a:	5e ff       	retal	1

8000687c <otg_dual_disable>:
# endif
}


void otg_dual_disable(void)
{
8000687c:	eb cd 40 80 	pushm	r7,lr
	if (!otg_initialized) {
80006880:	49 48       	lddpc	r8,800068d0 <otg_dual_disable+0x54>
80006882:	11 89       	ld.ub	r9,r8[0x0]
80006884:	30 08       	mov	r8,0
80006886:	f0 09 18 00 	cp.b	r9,r8
8000688a:	c2 00       	breq	800068ca <otg_dual_disable+0x4e>
		return; // Dual role not initialized
	}
	otg_initialized = false;
8000688c:	10 99       	mov	r9,r8
8000688e:	49 18       	lddpc	r8,800068d0 <otg_dual_disable+0x54>
80006890:	b0 89       	st.b	r8[0x0],r9

	// Do not authorize asynchronous USB interrupts
	AVR32_PM.AWEN.usb_waken = 0;
80006892:	fe 78 0c 00 	mov	r8,-62464
80006896:	f0 f9 01 44 	ld.w	r9,r8[324]
8000689a:	30 07       	mov	r7,0
8000689c:	f3 d7 d0 01 	bfins	r9,r7,0x0,0x1
800068a0:	f1 49 01 44 	st.w	r8[324],r9
	otg_unfreeze_clock();
800068a4:	fe 68 08 00 	mov	r8,-129024
800068a8:	70 09       	ld.w	r9,r8[0x0]
800068aa:	af c9       	cbr	r9,0xe
800068ac:	91 09       	st.w	r8[0x0],r9
# ifdef USB_ID
	otg_disable_id_interrupt();
800068ae:	70 09       	ld.w	r9,r8[0x0]
800068b0:	a1 c9       	cbr	r9,0x0
800068b2:	91 09       	st.w	r8[0x0],r9
# endif
	otg_disable();
800068b4:	70 09       	ld.w	r9,r8[0x0]
800068b6:	af d9       	cbr	r9,0xf
800068b8:	91 09       	st.w	r8[0x0],r9
	otg_disable_pad();
800068ba:	70 09       	ld.w	r9,r8[0x0]
800068bc:	ad c9       	cbr	r9,0xc
800068be:	91 09       	st.w	r8[0x0],r9
	sysclk_disable_usb();
800068c0:	f0 1f 00 05 	mcall	800068d4 <otg_dual_disable+0x58>
	uhd_sleep_mode(UHD_STATE_OFF);
800068c4:	0e 9c       	mov	r12,r7
800068c6:	f0 1f 00 05 	mcall	800068d8 <otg_dual_disable+0x5c>
800068ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800068ce:	00 00       	add	r0,r0
800068d0:	00 00       	add	r0,r0
800068d2:	0b 12       	ld.sh	r2,r5++
800068d4:	80 00       	ld.sh	r0,r0[0x0]
800068d6:	73 70       	ld.w	r0,r9[0x5c]
800068d8:	80 00       	ld.sh	r0,r0[0x0]
800068da:	62 c8       	ld.w	r8,r1[0x30]

800068dc <uhd_disable>:
	cpu_irq_restore(flags);
}


void uhd_disable(bool b_id_stop)
{
800068dc:	eb cd 40 c0 	pushm	r6-r7,lr
800068e0:	18 96       	mov	r6,r12
	irqflags_t flags;

	// Check USB clock ready after a potential sleep mode < IDLE
	while (!Is_otg_clock_usable());
800068e2:	fe 68 08 04 	mov	r8,-129020
800068e6:	70 09       	ld.w	r9,r8[0x0]
800068e8:	e2 19 40 00 	andl	r9,0x4000,COH
800068ec:	cf d0       	breq	800068e6 <uhd_disable+0xa>
	otg_unfreeze_clock();
800068ee:	fe 67 08 00 	mov	r7,-129024
800068f2:	6e 08       	ld.w	r8,r7[0x0]
800068f4:	af c8       	cbr	r8,0xe
800068f6:	8f 08       	st.w	r7[0x0],r8

	// Disable Vbus change and error interrupts
	Clr_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSTE_MASK
800068f8:	fe 68 00 00 	mov	r8,-131072
800068fc:	f0 f9 08 00 	ld.w	r9,r8[2048]
80006900:	e0 19 ff f5 	andl	r9,0xfff5
80006904:	f1 49 08 00 	st.w	r8[2048],r9
			| AVR32_USBB_USBCON_VBERRE_MASK);

	// Disable main control interrupt
	// (Connection, disconnection, SOF and reset)
	AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_DCONNIEC_MASK
80006908:	37 f9       	mov	r9,127
8000690a:	f1 49 04 14 	st.w	r8[1044],r9
			| AVR32_USBB_UHINTECLR_HSOFIEC_MASK
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
8000690e:	fe 68 04 00 	mov	r8,-130048
80006912:	70 09       	ld.w	r9,r8[0x0]
80006914:	a9 c9       	cbr	r9,0x8
80006916:	91 09       	st.w	r8[0x0],r9
	uhd_disable_vbus();
80006918:	e0 69 02 00 	mov	r9,512
8000691c:	fe 68 08 08 	mov	r8,-129016
80006920:	91 09       	st.w	r8[0x0],r9
	uhc_notify_connection(false);
80006922:	30 0c       	mov	r12,0
80006924:	f0 1f 00 0b 	mcall	80006950 <uhd_disable+0x74>
	otg_freeze_clock();
80006928:	6e 08       	ld.w	r8,r7[0x0]
8000692a:	af a8       	sbr	r8,0xe
8000692c:	8f 08       	st.w	r7[0x0],r8

#ifdef USB_ID
	uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
8000692e:	30 1c       	mov	r12,1
80006930:	f0 1f 00 09 	mcall	80006954 <uhd_disable+0x78>
	if (!b_id_stop) {
80006934:	58 06       	cp.w	r6,0
80006936:	c0 a0       	breq	8000694a <uhd_disable+0x6e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006938:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
8000693c:	d3 03       	ssrf	0x10
		return; // No need to disable host, it is done automatically by hardware
	}
#endif

	flags = cpu_irq_save();
	otg_dual_disable();
8000693e:	f0 1f 00 07 	mcall	80006958 <uhd_disable+0x7c>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006942:	e6 17 00 01 	andh	r7,0x1,COH
80006946:	c0 21       	brne	8000694a <uhd_disable+0x6e>
      cpu_irq_enable();
80006948:	d5 03       	csrf	0x10
   }

	barrier();
8000694a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000694e:	00 00       	add	r0,r0
80006950:	80 00       	ld.sh	r0,r0[0x0]
80006952:	85 24       	st.w	r2[0x8],r4
80006954:	80 00       	ld.sh	r0,r0[0x0]
80006956:	62 c8       	ld.w	r8,r1[0x30]
80006958:	80 00       	ld.sh	r0,r0[0x0]
8000695a:	68 7c       	ld.w	r12,r4[0x1c]

8000695c <otg_dual_enable>:
	}
	otg_data_memory_barrier();
}

bool otg_dual_enable(void)
{
8000695c:	d4 01       	pushm	lr
	if (otg_initialized) {
8000695e:	4a 58       	lddpc	r8,800069f0 <otg_dual_enable+0x94>
80006960:	11 89       	ld.ub	r9,r8[0x0]
80006962:	30 08       	mov	r8,0
80006964:	f0 09 18 00 	cp.b	r9,r8
80006968:	c0 20       	breq	8000696c <otg_dual_enable+0x10>
8000696a:	d8 0a       	popm	pc,r12=0
		return false; // Dual role already initialized
	}
	otg_initialized = true;
8000696c:	30 19       	mov	r9,1
8000696e:	4a 18       	lddpc	r8,800069f0 <otg_dual_enable+0x94>
80006970:	b0 89       	st.b	r8[0x0],r9

	//* Enable USB hardware clock
	sysclk_enable_usb();
80006972:	f0 1f 00 21 	mcall	800069f4 <otg_dual_enable+0x98>

	//* Link USB interrupt on OTG interrupt in dual role
	irq_register_handler(otg_interrupt, AVR32_USBB_IRQ, UHD_USB_INT_LEVEL);
80006976:	30 0a       	mov	r10,0
80006978:	e0 6b 02 20 	mov	r11,544
8000697c:	49 fc       	lddpc	r12,800069f8 <otg_dual_enable+0x9c>
8000697e:	f0 1f 00 20 	mcall	800069fc <otg_dual_enable+0xa0>
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
80006982:	fe 78 0c 00 	mov	r8,-62464
80006986:	f0 f9 01 44 	ld.w	r9,r8[324]
8000698a:	a1 a9       	sbr	r9,0x0
8000698c:	f1 49 01 44 	st.w	r8[324],r9
	pm_asyn_wake_up_enable(AVR32_PM_AWEN_USB_WAKEN_MASK);

# ifdef USB_ID
	// By default USBB is already configured with ID pin enable
	// The USBB must be enabled to provide interrupt
	otg_input_id_pin();
80006990:	fe 78 10 00 	mov	r8,-61440
80006994:	e0 69 08 00 	mov	r9,2048
80006998:	91 59       	st.w	r8[0x14],r9
8000699a:	91 a9       	st.w	r8[0x28],r9
8000699c:	91 29       	st.w	r8[0x8],r9
8000699e:	f1 49 00 74 	st.w	r8[116],r9
	otg_unfreeze_clock();
800069a2:	fe 68 08 00 	mov	r8,-129024
800069a6:	70 09       	ld.w	r9,r8[0x0]
800069a8:	af c9       	cbr	r9,0xe
800069aa:	91 09       	st.w	r8[0x0],r9
	otg_enable();
800069ac:	70 09       	ld.w	r9,r8[0x0]
800069ae:	af b9       	sbr	r9,0xf
800069b0:	91 09       	st.w	r8[0x0],r9
	otg_enable_id_interrupt();
800069b2:	70 09       	ld.w	r9,r8[0x0]
800069b4:	a1 a9       	sbr	r9,0x0
800069b6:	91 09       	st.w	r8[0x0],r9
	otg_ack_id_transition();
800069b8:	30 1a       	mov	r10,1
800069ba:	fe 69 08 08 	mov	r9,-129016
800069be:	93 0a       	st.w	r9[0x0],r10
	otg_freeze_clock();
800069c0:	70 09       	ld.w	r9,r8[0x0]
800069c2:	af a9       	sbr	r9,0xe
800069c4:	91 09       	st.w	r8[0x0],r9
	if (Is_otg_id_device()) {
800069c6:	fe 68 08 04 	mov	r8,-129020
800069ca:	70 08       	ld.w	r8,r8[0x0]
800069cc:	e2 18 04 00 	andl	r8,0x400,COH
800069d0:	c0 a0       	breq	800069e4 <otg_dual_enable+0x88>
		uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
800069d2:	14 9c       	mov	r12,r10
800069d4:	f0 1f 00 0b 	mcall	80006a00 <otg_dual_enable+0xa4>
		UHC_MODE_CHANGE(false);
800069d8:	30 0c       	mov	r12,0
800069da:	f0 1f 00 0b 	mcall	80006a04 <otg_dual_enable+0xa8>
		udc_start();
800069de:	f0 1f 00 0b 	mcall	80006a08 <otg_dual_enable+0xac>
800069e2:	da 0a       	popm	pc,r12=1
	} else {
		UHC_MODE_CHANGE(true);
800069e4:	30 1c       	mov	r12,1
800069e6:	f0 1f 00 08 	mcall	80006a04 <otg_dual_enable+0xa8>
		uhc_start();
800069ea:	f0 1f 00 09 	mcall	80006a0c <otg_dual_enable+0xb0>
800069ee:	da 0a       	popm	pc,r12=1
800069f0:	00 00       	add	r0,r0
800069f2:	0b 12       	ld.sh	r2,r5++
800069f4:	80 00       	ld.sh	r0,r0[0x0]
800069f6:	74 08       	ld.w	r8,r10[0x0]
800069f8:	80 00       	ld.sh	r0,r0[0x0]
800069fa:	6b 18       	ld.w	r8,r5[0x44]
800069fc:	80 00       	ld.sh	r0,r0[0x0]
800069fe:	4a fc       	lddpc	r12,80006ab8 <uhd_enable+0xa8>
80006a00:	80 00       	ld.sh	r0,r0[0x0]
80006a02:	62 c8       	ld.w	r8,r1[0x30]
80006a04:	80 00       	ld.sh	r0,r0[0x0]
80006a06:	42 f4       	lddsp	r4,sp[0xbc]
80006a08:	80 00       	ld.sh	r0,r0[0x0]
80006a0a:	83 64       	st.w	r1[0x18],r4
80006a0c:	80 00       	ld.sh	r0,r0[0x0]
80006a0e:	84 c8       	ld.uh	r8,r2[0x8]

80006a10 <uhd_enable>:
	uhd_sleep_mode(UHD_STATE_OFF);
}


void uhd_enable(void)
{
80006a10:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006a14:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80006a18:	d3 03       	ssrf	0x10
	irqflags_t flags;

	// To avoid USB interrupt before end of initialization
	flags = cpu_irq_save();

	if (otg_dual_enable()) {
80006a1a:	f0 1f 00 38 	mcall	80006af8 <uhd_enable+0xe8>
80006a1e:	c0 70       	breq	80006a2c <uhd_enable+0x1c>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006a20:	e6 17 00 01 	andh	r7,0x1,COH
80006a24:	c0 21       	brne	80006a28 <uhd_enable+0x18>
      cpu_irq_enable();
80006a26:	d5 03       	csrf	0x10
		// The current mode has been started by otg_dual_enable()
		cpu_irq_restore(flags);
		return;
80006a28:	e3 cd 80 80 	ldm	sp++,r7,pc
	}

#ifdef USB_ID
	// Check that the host mode is selected by ID pin
	if (!Is_otg_id_host()) {
80006a2c:	fe 68 08 04 	mov	r8,-129020
80006a30:	70 08       	ld.w	r8,r8[0x0]
80006a32:	e2 18 04 00 	andl	r8,0x400,COH
80006a36:	c0 70       	breq	80006a44 <uhd_enable+0x34>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006a38:	e6 17 00 01 	andh	r7,0x1,COH
80006a3c:	c0 21       	brne	80006a40 <uhd_enable+0x30>
      cpu_irq_enable();
80006a3e:	d5 03       	csrf	0x10
		cpu_irq_restore(flags);
		return; // Host is not the current mode
80006a40:	e3 cd 80 80 	ldm	sp++,r7,pc
	otg_force_host_mode();
#endif

	// Enable USB hardware
#ifdef USB_VBOF
	uhd_output_vbof_pin();
80006a44:	fe 78 10 00 	mov	r8,-61440
80006a48:	e2 69 00 00 	mov	r9,131072
80006a4c:	f1 49 01 14 	st.w	r8[276],r9
80006a50:	f1 49 01 28 	st.w	r8[296],r9
80006a54:	f1 49 01 08 	st.w	r8[264],r9
80006a58:	f1 49 01 88 	st.w	r8[392],r9
80006a5c:	f1 49 01 78 	st.w	r8[376],r9
# if USB_VBOF_ACTIVE_LEVEL == HIGH
	uhd_set_vbof_active_high();
# else // USB_VBOF_ACTIVE_LEVEL == LOW
	uhd_set_vbof_active_low();
80006a60:	fe 68 08 00 	mov	r8,-129024
80006a64:	70 09       	ld.w	r9,r8[0x0]
80006a66:	ad b9       	sbr	r9,0xd
80006a68:	91 09       	st.w	r8[0x0],r9
# endif
#endif
	otg_enable_pad();
80006a6a:	70 09       	ld.w	r9,r8[0x0]
80006a6c:	ad a9       	sbr	r9,0xc
80006a6e:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80006a70:	70 09       	ld.w	r9,r8[0x0]
80006a72:	af b9       	sbr	r9,0xf
80006a74:	91 09       	st.w	r8[0x0],r9

	uhd_ctrl_request_first = NULL;
80006a76:	30 09       	mov	r9,0
80006a78:	4a 1a       	lddpc	r10,80006afc <uhd_enable+0xec>
80006a7a:	95 09       	st.w	r10[0x0],r9
	uhd_ctrl_request_last = NULL;
80006a7c:	4a 1a       	lddpc	r10,80006b00 <uhd_enable+0xf0>
80006a7e:	95 09       	st.w	r10[0x0],r9
	uhd_ctrl_request_timeout = 0;
80006a80:	12 9a       	mov	r10,r9
80006a82:	4a 1b       	lddpc	r11,80006b04 <uhd_enable+0xf4>
80006a84:	b6 09       	st.h	r11[0x0],r9
	uhd_suspend_start = 0;
80006a86:	4a 19       	lddpc	r9,80006b08 <uhd_enable+0xf8>
80006a88:	b2 8a       	st.b	r9[0x0],r10
	uhd_resume_start = 0;
80006a8a:	4a 19       	lddpc	r9,80006b0c <uhd_enable+0xfc>
80006a8c:	b2 8a       	st.b	r9[0x0],r10
	uhd_b_suspend_requested = false;
80006a8e:	4a 19       	lddpc	r9,80006b10 <uhd_enable+0x100>
80006a90:	b2 8a       	st.b	r9[0x0],r10

	otg_unfreeze_clock();
80006a92:	70 09       	ld.w	r9,r8[0x0]
80006a94:	af c9       	cbr	r9,0xe
80006a96:	91 09       	st.w	r8[0x0],r9
	uhd_disable_high_speed_mode();
#  endif
#endif

	// Clear all interrupts that may have been set by a previous host mode
	AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_DCONNIC_MASK
80006a98:	fe 68 00 00 	mov	r8,-131072
80006a9c:	37 f9       	mov	r9,127
80006a9e:	f1 49 04 08 	st.w	r8[1032],r9
			| AVR32_USBB_UHINTCLR_DDISCIC_MASK | AVR32_USBB_UHINTCLR_HSOFIC_MASK
			| AVR32_USBB_UHINTCLR_HWUPIC_MASK | AVR32_USBB_UHINTCLR_RSMEDIC_MASK
			| AVR32_USBB_UHINTCLR_RSTIC_MASK | AVR32_USBB_UHINTCLR_RXRSMIC_MASK;
	otg_ack_vbus_transition();
80006aa2:	30 2a       	mov	r10,2
80006aa4:	fe 69 08 08 	mov	r9,-129016
80006aa8:	93 0a       	st.w	r9[0x0],r10

	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
80006aaa:	f0 f9 08 00 	ld.w	r9,r8[2048]
80006aae:	e8 19 01 0a 	orl	r9,0x10a
80006ab2:	f1 49 08 00 	st.w	r8[2048],r9
			|AVR32_USBB_USBCON_VBUSTE_MASK
			|AVR32_USBB_USBCON_VBERRE_MASK);
	uhd_enable_vbus();
80006ab6:	e0 69 02 00 	mov	r9,512
80006aba:	fe 68 08 0c 	mov	r8,-129012
80006abe:	91 09       	st.w	r8[0x0],r9

	// Force Vbus interrupt when Vbus is always high
	// This is possible due to a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80006ac0:	fe 68 08 04 	mov	r8,-129020
80006ac4:	70 08       	ld.w	r8,r8[0x0]
80006ac6:	e2 18 08 00 	andl	r8,0x800,COH
80006aca:	c0 40       	breq	80006ad2 <uhd_enable+0xc2>
		otg_raise_vbus_transition();
80006acc:	fe 68 08 0c 	mov	r8,-129012
80006ad0:	91 0a       	st.w	r8[0x0],r10
	}

	// Enable main control interrupt
	// Connection, SOF and reset
	AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_DCONNIES_MASK
80006ad2:	32 59       	mov	r9,37
80006ad4:	fe 68 00 00 	mov	r8,-131072
80006ad8:	f1 49 04 18 	st.w	r8[1048],r9
			| AVR32_USBB_UHINTESET_HSOFIES_MASK
			| AVR32_USBB_UHINTESET_RSTIES_MASK;

	otg_freeze_clock();
80006adc:	fe 68 08 00 	mov	r8,-129024
80006ae0:	70 09       	ld.w	r9,r8[0x0]
80006ae2:	af a9       	sbr	r9,0xe
80006ae4:	91 09       	st.w	r8[0x0],r9
	uhd_sleep_mode(UHD_STATE_NO_VBUS);
80006ae6:	30 2c       	mov	r12,2
80006ae8:	f0 1f 00 0b 	mcall	80006b14 <uhd_enable+0x104>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006aec:	e6 17 00 01 	andh	r7,0x1,COH
80006af0:	c0 21       	brne	80006af4 <uhd_enable+0xe4>
      cpu_irq_enable();
80006af2:	d5 03       	csrf	0x10
   }

	barrier();
80006af4:	e3 cd 80 80 	ldm	sp++,r7,pc
80006af8:	80 00       	ld.sh	r0,r0[0x0]
80006afa:	69 5c       	ld.w	r12,r4[0x54]
80006afc:	00 00       	add	r0,r0
80006afe:	0c 58       	eor	r8,r6
80006b00:	00 00       	add	r0,r0
80006b02:	0c 60       	and	r0,r6
80006b04:	00 00       	add	r0,r0
80006b06:	0c 64       	and	r4,r6
80006b08:	00 00       	add	r0,r0
80006b0a:	0b 10       	ld.sh	r0,r5++
80006b0c:	00 00       	add	r0,r0
80006b0e:	0b 13       	ld.sh	r3,r5++
80006b10:	00 00       	add	r0,r0
80006b12:	0b 18       	ld.sh	r8,r5++
80006b14:	80 00       	ld.sh	r0,r0[0x0]
80006b16:	62 c8       	ld.w	r8,r1[0x30]

80006b18 <otg_interrupt>:
 * (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests
 * in peripheral modules.
 */
ISR(otg_interrupt, AVR32_USBB_IRQ_GROUP, UHD_USB_INT_LEVEL)
{
80006b18:	d4 31       	pushm	r0-r7,lr
80006b1a:	20 1d       	sub	sp,4
	bool b_mode_device;

#ifdef USB_ID
	if (Is_otg_id_transition()) {
80006b1c:	fe 68 08 04 	mov	r8,-129020
80006b20:	70 08       	ld.w	r8,r8[0x0]
80006b22:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006b26:	c2 c0       	breq	80006b7e <otg_interrupt+0x66>
		while (!Is_otg_clock_usable());
80006b28:	fe 69 08 04 	mov	r9,-129020
80006b2c:	72 08       	ld.w	r8,r9[0x0]
80006b2e:	e2 18 40 00 	andl	r8,0x4000,COH
80006b32:	cf d0       	breq	80006b2c <otg_interrupt+0x14>
		otg_unfreeze_clock();
80006b34:	fe 68 08 00 	mov	r8,-129024
80006b38:	70 09       	ld.w	r9,r8[0x0]
80006b3a:	af c9       	cbr	r9,0xe
80006b3c:	91 09       	st.w	r8[0x0],r9
		otg_ack_id_transition();
80006b3e:	30 1a       	mov	r10,1
80006b40:	fe 69 08 08 	mov	r9,-129016
80006b44:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock();
80006b46:	70 09       	ld.w	r9,r8[0x0]
80006b48:	af a9       	sbr	r9,0xe
80006b4a:	91 09       	st.w	r8[0x0],r9
		if (Is_otg_id_device()) {
80006b4c:	fe 68 08 04 	mov	r8,-129020
80006b50:	70 08       	ld.w	r8,r8[0x0]
80006b52:	e2 18 04 00 	andl	r8,0x400,COH
80006b56:	c0 b0       	breq	80006b6c <otg_interrupt+0x54>
			uhc_stop(false);
80006b58:	30 0c       	mov	r12,0
80006b5a:	f0 1f 01 bd 	mcall	8000724c <otg_interrupt+0x734>
			UHC_MODE_CHANGE(false);
80006b5e:	30 0c       	mov	r12,0
80006b60:	f0 1f 01 bc 	mcall	80007250 <otg_interrupt+0x738>
			udc_start();
80006b64:	f0 1f 01 bc 	mcall	80007254 <otg_interrupt+0x73c>
80006b68:	e0 8f 03 6f 	bral	80007246 <otg_interrupt+0x72e>
		} else {
			udc_stop();
80006b6c:	f0 1f 01 bb 	mcall	80007258 <otg_interrupt+0x740>
			UHC_MODE_CHANGE(true);
80006b70:	30 1c       	mov	r12,1
80006b72:	f0 1f 01 b8 	mcall	80007250 <otg_interrupt+0x738>
			uhc_start();
80006b76:	f0 1f 01 ba 	mcall	8000725c <otg_interrupt+0x744>
80006b7a:	e0 8f 03 66 	bral	80007246 <otg_interrupt+0x72e>
		}
		return;
	}
	b_mode_device = Is_otg_id_device();
80006b7e:	fe 68 08 04 	mov	r8,-129020
80006b82:	70 08       	ld.w	r8,r8[0x0]
#else
	b_mode_device = Is_otg_device_mode_forced();
#endif

	// Redirection to host or device interrupt
	if (b_mode_device) {
80006b84:	e2 18 04 00 	andl	r8,0x400,COH
80006b88:	c0 50       	breq	80006b92 <otg_interrupt+0x7a>
		udd_interrupt();
80006b8a:	f0 1f 01 b6 	mcall	80007260 <otg_interrupt+0x748>
80006b8e:	e0 8f 03 58 	bral	8000723e <otg_interrupt+0x726>
static void uhd_interrupt(void)
{
	uint8_t pipe_int;

	// Manage SOF interrupt
	if (Is_uhd_sof()) {
80006b92:	fe 68 04 04 	mov	r8,-130044
80006b96:	70 08       	ld.w	r8,r8[0x0]
80006b98:	e2 18 00 20 	andl	r8,0x20,COH
80006b9c:	e0 80 00 8f 	breq	80006cba <otg_interrupt+0x1a2>
		uhd_ack_sof();
80006ba0:	32 09       	mov	r9,32
80006ba2:	fe 68 04 08 	mov	r8,-130040
80006ba6:	91 09       	st.w	r8[0x0],r9
			return;
		}
	}

	// Manage a delay to enter in suspend
	if (uhd_suspend_start) {
80006ba8:	fe f8 06 bc 	ld.w	r8,pc[1724]
80006bac:	11 88       	ld.ub	r8,r8[0x0]
80006bae:	58 08       	cp.w	r8,0
80006bb0:	c3 00       	breq	80006c10 <otg_interrupt+0xf8>
		if (--uhd_suspend_start == 0) {
80006bb2:	20 18       	sub	r8,1
80006bb4:	5c 58       	castu.b	r8
80006bb6:	fe f9 06 ae 	ld.w	r9,pc[1710]
80006bba:	b2 88       	st.b	r9[0x0],r8
80006bbc:	58 08       	cp.w	r8,0
80006bbe:	c0 80       	breq	80006bce <otg_interrupt+0xb6>
80006bc0:	e0 8f 03 3f 	bral	8000723e <otg_interrupt+0x726>
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
#endif
				if (Is_uhd_disconnection()) {
80006bc4:	74 08       	ld.w	r8,r10[0x0]
80006bc6:	e2 18 00 02 	andl	r8,0x2,COH
80006bca:	c0 60       	breq	80006bd6 <otg_interrupt+0xbe>
80006bcc:	c0 c8       	rjmp	80006be4 <otg_interrupt+0xcc>
			// then wait end of SOF generation
			// to be sure that disable SOF has been accepted
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
80006bce:	fe 69 04 20 	mov	r9,-130016
#endif
				if (Is_uhd_disconnection()) {
80006bd2:	fe 6a 04 04 	mov	r10,-130044
			// then wait end of SOF generation
			// to be sure that disable SOF has been accepted
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
80006bd6:	72 08       	ld.w	r8,r9[0x0]
80006bd8:	f1 d8 c2 08 	bfextu	r8,r8,0x10,0x8
80006bdc:	e0 48 00 b9 	cp.w	r8,185
80006be0:	fe 9b ff f2 	brhi	80006bc4 <otg_interrupt+0xac>
#endif
				if (Is_uhd_disconnection()) {
					break;
				}
			}
			uhd_disable_sof();
80006be4:	fe 68 04 00 	mov	r8,-130048
80006be8:	70 09       	ld.w	r9,r8[0x0]
80006bea:	a9 c9       	cbr	r9,0x8
80006bec:	91 09       	st.w	r8[0x0],r9

			// Ack previous wakeup and resumes interrupts
			AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_HWUPIC_MASK
80006bee:	fe 68 00 00 	mov	r8,-131072
80006bf2:	35 89       	mov	r9,88
80006bf4:	f1 49 04 08 	st.w	r8[1032],r9
					|AVR32_USBB_UHINTCLR_RSMEDIC_MASK
					|AVR32_USBB_UHINTCLR_RXRSMIC_MASK;

			// Enable wakeup/resumes interrupts
			AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_HWUPIES_MASK
80006bf8:	f1 49 04 18 	st.w	r8[1048],r9
					|AVR32_USBB_UHINTESET_RSMEDIES_MASK
					|AVR32_USBB_UHINTESET_RXRSMIES_MASK;

			otg_freeze_clock();
80006bfc:	fe 68 08 00 	mov	r8,-129024
80006c00:	70 09       	ld.w	r9,r8[0x0]
80006c02:	af a9       	sbr	r9,0xe
80006c04:	91 09       	st.w	r8[0x0],r9
			uhd_sleep_mode(UHD_STATE_SUSPEND);
80006c06:	30 4c       	mov	r12,4
80006c08:	f0 1f 01 98 	mcall	80007268 <otg_interrupt+0x750>
80006c0c:	e0 8f 03 19 	bral	8000723e <otg_interrupt+0x726>
		}
		return; // Abort SOF events
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
80006c10:	fe f8 06 5c 	ld.w	r8,pc[1628]
80006c14:	11 88       	ld.ub	r8,r8[0x0]
80006c16:	58 08       	cp.w	r8,0
80006c18:	c1 e0       	breq	80006c54 <otg_interrupt+0x13c>
		if (--uhd_resume_start == 0) {
80006c1a:	20 18       	sub	r8,1
80006c1c:	5c 58       	castu.b	r8
80006c1e:	fe f9 06 4e 	ld.w	r9,pc[1614]
80006c22:	b2 88       	st.b	r9[0x0],r8
80006c24:	58 08       	cp.w	r8,0
80006c26:	e0 81 03 0c 	brne	8000723e <otg_interrupt+0x726>
80006c2a:	fe 69 06 24 	mov	r9,-129500
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
80006c2e:	fe fb 06 42 	ld.w	r11,pc[1602]
					uhd_unfreeze_pipe(pipe);
80006c32:	e2 6c 00 00 	mov	r12,131072
 * is enabled because this one can not occurred during the USB ISR
 * (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests
 * in peripheral modules.
 */
ISR(otg_interrupt, AVR32_USBB_IRQ_GROUP, UHD_USB_INT_LEVEL)
80006c36:	2f f8       	sub	r8,-1
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
80006c38:	17 8a       	ld.ub	r10,r11[0x0]
80006c3a:	f4 08 08 4a 	asr	r10,r10,r8
80006c3e:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
					uhd_unfreeze_pipe(pipe);
80006c42:	f3 fc 1a 00 	st.wne	r9[0x0],r12
80006c46:	2f c9       	sub	r9,-4
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80006c48:	58 68       	cp.w	r8,6
80006c4a:	cf 61       	brne	80006c36 <otg_interrupt+0x11e>
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
					uhd_unfreeze_pipe(pipe);
				}
			}
			uhc_notify_resume();
80006c4c:	f0 1f 01 8a 	mcall	80007274 <otg_interrupt+0x75c>
80006c50:	e0 8f 02 f7 	bral	8000723e <otg_interrupt+0x726>
		}
		return; // Abort SOF events
	}
	// Manage the timeout on endpoint control transfer
	if (uhd_ctrl_request_timeout) {
80006c54:	fe f8 06 24 	ld.w	r8,pc[1572]
80006c58:	90 08       	ld.sh	r8,r8[0x0]
80006c5a:	58 08       	cp.w	r8,0
80006c5c:	c1 10       	breq	80006c7e <otg_interrupt+0x166>
		// Setup request on-going
		if (--uhd_ctrl_request_timeout == 0) {
80006c5e:	fe f8 06 1a 	ld.w	r8,pc[1562]
80006c62:	90 09       	ld.sh	r9,r8[0x0]
80006c64:	20 19       	sub	r9,1
80006c66:	b0 09       	st.h	r8[0x0],r9
80006c68:	90 08       	ld.sh	r8,r8[0x0]
80006c6a:	58 08       	cp.w	r8,0
80006c6c:	c0 91       	brne	80006c7e <otg_interrupt+0x166>
			// Stop request
			uhd_freeze_pipe(0);
80006c6e:	e2 69 00 00 	mov	r9,131072
80006c72:	fe 68 05 f0 	mov	r8,-129552
80006c76:	91 09       	st.w	r8[0x0],r9
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
80006c78:	30 7c       	mov	r12,7
80006c7a:	f0 1f 01 81 	mcall	8000727c <otg_interrupt+0x764>
80006c7e:	fe f7 06 02 	ld.w	r7,pc[1538]
80006c82:	30 06       	mov	r6,0
		if (ptr_job->busy == true) {
			if (ptr_job->timeout) {
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
					// Abort job
					uhd_ep_abort_pipe(pipe,UHD_TRANS_TIMEOUT);
80006c84:	30 75       	mov	r5,7
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
80006c86:	6e 08       	ld.w	r8,r7[0x0]
80006c88:	58 08       	cp.w	r8,0
80006c8a:	c0 d4       	brge	80006ca4 <otg_interrupt+0x18c>
			if (ptr_job->timeout) {
80006c8c:	8e 18       	ld.sh	r8,r7[0x2]
80006c8e:	58 08       	cp.w	r8,0
80006c90:	c0 a0       	breq	80006ca4 <otg_interrupt+0x18c>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
80006c92:	20 18       	sub	r8,1
80006c94:	5c 88       	casts.h	r8
80006c96:	ae 18       	st.h	r7[0x2],r8
80006c98:	c0 61       	brne	80006ca4 <otg_interrupt+0x18c>
					// Abort job
					uhd_ep_abort_pipe(pipe,UHD_TRANS_TIMEOUT);
80006c9a:	0a 9b       	mov	r11,r5
80006c9c:	ec cc ff ff 	sub	r12,r6,-1
80006ca0:	f0 1f 01 79 	mcall	80007284 <otg_interrupt+0x76c>
80006ca4:	2f f6       	sub	r6,-1
80006ca6:	2e c7       	sub	r7,-20
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
		}
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80006ca8:	58 66       	cp.w	r6,6
80006caa:	ce e1       	brne	80006c86 <otg_interrupt+0x16e>
				}
			}
		}
	}
	// Notify the UHC
	uhc_notify_sof(false);
80006cac:	30 0c       	mov	r12,0
80006cae:	f0 1f 01 77 	mcall	80007288 <otg_interrupt+0x770>

	// Notify the user application
	UHC_SOF_EVENT();
80006cb2:	f0 1f 01 77 	mcall	8000728c <otg_interrupt+0x774>
80006cb6:	e0 8f 02 c4 	bral	8000723e <otg_interrupt+0x726>
		uhd_sof_interrupt();
		return;
	}

	// Manage pipe interrupts
	pipe_int = uhd_get_interrupt_pipe_number();
80006cba:	fe 68 00 00 	mov	r8,-131072
80006cbe:	f0 f9 04 04 	ld.w	r9,r8[1028]
80006cc2:	f0 f7 04 10 	ld.w	r7,r8[1040]
80006cc6:	f2 08 16 08 	lsr	r8,r9,0x8
80006cca:	f1 e7 02 87 	and	r7,r8,r7>>0x8
80006cce:	a7 b7       	sbr	r7,0x7
80006cd0:	5c 97       	brev	r7
80006cd2:	ee 07 12 00 	clz	r7,r7
	if (pipe_int == 0) {
80006cd6:	e0 81 01 24 	brne	80006f1e <otg_interrupt+0x406>
{
	// A setup request is on-going
	Assert(uhd_ctrl_request_timeout!=0);

	// Disable setup, IN and OUT interrupts of control endpoint
	AVR32_USBB.upcon0clr = AVR32_USBB_UPCON0CLR_TXSTPEC_MASK
80006cda:	30 79       	mov	r9,7
80006cdc:	fe 68 00 00 	mov	r8,-131072
80006ce0:	f1 49 06 20 	st.w	r8[1568],r9
			| AVR32_USBB_UPCON0CLR_RXINEC_MASK
			| AVR32_USBB_UPCON0CLR_TXOUTEC_MASK;

	// Search event on control endpoint
	if (Is_uhd_setup_ready(0)) {
80006ce4:	fe 68 05 30 	mov	r8,-129744
80006ce8:	70 08       	ld.w	r8,r8[0x0]
80006cea:	e2 18 00 04 	andl	r8,0x4,COH
80006cee:	c3 f0       	breq	80006d6c <otg_interrupt+0x254>
		// SETUP packet sent
		uhd_freeze_pipe(0);
80006cf0:	e2 69 00 00 	mov	r9,131072
80006cf4:	fe 68 05 f0 	mov	r8,-129552
80006cf8:	91 09       	st.w	r8[0x0],r9
		uhd_ack_setup_ready(0);
80006cfa:	30 49       	mov	r9,4
80006cfc:	fe 68 05 60 	mov	r8,-129696
80006d00:	91 09       	st.w	r8[0x0],r9
		Assert(uhd_ctrl_request_phase == UHD_CTRL_REQ_PHASE_SETUP);

		// Start DATA phase
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
80006d02:	fe f8 05 8e 	ld.w	r8,pc[1422]
80006d06:	70 08       	ld.w	r8,r8[0x0]
80006d08:	11 9a       	ld.ub	r10,r8[0x1]
80006d0a:	30 09       	mov	r9,0
80006d0c:	f2 0a 18 00 	cp.b	r10,r9
80006d10:	c2 04       	brge	80006d50 <otg_interrupt+0x238>
 * \internal
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
80006d12:	30 29       	mov	r9,2
80006d14:	fe f8 05 80 	ld.w	r8,pc[1408]
80006d18:	91 09       	st.w	r8[0x0],r9
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80006d1a:	fe 68 05 00 	mov	r8,-129792
80006d1e:	70 09       	ld.w	r9,r8[0x0]
80006d20:	e0 19 fc ff 	andl	r9,0xfcff
80006d24:	a9 a9       	sbr	r9,0x8
80006d26:	91 09       	st.w	r8[0x0],r9
	uhd_ack_in_received(0);
80006d28:	fe 69 05 60 	mov	r9,-129696
80006d2c:	30 18       	mov	r8,1
80006d2e:	93 08       	st.w	r9[0x0],r8
	uhd_ack_short_packet(0);
80006d30:	e0 6a 00 80 	mov	r10,128
80006d34:	93 0a       	st.w	r9[0x0],r10
	uhd_enable_in_received_interrupt(0);
80006d36:	fe 69 05 f0 	mov	r9,-129552
80006d3a:	93 08       	st.w	r9[0x0],r8
	uhd_ack_fifocon(0);
80006d3c:	fe 68 06 20 	mov	r8,-129504
80006d40:	e0 69 40 00 	mov	r9,16384
80006d44:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
80006d46:	e2 69 00 00 	mov	r9,131072
80006d4a:	91 09       	st.w	r8[0x0],r9
80006d4c:	e0 8f 02 79 	bral	8000723e <otg_interrupt+0x726>
		// Start DATA phase
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
				== USB_REQ_DIR_IN ) {
			uhd_ctrl_phase_data_in_start();
		} else {
			if (uhd_ctrl_request_first->req.wLength) {
80006d50:	11 f9       	ld.ub	r9,r8[0x7]
80006d52:	f1 38 00 08 	ld.ub	r8,r8[8]
80006d56:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80006d5a:	c0 50       	breq	80006d64 <otg_interrupt+0x24c>
				uhd_ctrl_phase_data_out();
80006d5c:	f0 1f 01 4f 	mcall	80007298 <otg_interrupt+0x780>
80006d60:	e0 8f 02 6f 	bral	8000723e <otg_interrupt+0x726>
			} else {
				// No DATA phase
				uhd_ctrl_phase_zlp_in();
80006d64:	f0 1f 01 4e 	mcall	8000729c <otg_interrupt+0x784>
80006d68:	e0 8f 02 6b 	bral	8000723e <otg_interrupt+0x726>
			}
		}
		return;
	}
	if (Is_uhd_in_received(0)) {
80006d6c:	fe 68 05 30 	mov	r8,-129744
80006d70:	70 08       	ld.w	r8,r8[0x0]
80006d72:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006d76:	e0 80 00 96 	breq	80006ea2 <otg_interrupt+0x38a>
		// In case of low USB speed and with a high CPU frequency,
		// a ACK from host can be always running on USB line
		// then wait end of ACK on IN pipe.
		while(!Is_uhd_pipe_frozen(0));
80006d7a:	fe 69 05 c0 	mov	r9,-129600
80006d7e:	72 08       	ld.w	r8,r9[0x0]
80006d80:	e6 18 00 02 	andh	r8,0x2,COH
80006d84:	cf d0       	breq	80006d7e <otg_interrupt+0x266>

		// IN packet received
		uhd_ack_in_received(0);
80006d86:	30 19       	mov	r9,1
80006d88:	fe 68 05 60 	mov	r8,-129696
80006d8c:	91 09       	st.w	r8[0x0],r9
		switch(uhd_ctrl_request_phase) {
80006d8e:	fe f8 05 06 	ld.w	r8,pc[1286]
80006d92:	70 08       	ld.w	r8,r8[0x0]
80006d94:	58 28       	cp.w	r8,2
80006d96:	c0 50       	breq	80006da0 <otg_interrupt+0x288>
80006d98:	58 38       	cp.w	r8,3
80006d9a:	e0 81 02 52 	brne	8000723e <otg_interrupt+0x726>
80006d9e:	c7 d8       	rjmp	80006e98 <otg_interrupt+0x380>
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
80006da0:	fe 68 05 30 	mov	r8,-129744
80006da4:	70 07       	ld.w	r7,r8[0x0]
80006da6:	ef d7 c2 88 	bfextu	r7,r7,0x14,0x8
	//! In HUB mode, the control pipe is always configured to 64B
	//! thus the short packet flag must be computed
	b_short_packet = (nb_byte_received != uhd_get_pipe_size(0));
	uhd_ack_short_packet(0);
#else
	b_short_packet = Is_uhd_short_packet(0);
80006daa:	70 08       	ld.w	r8,r8[0x0]
80006dac:	50 08       	stdsp	sp[0x0],r8
80006dae:	fc 12 e0 00 	movh	r2,0xe000
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80006db2:	fe f4 04 de 	ld.w	r4,pc[1246]
80006db6:	30 06       	mov	r6,0
80006db8:	30 05       	mov	r5,0
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
80006dba:	fe f3 04 e6 	ld.w	r3,pc[1254]
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
80006dbe:	0a 91       	mov	r1,r5
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80006dc0:	fe 60 04 24 	mov	r0,-130012
80006dc4:	c1 08       	rjmp	80006de4 <otg_interrupt+0x2cc>

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
80006dc6:	05 39       	ld.ub	r9,r2++
80006dc8:	76 38       	ld.w	r8,r11[0xc]
80006dca:	10 c9       	st.b	r8++,r9
80006dcc:	97 38       	st.w	r11[0xc],r8
		uhd_ctrl_nb_trans++;
80006dce:	86 08       	ld.sh	r8,r3[0x0]
80006dd0:	2f f8       	sub	r8,-1
80006dd2:	a6 08       	st.h	r3[0x0],r8
		uhd_ctrl_request_first->payload_size--;
80006dd4:	68 08       	ld.w	r8,r4[0x0]
80006dd6:	f1 09 00 10 	ld.sh	r9,r8[16]
80006dda:	20 19       	sub	r9,1
80006ddc:	f1 59 00 10 	st.h	r8[16],r9
		nb_byte_received--;
80006de0:	20 17       	sub	r7,1
80006de2:	5c 57       	castu.b	r7
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80006de4:	68 0b       	ld.w	r11,r4[0x0]
80006de6:	f7 09 00 10 	ld.sh	r9,r11[16]
80006dea:	ec 07 18 00 	cp.b	r7,r6
80006dee:	5f 18       	srne	r8
80006df0:	ea 09 19 00 	cp.h	r9,r5
80006df4:	5f 1a       	srne	r10
80006df6:	f1 ea 00 0a 	and	r10,r8,r10
80006dfa:	ec 0a 18 00 	cp.b	r10,r6
80006dfe:	ce 41       	brne	80006dc6 <otg_interrupt+0x2ae>
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
80006e00:	ea 09 19 00 	cp.h	r9,r5
80006e04:	5f 09       	sreq	r9
80006e06:	12 68       	and	r8,r9
80006e08:	e2 08 18 00 	cp.b	r8,r1
80006e0c:	c0 d0       	breq	80006e26 <otg_interrupt+0x30e>
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
				|| !uhd_ctrl_request_first->callback_run(
80006e0e:	76 58       	ld.w	r8,r11[0x14]
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
80006e10:	58 08       	cp.w	r8,0
80006e12:	c1 90       	breq	80006e44 <otg_interrupt+0x32c>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80006e14:	60 0c       	ld.w	r12,r0[0x0]
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
80006e16:	f6 ca ff f0 	sub	r10,r11,-16
80006e1a:	2f 4b       	sub	r11,-12
80006e1c:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80006e20:	5d 18       	icall	r8
80006e22:	ce 11       	brne	80006de4 <otg_interrupt+0x2cc>
80006e24:	c1 08       	rjmp	80006e44 <otg_interrupt+0x32c>
		// thus the data load can restart.
		goto uhd_ctrl_receiv_in_read_data;
	}

	// Test short packet
	if ((uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength)
80006e26:	17 f9       	ld.ub	r9,r11[0x7]
80006e28:	f7 38 00 08 	ld.ub	r8,r11[8]
80006e2c:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80006e30:	fe f9 04 70 	ld.w	r9,pc[1136]
80006e34:	92 09       	ld.sh	r9,r9[0x0]
80006e36:	f0 09 19 00 	cp.h	r9,r8
80006e3a:	c0 50       	breq	80006e44 <otg_interrupt+0x32c>
80006e3c:	40 08       	lddsp	r8,sp[0x0]
80006e3e:	e2 18 00 80 	andl	r8,0x80,COH
80006e42:	c1 d0       	breq	80006e7c <otg_interrupt+0x364>
 * \internal
 * \brief Starts the ZLP OUT phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_out(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
80006e44:	30 49       	mov	r9,4
80006e46:	fe f8 04 4e 	ld.w	r8,pc[1102]
80006e4a:	91 09       	st.w	r8[0x0],r9
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80006e4c:	fe 68 05 00 	mov	r8,-129792
80006e50:	70 09       	ld.w	r9,r8[0x0]
80006e52:	e0 19 fc ff 	andl	r9,0xfcff
80006e56:	a9 b9       	sbr	r9,0x9
80006e58:	91 09       	st.w	r8[0x0],r9
	uhd_ack_out_ready(0);
80006e5a:	30 28       	mov	r8,2
80006e5c:	fe 69 05 60 	mov	r9,-129696
80006e60:	93 08       	st.w	r9[0x0],r8
	uhd_enable_out_ready_interrupt(0);
80006e62:	fe 69 05 f0 	mov	r9,-129552
80006e66:	93 08       	st.w	r9[0x0],r8
	uhd_ack_fifocon(0);
80006e68:	fe 68 06 20 	mov	r8,-129504
80006e6c:	e0 69 40 00 	mov	r9,16384
80006e70:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
80006e72:	e2 69 00 00 	mov	r9,131072
80006e76:	91 09       	st.w	r8[0x0],r9
80006e78:	e0 8f 01 e3 	bral	8000723e <otg_interrupt+0x726>
		uhd_ctrl_phase_zlp_out();
		return;
	}

	// Send a new IN packet request
	uhd_enable_in_received_interrupt(0);
80006e7c:	30 19       	mov	r9,1
80006e7e:	fe 68 05 f0 	mov	r8,-129552
80006e82:	91 09       	st.w	r8[0x0],r9
	uhd_ack_fifocon(0);
80006e84:	fe 68 06 20 	mov	r8,-129504
80006e88:	e0 69 40 00 	mov	r9,16384
80006e8c:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
80006e8e:	e2 69 00 00 	mov	r9,131072
80006e92:	91 09       	st.w	r8[0x0],r9
80006e94:	e0 8f 01 d5 	bral	8000723e <otg_interrupt+0x726>
		switch(uhd_ctrl_request_phase) {
		case UHD_CTRL_REQ_PHASE_DATA_IN:
			uhd_ctrl_phase_data_in();
			break;
		case UHD_CTRL_REQ_PHASE_ZLP_IN:
			uhd_ctrl_request_end(UHD_TRANS_NOERROR);
80006e98:	30 0c       	mov	r12,0
80006e9a:	f0 1f 00 f9 	mcall	8000727c <otg_interrupt+0x764>
80006e9e:	e0 8f 01 d0 	bral	8000723e <otg_interrupt+0x726>
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_out_ready(0)) {
80006ea2:	fe 68 05 30 	mov	r8,-129744
80006ea6:	70 08       	ld.w	r8,r8[0x0]
80006ea8:	e2 18 00 02 	andl	r8,0x2,COH
80006eac:	c1 c0       	breq	80006ee4 <otg_interrupt+0x3cc>
		// OUT packet sent
		uhd_freeze_pipe(0);
80006eae:	e2 69 00 00 	mov	r9,131072
80006eb2:	fe 68 05 f0 	mov	r8,-129552
80006eb6:	91 09       	st.w	r8[0x0],r9
		uhd_ack_out_ready(0);
80006eb8:	30 29       	mov	r9,2
80006eba:	fe 68 05 60 	mov	r8,-129696
80006ebe:	91 09       	st.w	r8[0x0],r9
		switch(uhd_ctrl_request_phase) {
80006ec0:	fe f8 03 d4 	ld.w	r8,pc[980]
80006ec4:	70 08       	ld.w	r8,r8[0x0]
80006ec6:	58 18       	cp.w	r8,1
80006ec8:	c0 50       	breq	80006ed2 <otg_interrupt+0x3ba>
80006eca:	58 48       	cp.w	r8,4
80006ecc:	e0 81 01 b9 	brne	8000723e <otg_interrupt+0x726>
80006ed0:	c0 58       	rjmp	80006eda <otg_interrupt+0x3c2>
		case UHD_CTRL_REQ_PHASE_DATA_OUT:
			uhd_ctrl_phase_data_out();
80006ed2:	f0 1f 00 f2 	mcall	80007298 <otg_interrupt+0x780>
80006ed6:	e0 8f 01 b4 	bral	8000723e <otg_interrupt+0x726>
			break;
		case UHD_CTRL_REQ_PHASE_ZLP_OUT:
			uhd_ctrl_request_end(UHD_TRANS_NOERROR);
80006eda:	30 0c       	mov	r12,0
80006edc:	f0 1f 00 e8 	mcall	8000727c <otg_interrupt+0x764>
80006ee0:	e0 8f 01 af 	bral	8000723e <otg_interrupt+0x726>
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_stall(0)) {
80006ee4:	fe 68 05 30 	mov	r8,-129744
80006ee8:	70 08       	ld.w	r8,r8[0x0]
80006eea:	e2 18 00 40 	andl	r8,0x40,COH
80006eee:	c0 a0       	breq	80006f02 <otg_interrupt+0x3ea>
		// Stall Handshake received
		uhd_ack_stall(0);
80006ef0:	34 09       	mov	r9,64
80006ef2:	fe 68 05 60 	mov	r8,-129696
80006ef6:	91 09       	st.w	r8[0x0],r9
		uhd_ctrl_request_end(UHD_TRANS_STALL);
80006ef8:	30 4c       	mov	r12,4
80006efa:	f0 1f 00 e1 	mcall	8000727c <otg_interrupt+0x764>
80006efe:	e0 8f 01 a0 	bral	8000723e <otg_interrupt+0x726>
		return;
	}
	if (Is_uhd_pipe_error(0)) {
80006f02:	fe 68 05 30 	mov	r8,-129744
80006f06:	70 08       	ld.w	r8,r8[0x0]
80006f08:	e2 18 00 08 	andl	r8,0x8,COH
80006f0c:	e0 80 01 99 	breq	8000723e <otg_interrupt+0x726>
		// Get and ack error
		uhd_ctrl_request_end(uhd_pipe_get_error(0));
80006f10:	30 0c       	mov	r12,0
80006f12:	f0 1f 00 e5 	mcall	800072a4 <otg_interrupt+0x78c>
80006f16:	f0 1f 00 da 	mcall	8000727c <otg_interrupt+0x764>
80006f1a:	e0 8f 01 92 	bral	8000723e <otg_interrupt+0x726>
	if (pipe_int == 0) {
		// Interrupt acked by control endpoint managed
		uhd_ctrl_interrupt();
		return;
	}
	if (pipe_int != AVR32_USBB_EPT_NUM) {
80006f1e:	30 78       	mov	r8,7
80006f20:	f0 07 18 00 	cp.b	r7,r8
80006f24:	c6 60       	breq	80006ff0 <otg_interrupt+0x4d8>
 *
 * \param pipe  Pipe number
 */
static void uhd_pipe_interrupt(uint8_t pipe)
{
	if (Is_uhd_bank_interrupt_enabled(pipe) && (0==uhd_nb_busy_bank(pipe))) {
80006f26:	ee 08 15 02 	lsl	r8,r7,0x2
80006f2a:	fe 6a 05 c0 	mov	r10,-129600
80006f2e:	f0 0a 00 09 	add	r9,r8,r10
80006f32:	72 0a       	ld.w	r10,r9[0x0]
80006f34:	e2 1a 10 00 	andl	r10,0x1000,COH
80006f38:	c1 40       	breq	80006f60 <otg_interrupt+0x448>
80006f3a:	fe 6c 05 30 	mov	r12,-129744
80006f3e:	f0 0c 00 0a 	add	r10,r8,r12
80006f42:	74 0a       	ld.w	r10,r10[0x0]
80006f44:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
80006f48:	c0 c1       	brne	80006f60 <otg_interrupt+0x448>
		uhd_disable_bank_interrupt(pipe);
80006f4a:	e0 38 f9 e0 	sub	r8,129504
80006f4e:	e0 69 10 00 	mov	r9,4096
80006f52:	91 09       	st.w	r8[0x0],r9
		uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
80006f54:	30 0b       	mov	r11,0
80006f56:	0e 9c       	mov	r12,r7
80006f58:	f0 1f 00 d4 	mcall	800072a8 <otg_interrupt+0x790>
80006f5c:	e0 8f 01 71 	bral	8000723e <otg_interrupt+0x726>
		return;
	}
	if (Is_uhd_out_ready_interrupt_enabled(pipe) && Is_uhd_out_ready(pipe)) {
80006f60:	72 09       	ld.w	r9,r9[0x0]
80006f62:	e2 19 00 02 	andl	r9,0x2,COH
80006f66:	c2 00       	breq	80006fa6 <otg_interrupt+0x48e>
80006f68:	fe 6b 05 30 	mov	r11,-129744
80006f6c:	f0 0b 00 09 	add	r9,r8,r11
80006f70:	72 09       	ld.w	r9,r9[0x0]
80006f72:	e2 19 00 02 	andl	r9,0x2,COH
80006f76:	c1 80       	breq	80006fa6 <otg_interrupt+0x48e>
		uhd_disable_out_ready_interrupt(pipe);
80006f78:	fe 6a 06 20 	mov	r10,-129504
80006f7c:	f0 0a 00 09 	add	r9,r8,r10
80006f80:	30 2a       	mov	r10,2
80006f82:	93 0a       	st.w	r9[0x0],r10
		// One bank is free then send a ZLP
		uhd_ack_out_ready(pipe);
80006f84:	fe 6c 05 60 	mov	r12,-129696
80006f88:	f0 0c 00 0b 	add	r11,r8,r12
80006f8c:	97 0a       	st.w	r11[0x0],r10
		uhd_ack_fifocon(pipe);
80006f8e:	e0 6a 40 00 	mov	r10,16384
80006f92:	93 0a       	st.w	r9[0x0],r10
		uhd_unfreeze_pipe(pipe);
80006f94:	e2 6a 00 00 	mov	r10,131072
80006f98:	93 0a       	st.w	r9[0x0],r10
		uhd_enable_bank_interrupt(pipe);
80006f9a:	e0 38 fa 10 	sub	r8,129552
80006f9e:	e0 69 10 00 	mov	r9,4096
80006fa2:	91 09       	st.w	r8[0x0],r9
80006fa4:	c4 d9       	rjmp	8000723e <otg_interrupt+0x726>
		return;
	}
	if (Is_uhd_stall(pipe)) {
80006fa6:	fe 6b 05 30 	mov	r11,-129744
80006faa:	f0 0b 00 09 	add	r9,r8,r11
80006fae:	72 0a       	ld.w	r10,r9[0x0]
80006fb0:	e2 1a 00 40 	andl	r10,0x40,COH
80006fb4:	c1 10       	breq	80006fd6 <otg_interrupt+0x4be>
		uhd_ack_stall(pipe);
80006fb6:	fe 6a 05 60 	mov	r10,-129696
80006fba:	f0 0a 00 09 	add	r9,r8,r10
80006fbe:	34 0a       	mov	r10,64
80006fc0:	93 0a       	st.w	r9[0x0],r10
		uhd_reset_data_toggle(pipe);
80006fc2:	e0 38 fa 10 	sub	r8,129552
80006fc6:	e4 69 00 00 	mov	r9,262144
80006fca:	91 09       	st.w	r8[0x0],r9
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
80006fcc:	30 4b       	mov	r11,4
80006fce:	0e 9c       	mov	r12,r7
80006fd0:	f0 1f 00 ad 	mcall	80007284 <otg_interrupt+0x76c>
80006fd4:	c3 59       	rjmp	8000723e <otg_interrupt+0x726>
		return;
	}
	if (Is_uhd_pipe_error(pipe)) {
80006fd6:	72 08       	ld.w	r8,r9[0x0]
80006fd8:	e2 18 00 08 	andl	r8,0x8,COH
80006fdc:	e0 80 01 31 	breq	8000723e <otg_interrupt+0x726>
		// Get and ack error
		uhd_ep_abort_pipe(pipe, uhd_pipe_get_error(pipe));
80006fe0:	0e 9c       	mov	r12,r7
80006fe2:	f0 1f 00 b1 	mcall	800072a4 <otg_interrupt+0x78c>
80006fe6:	18 9b       	mov	r11,r12
80006fe8:	0e 9c       	mov	r12,r7
80006fea:	f0 1f 00 a7 	mcall	80007284 <otg_interrupt+0x76c>
80006fee:	c2 89       	rjmp	8000723e <otg_interrupt+0x726>
	if (pipe_int != AVR32_USBB_EPT_NUM) {
		// Interrupt acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt(pipe_int);
		return;
	}
	pipe_int = uhd_get_pipe_dma_interrupt_number();
80006ff0:	fe 68 00 00 	mov	r8,-131072
80006ff4:	f0 f9 04 04 	ld.w	r9,r8[1028]
80006ff8:	f0 fc 04 10 	ld.w	r12,r8[1040]
80006ffc:	f2 08 16 19 	lsr	r8,r9,0x19
80007000:	f1 ec 03 9c 	and	r12,r8,r12>>0x19
80007004:	a7 ac       	sbr	r12,0x6
80007006:	5c 9c       	brev	r12
80007008:	f8 0c 12 00 	clz	r12,r12
8000700c:	2f fc       	sub	r12,-1
	if (pipe_int != AVR32_USBB_EPT_NUM) {
8000700e:	30 78       	mov	r8,7
80007010:	f0 0c 18 00 	cp.b	r12,r8
80007014:	c4 20       	breq	80007098 <otg_interrupt+0x580>
static void uhd_pipe_interrupt_dma(uint8_t pipe)
{
	uhd_pipe_job_t *ptr_job;
	uint32_t nb_remaining;

	if (uhd_pipe_dma_get_status(pipe)
80007016:	18 9a       	mov	r10,r12
80007018:	f8 08 15 04 	lsl	r8,r12,0x4
8000701c:	e0 38 f9 00 	sub	r8,129280
80007020:	70 39       	ld.w	r9,r8[0xc]
80007022:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80007026:	e0 81 01 0c 	brne	8000723e <otg_interrupt+0x726>
			& AVR32_USBB_UHDMA1_STATUS_CH_EN_MASK) {
		return; // Ignore EOT_STA interrupt
	}
	// Save number of data no transfered
	nb_remaining = (uhd_pipe_dma_get_status(pipe) &
8000702a:	70 3b       	ld.w	r11,r8[0xc]
8000702c:	b1 8b       	lsr	r11,0x10
			AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_MASK)
			>> AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_OFFSET;
	if (nb_remaining) {
8000702e:	c0 d0       	breq	80007048 <otg_interrupt+0x530>
		// Get job corresponding at endpoint
		ptr_job = &uhd_pipe_job[pipe - 1];
80007030:	f8 c8 00 01 	sub	r8,r12,1
80007034:	f0 08 00 28 	add	r8,r8,r8<<0x2
80007038:	fe f9 02 48 	ld.w	r9,pc[584]
8000703c:	f2 08 00 28 	add	r8,r9,r8<<0x2

		// Transfer no complete (short packet or ZLP) then:
		// Update number of transfered data
		ptr_job->nb_trans -= nb_remaining;
80007040:	70 39       	ld.w	r9,r8[0xc]
80007042:	16 19       	sub	r9,r11
80007044:	91 39       	st.w	r8[0xc],r9

		// Set transfer complete to stop the transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80007046:	91 29       	st.w	r8[0x8],r9
	}

	if (uhd_is_pipe_out(pipe)) {
80007048:	f4 08 15 02 	lsl	r8,r10,0x2
8000704c:	fe 6a 05 00 	mov	r10,-129792
80007050:	f0 0a 00 09 	add	r9,r8,r10
80007054:	72 09       	ld.w	r9,r9[0x0]
80007056:	f3 d9 c1 02 	bfextu	r9,r9,0x8,0x2
8000705a:	58 29       	cp.w	r9,2
8000705c:	c0 71       	brne	8000706a <otg_interrupt+0x552>
		// Wait that all banks are free to freeze clock of OUT endpoint
		// and call callback
		uhd_enable_bank_interrupt(pipe);
8000705e:	e0 38 fa 10 	sub	r8,129552
80007062:	e0 69 10 00 	mov	r9,4096
80007066:	91 09       	st.w	r8[0x0],r9
80007068:	ce b8       	rjmp	8000723e <otg_interrupt+0x726>
	} else {
		if (!Is_uhd_pipe_frozen(pipe)) {
8000706a:	fe 6a 05 c0 	mov	r10,-129600
8000706e:	f0 0a 00 09 	add	r9,r8,r10
80007072:	72 0a       	ld.w	r10,r9[0x0]
80007074:	e6 1a 00 02 	andh	r10,0x2,COH
80007078:	c0 d1       	brne	80007092 <otg_interrupt+0x57a>
			// Pipe is not freeze in case of :
			// - incomplete transfer when the request number INRQ is not complete.
			// - low USB speed and with a high CPU frequency,
			// a ACK from host can be always running on USB line.

			if (nb_remaining) {
8000707a:	58 0b       	cp.w	r11,0
8000707c:	c0 70       	breq	8000708a <otg_interrupt+0x572>
				// Freeze pipe in case of incomplete transfer
				uhd_freeze_pipe(pipe);
8000707e:	e0 38 fa 10 	sub	r8,129552
80007082:	e2 69 00 00 	mov	r9,131072
80007086:	91 09       	st.w	r8[0x0],r9
80007088:	c0 58       	rjmp	80007092 <otg_interrupt+0x57a>
			} else {
				// Wait freeze in case of ASK on going
				while (!Is_uhd_pipe_frozen(pipe)) {
8000708a:	72 08       	ld.w	r8,r9[0x0]
8000708c:	e6 18 00 02 	andh	r8,0x2,COH
80007090:	cf d0       	breq	8000708a <otg_interrupt+0x572>
				}
			}
		}
		uhd_pipe_trans_complet(pipe);
80007092:	f0 1f 00 87 	mcall	800072ac <otg_interrupt+0x794>
80007096:	cd 48       	rjmp	8000723e <otg_interrupt+0x726>
		// Interrupt DMA acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt_dma(pipe_int);
		return;
	}
	// USB bus reset detection
	if (Is_uhd_reset_sent()) {
80007098:	fe 68 04 04 	mov	r8,-130044
8000709c:	70 08       	ld.w	r8,r8[0x0]
8000709e:	e2 18 00 04 	andl	r8,0x4,COH
800070a2:	c0 d0       	breq	800070bc <otg_interrupt+0x5a4>
		uhd_ack_reset_sent();
800070a4:	30 49       	mov	r9,4
800070a6:	fe 68 04 08 	mov	r8,-130040
800070aa:	91 09       	st.w	r8[0x0],r9
		if (uhd_reset_callback != NULL) {
800070ac:	fe f8 02 04 	ld.w	r8,pc[516]
800070b0:	70 08       	ld.w	r8,r8[0x0]
800070b2:	58 08       	cp.w	r8,0
800070b4:	e0 80 00 c5 	breq	8000723e <otg_interrupt+0x726>
			uhd_reset_callback();
800070b8:	5d 18       	icall	r8
800070ba:	cc 28       	rjmp	8000723e <otg_interrupt+0x726>
		}
		return;
	}

	// Manage dis/connection event
	if (Is_uhd_disconnection() && Is_uhd_disconnection_int_enabled()) {
800070bc:	fe 68 04 04 	mov	r8,-130044
800070c0:	70 08       	ld.w	r8,r8[0x0]
800070c2:	e2 18 00 02 	andl	r8,0x2,COH
800070c6:	c2 80       	breq	80007116 <otg_interrupt+0x5fe>
800070c8:	fe 68 04 10 	mov	r8,-130032
800070cc:	70 08       	ld.w	r8,r8[0x0]
800070ce:	e2 18 00 02 	andl	r8,0x2,COH
800070d2:	c2 20       	breq	80007116 <otg_interrupt+0x5fe>
		uhd_ack_disconnection();
800070d4:	30 28       	mov	r8,2
800070d6:	fe 69 04 08 	mov	r9,-130040
800070da:	93 08       	st.w	r9[0x0],r8
		uhd_disable_disconnection_int();
800070dc:	fe 69 04 14 	mov	r9,-130028
800070e0:	93 08       	st.w	r9[0x0],r8
		// Stop reset signal, in case of disconnection during reset
		uhd_stop_reset();
800070e2:	fe 68 04 00 	mov	r8,-130048
800070e6:	70 09       	ld.w	r9,r8[0x0]
800070e8:	a9 d9       	cbr	r9,0x9
800070ea:	91 09       	st.w	r8[0x0],r9
		// Disable wakeup/resumes interrupts,
		// in case of disconnection during suspend mode
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
800070ec:	35 89       	mov	r9,88
800070ee:	fe 68 00 00 	mov	r8,-131072
800070f2:	f1 49 04 14 	st.w	r8[1044],r9
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
800070f6:	30 3c       	mov	r12,3
800070f8:	f0 1f 00 5c 	mcall	80007268 <otg_interrupt+0x750>
		uhd_enable_connection_int();
800070fc:	30 19       	mov	r9,1
800070fe:	fe 68 04 18 	mov	r8,-130024
80007102:	91 09       	st.w	r8[0x0],r9
		uhd_suspend_start = 0;
80007104:	30 08       	mov	r8,0
80007106:	4d 89       	lddpc	r9,80007264 <otg_interrupt+0x74c>
80007108:	b2 88       	st.b	r9[0x0],r8
		uhd_resume_start = 0;
8000710a:	4d 99       	lddpc	r9,8000726c <otg_interrupt+0x754>
8000710c:	b2 88       	st.b	r9[0x0],r8
		uhc_notify_connection(false);
8000710e:	30 0c       	mov	r12,0
80007110:	f0 1f 00 69 	mcall	800072b4 <otg_interrupt+0x79c>
80007114:	c9 58       	rjmp	8000723e <otg_interrupt+0x726>
		return;
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
80007116:	fe 68 04 04 	mov	r8,-130044
8000711a:	70 08       	ld.w	r8,r8[0x0]
8000711c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007120:	c2 30       	breq	80007166 <otg_interrupt+0x64e>
80007122:	fe 68 04 10 	mov	r8,-130032
80007126:	70 08       	ld.w	r8,r8[0x0]
80007128:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000712c:	c1 d0       	breq	80007166 <otg_interrupt+0x64e>
		uhd_ack_connection();
8000712e:	30 17       	mov	r7,1
80007130:	fe 68 04 08 	mov	r8,-130040
80007134:	91 07       	st.w	r8[0x0],r7
		uhd_disable_connection_int();
80007136:	fe 68 04 14 	mov	r8,-130028
8000713a:	91 07       	st.w	r8[0x0],r7
		uhd_enable_disconnection_int();
8000713c:	30 29       	mov	r9,2
8000713e:	fe 68 04 18 	mov	r8,-130024
80007142:	91 09       	st.w	r8[0x0],r9
		uhd_enable_sof();
80007144:	fe 68 04 00 	mov	r8,-130048
80007148:	70 09       	ld.w	r9,r8[0x0]
8000714a:	a9 a9       	sbr	r9,0x8
8000714c:	91 09       	st.w	r8[0x0],r9
		uhd_sleep_mode(UHD_STATE_IDLE);
8000714e:	30 5c       	mov	r12,5
80007150:	f0 1f 00 46 	mcall	80007268 <otg_interrupt+0x750>
		uhd_suspend_start = 0;
80007154:	30 08       	mov	r8,0
80007156:	4c 49       	lddpc	r9,80007264 <otg_interrupt+0x74c>
80007158:	b2 88       	st.b	r9[0x0],r8
		uhd_resume_start = 0;
8000715a:	4c 59       	lddpc	r9,8000726c <otg_interrupt+0x754>
8000715c:	b2 88       	st.b	r9[0x0],r8
		uhc_notify_connection(true);
8000715e:	0e 9c       	mov	r12,r7
80007160:	f0 1f 00 55 	mcall	800072b4 <otg_interrupt+0x79c>
80007164:	c6 d8       	rjmp	8000723e <otg_interrupt+0x726>
		return;
	}

	// Manage Vbus error
	if (Is_uhd_vbus_error_interrupt()) {
80007166:	fe 68 08 04 	mov	r8,-129020
8000716a:	70 08       	ld.w	r8,r8[0x0]
8000716c:	e2 18 00 08 	andl	r8,0x8,COH
80007170:	c0 80       	breq	80007180 <otg_interrupt+0x668>
		uhd_ack_vbus_error_interrupt();
80007172:	30 89       	mov	r9,8
80007174:	fe 68 08 08 	mov	r8,-129016
80007178:	91 09       	st.w	r8[0x0],r9
		UHC_VBUS_ERROR();
8000717a:	f0 1f 00 50 	mcall	800072b8 <otg_interrupt+0x7a0>
8000717e:	c6 08       	rjmp	8000723e <otg_interrupt+0x726>
		return;
	}

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
80007180:	fe 69 08 04 	mov	r9,-129020
80007184:	72 08       	ld.w	r8,r9[0x0]
80007186:	e2 18 40 00 	andl	r8,0x4000,COH
8000718a:	cf d0       	breq	80007184 <otg_interrupt+0x66c>
	otg_unfreeze_clock();
8000718c:	fe 68 08 00 	mov	r8,-129024
80007190:	70 09       	ld.w	r9,r8[0x0]
80007192:	af c9       	cbr	r9,0xe
80007194:	91 09       	st.w	r8[0x0],r9

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
80007196:	fe 68 04 10 	mov	r8,-130032
8000719a:	70 08       	ld.w	r8,r8[0x0]
8000719c:	e2 18 00 40 	andl	r8,0x40,COH
800071a0:	c2 d0       	breq	800071fa <otg_interrupt+0x6e2>
800071a2:	fe 68 04 04 	mov	r8,-130044
800071a6:	70 08       	ld.w	r8,r8[0x0]
800071a8:	e2 18 00 40 	andl	r8,0x40,COH
800071ac:	c0 d1       	brne	800071c6 <otg_interrupt+0x6ae>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
800071ae:	fe 68 04 04 	mov	r8,-130044
800071b2:	70 08       	ld.w	r8,r8[0x0]

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
	otg_unfreeze_clock();

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
800071b4:	e2 18 00 08 	andl	r8,0x8,COH
800071b8:	c0 71       	brne	800071c6 <otg_interrupt+0x6ae>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
800071ba:	fe 68 04 04 	mov	r8,-130044
800071be:	70 08       	ld.w	r8,r8[0x0]

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
	otg_unfreeze_clock();

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
800071c0:	e2 18 00 10 	andl	r8,0x10,COH
800071c4:	c1 b0       	breq	800071fa <otg_interrupt+0x6e2>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
		// Disable wakeup/resumes interrupts
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
800071c6:	35 89       	mov	r9,88
800071c8:	fe 68 00 00 	mov	r8,-131072
800071cc:	f1 49 04 14 	st.w	r8[1044],r9
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_enable_sof();
800071d0:	fe 68 04 00 	mov	r8,-130048
800071d4:	70 09       	ld.w	r9,r8[0x0]
800071d6:	a9 a9       	sbr	r9,0x8
800071d8:	91 09       	st.w	r8[0x0],r9
		if ((!Is_uhd_downstream_resume())
800071da:	fe 68 04 04 	mov	r8,-130044
800071de:	70 08       	ld.w	r8,r8[0x0]
800071e0:	e2 18 00 08 	andl	r8,0x8,COH
800071e4:	c0 41       	brne	800071ec <otg_interrupt+0x6d4>
				&&(!Is_uhd_disconnection())) {
800071e6:	fe 68 04 04 	mov	r8,-130044
800071ea:	70 08       	ld.w	r8,r8[0x0]
			if (Is_uhd_high_speed_mode()) {
				uhd_send_resume();
			}
		}
		// Wait 50ms before restarting transfer
		uhd_resume_start = 50;
800071ec:	33 29       	mov	r9,50
800071ee:	4a 08       	lddpc	r8,8000726c <otg_interrupt+0x754>
800071f0:	b0 89       	st.b	r8[0x0],r9
		uhd_sleep_mode(UHD_STATE_IDLE);
800071f2:	30 5c       	mov	r12,5
800071f4:	f0 1f 00 1d 	mcall	80007268 <otg_interrupt+0x750>
800071f8:	c2 38       	rjmp	8000723e <otg_interrupt+0x726>
		return;
	}

	// Manage Vbus state change
	if (Is_otg_vbus_transition()) {
800071fa:	fe 68 08 04 	mov	r8,-129020
800071fe:	70 08       	ld.w	r8,r8[0x0]
80007200:	e2 18 00 02 	andl	r8,0x2,COH
80007204:	c1 d0       	breq	8000723e <otg_interrupt+0x726>
		otg_ack_vbus_transition();
80007206:	30 29       	mov	r9,2
80007208:	fe 68 08 08 	mov	r8,-129016
8000720c:	91 09       	st.w	r8[0x0],r9
		if (Is_otg_vbus_high()) {
8000720e:	fe 68 08 04 	mov	r8,-129020
80007212:	70 08       	ld.w	r8,r8[0x0]
80007214:	e2 18 08 00 	andl	r8,0x800,COH
80007218:	c0 80       	breq	80007228 <otg_interrupt+0x710>
			uhd_sleep_mode(UHD_STATE_DISCONNECT);
8000721a:	30 3c       	mov	r12,3
8000721c:	f0 1f 00 13 	mcall	80007268 <otg_interrupt+0x750>
			UHC_VBUS_CHANGE(true);
80007220:	30 1c       	mov	r12,1
80007222:	f0 1f 00 27 	mcall	800072bc <otg_interrupt+0x7a4>
80007226:	c0 c8       	rjmp	8000723e <otg_interrupt+0x726>
		} else {
			uhd_sleep_mode(UHD_STATE_NO_VBUS);
80007228:	30 2c       	mov	r12,2
8000722a:	f0 1f 00 10 	mcall	80007268 <otg_interrupt+0x750>
			otg_freeze_clock();
8000722e:	fe 68 08 00 	mov	r8,-129024
80007232:	70 09       	ld.w	r9,r8[0x0]
80007234:	af a9       	sbr	r9,0xe
80007236:	91 09       	st.w	r8[0x0],r9
			UHC_VBUS_CHANGE(false);
80007238:	30 0c       	mov	r12,0
8000723a:	f0 1f 00 21 	mcall	800072bc <otg_interrupt+0x7a4>
	if (b_mode_device) {
		udd_interrupt();
	} else {
		uhd_interrupt();
	}
	otg_data_memory_barrier();
8000723e:	fe 68 00 00 	mov	r8,-131072
80007242:	f0 f8 08 18 	ld.w	r8,r8[2072]
}
80007246:	2f fd       	sub	sp,-4
80007248:	d4 32       	popm	r0-r7,lr
8000724a:	d6 03       	rete
8000724c:	80 00       	ld.sh	r0,r0[0x0]
8000724e:	84 bc       	ld.uh	r12,r2[0x6]
80007250:	80 00       	ld.sh	r0,r0[0x0]
80007252:	42 f4       	lddsp	r4,sp[0xbc]
80007254:	80 00       	ld.sh	r0,r0[0x0]
80007256:	83 64       	st.w	r1[0x18],r4
80007258:	80 00       	ld.sh	r0,r0[0x0]
8000725a:	83 50       	st.w	r1[0x14],r0
8000725c:	80 00       	ld.sh	r0,r0[0x0]
8000725e:	84 c8       	ld.uh	r8,r2[0x8]
80007260:	80 00       	ld.sh	r0,r0[0x0]
80007262:	56 90       	stdsp	sp[0x1a4],r0
80007264:	00 00       	add	r0,r0
80007266:	0b 10       	ld.sh	r0,r5++
80007268:	80 00       	ld.sh	r0,r0[0x0]
8000726a:	62 c8       	ld.w	r8,r1[0x30]
8000726c:	00 00       	add	r0,r0
8000726e:	0b 13       	ld.sh	r3,r5++
80007270:	00 00       	add	r0,r0
80007272:	0b 11       	ld.sh	r1,r5++
80007274:	80 00       	ld.sh	r0,r0[0x0]
80007276:	84 ec       	ld.uh	r12,r2[0xc]
80007278:	00 00       	add	r0,r0
8000727a:	0c 64       	and	r4,r6
8000727c:	80 00       	ld.sh	r0,r0[0x0]
8000727e:	63 e0       	ld.w	r0,r1[0x78]
80007280:	00 00       	add	r0,r0
80007282:	0a 98       	mov	r8,r5
80007284:	80 00       	ld.sh	r0,r0[0x0]
80007286:	60 20       	ld.w	r0,r0[0x8]
80007288:	80 00       	ld.sh	r0,r0[0x0]
8000728a:	83 ac       	st.w	r1[0x28],r12
8000728c:	80 00       	ld.sh	r0,r0[0x0]
8000728e:	45 30       	lddsp	r0,sp[0x14c]
80007290:	00 00       	add	r0,r0
80007292:	0c 58       	eor	r8,r6
80007294:	00 00       	add	r0,r0
80007296:	0c 54       	eor	r4,r6
80007298:	80 00       	ld.sh	r0,r0[0x0]
8000729a:	5d b8       	*unknown*
8000729c:	80 00       	ld.sh	r0,r0[0x0]
8000729e:	5d 78       	*unknown*
800072a0:	00 00       	add	r0,r0
800072a2:	0c 5c       	eor	r12,r6
800072a4:	80 00       	ld.sh	r0,r0[0x0]
800072a6:	5e f0       	retal	r0
800072a8:	80 00       	ld.sh	r0,r0[0x0]
800072aa:	5f 9c       	srgt	r12
800072ac:	80 00       	ld.sh	r0,r0[0x0]
800072ae:	60 88       	ld.w	r8,r0[0x20]
800072b0:	00 00       	add	r0,r0
800072b2:	0a 94       	mov	r4,r5
800072b4:	80 00       	ld.sh	r0,r0[0x0]
800072b6:	85 24       	st.w	r2[0x8],r4
800072b8:	80 00       	ld.sh	r0,r0[0x0]
800072ba:	41 96       	lddsp	r6,sp[0x64]
800072bc:	80 00       	ld.sh	r0,r0[0x0]
800072be:	41 94       	lddsp	r4,sp[0x64]

800072c0 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800072c0:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800072c4:	fe c0 86 c4 	sub	r0,pc,-31036

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800072c8:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800072cc:	d5 53       	csrf	0x15
  cp      r0, r1
800072ce:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800072d0:	e0 61 09 08 	mov	r1,2312
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
800072d4:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
800072d6:	c0 62       	brcc	800072e2 <idata_load_loop_end>
  cp      r0, r1
800072d8:	48 92       	lddpc	r2,800072fc <udata_clear_loop_end+0x4>

800072da <idata_load_loop>:
  brlo    idata_load_loop
800072da:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800072dc:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
800072de:	02 30       	cp.w	r0,r1
  cp      r0, r1
800072e0:	cf d3       	brcs	800072da <idata_load_loop>

800072e2 <idata_load_loop_end>:
  brhs    udata_clear_loop_end
800072e2:	e0 60 09 08 	mov	r0,2312
  mov     r2, 0
  mov     r3, 0
800072e6:	e0 61 0c d8 	mov	r1,3288
udata_clear_loop:
  st.d    r0++, r2
  cp      r0, r1
800072ea:	02 30       	cp.w	r0,r1
  brlo    udata_clear_loop
800072ec:	c0 62       	brcc	800072f8 <udata_clear_loop_end>
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800072ee:	30 02       	mov	r2,0
800072f0:	30 03       	mov	r3,0

800072f2 <udata_clear_loop>:
800072f2:	a1 22       	st.d	r0++,r2
800072f4:	02 30       	cp.w	r0,r1
800072f6:	cf e3       	brcs	800072f2 <udata_clear_loop>

800072f8 <udata_clear_loop_end>:
800072f8:	fe cf e2 f4 	sub	pc,pc,-7436
800072fc:	80 00       	ld.sh	r0,r0[0x0]
800072fe:	f5 c8       	*unknown*

80007300 <sysclk_priv_disable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007300:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80007304:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80007306:	fe 78 0c 00 	mov	r8,-62464
8000730a:	71 59       	ld.w	r9,r8[0x54]
8000730c:	e2 19 00 40 	andl	r9,0x40,COH
80007310:	cf d0       	breq	8000730a <sysclk_priv_disable_module+0xa>
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80007312:	a3 6c       	lsl	r12,0x2
80007314:	e0 2c f3 f8 	sub	r12,62456
80007318:	78 09       	ld.w	r9,r12[0x0]
	mask &= ~(1U << module_index);
8000731a:	30 18       	mov	r8,1
8000731c:	f0 0b 09 48 	lsl	r8,r8,r11
80007320:	5c d8       	com	r8
80007322:	12 68       	and	r8,r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
80007324:	99 08       	st.w	r12[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80007326:	14 98       	mov	r8,r10
80007328:	e6 18 00 01 	andh	r8,0x1,COH
8000732c:	c0 21       	brne	80007330 <sysclk_priv_disable_module+0x30>
      cpu_irq_enable();
8000732e:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80007330:	5e fc       	retal	r12
80007332:	d7 03       	nop

80007334 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(unsigned int index)
{
80007334:	eb cd 40 80 	pushm	r7,lr
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_PBB, index);
80007338:	18 9b       	mov	r11,r12
8000733a:	30 3c       	mov	r12,3
8000733c:	f0 1f 00 0b 	mcall	80007368 <sysclk_disable_pbb_module+0x34>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007340:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80007344:	d3 03       	ssrf	0x10

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	sysclk_pbb_refcount--;
80007346:	48 a9       	lddpc	r9,8000736c <sysclk_disable_pbb_module+0x38>
80007348:	13 88       	ld.ub	r8,r9[0x0]
8000734a:	20 18       	sub	r8,1
8000734c:	5c 58       	castu.b	r8
8000734e:	b2 88       	st.b	r9[0x0],r8
	if (!sysclk_pbb_refcount)
80007350:	c0 51       	brne	8000735a <sysclk_disable_pbb_module+0x26>
 * \brief Disable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(unsigned int index)
{
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_HSB, index);
80007352:	30 2b       	mov	r11,2
80007354:	30 1c       	mov	r12,1
80007356:	f0 1f 00 05 	mcall	80007368 <sysclk_disable_pbb_module+0x34>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000735a:	e6 17 00 01 	andh	r7,0x1,COH
8000735e:	c0 21       	brne	80007362 <sysclk_disable_pbb_module+0x2e>
      cpu_irq_enable();
80007360:	d5 03       	csrf	0x10
		sysclk_disable_hsb_module(SYSCLK_PBB_BRIDGE);

	cpu_irq_restore(flags);
}
80007362:	e3 cd 80 80 	ldm	sp++,r7,pc
80007366:	00 00       	add	r0,r0
80007368:	80 00       	ld.sh	r0,r0[0x0]
8000736a:	73 00       	ld.w	r0,r9[0x40]
8000736c:	00 00       	add	r0,r0
8000736e:	0b 19       	ld.sh	r9,r5++

80007370 <sysclk_disable_usb>:

/**
 * \brief Disable the USB generic clock
 */
void sysclk_disable_usb(void)
{
80007370:	d4 01       	pushm	lr
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
}

static inline void genclk_disable(unsigned int id)
{
	AVR32_PM.gcctrl[id] = 0;
80007372:	30 09       	mov	r9,0
80007374:	fe 78 0c 00 	mov	r8,-62464
80007378:	f1 49 00 70 	st.w	r8[112],r9
8000737c:	30 3b       	mov	r11,3
8000737e:	30 1c       	mov	r12,1
80007380:	f0 1f 00 03 	mcall	8000738c <sysclk_disable_usb+0x1c>
	genclk_disable(AVR32_PM_GCLK_USBB);
	sysclk_disable_hsb_module(SYSCLK_USBB_DATA);
	sysclk_disable_pbb_module(SYSCLK_USBB_REGS);
80007384:	30 1c       	mov	r12,1
80007386:	f0 1f 00 03 	mcall	80007390 <sysclk_disable_usb+0x20>
}
8000738a:	d8 02       	popm	pc
8000738c:	80 00       	ld.sh	r0,r0[0x0]
8000738e:	73 00       	ld.w	r0,r9[0x40]
80007390:	80 00       	ld.sh	r0,r0[0x0]
80007392:	73 34       	ld.w	r4,r9[0x4c]

80007394 <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007394:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80007398:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000739a:	fe 78 0c 00 	mov	r8,-62464
8000739e:	71 59       	ld.w	r9,r8[0x54]
800073a0:	e2 19 00 40 	andl	r9,0x40,COH
800073a4:	cf d0       	breq	8000739e <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800073a6:	a3 6c       	lsl	r12,0x2
800073a8:	e0 2c f3 f8 	sub	r12,62456
800073ac:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
800073ae:	30 19       	mov	r9,1
800073b0:	f2 0b 09 4b 	lsl	r11,r9,r11
800073b4:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
800073b6:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800073b8:	14 98       	mov	r8,r10
800073ba:	e6 18 00 01 	andh	r8,0x1,COH
800073be:	c0 21       	brne	800073c2 <sysclk_priv_enable_module+0x2e>
      cpu_irq_enable();
800073c0:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
800073c2:	5e fc       	retal	r12

800073c4 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
800073c4:	eb cd 40 c0 	pushm	r6-r7,lr
800073c8:	18 97       	mov	r7,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800073ca:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
800073ce:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
800073d0:	48 c8       	lddpc	r8,80007400 <sysclk_enable_pbb_module+0x3c>
800073d2:	11 89       	ld.ub	r9,r8[0x0]
800073d4:	30 08       	mov	r8,0
800073d6:	f0 09 18 00 	cp.b	r9,r8
800073da:	c0 51       	brne	800073e4 <sysclk_enable_pbb_module+0x20>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
800073dc:	30 2b       	mov	r11,2
800073de:	30 1c       	mov	r12,1
800073e0:	f0 1f 00 09 	mcall	80007404 <sysclk_enable_pbb_module+0x40>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);

	sysclk_pbb_refcount++;
800073e4:	48 78       	lddpc	r8,80007400 <sysclk_enable_pbb_module+0x3c>
800073e6:	11 89       	ld.ub	r9,r8[0x0]
800073e8:	2f f9       	sub	r9,-1
800073ea:	b0 89       	st.b	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800073ec:	e6 16 00 01 	andh	r6,0x1,COH
800073f0:	c0 21       	brne	800073f4 <sysclk_enable_pbb_module+0x30>
      cpu_irq_enable();
800073f2:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
800073f4:	0e 9b       	mov	r11,r7
800073f6:	30 3c       	mov	r12,3
800073f8:	f0 1f 00 03 	mcall	80007404 <sysclk_enable_pbb_module+0x40>
}
800073fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007400:	00 00       	add	r0,r0
80007402:	0b 19       	ld.sh	r9,r5++
80007404:	80 00       	ld.sh	r0,r0[0x0]
80007406:	73 94       	ld.w	r4,r9[0x64]

80007408 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
80007408:	d4 01       	pushm	lr
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
8000740a:	30 1c       	mov	r12,1
8000740c:	f0 1f 00 20 	mcall	8000748c <sysclk_enable_usb+0x84>
80007410:	30 3b       	mov	r11,3
80007412:	30 1c       	mov	r12,1
80007414:	f0 1f 00 1f 	mcall	80007490 <sysclk_enable_usb+0x88>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80007418:	fe 78 0c 00 	mov	r8,-62464
8000741c:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
8000741e:	e2 18 00 02 	andl	r8,0x2,COH
80007422:	c2 f1       	brne	80007480 <sysclk_enable_usb+0x78>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80007424:	fe 78 0c 00 	mov	r8,-62464
80007428:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000742a:	e2 18 00 80 	andl	r8,0x80,COH
8000742e:	c1 71       	brne	8000745c <sysclk_enable_usb+0x54>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007430:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80007434:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80007436:	fe 78 0c 00 	mov	r8,-62464
8000743a:	e0 6a 03 07 	mov	r10,775
8000743e:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80007440:	70 0a       	ld.w	r10,r8[0x0]
80007442:	a3 aa       	sbr	r10,0x2
80007444:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80007446:	12 98       	mov	r8,r9
80007448:	e6 18 00 01 	andh	r8,0x1,COH
8000744c:	c0 21       	brne	80007450 <sysclk_enable_usb+0x48>
      cpu_irq_enable();
8000744e:	d5 03       	csrf	0x10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80007450:	fe 79 0c 00 	mov	r9,-62464
80007454:	73 58       	ld.w	r8,r9[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80007456:	e2 18 00 80 	andl	r8,0x80,COH
8000745a:	cf d0       	breq	80007454 <sysclk_enable_usb+0x4c>
	cfg->ctrl = 0;

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
		mul *= 2;
		vco_hz *= 2;
8000745c:	30 88       	mov	r8,8
static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
8000745e:	a3 a8       	sbr	r8,0x2
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80007460:	31 09       	mov	r9,16
80007462:	20 19       	sub	r9,1
80007464:	b1 69       	lsl	r9,0x10
80007466:	ea 19 3f 00 	orh	r9,0x3f00
8000746a:	e8 19 02 01 	orl	r9,0x201
8000746e:	f3 e8 10 08 	or	r8,r9,r8
80007472:	fe 79 0c 00 	mov	r9,-62464
80007476:	93 98       	st.w	r9[0x24],r8

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80007478:	73 58       	ld.w	r8,r9[0x54]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
8000747a:	e2 18 00 02 	andl	r8,0x2,COH
8000747e:	cf d0       	breq	80007478 <sysclk_enable_usb+0x70>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
80007480:	30 79       	mov	r9,7
80007482:	fe 78 0c 00 	mov	r8,-62464
80007486:	f1 49 00 70 	st.w	r8[112],r9
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
}
8000748a:	d8 02       	popm	pc
8000748c:	80 00       	ld.sh	r0,r0[0x0]
8000748e:	73 c4       	ld.w	r4,r9[0x70]
80007490:	80 00       	ld.sh	r0,r0[0x0]
80007492:	73 94       	ld.w	r4,r9[0x64]

80007494 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80007494:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007496:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000749a:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
8000749c:	fe 78 0c 00 	mov	r8,-62464
800074a0:	e0 6a 03 07 	mov	r10,775
800074a4:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800074a6:	70 0a       	ld.w	r10,r8[0x0]
800074a8:	a3 aa       	sbr	r10,0x2
800074aa:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800074ac:	12 98       	mov	r8,r9
800074ae:	e6 18 00 01 	andh	r8,0x1,COH
800074b2:	c0 21       	brne	800074b6 <sysclk_init+0x22>
      cpu_irq_enable();
800074b4:	d5 03       	csrf	0x10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
800074b6:	fe 78 0c 00 	mov	r8,-62464
800074ba:	71 59       	ld.w	r9,r8[0x54]
800074bc:	e2 19 00 80 	andl	r9,0x80,COH
800074c0:	cf d0       	breq	800074ba <sysclk_init+0x26>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(OSC_ID_OSC0);
		osc_wait_ready(OSC_ID_OSC0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
800074c2:	e0 6c 1b 00 	mov	r12,6912
800074c6:	ea 1c 00 b7 	orh	r12,0xb7
800074ca:	f0 1f 00 0a 	mcall	800074f0 <sysclk_init+0x5c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800074ce:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800074d2:	d3 03       	ssrf	0x10
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
800074d4:	fe 78 0c 00 	mov	r8,-62464
800074d8:	70 0a       	ld.w	r10,r8[0x0]
800074da:	e0 1a ff fc 	andl	r10,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
800074de:	a1 aa       	sbr	r10,0x0
	AVR32_PM.mcctrl = mcctrl;
800074e0:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800074e2:	12 98       	mov	r8,r9
800074e4:	e6 18 00 01 	andh	r8,0x1,COH
800074e8:	c0 21       	brne	800074ec <sysclk_init+0x58>
      cpu_irq_enable();
800074ea:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
800074ec:	d8 02       	popm	pc
800074ee:	00 00       	add	r0,r0
800074f0:	80 00       	ld.sh	r0,r0[0x0]
800074f2:	48 c4       	lddpc	r4,80007520 <uhi_hid_mouse_uninstall+0x2c>

800074f4 <uhi_hid_mouse_uninstall>:
	uhi_hid_mouse_start_trans_report(dev->address);
	UHI_HID_MOUSE_CHANGE(dev, true);
}

void uhi_hid_mouse_uninstall(uhc_device_t* dev)
{
800074f4:	eb cd 40 c0 	pushm	r6-r7,lr
	if (uhi_hid_mouse_dev.dev != dev) 
800074f8:	48 88       	lddpc	r8,80007518 <uhi_hid_mouse_uninstall+0x24>
800074fa:	70 07       	ld.w	r7,r8[0x0]
800074fc:	18 37       	cp.w	r7,r12
800074fe:	c0 a1       	brne	80007512 <uhi_hid_mouse_uninstall+0x1e>
		return; // Device not enabled in this interface

	uhi_hid_mouse_dev.dev = NULL;
80007500:	30 06       	mov	r6,0
80007502:	91 06       	st.w	r8[0x0],r6
	Assert(uhi_hid_mouse_dev.report!=NULL);
	free(uhi_hid_mouse_dev.report);
80007504:	70 2c       	ld.w	r12,r8[0x8]
80007506:	f0 1f 00 06 	mcall	8000751c <uhi_hid_mouse_uninstall+0x28>
	UHI_HID_MOUSE_CHANGE(dev, false);
8000750a:	0c 9b       	mov	r11,r6
8000750c:	0e 9c       	mov	r12,r7
8000750e:	f0 1f 00 05 	mcall	80007520 <uhi_hid_mouse_uninstall+0x2c>
80007512:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007516:	00 00       	add	r0,r0
80007518:	00 00       	add	r0,r0
8000751a:	0b 5c       	ld.sh	r12,--r5
8000751c:	80 00       	ld.sh	r0,r0[0x0]
8000751e:	91 9c       	st.w	r8[0x24],r12
80007520:	80 00       	ld.sh	r0,r0[0x0]
80007522:	41 ec       	lddsp	r12,sp[0x78]

80007524 <uhi_hid_mouse_start_trans_report>:
 * \brief Starts the reception of the HID mouse report
 *
 * \param add   USB address to use
 */
static void uhi_hid_mouse_start_trans_report(usb_add_t add)
{
80007524:	d4 01       	pushm	lr
	// Start transfer on interrupt endpoint IN
	uhd_ep_run(add, uhi_hid_mouse_dev.ep_in, true, uhi_hid_mouse_dev.report,
80007526:	48 7b       	lddpc	r11,80007540 <uhi_hid_mouse_start_trans_report+0x1c>
80007528:	48 78       	lddpc	r8,80007544 <uhi_hid_mouse_start_trans_report+0x20>
8000752a:	1a d8       	st.w	--sp,r8
8000752c:	30 08       	mov	r8,0
8000752e:	1a d8       	st.w	--sp,r8
80007530:	17 d8       	ld.ub	r8,r11[0x5]
80007532:	76 29       	ld.w	r9,r11[0x8]
80007534:	30 1a       	mov	r10,1
80007536:	17 cb       	ld.ub	r11,r11[0x4]
80007538:	f0 1f 00 04 	mcall	80007548 <uhi_hid_mouse_start_trans_report+0x24>
8000753c:	2f ed       	sub	sp,-8
			uhi_hid_mouse_dev.report_size, 0, uhi_hid_mouse_report_reception);
}
8000753e:	d8 02       	popm	pc
80007540:	00 00       	add	r0,r0
80007542:	0b 5c       	ld.sh	r12,--r5
80007544:	80 00       	ld.sh	r0,r0[0x0]
80007546:	75 80       	ld.w	r0,r10[0x60]
80007548:	80 00       	ld.sh	r0,r0[0x0]
8000754a:	62 44       	ld.w	r4,r1[0x10]

8000754c <uhi_hid_mouse_enable>:
	}
	return UHC_ENUM_UNSUPPORTED; // No interface supported
}

void uhi_hid_mouse_enable(uhc_device_t* dev)
{
8000754c:	eb cd 40 80 	pushm	r7,lr
	if (uhi_hid_mouse_dev.dev != dev) 
80007550:	48 98       	lddpc	r8,80007574 <uhi_hid_mouse_enable+0x28>
80007552:	70 07       	ld.w	r7,r8[0x0]
80007554:	18 37       	cp.w	r7,r12
80007556:	c0 c1       	brne	8000756e <uhi_hid_mouse_enable+0x22>
		return;  // No interface to enable

	// Init value
	uhi_hid_mouse_dev.report_btn_prev = 0;
80007558:	30 09       	mov	r9,0
8000755a:	f1 69 00 0c 	st.b	r8[12],r9
	uhi_hid_mouse_start_trans_report(dev->address);
8000755e:	ef 3c 00 12 	ld.ub	r12,r7[18]
80007562:	f0 1f 00 06 	mcall	80007578 <uhi_hid_mouse_enable+0x2c>
	UHI_HID_MOUSE_CHANGE(dev, true);
80007566:	30 1b       	mov	r11,1
80007568:	0e 9c       	mov	r12,r7
8000756a:	f0 1f 00 05 	mcall	8000757c <uhi_hid_mouse_enable+0x30>
8000756e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007572:	00 00       	add	r0,r0
80007574:	00 00       	add	r0,r0
80007576:	0b 5c       	ld.sh	r12,--r5
80007578:	80 00       	ld.sh	r0,r0[0x0]
8000757a:	75 24       	ld.w	r4,r10[0x48]
8000757c:	80 00       	ld.sh	r0,r0[0x0]
8000757e:	41 ec       	lddsp	r12,sp[0x78]

80007580 <uhi_hid_mouse_report_reception>:
static void uhi_hid_mouse_report_reception(
		usb_add_t add,
		usb_ep_t ep,
		uhd_trans_status_t status,
		iram_size_t nb_transfered)
{
80007580:	d4 31       	pushm	r0-r7,lr
80007582:	20 5d       	sub	sp,20
80007584:	50 4c       	stdsp	sp[0x10],r12
	uint8_t i;
	unsigned short val;
	UNUSED(ep);

	if ((status == UHD_TRANS_NOTRESPONDING) || (status == UHD_TRANS_TIMEOUT)) {
80007586:	58 5a       	cp.w	r10,5
80007588:	5f 0b       	sreq	r11
8000758a:	58 7a       	cp.w	r10,7
8000758c:	5f 08       	sreq	r8
8000758e:	f7 e8 10 08 	or	r8,r11,r8
80007592:	c0 50       	breq	8000759c <uhi_hid_mouse_report_reception+0x1c>
		uhi_hid_mouse_start_trans_report(add);
80007594:	f0 1f 01 2d 	mcall	80007a48 <uhi_hid_mouse_report_reception+0x4c8>
		return; // HID mouse transfer restart
80007598:	e0 8f 02 56 	bral	80007a44 <uhi_hid_mouse_report_reception+0x4c4>
	}

	if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
8000759c:	58 0a       	cp.w	r10,0
8000759e:	5f 1a       	srne	r10
800075a0:	58 39       	cp.w	r9,3
800075a2:	5f 88       	srls	r8
800075a4:	f5 e8 10 08 	or	r8,r10,r8
800075a8:	e0 81 02 4e 	brne	80007a44 <uhi_hid_mouse_report_reception+0x4c4>
800075ac:	fe f8 04 a0 	ld.w	r8,pc[1184]
800075b0:	70 29       	ld.w	r9,r8[0x8]
800075b2:	2f f9       	sub	r9,-1
800075b4:	fe f5 04 9c 	ld.w	r5,pc[1180]
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
800075b8:	ea cb ff cc 	sub	r11,r5,-52
800075bc:	0a 98       	mov	r8,r5
	if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
		return; // HID mouse transfer aborted
	}
	// Decode buttons
	for(i=0; i<52; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;		
800075be:	13 3a       	ld.ub	r10,r9++
800075c0:	f4 ca 00 80 	sub	r10,r10,128
800075c4:	10 ca       	st.b	r8++,r10

	if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
		return; // HID mouse transfer aborted
	}
	// Decode buttons
	for(i=0; i<52; i++)
800075c6:	16 38       	cp.w	r8,r11
800075c8:	cf b1       	brne	800075be <uhi_hid_mouse_report_reception+0x3e>
800075ca:	fe f8 04 82 	ld.w	r8,pc[1154]
800075ce:	70 29       	ld.w	r9,r8[0x8]
800075d0:	2c b9       	sub	r9,-53
800075d2:	fe f8 04 82 	ld.w	r8,pc[1154]
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
800075d6:	f0 cb ff fc 	sub	r11,r8,-4
	}
	// Decode buttons
	for(i=0; i<52; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;		
	for(i=0; i<4; i++)
		sliders[i] = uhi_hid_mouse_dev.report[i+53] + 0x80;
800075da:	13 3a       	ld.ub	r10,r9++
800075dc:	f4 ca 00 80 	sub	r10,r10,128
800075e0:	10 ca       	st.b	r8++,r10
		return; // HID mouse transfer aborted
	}
	// Decode buttons
	for(i=0; i<52; i++)
		butt_states[i] = uhi_hid_mouse_dev.report[i+1] + 0x80;		
	for(i=0; i<4; i++)
800075e2:	16 38       	cp.w	r8,r11
800075e4:	cf b1       	brne	800075da <uhi_hid_mouse_report_reception+0x5a>
		sliders[i] = uhi_hid_mouse_dev.report[i+53] + 0x80;
		
    i = 0;
	
	while(i < 52 && butt_states[i] == 0)
800075e6:	fe f8 04 6a 	ld.w	r8,pc[1130]
800075ea:	11 89       	ld.ub	r9,r8[0x0]
800075ec:	30 08       	mov	r8,0
800075ee:	f0 09 18 00 	cp.b	r9,r8
800075f2:	e0 81 01 ee 	brne	800079ce <uhi_hid_mouse_report_reception+0x44e>
800075f6:	fe f8 04 5a 	ld.w	r8,pc[1114]
800075fa:	2f f8       	sub	r8,-1
800075fc:	30 17       	mov	r7,1
800075fe:	30 0a       	mov	r10,0
80007600:	33 4b       	mov	r11,52
80007602:	c0 78       	rjmp	80007610 <uhi_hid_mouse_report_reception+0x90>
		i++;
80007604:	2f f7       	sub	r7,-1
80007606:	5c 57       	castu.b	r7
80007608:	2f f8       	sub	r8,-1
	for(i=0; i<4; i++)
		sliders[i] = uhi_hid_mouse_dev.report[i+53] + 0x80;
		
    i = 0;
	
	while(i < 52 && butt_states[i] == 0)
8000760a:	f6 07 18 00 	cp.b	r7,r11
8000760e:	c0 70       	breq	8000761c <uhi_hid_mouse_report_reception+0x9c>
80007610:	11 89       	ld.ub	r9,r8[0x0]
80007612:	f4 09 18 00 	cp.b	r9,r10
80007616:	cf 70       	breq	80007604 <uhi_hid_mouse_report_reception+0x84>
80007618:	e0 8f 01 dc 	bral	800079d0 <uhi_hid_mouse_report_reception+0x450>
		dip204_hide_cursor();
		UHI_HID_MOUSE_EVENT_BTN_LEFT(1);
	}
	else 
	{
		dip204_set_cursor_position(1,1);
8000761c:	30 1b       	mov	r11,1
8000761e:	16 9c       	mov	r12,r11
80007620:	f0 1f 01 0e 	mcall	80007a58 <uhi_hid_mouse_report_reception+0x4d8>
		dip204_write_string("              ");
80007624:	fe fc 04 38 	ld.w	r12,pc[1080]
80007628:	f0 1f 01 0e 	mcall	80007a60 <uhi_hid_mouse_report_reception+0x4e0>
		UHI_HID_MOUSE_EVENT_BTN_LEFT(0);
8000762c:	30 0c       	mov	r12,0
8000762e:	f0 1f 01 0e 	mcall	80007a64 <uhi_hid_mouse_report_reception+0x4e4>
80007632:	c1 b8       	rjmp	80007668 <uhi_hid_mouse_report_reception+0xe8>
	}
	

	i++;
	
	while(i < 52 && butt_states[i] == 0)
80007634:	fe f9 04 1c 	ld.w	r9,pc[1052]
80007638:	f2 08 07 0a 	ld.ub	r10,r9[r8]
8000763c:	30 09       	mov	r9,0
8000763e:	f2 0a 18 00 	cp.b	r10,r9
80007642:	e0 81 01 ec 	brne	80007a1a <uhi_hid_mouse_report_reception+0x49a>
80007646:	33 3a       	mov	r10,51
80007648:	fe fc 04 08 	ld.w	r12,pc[1032]
8000764c:	12 9b       	mov	r11,r9
		i++;
8000764e:	2f f8       	sub	r8,-1
80007650:	5c 58       	castu.b	r8
	}
	

	i++;
	
	while(i < 52 && butt_states[i] == 0)
80007652:	f4 08 18 00 	cp.b	r8,r10
80007656:	e0 8b 00 09 	brhi	80007668 <uhi_hid_mouse_report_reception+0xe8>
8000765a:	f8 08 07 09 	ld.ub	r9,r12[r8]
8000765e:	f6 09 18 00 	cp.b	r9,r11
80007662:	cf 60       	breq	8000764e <uhi_hid_mouse_report_reception+0xce>
80007664:	e0 8f 01 db 	bral	80007a1a <uhi_hid_mouse_report_reception+0x49a>
		dip204_set_cursor_position(1,2);
		dip204_printf_string("a");
		dip204_hide_cursor();
		UHI_HID_MOUSE_EVENT_BTN_RIGHT(1);
	}
	else UHI_HID_MOUSE_EVENT_BTN_RIGHT(0);
80007668:	30 0c       	mov	r12,0
8000766a:	f0 1f 01 00 	mcall	80007a68 <uhi_hid_mouse_report_reception+0x4e8>
	
	if((sliders[0] != pastsliders[0] && sliders[0] != 255) || (sliders[1] != pastsliders[1] && sliders[1] != 255))
8000766e:	fe f8 03 e6 	ld.w	r8,pc[998]
80007672:	11 88       	ld.ub	r8,r8[0x0]
80007674:	fe f9 03 f8 	ld.w	r9,pc[1016]
80007678:	13 89       	ld.ub	r9,r9[0x0]
8000767a:	f0 09 18 00 	cp.b	r9,r8
8000767e:	c0 50       	breq	80007688 <uhi_hid_mouse_report_reception+0x108>
80007680:	3f f9       	mov	r9,-1
80007682:	f2 08 18 00 	cp.b	r8,r9
80007686:	c0 e1       	brne	800076a2 <uhi_hid_mouse_report_reception+0x122>
80007688:	fe f9 03 cc 	ld.w	r9,pc[972]
8000768c:	13 99       	ld.ub	r9,r9[0x1]
8000768e:	fe fa 03 de 	ld.w	r10,pc[990]
80007692:	15 9a       	ld.ub	r10,r10[0x1]
80007694:	f2 0a 18 00 	cp.b	r10,r9
80007698:	c1 10       	breq	800076ba <uhi_hid_mouse_report_reception+0x13a>
8000769a:	3f fa       	mov	r10,-1
8000769c:	f4 09 18 00 	cp.b	r9,r10
800076a0:	c0 d0       	breq	800076ba <uhi_hid_mouse_report_reception+0x13a>
		dip204_set_cursor_position(1,3);
		dip204_write_string("                    ");
		dip204_set_cursor_position(1,3);
		dip204_printf_string("slider: %u = %u",1,val);
		dip204_hide_cursor();*/
		dacsend(0,2,val);
800076a2:	fe f9 03 b2 	ld.w	r9,pc[946]
800076a6:	13 99       	ld.ub	r9,r9[0x1]
800076a8:	a9 69       	lsl	r9,0x8
800076aa:	f2 08 00 08 	add	r8,r9,r8
800076ae:	f5 d8 c0 0c 	bfextu	r10,r8,0x0,0xc
800076b2:	30 2b       	mov	r11,2
800076b4:	30 0c       	mov	r12,0
800076b6:	f0 1f 00 ef 	mcall	80007a70 <uhi_hid_mouse_report_reception+0x4f0>
	}
	
	if((sliders[2] != pastsliders[2] && sliders[2] != 255) || (sliders[3] != pastsliders[3] && sliders[3] != 255))
800076ba:	fe f8 03 9a 	ld.w	r8,pc[922]
800076be:	11 a8       	ld.ub	r8,r8[0x2]
800076c0:	fe f9 03 ac 	ld.w	r9,pc[940]
800076c4:	13 a9       	ld.ub	r9,r9[0x2]
800076c6:	f0 09 18 00 	cp.b	r9,r8
800076ca:	c0 50       	breq	800076d4 <uhi_hid_mouse_report_reception+0x154>
800076cc:	3f f9       	mov	r9,-1
800076ce:	f2 08 18 00 	cp.b	r8,r9
800076d2:	c0 e1       	brne	800076ee <uhi_hid_mouse_report_reception+0x16e>
800076d4:	fe f9 03 80 	ld.w	r9,pc[896]
800076d8:	13 b9       	ld.ub	r9,r9[0x3]
800076da:	fe fa 03 92 	ld.w	r10,pc[914]
800076de:	15 ba       	ld.ub	r10,r10[0x3]
800076e0:	f2 0a 18 00 	cp.b	r10,r9
800076e4:	c1 10       	breq	80007706 <uhi_hid_mouse_report_reception+0x186>
800076e6:	3f fa       	mov	r10,-1
800076e8:	f4 09 18 00 	cp.b	r9,r10
800076ec:	c0 d0       	breq	80007706 <uhi_hid_mouse_report_reception+0x186>
		dip204_set_cursor_position(1,4);
		dip204_write_string("                    ");
		dip204_set_cursor_position(1,4);
		dip204_printf_string("slider: %u = %u",2,val);
		dip204_hide_cursor();*/
		dacsend(2,2,val);
800076ee:	fe f9 03 66 	ld.w	r9,pc[870]
800076f2:	13 b9       	ld.ub	r9,r9[0x3]
800076f4:	a9 69       	lsl	r9,0x8
800076f6:	f2 08 00 08 	add	r8,r9,r8
800076fa:	f5 d8 c0 0c 	bfextu	r10,r8,0x0,0xc
800076fe:	30 2b       	mov	r11,2
80007700:	16 9c       	mov	r12,r11
80007702:	f0 1f 00 dc 	mcall	80007a70 <uhi_hid_mouse_report_reception+0x4f0>
80007706:	fe f8 03 6e 	ld.w	r8,pc[878]
8000770a:	50 08       	stdsp	sp[0x0],r8
8000770c:	30 06       	mov	r6,0
8000770e:	0c 93       	mov	r3,r6
			
			//remove it from the notestack and decrement numnotes
			numnotes--;
			notehappened = 1;
			noteoffhappened = 1;
			if (notestack[0] != -1)
80007710:	fe f7 03 68 	ld.w	r7,pc[872]
			for (j = 0; j < numnotes; j++)
			{
				//if it's the note that just got released
				if (notestack[j] == i)
				{
					for (k = 0; k < (numnotes - j); k++)
80007714:	50 26       	stdsp	sp[0x8],r6
80007716:	50 36       	stdsp	sp[0xc],r6
		dip204_set_cursor_position(1,4);
		dip204_write_string("                    ");
		dip204_set_cursor_position(1,4);
		dip204_printf_string("slider: %u = %u",2,val);
		dip204_hide_cursor();*/
		dacsend(2,2,val);
80007718:	e9 d6 c0 08 	bfextu	r4,r6,0x0,0x8
8000771c:	0c 90       	mov	r0,r6
	//create a stack that stores the currently touched notes in order they were touched
	for (i = 0; i < 48; i++)
	{
		checkstolen = -1;
		//if the current sensor value of a key is positive and it was zero on last count
		if ((butt_states[i] > 0) && (pastbutt_states[i] <= 0))
8000771e:	0b 89       	ld.ub	r9,r5[0x0]
80007720:	30 08       	mov	r8,0
80007722:	f0 09 18 00 	cp.b	r9,r8
80007726:	c2 b0       	breq	8000777c <uhi_hid_mouse_report_reception+0x1fc>
80007728:	40 08       	lddsp	r8,sp[0x0]
8000772a:	11 89       	ld.ub	r9,r8[0x0]
8000772c:	30 08       	mov	r8,0
8000772e:	f0 09 18 00 	cp.b	r9,r8
80007732:	c7 31       	brne	80007818 <uhi_hid_mouse_report_reception+0x298>
		{
			//it's a note-on -- add it to the monophonic stack
			changed = 1;
			if(numnotes == 0)		
80007734:	fe f8 03 48 	ld.w	r8,pc[840]
80007738:	11 88       	ld.ub	r8,r8[0x0]
8000773a:	58 08       	cp.w	r8,0
8000773c:	c0 c1       	brne	80007754 <uhi_hid_mouse_report_reception+0x1d4>
				dacsend(1,2,0xFFF);
8000773e:	e0 6a 0f ff 	mov	r10,4095
80007742:	30 2b       	mov	r11,2
80007744:	30 1c       	mov	r12,1
80007746:	f0 1f 00 cb 	mcall	80007a70 <uhi_hid_mouse_report_reception+0x4f0>

			//first move notes that are already in the stack one position to the right
			for (j = numnotes; j > 0; j--)
8000774a:	fe f8 03 32 	ld.w	r8,pc[818]
8000774e:	11 88       	ld.ub	r8,r8[0x0]
80007750:	58 08       	cp.w	r8,0
80007752:	c0 a0       	breq	80007766 <uhi_hid_mouse_report_reception+0x1e6>
				notestack[j] = notestack[(j - 1)];
80007754:	ee 08 00 09 	add	r9,r7,r8
80007758:	f3 39 ff ff 	ld.ub	r9,r9[-1]
8000775c:	ee 08 0b 09 	st.b	r7[r8],r9
			changed = 1;
			if(numnotes == 0)		
				dacsend(1,2,0xFFF);

			//first move notes that are already in the stack one position to the right
			for (j = numnotes; j > 0; j--)
80007760:	20 18       	sub	r8,1
80007762:	5c 58       	castu.b	r8
80007764:	cf 81       	brne	80007754 <uhi_hid_mouse_report_reception+0x1d4>
				notestack[j] = notestack[(j - 1)];

			//then, insert the new note into the front of the stack
			notestack[0] = i;
80007766:	ae 86       	st.b	r7[0x0],r6
					polyVoiceBusy[(polynum - 1)] = 1;
					changevoice[(polynum - 1)] = 1;
					voicefound = 1;
				}
			}*/
			numnotes++;
80007768:	fe f8 03 14 	ld.w	r8,pc[788]
8000776c:	11 89       	ld.ub	r9,r8[0x0]
8000776e:	2f f9       	sub	r9,-1
80007770:	b0 89       	st.b	r8[0x0],r9
			notehappened = 1;
			currentnote = notestack[0];
80007772:	fe f8 03 0e 	ld.w	r8,pc[782]
80007776:	b0 84       	st.b	r8[0x0],r4
80007778:	30 13       	mov	r3,1
8000777a:	c4 f8       	rjmp	80007818 <uhi_hid_mouse_report_reception+0x298>
		}

		else if ((butt_states[i] <= 0) && (pastbutt_states[i] > 0))
8000777c:	40 08       	lddsp	r8,sp[0x0]
8000777e:	11 89       	ld.ub	r9,r8[0x0]
80007780:	30 08       	mov	r8,0
80007782:	f0 09 18 00 	cp.b	r9,r8
80007786:	c4 90       	breq	80007818 <uhi_hid_mouse_report_reception+0x298>
		{
			//it's a note-off, remove it from the stack
			changed = 1;
			//go through the notes that are currently held down to find the one that released
			for (j = 0; j < numnotes; j++)
80007788:	fe f8 02 f4 	ld.w	r8,pc[756]
8000778c:	11 81       	ld.ub	r1,r8[0x0]
8000778e:	58 01       	cp.w	r1,0
80007790:	c2 90       	breq	800077e2 <uhi_hid_mouse_report_reception+0x262>
80007792:	30 0e       	mov	lr,0
			{
				//if it's the note that just got released
				if (notestack[j] == i)
				{
					for (k = 0; k < (numnotes - j); k++)
80007794:	e2 c9 00 01 	sub	r9,r1,1
80007798:	50 19       	stdsp	sp[0x4],r9
		else if ((butt_states[i] <= 0) && (pastbutt_states[i] > 0))
		{
			//it's a note-off, remove it from the stack
			changed = 1;
			//go through the notes that are currently held down to find the one that released
			for (j = 0; j < numnotes; j++)
8000779a:	1c 94       	mov	r4,lr
			{
				//if it's the note that just got released
				if (notestack[j] == i)
8000779c:	ee 0e 06 08 	ld.sb	r8,r7[lr]
800077a0:	10 30       	cp.w	r0,r8
800077a2:	c1 c1       	brne	800077da <uhi_hid_mouse_report_reception+0x25a>
 *
 * \param add           USB address used by the transfer
 * \param status        Transfer status
 * \param nb_transfered Number of data transfered
 */
static void uhi_hid_mouse_report_reception(
800077a4:	e2 0e 01 03 	sub	r3,r1,lr
			for (j = 0; j < numnotes; j++)
			{
				//if it's the note that just got released
				if (notestack[j] == i)
				{
					for (k = 0; k < (numnotes - j); k++)
800077a8:	58 03       	cp.w	r3,0
800077aa:	e0 8a 00 18 	brle	800077da <uhi_hid_mouse_report_reception+0x25a>
800077ae:	40 12       	lddsp	r2,sp[0x4]
800077b0:	1c 12       	sub	r2,lr
800077b2:	40 29       	lddsp	r9,sp[0x8]
800077b4:	40 38       	lddsp	r8,sp[0xc]
					{
						notestack[k + j] = notestack[k + j + 1];
800077b6:	e8 09 00 0a 	add	r10,r4,r9
800077ba:	f4 cb ff ff 	sub	r11,r10,-1
800077be:	ee 0b 07 0c 	ld.ub	r12,r7[r11]
800077c2:	ee 0a 0b 0c 	st.b	r7[r10],r12
						//if it's the last one, write negative 1 beyond it (it's already been copied to the position to the left of it)
						if (k == ((numnotes - j) - 1))
800077c6:	12 32       	cp.w	r2,r9
800077c8:	c0 41       	brne	800077d0 <uhi_hid_mouse_report_reception+0x250>
							notestack[k + j + 1] = -1;
800077ca:	3f f9       	mov	r9,-1
800077cc:	ee 0b 0b 09 	st.b	r7[r11],r9
			for (j = 0; j < numnotes; j++)
			{
				//if it's the note that just got released
				if (notestack[j] == i)
				{
					for (k = 0; k < (numnotes - j); k++)
800077d0:	2f f8       	sub	r8,-1
800077d2:	5c 58       	castu.b	r8
800077d4:	10 99       	mov	r9,r8
800077d6:	06 38       	cp.w	r8,r3
800077d8:	ce f5       	brlt	800077b6 <uhi_hid_mouse_report_reception+0x236>
800077da:	2f fe       	sub	lr,-1
		else if ((butt_states[i] <= 0) && (pastbutt_states[i] > 0))
		{
			//it's a note-off, remove it from the stack
			changed = 1;
			//go through the notes that are currently held down to find the one that released
			for (j = 0; j < numnotes; j++)
800077dc:	e2 0e 18 00 	cp.b	lr,r1
800077e0:	cd d3       	brcs	8000779a <uhi_hid_mouse_report_reception+0x21a>
					checkstolen = j;
				}
			}*/
			
			//remove it from the notestack and decrement numnotes
			numnotes--;
800077e2:	20 11       	sub	r1,1
800077e4:	fe f8 02 98 	ld.w	r8,pc[664]
800077e8:	b0 81       	st.b	r8[0x0],r1
			notehappened = 1;
			noteoffhappened = 1;
			if (notestack[0] != -1)
800077ea:	0f 88       	ld.ub	r8,r7[0x0]
800077ec:	3f f9       	mov	r9,-1
800077ee:	f2 08 18 00 	cp.b	r8,r9
800077f2:	c0 40       	breq	800077fa <uhi_hid_mouse_report_reception+0x27a>
				currentnote = notestack[0];
800077f4:	fe f9 02 8c 	ld.w	r9,pc[652]
800077f8:	b2 88       	st.b	r9[0x0],r8
						}
					}
				}
			}*/
			
			if(numnotes == 0)
800077fa:	fe f8 02 82 	ld.w	r8,pc[642]
800077fe:	11 89       	ld.ub	r9,r8[0x0]
80007800:	30 08       	mov	r8,0
80007802:	f0 09 18 00 	cp.b	r9,r8
80007806:	c0 30       	breq	8000780c <uhi_hid_mouse_report_reception+0x28c>
80007808:	30 13       	mov	r3,1
8000780a:	c0 78       	rjmp	80007818 <uhi_hid_mouse_report_reception+0x298>
				dacsend(1,2,0);
8000780c:	30 0a       	mov	r10,0
8000780e:	30 2b       	mov	r11,2
80007810:	30 1c       	mov	r12,1
80007812:	f0 1f 00 98 	mcall	80007a70 <uhi_hid_mouse_report_reception+0x4f0>
80007816:	30 13       	mov	r3,1
			
		}
		// update the past keymap array (stores the previous values of every key's sensor reading)
		pastbutt_states[i] = butt_states[i];
80007818:	0b 38       	ld.ub	r8,r5++
8000781a:	40 09       	lddsp	r9,sp[0x0]
8000781c:	12 c8       	st.b	r9++,r8
8000781e:	50 09       	stdsp	sp[0x0],r9
80007820:	2f f6       	sub	r6,-1
	//then, remove it
	//move everything to the right of it (if it's not negative 1) one index number less
	//replace the last position with -1

	//create a stack that stores the currently touched notes in order they were touched
	for (i = 0; i < 48; i++)
80007822:	e0 46 00 30 	cp.w	r6,48
80007826:	fe 91 ff 79 	brne	80007718 <uhi_hid_mouse_report_reception+0x198>
		pastbutt_states[i] = butt_states[i];

	}
	
	// volume control
	amplitude = 0;		
8000782a:	30 09       	mov	r9,0
8000782c:	fe f8 02 58 	ld.w	r8,pc[600]
80007830:	b0 89       	st.b	r8[0x0],r9
	if (lastButtVCA == 1)
80007832:	fe f8 02 56 	ld.w	r8,pc[598]
80007836:	11 89       	ld.ub	r9,r8[0x0]
80007838:	30 18       	mov	r8,1
8000783a:	f0 09 18 00 	cp.b	r9,r8
8000783e:	c0 70       	breq	8000784c <uhi_hid_mouse_report_reception+0x2cc>
		if(numnotes > 0)
			amplitude = butt_states[notestack[0]];
	}
	else
	{
		for(j=0; j<numnotes; j++)
80007840:	fe f8 02 3c 	ld.w	r8,pc[572]
80007844:	11 8b       	ld.ub	r11,r8[0x0]
80007846:	58 0b       	cp.w	r11,0
80007848:	c1 41       	brne	80007870 <uhi_hid_mouse_report_reception+0x2f0>
8000784a:	c2 78       	rjmp	80007898 <uhi_hid_mouse_report_reception+0x318>
	
	// volume control
	amplitude = 0;		
	if (lastButtVCA == 1)
	{
		if(numnotes > 0)
8000784c:	fe f8 02 30 	ld.w	r8,pc[560]
80007850:	11 89       	ld.ub	r9,r8[0x0]
80007852:	30 08       	mov	r8,0
80007854:	f0 09 18 00 	cp.b	r9,r8
80007858:	c2 00       	breq	80007898 <uhi_hid_mouse_report_reception+0x318>
			amplitude = butt_states[notestack[0]];
8000785a:	fe f8 02 1e 	ld.w	r8,pc[542]
8000785e:	f1 28 00 00 	ld.sb	r8,r8[0]
80007862:	4f c9       	lddpc	r9,80007a50 <uhi_hid_mouse_report_reception+0x4d0>
80007864:	f2 08 07 09 	ld.ub	r9,r9[r8]
80007868:	fe f8 02 1c 	ld.w	r8,pc[540]
8000786c:	b0 89       	st.b	r8[0x0],r9
8000786e:	c1 58       	rjmp	80007898 <uhi_hid_mouse_report_reception+0x318>
80007870:	30 08       	mov	r8,0
80007872:	10 99       	mov	r9,r8
80007874:	4f 7e       	lddpc	lr,80007a50 <uhi_hid_mouse_report_reception+0x4d0>
80007876:	fe fc 02 02 	ld.w	r12,pc[514]
8000787a:	f8 08 06 0a 	ld.sb	r10,r12[r8]
8000787e:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80007882:	f2 0a 18 00 	cp.b	r10,r9
80007886:	f4 09 17 20 	movhs	r9,r10
8000788a:	5c 59       	castu.b	r9
8000788c:	2f f8       	sub	r8,-1
	}
	else
	{
		for(j=0; j<numnotes; j++)
8000788e:	f6 08 18 00 	cp.b	r8,r11
80007892:	cf 43       	brcs	8000787a <uhi_hid_mouse_report_reception+0x2fa>
80007894:	4f c8       	lddpc	r8,80007a84 <uhi_hid_mouse_report_reception+0x504>
80007896:	b0 89       	st.b	r8[0x0],r9
			if(val > amplitude)
			amplitude = val;
		}
	}
	
	dacsend(3,2,amplitude<<4);/*
80007898:	4f b8       	lddpc	r8,80007a84 <uhi_hid_mouse_report_reception+0x504>
8000789a:	11 8a       	ld.ub	r10,r8[0x0]
8000789c:	a5 6a       	lsl	r10,0x4
8000789e:	30 2b       	mov	r11,2
800078a0:	30 3c       	mov	r12,3
800078a2:	f0 1f 00 74 	mcall	80007a70 <uhi_hid_mouse_report_reception+0x4f0>
		dip204_printf_string("slider: %u = %u",2,val);
		dip204_hide_cursor();*/
		dacsend(2,2,val);
	}
	
	if(calculateNoteStack())
800078a6:	58 03       	cp.w	r3,0
800078a8:	e0 80 00 8f 	breq	800079c6 <uhi_hid_mouse_report_reception+0x446>
	{
		val  = calculateDACvalue((unsigned int)currentnote);
800078ac:	4f 58       	lddpc	r8,80007a80 <uhi_hid_mouse_report_reception+0x500>
800078ae:	11 88       	ld.ub	r8,r8[0x0]
	unsigned int virtualnote;
	unsigned long templongoctave;
	unsigned short DAC1val;
	unsigned int note;
	
	switch(whichmap)
800078b0:	4f 79       	lddpc	r9,80007a8c <uhi_hid_mouse_report_reception+0x50c>
800078b2:	72 09       	ld.w	r9,r9[0x0]
800078b4:	58 19       	cp.w	r9,1
800078b6:	c0 40       	breq	800078be <uhi_hid_mouse_report_reception+0x33e>
800078b8:	58 29       	cp.w	r9,2
800078ba:	c0 91       	brne	800078cc <uhi_hid_mouse_report_reception+0x34c>
800078bc:	c0 58       	rjmp	800078c6 <uhi_hid_mouse_report_reception+0x346>
	{
		case WICKI_HAYDEN: note = whmap[noteval]; break;    // wicki-hayden
800078be:	4f 59       	lddpc	r9,80007a90 <uhi_hid_mouse_report_reception+0x510>
800078c0:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800078c4:	c0 48       	rjmp	800078cc <uhi_hid_mouse_report_reception+0x34c>
		case HARMONIC: note = harmonicmap[noteval]; break;  // harmonic
800078c6:	4f 49       	lddpc	r9,80007a94 <uhi_hid_mouse_report_reception+0x514>
800078c8:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
		default: note = noteval; break;                     // no map
	}
	
	//templong = ((noteval + offset + transpose) * 54612);  // original simple equal temperament
	pitchclass = ((note + transpose + 21) % 12);  // add 21 to make it positive and centered on C
800078cc:	4f 39       	lddpc	r9,80007a98 <uhi_hid_mouse_report_reception+0x518>
800078ce:	f3 2b 00 00 	ld.sb	r11,r9[0]
800078d2:	f0 0b 00 0b 	add	r11,r8,r11
800078d6:	f6 c8 ff eb 	sub	r8,r11,-21
800078da:	e0 67 aa ab 	mov	r7,43691
800078de:	ea 17 aa aa 	orh	r7,0xaaaa
800078e2:	f0 07 06 46 	mulu.d	r6,r8,r7
800078e6:	0e 9a       	mov	r10,r7
800078e8:	a3 9a       	lsr	r10,0x3
800078ea:	f4 0a 00 1a 	add	r10,r10,r10<<0x1
800078ee:	f0 0a 01 2a 	sub	r10,r8,r10<<0x2
	virtualnote = (note + 13 + transpose - pitchclass);
	if (tuning == 0)
800078f2:	4e b9       	lddpc	r9,80007a9c <uhi_hid_mouse_report_reception+0x51c>
800078f4:	13 89       	ld.ub	r9,r9[0x0]
800078f6:	58 09       	cp.w	r9,0
800078f8:	c0 91       	brne	8000790a <uhi_hid_mouse_report_reception+0x38a>
		templongnote = (twelvetet[pitchclass] * scaledoctaveDACvalue);
800078fa:	4e a9       	lddpc	r9,80007aa0 <uhi_hid_mouse_report_reception+0x520>
800078fc:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80007900:	4e 98       	lddpc	r8,80007aa4 <uhi_hid_mouse_report_reception+0x524>
80007902:	70 08       	ld.w	r8,r8[0x0]
80007904:	f2 08 02 48 	mul	r8,r9,r8
80007908:	c3 e8       	rjmp	80007984 <uhi_hid_mouse_report_reception+0x404>
	else if (tuning == 1)
8000790a:	30 1c       	mov	r12,1
8000790c:	f8 09 18 00 	cp.b	r9,r12
80007910:	c0 91       	brne	80007922 <uhi_hid_mouse_report_reception+0x3a2>
		templongnote = (overtonejust[pitchclass] * scaledoctaveDACvalue);
80007912:	4e 69       	lddpc	r9,80007aa8 <uhi_hid_mouse_report_reception+0x528>
80007914:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80007918:	4e 38       	lddpc	r8,80007aa4 <uhi_hid_mouse_report_reception+0x524>
8000791a:	70 08       	ld.w	r8,r8[0x0]
8000791c:	f2 08 02 48 	mul	r8,r9,r8
80007920:	c3 28       	rjmp	80007984 <uhi_hid_mouse_report_reception+0x404>
	else if (tuning == 2)
80007922:	30 2c       	mov	r12,2
80007924:	f8 09 18 00 	cp.b	r9,r12
80007928:	c0 91       	brne	8000793a <uhi_hid_mouse_report_reception+0x3ba>
		templongnote = (kora1[pitchclass] * scaledoctaveDACvalue);
8000792a:	4e 19       	lddpc	r9,80007aac <uhi_hid_mouse_report_reception+0x52c>
8000792c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80007930:	4d d8       	lddpc	r8,80007aa4 <uhi_hid_mouse_report_reception+0x524>
80007932:	70 08       	ld.w	r8,r8[0x0]
80007934:	f2 08 02 48 	mul	r8,r9,r8
80007938:	c2 68       	rjmp	80007984 <uhi_hid_mouse_report_reception+0x404>
	else if (tuning == 3)
8000793a:	30 3c       	mov	r12,3
8000793c:	f8 09 18 00 	cp.b	r9,r12
80007940:	c0 91       	brne	80007952 <uhi_hid_mouse_report_reception+0x3d2>
		templongnote = (meantone[pitchclass] * scaledoctaveDACvalue);
80007942:	4d c9       	lddpc	r9,80007ab0 <uhi_hid_mouse_report_reception+0x530>
80007944:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80007948:	4d 78       	lddpc	r8,80007aa4 <uhi_hid_mouse_report_reception+0x524>
8000794a:	70 08       	ld.w	r8,r8[0x0]
8000794c:	f2 08 02 48 	mul	r8,r9,r8
80007950:	c1 a8       	rjmp	80007984 <uhi_hid_mouse_report_reception+0x404>
	else if (tuning == 4)
80007952:	30 4c       	mov	r12,4
80007954:	f8 09 18 00 	cp.b	r9,r12
80007958:	c0 91       	brne	8000796a <uhi_hid_mouse_report_reception+0x3ea>
		templongnote = (werckmeister1[pitchclass] * scaledoctaveDACvalue);
8000795a:	4d 79       	lddpc	r9,80007ab4 <uhi_hid_mouse_report_reception+0x534>
8000795c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80007960:	4d 18       	lddpc	r8,80007aa4 <uhi_hid_mouse_report_reception+0x524>
80007962:	70 08       	ld.w	r8,r8[0x0]
80007964:	f2 08 02 48 	mul	r8,r9,r8
80007968:	c0 e8       	rjmp	80007984 <uhi_hid_mouse_report_reception+0x404>
	else if (tuning == 5)
8000796a:	30 5c       	mov	r12,5
8000796c:	f8 09 18 00 	cp.b	r9,r12
80007970:	c0 30       	breq	80007976 <uhi_hid_mouse_report_reception+0x3f6>
80007972:	30 08       	mov	r8,0
80007974:	c0 88       	rjmp	80007984 <uhi_hid_mouse_report_reception+0x404>
		templongnote = (werckmeister3[pitchclass] * scaledoctaveDACvalue);
80007976:	4d 19       	lddpc	r9,80007ab8 <uhi_hid_mouse_report_reception+0x538>
80007978:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000797c:	4c a8       	lddpc	r8,80007aa4 <uhi_hid_mouse_report_reception+0x524>
8000797e:	70 08       	ld.w	r8,r8[0x0]
80007980:	f2 08 02 48 	mul	r8,r9,r8
	
	templongnote = (templongnote / 10000);
	templongoctave = ((virtualnote + octaveoffset) * scaledoctaveDACvalue);
80007984:	4c e9       	lddpc	r9,80007abc <uhi_hid_mouse_report_reception+0x53c>
80007986:	13 89       	ld.ub	r9,r9[0x0]
80007988:	2f 39       	sub	r9,-13
8000798a:	f2 0b 00 0b 	add	r11,r9,r11
8000798e:	f6 0a 01 0a 	sub	r10,r11,r10
80007992:	4c 59       	lddpc	r9,80007aa4 <uhi_hid_mouse_report_reception+0x524>
80007994:	72 09       	ld.w	r9,r9[0x0]
80007996:	f4 09 02 49 	mul	r9,r10,r9
	}
	
	if(calculateNoteStack())
	{
		val  = calculateDACvalue((unsigned int)currentnote);
		DAC16Send(2, val);
8000799a:	e0 6b 17 59 	mov	r11,5977
8000799e:	ea 1b d1 b7 	orh	r11,0xd1b7
800079a2:	f0 0b 06 4a 	mulu.d	r10,r8,r11
800079a6:	ad 9b       	lsr	r11,0xd
800079a8:	e0 68 85 1f 	mov	r8,34079
800079ac:	ea 18 51 eb 	orh	r8,0x51eb
800079b0:	f2 08 06 48 	mulu.d	r8,r9,r8
800079b4:	f2 08 16 05 	lsr	r8,r9,0x5
800079b8:	10 0b       	add	r11,r8
800079ba:	a1 7b       	lsl	r11,0x1
800079bc:	e2 1b ff fe 	andl	r11,0xfffe,COH
800079c0:	30 2c       	mov	r12,2
800079c2:	f0 1f 00 40 	mcall	80007ac0 <uhi_hid_mouse_report_reception+0x540>
	} uhi_hid_mouse_start_trans_report(add);
800079c6:	40 4c       	lddsp	r12,sp[0x10]
800079c8:	f0 1f 00 20 	mcall	80007a48 <uhi_hid_mouse_report_reception+0x4c8>
800079cc:	c3 c8       	rjmp	80007a44 <uhi_hid_mouse_report_reception+0x4c4>
800079ce:	30 07       	mov	r7,0
	while(i < 52 && butt_states[i] == 0)
		i++;
		
	if(i < 52)
	{
		dip204_set_cursor_position(1,1);
800079d0:	30 1b       	mov	r11,1
800079d2:	16 9c       	mov	r12,r11
800079d4:	f0 1f 00 21 	mcall	80007a58 <uhi_hid_mouse_report_reception+0x4d8>
		dip204_write_string("                ");
800079d8:	4b bc       	lddpc	r12,80007ac4 <uhi_hid_mouse_report_reception+0x544>
800079da:	f0 1f 00 22 	mcall	80007a60 <uhi_hid_mouse_report_reception+0x4e0>
		dip204_set_cursor_position(1,1);
800079de:	30 1b       	mov	r11,1
800079e0:	16 9c       	mov	r12,r11
800079e2:	f0 1f 00 1e 	mcall	80007a58 <uhi_hid_mouse_report_reception+0x4d8>
		dip204_printf_string("b: %u = %u",i+1,butt_states[i]);
800079e6:	49 b8       	lddpc	r8,80007a50 <uhi_hid_mouse_report_reception+0x4d0>
800079e8:	f0 07 07 08 	ld.ub	r8,r8[r7]
800079ec:	1a d8       	st.w	--sp,r8
800079ee:	ee c8 ff ff 	sub	r8,r7,-1
800079f2:	1a d8       	st.w	--sp,r8
800079f4:	4b 5c       	lddpc	r12,80007ac8 <uhi_hid_mouse_report_reception+0x548>
800079f6:	f0 1f 00 36 	mcall	80007acc <uhi_hid_mouse_report_reception+0x54c>
		dip204_hide_cursor();
800079fa:	f0 1f 00 36 	mcall	80007ad0 <uhi_hid_mouse_report_reception+0x550>
		UHI_HID_MOUSE_EVENT_BTN_LEFT(1);
800079fe:	30 1c       	mov	r12,1
80007a00:	f0 1f 00 19 	mcall	80007a64 <uhi_hid_mouse_report_reception+0x4e4>
		dip204_write_string("              ");
		UHI_HID_MOUSE_EVENT_BTN_LEFT(0);
	}
	

	i++;
80007a04:	0e 98       	mov	r8,r7
80007a06:	2f f8       	sub	r8,-1
80007a08:	5c 58       	castu.b	r8
	
	while(i < 52 && butt_states[i] == 0)
80007a0a:	2f ed       	sub	sp,-8
80007a0c:	33 39       	mov	r9,51
80007a0e:	f2 08 18 00 	cp.b	r8,r9
80007a12:	fe 98 fe 11 	brls	80007634 <uhi_hid_mouse_report_reception+0xb4>
80007a16:	fe 9f fe 29 	bral	80007668 <uhi_hid_mouse_report_reception+0xe8>
		i++;
	
	if(i < 52)
	{
		dip204_set_cursor_position(1,2);
80007a1a:	30 2b       	mov	r11,2
80007a1c:	30 1c       	mov	r12,1
80007a1e:	f0 1f 00 0f 	mcall	80007a58 <uhi_hid_mouse_report_reception+0x4d8>
		dip204_write_string("         ");
80007a22:	4a dc       	lddpc	r12,80007ad4 <uhi_hid_mouse_report_reception+0x554>
80007a24:	f0 1f 00 0f 	mcall	80007a60 <uhi_hid_mouse_report_reception+0x4e0>
		dip204_set_cursor_position(1,2);
80007a28:	30 2b       	mov	r11,2
80007a2a:	30 1c       	mov	r12,1
80007a2c:	f0 1f 00 0b 	mcall	80007a58 <uhi_hid_mouse_report_reception+0x4d8>
		dip204_printf_string("a");
80007a30:	4a ac       	lddpc	r12,80007ad8 <uhi_hid_mouse_report_reception+0x558>
80007a32:	f0 1f 00 27 	mcall	80007acc <uhi_hid_mouse_report_reception+0x54c>
		dip204_hide_cursor();
80007a36:	f0 1f 00 27 	mcall	80007ad0 <uhi_hid_mouse_report_reception+0x550>
		UHI_HID_MOUSE_EVENT_BTN_RIGHT(1);
80007a3a:	30 1c       	mov	r12,1
80007a3c:	f0 1f 00 0b 	mcall	80007a68 <uhi_hid_mouse_report_reception+0x4e8>
80007a40:	fe 9f fe 17 	bral	8000766e <uhi_hid_mouse_report_reception+0xee>
	if(calculateNoteStack())
	{
		val  = calculateDACvalue((unsigned int)currentnote);
		DAC16Send(2, val);
	} uhi_hid_mouse_start_trans_report(add);
}
80007a44:	2f bd       	sub	sp,-20
80007a46:	d8 32       	popm	r0-r7,pc
80007a48:	80 00       	ld.sh	r0,r0[0x0]
80007a4a:	75 24       	ld.w	r4,r10[0x48]
80007a4c:	00 00       	add	r0,r0
80007a4e:	0b 5c       	ld.sh	r12,--r5
80007a50:	00 00       	add	r0,r0
80007a52:	0c a0       	st.w	r6++,r0
80007a54:	00 00       	add	r0,r0
80007a56:	0b 54       	ld.sh	r4,--r5
80007a58:	80 00       	ld.sh	r0,r0[0x0]
80007a5a:	21 e8       	sub	r8,30
80007a5c:	80 00       	ld.sh	r0,r0[0x0]
80007a5e:	ef 90       	*unknown*
80007a60:	80 00       	ld.sh	r0,r0[0x0]
80007a62:	21 90       	sub	r0,25
80007a64:	80 00       	ld.sh	r0,r0[0x0]
80007a66:	42 34       	lddsp	r4,sp[0x8c]
80007a68:	80 00       	ld.sh	r0,r0[0x0]
80007a6a:	42 14       	lddsp	r4,sp[0x84]
80007a6c:	00 00       	add	r0,r0
80007a6e:	0b 4c       	ld.w	r12,--r5
80007a70:	80 00       	ld.sh	r0,r0[0x0]
80007a72:	8e 10       	ld.sh	r0,r7[0x2]
80007a74:	00 00       	add	r0,r0
80007a76:	0b 1c       	ld.sh	r12,r5++
80007a78:	00 00       	add	r0,r0
80007a7a:	0c 70       	tst	r0,r6
80007a7c:	00 00       	add	r0,r0
80007a7e:	0b 50       	ld.sh	r0,--r5
80007a80:	00 00       	add	r0,r0
80007a82:	0b 6c       	ld.uh	r12,--r5
80007a84:	00 00       	add	r0,r0
80007a86:	0b 5b       	ld.sh	r11,--r5
80007a88:	00 00       	add	r0,r0
80007a8a:	0b 58       	ld.sh	r8,--r5
80007a8c:	00 00       	add	r0,r0
80007a8e:	02 24       	rsub	r4,r1
80007a90:	00 00       	add	r0,r0
80007a92:	02 28       	rsub	r8,r1
80007a94:	00 00       	add	r0,r0
80007a96:	00 d0       	st.w	--r0,r0
80007a98:	00 00       	add	r0,r0
80007a9a:	0b 59       	ld.sh	r9,--r5
80007a9c:	00 00       	add	r0,r0
80007a9e:	0b 6d       	ld.uh	sp,--r5
80007aa0:	00 00       	add	r0,r0
80007aa2:	03 18       	ld.sh	r8,r1++
80007aa4:	00 00       	add	r0,r0
80007aa6:	02 20       	rsub	r0,r1
80007aa8:	00 00       	add	r0,r0
80007aaa:	01 c0       	ld.ub	r0,r0[0x4]
80007aac:	00 00       	add	r0,r0
80007aae:	03 48       	ld.w	r8,--r1
80007ab0:	00 00       	add	r0,r0
80007ab2:	01 f0       	ld.ub	r0,r0[0x7]
80007ab4:	00 00       	add	r0,r0
80007ab6:	02 e8       	st.h	--r1,r8
80007ab8:	00 00       	add	r0,r0
80007aba:	01 90       	ld.ub	r0,r0[0x1]
80007abc:	00 00       	add	r0,r0
80007abe:	0b 5a       	ld.sh	r10,--r5
80007ac0:	80 00       	ld.sh	r0,r0[0x0]
80007ac2:	8d 2c       	st.w	r6[0x8],r12
80007ac4:	80 00       	ld.sh	r0,r0[0x0]
80007ac6:	ef a0 80 00 	mvcr.w	cp4,r0,cr0
80007aca:	ef b4       	*unknown*
80007acc:	80 00       	ld.sh	r0,r0[0x0]
80007ace:	20 f8       	sub	r8,15
80007ad0:	80 00       	ld.sh	r0,r0[0x0]
80007ad2:	22 44       	sub	r4,36
80007ad4:	80 00       	ld.sh	r0,r0[0x0]
80007ad6:	ef c0 80 00 	stmts	--r0,pc
80007ada:	ef cc eb cd 	stmts	--r12,r0,r2-r3,r6-r9,r11,sp-pc

80007adc <uhi_hid_mouse_install>:
 * \name Functions required by UHC
 * @{
 */

uhc_enum_status_t uhi_hid_mouse_install(uhc_device_t* dev)
{
80007adc:	eb cd 40 f8 	pushm	r3-r7,lr
80007ae0:	18 97       	mov	r7,r12
	bool b_iface_supported;
	uint16_t conf_desc_lgt;
	usb_iface_desc_t *ptr_iface;

	if (uhi_hid_mouse_dev.dev != NULL)
80007ae2:	4a d8       	lddpc	r8,80007b94 <uhi_hid_mouse_install+0xb8>
80007ae4:	70 08       	ld.w	r8,r8[0x0]
80007ae6:	58 08       	cp.w	r8,0
80007ae8:	c5 11       	brne	80007b8a <uhi_hid_mouse_install+0xae>
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated

	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
80007aea:	78 66       	ld.w	r6,r12[0x18]
80007aec:	0d aa       	ld.ub	r10,r6[0x2]
80007aee:	0d b8       	ld.ub	r8,r6[0x3]
80007af0:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
80007af4:	5c ca       	swap.bh	r10
80007af6:	5c 8a       	casts.h	r10
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	
	while(conf_desc_lgt)
80007af8:	c4 c0       	breq	80007b90 <uhi_hid_mouse_install+0xb4>

	if (uhi_hid_mouse_dev.dev != NULL)
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated

	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
80007afa:	30 03       	mov	r3,0
	b_iface_supported = false;
	
	while(conf_desc_lgt)
	{
		switch (ptr_iface->bDescriptorType) 
80007afc:	30 44       	mov	r4,4
		{
			case USB_DT_INTERFACE:
				if ((ptr_iface->bInterfaceClass   == HID_CLASS)
					&& (ptr_iface->bInterfaceProtocol == HID_PROTOCOL_GENERIC) ) 
80007afe:	30 09       	mov	r9,0
					// Start allocation endpoint(s)
					b_iface_supported = true;
					// initialize button states to 0
					for(i=0; i<48; i++)
					{
						butt_states[i]=0;
80007b00:	4a 65       	lddpc	r5,80007b98 <uhi_hid_mouse_install+0xbc>
						pastbutt_states[i]=0;
80007b02:	4a 7c       	lddpc	r12,80007b9c <uhi_hid_mouse_install+0xc0>
						notestack[i] = -1;
80007b04:	4a 7b       	lddpc	r11,80007ba0 <uhi_hid_mouse_install+0xc4>
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	
	while(conf_desc_lgt)
	{
		switch (ptr_iface->bDescriptorType) 
80007b06:	0d 98       	ld.ub	r8,r6[0x1]
80007b08:	e8 08 18 00 	cp.b	r8,r4
80007b0c:	c0 60       	breq	80007b18 <uhi_hid_mouse_install+0x3c>
80007b0e:	30 5e       	mov	lr,5
80007b10:	fc 08 18 00 	cp.b	r8,lr
80007b14:	c3 51       	brne	80007b7e <uhi_hid_mouse_install+0xa2>
80007b16:	c1 88       	rjmp	80007b46 <uhi_hid_mouse_install+0x6a>
		{
			case USB_DT_INTERFACE:
				if ((ptr_iface->bInterfaceClass   == HID_CLASS)
80007b18:	0d de       	ld.ub	lr,r6[0x5]
80007b1a:	30 38       	mov	r8,3
80007b1c:	f0 0e 18 00 	cp.b	lr,r8
80007b20:	c2 e1       	brne	80007b7c <uhi_hid_mouse_install+0xa0>
					&& (ptr_iface->bInterfaceProtocol == HID_PROTOCOL_GENERIC) ) 
80007b22:	0d f8       	ld.ub	r8,r6[0x7]
80007b24:	f2 08 18 00 	cp.b	r8,r9
80007b28:	c2 a1       	brne	80007b7c <uhi_hid_mouse_install+0xa0>
80007b2a:	30 08       	mov	r8,0
					// initialize button states to 0
					for(i=0; i<48; i++)
					{
						butt_states[i]=0;
						pastbutt_states[i]=0;
						notestack[i] = -1;
80007b2c:	3f fe       	mov	lr,-1
					// Start allocation endpoint(s)
					b_iface_supported = true;
					// initialize button states to 0
					for(i=0; i<48; i++)
					{
						butt_states[i]=0;
80007b2e:	ea 08 0b 09 	st.b	r5[r8],r9
						pastbutt_states[i]=0;
80007b32:	f8 08 0b 09 	st.b	r12[r8],r9
						notestack[i] = -1;
80007b36:	f6 08 0b 0e 	st.b	r11[r8],lr
					int i;
					// USB HID Mouse interface found
					// Start allocation endpoint(s)
					b_iface_supported = true;
					// initialize button states to 0
					for(i=0; i<48; i++)
80007b3a:	2f f8       	sub	r8,-1
80007b3c:	e0 48 00 30 	cp.w	r8,48
80007b40:	cf 71       	brne	80007b2e <uhi_hid_mouse_install+0x52>
80007b42:	30 13       	mov	r3,1
80007b44:	c1 d8       	rjmp	80007b7e <uhi_hid_mouse_install+0xa2>
				else b_iface_supported = false; // Stop allocation endpoint(s)
			break;

			case USB_DT_ENDPOINT:
				//  Allocation of the endpoint
				if (!b_iface_supported) 
80007b46:	58 03       	cp.w	r3,0
80007b48:	c1 b0       	breq	80007b7e <uhi_hid_mouse_install+0xa2>
					break;

				if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface))
80007b4a:	0c 9b       	mov	r11,r6
80007b4c:	ef 3c 00 12 	ld.ub	r12,r7[18]
80007b50:	f0 1f 00 15 	mcall	80007ba4 <uhi_hid_mouse_install+0xc8>
80007b54:	c0 41       	brne	80007b5c <uhi_hid_mouse_install+0x80>
80007b56:	30 4c       	mov	r12,4
80007b58:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
					return UHC_ENUM_HARDWARE_LIMIT; // Endpoint allocation fail

				Assert(((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN);
				uhi_hid_mouse_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
80007b5c:	48 e5       	lddpc	r5,80007b94 <uhi_hid_mouse_install+0xb8>
80007b5e:	0d a8       	ld.ub	r8,r6[0x2]
80007b60:	aa c8       	st.b	r5[0x4],r8
				uhi_hid_mouse_dev.report_size =
80007b62:	0d cc       	ld.ub	r12,r6[0x4]
80007b64:	aa dc       	st.b	r5[0x5],r12
						le16_to_cpu(((usb_ep_desc_t*)ptr_iface)->wMaxPacketSize);
				uhi_hid_mouse_dev.report = malloc(uhi_hid_mouse_dev.report_size);
80007b66:	f0 1f 00 11 	mcall	80007ba8 <uhi_hid_mouse_install+0xcc>
80007b6a:	8b 2c       	st.w	r5[0x8],r12
			
				if (uhi_hid_mouse_dev.report == NULL) {
80007b6c:	c0 41       	brne	80007b74 <uhi_hid_mouse_install+0x98>
80007b6e:	30 6c       	mov	r12,6
80007b70:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
					Assert(false);
					return UHC_ENUM_MEMORY_LIMIT; // Internal RAM allocation fail
				}
			
				uhi_hid_mouse_dev.dev = dev;
80007b74:	48 88       	lddpc	r8,80007b94 <uhi_hid_mouse_install+0xb8>
80007b76:	91 07       	st.w	r8[0x0],r7
80007b78:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
				// All endpoints of all interfaces supported allocated
				return UHC_ENUM_SUCCESS;
80007b7c:	30 03       	mov	r3,0

			// Ignore descriptor
			default: break;
		}	
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
80007b7e:	0d 88       	ld.ub	r8,r6[0x0]
80007b80:	10 1a       	sub	r10,r8
80007b82:	5c 8a       	casts.h	r10

	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	
	while(conf_desc_lgt)
80007b84:	c0 60       	breq	80007b90 <uhi_hid_mouse_install+0xb4>
			// Ignore descriptor
			default: break;
		}	
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
80007b86:	10 06       	add	r6,r8
80007b88:	cb fb       	rjmp	80007b06 <uhi_hid_mouse_install+0x2a>
80007b8a:	30 5c       	mov	r12,5
80007b8c:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80007b90:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
80007b94:	00 00       	add	r0,r0
80007b96:	0b 5c       	ld.sh	r12,--r5
80007b98:	00 00       	add	r0,r0
80007b9a:	0c a0       	st.w	r6++,r0
80007b9c:	00 00       	add	r0,r0
80007b9e:	0b 1c       	ld.sh	r12,r5++
80007ba0:	00 00       	add	r0,r0
80007ba2:	0c 70       	tst	r0,r6
80007ba4:	80 00       	ld.sh	r0,r0[0x0]
80007ba6:	66 84       	ld.w	r4,r3[0x20]
80007ba8:	80 00       	ld.sh	r0,r0[0x0]
80007baa:	91 ac       	st.w	r8[0x28],r12

80007bac <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
80007bac:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80007bb0:	49 18       	lddpc	r8,80007bf4 <udc_sof_notify+0x48>
80007bb2:	11 89       	ld.ub	r9,r8[0x0]
80007bb4:	30 08       	mov	r8,0
80007bb6:	f0 09 18 00 	cp.b	r9,r8
80007bba:	c1 b0       	breq	80007bf0 <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007bbc:	48 f8       	lddpc	r8,80007bf8 <udc_sof_notify+0x4c>
80007bbe:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80007bc0:	70 09       	ld.w	r9,r8[0x0]
80007bc2:	13 ca       	ld.ub	r10,r9[0x4]
80007bc4:	30 09       	mov	r9,0
80007bc6:	f2 0a 18 00 	cp.b	r10,r9
80007bca:	c1 30       	breq	80007bf0 <udc_sof_notify+0x44>
80007bcc:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007bce:	48 b6       	lddpc	r6,80007bf8 <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
80007bd0:	70 18       	ld.w	r8,r8[0x4]
80007bd2:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80007bd6:	70 48       	ld.w	r8,r8[0x10]
80007bd8:	58 08       	cp.w	r8,0
80007bda:	c0 20       	breq	80007bde <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
80007bdc:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80007bde:	2f f7       	sub	r7,-1
80007be0:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007be2:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80007be4:	70 09       	ld.w	r9,r8[0x0]
80007be6:	13 c9       	ld.ub	r9,r9[0x4]
80007be8:	ee 09 18 00 	cp.b	r9,r7
80007bec:	fe 9b ff f2 	brhi	80007bd0 <udc_sof_notify+0x24>
80007bf0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007bf4:	00 00       	add	r0,r0
80007bf6:	0b 80       	ld.ub	r0,r5[0x0]
80007bf8:	00 00       	add	r0,r0
80007bfa:	0b 70       	ld.ub	r0,--r5

80007bfc <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80007bfc:	48 78       	lddpc	r8,80007c18 <udc_get_eof_conf+0x1c>
80007bfe:	70 08       	ld.w	r8,r8[0x0]
80007c00:	70 08       	ld.w	r8,r8[0x0]
80007c02:	11 aa       	ld.ub	r10,r8[0x2]
80007c04:	11 b9       	ld.ub	r9,r8[0x3]
80007c06:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80007c0a:	5c c9       	swap.bh	r9
80007c0c:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
80007c10:	f0 0c 00 0c 	add	r12,r8,r12
80007c14:	5e fc       	retal	r12
80007c16:	00 00       	add	r0,r0
80007c18:	00 00       	add	r0,r0
80007c1a:	0b 70       	ld.ub	r0,--r5

80007c1c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80007c1c:	eb cd 40 e0 	pushm	r5-r7,lr
80007c20:	18 97       	mov	r7,r12
80007c22:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80007c24:	49 b8       	lddpc	r8,80007c90 <udc_update_iface_desc+0x74>
80007c26:	11 89       	ld.ub	r9,r8[0x0]
80007c28:	30 08       	mov	r8,0
80007c2a:	f0 09 18 00 	cp.b	r9,r8
80007c2e:	c2 f0       	breq	80007c8c <udc_update_iface_desc+0x70>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80007c30:	49 98       	lddpc	r8,80007c94 <udc_update_iface_desc+0x78>
80007c32:	70 08       	ld.w	r8,r8[0x0]
80007c34:	70 08       	ld.w	r8,r8[0x0]
80007c36:	11 c9       	ld.ub	r9,r8[0x4]
80007c38:	18 9e       	mov	lr,r12
80007c3a:	f8 09 18 00 	cp.b	r9,r12
80007c3e:	e0 88 00 27 	brls	80007c8c <udc_update_iface_desc+0x70>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80007c42:	49 65       	lddpc	r5,80007c98 <udc_update_iface_desc+0x7c>
80007c44:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
80007c46:	f0 1f 00 16 	mcall	80007c9c <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
80007c4a:	6a 08       	ld.w	r8,r5[0x0]
80007c4c:	10 3c       	cp.w	r12,r8
80007c4e:	e0 88 00 1f 	brls	80007c8c <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80007c52:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80007c54:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80007c56:	11 9a       	ld.ub	r10,r8[0x1]
80007c58:	f6 0a 18 00 	cp.b	r10,r11
80007c5c:	c0 a1       	brne	80007c70 <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
80007c5e:	11 aa       	ld.ub	r10,r8[0x2]
80007c60:	0e 9e       	mov	lr,r7
80007c62:	ee 0a 18 00 	cp.b	r10,r7
80007c66:	c0 51       	brne	80007c70 <udc_update_iface_desc+0x54>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
80007c68:	11 ba       	ld.ub	r10,r8[0x3]
80007c6a:	ec 0a 18 00 	cp.b	r10,r6
80007c6e:	c0 b0       	breq	80007c84 <udc_update_iface_desc+0x68>
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
80007c70:	13 88       	ld.ub	r8,r9[0x0]
80007c72:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80007c76:	10 3c       	cp.w	r12,r8
80007c78:	fe 9b ff ee 	brhi	80007c54 <udc_update_iface_desc+0x38>
80007c7c:	48 79       	lddpc	r9,80007c98 <udc_update_iface_desc+0x7c>
80007c7e:	93 08       	st.w	r9[0x0],r8
80007c80:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80007c84:	48 59       	lddpc	r9,80007c98 <udc_update_iface_desc+0x7c>
80007c86:	93 08       	st.w	r9[0x0],r8
80007c88:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80007c8c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80007c90:	00 00       	add	r0,r0
80007c92:	0b 80       	ld.ub	r0,r5[0x0]
80007c94:	00 00       	add	r0,r0
80007c96:	0b 70       	ld.ub	r0,--r5
80007c98:	00 00       	add	r0,r0
80007c9a:	0b 84       	ld.ub	r4,r5[0x0]
80007c9c:	80 00       	ld.sh	r0,r0[0x0]
80007c9e:	7b fc       	ld.w	r12,sp[0x7c]

80007ca0 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
80007ca0:	eb cd 40 c0 	pushm	r6-r7,lr
80007ca4:	18 96       	mov	r6,r12
80007ca6:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
80007ca8:	f0 1f 00 11 	mcall	80007cec <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80007cac:	0d 88       	ld.ub	r8,r6[0x0]
80007cae:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80007cb0:	0c 3c       	cp.w	r12,r6
80007cb2:	e0 88 00 19 	brls	80007ce4 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80007cb6:	0d 98       	ld.ub	r8,r6[0x1]
80007cb8:	30 49       	mov	r9,4
80007cba:	f2 08 18 00 	cp.b	r8,r9
80007cbe:	c1 30       	breq	80007ce4 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
80007cc0:	ee 08 18 00 	cp.b	r8,r7
80007cc4:	c0 a1       	brne	80007cd8 <udc_next_desc_in_iface+0x38>
80007cc6:	c1 08       	rjmp	80007ce6 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80007cc8:	0d 98       	ld.ub	r8,r6[0x1]
80007cca:	f2 08 18 00 	cp.b	r8,r9
80007cce:	c0 b0       	breq	80007ce4 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
80007cd0:	ee 08 18 00 	cp.b	r8,r7
80007cd4:	c0 31       	brne	80007cda <udc_next_desc_in_iface+0x3a>
80007cd6:	c0 88       	rjmp	80007ce6 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80007cd8:	30 49       	mov	r9,4
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80007cda:	0d 88       	ld.ub	r8,r6[0x0]
80007cdc:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80007cde:	0c 3c       	cp.w	r12,r6
80007ce0:	fe 9b ff f4 	brhi	80007cc8 <udc_next_desc_in_iface+0x28>
80007ce4:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
80007ce6:	0c 9c       	mov	r12,r6
80007ce8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007cec:	80 00       	ld.sh	r0,r0[0x0]
80007cee:	7b fc       	ld.w	r12,sp[0x7c]

80007cf0 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
80007cf0:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
80007cf2:	48 48       	lddpc	r8,80007d00 <udc_valid_address+0x10>
80007cf4:	11 bc       	ld.ub	r12,r8[0x3]
80007cf6:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80007cfa:	f0 1f 00 03 	mcall	80007d04 <udc_valid_address+0x14>
}
80007cfe:	d8 02       	popm	pc
80007d00:	00 00       	add	r0,r0
80007d02:	0c 3c       	cp.w	r12,r6
80007d04:	80 00       	ld.sh	r0,r0[0x0]
80007d06:	4c 08       	lddpc	r8,80007e04 <udc_reset+0x38>

80007d08 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
80007d08:	eb cd 40 e0 	pushm	r5-r7,lr
80007d0c:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
80007d0e:	f0 1f 00 12 	mcall	80007d54 <udc_iface_enable+0x4c>
80007d12:	c1 f0       	breq	80007d50 <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80007d14:	49 18       	lddpc	r8,80007d58 <udc_iface_enable+0x50>
80007d16:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80007d18:	30 56       	mov	r6,5
80007d1a:	0c 9b       	mov	r11,r6
80007d1c:	0e 9c       	mov	r12,r7
80007d1e:	f0 1f 00 10 	mcall	80007d5c <udc_iface_enable+0x54>
80007d22:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80007d24:	c0 d0       	breq	80007d3e <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
80007d26:	19 ca       	ld.ub	r10,r12[0x4]
80007d28:	19 d8       	ld.ub	r8,r12[0x5]
80007d2a:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
80007d2e:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80007d30:	5c 7a       	castu.h	r10
80007d32:	19 bb       	ld.ub	r11,r12[0x3]
80007d34:	19 ac       	ld.ub	r12,r12[0x2]
80007d36:	f0 1f 00 0b 	mcall	80007d60 <udc_iface_enable+0x58>
80007d3a:	cf 01       	brne	80007d1a <udc_iface_enable+0x12>
80007d3c:	c0 a8       	rjmp	80007d50 <udc_iface_enable+0x48>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80007d3e:	48 a8       	lddpc	r8,80007d64 <udc_iface_enable+0x5c>
80007d40:	70 08       	ld.w	r8,r8[0x0]
80007d42:	70 18       	ld.w	r8,r8[0x4]
80007d44:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
80007d48:	70 0c       	ld.w	r12,r8[0x0]
80007d4a:	5d 1c       	icall	r12
80007d4c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007d50:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80007d54:	80 00       	ld.sh	r0,r0[0x0]
80007d56:	7c 1c       	ld.w	r12,lr[0x4]
80007d58:	00 00       	add	r0,r0
80007d5a:	0b 84       	ld.ub	r4,r5[0x0]
80007d5c:	80 00       	ld.sh	r0,r0[0x0]
80007d5e:	7c a0       	ld.w	r0,lr[0x28]
80007d60:	80 00       	ld.sh	r0,r0[0x0]
80007d62:	54 30       	stdsp	sp[0x10c],r0
80007d64:	00 00       	add	r0,r0
80007d66:	0b 70       	ld.ub	r0,--r5

80007d68 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
80007d68:	eb cd 40 e0 	pushm	r5-r7,lr
80007d6c:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80007d6e:	18 97       	mov	r7,r12
80007d70:	30 0b       	mov	r11,0
80007d72:	f0 1f 00 12 	mcall	80007db8 <udc_iface_disable+0x50>
80007d76:	c1 e0       	breq	80007db2 <udc_iface_disable+0x4a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80007d78:	49 18       	lddpc	r8,80007dbc <udc_iface_disable+0x54>
80007d7a:	70 08       	ld.w	r8,r8[0x0]
80007d7c:	70 18       	ld.w	r8,r8[0x4]
80007d7e:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80007d82:	6a 3c       	ld.w	r12,r5[0xc]
80007d84:	5d 1c       	icall	r12
80007d86:	18 9b       	mov	r11,r12
80007d88:	0c 9c       	mov	r12,r6
80007d8a:	f0 1f 00 0c 	mcall	80007db8 <udc_iface_disable+0x50>
80007d8e:	c1 20       	breq	80007db2 <udc_iface_disable+0x4a>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80007d90:	48 c8       	lddpc	r8,80007dc0 <udc_iface_disable+0x58>
80007d92:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80007d94:	30 56       	mov	r6,5
80007d96:	0c 9b       	mov	r11,r6
80007d98:	0e 9c       	mov	r12,r7
80007d9a:	f0 1f 00 0b 	mcall	80007dc4 <udc_iface_disable+0x5c>
80007d9e:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
80007da0:	c0 50       	breq	80007daa <udc_iface_disable+0x42>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
80007da2:	19 ac       	ld.ub	r12,r12[0x2]
80007da4:	f0 1f 00 09 	mcall	80007dc8 <udc_iface_disable+0x60>
		}
80007da8:	cf 7b       	rjmp	80007d96 <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
80007daa:	6a 18       	ld.w	r8,r5[0x4]
80007dac:	5d 18       	icall	r8
80007dae:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
80007db2:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80007db6:	00 00       	add	r0,r0
80007db8:	80 00       	ld.sh	r0,r0[0x0]
80007dba:	7c 1c       	ld.w	r12,lr[0x4]
80007dbc:	00 00       	add	r0,r0
80007dbe:	0b 70       	ld.ub	r0,--r5
80007dc0:	00 00       	add	r0,r0
80007dc2:	0b 84       	ld.ub	r4,r5[0x0]
80007dc4:	80 00       	ld.sh	r0,r0[0x0]
80007dc6:	7c a0       	ld.w	r0,lr[0x28]
80007dc8:	80 00       	ld.sh	r0,r0[0x0]
80007dca:	4e c8       	lddpc	r8,80007f78 <udc_process_setup+0x150>

80007dcc <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
80007dcc:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80007dd0:	49 28       	lddpc	r8,80007e18 <udc_reset+0x4c>
80007dd2:	11 89       	ld.ub	r9,r8[0x0]
80007dd4:	30 08       	mov	r8,0
80007dd6:	f0 09 18 00 	cp.b	r9,r8
80007dda:	c1 70       	breq	80007e08 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007ddc:	49 08       	lddpc	r8,80007e1c <udc_reset+0x50>
80007dde:	70 08       	ld.w	r8,r8[0x0]
80007de0:	70 08       	ld.w	r8,r8[0x0]
80007de2:	11 c9       	ld.ub	r9,r8[0x4]
80007de4:	30 08       	mov	r8,0
80007de6:	f0 09 18 00 	cp.b	r9,r8
80007dea:	c0 f0       	breq	80007e08 <udc_reset+0x3c>
80007dec:	30 07       	mov	r7,0
80007dee:	48 c6       	lddpc	r6,80007e1c <udc_reset+0x50>
				iface_num++) {
			udc_iface_disable(iface_num);
80007df0:	0e 9c       	mov	r12,r7
80007df2:	f0 1f 00 0c 	mcall	80007e20 <udc_reset+0x54>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80007df6:	2f f7       	sub	r7,-1
80007df8:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007dfa:	6c 08       	ld.w	r8,r6[0x0]
80007dfc:	70 08       	ld.w	r8,r8[0x0]
80007dfe:	11 c8       	ld.ub	r8,r8[0x4]
80007e00:	ee 08 18 00 	cp.b	r8,r7
80007e04:	fe 9b ff f6 	brhi	80007df0 <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80007e08:	30 09       	mov	r9,0
80007e0a:	48 48       	lddpc	r8,80007e18 <udc_reset+0x4c>
80007e0c:	b0 89       	st.b	r8[0x0],r9
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80007e0e:	30 09       	mov	r9,0
80007e10:	48 58       	lddpc	r8,80007e24 <udc_reset+0x58>
80007e12:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80007e14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007e18:	00 00       	add	r0,r0
80007e1a:	0b 80       	ld.ub	r0,r5[0x0]
80007e1c:	00 00       	add	r0,r0
80007e1e:	0b 70       	ld.ub	r0,--r5
80007e20:	80 00       	ld.sh	r0,r0[0x0]
80007e22:	7d 68       	ld.w	r8,lr[0x58]
80007e24:	00 00       	add	r0,r0
80007e26:	0b 7c       	ld.ub	r12,--r5

80007e28 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80007e28:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80007e2c:	fe f8 04 cc 	ld.w	r8,pc[1228]
80007e30:	30 09       	mov	r9,0
80007e32:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80007e34:	30 0a       	mov	r10,0
80007e36:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80007e38:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
80007e3a:	11 88       	ld.ub	r8,r8[0x0]
80007e3c:	10 9a       	mov	r10,r8
80007e3e:	f2 08 18 00 	cp.b	r8,r9
80007e42:	c0 94       	brge	80007e54 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
80007e44:	fe f9 04 b4 	ld.w	r9,pc[1204]
80007e48:	92 3b       	ld.sh	r11,r9[0x6]
80007e4a:	30 09       	mov	r9,0
80007e4c:	f2 0b 19 00 	cp.h	r11,r9
80007e50:	e0 80 02 50 	breq	800082f0 <udc_process_setup+0x4c8>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80007e54:	10 99       	mov	r9,r8
80007e56:	e2 19 00 60 	andl	r9,0x60,COH
80007e5a:	e0 81 01 f4 	brne	80008242 <udc_process_setup+0x41a>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80007e5e:	f2 0a 18 00 	cp.b	r10,r9
80007e62:	e0 84 01 16 	brge	8000808e <udc_process_setup+0x266>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
80007e66:	fe f9 04 92 	ld.w	r9,pc[1170]
80007e6a:	92 39       	ld.sh	r9,r9[0x6]
80007e6c:	58 09       	cp.w	r9,0
80007e6e:	e0 80 01 ea 	breq	80008242 <udc_process_setup+0x41a>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80007e72:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007e76:	e0 81 00 b3 	brne	80007fdc <udc_process_setup+0x1b4>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80007e7a:	fe fa 04 7e 	ld.w	r10,pc[1150]
80007e7e:	15 9a       	ld.ub	r10,r10[0x1]
80007e80:	30 6b       	mov	r11,6
80007e82:	f6 0a 18 00 	cp.b	r10,r11
80007e86:	c1 a0       	breq	80007eba <udc_process_setup+0x92>
80007e88:	30 8b       	mov	r11,8
80007e8a:	f6 0a 18 00 	cp.b	r10,r11
80007e8e:	e0 80 00 9a 	breq	80007fc2 <udc_process_setup+0x19a>
80007e92:	30 0b       	mov	r11,0
80007e94:	f6 0a 18 00 	cp.b	r10,r11
80007e98:	e0 81 00 a2 	brne	80007fdc <udc_process_setup+0x1b4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
80007e9c:	30 28       	mov	r8,2
80007e9e:	f0 09 19 00 	cp.h	r9,r8
80007ea2:	c0 40       	breq	80007eaa <udc_process_setup+0x82>
80007ea4:	30 0c       	mov	r12,0
80007ea6:	e0 8f 01 cc 	bral	8000823e <udc_process_setup+0x416>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
80007eaa:	30 2b       	mov	r11,2
80007eac:	fe fc 04 50 	ld.w	r12,pc[1104]
80007eb0:	f0 1f 01 14 	mcall	80008300 <udc_process_setup+0x4d8>
80007eb4:	30 1c       	mov	r12,1
80007eb6:	e0 8f 01 c4 	bral	8000823e <udc_process_setup+0x416>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80007eba:	fe f8 04 3e 	ld.w	r8,pc[1086]
80007ebe:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80007ec0:	f2 08 16 08 	lsr	r8,r9,0x8
80007ec4:	30 2a       	mov	r10,2
80007ec6:	f4 08 18 00 	cp.b	r8,r10
80007eca:	c1 80       	breq	80007efa <udc_process_setup+0xd2>
80007ecc:	e0 8b 00 07 	brhi	80007eda <udc_process_setup+0xb2>
80007ed0:	30 19       	mov	r9,1
80007ed2:	f2 08 18 00 	cp.b	r8,r9
80007ed6:	c7 41       	brne	80007fbe <udc_process_setup+0x196>
80007ed8:	c0 a8       	rjmp	80007eec <udc_process_setup+0xc4>
80007eda:	30 3a       	mov	r10,3
80007edc:	f4 08 18 00 	cp.b	r8,r10
80007ee0:	c3 70       	breq	80007f4e <udc_process_setup+0x126>
80007ee2:	30 f9       	mov	r9,15
80007ee4:	f2 08 18 00 	cp.b	r8,r9
80007ee8:	c6 b1       	brne	80007fbe <udc_process_setup+0x196>
80007eea:	c2 68       	rjmp	80007f36 <udc_process_setup+0x10e>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80007eec:	fe f8 04 18 	ld.w	r8,pc[1048]
80007ef0:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80007ef2:	19 8b       	ld.ub	r11,r12[0x0]
80007ef4:	f0 1f 01 03 	mcall	80008300 <udc_process_setup+0x4d8>
80007ef8:	c5 38       	rjmp	80007f9e <udc_process_setup+0x176>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80007efa:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80007efc:	fe f8 04 08 	ld.w	r8,pc[1032]
80007f00:	70 08       	ld.w	r8,r8[0x0]
80007f02:	f1 38 00 11 	ld.ub	r8,r8[17]
80007f06:	f2 08 18 00 	cp.b	r8,r9
80007f0a:	e0 88 00 5a 	brls	80007fbe <udc_process_setup+0x196>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80007f0e:	fe f8 03 f6 	ld.w	r8,pc[1014]
80007f12:	70 18       	ld.w	r8,r8[0x4]
80007f14:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80007f18:	19 a9       	ld.ub	r9,r12[0x2]
80007f1a:	19 b8       	ld.ub	r8,r12[0x3]
80007f1c:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80007f20:	5c c8       	swap.bh	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
80007f22:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80007f26:	f0 1f 00 f7 	mcall	80008300 <udc_process_setup+0x4d8>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80007f2a:	fe f8 03 ce 	ld.w	r8,pc[974]
80007f2e:	70 28       	ld.w	r8,r8[0x8]
80007f30:	30 29       	mov	r9,2
80007f32:	b0 99       	st.b	r8[0x1],r9
80007f34:	c3 58       	rjmp	80007f9e <udc_process_setup+0x176>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
80007f36:	fe f8 03 ce 	ld.w	r8,pc[974]
80007f3a:	70 2c       	ld.w	r12,r8[0x8]
80007f3c:	58 0c       	cp.w	r12,0
80007f3e:	c4 00       	breq	80007fbe <udc_process_setup+0x196>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
80007f40:	19 ab       	ld.ub	r11,r12[0x2]
80007f42:	19 b8       	ld.ub	r8,r12[0x3]
80007f44:	f1 eb 10 8b 	or	r11,r8,r11<<0x8
80007f48:	f0 1f 00 ee 	mcall	80008300 <udc_process_setup+0x4d8>
80007f4c:	c2 98       	rjmp	80007f9e <udc_process_setup+0x176>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80007f4e:	5c 59       	castu.b	r9
80007f50:	58 19       	cp.w	r9,1
80007f52:	c1 00       	breq	80007f72 <udc_process_setup+0x14a>
80007f54:	58 29       	cp.w	r9,2
80007f56:	c0 40       	breq	80007f5e <udc_process_setup+0x136>
80007f58:	58 09       	cp.w	r9,0
80007f5a:	c0 60       	breq	80007f66 <udc_process_setup+0x13e>
80007f5c:	c3 18       	rjmp	80007fbe <udc_process_setup+0x196>
80007f5e:	fe fc 03 aa 	ld.w	r12,pc[938]
80007f62:	30 eb       	mov	r11,14
80007f64:	c0 a8       	rjmp	80007f78 <udc_process_setup+0x150>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
80007f66:	30 4b       	mov	r11,4
80007f68:	fe fc 03 a4 	ld.w	r12,pc[932]
80007f6c:	f0 1f 00 e5 	mcall	80008300 <udc_process_setup+0x4d8>
80007f70:	c1 78       	rjmp	80007f9e <udc_process_setup+0x176>
80007f72:	fe fc 03 9e 	ld.w	r12,pc[926]
80007f76:	30 db       	mov	r11,13
80007f78:	fe fa 03 9c 	ld.w	r10,pc[924]
80007f7c:	2f ea       	sub	r10,-2
80007f7e:	18 98       	mov	r8,r12
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80007f80:	11 39       	ld.ub	r9,r8++
80007f82:	5c c9       	swap.bh	r9
80007f84:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
80007f86:	f0 0c 01 09 	sub	r9,r8,r12
80007f8a:	f6 09 18 00 	cp.b	r9,r11
80007f8e:	cf 93       	brcs	80007f80 <udc_process_setup+0x158>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
80007f90:	a1 7b       	lsl	r11,0x1
80007f92:	2f eb       	sub	r11,-2
80007f94:	fe fc 03 80 	ld.w	r12,pc[896]
80007f98:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
80007f9a:	f0 1f 00 da 	mcall	80008300 <udc_process_setup+0x4d8>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
80007f9e:	fe f8 03 5a 	ld.w	r8,pc[858]
80007fa2:	90 39       	ld.sh	r9,r8[0x6]
80007fa4:	90 68       	ld.sh	r8,r8[0xc]
80007fa6:	f2 08 19 00 	cp.h	r8,r9
80007faa:	e0 8b 00 05 	brhi	80007fb4 <udc_process_setup+0x18c>
80007fae:	30 1c       	mov	r12,1
80007fb0:	e0 8f 01 47 	bral	8000823e <udc_process_setup+0x416>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
80007fb4:	fe f8 03 44 	ld.w	r8,pc[836]
80007fb8:	b0 69       	st.h	r8[0xc],r9
80007fba:	30 1c       	mov	r12,1
80007fbc:	c4 19       	rjmp	8000823e <udc_process_setup+0x416>
80007fbe:	30 0c       	mov	r12,0
80007fc0:	c3 f9       	rjmp	8000823e <udc_process_setup+0x416>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
80007fc2:	30 18       	mov	r8,1
80007fc4:	f0 09 19 00 	cp.h	r9,r8
80007fc8:	c0 30       	breq	80007fce <udc_process_setup+0x1a6>
80007fca:	30 0c       	mov	r12,0
80007fcc:	c3 99       	rjmp	8000823e <udc_process_setup+0x416>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
80007fce:	30 1b       	mov	r11,1
80007fd0:	fe fc 03 48 	ld.w	r12,pc[840]
80007fd4:	f0 1f 00 cb 	mcall	80008300 <udc_process_setup+0x4d8>
80007fd8:	30 1c       	mov	r12,1
80007fda:	c3 29       	rjmp	8000823e <udc_process_setup+0x416>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80007fdc:	58 18       	cp.w	r8,1
80007fde:	c3 61       	brne	8000804a <udc_process_setup+0x222>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80007fe0:	fe fa 03 18 	ld.w	r10,pc[792]
80007fe4:	15 9b       	ld.ub	r11,r10[0x1]
80007fe6:	30 aa       	mov	r10,10
80007fe8:	f4 0b 18 00 	cp.b	r11,r10
80007fec:	c2 f1       	brne	8000804a <udc_process_setup+0x222>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
80007fee:	f0 09 19 00 	cp.h	r9,r8
80007ff2:	c2 a1       	brne	80008046 <udc_process_setup+0x21e>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
80007ff4:	fe f8 03 24 	ld.w	r8,pc[804]
80007ff8:	11 89       	ld.ub	r9,r8[0x0]
80007ffa:	30 08       	mov	r8,0
80007ffc:	f0 09 18 00 	cp.b	r9,r8
80008000:	c2 30       	breq	80008046 <udc_process_setup+0x21e>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80008002:	fe f8 02 f6 	ld.w	r8,pc[758]
80008006:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80008008:	fe f8 03 14 	ld.w	r8,pc[788]
8000800c:	70 08       	ld.w	r8,r8[0x0]
8000800e:	70 08       	ld.w	r8,r8[0x0]
80008010:	11 c8       	ld.ub	r8,r8[0x4]
80008012:	ee 08 18 00 	cp.b	r8,r7
80008016:	e0 88 00 18 	brls	80008046 <udc_process_setup+0x21e>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000801a:	30 0b       	mov	r11,0
8000801c:	0e 9c       	mov	r12,r7
8000801e:	f0 1f 00 c1 	mcall	80008320 <udc_process_setup+0x4f8>
80008022:	c1 20       	breq	80008046 <udc_process_setup+0x21e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
80008024:	fe f8 02 f8 	ld.w	r8,pc[760]
80008028:	70 08       	ld.w	r8,r8[0x0]
8000802a:	70 18       	ld.w	r8,r8[0x4]
8000802c:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80008030:	70 3c       	ld.w	r12,r8[0xc]
80008032:	5d 1c       	icall	r12
80008034:	fe f8 02 f0 	ld.w	r8,pc[752]
80008038:	b0 8c       	st.b	r8[0x0],r12

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
8000803a:	30 1b       	mov	r11,1
8000803c:	10 9c       	mov	r12,r8
8000803e:	f0 1f 00 b1 	mcall	80008300 <udc_process_setup+0x4d8>
80008042:	30 1c       	mov	r12,1
80008044:	cf d8       	rjmp	8000823e <udc_process_setup+0x416>
80008046:	30 0c       	mov	r12,0
80008048:	cf b8       	rjmp	8000823e <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000804a:	58 28       	cp.w	r8,2
8000804c:	e0 81 00 fb 	brne	80008242 <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80008050:	fe f8 02 a8 	ld.w	r8,pc[680]
80008054:	11 9a       	ld.ub	r10,r8[0x1]
80008056:	30 08       	mov	r8,0
80008058:	f0 0a 18 00 	cp.b	r10,r8
8000805c:	e0 81 00 f0 	brne	8000823c <udc_process_setup+0x414>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
80008060:	30 28       	mov	r8,2
80008062:	f0 09 19 00 	cp.h	r9,r8
80008066:	c0 30       	breq	8000806c <udc_process_setup+0x244>
80008068:	30 0c       	mov	r12,0
8000806a:	ce a8       	rjmp	8000823e <udc_process_setup+0x416>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
8000806c:	fe f8 02 8c 	ld.w	r8,pc[652]
80008070:	11 dc       	ld.ub	r12,r8[0x5]
80008072:	f0 1f 00 ae 	mcall	80008328 <udc_process_setup+0x500>
80008076:	e0 68 01 00 	mov	r8,256
8000807a:	f9 b8 00 00 	moveq	r8,0
8000807e:	fe fc 02 ae 	ld.w	r12,pc[686]
80008082:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
80008084:	30 2b       	mov	r11,2
80008086:	f0 1f 00 9f 	mcall	80008300 <udc_process_setup+0x4d8>
8000808a:	30 1c       	mov	r12,1
8000808c:	cd 98       	rjmp	8000823e <udc_process_setup+0x416>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000808e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008092:	c7 c1       	brne	8000818a <udc_process_setup+0x362>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80008094:	fe f9 02 64 	ld.w	r9,pc[612]
80008098:	13 99       	ld.ub	r9,r9[0x1]
8000809a:	30 3a       	mov	r10,3
8000809c:	f4 09 18 00 	cp.b	r9,r10
800080a0:	e0 80 00 ce 	breq	8000823c <udc_process_setup+0x414>
800080a4:	e0 8b 00 07 	brhi	800080b2 <udc_process_setup+0x28a>
800080a8:	30 1a       	mov	r10,1
800080aa:	f4 09 18 00 	cp.b	r9,r10
800080ae:	c6 e1       	brne	8000818a <udc_process_setup+0x362>
800080b0:	c1 a8       	rjmp	800080e4 <udc_process_setup+0x2bc>
800080b2:	30 5a       	mov	r10,5
800080b4:	f4 09 18 00 	cp.b	r9,r10
800080b8:	c0 60       	breq	800080c4 <udc_process_setup+0x29c>
800080ba:	30 9a       	mov	r10,9
800080bc:	f4 09 18 00 	cp.b	r9,r10
800080c0:	c6 51       	brne	8000818a <udc_process_setup+0x362>
800080c2:	c2 78       	rjmp	80008110 <udc_process_setup+0x2e8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
800080c4:	fe f8 02 34 	ld.w	r8,pc[564]
800080c8:	90 39       	ld.sh	r9,r8[0x6]
800080ca:	30 08       	mov	r8,0
800080cc:	f0 09 19 00 	cp.h	r9,r8
800080d0:	c0 30       	breq	800080d6 <udc_process_setup+0x2ae>
800080d2:	30 0c       	mov	r12,0
800080d4:	cb 58       	rjmp	8000823e <udc_process_setup+0x416>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
800080d6:	fe f9 02 5a 	ld.w	r9,pc[602]
800080da:	fe f8 02 1e 	ld.w	r8,pc[542]
800080de:	91 49       	st.w	r8[0x10],r9
800080e0:	30 1c       	mov	r12,1
800080e2:	ca e8       	rjmp	8000823e <udc_process_setup+0x416>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
800080e4:	fe f8 02 14 	ld.w	r8,pc[532]
800080e8:	90 39       	ld.sh	r9,r8[0x6]
800080ea:	30 08       	mov	r8,0
800080ec:	f0 09 19 00 	cp.h	r9,r8
800080f0:	c0 e1       	brne	8000810c <udc_process_setup+0x2e4>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
800080f2:	fe f8 02 06 	ld.w	r8,pc[518]
800080f6:	90 19       	ld.sh	r9,r8[0x2]
800080f8:	30 18       	mov	r8,1
800080fa:	f0 09 19 00 	cp.h	r9,r8
800080fe:	c0 71       	brne	8000810c <udc_process_setup+0x2e4>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
80008100:	4f f8       	lddpc	r8,800082fc <udc_process_setup+0x4d4>
80008102:	90 09       	ld.sh	r9,r8[0x0]
80008104:	a9 d9       	cbr	r9,0x9
80008106:	b0 09       	st.h	r8[0x0],r9
80008108:	30 1c       	mov	r12,1
8000810a:	c9 a8       	rjmp	8000823e <udc_process_setup+0x416>
8000810c:	30 0c       	mov	r12,0
8000810e:	c9 88       	rjmp	8000823e <udc_process_setup+0x416>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
80008110:	4f a8       	lddpc	r8,800082f8 <udc_process_setup+0x4d0>
80008112:	90 39       	ld.sh	r9,r8[0x6]
80008114:	30 08       	mov	r8,0
80008116:	f0 09 19 00 	cp.h	r9,r8
8000811a:	c3 41       	brne	80008182 <udc_process_setup+0x35a>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
8000811c:	f0 1f 00 86 	mcall	80008334 <udc_process_setup+0x50c>
80008120:	c3 10       	breq	80008182 <udc_process_setup+0x35a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80008122:	4f 68       	lddpc	r8,800082f8 <udc_process_setup+0x4d0>
80008124:	11 b9       	ld.ub	r9,r8[0x3]
80008126:	4f 88       	lddpc	r8,80008304 <udc_process_setup+0x4dc>
80008128:	70 08       	ld.w	r8,r8[0x0]
8000812a:	f1 38 00 11 	ld.ub	r8,r8[17]
8000812e:	10 39       	cp.w	r9,r8
80008130:	e0 89 00 29 	brgt	80008182 <udc_process_setup+0x35a>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
80008134:	f0 1f 00 81 	mcall	80008338 <udc_process_setup+0x510>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80008138:	4f 08       	lddpc	r8,800082f8 <udc_process_setup+0x4d0>
8000813a:	11 b8       	ld.ub	r8,r8[0x3]
8000813c:	4f 79       	lddpc	r9,80008318 <udc_process_setup+0x4f0>
8000813e:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
80008140:	58 08       	cp.w	r8,0
80008142:	c2 20       	breq	80008186 <udc_process_setup+0x35e>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
80008144:	20 18       	sub	r8,1
80008146:	4f 09       	lddpc	r9,80008304 <udc_process_setup+0x4dc>
80008148:	72 19       	ld.w	r9,r9[0x4]
8000814a:	f2 08 00 38 	add	r8,r9,r8<<0x3
8000814e:	4f 49       	lddpc	r9,8000831c <udc_process_setup+0x4f4>
80008150:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80008152:	70 08       	ld.w	r8,r8[0x0]
80008154:	11 c9       	ld.ub	r9,r8[0x4]
80008156:	30 08       	mov	r8,0
80008158:	f0 09 18 00 	cp.b	r9,r8
8000815c:	c1 50       	breq	80008186 <udc_process_setup+0x35e>
8000815e:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
80008160:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80008162:	4e f6       	lddpc	r6,8000831c <udc_process_setup+0x4f4>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
80008164:	0a 9b       	mov	r11,r5
80008166:	0e 9c       	mov	r12,r7
80008168:	f0 1f 00 75 	mcall	8000833c <udc_process_setup+0x514>
8000816c:	c0 b0       	breq	80008182 <udc_process_setup+0x35a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000816e:	2f f7       	sub	r7,-1
80008170:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80008172:	6c 08       	ld.w	r8,r6[0x0]
80008174:	70 08       	ld.w	r8,r8[0x0]
80008176:	11 c8       	ld.ub	r8,r8[0x4]
80008178:	ee 08 18 00 	cp.b	r8,r7
8000817c:	fe 9b ff f4 	brhi	80008164 <udc_process_setup+0x33c>
80008180:	c0 38       	rjmp	80008186 <udc_process_setup+0x35e>
80008182:	30 0c       	mov	r12,0
80008184:	c5 d8       	rjmp	8000823e <udc_process_setup+0x416>
80008186:	30 1c       	mov	r12,1
80008188:	c5 b8       	rjmp	8000823e <udc_process_setup+0x416>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000818a:	58 18       	cp.w	r8,1
8000818c:	c2 21       	brne	800081d0 <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000818e:	4d b9       	lddpc	r9,800082f8 <udc_process_setup+0x4d0>
80008190:	13 9a       	ld.ub	r10,r9[0x1]
80008192:	30 b9       	mov	r9,11
80008194:	f2 0a 18 00 	cp.b	r10,r9
80008198:	c1 c1       	brne	800081d0 <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
8000819a:	4d 88       	lddpc	r8,800082f8 <udc_process_setup+0x4d0>
8000819c:	90 39       	ld.sh	r9,r8[0x6]
8000819e:	30 08       	mov	r8,0
800081a0:	f0 09 19 00 	cp.h	r9,r8
800081a4:	c1 41       	brne	800081cc <udc_process_setup+0x3a4>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
800081a6:	4d d8       	lddpc	r8,80008318 <udc_process_setup+0x4f0>
800081a8:	11 89       	ld.ub	r9,r8[0x0]
800081aa:	30 08       	mov	r8,0
800081ac:	f0 09 18 00 	cp.b	r9,r8
800081b0:	c0 e0       	breq	800081cc <udc_process_setup+0x3a4>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
800081b2:	4d 28       	lddpc	r8,800082f8 <udc_process_setup+0x4d0>
800081b4:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
800081b6:	11 d7       	ld.ub	r7,r8[0x5]
800081b8:	0e 9c       	mov	r12,r7
800081ba:	f0 1f 00 62 	mcall	80008340 <udc_process_setup+0x518>
800081be:	c0 70       	breq	800081cc <udc_process_setup+0x3a4>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
800081c0:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
800081c4:	0e 9c       	mov	r12,r7
800081c6:	f0 1f 00 5e 	mcall	8000833c <udc_process_setup+0x514>
800081ca:	c3 a8       	rjmp	8000823e <udc_process_setup+0x416>
800081cc:	30 0c       	mov	r12,0
800081ce:	c3 88       	rjmp	8000823e <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
800081d0:	58 28       	cp.w	r8,2
800081d2:	c3 81       	brne	80008242 <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
800081d4:	4c 98       	lddpc	r8,800082f8 <udc_process_setup+0x4d0>
800081d6:	11 98       	ld.ub	r8,r8[0x1]
800081d8:	30 19       	mov	r9,1
800081da:	f2 08 18 00 	cp.b	r8,r9
800081de:	c0 60       	breq	800081ea <udc_process_setup+0x3c2>
800081e0:	30 39       	mov	r9,3
800081e2:	f2 08 18 00 	cp.b	r8,r9
800081e6:	c2 b1       	brne	8000823c <udc_process_setup+0x414>
800081e8:	c1 48       	rjmp	80008210 <udc_process_setup+0x3e8>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
800081ea:	4c 48       	lddpc	r8,800082f8 <udc_process_setup+0x4d0>
800081ec:	90 39       	ld.sh	r9,r8[0x6]
800081ee:	30 08       	mov	r8,0
800081f0:	f0 09 19 00 	cp.h	r9,r8
800081f4:	c0 c1       	brne	8000820c <udc_process_setup+0x3e4>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
800081f6:	4c 18       	lddpc	r8,800082f8 <udc_process_setup+0x4d0>
800081f8:	90 19       	ld.sh	r9,r8[0x2]
800081fa:	30 08       	mov	r8,0
800081fc:	f0 09 19 00 	cp.h	r9,r8
80008200:	c0 61       	brne	8000820c <udc_process_setup+0x3e4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80008202:	4b e8       	lddpc	r8,800082f8 <udc_process_setup+0x4d0>
80008204:	11 dc       	ld.ub	r12,r8[0x5]
80008206:	f0 1f 00 50 	mcall	80008344 <udc_process_setup+0x51c>
8000820a:	c1 a8       	rjmp	8000823e <udc_process_setup+0x416>
8000820c:	30 0c       	mov	r12,0
8000820e:	c1 88       	rjmp	8000823e <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80008210:	4b a8       	lddpc	r8,800082f8 <udc_process_setup+0x4d0>
80008212:	90 39       	ld.sh	r9,r8[0x6]
80008214:	30 08       	mov	r8,0
80008216:	f0 09 19 00 	cp.h	r9,r8
8000821a:	c0 f1       	brne	80008238 <udc_process_setup+0x410>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000821c:	4b 78       	lddpc	r8,800082f8 <udc_process_setup+0x4d0>
8000821e:	90 19       	ld.sh	r9,r8[0x2]
80008220:	30 08       	mov	r8,0
80008222:	f0 09 19 00 	cp.h	r9,r8
80008226:	c0 91       	brne	80008238 <udc_process_setup+0x410>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
80008228:	4b 47       	lddpc	r7,800082f8 <udc_process_setup+0x4d0>
8000822a:	0f dc       	ld.ub	r12,r7[0x5]
8000822c:	f0 1f 00 47 	mcall	80008348 <udc_process_setup+0x520>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80008230:	0f dc       	ld.ub	r12,r7[0x5]
80008232:	f0 1f 00 47 	mcall	8000834c <udc_process_setup+0x524>
80008236:	c0 48       	rjmp	8000823e <udc_process_setup+0x416>
80008238:	30 0c       	mov	r12,0
8000823a:	c0 28       	rjmp	8000823e <udc_process_setup+0x416>
8000823c:	30 0c       	mov	r12,0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
8000823e:	58 0c       	cp.w	r12,0
80008240:	c5 a1       	brne	800082f4 <udc_process_setup+0x4cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80008242:	4a e8       	lddpc	r8,800082f8 <udc_process_setup+0x4d0>
80008244:	11 88       	ld.ub	r8,r8[0x0]
80008246:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000824a:	58 18       	cp.w	r8,1
8000824c:	c2 61       	brne	80008298 <udc_process_setup+0x470>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
8000824e:	4b 38       	lddpc	r8,80008318 <udc_process_setup+0x4f0>
80008250:	11 89       	ld.ub	r9,r8[0x0]
80008252:	30 08       	mov	r8,0
80008254:	f0 09 18 00 	cp.b	r9,r8
80008258:	c2 00       	breq	80008298 <udc_process_setup+0x470>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000825a:	4a 88       	lddpc	r8,800082f8 <udc_process_setup+0x4d0>
8000825c:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000825e:	4b 08       	lddpc	r8,8000831c <udc_process_setup+0x4f4>
80008260:	70 08       	ld.w	r8,r8[0x0]
80008262:	70 08       	ld.w	r8,r8[0x0]
80008264:	11 c8       	ld.ub	r8,r8[0x4]
80008266:	ee 08 18 00 	cp.b	r8,r7
8000826a:	e0 88 00 17 	brls	80008298 <udc_process_setup+0x470>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000826e:	0e 96       	mov	r6,r7
80008270:	30 0b       	mov	r11,0
80008272:	0e 9c       	mov	r12,r7
80008274:	f0 1f 00 2b 	mcall	80008320 <udc_process_setup+0x4f8>
80008278:	c1 00       	breq	80008298 <udc_process_setup+0x470>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000827a:	4a 98       	lddpc	r8,8000831c <udc_process_setup+0x4f4>
8000827c:	70 08       	ld.w	r8,r8[0x0]
8000827e:	70 18       	ld.w	r8,r8[0x4]
80008280:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80008284:	6e 3c       	ld.w	r12,r7[0xc]
80008286:	5d 1c       	icall	r12
80008288:	18 9b       	mov	r11,r12
8000828a:	0c 9c       	mov	r12,r6
8000828c:	f0 1f 00 25 	mcall	80008320 <udc_process_setup+0x4f8>
80008290:	c0 40       	breq	80008298 <udc_process_setup+0x470>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80008292:	6e 2c       	ld.w	r12,r7[0x8]
80008294:	5d 1c       	icall	r12
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
80008296:	c2 f1       	brne	800082f4 <udc_process_setup+0x4cc>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
80008298:	49 88       	lddpc	r8,800082f8 <udc_process_setup+0x4d0>
8000829a:	11 88       	ld.ub	r8,r8[0x0]
8000829c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800082a0:	58 28       	cp.w	r8,2
800082a2:	c2 71       	brne	800082f0 <udc_process_setup+0x4c8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
800082a4:	49 d8       	lddpc	r8,80008318 <udc_process_setup+0x4f0>
800082a6:	11 89       	ld.ub	r9,r8[0x0]
800082a8:	30 08       	mov	r8,0
800082aa:	f0 09 18 00 	cp.b	r9,r8
800082ae:	c2 10       	breq	800082f0 <udc_process_setup+0x4c8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800082b0:	49 b8       	lddpc	r8,8000831c <udc_process_setup+0x4f4>
800082b2:	70 08       	ld.w	r8,r8[0x0]
800082b4:	70 09       	ld.w	r9,r8[0x0]
800082b6:	13 ca       	ld.ub	r10,r9[0x4]
800082b8:	30 09       	mov	r9,0
800082ba:	f2 0a 18 00 	cp.b	r10,r9
800082be:	c1 90       	breq	800082f0 <udc_process_setup+0x4c8>
800082c0:	30 07       	mov	r7,0
800082c2:	49 75       	lddpc	r5,8000831c <udc_process_setup+0x4f4>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
800082c4:	70 18       	ld.w	r8,r8[0x4]
800082c6:	f0 07 03 26 	ld.w	r6,r8[r7<<0x2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
800082ca:	6c 3c       	ld.w	r12,r6[0xc]
800082cc:	5d 1c       	icall	r12
800082ce:	18 9b       	mov	r11,r12
800082d0:	0e 9c       	mov	r12,r7
800082d2:	f0 1f 00 14 	mcall	80008320 <udc_process_setup+0x4f8>
800082d6:	c0 d0       	breq	800082f0 <udc_process_setup+0x4c8>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
800082d8:	6c 2c       	ld.w	r12,r6[0x8]
800082da:	5d 1c       	icall	r12
800082dc:	c0 c1       	brne	800082f4 <udc_process_setup+0x4cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
800082de:	2f f7       	sub	r7,-1
800082e0:	5c 57       	castu.b	r7
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800082e2:	6a 08       	ld.w	r8,r5[0x0]
800082e4:	70 09       	ld.w	r9,r8[0x0]
800082e6:	13 c9       	ld.ub	r9,r9[0x4]
800082e8:	ee 09 18 00 	cp.b	r9,r7
800082ec:	fe 9b ff ec 	brhi	800082c4 <udc_process_setup+0x49c>
800082f0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800082f4:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800082f8:	00 00       	add	r0,r0
800082fa:	0c 3c       	cp.w	r12,r6
800082fc:	00 00       	add	r0,r0
800082fe:	0b 7c       	ld.ub	r12,--r5
80008300:	80 00       	ld.sh	r0,r0[0x0]
80008302:	4c 44       	lddpc	r4,80008410 <uhc_remotewakeup+0x18>
80008304:	00 00       	add	r0,r0
80008306:	00 20       	rsub	r0,r0
80008308:	00 00       	add	r0,r0
8000830a:	03 78       	ld.ub	r8,--r1
8000830c:	00 00       	add	r0,r0
8000830e:	03 b8       	ld.ub	r8,r1[0x3]
80008310:	00 00       	add	r0,r0
80008312:	03 88       	ld.ub	r8,r1[0x0]
80008314:	00 00       	add	r0,r0
80008316:	03 98       	ld.ub	r8,r1[0x1]
80008318:	00 00       	add	r0,r0
8000831a:	0b 80       	ld.ub	r0,r5[0x0]
8000831c:	00 00       	add	r0,r0
8000831e:	0b 70       	ld.ub	r0,--r5
80008320:	80 00       	ld.sh	r0,r0[0x0]
80008322:	7c 1c       	ld.w	r12,lr[0x4]
80008324:	00 00       	add	r0,r0
80008326:	0b 78       	ld.ub	r8,--r5
80008328:	80 00       	ld.sh	r0,r0[0x0]
8000832a:	4c 50       	lddpc	r0,8000843c <uhc_remotewakeup+0x44>
8000832c:	00 00       	add	r0,r0
8000832e:	0b 74       	ld.ub	r4,--r5
80008330:	80 00       	ld.sh	r0,r0[0x0]
80008332:	7c f0       	ld.w	r0,lr[0x3c]
80008334:	80 00       	ld.sh	r0,r0[0x0]
80008336:	4c 2a       	lddpc	r10,8000843c <uhc_remotewakeup+0x44>
80008338:	80 00       	ld.sh	r0,r0[0x0]
8000833a:	7d cc       	ld.w	r12,lr[0x70]
8000833c:	80 00       	ld.sh	r0,r0[0x0]
8000833e:	7d 08       	ld.w	r8,lr[0x40]
80008340:	80 00       	ld.sh	r0,r0[0x0]
80008342:	7d 68       	ld.w	r8,lr[0x58]
80008344:	80 00       	ld.sh	r0,r0[0x0]
80008346:	4d 0c       	lddpc	r12,80008484 <uhc_suspend>
80008348:	80 00       	ld.sh	r0,r0[0x0]
8000834a:	4e 60       	lddpc	r0,800084e0 <uhc_start+0x18>
8000834c:	80 00       	ld.sh	r0,r0[0x0]
8000834e:	4c 64       	lddpc	r4,80008464 <uhc_is_suspend+0x18>

80008350 <udc_stop>:
}

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
80008350:	d4 01       	pushm	lr
	udd_disable();
80008352:	f0 1f 00 03 	mcall	8000835c <udc_stop+0xc>
	udc_reset();
80008356:	f0 1f 00 03 	mcall	80008360 <udc_stop+0x10>
}
8000835a:	d8 02       	popm	pc
8000835c:	80 00       	ld.sh	r0,r0[0x0]
8000835e:	52 28       	stdsp	sp[0x88],r8
80008360:	80 00       	ld.sh	r0,r0[0x0]
80008362:	7d cc       	ld.w	r12,lr[0x70]

80008364 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
80008364:	d4 01       	pushm	lr
	udd_enable();
80008366:	f0 1f 00 02 	mcall	8000836c <udc_start+0x8>
}
8000836a:	d8 02       	popm	pc
8000836c:	80 00       	ld.sh	r0,r0[0x0]
8000836e:	55 a4       	stdsp	sp[0x168],r4

80008370 <uhc_enable_timeout_callback>:
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80008370:	48 38       	lddpc	r8,8000837c <uhc_enable_timeout_callback+0xc>
80008372:	91 0b       	st.w	r8[0x0],r11
	uhc_sof_timeout = timeout;
80008374:	48 38       	lddpc	r8,80008380 <uhc_enable_timeout_callback+0x10>
80008376:	b0 8c       	st.b	r8[0x0],r12
}
80008378:	5e fc       	retal	r12
8000837a:	00 00       	add	r0,r0
8000837c:	00 00       	add	r0,r0
8000837e:	0b a8       	ld.ub	r8,r5[0x2]
80008380:	00 00       	add	r0,r0
80008382:	0c d0       	st.w	--r6,r0

80008384 <uhc_enumeration_step2>:
/**
 * \brief Device enumeration step 2
 * Lets USB line in IDLE state during 20ms.
 */
static void uhc_enumeration_step2(void)
{
80008384:	d4 01       	pushm	lr
	uhc_enable_timeout_callback(20, uhc_enumeration_step3);
80008386:	48 3b       	lddpc	r11,80008390 <uhc_enumeration_step2+0xc>
80008388:	31 4c       	mov	r12,20
8000838a:	f0 1f 00 03 	mcall	80008394 <uhc_enumeration_step2+0x10>
}
8000838e:	d8 02       	popm	pc
80008390:	80 00       	ld.sh	r0,r0[0x0]
80008392:	85 b8       	st.w	r2[0x2c],r8
80008394:	80 00       	ld.sh	r0,r0[0x0]
80008396:	83 70       	st.w	r1[0x1c],r0

80008398 <uhc_enumeration_step8>:
/**
 * \brief Device enumeration step 8
 * Lets USB line in IDLE state during 100ms.
 */
static void uhc_enumeration_step8(void)
{
80008398:	d4 01       	pushm	lr
	// Wait 100ms
	uhc_enable_timeout_callback(100, uhc_enumeration_step9);
8000839a:	48 3b       	lddpc	r11,800083a4 <uhc_enumeration_step8+0xc>
8000839c:	36 4c       	mov	r12,100
8000839e:	f0 1f 00 03 	mcall	800083a8 <uhc_enumeration_step8+0x10>
}
800083a2:	d8 02       	popm	pc
800083a4:	80 00       	ld.sh	r0,r0[0x0]
800083a6:	87 48       	st.w	r3[0x10],r8
800083a8:	80 00       	ld.sh	r0,r0[0x0]
800083aa:	83 70       	st.w	r1[0x1c],r0

800083ac <uhc_notify_sof>:
	// Device connection on root
	uhc_connection_tree(b_plug, &g_uhc_device_root);
}

void uhc_notify_sof(bool b_micro)
{
800083ac:	eb cd 40 80 	pushm	r7,lr
800083b0:	18 97       	mov	r7,r12
	// Call all UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		if (uhc_uhis[i].sof_notify != NULL) {
800083b2:	48 f8       	lddpc	r8,800083ec <uhc_notify_sof+0x40>
800083b4:	70 38       	ld.w	r8,r8[0xc]
800083b6:	58 08       	cp.w	r8,0
800083b8:	c0 20       	breq	800083bc <uhc_notify_sof+0x10>
			uhc_uhis[i].sof_notify(b_micro);
800083ba:	5d 18       	icall	r8

void uhc_notify_sof(bool b_micro)
{
	// Call all UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		if (uhc_uhis[i].sof_notify != NULL) {
800083bc:	48 c8       	lddpc	r8,800083ec <uhc_notify_sof+0x40>
800083be:	70 78       	ld.w	r8,r8[0x1c]
800083c0:	58 08       	cp.w	r8,0
800083c2:	c0 30       	breq	800083c8 <uhc_notify_sof+0x1c>
			uhc_uhis[i].sof_notify(b_micro);
800083c4:	0e 9c       	mov	r12,r7
800083c6:	5d 18       	icall	r8
		}
	}

	if (!b_micro) {
800083c8:	58 07       	cp.w	r7,0
800083ca:	c0 e1       	brne	800083e6 <uhc_notify_sof+0x3a>
		// Manage SOF timeout
		if (uhc_sof_timeout) {
800083cc:	48 98       	lddpc	r8,800083f0 <uhc_notify_sof+0x44>
800083ce:	11 88       	ld.ub	r8,r8[0x0]
800083d0:	58 08       	cp.w	r8,0
800083d2:	c0 a0       	breq	800083e6 <uhc_notify_sof+0x3a>
			if (--uhc_sof_timeout == 0) {
800083d4:	20 18       	sub	r8,1
800083d6:	5c 58       	castu.b	r8
800083d8:	48 69       	lddpc	r9,800083f0 <uhc_notify_sof+0x44>
800083da:	b2 88       	st.b	r9[0x0],r8
800083dc:	58 08       	cp.w	r8,0
800083de:	c0 41       	brne	800083e6 <uhc_notify_sof+0x3a>
				uhc_sof_timeout_callback();
800083e0:	48 58       	lddpc	r8,800083f4 <uhc_notify_sof+0x48>
800083e2:	70 08       	ld.w	r8,r8[0x0]
800083e4:	5d 18       	icall	r8
800083e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800083ea:	00 00       	add	r0,r0
800083ec:	80 00       	ld.sh	r0,r0[0x0]
800083ee:	ef d0 00 00 	ldins.h	r0:b,r7[0]
800083f2:	0c d0       	st.w	--r6,r0
800083f4:	00 00       	add	r0,r0
800083f6:	0b a8       	ld.ub	r8,r5[0x2]

800083f8 <uhc_remotewakeup>:
 * of all devices connected
 *
 * \param b_enable   true to enable remote wakeup feature, else disable.
 */
static void uhc_remotewakeup(bool b_enable)
{
800083f8:	d4 01       	pushm	lr
800083fa:	20 2d       	sub	sp,8
	usb_setup_req_t req;
	uhc_device_t *dev;

	dev = &g_uhc_device_root;
	while(1) {
		if (dev->conf_desc->bmAttributes & USB_CONFIG_ATTR_REMOTE_WAKEUP) {
800083fc:	49 28       	lddpc	r8,80008444 <uhc_remotewakeup+0x4c>
800083fe:	70 68       	ld.w	r8,r8[0x18]
80008400:	11 f8       	ld.ub	r8,r8[0x7]
80008402:	e2 18 00 20 	andl	r8,0x20,COH
80008406:	c1 d0       	breq	80008440 <uhc_remotewakeup+0x48>
			if (b_enable) {
				req.bRequest = USB_REQ_SET_FEATURE;
80008408:	58 0c       	cp.w	r12,0
8000840a:	f9 b8 01 03 	movne	r8,3
8000840e:	fb f8 1e 01 	st.bne	sp[0x1],r8
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
80008412:	f9 b8 00 01 	moveq	r8,1
80008416:	fb f8 0e 01 	st.beq	sp[0x1],r8
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
8000841a:	30 08       	mov	r8,0
8000841c:	ba 88       	st.b	sp[0x0],r8
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
8000841e:	30 18       	mov	r8,1
80008420:	ba 18       	st.h	sp[0x2],r8
			req.wIndex = 0;
80008422:	30 08       	mov	r8,0
80008424:	ba 28       	st.h	sp[0x4],r8
			req.wLength = 0;
80008426:	ba 38       	st.h	sp[0x6],r8
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80008428:	30 0a       	mov	r10,0
8000842a:	1a da       	st.w	--sp,r10
8000842c:	14 98       	mov	r8,r10
8000842e:	14 99       	mov	r9,r10
80008430:	fa cb ff fc 	sub	r11,sp,-4
80008434:	48 4c       	lddpc	r12,80008444 <uhc_remotewakeup+0x4c>
80008436:	f9 3c 00 12 	ld.ub	r12,r12[18]
8000843a:	f0 1f 00 04 	mcall	80008448 <uhc_remotewakeup+0x50>
8000843e:	2f fd       	sub	sp,-4
		dev = dev->next;
#else
		break;
#endif
	}
}
80008440:	2f ed       	sub	sp,-8
80008442:	d8 02       	popm	pc
80008444:	00 00       	add	r0,r0
80008446:	0b 88       	ld.ub	r8,r5[0x0]
80008448:	80 00       	ld.sh	r0,r0[0x0]
8000844a:	65 2c       	ld.w	r12,r2[0x48]

8000844c <uhc_is_suspend>:
	// Suspend all USB devices
	uhd_suspend();
}

bool uhc_is_suspend(void)
{
8000844c:	d4 01       	pushm	lr
	if (g_uhc_device_root.address == UHC_USB_ADD_NOT_VALID) {
8000844e:	48 68       	lddpc	r8,80008464 <uhc_is_suspend+0x18>
80008450:	f1 39 00 12 	ld.ub	r9,r8[18]
80008454:	3f f8       	mov	r8,-1
80008456:	f0 09 18 00 	cp.b	r9,r8
8000845a:	c0 21       	brne	8000845e <uhc_is_suspend+0x12>
8000845c:	da 0a       	popm	pc,r12=1
		return true;
	}
	return uhd_is_suspend();
8000845e:	f0 1f 00 03 	mcall	80008468 <uhc_is_suspend+0x1c>
}
80008462:	d8 02       	popm	pc
80008464:	00 00       	add	r0,r0
80008466:	0b 88       	ld.ub	r8,r5[0x0]
80008468:	80 00       	ld.sh	r0,r0[0x0]
8000846a:	5d 68       	*unknown*

8000846c <uhc_resume>:

void uhc_resume(void)
{
8000846c:	d4 01       	pushm	lr
	if (!uhc_is_suspend()) {
8000846e:	f0 1f 00 04 	mcall	8000847c <uhc_resume+0x10>
80008472:	c0 30       	breq	80008478 <uhc_resume+0xc>
		return;
	}
	// Resume all USB devices
	uhd_resume();
80008474:	f0 1f 00 03 	mcall	80008480 <uhc_resume+0x14>
80008478:	d8 02       	popm	pc
8000847a:	00 00       	add	r0,r0
8000847c:	80 00       	ld.sh	r0,r0[0x0]
8000847e:	84 4c       	ld.sh	r12,r2[0x8]
80008480:	80 00       	ld.sh	r0,r0[0x0]
80008482:	63 7c       	ld.w	r12,r1[0x5c]

80008484 <uhc_suspend>:
	// Stop UHD
	uhd_disable(b_id_stop);
}

void uhc_suspend(bool b_remotewakeup)
{
80008484:	d4 01       	pushm	lr
	if (uhc_enum_try) {
80008486:	48 88       	lddpc	r8,800084a4 <uhc_suspend+0x20>
80008488:	11 89       	ld.ub	r9,r8[0x0]
8000848a:	30 08       	mov	r8,0
8000848c:	f0 09 18 00 	cp.b	r9,r8
80008490:	c0 81       	brne	800084a0 <uhc_suspend+0x1c>
		// enumeration on-going, the USB suspend can't be done
		return;
	}

	if (b_remotewakeup) {
80008492:	58 0c       	cp.w	r12,0
80008494:	c0 40       	breq	8000849c <uhc_suspend+0x18>
		uhc_remotewakeup(true);
80008496:	30 1c       	mov	r12,1
80008498:	f0 1f 00 04 	mcall	800084a8 <uhc_suspend+0x24>
	}
	// Suspend all USB devices
	uhd_suspend();
8000849c:	f0 1f 00 04 	mcall	800084ac <uhc_suspend+0x28>
800084a0:	d8 02       	popm	pc
800084a2:	00 00       	add	r0,r0
800084a4:	00 00       	add	r0,r0
800084a6:	0b a4       	ld.ub	r4,r5[0x2]
800084a8:	80 00       	ld.sh	r0,r0[0x0]
800084aa:	83 f8       	st.w	r1[0x3c],r8
800084ac:	80 00       	ld.sh	r0,r0[0x0]
800084ae:	5d 10       	icall	r0

800084b0 <uhc_enumeration_suspend>:
/**
 * \brief Enters a specific device in USB suspend mode
 * Suspend the USB line or a port on USB hub.
 */
static void uhc_enumeration_suspend(void)
{
800084b0:	d4 01       	pushm	lr
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
800084b2:	f0 1f 00 02 	mcall	800084b8 <uhc_enumeration_suspend+0x8>
	}
}
800084b6:	d8 02       	popm	pc
800084b8:	80 00       	ld.sh	r0,r0[0x0]
800084ba:	5d 10       	icall	r0

800084bc <uhc_stop>:
	uhc_sof_timeout = 0; // No callback registered on a SOF timeout
	uhd_enable();
}

void uhc_stop(bool b_id_stop)
{
800084bc:	d4 01       	pushm	lr
	// Stop UHD
	uhd_disable(b_id_stop);
800084be:	f0 1f 00 02 	mcall	800084c4 <uhc_stop+0x8>
}
800084c2:	d8 02       	popm	pc
800084c4:	80 00       	ld.sh	r0,r0[0x0]
800084c6:	68 dc       	ld.w	r12,r4[0x34]

800084c8 <uhc_start>:
 * \name Functions to control the USB host stack
 *
 * @{
 */
void uhc_start(void)
{
800084c8:	d4 01       	pushm	lr
	g_uhc_device_root.address = UHC_USB_ADD_NOT_VALID;
800084ca:	3f f9       	mov	r9,-1
800084cc:	48 58       	lddpc	r8,800084e0 <uhc_start+0x18>
800084ce:	f1 69 00 12 	st.b	r8[18],r9
	uhc_sof_timeout = 0; // No callback registered on a SOF timeout
800084d2:	30 09       	mov	r9,0
800084d4:	48 48       	lddpc	r8,800084e4 <uhc_start+0x1c>
800084d6:	b0 89       	st.b	r8[0x0],r9
	uhd_enable();
800084d8:	f0 1f 00 04 	mcall	800084e8 <uhc_start+0x20>
}
800084dc:	d8 02       	popm	pc
800084de:	00 00       	add	r0,r0
800084e0:	00 00       	add	r0,r0
800084e2:	0b 88       	ld.ub	r8,r5[0x0]
800084e4:	00 00       	add	r0,r0
800084e6:	0c d0       	st.w	--r6,r0
800084e8:	80 00       	ld.sh	r0,r0[0x0]
800084ea:	6a 10       	ld.w	r0,r5[0x4]

800084ec <uhc_notify_resume>:
		}
	}
}

void uhc_notify_resume(void)
{
800084ec:	d4 01       	pushm	lr
	uhc_remotewakeup(false);
800084ee:	30 0c       	mov	r12,0
800084f0:	f0 1f 00 03 	mcall	800084fc <uhc_notify_resume+0x10>
	UHC_WAKEUP_EVENT();
800084f4:	f0 1f 00 03 	mcall	80008500 <uhc_notify_resume+0x14>
}
800084f8:	d8 02       	popm	pc
800084fa:	00 00       	add	r0,r0
800084fc:	80 00       	ld.sh	r0,r0[0x0]
800084fe:	83 f8       	st.w	r1[0x3c],r8
80008500:	80 00       	ld.sh	r0,r0[0x0]
80008502:	44 70       	lddsp	r0,sp[0x11c]

80008504 <uhc_enumeration_reset>:
 * \brief Sends the USB Reset signal on the USB line of a device
 *
 * \param callback Callback to call at the end of Reset signal
 */
static void uhc_enumeration_reset(uhd_callback_reset_t callback)
{
80008504:	d4 01       	pushm	lr
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80008506:	f0 1f 00 02 	mcall	8000850c <uhc_enumeration_reset+0x8>
	}
}
8000850a:	d8 02       	popm	pc
8000850c:	80 00       	ld.sh	r0,r0[0x0]
8000850e:	5c fc       	rol	r12

80008510 <uhc_enumeration_step1>:
/**
 * \brief Device enumeration step 1
 * Reset USB line.
 */
static void uhc_enumeration_step1(void)
{
80008510:	d4 01       	pushm	lr
	uhc_enumeration_reset(uhc_enumeration_step2);
80008512:	48 3c       	lddpc	r12,8000851c <uhc_enumeration_step1+0xc>
80008514:	f0 1f 00 03 	mcall	80008520 <uhc_enumeration_step1+0x10>
}
80008518:	d8 02       	popm	pc
8000851a:	00 00       	add	r0,r0
8000851c:	80 00       	ld.sh	r0,r0[0x0]
8000851e:	83 84       	st.w	r1[0x20],r4
80008520:	80 00       	ld.sh	r0,r0[0x0]
80008522:	85 04       	st.w	r2[0x0],r4

80008524 <uhc_notify_connection>:
/**
 * \name Callbacks used by USB Host Driver (UHD) to notify events
 * @{
 */
void uhc_notify_connection(bool b_plug)
{
80008524:	eb cd 40 c0 	pushm	r6-r7,lr
	if (b_plug) {
80008528:	58 0c       	cp.w	r12,0
8000852a:	c0 a1       	brne	8000853e <uhc_notify_connection+0x1a>

#ifdef USB_HOST_HUB_SUPPORT
		uhc_power_running = 0;
#endif
	} else {
		if (g_uhc_device_root.address == UHC_USB_ADD_NOT_VALID) {
8000852c:	49 b8       	lddpc	r8,80008598 <uhc_notify_connection+0x74>
8000852e:	f1 3c 00 12 	ld.ub	r12,r8[18]
80008532:	3f f8       	mov	r8,-1
80008534:	f0 0c 18 00 	cp.b	r12,r8
80008538:	c1 21       	brne	8000855c <uhc_notify_connection+0x38>
8000853a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
	if (b_plug) {
		uhc_enum_try = 1;
8000853e:	30 19       	mov	r9,1
80008540:	49 78       	lddpc	r8,8000859c <uhc_notify_connection+0x78>
80008542:	b0 89       	st.b	r8[0x0],r9
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
80008544:	49 5c       	lddpc	r12,80008598 <uhc_notify_connection+0x74>
80008546:	30 08       	mov	r8,0
80008548:	99 68       	st.w	r12[0x18],r8
		uhc_dev_enum->address = 0;
8000854a:	f9 68 00 12 	st.b	r12[18],r8
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
8000854e:	30 1b       	mov	r11,1
80008550:	f0 1f 00 14 	mcall	800085a0 <uhc_notify_connection+0x7c>
		uhc_enumeration_step1();
80008554:	f0 1f 00 14 	mcall	800085a4 <uhc_notify_connection+0x80>
80008558:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	} else {
		if (uhc_dev_enum == dev) {
			// Eventually stop enumeration timeout on-going on this device
			uhc_sof_timeout = 0;
8000855c:	30 09       	mov	r9,0
8000855e:	49 38       	lddpc	r8,800085a8 <uhc_notify_connection+0x84>
80008560:	b0 89       	st.b	r8[0x0],r9
		}
		// Abort all transfers (endpoint control and other) and free pipe(s)
		uhd_ep_free(dev->address, 0xFF);
80008562:	e0 6b 00 ff 	mov	r11,255
80008566:	f0 1f 00 12 	mcall	800085ac <uhc_notify_connection+0x88>

		// Disable all USB interfaces (this includes HUB interface)
		for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(dev);
8000856a:	49 26       	lddpc	r6,800085b0 <uhc_notify_connection+0x8c>
8000856c:	48 b7       	lddpc	r7,80008598 <uhc_notify_connection+0x74>
8000856e:	6c 28       	ld.w	r8,r6[0x8]
80008570:	0e 9c       	mov	r12,r7
80008572:	5d 18       	icall	r8
80008574:	6c 68       	ld.w	r8,r6[0x18]
80008576:	0e 9c       	mov	r12,r7
80008578:	5d 18       	icall	r8
		}

		UHC_CONNECTION_EVENT(dev, false);
8000857a:	30 0b       	mov	r11,0
8000857c:	0e 9c       	mov	r12,r7
8000857e:	f0 1f 00 09 	mcall	800085a0 <uhc_notify_connection+0x7c>
		dev->address = UHC_USB_ADD_NOT_VALID;
80008582:	3f f8       	mov	r8,-1
80008584:	ef 68 00 12 	st.b	r7[18],r8
		// Free USB configuration descriptor buffer
		if (dev->conf_desc != NULL) {
80008588:	6e 6c       	ld.w	r12,r7[0x18]
8000858a:	58 0c       	cp.w	r12,0
8000858c:	c0 30       	breq	80008592 <uhc_notify_connection+0x6e>
			free(dev->conf_desc);
8000858e:	f0 1f 00 0a 	mcall	800085b4 <uhc_notify_connection+0x90>
80008592:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008596:	00 00       	add	r0,r0
80008598:	00 00       	add	r0,r0
8000859a:	0b 88       	ld.ub	r8,r5[0x0]
8000859c:	00 00       	add	r0,r0
8000859e:	0b a4       	ld.ub	r4,r5[0x2]
800085a0:	80 00       	ld.sh	r0,r0[0x0]
800085a2:	42 54       	lddsp	r4,sp[0x94]
800085a4:	80 00       	ld.sh	r0,r0[0x0]
800085a6:	85 10       	st.w	r2[0x4],r0
800085a8:	00 00       	add	r0,r0
800085aa:	0c d0       	st.w	--r6,r0
800085ac:	80 00       	ld.sh	r0,r0[0x0]
800085ae:	65 b0       	ld.w	r0,r2[0x6c]
800085b0:	80 00       	ld.sh	r0,r0[0x0]
800085b2:	ef d0 80 00 	ldswp.w	r0,r7[0]
800085b6:	91 9c       	st.w	r8[0x24],r12

800085b8 <uhc_enumeration_step3>:
/**
 * \brief Device enumeration step 3
 * Reset USB line.
 */
static void uhc_enumeration_step3(void)
{
800085b8:	d4 01       	pushm	lr
	uhc_enumeration_reset(uhc_enumeration_step4);
800085ba:	48 3c       	lddpc	r12,800085c4 <uhc_enumeration_step3+0xc>
800085bc:	f0 1f 00 03 	mcall	800085c8 <uhc_enumeration_step3+0x10>
}
800085c0:	d8 02       	popm	pc
800085c2:	00 00       	add	r0,r0
800085c4:	80 00       	ld.sh	r0,r0[0x0]
800085c6:	85 e0       	st.w	r2[0x38],r0
800085c8:	80 00       	ld.sh	r0,r0[0x0]
800085ca:	85 04       	st.w	r2[0x0],r4

800085cc <uhc_enumeration_step7>:
/**
 * \brief Device enumeration step 7
 * Reset USB line.
 */
static void uhc_enumeration_step7(void)
{
800085cc:	d4 01       	pushm	lr
	uhc_enumeration_reset(uhc_enumeration_step8);
800085ce:	48 3c       	lddpc	r12,800085d8 <uhc_enumeration_step7+0xc>
800085d0:	f0 1f 00 03 	mcall	800085dc <uhc_enumeration_step7+0x10>
}
800085d4:	d8 02       	popm	pc
800085d6:	00 00       	add	r0,r0
800085d8:	80 00       	ld.sh	r0,r0[0x0]
800085da:	83 98       	st.w	r1[0x24],r8
800085dc:	80 00       	ld.sh	r0,r0[0x0]
800085de:	85 04       	st.w	r2[0x0],r4

800085e0 <uhc_enumeration_step4>:
/**
 * \brief Device enumeration step 4
 * Lets USB line in IDLE state during 100ms.
 */
static void uhc_enumeration_step4(void)
{
800085e0:	d4 01       	pushm	lr
	uhc_dev_enum->speed = uhd_get_speed();
800085e2:	f0 1f 00 05 	mcall	800085f4 <uhc_enumeration_step4+0x14>
800085e6:	48 58       	lddpc	r8,800085f8 <uhc_enumeration_step4+0x18>
800085e8:	91 5c       	st.w	r8[0x14],r12
	uhc_enable_timeout_callback(100, uhc_enumeration_step5);
800085ea:	48 5b       	lddpc	r11,800085fc <uhc_enumeration_step4+0x1c>
800085ec:	36 4c       	mov	r12,100
800085ee:	f0 1f 00 05 	mcall	80008600 <uhc_enumeration_step4+0x20>
}
800085f2:	d8 02       	popm	pc
800085f4:	80 00       	ld.sh	r0,r0[0x0]
800085f6:	5c dc       	com	r12
800085f8:	00 00       	add	r0,r0
800085fa:	0b 88       	ld.ub	r8,r5[0x0]
800085fc:	80 00       	ld.sh	r0,r0[0x0]
800085fe:	86 8c       	ld.uh	r12,r3[0x0]
80008600:	80 00       	ld.sh	r0,r0[0x0]
80008602:	83 70       	st.w	r1[0x1c],r0

80008604 <uhc_enumeration_error>:
 * \brief Manage error during device enumeration
 *
 * \param status        Enumeration error occurred
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
80008604:	eb cd 40 c0 	pushm	r6-r7,lr
80008608:	18 97       	mov	r7,r12
	if (status == UHC_ENUM_DISCONNECT) {
8000860a:	58 7c       	cp.w	r12,7
8000860c:	c0 61       	brne	80008618 <uhc_enumeration_error+0x14>
		uhc_enum_try = 0;
8000860e:	30 09       	mov	r9,0
80008610:	49 88       	lddpc	r8,80008670 <uhc_enumeration_error+0x6c>
80008612:	b0 89       	st.b	r8[0x0],r9
		return; // Abort enumeration process
80008614:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80008618:	49 76       	lddpc	r6,80008674 <uhc_enumeration_error+0x70>
8000861a:	e0 6b 00 ff 	mov	r11,255
8000861e:	ed 3c 00 12 	ld.ub	r12,r6[18]
80008622:	f0 1f 00 16 	mcall	80008678 <uhc_enumeration_error+0x74>

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80008626:	6c 6c       	ld.w	r12,r6[0x18]
80008628:	58 0c       	cp.w	r12,0
8000862a:	c0 50       	breq	80008634 <uhc_enumeration_error+0x30>
		free(uhc_dev_enum->conf_desc);
8000862c:	f0 1f 00 14 	mcall	8000867c <uhc_enumeration_error+0x78>
		uhc_dev_enum->conf_desc = NULL;
80008630:	30 09       	mov	r9,0
80008632:	8d 69       	st.w	r6[0x18],r9
	}
	uhc_dev_enum->address = 0;
80008634:	30 09       	mov	r9,0
80008636:	49 08       	lddpc	r8,80008674 <uhc_enumeration_error+0x70>
80008638:	f1 69 00 12 	st.b	r8[18],r9
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
8000863c:	48 d9       	lddpc	r9,80008670 <uhc_enumeration_error+0x6c>
8000863e:	13 88       	ld.ub	r8,r9[0x0]
80008640:	f0 ca ff ff 	sub	r10,r8,-1
80008644:	b2 8a       	st.b	r9[0x0],r10
80008646:	30 39       	mov	r9,3
80008648:	f2 08 18 00 	cp.b	r8,r9
8000864c:	e0 8b 00 06 	brhi	80008658 <uhc_enumeration_error+0x54>
		// Restart enumeration at beginning
		uhc_enumeration_step1();
80008650:	f0 1f 00 0c 	mcall	80008680 <uhc_enumeration_error+0x7c>
		return;
80008654:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
80008658:	f0 1f 00 0b 	mcall	80008684 <uhc_enumeration_error+0x80>
	UHC_ENUM_EVENT(uhc_dev_enum, status);
8000865c:	0e 9b       	mov	r11,r7
8000865e:	48 6c       	lddpc	r12,80008674 <uhc_enumeration_error+0x70>
80008660:	f0 1f 00 0a 	mcall	80008688 <uhc_enumeration_error+0x84>
	uhc_enum_try = 0;
80008664:	30 09       	mov	r9,0
80008666:	48 38       	lddpc	r8,80008670 <uhc_enumeration_error+0x6c>
80008668:	b0 89       	st.b	r8[0x0],r9
8000866a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000866e:	00 00       	add	r0,r0
80008670:	00 00       	add	r0,r0
80008672:	0b a4       	ld.ub	r4,r5[0x2]
80008674:	00 00       	add	r0,r0
80008676:	0b 88       	ld.ub	r8,r5[0x0]
80008678:	80 00       	ld.sh	r0,r0[0x0]
8000867a:	65 b0       	ld.w	r0,r2[0x6c]
8000867c:	80 00       	ld.sh	r0,r0[0x0]
8000867e:	91 9c       	st.w	r8[0x24],r12
80008680:	80 00       	ld.sh	r0,r0[0x0]
80008682:	85 10       	st.w	r2[0x4],r0
80008684:	80 00       	ld.sh	r0,r0[0x0]
80008686:	84 b0       	ld.uh	r0,r2[0x6]
80008688:	80 00       	ld.sh	r0,r0[0x0]
8000868a:	41 98       	lddsp	r8,sp[0x64]

8000868c <uhc_enumeration_step5>:
 * Requests the USB device descriptor.
 * This setup request can be aborted
 * because the control endpoint size is unknown.
 */
static void uhc_enumeration_step5(void)
{
8000868c:	d4 01       	pushm	lr
8000868e:	20 2d       	sub	sp,8
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
80008690:	38 08       	mov	r8,-128
80008692:	ba 88       	st.b	sp[0x0],r8
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
80008694:	30 68       	mov	r8,6
80008696:	ba 98       	st.b	sp[0x1],r8
	req.wValue = (USB_DT_DEVICE << 8);
80008698:	e0 68 01 00 	mov	r8,256
8000869c:	ba 18       	st.h	sp[0x2],r8
	req.wIndex = 0;
8000869e:	30 08       	mov	r8,0
800086a0:	ba 28       	st.h	sp[0x4],r8
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
800086a2:	30 88       	mov	r8,8
800086a4:	ba 38       	st.h	sp[0x6],r8
			+ sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
800086a6:	30 0b       	mov	r11,0
800086a8:	16 9c       	mov	r12,r11
800086aa:	f0 1f 00 0f 	mcall	800086e4 <uhc_enumeration_step5+0x58>
	if (!uhd_ep0_alloc(0, 64)) {
800086ae:	34 0b       	mov	r11,64
800086b0:	30 0c       	mov	r12,0
800086b2:	f0 1f 00 0e 	mcall	800086e8 <uhc_enumeration_step5+0x5c>
800086b6:	c0 51       	brne	800086c0 <uhc_enumeration_step5+0x34>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
800086b8:	30 4c       	mov	r12,4
800086ba:	f0 1f 00 0d 	mcall	800086ec <uhc_enumeration_step5+0x60>
		return;
800086be:	c1 18       	rjmp	800086e0 <uhc_enumeration_step5+0x54>
	}
	if (!uhd_setup_request(0,
800086c0:	48 c8       	lddpc	r8,800086f0 <uhc_enumeration_step5+0x64>
800086c2:	1a d8       	st.w	--sp,r8
800086c4:	30 08       	mov	r8,0
800086c6:	31 29       	mov	r9,18
800086c8:	48 ba       	lddpc	r10,800086f4 <uhc_enumeration_step5+0x68>
800086ca:	fa cb ff fc 	sub	r11,sp,-4
800086ce:	10 9c       	mov	r12,r8
800086d0:	f0 1f 00 0a 	mcall	800086f8 <uhc_enumeration_step5+0x6c>
800086d4:	2f fd       	sub	sp,-4
800086d6:	58 0c       	cp.w	r12,0
800086d8:	c0 41       	brne	800086e0 <uhc_enumeration_step5+0x54>
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step6)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800086da:	30 6c       	mov	r12,6
800086dc:	f0 1f 00 04 	mcall	800086ec <uhc_enumeration_step5+0x60>
		return;
	}
}
800086e0:	2f ed       	sub	sp,-8
800086e2:	d8 02       	popm	pc
800086e4:	80 00       	ld.sh	r0,r0[0x0]
800086e6:	65 b0       	ld.w	r0,r2[0x6c]
800086e8:	80 00       	ld.sh	r0,r0[0x0]
800086ea:	67 f2       	ld.w	r2,r3[0x7c]
800086ec:	80 00       	ld.sh	r0,r0[0x0]
800086ee:	86 04       	ld.sh	r4,r3[0x0]
800086f0:	80 00       	ld.sh	r0,r0[0x0]
800086f2:	86 fc       	ld.uh	r12,r3[0xe]
800086f4:	00 00       	add	r0,r0
800086f6:	0b 88       	ld.ub	r8,r5[0x0]
800086f8:	80 00       	ld.sh	r0,r0[0x0]
800086fa:	65 2c       	ld.w	r12,r2[0x48]

800086fc <uhc_enumeration_step6>:
 */
static void uhc_enumeration_step6(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
800086fc:	d4 01       	pushm	lr
	UNUSED(add);
	if ((status != UHD_TRANS_NOERROR) || (payload_trans < 8)
800086fe:	58 0b       	cp.w	r11,0
80008700:	5f 19       	srne	r9
80008702:	30 78       	mov	r8,7
80008704:	f0 0a 19 00 	cp.h	r10,r8
80008708:	5f 88       	srls	r8
8000870a:	f3 e8 10 08 	or	r8,r9,r8
8000870e:	c0 71       	brne	8000871c <uhc_enumeration_step6+0x20>
80008710:	48 a8       	lddpc	r8,80008738 <uhc_enumeration_step6+0x3c>
80008712:	11 99       	ld.ub	r9,r8[0x1]
80008714:	30 18       	mov	r8,1
80008716:	f0 09 18 00 	cp.b	r9,r8
8000871a:	c0 90       	breq	8000872c <uhc_enumeration_step6+0x30>
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
8000871c:	58 1b       	cp.w	r11,1
8000871e:	f9 bc 00 07 	moveq	r12,7
80008722:	f9 bc 01 03 	movne	r12,3
80008726:	f0 1f 00 06 	mcall	8000873c <uhc_enumeration_step6+0x40>
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
8000872a:	d8 02       	popm	pc
	}
	// Wait 20ms
	uhc_enable_timeout_callback(20, uhc_enumeration_step7);
8000872c:	48 5b       	lddpc	r11,80008740 <uhc_enumeration_step6+0x44>
8000872e:	31 4c       	mov	r12,20
80008730:	f0 1f 00 05 	mcall	80008744 <uhc_enumeration_step6+0x48>
80008734:	d8 02       	popm	pc
80008736:	00 00       	add	r0,r0
80008738:	00 00       	add	r0,r0
8000873a:	0b 88       	ld.ub	r8,r5[0x0]
8000873c:	80 00       	ld.sh	r0,r0[0x0]
8000873e:	86 04       	ld.sh	r4,r3[0x0]
80008740:	80 00       	ld.sh	r0,r0[0x0]
80008742:	85 cc       	st.w	r2[0x30],r12
80008744:	80 00       	ld.sh	r0,r0[0x0]
80008746:	83 70       	st.w	r1[0x1c],r0

80008748 <uhc_enumeration_step9>:
/**
 * \brief Device enumeration step 9
 * Send a Set address setup request.
 */
static void uhc_enumeration_step9(void)
{
80008748:	eb cd 40 80 	pushm	r7,lr
8000874c:	20 2d       	sub	sp,8
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE
8000874e:	30 08       	mov	r8,0
80008750:	ba 88       	st.b	sp[0x0],r8
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_ADDRESS;
80008752:	30 58       	mov	r8,5
80008754:	ba 98       	st.b	sp[0x1],r8
		break;
	}
	req.wValue = usb_addr_free;
	uhc_dev_enum->address = usb_addr_free;
#else
	req.wValue = UHC_DEVICE_ENUM_ADD;
80008756:	30 18       	mov	r8,1
80008758:	ba 18       	st.h	sp[0x2],r8
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
8000875a:	49 47       	lddpc	r7,800087a8 <uhc_enumeration_step9+0x60>
8000875c:	ef 68 00 12 	st.b	r7[18],r8
#endif
	req.wIndex = 0;
80008760:	30 08       	mov	r8,0
80008762:	ba 28       	st.h	sp[0x4],r8
	req.wLength = 0;
80008764:	ba 38       	st.h	sp[0x6],r8

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
80008766:	30 0b       	mov	r11,0
80008768:	16 9c       	mov	r12,r11
8000876a:	f0 1f 00 11 	mcall	800087ac <uhc_enumeration_step9+0x64>
	if (!uhd_ep0_alloc(0, uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
8000876e:	0f fb       	ld.ub	r11,r7[0x7]
80008770:	30 0c       	mov	r12,0
80008772:	f0 1f 00 10 	mcall	800087b0 <uhc_enumeration_step9+0x68>
80008776:	c0 51       	brne	80008780 <uhc_enumeration_step9+0x38>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
80008778:	30 4c       	mov	r12,4
8000877a:	f0 1f 00 0f 	mcall	800087b4 <uhc_enumeration_step9+0x6c>
		return;
8000877e:	c1 18       	rjmp	800087a0 <uhc_enumeration_step9+0x58>
	}

	if (!uhd_setup_request(0,
80008780:	48 e8       	lddpc	r8,800087b8 <uhc_enumeration_step9+0x70>
80008782:	1a d8       	st.w	--sp,r8
80008784:	30 08       	mov	r8,0
80008786:	31 29       	mov	r9,18
80008788:	48 8a       	lddpc	r10,800087a8 <uhc_enumeration_step9+0x60>
8000878a:	fa cb ff fc 	sub	r11,sp,-4
8000878e:	10 9c       	mov	r12,r8
80008790:	f0 1f 00 0b 	mcall	800087bc <uhc_enumeration_step9+0x74>
80008794:	2f fd       	sub	sp,-4
80008796:	58 0c       	cp.w	r12,0
80008798:	c0 41       	brne	800087a0 <uhc_enumeration_step9+0x58>
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step10)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
8000879a:	30 6c       	mov	r12,6
8000879c:	f0 1f 00 06 	mcall	800087b4 <uhc_enumeration_step9+0x6c>
		return;
	}
}
800087a0:	2f ed       	sub	sp,-8
800087a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800087a6:	00 00       	add	r0,r0
800087a8:	00 00       	add	r0,r0
800087aa:	0b 88       	ld.ub	r8,r5[0x0]
800087ac:	80 00       	ld.sh	r0,r0[0x0]
800087ae:	65 b0       	ld.w	r0,r2[0x6c]
800087b0:	80 00       	ld.sh	r0,r0[0x0]
800087b2:	67 f2       	ld.w	r2,r3[0x7c]
800087b4:	80 00       	ld.sh	r0,r0[0x0]
800087b6:	86 04       	ld.sh	r4,r3[0x0]
800087b8:	80 00       	ld.sh	r0,r0[0x0]
800087ba:	87 c0       	st.w	r3[0x30],r0
800087bc:	80 00       	ld.sh	r0,r0[0x0]
800087be:	65 2c       	ld.w	r12,r2[0x48]

800087c0 <uhc_enumeration_step10>:
 */
static void uhc_enumeration_step10(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
800087c0:	d4 01       	pushm	lr
	UNUSED(add);
	UNUSED(payload_trans);
	if (status != UHD_TRANS_NOERROR) {
800087c2:	58 0b       	cp.w	r11,0
800087c4:	c0 90       	breq	800087d6 <uhc_enumeration_step10+0x16>
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT) ?
800087c6:	58 1b       	cp.w	r11,1
800087c8:	f9 bc 00 07 	moveq	r12,7
800087cc:	f9 bc 01 03 	movne	r12,3
800087d0:	f0 1f 00 04 	mcall	800087e0 <uhc_enumeration_step10+0x20>
				UHC_ENUM_DISCONNECT : UHC_ENUM_FAIL);
		return;
800087d4:	d8 02       	popm	pc
	}
	// Wait 20ms
	uhc_enable_timeout_callback(20, uhc_enumeration_step11);
800087d6:	48 4b       	lddpc	r11,800087e4 <uhc_enumeration_step10+0x24>
800087d8:	31 4c       	mov	r12,20
800087da:	f0 1f 00 04 	mcall	800087e8 <uhc_enumeration_step10+0x28>
800087de:	d8 02       	popm	pc
800087e0:	80 00       	ld.sh	r0,r0[0x0]
800087e2:	86 04       	ld.sh	r4,r3[0x0]
800087e4:	80 00       	ld.sh	r0,r0[0x0]
800087e6:	87 ec       	st.w	r3[0x38],r12
800087e8:	80 00       	ld.sh	r0,r0[0x0]
800087ea:	83 70       	st.w	r1[0x1c],r0

800087ec <uhc_enumeration_step11>:
 * \brief Device enumeration step 11
 * Updates USB host pipe with the new USB address.
 * Requests a complete USB device descriptor.
 */
static void uhc_enumeration_step11(void)
{
800087ec:	d4 01       	pushm	lr
800087ee:	20 2d       	sub	sp,8
	usb_setup_req_t req;

	// Free address 0 used to start enumeration
	uhd_ep_free(0, 0);
800087f0:	30 0b       	mov	r11,0
800087f2:	16 9c       	mov	r12,r11
800087f4:	f0 1f 00 15 	mcall	80008848 <uhc_enumeration_step11+0x5c>

	// Alloc control endpoint with the new USB address
	if (!uhd_ep0_alloc(UHC_DEVICE_ENUM_ADD,
800087f8:	49 58       	lddpc	r8,8000884c <uhc_enumeration_step11+0x60>
800087fa:	11 fb       	ld.ub	r11,r8[0x7]
800087fc:	30 1c       	mov	r12,1
800087fe:	f0 1f 00 15 	mcall	80008850 <uhc_enumeration_step11+0x64>
80008802:	c0 51       	brne	8000880c <uhc_enumeration_step11+0x20>
			uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
80008804:	30 4c       	mov	r12,4
80008806:	f0 1f 00 14 	mcall	80008854 <uhc_enumeration_step11+0x68>
		return;
8000880a:	c1 c8       	rjmp	80008842 <uhc_enumeration_step11+0x56>
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
8000880c:	38 08       	mov	r8,-128
8000880e:	ba 88       	st.b	sp[0x0],r8
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
80008810:	30 68       	mov	r8,6
80008812:	ba 98       	st.b	sp[0x1],r8
	req.wValue = (USB_DT_DEVICE << 8);
80008814:	e0 68 01 00 	mov	r8,256
80008818:	ba 18       	st.h	sp[0x2],r8
	req.wIndex = 0;
8000881a:	30 08       	mov	r8,0
8000881c:	ba 28       	st.h	sp[0x4],r8
	req.wLength = sizeof(usb_dev_desc_t);
8000881e:	31 28       	mov	r8,18
80008820:	ba 38       	st.h	sp[0x6],r8
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80008822:	48 e8       	lddpc	r8,80008858 <uhc_enumeration_step11+0x6c>
80008824:	1a d8       	st.w	--sp,r8
80008826:	30 08       	mov	r8,0
80008828:	31 29       	mov	r9,18
8000882a:	48 9a       	lddpc	r10,8000884c <uhc_enumeration_step11+0x60>
8000882c:	fa cb ff fc 	sub	r11,sp,-4
80008830:	30 1c       	mov	r12,1
80008832:	f0 1f 00 0b 	mcall	8000885c <uhc_enumeration_step11+0x70>
80008836:	2f fd       	sub	sp,-4
80008838:	58 0c       	cp.w	r12,0
8000883a:	c0 41       	brne	80008842 <uhc_enumeration_step11+0x56>
			&req,
			(uint8_t *) & uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL, uhc_enumeration_step12)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
8000883c:	30 6c       	mov	r12,6
8000883e:	f0 1f 00 06 	mcall	80008854 <uhc_enumeration_step11+0x68>
		return;
	}
}
80008842:	2f ed       	sub	sp,-8
80008844:	d8 02       	popm	pc
80008846:	00 00       	add	r0,r0
80008848:	80 00       	ld.sh	r0,r0[0x0]
8000884a:	65 b0       	ld.w	r0,r2[0x6c]
8000884c:	00 00       	add	r0,r0
8000884e:	0b 88       	ld.ub	r8,r5[0x0]
80008850:	80 00       	ld.sh	r0,r0[0x0]
80008852:	67 f2       	ld.w	r2,r3[0x7c]
80008854:	80 00       	ld.sh	r0,r0[0x0]
80008856:	86 04       	ld.sh	r4,r3[0x0]
80008858:	80 00       	ld.sh	r0,r0[0x0]
8000885a:	88 60       	ld.sh	r0,r4[0xc]
8000885c:	80 00       	ld.sh	r0,r0[0x0]
8000885e:	65 2c       	ld.w	r12,r2[0x48]

80008860 <uhc_enumeration_step12>:
 */
static void uhc_enumeration_step12(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
80008860:	d4 01       	pushm	lr
80008862:	20 2d       	sub	sp,8
	usb_setup_req_t req;
	uint8_t conf_num;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
80008864:	58 0b       	cp.w	r11,0
80008866:	5f 19       	srne	r9
80008868:	31 28       	mov	r8,18
8000886a:	f0 0a 19 00 	cp.h	r10,r8
8000886e:	5f 18       	srne	r8
80008870:	f3 e8 10 08 	or	r8,r9,r8
80008874:	c0 71       	brne	80008882 <uhc_enumeration_step12+0x22>
80008876:	49 c8       	lddpc	r8,800088e4 <uhc_enumeration_step12+0x84>
80008878:	11 99       	ld.ub	r9,r8[0x1]
8000887a:	30 18       	mov	r8,1
8000887c:	f0 09 18 00 	cp.b	r9,r8
80008880:	c0 90       	breq	80008892 <uhc_enumeration_step12+0x32>
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
80008882:	58 1b       	cp.w	r11,1
80008884:	f9 bc 00 07 	moveq	r12,7
80008888:	f9 bc 01 03 	movne	r12,3
8000888c:	f0 1f 00 17 	mcall	800088e8 <uhc_enumeration_step12+0x88>
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
80008890:	c2 78       	rjmp	800088de <uhc_enumeration_step12+0x7e>
		conf_num = UHC_DEVICE_CONF(uhc_dev_enum);
	} else {
		conf_num = 1;
	}

	uhc_dev_enum->conf_desc = malloc(sizeof(usb_conf_desc_t));
80008892:	30 9c       	mov	r12,9
80008894:	f0 1f 00 16 	mcall	800088ec <uhc_enumeration_step12+0x8c>
80008898:	49 38       	lddpc	r8,800088e4 <uhc_enumeration_step12+0x84>
8000889a:	91 6c       	st.w	r8[0x18],r12
	if (uhc_dev_enum->conf_desc == NULL) {
8000889c:	58 0c       	cp.w	r12,0
8000889e:	c0 51       	brne	800088a8 <uhc_enumeration_step12+0x48>
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800088a0:	30 6c       	mov	r12,6
800088a2:	f0 1f 00 12 	mcall	800088e8 <uhc_enumeration_step12+0x88>
		return;
800088a6:	c1 c8       	rjmp	800088de <uhc_enumeration_step12+0x7e>
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
800088a8:	38 08       	mov	r8,-128
800088aa:	ba 88       	st.b	sp[0x0],r8
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
800088ac:	30 68       	mov	r8,6
800088ae:	ba 98       	st.b	sp[0x1],r8
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
800088b0:	e0 68 02 00 	mov	r8,512
800088b4:	ba 18       	st.h	sp[0x2],r8
	req.wIndex = 0;
800088b6:	30 08       	mov	r8,0
800088b8:	ba 28       	st.h	sp[0x4],r8
	req.wLength = sizeof(usb_conf_desc_t);
800088ba:	30 98       	mov	r8,9
800088bc:	ba 38       	st.h	sp[0x6],r8
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800088be:	48 d8       	lddpc	r8,800088f0 <uhc_enumeration_step12+0x90>
800088c0:	1a d8       	st.w	--sp,r8
800088c2:	30 08       	mov	r8,0
800088c4:	30 99       	mov	r9,9
800088c6:	18 9a       	mov	r10,r12
800088c8:	fa cb ff fc 	sub	r11,sp,-4
800088cc:	30 1c       	mov	r12,1
800088ce:	f0 1f 00 0a 	mcall	800088f4 <uhc_enumeration_step12+0x94>
800088d2:	2f fd       	sub	sp,-4
800088d4:	58 0c       	cp.w	r12,0
800088d6:	c0 41       	brne	800088de <uhc_enumeration_step12+0x7e>
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			sizeof(usb_conf_desc_t),
			NULL, uhc_enumeration_step13)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800088d8:	30 6c       	mov	r12,6
800088da:	f0 1f 00 04 	mcall	800088e8 <uhc_enumeration_step12+0x88>
		return;
	}
}
800088de:	2f ed       	sub	sp,-8
800088e0:	d8 02       	popm	pc
800088e2:	00 00       	add	r0,r0
800088e4:	00 00       	add	r0,r0
800088e6:	0b 88       	ld.ub	r8,r5[0x0]
800088e8:	80 00       	ld.sh	r0,r0[0x0]
800088ea:	86 04       	ld.sh	r4,r3[0x0]
800088ec:	80 00       	ld.sh	r0,r0[0x0]
800088ee:	91 ac       	st.w	r8[0x28],r12
800088f0:	80 00       	ld.sh	r0,r0[0x0]
800088f2:	88 f8       	ld.uh	r8,r4[0xe]
800088f4:	80 00       	ld.sh	r0,r0[0x0]
800088f6:	65 2c       	ld.w	r12,r2[0x48]

800088f8 <uhc_enumeration_step13>:
 */
static void uhc_enumeration_step13(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
800088f8:	eb cd 40 e0 	pushm	r5-r7,lr
800088fc:	20 2d       	sub	sp,8
	uint16_t conf_size;
	uint16_t bus_power = 0;
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
800088fe:	58 0b       	cp.w	r11,0
80008900:	5f 19       	srne	r9
80008902:	30 98       	mov	r8,9
80008904:	f0 0a 19 00 	cp.h	r10,r8
80008908:	5f 18       	srne	r8
8000890a:	f3 e8 10 08 	or	r8,r9,r8
8000890e:	c0 81       	brne	8000891e <uhc_enumeration_step13+0x26>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
80008910:	4a b8       	lddpc	r8,800089bc <uhc_enumeration_step13+0xc4>
80008912:	70 68       	ld.w	r8,r8[0x18]
	uint16_t conf_size;
	uint16_t bus_power = 0;
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
80008914:	11 9a       	ld.ub	r10,r8[0x1]
80008916:	30 29       	mov	r9,2
80008918:	f2 0a 18 00 	cp.b	r10,r9
8000891c:	c0 90       	breq	8000892e <uhc_enumeration_step13+0x36>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
8000891e:	58 1b       	cp.w	r11,1
80008920:	f9 bc 00 07 	moveq	r12,7
80008924:	f9 bc 01 03 	movne	r12,3
80008928:	f0 1f 00 26 	mcall	800089c0 <uhc_enumeration_step13+0xc8>
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
8000892c:	c4 58       	rjmp	800089b6 <uhc_enumeration_step13+0xbe>
		}
		// Go to USB HUB parent
		dev = dev->hub;
	}
#else
	if (!(uhc_dev_enum->conf_desc->bmAttributes
8000892e:	11 f9       	ld.ub	r9,r8[0x7]
80008930:	e2 19 00 40 	andl	r9,0x40,COH
80008934:	c1 11       	brne	80008956 <uhc_enumeration_step13+0x5e>
			&USB_CONFIG_ATTR_SELF_POWERED)) {
		bus_power = uhc_dev_enum->conf_desc->bMaxPower * 2;
80008936:	f1 3a 00 08 	ld.ub	r10,r8[8]
8000893a:	a1 7a       	lsl	r10,0x1
8000893c:	e0 69 01 f4 	mov	r9,500
80008940:	f2 0a 19 00 	cp.h	r10,r9
80008944:	e0 88 00 09 	brls	80008956 <uhc_enumeration_step13+0x5e>
	}
#endif
	if ((bus_power + uhc_power_running) > USB_HOST_POWER_MAX) {
		// USB interfaces consumption too high
		UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_OVERCURRENT);
80008948:	30 2b       	mov	r11,2
8000894a:	49 dc       	lddpc	r12,800089bc <uhc_enumeration_step13+0xc4>
8000894c:	f0 1f 00 1e 	mcall	800089c4 <uhc_enumeration_step13+0xcc>

		// Abort enumeration, set line in suspend mode
		uhc_enumeration_suspend();
80008950:	f0 1f 00 1e 	mcall	800089c8 <uhc_enumeration_step13+0xd0>
		return;
80008954:	c3 18       	rjmp	800089b6 <uhc_enumeration_step13+0xbe>
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
80008956:	11 a7       	ld.ub	r7,r8[0x2]
80008958:	11 b8       	ld.ub	r8,r8[0x3]
8000895a:	f1 e7 10 87 	or	r7,r8,r7<<0x8
8000895e:	5c c7       	swap.bh	r7
80008960:	5c 87       	casts.h	r7
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
80008962:	49 76       	lddpc	r6,800089bc <uhc_enumeration_step13+0xc4>
80008964:	6c 6c       	ld.w	r12,r6[0x18]
80008966:	19 d5       	ld.ub	r5,r12[0x5]
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
80008968:	f0 1f 00 19 	mcall	800089cc <uhc_enumeration_step13+0xd4>
	uhc_dev_enum->conf_desc = malloc(conf_size);
8000896c:	0e 9c       	mov	r12,r7
8000896e:	5c 7c       	castu.h	r12
80008970:	f0 1f 00 18 	mcall	800089d0 <uhc_enumeration_step13+0xd8>
80008974:	8d 6c       	st.w	r6[0x18],r12
	if (uhc_dev_enum->conf_desc == NULL) {
80008976:	c0 51       	brne	80008980 <uhc_enumeration_step13+0x88>
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80008978:	30 6c       	mov	r12,6
8000897a:	f0 1f 00 12 	mcall	800089c0 <uhc_enumeration_step13+0xc8>
		return;
8000897e:	c1 c8       	rjmp	800089b6 <uhc_enumeration_step13+0xbe>
	}
	// Send USB device descriptor request
	req.bmRequestType =
80008980:	38 08       	mov	r8,-128
80008982:	ba 88       	st.b	sp[0x0],r8
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
80008984:	30 68       	mov	r8,6
80008986:	ba 98       	st.b	sp[0x1],r8
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
80008988:	20 15       	sub	r5,1
8000898a:	a9 b5       	sbr	r5,0x9
8000898c:	ba 15       	st.h	sp[0x2],r5
	req.wIndex = 0;
8000898e:	30 08       	mov	r8,0
80008990:	ba 28       	st.h	sp[0x4],r8
	req.wLength = conf_size;
80008992:	ba 37       	st.h	sp[0x6],r7
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80008994:	49 08       	lddpc	r8,800089d4 <uhc_enumeration_step13+0xdc>
80008996:	1a d8       	st.w	--sp,r8
80008998:	30 08       	mov	r8,0
8000899a:	0e 99       	mov	r9,r7
8000899c:	5c 79       	castu.h	r9
8000899e:	18 9a       	mov	r10,r12
800089a0:	fa cb ff fc 	sub	r11,sp,-4
800089a4:	30 1c       	mov	r12,1
800089a6:	f0 1f 00 0d 	mcall	800089d8 <uhc_enumeration_step13+0xe0>
800089aa:	2f fd       	sub	sp,-4
800089ac:	58 0c       	cp.w	r12,0
800089ae:	c0 41       	brne	800089b6 <uhc_enumeration_step13+0xbe>
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			conf_size,
			NULL, uhc_enumeration_step14)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800089b0:	30 6c       	mov	r12,6
800089b2:	f0 1f 00 04 	mcall	800089c0 <uhc_enumeration_step13+0xc8>
		return;
	}
}
800089b6:	2f ed       	sub	sp,-8
800089b8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800089bc:	00 00       	add	r0,r0
800089be:	0b 88       	ld.ub	r8,r5[0x0]
800089c0:	80 00       	ld.sh	r0,r0[0x0]
800089c2:	86 04       	ld.sh	r4,r3[0x0]
800089c4:	80 00       	ld.sh	r0,r0[0x0]
800089c6:	41 98       	lddsp	r8,sp[0x64]
800089c8:	80 00       	ld.sh	r0,r0[0x0]
800089ca:	84 b0       	ld.uh	r0,r2[0x6]
800089cc:	80 00       	ld.sh	r0,r0[0x0]
800089ce:	91 9c       	st.w	r8[0x24],r12
800089d0:	80 00       	ld.sh	r0,r0[0x0]
800089d2:	91 ac       	st.w	r8[0x28],r12
800089d4:	80 00       	ld.sh	r0,r0[0x0]
800089d6:	89 dc       	st.w	r4[0x34],r12
800089d8:	80 00       	ld.sh	r0,r0[0x0]
800089da:	65 2c       	ld.w	r12,r2[0x48]

800089dc <uhc_enumeration_step14>:
 */
static void uhc_enumeration_step14(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
800089dc:	eb cd 40 80 	pushm	r7,lr
800089e0:	20 2d       	sub	sp,8
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
800089e2:	58 0b       	cp.w	r11,0
800089e4:	5f 19       	srne	r9
800089e6:	30 88       	mov	r8,8
800089e8:	f0 0a 19 00 	cp.h	r10,r8
800089ec:	5f 88       	srls	r8
800089ee:	f3 e8 10 08 	or	r8,r9,r8
800089f2:	c1 01       	brne	80008a12 <uhc_enumeration_step14+0x36>
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
800089f4:	4b 08       	lddpc	r8,80008ab4 <uhc_enumeration_step14+0xd8>
800089f6:	70 68       	ld.w	r8,r8[0x18]
{
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
800089f8:	11 9c       	ld.ub	r12,r8[0x1]
800089fa:	30 29       	mov	r9,2
800089fc:	f2 0c 18 00 	cp.b	r12,r9
80008a00:	c0 91       	brne	80008a12 <uhc_enumeration_step14+0x36>
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
80008a02:	11 a9       	ld.ub	r9,r8[0x2]
80008a04:	11 b8       	ld.ub	r8,r8[0x3]
80008a06:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80008a0a:	5c c8       	swap.bh	r8
{
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
80008a0c:	f4 08 19 00 	cp.h	r8,r10
80008a10:	c0 90       	breq	80008a22 <uhc_enumeration_step14+0x46>
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
80008a12:	58 1b       	cp.w	r11,1
80008a14:	f9 bc 00 07 	moveq	r12,7
80008a18:	f9 bc 01 03 	movne	r12,3
80008a1c:	f0 1f 00 27 	mcall	80008ab8 <uhc_enumeration_step14+0xdc>
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
80008a20:	c4 68       	rjmp	80008aac <uhc_enumeration_step14+0xd0>
	}
	// Check if unless one USB interface is supported by UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		switch (uhc_uhis[i].install(uhc_dev_enum)) {
80008a22:	4a 78       	lddpc	r8,80008abc <uhc_enumeration_step14+0xe0>
80008a24:	70 08       	ld.w	r8,r8[0x0]
80008a26:	4a 4c       	lddpc	r12,80008ab4 <uhc_enumeration_step14+0xd8>
80008a28:	5d 18       	icall	r8
80008a2a:	c0 40       	breq	80008a32 <uhc_enumeration_step14+0x56>
80008a2c:	58 1c       	cp.w	r12,1
80008a2e:	c0 f1       	brne	80008a4c <uhc_enumeration_step14+0x70>
80008a30:	c0 38       	rjmp	80008a36 <uhc_enumeration_step14+0x5a>
80008a32:	30 17       	mov	r7,1
80008a34:	c0 28       	rjmp	80008a38 <uhc_enumeration_step14+0x5c>
80008a36:	30 07       	mov	r7,0
80008a38:	4a 18       	lddpc	r8,80008abc <uhc_enumeration_step14+0xe0>
80008a3a:	70 48       	ld.w	r8,r8[0x10]
80008a3c:	49 ec       	lddpc	r12,80008ab4 <uhc_enumeration_step14+0xd8>
80008a3e:	5d 18       	icall	r8
80008a40:	c0 40       	breq	80008a48 <uhc_enumeration_step14+0x6c>
80008a42:	58 1c       	cp.w	r12,1
80008a44:	c0 41       	brne	80008a4c <uhc_enumeration_step14+0x70>
80008a46:	c0 f8       	rjmp	80008a64 <uhc_enumeration_step14+0x88>
80008a48:	30 17       	mov	r7,1
80008a4a:	c0 d8       	rjmp	80008a64 <uhc_enumeration_step14+0x88>
			break;

		default:
			// USB host hardware limitation
			// Free all endpoints
			uhd_ep_free(UHC_DEVICE_ENUM_ADD,0xFF);
80008a4c:	e0 6b 00 ff 	mov	r11,255
80008a50:	30 1c       	mov	r12,1
80008a52:	f0 1f 00 1c 	mcall	80008ac0 <uhc_enumeration_step14+0xe4>
			UHC_ENUM_EVENT(uhc_dev_enum,UHC_ENUM_HARDWARE_LIMIT);
80008a56:	30 4b       	mov	r11,4
80008a58:	49 7c       	lddpc	r12,80008ab4 <uhc_enumeration_step14+0xd8>
80008a5a:	f0 1f 00 1b 	mcall	80008ac4 <uhc_enumeration_step14+0xe8>

			// Abort enumeration, set line in suspend mode
			uhc_enumeration_suspend();
80008a5e:	f0 1f 00 1b 	mcall	80008ac8 <uhc_enumeration_step14+0xec>
			return;
80008a62:	c2 58       	rjmp	80008aac <uhc_enumeration_step14+0xd0>
		}
	}
	if (!b_conf_supported) {
80008a64:	58 07       	cp.w	r7,0
80008a66:	c0 81       	brne	80008a76 <uhc_enumeration_step14+0x9a>
		// No USB interface supported
		UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_UNSUPPORTED);
80008a68:	30 1b       	mov	r11,1
80008a6a:	49 3c       	lddpc	r12,80008ab4 <uhc_enumeration_step14+0xd8>
80008a6c:	f0 1f 00 16 	mcall	80008ac4 <uhc_enumeration_step14+0xe8>

		// Abort enumeration, set line in suspend mode
		uhc_enumeration_suspend();
80008a70:	f0 1f 00 16 	mcall	80008ac8 <uhc_enumeration_step14+0xec>
		return;
80008a74:	c1 c8       	rjmp	80008aac <uhc_enumeration_step14+0xd0>
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
80008a76:	30 08       	mov	r8,0
80008a78:	ba 88       	st.b	sp[0x0],r8
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
80008a7a:	30 98       	mov	r8,9
80008a7c:	ba 98       	st.b	sp[0x1],r8
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
80008a7e:	48 e8       	lddpc	r8,80008ab4 <uhc_enumeration_step14+0xd8>
80008a80:	70 68       	ld.w	r8,r8[0x18]
80008a82:	11 d8       	ld.ub	r8,r8[0x5]
80008a84:	ba 18       	st.h	sp[0x2],r8
	req.wIndex = 0;
80008a86:	30 08       	mov	r8,0
80008a88:	ba 28       	st.h	sp[0x4],r8
	req.wLength = 0;
80008a8a:	ba 38       	st.h	sp[0x6],r8
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80008a8c:	49 08       	lddpc	r8,80008acc <uhc_enumeration_step14+0xf0>
80008a8e:	1a d8       	st.w	--sp,r8
80008a90:	30 08       	mov	r8,0
80008a92:	10 99       	mov	r9,r8
80008a94:	10 9a       	mov	r10,r8
80008a96:	fa cb ff fc 	sub	r11,sp,-4
80008a9a:	30 1c       	mov	r12,1
80008a9c:	f0 1f 00 0d 	mcall	80008ad0 <uhc_enumeration_step14+0xf4>
80008aa0:	2f fd       	sub	sp,-4
80008aa2:	58 0c       	cp.w	r12,0
80008aa4:	c0 41       	brne	80008aac <uhc_enumeration_step14+0xd0>
			&req,
			NULL,
			0,
			NULL, uhc_enumeration_step15)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80008aa6:	30 6c       	mov	r12,6
80008aa8:	f0 1f 00 04 	mcall	80008ab8 <uhc_enumeration_step14+0xdc>
		return;
	}
}
80008aac:	2f ed       	sub	sp,-8
80008aae:	e3 cd 80 80 	ldm	sp++,r7,pc
80008ab2:	00 00       	add	r0,r0
80008ab4:	00 00       	add	r0,r0
80008ab6:	0b 88       	ld.ub	r8,r5[0x0]
80008ab8:	80 00       	ld.sh	r0,r0[0x0]
80008aba:	86 04       	ld.sh	r4,r3[0x0]
80008abc:	80 00       	ld.sh	r0,r0[0x0]
80008abe:	ef d0 80 00 	ldswp.w	r0,r7[0]
80008ac2:	65 b0       	ld.w	r0,r2[0x6c]
80008ac4:	80 00       	ld.sh	r0,r0[0x0]
80008ac6:	41 98       	lddsp	r8,sp[0x64]
80008ac8:	80 00       	ld.sh	r0,r0[0x0]
80008aca:	84 b0       	ld.uh	r0,r2[0x6]
80008acc:	80 00       	ld.sh	r0,r0[0x0]
80008ace:	8a d4       	ld.uh	r4,r5[0xa]
80008ad0:	80 00       	ld.sh	r0,r0[0x0]
80008ad2:	65 2c       	ld.w	r12,r2[0x48]

80008ad4 <uhc_enumeration_step15>:
 */
static void uhc_enumeration_step15(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
80008ad4:	eb cd 40 e0 	pushm	r5-r7,lr
80008ad8:	16 97       	mov	r7,r11
	UNUSED(add);
	if ((status!=UHD_TRANS_NOERROR) || (payload_trans!=0)) {
80008ada:	58 0b       	cp.w	r11,0
80008adc:	5f 1b       	srne	r11
80008ade:	30 08       	mov	r8,0
80008ae0:	f0 0a 19 00 	cp.h	r10,r8
80008ae4:	5f 19       	srne	r9
80008ae6:	f7 e9 10 09 	or	r9,r11,r9
80008aea:	f0 09 18 00 	cp.b	r9,r8
80008aee:	c1 20       	breq	80008b12 <uhc_enumeration_step15+0x3e>
		for(uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(uhc_dev_enum);
80008af0:	49 16       	lddpc	r6,80008b34 <uhc_enumeration_step15+0x60>
80008af2:	49 25       	lddpc	r5,80008b38 <uhc_enumeration_step15+0x64>
80008af4:	6c 28       	ld.w	r8,r6[0x8]
80008af6:	0a 9c       	mov	r12,r5
80008af8:	5d 18       	icall	r8
80008afa:	6c 68       	ld.w	r8,r6[0x18]
80008afc:	0a 9c       	mov	r12,r5
80008afe:	5d 18       	icall	r8
		}
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
80008b00:	58 17       	cp.w	r7,1
80008b02:	f9 bc 00 07 	moveq	r12,7
80008b06:	f9 bc 01 03 	movne	r12,3
80008b0a:	f0 1f 00 0d 	mcall	80008b3c <uhc_enumeration_step15+0x68>
				UHC_ENUM_DISCONNECT : UHC_ENUM_FAIL);
		return;
80008b0e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	}

	// Enable all UHIs supported
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		uhc_uhis[i].enable(uhc_dev_enum);
80008b12:	48 96       	lddpc	r6,80008b34 <uhc_enumeration_step15+0x60>
80008b14:	48 97       	lddpc	r7,80008b38 <uhc_enumeration_step15+0x64>
80008b16:	6c 18       	ld.w	r8,r6[0x4]
80008b18:	0e 9c       	mov	r12,r7
80008b1a:	5d 18       	icall	r8
80008b1c:	6c 58       	ld.w	r8,r6[0x14]
80008b1e:	0e 9c       	mov	r12,r7
80008b20:	5d 18       	icall	r8
		return;
	}
	uhc_dev_enum->lpm_desc = NULL;
#endif

	uhc_enum_try = 0;
80008b22:	30 09       	mov	r9,0
80008b24:	48 78       	lddpc	r8,80008b40 <uhc_enumeration_step15+0x6c>
80008b26:	b0 89       	st.b	r8[0x0],r9

	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
80008b28:	30 0b       	mov	r11,0
80008b2a:	0e 9c       	mov	r12,r7
80008b2c:	f0 1f 00 06 	mcall	80008b44 <uhc_enumeration_step15+0x70>
80008b30:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008b34:	80 00       	ld.sh	r0,r0[0x0]
80008b36:	ef d0 00 00 	ldins.h	r0:b,r7[0]
80008b3a:	0b 88       	ld.ub	r8,r5[0x0]
80008b3c:	80 00       	ld.sh	r0,r0[0x0]
80008b3e:	86 04       	ld.sh	r4,r3[0x0]
80008b40:	00 00       	add	r0,r0
80008b42:	0b a4       	ld.ub	r4,r5[0x2]
80008b44:	80 00       	ld.sh	r0,r0[0x0]
80008b46:	41 98       	lddsp	r8,sp[0x64]

80008b48 <MIDI_Host_USBTask>:
		noteoffhappened = 0;
	}
}*/

void MIDI_Host_USBTask(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
80008b48:	eb cd 40 fc 	pushm	r2-r7,lr
80008b4c:	20 1d       	sub	sp,4
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
80008b4e:	49 98       	lddpc	r8,80008bb0 <MIDI_Host_USBTask+0x68>
80008b50:	11 89       	ld.ub	r9,r8[0x0]
80008b52:	30 b8       	mov	r8,11
80008b54:	f0 09 18 00 	cp.b	r9,r8
80008b58:	c2 91       	brne	80008baa <MIDI_Host_USBTask+0x62>
80008b5a:	f9 39 00 10 	ld.ub	r9,r12[16]
80008b5e:	30 08       	mov	r8,0
80008b60:	f0 09 18 00 	cp.b	r9,r8
80008b64:	c2 30       	breq	80008baa <MIDI_Host_USBTask+0x62>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	MIDI_Host_Flush(MIDIInterfaceInfo);
80008b66:	f0 1f 00 14 	mcall	80008bb4 <MIDI_Host_USBTask+0x6c>
	#endif
	
	MIDI_EventPacket_t MIDIEvent;
	while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
80008b6a:	1a 97       	mov	r7,sp
80008b6c:	49 35       	lddpc	r5,80008bb8 <MIDI_Host_USBTask+0x70>
	{
		bool NoteOnEvent  = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_ON));
		bool NoteOffEvent = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_OFF));

		/* Display note events from the host */
		if (NoteOnEvent)// || NoteOffEvent)
80008b6e:	30 96       	mov	r6,9
		{
			dip204_set_cursor_position(1,1);
80008b70:	30 14       	mov	r4,1
			dip204_write_string("                ");
80008b72:	49 33       	lddpc	r3,80008bbc <MIDI_Host_USBTask+0x74>
			dip204_set_cursor_position(1,1);
			dip204_printf_string("MIDI NOTE");
80008b74:	49 32       	lddpc	r2,80008bc0 <MIDI_Host_USBTask+0x78>
	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	MIDI_Host_Flush(MIDIInterfaceInfo);
	#endif
	
	MIDI_EventPacket_t MIDIEvent;
	while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
80008b76:	c1 58       	rjmp	80008ba0 <MIDI_Host_USBTask+0x58>
	{
		bool NoteOnEvent  = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_ON));
		bool NoteOffEvent = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_OFF));

		/* Display note events from the host */
		if (NoteOnEvent)// || NoteOffEvent)
80008b78:	1b 88       	ld.ub	r8,sp[0x0]
80008b7a:	ec 08 18 00 	cp.b	r8,r6
80008b7e:	c1 11       	brne	80008ba0 <MIDI_Host_USBTask+0x58>
		{
			dip204_set_cursor_position(1,1);
80008b80:	08 9b       	mov	r11,r4
80008b82:	08 9c       	mov	r12,r4
80008b84:	f0 1f 00 10 	mcall	80008bc4 <MIDI_Host_USBTask+0x7c>
			dip204_write_string("                ");
80008b88:	06 9c       	mov	r12,r3
80008b8a:	f0 1f 00 10 	mcall	80008bc8 <MIDI_Host_USBTask+0x80>
			dip204_set_cursor_position(1,1);
80008b8e:	08 9b       	mov	r11,r4
80008b90:	08 9c       	mov	r12,r4
80008b92:	f0 1f 00 0d 	mcall	80008bc4 <MIDI_Host_USBTask+0x7c>
			dip204_printf_string("MIDI NOTE");
80008b96:	04 9c       	mov	r12,r2
80008b98:	f0 1f 00 0d 	mcall	80008bcc <MIDI_Host_USBTask+0x84>
			dip204_hide_cursor();
80008b9c:	f0 1f 00 0d 	mcall	80008bd0 <MIDI_Host_USBTask+0x88>
	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	MIDI_Host_Flush(MIDIInterfaceInfo);
	#endif
	
	MIDI_EventPacket_t MIDIEvent;
	while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
80008ba0:	1a 9b       	mov	r11,sp
80008ba2:	0a 9c       	mov	r12,r5
80008ba4:	f0 1f 00 0c 	mcall	80008bd4 <MIDI_Host_USBTask+0x8c>
80008ba8:	ce 81       	brne	80008b78 <MIDI_Host_USBTask+0x30>
			/*printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
			((MIDIEvent.Data1 & 0x0F) + 1),
			MIDIEvent.Data2, MIDIEvent.Data3);*/
		}
	}
}
80008baa:	2f fd       	sub	sp,-4
80008bac:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80008bb0:	00 00       	add	r0,r0
80008bb2:	09 4d       	ld.w	sp,--r4
80008bb4:	80 00       	ld.sh	r0,r0[0x0]
80008bb6:	29 a8       	sub	r8,-102
80008bb8:	00 00       	add	r0,r0
80008bba:	03 ec       	ld.ub	r12,r1[0x6]
80008bbc:	80 00       	ld.sh	r0,r0[0x0]
80008bbe:	ef a0 80 00 	mvcr.w	cp4,r0,cr0
80008bc2:	f0 10 80 00 	mcall	r0[-131072]
80008bc6:	21 e8       	sub	r8,30
80008bc8:	80 00       	ld.sh	r0,r0[0x0]
80008bca:	21 90       	sub	r0,25
80008bcc:	80 00       	ld.sh	r0,r0[0x0]
80008bce:	20 f8       	sub	r8,15
80008bd0:	80 00       	ld.sh	r0,r0[0x0]
80008bd2:	22 44       	sub	r4,36
80008bd4:	80 00       	ld.sh	r0,r0[0x0]
80008bd6:	28 cc       	sub	r12,-116

80008bd8 <dacwait2>:
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008bd8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008bdc:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008be0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008be4:	14 38       	cp.w	r8,r10
80008be6:	e0 88 00 08 	brls	80008bf6 <dacwait2+0x1e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008bea:	12 38       	cp.w	r8,r9
80008bec:	fe 98 ff fa 	brls	80008be0 <dacwait2+0x8>
80008bf0:	12 3a       	cp.w	r10,r9
80008bf2:	5e 3c       	retlo	r12
80008bf4:	cf 6b       	rjmp	80008be0 <dacwait2+0x8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008bf6:	12 38       	cp.w	r8,r9
80008bf8:	5e bc       	rethi	r12
80008bfa:	12 3a       	cp.w	r10,r9
80008bfc:	cf 22       	brcc	80008be0 <dacwait2+0x8>
80008bfe:	5e fc       	retal	r12

80008c00 <dacwait1>:
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008c00:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008c04:	f0 ca fd 00 	sub	r10,r8,-768
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008c08:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008c0c:	14 38       	cp.w	r8,r10
80008c0e:	e0 88 00 08 	brls	80008c1e <dacwait1+0x1e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008c12:	12 38       	cp.w	r8,r9
80008c14:	fe 98 ff fa 	brls	80008c08 <dacwait1+0x8>
80008c18:	12 3a       	cp.w	r10,r9
80008c1a:	5e 3c       	retlo	r12
80008c1c:	cf 6b       	rjmp	80008c08 <dacwait1+0x8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008c1e:	12 38       	cp.w	r8,r9
80008c20:	5e bc       	rethi	r12
80008c22:	12 3a       	cp.w	r10,r9
80008c24:	cf 22       	brcc	80008c08 <dacwait1+0x8>
80008c26:	5e fc       	retal	r12

80008c28 <setSPI>:
{
	cpu_delay_us(12,64000000);//5
}

void setSPI(spi_options_t spiOptions)
{
80008c28:	d4 01       	pushm	lr
	SPIbusy = 1;
80008c2a:	30 19       	mov	r9,1
80008c2c:	49 48       	lddpc	r8,80008c7c <setSPI+0x54>
80008c2e:	b0 89       	st.b	r8[0x0],r9
	spi_disable(SPARE_SPI);
80008c30:	fe 7c 24 00 	mov	r12,-56320
80008c34:	f0 1f 00 13 	mcall	80008c80 <setSPI+0x58>
	spi_initMaster(SPARE_SPI, &spiOptions);
80008c38:	fa cb ff fc 	sub	r11,sp,-4
80008c3c:	fe 7c 24 00 	mov	r12,-56320
80008c40:	f0 1f 00 11 	mcall	80008c84 <setSPI+0x5c>
	spi_selectionMode(SPARE_SPI, 0, 0, 0);
80008c44:	30 09       	mov	r9,0
80008c46:	12 9a       	mov	r10,r9
80008c48:	12 9b       	mov	r11,r9
80008c4a:	fe 7c 24 00 	mov	r12,-56320
80008c4e:	f0 1f 00 0f 	mcall	80008c88 <setSPI+0x60>
	spi_selectChip(SPARE_SPI, 0);
80008c52:	30 0b       	mov	r11,0
80008c54:	fe 7c 24 00 	mov	r12,-56320
80008c58:	f0 1f 00 0d 	mcall	80008c8c <setSPI+0x64>
	spi_setupChipReg(SPARE_SPI, &spiOptions, TARGET_PBACLK_FREQ_HZ);
80008c5c:	e0 6a 48 00 	mov	r10,18432
80008c60:	ea 1a 01 e8 	orh	r10,0x1e8
80008c64:	fa cb ff fc 	sub	r11,sp,-4
80008c68:	fe 7c 24 00 	mov	r12,-56320
80008c6c:	f0 1f 00 09 	mcall	80008c90 <setSPI+0x68>
	spi_enable(SPARE_SPI);
80008c70:	fe 7c 24 00 	mov	r12,-56320
80008c74:	f0 1f 00 08 	mcall	80008c94 <setSPI+0x6c>
}
80008c78:	d8 02       	popm	pc
80008c7a:	00 00       	add	r0,r0
80008c7c:	00 00       	add	r0,r0
80008c7e:	0b ac       	ld.ub	r12,r5[0x2]
80008c80:	80 00       	ld.sh	r0,r0[0x0]
80008c82:	27 3a       	sub	r10,115
80008c84:	80 00       	ld.sh	r0,r0[0x0]
80008c86:	25 a6       	sub	r6,90
80008c88:	80 00       	ld.sh	r0,r0[0x0]
80008c8a:	25 de       	sub	lr,93
80008c8c:	80 00       	ld.sh	r0,r0[0x0]
80008c8e:	26 0a       	sub	r10,96
80008c90:	80 00       	ld.sh	r0,r0[0x0]
80008c92:	26 7c       	sub	r12,103
80008c94:	80 00       	ld.sh	r0,r0[0x0]
80008c96:	27 34       	sub	r4,115

80008c98 <initSPIbus>:
	gpio_set_gpio_pin(DAC1_CS);
	SPIbusy = 0;
}

void initSPIbus(void)
{
80008c98:	d4 01       	pushm	lr
	SPIbusy = 1;
80008c9a:	30 19       	mov	r9,1
80008c9c:	49 c8       	lddpc	r8,80008d0c <initSPIbus+0x74>
80008c9e:	b0 89       	st.b	r8[0x0],r9
	//prepare the pins the control the DAC and set them to default positions
	gpio_set_gpio_pin(DAC1_CS);
80008ca0:	34 6c       	mov	r12,70
80008ca2:	f0 1f 00 1c 	mcall	80008d10 <initSPIbus+0x78>
	gpio_set_gpio_pin(DAC2_CS);
80008ca6:	36 9c       	mov	r12,105
80008ca8:	f0 1f 00 1a 	mcall	80008d10 <initSPIbus+0x78>
	gpio_set_gpio_pin(DAC3_CS);
80008cac:	36 8c       	mov	r12,104
80008cae:	f0 1f 00 19 	mcall	80008d10 <initSPIbus+0x78>
	//gpio_set_gpio_pin(DAC4_CS);
	gpio_clr_gpio_pin(REF1);
80008cb2:	36 6c       	mov	r12,102
80008cb4:	f0 1f 00 18 	mcall	80008d14 <initSPIbus+0x7c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008cb8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008cbc:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008cc0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008cc4:	14 38       	cp.w	r8,r10
80008cc6:	e0 88 00 08 	brls	80008cd6 <initSPIbus+0x3e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008cca:	12 38       	cp.w	r8,r9
80008ccc:	fe 98 ff fa 	brls	80008cc0 <initSPIbus+0x28>
80008cd0:	12 3a       	cp.w	r10,r9
80008cd2:	c0 73       	brcs	80008ce0 <initSPIbus+0x48>
80008cd4:	cf 6b       	rjmp	80008cc0 <initSPIbus+0x28>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008cd6:	12 38       	cp.w	r8,r9
80008cd8:	e0 8b 00 04 	brhi	80008ce0 <initSPIbus+0x48>
80008cdc:	12 3a       	cp.w	r10,r9
80008cde:	cf 12       	brcc	80008cc0 <initSPIbus+0x28>

	//allow pins to settle
	delay_ms(1);

	// Initialize as master
	setSPI(spiOptions12DAC);
80008ce0:	48 e8       	lddpc	r8,80008d18 <initSPIbus+0x80>
80008ce2:	20 4d       	sub	sp,16
80008ce4:	f0 ea 00 00 	ld.d	r10,r8[0]
80008ce8:	fa eb 00 00 	st.d	sp[0],r10
80008cec:	f0 e8 00 08 	ld.d	r8,r8[8]
80008cf0:	fa e9 00 08 	st.d	sp[8],r8
80008cf4:	f0 1f 00 0a 	mcall	80008d1c <initSPIbus+0x84>
		{DIP204_SPI_SCK_PIN,  DIP204_SPI_SCK_FUNCTION },  // SPI Clock.
		{DIP204_SPI_MISO_PIN, DIP204_SPI_MISO_FUNCTION},  // MISO.
		{DIP204_SPI_MOSI_PIN, DIP204_SPI_MOSI_FUNCTION},  // MOSI.
		{DIP204_SPI_NPCS_PIN, DIP204_SPI_NPCS_FUNCTION}   // Chip Select NPCS.
	};
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
80008cf8:	30 4b       	mov	r11,4
80008cfa:	48 ac       	lddpc	r12,80008d20 <initSPIbus+0x88>
80008cfc:	f0 1f 00 0a 	mcall	80008d24 <initSPIbus+0x8c>
		{SPARE_SPI_SCK_PIN,  SPARE_SPI_SCK_FUNCTION },  // SPI Clock.
		{SPARE_SPI_MISO_PIN, SPARE_SPI_MISO_FUNCTION},  // MISO.
		{SPARE_SPI_MOSI_PIN, SPARE_SPI_MOSI_FUNCTION},  // MOSI.
		{SPARE_SPI_NPCS_PIN, SPARE_SPI_NPCS_FUNCTION}   // Chip Select NPCS.
	};
	gpio_enable_module(SPARE_SPI_GPIO_MAP,
80008d00:	30 4b       	mov	r11,4
80008d02:	48 ac       	lddpc	r12,80008d28 <initSPIbus+0x90>
80008d04:	f0 1f 00 08 	mcall	80008d24 <initSPIbus+0x8c>
80008d08:	2f cd       	sub	sp,-16
	sizeof(SPARE_SPI_GPIO_MAP) / sizeof(SPARE_SPI_GPIO_MAP[0]));
}
80008d0a:	d8 02       	popm	pc
80008d0c:	00 00       	add	r0,r0
80008d0e:	0b ac       	ld.ub	r12,r5[0x2]
80008d10:	80 00       	ld.sh	r0,r0[0x0]
80008d12:	4a 50       	lddpc	r0,80008da4 <DAC16Send+0x78>
80008d14:	80 00       	ld.sh	r0,r0[0x0]
80008d16:	4a 6c       	lddpc	r12,80008dac <DAC16Send+0x80>
80008d18:	00 00       	add	r0,r0
80008d1a:	03 bc       	ld.ub	r12,r1[0x3]
80008d1c:	80 00       	ld.sh	r0,r0[0x0]
80008d1e:	8c 28       	ld.sh	r8,r6[0x4]
80008d20:	80 00       	ld.sh	r0,r0[0x0]
80008d22:	ef f0 80 00 	ld.wls	r0,r7[0x0]
80008d26:	49 3c       	lddpc	r12,80008d70 <DAC16Send+0x44>
80008d28:	80 00       	ld.sh	r0,r0[0x0]
80008d2a:	f0 1c eb cd 	mcall	r12[-20684]

80008d2c <DAC16Send>:
	}
	SPIbusy = 0;
}

void DAC16Send(unsigned char DAC16voice, unsigned short DAC16val)
{
80008d2c:	eb cd 40 c0 	pushm	r6-r7,lr
80008d30:	18 96       	mov	r6,r12
80008d32:	16 97       	mov	r7,r11
	unsigned char daccontrol = 0;

	SPIbusy = 1;
80008d34:	30 19       	mov	r9,1
80008d36:	4a f8       	lddpc	r8,80008df0 <DAC16Send+0xc4>
80008d38:	b0 89       	st.b	r8[0x0],r9
	//set up SPI to be 16 bit for the DAC
	setSPI(spiOptions16DAC);
80008d3a:	4a f8       	lddpc	r8,80008df4 <DAC16Send+0xc8>
80008d3c:	20 4d       	sub	sp,16
80008d3e:	f0 ea 00 00 	ld.d	r10,r8[0]
80008d42:	fa eb 00 00 	st.d	sp[0],r10
80008d46:	f0 e8 00 08 	ld.d	r8,r8[8]
80008d4a:	fa e9 00 08 	st.d	sp[8],r8
80008d4e:	f0 1f 00 2b 	mcall	80008df8 <DAC16Send+0xcc>

	daccontrol = (16 | (DAC16voice << 1));
	DAC1outhigh = ((daccontrol << 8) + (DAC16val >> 8));
80008d52:	a9 76       	lsl	r6,0x9
80008d54:	ad a6       	sbr	r6,0xc
80008d56:	5c 77       	castu.h	r7
80008d58:	ee 08 16 08 	lsr	r8,r7,0x8
80008d5c:	10 06       	add	r6,r8
80008d5e:	4a 88       	lddpc	r8,80008dfc <DAC16Send+0xd0>
80008d60:	b0 06       	st.h	r8[0x0],r6
	DAC1outlow = ((DAC16val & 255) << 8);
80008d62:	a9 67       	lsl	r7,0x8
80008d64:	4a 78       	lddpc	r8,80008e00 <DAC16Send+0xd4>
80008d66:	b0 07       	st.h	r8[0x0],r7
	gpio_clr_gpio_pin(DAC1_CS);
80008d68:	34 6c       	mov	r12,70
80008d6a:	f0 1f 00 27 	mcall	80008e04 <DAC16Send+0xd8>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008d6e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008d72:	f0 ca ff 80 	sub	r10,r8,-128
80008d76:	2f cd       	sub	sp,-16
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008d78:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008d7c:	14 38       	cp.w	r8,r10
80008d7e:	e0 88 00 08 	brls	80008d8e <DAC16Send+0x62>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008d82:	12 38       	cp.w	r8,r9
80008d84:	fe 98 ff fa 	brls	80008d78 <DAC16Send+0x4c>
80008d88:	12 3a       	cp.w	r10,r9
80008d8a:	c1 93       	brcs	80008dbc <DAC16Send+0x90>
80008d8c:	cf 6b       	rjmp	80008d78 <DAC16Send+0x4c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008d8e:	12 38       	cp.w	r8,r9
80008d90:	e0 8b 00 16 	brhi	80008dbc <DAC16Send+0x90>
80008d94:	12 3a       	cp.w	r10,r9
80008d96:	c1 33       	brcs	80008dbc <DAC16Send+0x90>
80008d98:	cf 0b       	rjmp	80008d78 <DAC16Send+0x4c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008d9a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008d9e:	14 38       	cp.w	r8,r10
80008da0:	e0 88 00 08 	brls	80008db0 <DAC16Send+0x84>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008da4:	12 38       	cp.w	r8,r9
80008da6:	fe 98 ff fa 	brls	80008d9a <DAC16Send+0x6e>
80008daa:	12 3a       	cp.w	r10,r9
80008dac:	c1 93       	brcs	80008dde <DAC16Send+0xb2>
80008dae:	cf 6b       	rjmp	80008d9a <DAC16Send+0x6e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008db0:	12 38       	cp.w	r8,r9
80008db2:	e0 8b 00 16 	brhi	80008dde <DAC16Send+0xb2>
80008db6:	12 3a       	cp.w	r10,r9
80008db8:	c1 33       	brcs	80008dde <DAC16Send+0xb2>
80008dba:	cf 0b       	rjmp	80008d9a <DAC16Send+0x6e>
	cpu_delay_us(2,64000000);
	spi_write(SPARE_SPI,DAC1outhigh);
80008dbc:	49 08       	lddpc	r8,80008dfc <DAC16Send+0xd0>
80008dbe:	90 8b       	ld.uh	r11,r8[0x0]
80008dc0:	fe 7c 24 00 	mov	r12,-56320
80008dc4:	f0 1f 00 11 	mcall	80008e08 <DAC16Send+0xdc>
	spi_write(SPARE_SPI,DAC1outlow);
80008dc8:	48 e8       	lddpc	r8,80008e00 <DAC16Send+0xd4>
80008dca:	90 8b       	ld.uh	r11,r8[0x0]
80008dcc:	fe 7c 24 00 	mov	r12,-56320
80008dd0:	f0 1f 00 0e 	mcall	80008e08 <DAC16Send+0xdc>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008dd4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008dd8:	f0 ca fd 00 	sub	r10,r8,-768
80008ddc:	cd fb       	rjmp	80008d9a <DAC16Send+0x6e>
	cpu_delay_us(12,64000000);
	gpio_set_gpio_pin(DAC1_CS);
80008dde:	34 6c       	mov	r12,70
80008de0:	f0 1f 00 0b 	mcall	80008e0c <DAC16Send+0xe0>
	SPIbusy = 0;
80008de4:	30 09       	mov	r9,0
80008de6:	48 38       	lddpc	r8,80008df0 <DAC16Send+0xc4>
80008de8:	b0 89       	st.b	r8[0x0],r9
}
80008dea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008dee:	00 00       	add	r0,r0
80008df0:	00 00       	add	r0,r0
80008df2:	0b ac       	ld.ub	r12,r5[0x2]
80008df4:	00 00       	add	r0,r0
80008df6:	03 cc       	ld.ub	r12,r1[0x4]
80008df8:	80 00       	ld.sh	r0,r0[0x0]
80008dfa:	8c 28       	ld.sh	r8,r6[0x4]
80008dfc:	00 00       	add	r0,r0
80008dfe:	0b b4       	ld.ub	r4,r5[0x3]
80008e00:	00 00       	add	r0,r0
80008e02:	0b b2       	ld.ub	r2,r5[0x3]
80008e04:	80 00       	ld.sh	r0,r0[0x0]
80008e06:	4a 6c       	lddpc	r12,80008e9c <dacsend+0x8c>
80008e08:	80 00       	ld.sh	r0,r0[0x0]
80008e0a:	27 40       	sub	r0,116
80008e0c:	80 00       	ld.sh	r0,r0[0x0]
80008e0e:	4a 50       	lddpc	r0,80008ea0 <dacsend+0x90>

80008e10 <dacsend>:
	spi_setupChipReg(SPARE_SPI, &spiOptions, TARGET_PBACLK_FREQ_HZ);
	spi_enable(SPARE_SPI);
}

void dacsend(unsigned char DACvoice, unsigned char DACnum, unsigned short DACval)
{
80008e10:	d4 21       	pushm	r4-r7,lr
80008e12:	18 95       	mov	r5,r12
80008e14:	16 96       	mov	r6,r11
80008e16:	14 94       	mov	r4,r10
	//send a value to one of the DAC channels to be converted to analog voltage
	//DACvoice is which of the polyphonic voices it should go to (not yet implemented) (channel number)
	//DACnum is which type of output it goes to (1 = A, 2 = V, 3 = B)

	SPIbusy = 1;
80008e18:	30 17       	mov	r7,1
80008e1a:	4b 78       	lddpc	r8,80008ef4 <dacsend+0xe4>
80008e1c:	b0 87       	st.b	r8[0x0],r7
	setSPI(spiOptions12DAC);
80008e1e:	4b 78       	lddpc	r8,80008ef8 <dacsend+0xe8>
80008e20:	20 4d       	sub	sp,16
80008e22:	f0 ea 00 00 	ld.d	r10,r8[0]
80008e26:	fa eb 00 00 	st.d	sp[0],r10
80008e2a:	f0 e8 00 08 	ld.d	r8,r8[8]
80008e2e:	fa e9 00 08 	st.d	sp[8],r8
80008e32:	f0 1f 00 33 	mcall	80008efc <dacsend+0xec>

	dacouthigh = (DACval >> 4) & 0xFF;
80008e36:	5c 74       	castu.h	r4
80008e38:	f3 d4 c0 88 	bfextu	r9,r4,0x4,0x8
80008e3c:	4b 18       	lddpc	r8,80008f00 <dacsend+0xf0>
80008e3e:	b0 09       	st.h	r8[0x0],r9
	dacoutlow = ((DACval << 4) & 0xF0);
80008e40:	e8 08 15 04 	lsl	r8,r4,0x4
80008e44:	e9 d8 c0 08 	bfextu	r4,r8,0x0,0x8
80008e48:	4a f8       	lddpc	r8,80008f04 <dacsend+0xf4>
80008e4a:	b0 04       	st.h	r8[0x0],r4

	if (DACnum == 1)
80008e4c:	2f cd       	sub	sp,-16
80008e4e:	ee 06 18 00 	cp.b	r6,r7
80008e52:	c2 51       	brne	80008e9c <dacsend+0x8c>
	{
		gpio_clr_gpio_pin(DAC2_CS);
80008e54:	36 9c       	mov	r12,105
80008e56:	f0 1f 00 2d 	mcall	80008f08 <dacsend+0xf8>
		dacwait1();
80008e5a:	f0 1f 00 2d 	mcall	80008f0c <dacsend+0xfc>
		while((spi_write(SPARE_SPI,DACvoice)) != 0);
80008e5e:	fe 77 24 00 	mov	r7,-56320
80008e62:	0a 9b       	mov	r11,r5
80008e64:	0e 9c       	mov	r12,r7
80008e66:	f0 1f 00 2b 	mcall	80008f10 <dacsend+0x100>
80008e6a:	cf c1       	brne	80008e62 <dacsend+0x52>
		while((spi_write(SPARE_SPI,dacouthigh)) !=0);
80008e6c:	4a 56       	lddpc	r6,80008f00 <dacsend+0xf0>
80008e6e:	fe 77 24 00 	mov	r7,-56320
80008e72:	8c 8b       	ld.uh	r11,r6[0x0]
80008e74:	0e 9c       	mov	r12,r7
80008e76:	f0 1f 00 27 	mcall	80008f10 <dacsend+0x100>
80008e7a:	cf c1       	brne	80008e72 <dacsend+0x62>
		while((spi_write(SPARE_SPI,dacoutlow)) != 0);
80008e7c:	4a 26       	lddpc	r6,80008f04 <dacsend+0xf4>
80008e7e:	fe 77 24 00 	mov	r7,-56320
80008e82:	8c 8b       	ld.uh	r11,r6[0x0]
80008e84:	0e 9c       	mov	r12,r7
80008e86:	f0 1f 00 23 	mcall	80008f10 <dacsend+0x100>
80008e8a:	cf c1       	brne	80008e82 <dacsend+0x72>
		dacwait2();
80008e8c:	f0 1f 00 22 	mcall	80008f14 <dacsend+0x104>
		gpio_set_gpio_pin(DAC2_CS);
80008e90:	36 9c       	mov	r12,105
80008e92:	f0 1f 00 22 	mcall	80008f18 <dacsend+0x108>
		dacwait1();
80008e96:	f0 1f 00 1e 	mcall	80008f0c <dacsend+0xfc>
80008e9a:	c2 88       	rjmp	80008eea <dacsend+0xda>
	}

	if (DACnum == 2)
80008e9c:	30 28       	mov	r8,2
80008e9e:	f0 06 18 00 	cp.b	r6,r8
80008ea2:	c2 41       	brne	80008eea <dacsend+0xda>
	{
		gpio_clr_gpio_pin(DAC3_CS);
80008ea4:	36 8c       	mov	r12,104
80008ea6:	f0 1f 00 19 	mcall	80008f08 <dacsend+0xf8>
		dacwait1();
80008eaa:	f0 1f 00 19 	mcall	80008f0c <dacsend+0xfc>
		while((spi_write(SPARE_SPI,DACvoice)) != 0);
80008eae:	fe 77 24 00 	mov	r7,-56320
80008eb2:	0a 9b       	mov	r11,r5
80008eb4:	0e 9c       	mov	r12,r7
80008eb6:	f0 1f 00 17 	mcall	80008f10 <dacsend+0x100>
80008eba:	cf c1       	brne	80008eb2 <dacsend+0xa2>
		while((spi_write(SPARE_SPI,dacouthigh)) !=0);
80008ebc:	49 16       	lddpc	r6,80008f00 <dacsend+0xf0>
80008ebe:	fe 77 24 00 	mov	r7,-56320
80008ec2:	8c 8b       	ld.uh	r11,r6[0x0]
80008ec4:	0e 9c       	mov	r12,r7
80008ec6:	f0 1f 00 13 	mcall	80008f10 <dacsend+0x100>
80008eca:	cf c1       	brne	80008ec2 <dacsend+0xb2>
		while((spi_write(SPARE_SPI,dacoutlow)) != 0);
80008ecc:	48 e6       	lddpc	r6,80008f04 <dacsend+0xf4>
80008ece:	fe 77 24 00 	mov	r7,-56320
80008ed2:	8c 8b       	ld.uh	r11,r6[0x0]
80008ed4:	0e 9c       	mov	r12,r7
80008ed6:	f0 1f 00 0f 	mcall	80008f10 <dacsend+0x100>
80008eda:	cf c1       	brne	80008ed2 <dacsend+0xc2>
		dacwait2();
80008edc:	f0 1f 00 0e 	mcall	80008f14 <dacsend+0x104>
		gpio_set_gpio_pin(DAC3_CS);
80008ee0:	36 8c       	mov	r12,104
80008ee2:	f0 1f 00 0e 	mcall	80008f18 <dacsend+0x108>
		dacwait1();
80008ee6:	f0 1f 00 0a 	mcall	80008f0c <dacsend+0xfc>
	}
	SPIbusy = 0;
80008eea:	30 09       	mov	r9,0
80008eec:	48 28       	lddpc	r8,80008ef4 <dacsend+0xe4>
80008eee:	b0 89       	st.b	r8[0x0],r9
}
80008ef0:	d8 22       	popm	r4-r7,pc
80008ef2:	00 00       	add	r0,r0
80008ef4:	00 00       	add	r0,r0
80008ef6:	0b ac       	ld.ub	r12,r5[0x2]
80008ef8:	00 00       	add	r0,r0
80008efa:	03 bc       	ld.ub	r12,r1[0x3]
80008efc:	80 00       	ld.sh	r0,r0[0x0]
80008efe:	8c 28       	ld.sh	r8,r6[0x4]
80008f00:	00 00       	add	r0,r0
80008f02:	0b ae       	ld.ub	lr,r5[0x2]
80008f04:	00 00       	add	r0,r0
80008f06:	0b b0       	ld.ub	r0,r5[0x3]
80008f08:	80 00       	ld.sh	r0,r0[0x0]
80008f0a:	4a 6c       	lddpc	r12,80008fa0 <DACsetup+0x84>
80008f0c:	80 00       	ld.sh	r0,r0[0x0]
80008f0e:	8c 00       	ld.sh	r0,r6[0x0]
80008f10:	80 00       	ld.sh	r0,r0[0x0]
80008f12:	27 40       	sub	r0,116
80008f14:	80 00       	ld.sh	r0,r0[0x0]
80008f16:	8b d8       	st.w	r5[0x34],r8
80008f18:	80 00       	ld.sh	r0,r0[0x0]
80008f1a:	4a 50       	lddpc	r0,80008fac <DACsetup+0x90>

80008f1c <DACsetup>:
		USB_USBTask();
	}
}

void DACsetup(void)
{
80008f1c:	d4 01       	pushm	lr
	//let the portamento interrupt know the SPI is busy
	SPIbusy = 1;
80008f1e:	30 19       	mov	r9,1
80008f20:	4b 18       	lddpc	r8,80008fe4 <DACsetup+0xc8>
80008f22:	b0 89       	st.b	r8[0x0],r9
	
	setSPI(spiOptions12DAC);
80008f24:	4b 18       	lddpc	r8,80008fe8 <DACsetup+0xcc>
80008f26:	20 4d       	sub	sp,16
80008f28:	f0 ea 00 00 	ld.d	r10,r8[0]
80008f2c:	fa eb 00 00 	st.d	sp[0],r10
80008f30:	f0 e8 00 08 	ld.d	r8,r8[8]
80008f34:	fa e9 00 08 	st.d	sp[8],r8
80008f38:	f0 1f 00 2d 	mcall	80008fec <DACsetup+0xd0>

	gpio_clr_gpio_pin(DAC2_CS);
80008f3c:	36 9c       	mov	r12,105
80008f3e:	f0 1f 00 2d 	mcall	80008ff0 <DACsetup+0xd4>
	dacwait1();
80008f42:	f0 1f 00 2d 	mcall	80008ff4 <DACsetup+0xd8>
	dacwait1();
80008f46:	f0 1f 00 2c 	mcall	80008ff4 <DACsetup+0xd8>
	dacwait1();
80008f4a:	f0 1f 00 2b 	mcall	80008ff4 <DACsetup+0xd8>
	spi_write(SPARE_SPI,0x30);
80008f4e:	33 0b       	mov	r11,48
80008f50:	fe 7c 24 00 	mov	r12,-56320
80008f54:	f0 1f 00 29 	mcall	80008ff8 <DACsetup+0xdc>
	spi_write(SPARE_SPI,0x00);
80008f58:	30 0b       	mov	r11,0
80008f5a:	fe 7c 24 00 	mov	r12,-56320
80008f5e:	f0 1f 00 27 	mcall	80008ff8 <DACsetup+0xdc>
	spi_write(SPARE_SPI,0x0F);
80008f62:	30 fb       	mov	r11,15
80008f64:	fe 7c 24 00 	mov	r12,-56320
80008f68:	f0 1f 00 24 	mcall	80008ff8 <DACsetup+0xdc>
	dacwait2();
80008f6c:	f0 1f 00 24 	mcall	80008ffc <DACsetup+0xe0>
	dacwait2();
80008f70:	f0 1f 00 23 	mcall	80008ffc <DACsetup+0xe0>
	dacwait2();
80008f74:	f0 1f 00 22 	mcall	80008ffc <DACsetup+0xe0>
	dacwait2();
80008f78:	f0 1f 00 21 	mcall	80008ffc <DACsetup+0xe0>
	gpio_set_gpio_pin(DAC2_CS);
80008f7c:	36 9c       	mov	r12,105
80008f7e:	f0 1f 00 21 	mcall	80009000 <DACsetup+0xe4>
	dacwait1();
80008f82:	f0 1f 00 1d 	mcall	80008ff4 <DACsetup+0xd8>
	dacwait1();
80008f86:	f0 1f 00 1c 	mcall	80008ff4 <DACsetup+0xd8>
	dacwait1();
80008f8a:	f0 1f 00 1b 	mcall	80008ff4 <DACsetup+0xd8>

	gpio_clr_gpio_pin(DAC3_CS);
80008f8e:	36 8c       	mov	r12,104
80008f90:	f0 1f 00 18 	mcall	80008ff0 <DACsetup+0xd4>
	dacwait1();
80008f94:	f0 1f 00 18 	mcall	80008ff4 <DACsetup+0xd8>
	dacwait1();
80008f98:	f0 1f 00 17 	mcall	80008ff4 <DACsetup+0xd8>
	dacwait1();
80008f9c:	f0 1f 00 16 	mcall	80008ff4 <DACsetup+0xd8>
	spi_write(SPARE_SPI,0x30);
80008fa0:	33 0b       	mov	r11,48
80008fa2:	fe 7c 24 00 	mov	r12,-56320
80008fa6:	f0 1f 00 15 	mcall	80008ff8 <DACsetup+0xdc>
	spi_write(SPARE_SPI,0x00);
80008faa:	30 0b       	mov	r11,0
80008fac:	fe 7c 24 00 	mov	r12,-56320
80008fb0:	f0 1f 00 12 	mcall	80008ff8 <DACsetup+0xdc>
	spi_write(SPARE_SPI,0x0F);
80008fb4:	30 fb       	mov	r11,15
80008fb6:	fe 7c 24 00 	mov	r12,-56320
80008fba:	f0 1f 00 10 	mcall	80008ff8 <DACsetup+0xdc>
	dacwait2();
80008fbe:	f0 1f 00 10 	mcall	80008ffc <DACsetup+0xe0>
	dacwait2();
80008fc2:	f0 1f 00 0f 	mcall	80008ffc <DACsetup+0xe0>
	dacwait2();
80008fc6:	f0 1f 00 0e 	mcall	80008ffc <DACsetup+0xe0>
	dacwait2();
80008fca:	f0 1f 00 0d 	mcall	80008ffc <DACsetup+0xe0>
	gpio_set_gpio_pin(DAC3_CS);
80008fce:	36 8c       	mov	r12,104
80008fd0:	f0 1f 00 0c 	mcall	80009000 <DACsetup+0xe4>
	dacwait1();
80008fd4:	f0 1f 00 08 	mcall	80008ff4 <DACsetup+0xd8>
	dacwait1();
80008fd8:	f0 1f 00 07 	mcall	80008ff4 <DACsetup+0xd8>
	dacwait1();
80008fdc:	f0 1f 00 06 	mcall	80008ff4 <DACsetup+0xd8>
80008fe0:	2f cd       	sub	sp,-16
}
80008fe2:	d8 02       	popm	pc
80008fe4:	00 00       	add	r0,r0
80008fe6:	0b ac       	ld.ub	r12,r5[0x2]
80008fe8:	00 00       	add	r0,r0
80008fea:	03 bc       	ld.ub	r12,r1[0x3]
80008fec:	80 00       	ld.sh	r0,r0[0x0]
80008fee:	8c 28       	ld.sh	r8,r6[0x4]
80008ff0:	80 00       	ld.sh	r0,r0[0x0]
80008ff2:	4a 6c       	lddpc	r12,80009088 <main+0x84>
80008ff4:	80 00       	ld.sh	r0,r0[0x0]
80008ff6:	8c 00       	ld.sh	r0,r6[0x0]
80008ff8:	80 00       	ld.sh	r0,r0[0x0]
80008ffa:	27 40       	sub	r0,116
80008ffc:	80 00       	ld.sh	r0,r0[0x0]
80008ffe:	8b d8       	st.w	r5[0x34],r8
80009000:	80 00       	ld.sh	r0,r0[0x0]
80009002:	4a 50       	lddpc	r0,80009094 <main+0x90>

80009004 <main>:
unsigned short DAC1outlow = 0;
unsigned char SPIbusy = 0;

/*! \brief Main function. Execution starts here.
 */
int main(void){
80009004:	d4 21       	pushm	r4-r7,lr
#if SAMD21 || SAML21 || SAMDA1
	system_init();
#else
	sysclk_init();
80009006:	f0 1f 00 53 	mcall	80009150 <main+0x14c>
	board_init();
8000900a:	f0 1f 00 53 	mcall	80009154 <main+0x150>
#endif
	irq_initialize_vectors();
8000900e:	f0 1f 00 53 	mcall	80009158 <main+0x154>
	cpu_irq_enable();
80009012:	d5 03       	csrf	0x10
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
80009014:	4d 28       	lddpc	r8,8000915c <main+0x158>
80009016:	30 09       	mov	r9,0
80009018:	b0 89       	st.b	r8[0x0],r9
8000901a:	b0 99       	st.b	r8[0x1],r9
8000901c:	b0 a9       	st.b	r8[0x2],r9
8000901e:	b0 b9       	st.b	r8[0x3],r9
80009020:	b0 c9       	st.b	r8[0x4],r9
80009022:	b0 d9       	st.b	r8[0x5],r9
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
80009024:	30 19       	mov	r9,1
80009026:	b0 e9       	st.b	r8[0x6],r9

	// Initialize the sleep manager
	sleepmgr_init();

	ui_init();
80009028:	f0 1f 00 4e 	mcall	80009160 <main+0x15c>
	//initGates();

	// Initialize as master
	
	//Initialize SPI for the Display, DIP204
	spi_initMaster(DIP204_SPI, &DIP_spiOptions);
8000902c:	4c e7       	lddpc	r7,80009164 <main+0x160>
8000902e:	0e 9b       	mov	r11,r7
80009030:	fe 7c 28 00 	mov	r12,-55296
80009034:	f0 1f 00 4d 	mcall	80009168 <main+0x164>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
80009038:	30 09       	mov	r9,0
8000903a:	12 9a       	mov	r10,r9
8000903c:	12 9b       	mov	r11,r9
8000903e:	fe 7c 28 00 	mov	r12,-55296
80009042:	f0 1f 00 4b 	mcall	8000916c <main+0x168>
	spi_selectChip(DIP204_SPI,0);
80009046:	30 0b       	mov	r11,0
80009048:	fe 7c 28 00 	mov	r12,-55296
8000904c:	f0 1f 00 49 	mcall	80009170 <main+0x16c>
	spi_setupChipReg(DIP204_SPI, &DIP_spiOptions, FOSC0);
80009050:	e0 6a 1b 00 	mov	r10,6912
80009054:	ea 1a 00 b7 	orh	r10,0xb7
80009058:	0e 9b       	mov	r11,r7
8000905a:	fe 7c 28 00 	mov	r12,-55296
8000905e:	f0 1f 00 46 	mcall	80009174 <main+0x170>
	spi_enable(DIP204_SPI);
80009062:	fe 7c 28 00 	mov	r12,-55296
80009066:	f0 1f 00 45 	mcall	80009178 <main+0x174>
	
	dip204_init(backlight_PWM, true);
8000906a:	30 1b       	mov	r11,1
8000906c:	16 9c       	mov	r12,r11
8000906e:	f0 1f 00 44 	mcall	8000917c <main+0x178>
	dip204_clear_display();
80009072:	f0 1f 00 44 	mcall	80009180 <main+0x17c>
	//initialize the SPI bus for DAC
	initSPIbus();
80009076:	f0 1f 00 44 	mcall	80009184 <main+0x180>
	
	//send the messages to the DACs to make them update without software LDAC feature
	DACsetup();
8000907a:	f0 1f 00 44 	mcall	80009188 <main+0x184>
	
	// Start USB host stack
	uhc_start();
8000907e:	f0 1f 00 44 	mcall	8000918c <main+0x188>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
80009082:	4b 76       	lddpc	r6,8000915c <main+0x158>
80009084:	30 07       	mov	r7,0
80009086:	30 04       	mov	r4,0
	// The USB management is entirely managed by interrupts.
	// As a consequence, the user application does only have to play with the power modes.
	
	while (true) {	
		sleepmgr_enter_sleep();
		MIDI_Host_USBTask(&Keyboard_MIDI_Interface);
80009088:	4c 25       	lddpc	r5,80009190 <main+0x18c>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
8000908a:	d3 03       	ssrf	0x10

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000908c:	0d 88       	ld.ub	r8,r6[0x0]
8000908e:	ee 08 18 00 	cp.b	r8,r7
80009092:	c0 b1       	brne	800090a8 <main+0xa4>
80009094:	08 99       	mov	r9,r4
80009096:	0c 98       	mov	r8,r6
		lock_ptr++;
80009098:	2f f8       	sub	r8,-1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
8000909a:	2f f9       	sub	r9,-1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000909c:	11 8a       	ld.ub	r10,r8[0x0]
8000909e:	ee 0a 18 00 	cp.b	r10,r7
800090a2:	cf b0       	breq	80009098 <main+0x94>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
800090a4:	58 09       	cp.w	r9,0
800090a6:	c0 31       	brne	800090ac <main+0xa8>
		cpu_irq_enable();
800090a8:	d5 03       	csrf	0x10
800090aa:	c4 d8       	rjmp	80009144 <main+0x140>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
800090ac:	d3 03       	ssrf	0x10
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
	switch (sleep_mode) {
800090ae:	20 19       	sub	r9,1
800090b0:	a7 b9       	sbr	r9,0x7
800090b2:	58 59       	cp.w	r9,5
800090b4:	c4 30       	breq	8000913a <main+0x136>
800090b6:	e0 89 00 10 	brgt	800090d6 <main+0xd2>
800090ba:	58 29       	cp.w	r9,2
800090bc:	c2 d0       	breq	80009116 <main+0x112>
800090be:	e0 89 00 07 	brgt	800090cc <main+0xc8>
800090c2:	58 09       	cp.w	r9,0
800090c4:	c1 d0       	breq	800090fe <main+0xfa>
800090c6:	58 19       	cp.w	r9,1
800090c8:	c3 e1       	brne	80009144 <main+0x140>
800090ca:	c2 08       	rjmp	8000910a <main+0x106>
800090cc:	58 39       	cp.w	r9,3
800090ce:	c2 a0       	breq	80009122 <main+0x11e>
800090d0:	58 49       	cp.w	r9,4
800090d2:	c3 91       	brne	80009144 <main+0x140>
800090d4:	c2 d8       	rjmp	8000912e <main+0x12a>
800090d6:	e0 49 00 82 	cp.w	r9,130
800090da:	c2 10       	breq	8000911c <main+0x118>
800090dc:	e0 89 00 09 	brgt	800090ee <main+0xea>
800090e0:	e0 49 00 80 	cp.w	r9,128
800090e4:	c1 00       	breq	80009104 <main+0x100>
800090e6:	e0 49 00 81 	cp.w	r9,129
800090ea:	c2 d1       	brne	80009144 <main+0x140>
800090ec:	c1 28       	rjmp	80009110 <main+0x10c>
800090ee:	e0 49 00 84 	cp.w	r9,132
800090f2:	c2 10       	breq	80009134 <main+0x130>
800090f4:	c1 a5       	brlt	80009128 <main+0x124>
800090f6:	e0 49 00 85 	cp.w	r9,133
800090fa:	c2 51       	brne	80009144 <main+0x140>
800090fc:	c2 28       	rjmp	80009140 <main+0x13c>
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
800090fe:	e9 b0 00 00 	sleep	0x0
80009102:	c2 18       	rjmp	80009144 <main+0x140>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
80009104:	e9 b0 00 80 	sleep	0x80
80009108:	c1 e8       	rjmp	80009144 <main+0x140>
		break;
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
8000910a:	e9 b0 00 01 	sleep	0x1
8000910e:	c1 b8       	rjmp	80009144 <main+0x140>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
80009110:	e9 b0 00 81 	sleep	0x81
80009114:	c1 88       	rjmp	80009144 <main+0x140>
		break;
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
80009116:	e9 b0 00 02 	sleep	0x2
8000911a:	c1 58       	rjmp	80009144 <main+0x140>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
8000911c:	e9 b0 00 82 	sleep	0x82
80009120:	c1 28       	rjmp	80009144 <main+0x140>
		break;
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
80009122:	e9 b0 00 03 	sleep	0x3
80009126:	c0 f8       	rjmp	80009144 <main+0x140>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
80009128:	e9 b0 00 83 	sleep	0x83
8000912c:	c0 c8       	rjmp	80009144 <main+0x140>
		break;
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
8000912e:	e9 b0 00 04 	sleep	0x4
80009132:	c0 98       	rjmp	80009144 <main+0x140>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
80009134:	e9 b0 00 84 	sleep	0x84
80009138:	c0 68       	rjmp	80009144 <main+0x140>
		break;
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
8000913a:	e9 b0 00 05 	sleep	0x5
8000913e:	c0 38       	rjmp	80009144 <main+0x140>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
80009140:	e9 b0 00 85 	sleep	0x85
80009144:	0a 9c       	mov	r12,r5
80009146:	f0 1f 00 14 	mcall	80009194 <main+0x190>
		USB_USBTask();
8000914a:	f0 1f 00 14 	mcall	80009198 <main+0x194>
	}
8000914e:	c9 eb       	rjmp	8000908a <main+0x86>
80009150:	80 00       	ld.sh	r0,r0[0x0]
80009152:	74 94       	ld.w	r4,r10[0x24]
80009154:	80 00       	ld.sh	r0,r0[0x0]
80009156:	46 44       	lddsp	r4,sp[0x190]
80009158:	80 00       	ld.sh	r0,r0[0x0]
8000915a:	4b 7c       	lddpc	r12,80009234 <_malloc_r+0x78>
8000915c:	00 00       	add	r0,r0
8000915e:	0c 68       	and	r8,r6
80009160:	80 00       	ld.sh	r0,r0[0x0]
80009162:	42 ac       	lddsp	r12,sp[0xa8]
80009164:	00 00       	add	r0,r0
80009166:	03 dc       	ld.ub	r12,r1[0x5]
80009168:	80 00       	ld.sh	r0,r0[0x0]
8000916a:	25 a6       	sub	r6,90
8000916c:	80 00       	ld.sh	r0,r0[0x0]
8000916e:	25 de       	sub	lr,93
80009170:	80 00       	ld.sh	r0,r0[0x0]
80009172:	26 0a       	sub	r10,96
80009174:	80 00       	ld.sh	r0,r0[0x0]
80009176:	26 7c       	sub	r12,103
80009178:	80 00       	ld.sh	r0,r0[0x0]
8000917a:	27 34       	sub	r4,115
8000917c:	80 00       	ld.sh	r0,r0[0x0]
8000917e:	22 d0       	sub	r0,45
80009180:	80 00       	ld.sh	r0,r0[0x0]
80009182:	22 74       	sub	r4,39
80009184:	80 00       	ld.sh	r0,r0[0x0]
80009186:	8c 98       	ld.uh	r8,r6[0x2]
80009188:	80 00       	ld.sh	r0,r0[0x0]
8000918a:	8f 1c       	st.w	r7[0x4],r12
8000918c:	80 00       	ld.sh	r0,r0[0x0]
8000918e:	84 c8       	ld.uh	r8,r2[0x8]
80009190:	00 00       	add	r0,r0
80009192:	03 ec       	ld.ub	r12,r1[0x6]
80009194:	80 00       	ld.sh	r0,r0[0x0]
80009196:	8b 48       	st.w	r5[0x10],r8
80009198:	80 00       	ld.sh	r0,r0[0x0]
8000919a:	34 ec       	mov	r12,78

8000919c <free>:
8000919c:	d4 01       	pushm	lr
8000919e:	e0 68 09 00 	mov	r8,2304
800091a2:	18 9b       	mov	r11,r12
800091a4:	70 0c       	ld.w	r12,r8[0x0]
800091a6:	e0 a0 03 c1 	rcall	80009928 <_free_r>
800091aa:	d8 02       	popm	pc

800091ac <malloc>:
800091ac:	d4 01       	pushm	lr
800091ae:	e0 68 09 00 	mov	r8,2304
800091b2:	18 9b       	mov	r11,r12
800091b4:	70 0c       	ld.w	r12,r8[0x0]
800091b6:	c0 3c       	rcall	800091bc <_malloc_r>
800091b8:	d8 02       	popm	pc
800091ba:	d7 03       	nop

800091bc <_malloc_r>:
800091bc:	d4 31       	pushm	r0-r7,lr
800091be:	f6 c8 ff f5 	sub	r8,r11,-11
800091c2:	18 95       	mov	r5,r12
800091c4:	10 97       	mov	r7,r8
800091c6:	e0 17 ff f8 	andl	r7,0xfff8
800091ca:	59 68       	cp.w	r8,22
800091cc:	f9 b7 08 10 	movls	r7,16
800091d0:	16 37       	cp.w	r7,r11
800091d2:	5f 38       	srlo	r8
800091d4:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800091d8:	c0 50       	breq	800091e2 <_malloc_r+0x26>
800091da:	30 c8       	mov	r8,12
800091dc:	99 38       	st.w	r12[0xc],r8
800091de:	e0 8f 01 f4 	bral	800095c6 <_malloc_r+0x40a>
800091e2:	e0 a0 02 a5 	rcall	8000972c <__malloc_lock>
800091e6:	e0 47 01 f7 	cp.w	r7,503
800091ea:	e0 8b 00 1d 	brhi	80009224 <_malloc_r+0x68>
800091ee:	ee 03 16 03 	lsr	r3,r7,0x3
800091f2:	e0 68 04 00 	mov	r8,1024
800091f6:	f0 03 00 38 	add	r8,r8,r3<<0x3
800091fa:	70 36       	ld.w	r6,r8[0xc]
800091fc:	10 36       	cp.w	r6,r8
800091fe:	c0 61       	brne	8000920a <_malloc_r+0x4e>
80009200:	ec c8 ff f8 	sub	r8,r6,-8
80009204:	70 36       	ld.w	r6,r8[0xc]
80009206:	10 36       	cp.w	r6,r8
80009208:	c0 c0       	breq	80009220 <_malloc_r+0x64>
8000920a:	6c 18       	ld.w	r8,r6[0x4]
8000920c:	e0 18 ff fc 	andl	r8,0xfffc
80009210:	6c 3a       	ld.w	r10,r6[0xc]
80009212:	ec 08 00 09 	add	r9,r6,r8
80009216:	0a 9c       	mov	r12,r5
80009218:	6c 28       	ld.w	r8,r6[0x8]
8000921a:	95 28       	st.w	r10[0x8],r8
8000921c:	91 3a       	st.w	r8[0xc],r10
8000921e:	c4 78       	rjmp	800092ac <_malloc_r+0xf0>
80009220:	2f e3       	sub	r3,-2
80009222:	c4 d8       	rjmp	800092bc <_malloc_r+0x100>
80009224:	ee 03 16 09 	lsr	r3,r7,0x9
80009228:	c0 41       	brne	80009230 <_malloc_r+0x74>
8000922a:	ee 03 16 03 	lsr	r3,r7,0x3
8000922e:	c2 68       	rjmp	8000927a <_malloc_r+0xbe>
80009230:	58 43       	cp.w	r3,4
80009232:	e0 8b 00 06 	brhi	8000923e <_malloc_r+0x82>
80009236:	ee 03 16 06 	lsr	r3,r7,0x6
8000923a:	2c 83       	sub	r3,-56
8000923c:	c1 f8       	rjmp	8000927a <_malloc_r+0xbe>
8000923e:	59 43       	cp.w	r3,20
80009240:	e0 8b 00 04 	brhi	80009248 <_malloc_r+0x8c>
80009244:	2a 53       	sub	r3,-91
80009246:	c1 a8       	rjmp	8000927a <_malloc_r+0xbe>
80009248:	e0 43 00 54 	cp.w	r3,84
8000924c:	e0 8b 00 06 	brhi	80009258 <_malloc_r+0x9c>
80009250:	ee 03 16 0c 	lsr	r3,r7,0xc
80009254:	29 23       	sub	r3,-110
80009256:	c1 28       	rjmp	8000927a <_malloc_r+0xbe>
80009258:	e0 43 01 54 	cp.w	r3,340
8000925c:	e0 8b 00 06 	brhi	80009268 <_malloc_r+0xac>
80009260:	ee 03 16 0f 	lsr	r3,r7,0xf
80009264:	28 93       	sub	r3,-119
80009266:	c0 a8       	rjmp	8000927a <_malloc_r+0xbe>
80009268:	e0 43 05 54 	cp.w	r3,1364
8000926c:	e0 88 00 04 	brls	80009274 <_malloc_r+0xb8>
80009270:	37 e3       	mov	r3,126
80009272:	c0 48       	rjmp	8000927a <_malloc_r+0xbe>
80009274:	ee 03 16 12 	lsr	r3,r7,0x12
80009278:	28 43       	sub	r3,-124
8000927a:	e0 6a 04 00 	mov	r10,1024
8000927e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80009282:	74 36       	ld.w	r6,r10[0xc]
80009284:	c1 98       	rjmp	800092b6 <_malloc_r+0xfa>
80009286:	6c 19       	ld.w	r9,r6[0x4]
80009288:	e0 19 ff fc 	andl	r9,0xfffc
8000928c:	f2 07 01 0b 	sub	r11,r9,r7
80009290:	58 fb       	cp.w	r11,15
80009292:	e0 8a 00 04 	brle	8000929a <_malloc_r+0xde>
80009296:	20 13       	sub	r3,1
80009298:	c1 18       	rjmp	800092ba <_malloc_r+0xfe>
8000929a:	6c 38       	ld.w	r8,r6[0xc]
8000929c:	58 0b       	cp.w	r11,0
8000929e:	c0 b5       	brlt	800092b4 <_malloc_r+0xf8>
800092a0:	6c 2a       	ld.w	r10,r6[0x8]
800092a2:	ec 09 00 09 	add	r9,r6,r9
800092a6:	0a 9c       	mov	r12,r5
800092a8:	91 2a       	st.w	r8[0x8],r10
800092aa:	95 38       	st.w	r10[0xc],r8
800092ac:	72 18       	ld.w	r8,r9[0x4]
800092ae:	a1 a8       	sbr	r8,0x0
800092b0:	93 18       	st.w	r9[0x4],r8
800092b2:	cb c8       	rjmp	8000942a <_malloc_r+0x26e>
800092b4:	10 96       	mov	r6,r8
800092b6:	14 36       	cp.w	r6,r10
800092b8:	ce 71       	brne	80009286 <_malloc_r+0xca>
800092ba:	2f f3       	sub	r3,-1
800092bc:	e0 6a 04 00 	mov	r10,1024
800092c0:	f4 cc ff f8 	sub	r12,r10,-8
800092c4:	78 26       	ld.w	r6,r12[0x8]
800092c6:	18 36       	cp.w	r6,r12
800092c8:	c6 c0       	breq	800093a0 <_malloc_r+0x1e4>
800092ca:	6c 19       	ld.w	r9,r6[0x4]
800092cc:	e0 19 ff fc 	andl	r9,0xfffc
800092d0:	f2 07 01 08 	sub	r8,r9,r7
800092d4:	58 f8       	cp.w	r8,15
800092d6:	e0 89 00 8f 	brgt	800093f4 <_malloc_r+0x238>
800092da:	99 3c       	st.w	r12[0xc],r12
800092dc:	99 2c       	st.w	r12[0x8],r12
800092de:	58 08       	cp.w	r8,0
800092e0:	c0 55       	brlt	800092ea <_malloc_r+0x12e>
800092e2:	ec 09 00 09 	add	r9,r6,r9
800092e6:	0a 9c       	mov	r12,r5
800092e8:	ce 2b       	rjmp	800092ac <_malloc_r+0xf0>
800092ea:	e0 49 01 ff 	cp.w	r9,511
800092ee:	e0 8b 00 13 	brhi	80009314 <_malloc_r+0x158>
800092f2:	a3 99       	lsr	r9,0x3
800092f4:	f4 09 00 38 	add	r8,r10,r9<<0x3
800092f8:	70 2b       	ld.w	r11,r8[0x8]
800092fa:	8d 38       	st.w	r6[0xc],r8
800092fc:	8d 2b       	st.w	r6[0x8],r11
800092fe:	97 36       	st.w	r11[0xc],r6
80009300:	91 26       	st.w	r8[0x8],r6
80009302:	a3 49       	asr	r9,0x2
80009304:	74 18       	ld.w	r8,r10[0x4]
80009306:	30 1b       	mov	r11,1
80009308:	f6 09 09 49 	lsl	r9,r11,r9
8000930c:	f1 e9 10 09 	or	r9,r8,r9
80009310:	95 19       	st.w	r10[0x4],r9
80009312:	c4 78       	rjmp	800093a0 <_malloc_r+0x1e4>
80009314:	f2 0a 16 09 	lsr	r10,r9,0x9
80009318:	58 4a       	cp.w	r10,4
8000931a:	e0 8b 00 07 	brhi	80009328 <_malloc_r+0x16c>
8000931e:	f2 0a 16 06 	lsr	r10,r9,0x6
80009322:	2c 8a       	sub	r10,-56
80009324:	c2 08       	rjmp	80009364 <_malloc_r+0x1a8>
80009326:	d7 03       	nop
80009328:	59 4a       	cp.w	r10,20
8000932a:	e0 8b 00 04 	brhi	80009332 <_malloc_r+0x176>
8000932e:	2a 5a       	sub	r10,-91
80009330:	c1 a8       	rjmp	80009364 <_malloc_r+0x1a8>
80009332:	e0 4a 00 54 	cp.w	r10,84
80009336:	e0 8b 00 06 	brhi	80009342 <_malloc_r+0x186>
8000933a:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000933e:	29 2a       	sub	r10,-110
80009340:	c1 28       	rjmp	80009364 <_malloc_r+0x1a8>
80009342:	e0 4a 01 54 	cp.w	r10,340
80009346:	e0 8b 00 06 	brhi	80009352 <_malloc_r+0x196>
8000934a:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000934e:	28 9a       	sub	r10,-119
80009350:	c0 a8       	rjmp	80009364 <_malloc_r+0x1a8>
80009352:	e0 4a 05 54 	cp.w	r10,1364
80009356:	e0 88 00 04 	brls	8000935e <_malloc_r+0x1a2>
8000935a:	37 ea       	mov	r10,126
8000935c:	c0 48       	rjmp	80009364 <_malloc_r+0x1a8>
8000935e:	f2 0a 16 12 	lsr	r10,r9,0x12
80009362:	28 4a       	sub	r10,-124
80009364:	e0 6b 04 00 	mov	r11,1024
80009368:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000936c:	68 28       	ld.w	r8,r4[0x8]
8000936e:	08 38       	cp.w	r8,r4
80009370:	c0 e1       	brne	8000938c <_malloc_r+0x1d0>
80009372:	76 19       	ld.w	r9,r11[0x4]
80009374:	a3 4a       	asr	r10,0x2
80009376:	30 1e       	mov	lr,1
80009378:	fc 0a 09 4a 	lsl	r10,lr,r10
8000937c:	f3 ea 10 0a 	or	r10,r9,r10
80009380:	10 99       	mov	r9,r8
80009382:	97 1a       	st.w	r11[0x4],r10
80009384:	c0 a8       	rjmp	80009398 <_malloc_r+0x1dc>
80009386:	70 28       	ld.w	r8,r8[0x8]
80009388:	08 38       	cp.w	r8,r4
8000938a:	c0 60       	breq	80009396 <_malloc_r+0x1da>
8000938c:	70 1a       	ld.w	r10,r8[0x4]
8000938e:	e0 1a ff fc 	andl	r10,0xfffc
80009392:	14 39       	cp.w	r9,r10
80009394:	cf 93       	brcs	80009386 <_malloc_r+0x1ca>
80009396:	70 39       	ld.w	r9,r8[0xc]
80009398:	8d 39       	st.w	r6[0xc],r9
8000939a:	8d 28       	st.w	r6[0x8],r8
8000939c:	91 36       	st.w	r8[0xc],r6
8000939e:	93 26       	st.w	r9[0x8],r6
800093a0:	e6 08 14 02 	asr	r8,r3,0x2
800093a4:	30 1b       	mov	r11,1
800093a6:	e0 64 04 00 	mov	r4,1024
800093aa:	f6 08 09 4b 	lsl	r11,r11,r8
800093ae:	68 18       	ld.w	r8,r4[0x4]
800093b0:	10 3b       	cp.w	r11,r8
800093b2:	e0 8b 00 69 	brhi	80009484 <_malloc_r+0x2c8>
800093b6:	f7 e8 00 09 	and	r9,r11,r8
800093ba:	c0 b1       	brne	800093d0 <_malloc_r+0x214>
800093bc:	e0 13 ff fc 	andl	r3,0xfffc
800093c0:	a1 7b       	lsl	r11,0x1
800093c2:	2f c3       	sub	r3,-4
800093c4:	c0 38       	rjmp	800093ca <_malloc_r+0x20e>
800093c6:	2f c3       	sub	r3,-4
800093c8:	a1 7b       	lsl	r11,0x1
800093ca:	f7 e8 00 09 	and	r9,r11,r8
800093ce:	cf c0       	breq	800093c6 <_malloc_r+0x20a>
800093d0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800093d4:	06 92       	mov	r2,r3
800093d6:	1c 91       	mov	r1,lr
800093d8:	62 36       	ld.w	r6,r1[0xc]
800093da:	c2 d8       	rjmp	80009434 <_malloc_r+0x278>
800093dc:	6c 1a       	ld.w	r10,r6[0x4]
800093de:	e0 1a ff fc 	andl	r10,0xfffc
800093e2:	f4 07 01 08 	sub	r8,r10,r7
800093e6:	58 f8       	cp.w	r8,15
800093e8:	e0 8a 00 15 	brle	80009412 <_malloc_r+0x256>
800093ec:	6c 3a       	ld.w	r10,r6[0xc]
800093ee:	6c 29       	ld.w	r9,r6[0x8]
800093f0:	95 29       	st.w	r10[0x8],r9
800093f2:	93 3a       	st.w	r9[0xc],r10
800093f4:	0e 99       	mov	r9,r7
800093f6:	ec 07 00 07 	add	r7,r6,r7
800093fa:	a1 a9       	sbr	r9,0x0
800093fc:	99 37       	st.w	r12[0xc],r7
800093fe:	99 27       	st.w	r12[0x8],r7
80009400:	8d 19       	st.w	r6[0x4],r9
80009402:	ee 08 09 08 	st.w	r7[r8],r8
80009406:	8f 2c       	st.w	r7[0x8],r12
80009408:	8f 3c       	st.w	r7[0xc],r12
8000940a:	a1 a8       	sbr	r8,0x0
8000940c:	0a 9c       	mov	r12,r5
8000940e:	8f 18       	st.w	r7[0x4],r8
80009410:	c0 d8       	rjmp	8000942a <_malloc_r+0x26e>
80009412:	6c 39       	ld.w	r9,r6[0xc]
80009414:	58 08       	cp.w	r8,0
80009416:	c0 e5       	brlt	80009432 <_malloc_r+0x276>
80009418:	ec 0a 00 0a 	add	r10,r6,r10
8000941c:	74 18       	ld.w	r8,r10[0x4]
8000941e:	a1 a8       	sbr	r8,0x0
80009420:	0a 9c       	mov	r12,r5
80009422:	95 18       	st.w	r10[0x4],r8
80009424:	6c 28       	ld.w	r8,r6[0x8]
80009426:	93 28       	st.w	r9[0x8],r8
80009428:	91 39       	st.w	r8[0xc],r9
8000942a:	c8 2d       	rcall	8000972e <__malloc_unlock>
8000942c:	ec cc ff f8 	sub	r12,r6,-8
80009430:	d8 32       	popm	r0-r7,pc
80009432:	12 96       	mov	r6,r9
80009434:	02 36       	cp.w	r6,r1
80009436:	cd 31       	brne	800093dc <_malloc_r+0x220>
80009438:	2f f2       	sub	r2,-1
8000943a:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000943e:	c0 30       	breq	80009444 <_malloc_r+0x288>
80009440:	2f 81       	sub	r1,-8
80009442:	cc bb       	rjmp	800093d8 <_malloc_r+0x21c>
80009444:	1c 98       	mov	r8,lr
80009446:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000944a:	c0 81       	brne	8000945a <_malloc_r+0x29e>
8000944c:	68 19       	ld.w	r9,r4[0x4]
8000944e:	f6 08 11 ff 	rsub	r8,r11,-1
80009452:	f3 e8 00 08 	and	r8,r9,r8
80009456:	89 18       	st.w	r4[0x4],r8
80009458:	c0 78       	rjmp	80009466 <_malloc_r+0x2aa>
8000945a:	f0 c9 00 08 	sub	r9,r8,8
8000945e:	20 13       	sub	r3,1
80009460:	70 08       	ld.w	r8,r8[0x0]
80009462:	12 38       	cp.w	r8,r9
80009464:	cf 10       	breq	80009446 <_malloc_r+0x28a>
80009466:	a1 7b       	lsl	r11,0x1
80009468:	68 18       	ld.w	r8,r4[0x4]
8000946a:	10 3b       	cp.w	r11,r8
8000946c:	e0 8b 00 0c 	brhi	80009484 <_malloc_r+0x2c8>
80009470:	58 0b       	cp.w	r11,0
80009472:	c0 90       	breq	80009484 <_malloc_r+0x2c8>
80009474:	04 93       	mov	r3,r2
80009476:	c0 38       	rjmp	8000947c <_malloc_r+0x2c0>
80009478:	2f c3       	sub	r3,-4
8000947a:	a1 7b       	lsl	r11,0x1
8000947c:	f7 e8 00 09 	and	r9,r11,r8
80009480:	ca 81       	brne	800093d0 <_malloc_r+0x214>
80009482:	cf bb       	rjmp	80009478 <_malloc_r+0x2bc>
80009484:	68 23       	ld.w	r3,r4[0x8]
80009486:	66 12       	ld.w	r2,r3[0x4]
80009488:	e0 12 ff fc 	andl	r2,0xfffc
8000948c:	0e 32       	cp.w	r2,r7
8000948e:	5f 39       	srlo	r9
80009490:	e4 07 01 08 	sub	r8,r2,r7
80009494:	58 f8       	cp.w	r8,15
80009496:	5f aa       	srle	r10
80009498:	f5 e9 10 09 	or	r9,r10,r9
8000949c:	e0 80 00 96 	breq	800095c8 <_malloc_r+0x40c>
800094a0:	e0 68 0b c0 	mov	r8,3008
800094a4:	70 01       	ld.w	r1,r8[0x0]
800094a6:	e0 68 08 0c 	mov	r8,2060
800094aa:	2f 01       	sub	r1,-16
800094ac:	70 08       	ld.w	r8,r8[0x0]
800094ae:	0e 01       	add	r1,r7
800094b0:	5b f8       	cp.w	r8,-1
800094b2:	c0 40       	breq	800094ba <_malloc_r+0x2fe>
800094b4:	28 11       	sub	r1,-127
800094b6:	e0 11 ff 80 	andl	r1,0xff80
800094ba:	02 9b       	mov	r11,r1
800094bc:	0a 9c       	mov	r12,r5
800094be:	c3 9d       	rcall	80009730 <_sbrk_r>
800094c0:	18 96       	mov	r6,r12
800094c2:	5b fc       	cp.w	r12,-1
800094c4:	c7 30       	breq	800095aa <_malloc_r+0x3ee>
800094c6:	e6 02 00 08 	add	r8,r3,r2
800094ca:	10 3c       	cp.w	r12,r8
800094cc:	c0 32       	brcc	800094d2 <_malloc_r+0x316>
800094ce:	08 33       	cp.w	r3,r4
800094d0:	c6 d1       	brne	800095aa <_malloc_r+0x3ee>
800094d2:	e0 6a 0b c4 	mov	r10,3012
800094d6:	74 09       	ld.w	r9,r10[0x0]
800094d8:	e2 09 00 09 	add	r9,r1,r9
800094dc:	95 09       	st.w	r10[0x0],r9
800094de:	10 36       	cp.w	r6,r8
800094e0:	c0 a1       	brne	800094f4 <_malloc_r+0x338>
800094e2:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800094e6:	c0 71       	brne	800094f4 <_malloc_r+0x338>
800094e8:	e2 02 00 02 	add	r2,r1,r2
800094ec:	68 28       	ld.w	r8,r4[0x8]
800094ee:	a1 a2       	sbr	r2,0x0
800094f0:	91 12       	st.w	r8[0x4],r2
800094f2:	c4 d8       	rjmp	8000958c <_malloc_r+0x3d0>
800094f4:	e0 6a 08 0c 	mov	r10,2060
800094f8:	74 0b       	ld.w	r11,r10[0x0]
800094fa:	5b fb       	cp.w	r11,-1
800094fc:	c0 31       	brne	80009502 <_malloc_r+0x346>
800094fe:	95 06       	st.w	r10[0x0],r6
80009500:	c0 78       	rjmp	8000950e <_malloc_r+0x352>
80009502:	ec 09 00 09 	add	r9,r6,r9
80009506:	e0 6a 0b c4 	mov	r10,3012
8000950a:	10 19       	sub	r9,r8
8000950c:	95 09       	st.w	r10[0x0],r9
8000950e:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80009512:	f0 09 11 08 	rsub	r9,r8,8
80009516:	58 08       	cp.w	r8,0
80009518:	f2 08 17 10 	movne	r8,r9
8000951c:	ed d8 e1 06 	addne	r6,r6,r8
80009520:	28 08       	sub	r8,-128
80009522:	ec 01 00 01 	add	r1,r6,r1
80009526:	0a 9c       	mov	r12,r5
80009528:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000952c:	f0 01 01 01 	sub	r1,r8,r1
80009530:	02 9b       	mov	r11,r1
80009532:	cf fc       	rcall	80009730 <_sbrk_r>
80009534:	e0 68 0b c4 	mov	r8,3012
80009538:	5b fc       	cp.w	r12,-1
8000953a:	ec 0c 17 00 	moveq	r12,r6
8000953e:	f9 b1 00 00 	moveq	r1,0
80009542:	70 09       	ld.w	r9,r8[0x0]
80009544:	0c 1c       	sub	r12,r6
80009546:	89 26       	st.w	r4[0x8],r6
80009548:	02 0c       	add	r12,r1
8000954a:	12 01       	add	r1,r9
8000954c:	a1 ac       	sbr	r12,0x0
8000954e:	91 01       	st.w	r8[0x0],r1
80009550:	8d 1c       	st.w	r6[0x4],r12
80009552:	08 33       	cp.w	r3,r4
80009554:	c1 c0       	breq	8000958c <_malloc_r+0x3d0>
80009556:	58 f2       	cp.w	r2,15
80009558:	e0 8b 00 05 	brhi	80009562 <_malloc_r+0x3a6>
8000955c:	30 18       	mov	r8,1
8000955e:	8d 18       	st.w	r6[0x4],r8
80009560:	c2 58       	rjmp	800095aa <_malloc_r+0x3ee>
80009562:	30 59       	mov	r9,5
80009564:	20 c2       	sub	r2,12
80009566:	e0 12 ff f8 	andl	r2,0xfff8
8000956a:	e6 02 00 08 	add	r8,r3,r2
8000956e:	91 29       	st.w	r8[0x8],r9
80009570:	91 19       	st.w	r8[0x4],r9
80009572:	66 18       	ld.w	r8,r3[0x4]
80009574:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009578:	e5 e8 10 08 	or	r8,r2,r8
8000957c:	87 18       	st.w	r3[0x4],r8
8000957e:	58 f2       	cp.w	r2,15
80009580:	e0 88 00 06 	brls	8000958c <_malloc_r+0x3d0>
80009584:	e6 cb ff f8 	sub	r11,r3,-8
80009588:	0a 9c       	mov	r12,r5
8000958a:	cc fd       	rcall	80009928 <_free_r>
8000958c:	e0 69 0b bc 	mov	r9,3004
80009590:	72 0a       	ld.w	r10,r9[0x0]
80009592:	e0 68 0b c4 	mov	r8,3012
80009596:	70 08       	ld.w	r8,r8[0x0]
80009598:	14 38       	cp.w	r8,r10
8000959a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000959e:	e0 69 0b b8 	mov	r9,3000
800095a2:	72 0a       	ld.w	r10,r9[0x0]
800095a4:	14 38       	cp.w	r8,r10
800095a6:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800095aa:	68 28       	ld.w	r8,r4[0x8]
800095ac:	70 18       	ld.w	r8,r8[0x4]
800095ae:	e0 18 ff fc 	andl	r8,0xfffc
800095b2:	0e 38       	cp.w	r8,r7
800095b4:	5f 39       	srlo	r9
800095b6:	0e 18       	sub	r8,r7
800095b8:	58 f8       	cp.w	r8,15
800095ba:	5f aa       	srle	r10
800095bc:	f5 e9 10 09 	or	r9,r10,r9
800095c0:	c0 40       	breq	800095c8 <_malloc_r+0x40c>
800095c2:	0a 9c       	mov	r12,r5
800095c4:	cb 5c       	rcall	8000972e <__malloc_unlock>
800095c6:	d8 3a       	popm	r0-r7,pc,r12=0
800095c8:	68 26       	ld.w	r6,r4[0x8]
800095ca:	a1 a8       	sbr	r8,0x0
800095cc:	0e 99       	mov	r9,r7
800095ce:	a1 a9       	sbr	r9,0x0
800095d0:	8d 19       	st.w	r6[0x4],r9
800095d2:	ec 07 00 07 	add	r7,r6,r7
800095d6:	0a 9c       	mov	r12,r5
800095d8:	89 27       	st.w	r4[0x8],r7
800095da:	8f 18       	st.w	r7[0x4],r8
800095dc:	ca 9c       	rcall	8000972e <__malloc_unlock>
800095de:	ec cc ff f8 	sub	r12,r6,-8
800095e2:	d8 32       	popm	r0-r7,pc

800095e4 <memcpy>:
800095e4:	58 8a       	cp.w	r10,8
800095e6:	c2 f5       	brlt	80009644 <memcpy+0x60>
800095e8:	f9 eb 10 09 	or	r9,r12,r11
800095ec:	e2 19 00 03 	andl	r9,0x3,COH
800095f0:	e0 81 00 97 	brne	8000971e <memcpy+0x13a>
800095f4:	e0 4a 00 20 	cp.w	r10,32
800095f8:	c3 b4       	brge	8000966e <memcpy+0x8a>
800095fa:	f4 08 14 02 	asr	r8,r10,0x2
800095fe:	f0 09 11 08 	rsub	r9,r8,8
80009602:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80009606:	76 69       	ld.w	r9,r11[0x18]
80009608:	99 69       	st.w	r12[0x18],r9
8000960a:	76 59       	ld.w	r9,r11[0x14]
8000960c:	99 59       	st.w	r12[0x14],r9
8000960e:	76 49       	ld.w	r9,r11[0x10]
80009610:	99 49       	st.w	r12[0x10],r9
80009612:	76 39       	ld.w	r9,r11[0xc]
80009614:	99 39       	st.w	r12[0xc],r9
80009616:	76 29       	ld.w	r9,r11[0x8]
80009618:	99 29       	st.w	r12[0x8],r9
8000961a:	76 19       	ld.w	r9,r11[0x4]
8000961c:	99 19       	st.w	r12[0x4],r9
8000961e:	76 09       	ld.w	r9,r11[0x0]
80009620:	99 09       	st.w	r12[0x0],r9
80009622:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80009626:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000962a:	e0 1a 00 03 	andl	r10,0x3
8000962e:	f4 0a 11 04 	rsub	r10,r10,4
80009632:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80009636:	17 a9       	ld.ub	r9,r11[0x2]
80009638:	b0 a9       	st.b	r8[0x2],r9
8000963a:	17 99       	ld.ub	r9,r11[0x1]
8000963c:	b0 99       	st.b	r8[0x1],r9
8000963e:	17 89       	ld.ub	r9,r11[0x0]
80009640:	b0 89       	st.b	r8[0x0],r9
80009642:	5e fc       	retal	r12
80009644:	f4 0a 11 09 	rsub	r10,r10,9
80009648:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000964c:	17 f9       	ld.ub	r9,r11[0x7]
8000964e:	b8 f9       	st.b	r12[0x7],r9
80009650:	17 e9       	ld.ub	r9,r11[0x6]
80009652:	b8 e9       	st.b	r12[0x6],r9
80009654:	17 d9       	ld.ub	r9,r11[0x5]
80009656:	b8 d9       	st.b	r12[0x5],r9
80009658:	17 c9       	ld.ub	r9,r11[0x4]
8000965a:	b8 c9       	st.b	r12[0x4],r9
8000965c:	17 b9       	ld.ub	r9,r11[0x3]
8000965e:	b8 b9       	st.b	r12[0x3],r9
80009660:	17 a9       	ld.ub	r9,r11[0x2]
80009662:	b8 a9       	st.b	r12[0x2],r9
80009664:	17 99       	ld.ub	r9,r11[0x1]
80009666:	b8 99       	st.b	r12[0x1],r9
80009668:	17 89       	ld.ub	r9,r11[0x0]
8000966a:	b8 89       	st.b	r12[0x0],r9
8000966c:	5e fc       	retal	r12
8000966e:	eb cd 40 c0 	pushm	r6-r7,lr
80009672:	18 99       	mov	r9,r12
80009674:	22 0a       	sub	r10,32
80009676:	b7 07       	ld.d	r6,r11++
80009678:	b3 26       	st.d	r9++,r6
8000967a:	b7 07       	ld.d	r6,r11++
8000967c:	b3 26       	st.d	r9++,r6
8000967e:	b7 07       	ld.d	r6,r11++
80009680:	b3 26       	st.d	r9++,r6
80009682:	b7 07       	ld.d	r6,r11++
80009684:	b3 26       	st.d	r9++,r6
80009686:	22 0a       	sub	r10,32
80009688:	cf 74       	brge	80009676 <memcpy+0x92>
8000968a:	2f 0a       	sub	r10,-16
8000968c:	c0 65       	brlt	80009698 <memcpy+0xb4>
8000968e:	b7 07       	ld.d	r6,r11++
80009690:	b3 26       	st.d	r9++,r6
80009692:	b7 07       	ld.d	r6,r11++
80009694:	b3 26       	st.d	r9++,r6
80009696:	21 0a       	sub	r10,16
80009698:	5c 3a       	neg	r10
8000969a:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000969e:	d7 03       	nop
800096a0:	d7 03       	nop
800096a2:	f7 36 00 0e 	ld.ub	r6,r11[14]
800096a6:	f3 66 00 0e 	st.b	r9[14],r6
800096aa:	f7 36 00 0d 	ld.ub	r6,r11[13]
800096ae:	f3 66 00 0d 	st.b	r9[13],r6
800096b2:	f7 36 00 0c 	ld.ub	r6,r11[12]
800096b6:	f3 66 00 0c 	st.b	r9[12],r6
800096ba:	f7 36 00 0b 	ld.ub	r6,r11[11]
800096be:	f3 66 00 0b 	st.b	r9[11],r6
800096c2:	f7 36 00 0a 	ld.ub	r6,r11[10]
800096c6:	f3 66 00 0a 	st.b	r9[10],r6
800096ca:	f7 36 00 09 	ld.ub	r6,r11[9]
800096ce:	f3 66 00 09 	st.b	r9[9],r6
800096d2:	f7 36 00 08 	ld.ub	r6,r11[8]
800096d6:	f3 66 00 08 	st.b	r9[8],r6
800096da:	f7 36 00 07 	ld.ub	r6,r11[7]
800096de:	f3 66 00 07 	st.b	r9[7],r6
800096e2:	f7 36 00 06 	ld.ub	r6,r11[6]
800096e6:	f3 66 00 06 	st.b	r9[6],r6
800096ea:	f7 36 00 05 	ld.ub	r6,r11[5]
800096ee:	f3 66 00 05 	st.b	r9[5],r6
800096f2:	f7 36 00 04 	ld.ub	r6,r11[4]
800096f6:	f3 66 00 04 	st.b	r9[4],r6
800096fa:	f7 36 00 03 	ld.ub	r6,r11[3]
800096fe:	f3 66 00 03 	st.b	r9[3],r6
80009702:	f7 36 00 02 	ld.ub	r6,r11[2]
80009706:	f3 66 00 02 	st.b	r9[2],r6
8000970a:	f7 36 00 01 	ld.ub	r6,r11[1]
8000970e:	f3 66 00 01 	st.b	r9[1],r6
80009712:	f7 36 00 00 	ld.ub	r6,r11[0]
80009716:	f3 66 00 00 	st.b	r9[0],r6
8000971a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000971e:	20 1a       	sub	r10,1
80009720:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80009724:	f8 0a 0b 09 	st.b	r12[r10],r9
80009728:	cf b1       	brne	8000971e <memcpy+0x13a>
8000972a:	5e fc       	retal	r12

8000972c <__malloc_lock>:
8000972c:	5e fc       	retal	r12

8000972e <__malloc_unlock>:
8000972e:	5e fc       	retal	r12

80009730 <_sbrk_r>:
80009730:	d4 21       	pushm	r4-r7,lr
80009732:	30 08       	mov	r8,0
80009734:	18 97       	mov	r7,r12
80009736:	e0 66 0c d4 	mov	r6,3284
8000973a:	16 9c       	mov	r12,r11
8000973c:	8d 08       	st.w	r6[0x0],r8
8000973e:	c6 bc       	rcall	80009814 <_sbrk>
80009740:	5b fc       	cp.w	r12,-1
80009742:	c0 51       	brne	8000974c <_sbrk_r+0x1c>
80009744:	6c 08       	ld.w	r8,r6[0x0]
80009746:	58 08       	cp.w	r8,0
80009748:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000974c:	d8 22       	popm	r4-r7,pc
8000974e:	d7 03       	nop

80009750 <_close>:
80009750:	30 28       	mov	r8,2
80009752:	d6 73       	breakpoint
80009754:	3f fc       	mov	r12,-1
80009756:	35 8b       	mov	r11,88
80009758:	58 0c       	cp.w	r12,0
8000975a:	5e 4c       	retge	r12
8000975c:	e0 6a 0c d4 	mov	r10,3284
80009760:	95 0b       	st.w	r10[0x0],r11
80009762:	5e fc       	retal	r12

80009764 <_lseek>:
80009764:	30 58       	mov	r8,5
80009766:	d6 73       	breakpoint
80009768:	3f fc       	mov	r12,-1
8000976a:	35 8b       	mov	r11,88
8000976c:	58 0c       	cp.w	r12,0
8000976e:	5e 4c       	retge	r12
80009770:	e0 6a 0c d4 	mov	r10,3284
80009774:	95 0b       	st.w	r10[0x0],r11
80009776:	5e fc       	retal	r12

80009778 <_read>:
80009778:	30 38       	mov	r8,3
8000977a:	d6 73       	breakpoint
8000977c:	3f fc       	mov	r12,-1
8000977e:	35 8b       	mov	r11,88
80009780:	58 0c       	cp.w	r12,0
80009782:	5e 4c       	retge	r12
80009784:	e0 6a 0c d4 	mov	r10,3284
80009788:	95 0b       	st.w	r10[0x0],r11
8000978a:	5e fc       	retal	r12

8000978c <_write>:
8000978c:	30 48       	mov	r8,4
8000978e:	d6 73       	breakpoint
80009790:	3f fc       	mov	r12,-1
80009792:	35 8b       	mov	r11,88
80009794:	58 0c       	cp.w	r12,0
80009796:	5e 4c       	retge	r12
80009798:	e0 6a 0c d4 	mov	r10,3284
8000979c:	95 0b       	st.w	r10[0x0],r11
8000979e:	5e fc       	retal	r12

800097a0 <isatty>:
800097a0:	30 b8       	mov	r8,11
800097a2:	d6 73       	breakpoint
800097a4:	3f fc       	mov	r12,-1
800097a6:	35 8b       	mov	r11,88
800097a8:	58 0c       	cp.w	r12,0
800097aa:	5e 4c       	retge	r12
800097ac:	e0 6a 0c d4 	mov	r10,3284
800097b0:	95 0b       	st.w	r10[0x0],r11
800097b2:	5e fc       	retal	r12

800097b4 <_fstat_host>:
800097b4:	30 98       	mov	r8,9
800097b6:	d6 73       	breakpoint
800097b8:	3f fc       	mov	r12,-1
800097ba:	35 8b       	mov	r11,88
800097bc:	58 0c       	cp.w	r12,0
800097be:	5e 4c       	retge	r12
800097c0:	e0 6a 0c d4 	mov	r10,3284
800097c4:	95 0b       	st.w	r10[0x0],r11
800097c6:	5e fc       	retal	r12

800097c8 <_fstat>:
800097c8:	d4 21       	pushm	r4-r7,lr
800097ca:	21 0d       	sub	sp,64
800097cc:	16 97       	mov	r7,r11
800097ce:	1a 9b       	mov	r11,sp
800097d0:	cf 2f       	rcall	800097b4 <_fstat_host>
800097d2:	c0 34       	brge	800097d8 <_fstat+0x10>
800097d4:	3f fc       	mov	r12,-1
800097d6:	c1 c8       	rjmp	8000980e <_fstat+0x46>
800097d8:	40 08       	lddsp	r8,sp[0x0]
800097da:	ae 08       	st.h	r7[0x0],r8
800097dc:	40 18       	lddsp	r8,sp[0x4]
800097de:	ae 18       	st.h	r7[0x2],r8
800097e0:	40 28       	lddsp	r8,sp[0x8]
800097e2:	8f 18       	st.w	r7[0x4],r8
800097e4:	40 38       	lddsp	r8,sp[0xc]
800097e6:	ae 48       	st.h	r7[0x8],r8
800097e8:	40 48       	lddsp	r8,sp[0x10]
800097ea:	ae 58       	st.h	r7[0xa],r8
800097ec:	40 58       	lddsp	r8,sp[0x14]
800097ee:	ae 68       	st.h	r7[0xc],r8
800097f0:	40 68       	lddsp	r8,sp[0x18]
800097f2:	ae 78       	st.h	r7[0xe],r8
800097f4:	40 88       	lddsp	r8,sp[0x20]
800097f6:	8f 48       	st.w	r7[0x10],r8
800097f8:	40 a8       	lddsp	r8,sp[0x28]
800097fa:	8f b8       	st.w	r7[0x2c],r8
800097fc:	40 c8       	lddsp	r8,sp[0x30]
800097fe:	8f c8       	st.w	r7[0x30],r8
80009800:	40 d8       	lddsp	r8,sp[0x34]
80009802:	8f 58       	st.w	r7[0x14],r8
80009804:	40 e8       	lddsp	r8,sp[0x38]
80009806:	30 0c       	mov	r12,0
80009808:	8f 78       	st.w	r7[0x1c],r8
8000980a:	40 f8       	lddsp	r8,sp[0x3c]
8000980c:	8f 98       	st.w	r7[0x24],r8
8000980e:	2f 0d       	sub	sp,-64
80009810:	d8 22       	popm	r4-r7,pc
80009812:	d7 03       	nop

80009814 <_sbrk>:
80009814:	d4 01       	pushm	lr
80009816:	e0 68 0b ec 	mov	r8,3052
8000981a:	70 09       	ld.w	r9,r8[0x0]
8000981c:	58 09       	cp.w	r9,0
8000981e:	c0 41       	brne	80009826 <_sbrk+0x12>
80009820:	e0 69 0c d8 	mov	r9,3288
80009824:	91 09       	st.w	r8[0x0],r9
80009826:	e0 69 0b ec 	mov	r9,3052
8000982a:	e0 6a f0 00 	mov	r10,61440
8000982e:	72 08       	ld.w	r8,r9[0x0]
80009830:	f0 0c 00 0c 	add	r12,r8,r12
80009834:	14 3c       	cp.w	r12,r10
80009836:	e0 8b 00 04 	brhi	8000983e <_sbrk+0x2a>
8000983a:	93 0c       	st.w	r9[0x0],r12
8000983c:	c0 58       	rjmp	80009846 <_sbrk+0x32>
8000983e:	c2 9c       	rcall	80009890 <__errno>
80009840:	30 c8       	mov	r8,12
80009842:	99 08       	st.w	r12[0x0],r8
80009844:	3f f8       	mov	r8,-1
80009846:	10 9c       	mov	r12,r8
80009848:	d8 02       	popm	pc
8000984a:	d7 03       	nop

8000984c <_vsprintf_r>:
8000984c:	d4 01       	pushm	lr
8000984e:	21 7d       	sub	sp,92
80009850:	e0 68 ff ff 	mov	r8,65535
80009854:	ea 18 7f ff 	orh	r8,0x7fff
80009858:	50 58       	stdsp	sp[0x14],r8
8000985a:	50 28       	stdsp	sp[0x8],r8
8000985c:	e0 68 02 08 	mov	r8,520
80009860:	ba 68       	st.h	sp[0xc],r8
80009862:	3f f8       	mov	r8,-1
80009864:	50 4b       	stdsp	sp[0x10],r11
80009866:	50 0b       	stdsp	sp[0x0],r11
80009868:	ba 78       	st.h	sp[0xe],r8
8000986a:	1a 9b       	mov	r11,sp
8000986c:	e0 a0 02 b8 	rcall	80009ddc <_vfprintf_r>
80009870:	30 09       	mov	r9,0
80009872:	40 08       	lddsp	r8,sp[0x0]
80009874:	b0 89       	st.b	r8[0x0],r9
80009876:	2e 9d       	sub	sp,-92
80009878:	d8 02       	popm	pc
8000987a:	d7 03       	nop

8000987c <vsprintf>:
8000987c:	d4 01       	pushm	lr
8000987e:	e0 68 09 00 	mov	r8,2304
80009882:	14 99       	mov	r9,r10
80009884:	16 9a       	mov	r10,r11
80009886:	18 9b       	mov	r11,r12
80009888:	70 0c       	ld.w	r12,r8[0x0]
8000988a:	ce 1f       	rcall	8000984c <_vsprintf_r>
8000988c:	d8 02       	popm	pc
8000988e:	d7 03       	nop

80009890 <__errno>:
80009890:	e0 68 09 00 	mov	r8,2304
80009894:	70 0c       	ld.w	r12,r8[0x0]
80009896:	2f 4c       	sub	r12,-12
80009898:	5e fc       	retal	r12
8000989a:	d7 03       	nop

8000989c <_malloc_trim_r>:
8000989c:	d4 21       	pushm	r4-r7,lr
8000989e:	16 95       	mov	r5,r11
800098a0:	18 97       	mov	r7,r12
800098a2:	c4 5f       	rcall	8000972c <__malloc_lock>
800098a4:	e0 64 04 00 	mov	r4,1024
800098a8:	68 28       	ld.w	r8,r4[0x8]
800098aa:	70 16       	ld.w	r6,r8[0x4]
800098ac:	e0 16 ff fc 	andl	r6,0xfffc
800098b0:	ec c8 ff 91 	sub	r8,r6,-111
800098b4:	f0 05 01 05 	sub	r5,r8,r5
800098b8:	e0 15 ff 80 	andl	r5,0xff80
800098bc:	ea c5 00 80 	sub	r5,r5,128
800098c0:	e0 45 00 7f 	cp.w	r5,127
800098c4:	e0 8a 00 22 	brle	80009908 <_malloc_trim_r+0x6c>
800098c8:	30 0b       	mov	r11,0
800098ca:	0e 9c       	mov	r12,r7
800098cc:	c3 2f       	rcall	80009730 <_sbrk_r>
800098ce:	68 28       	ld.w	r8,r4[0x8]
800098d0:	0c 08       	add	r8,r6
800098d2:	10 3c       	cp.w	r12,r8
800098d4:	c1 a1       	brne	80009908 <_malloc_trim_r+0x6c>
800098d6:	ea 0b 11 00 	rsub	r11,r5,0
800098da:	0e 9c       	mov	r12,r7
800098dc:	c2 af       	rcall	80009730 <_sbrk_r>
800098de:	5b fc       	cp.w	r12,-1
800098e0:	c1 71       	brne	8000990e <_malloc_trim_r+0x72>
800098e2:	30 0b       	mov	r11,0
800098e4:	0e 9c       	mov	r12,r7
800098e6:	c2 5f       	rcall	80009730 <_sbrk_r>
800098e8:	68 28       	ld.w	r8,r4[0x8]
800098ea:	f8 08 01 09 	sub	r9,r12,r8
800098ee:	58 f9       	cp.w	r9,15
800098f0:	e0 8a 00 0c 	brle	80009908 <_malloc_trim_r+0x6c>
800098f4:	a1 a9       	sbr	r9,0x0
800098f6:	91 19       	st.w	r8[0x4],r9
800098f8:	e0 68 08 0c 	mov	r8,2060
800098fc:	70 09       	ld.w	r9,r8[0x0]
800098fe:	e0 68 0b c4 	mov	r8,3012
80009902:	f8 09 01 09 	sub	r9,r12,r9
80009906:	91 09       	st.w	r8[0x0],r9
80009908:	0e 9c       	mov	r12,r7
8000990a:	c1 2f       	rcall	8000972e <__malloc_unlock>
8000990c:	d8 2a       	popm	r4-r7,pc,r12=0
8000990e:	68 28       	ld.w	r8,r4[0x8]
80009910:	0a 16       	sub	r6,r5
80009912:	a1 a6       	sbr	r6,0x0
80009914:	91 16       	st.w	r8[0x4],r6
80009916:	e0 68 0b c4 	mov	r8,3012
8000991a:	70 09       	ld.w	r9,r8[0x0]
8000991c:	0a 19       	sub	r9,r5
8000991e:	0e 9c       	mov	r12,r7
80009920:	91 09       	st.w	r8[0x0],r9
80009922:	c0 6f       	rcall	8000972e <__malloc_unlock>
80009924:	da 2a       	popm	r4-r7,pc,r12=1
80009926:	d7 03       	nop

80009928 <_free_r>:
80009928:	d4 21       	pushm	r4-r7,lr
8000992a:	16 96       	mov	r6,r11
8000992c:	18 97       	mov	r7,r12
8000992e:	58 0b       	cp.w	r11,0
80009930:	e0 80 00 bd 	breq	80009aaa <_free_r+0x182>
80009934:	cf ce       	rcall	8000972c <__malloc_lock>
80009936:	20 86       	sub	r6,8
80009938:	e0 6a 04 00 	mov	r10,1024
8000993c:	6c 18       	ld.w	r8,r6[0x4]
8000993e:	74 2e       	ld.w	lr,r10[0x8]
80009940:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80009944:	a1 c8       	cbr	r8,0x0
80009946:	ec 08 00 09 	add	r9,r6,r8
8000994a:	72 1b       	ld.w	r11,r9[0x4]
8000994c:	e0 1b ff fc 	andl	r11,0xfffc
80009950:	1c 39       	cp.w	r9,lr
80009952:	c1 d1       	brne	8000998c <_free_r+0x64>
80009954:	f6 08 00 08 	add	r8,r11,r8
80009958:	58 0c       	cp.w	r12,0
8000995a:	c0 81       	brne	8000996a <_free_r+0x42>
8000995c:	6c 09       	ld.w	r9,r6[0x0]
8000995e:	12 16       	sub	r6,r9
80009960:	12 08       	add	r8,r9
80009962:	6c 3b       	ld.w	r11,r6[0xc]
80009964:	6c 29       	ld.w	r9,r6[0x8]
80009966:	97 29       	st.w	r11[0x8],r9
80009968:	93 3b       	st.w	r9[0xc],r11
8000996a:	10 99       	mov	r9,r8
8000996c:	95 26       	st.w	r10[0x8],r6
8000996e:	a1 a9       	sbr	r9,0x0
80009970:	8d 19       	st.w	r6[0x4],r9
80009972:	e0 69 08 08 	mov	r9,2056
80009976:	72 09       	ld.w	r9,r9[0x0]
80009978:	12 38       	cp.w	r8,r9
8000997a:	c0 63       	brcs	80009986 <_free_r+0x5e>
8000997c:	e0 68 0b c0 	mov	r8,3008
80009980:	0e 9c       	mov	r12,r7
80009982:	70 0b       	ld.w	r11,r8[0x0]
80009984:	c8 cf       	rcall	8000989c <_malloc_trim_r>
80009986:	0e 9c       	mov	r12,r7
80009988:	cd 3e       	rcall	8000972e <__malloc_unlock>
8000998a:	d8 22       	popm	r4-r7,pc
8000998c:	93 1b       	st.w	r9[0x4],r11
8000998e:	58 0c       	cp.w	r12,0
80009990:	c0 30       	breq	80009996 <_free_r+0x6e>
80009992:	30 0c       	mov	r12,0
80009994:	c1 08       	rjmp	800099b4 <_free_r+0x8c>
80009996:	6c 0e       	ld.w	lr,r6[0x0]
80009998:	f4 c5 ff f8 	sub	r5,r10,-8
8000999c:	1c 16       	sub	r6,lr
8000999e:	1c 08       	add	r8,lr
800099a0:	6c 2e       	ld.w	lr,r6[0x8]
800099a2:	0a 3e       	cp.w	lr,r5
800099a4:	f9 bc 00 01 	moveq	r12,1
800099a8:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800099ac:	eb fe 1a 02 	st.wne	r5[0x8],lr
800099b0:	fd f5 1a 03 	st.wne	lr[0xc],r5
800099b4:	f2 0b 00 0e 	add	lr,r9,r11
800099b8:	7c 1e       	ld.w	lr,lr[0x4]
800099ba:	ed be 00 00 	bld	lr,0x0
800099be:	c1 40       	breq	800099e6 <_free_r+0xbe>
800099c0:	16 08       	add	r8,r11
800099c2:	58 0c       	cp.w	r12,0
800099c4:	c0 d1       	brne	800099de <_free_r+0xb6>
800099c6:	e0 6e 04 00 	mov	lr,1024
800099ca:	72 2b       	ld.w	r11,r9[0x8]
800099cc:	2f 8e       	sub	lr,-8
800099ce:	1c 3b       	cp.w	r11,lr
800099d0:	c0 71       	brne	800099de <_free_r+0xb6>
800099d2:	97 36       	st.w	r11[0xc],r6
800099d4:	97 26       	st.w	r11[0x8],r6
800099d6:	8d 2b       	st.w	r6[0x8],r11
800099d8:	8d 3b       	st.w	r6[0xc],r11
800099da:	30 1c       	mov	r12,1
800099dc:	c0 58       	rjmp	800099e6 <_free_r+0xbe>
800099de:	72 2b       	ld.w	r11,r9[0x8]
800099e0:	72 39       	ld.w	r9,r9[0xc]
800099e2:	93 2b       	st.w	r9[0x8],r11
800099e4:	97 39       	st.w	r11[0xc],r9
800099e6:	10 99       	mov	r9,r8
800099e8:	ec 08 09 08 	st.w	r6[r8],r8
800099ec:	a1 a9       	sbr	r9,0x0
800099ee:	8d 19       	st.w	r6[0x4],r9
800099f0:	58 0c       	cp.w	r12,0
800099f2:	c5 a1       	brne	80009aa6 <_free_r+0x17e>
800099f4:	e0 48 01 ff 	cp.w	r8,511
800099f8:	e0 8b 00 13 	brhi	80009a1e <_free_r+0xf6>
800099fc:	a3 98       	lsr	r8,0x3
800099fe:	f4 08 00 39 	add	r9,r10,r8<<0x3
80009a02:	72 2b       	ld.w	r11,r9[0x8]
80009a04:	8d 39       	st.w	r6[0xc],r9
80009a06:	8d 2b       	st.w	r6[0x8],r11
80009a08:	97 36       	st.w	r11[0xc],r6
80009a0a:	93 26       	st.w	r9[0x8],r6
80009a0c:	a3 48       	asr	r8,0x2
80009a0e:	74 19       	ld.w	r9,r10[0x4]
80009a10:	30 1b       	mov	r11,1
80009a12:	f6 08 09 48 	lsl	r8,r11,r8
80009a16:	f3 e8 10 08 	or	r8,r9,r8
80009a1a:	95 18       	st.w	r10[0x4],r8
80009a1c:	c4 58       	rjmp	80009aa6 <_free_r+0x17e>
80009a1e:	f0 0b 16 09 	lsr	r11,r8,0x9
80009a22:	58 4b       	cp.w	r11,4
80009a24:	e0 8b 00 06 	brhi	80009a30 <_free_r+0x108>
80009a28:	f0 0b 16 06 	lsr	r11,r8,0x6
80009a2c:	2c 8b       	sub	r11,-56
80009a2e:	c2 08       	rjmp	80009a6e <_free_r+0x146>
80009a30:	59 4b       	cp.w	r11,20
80009a32:	e0 8b 00 04 	brhi	80009a3a <_free_r+0x112>
80009a36:	2a 5b       	sub	r11,-91
80009a38:	c1 b8       	rjmp	80009a6e <_free_r+0x146>
80009a3a:	e0 4b 00 54 	cp.w	r11,84
80009a3e:	e0 8b 00 06 	brhi	80009a4a <_free_r+0x122>
80009a42:	f0 0b 16 0c 	lsr	r11,r8,0xc
80009a46:	29 2b       	sub	r11,-110
80009a48:	c1 38       	rjmp	80009a6e <_free_r+0x146>
80009a4a:	e0 4b 01 54 	cp.w	r11,340
80009a4e:	e0 8b 00 06 	brhi	80009a5a <_free_r+0x132>
80009a52:	f0 0b 16 0f 	lsr	r11,r8,0xf
80009a56:	28 9b       	sub	r11,-119
80009a58:	c0 b8       	rjmp	80009a6e <_free_r+0x146>
80009a5a:	e0 4b 05 54 	cp.w	r11,1364
80009a5e:	e0 88 00 05 	brls	80009a68 <_free_r+0x140>
80009a62:	37 eb       	mov	r11,126
80009a64:	c0 58       	rjmp	80009a6e <_free_r+0x146>
80009a66:	d7 03       	nop
80009a68:	f0 0b 16 12 	lsr	r11,r8,0x12
80009a6c:	28 4b       	sub	r11,-124
80009a6e:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80009a72:	78 29       	ld.w	r9,r12[0x8]
80009a74:	18 39       	cp.w	r9,r12
80009a76:	c0 e1       	brne	80009a92 <_free_r+0x16a>
80009a78:	74 18       	ld.w	r8,r10[0x4]
80009a7a:	a3 4b       	asr	r11,0x2
80009a7c:	30 1c       	mov	r12,1
80009a7e:	f8 0b 09 4b 	lsl	r11,r12,r11
80009a82:	f1 eb 10 0b 	or	r11,r8,r11
80009a86:	12 98       	mov	r8,r9
80009a88:	95 1b       	st.w	r10[0x4],r11
80009a8a:	c0 a8       	rjmp	80009a9e <_free_r+0x176>
80009a8c:	72 29       	ld.w	r9,r9[0x8]
80009a8e:	18 39       	cp.w	r9,r12
80009a90:	c0 60       	breq	80009a9c <_free_r+0x174>
80009a92:	72 1a       	ld.w	r10,r9[0x4]
80009a94:	e0 1a ff fc 	andl	r10,0xfffc
80009a98:	14 38       	cp.w	r8,r10
80009a9a:	cf 93       	brcs	80009a8c <_free_r+0x164>
80009a9c:	72 38       	ld.w	r8,r9[0xc]
80009a9e:	8d 38       	st.w	r6[0xc],r8
80009aa0:	8d 29       	st.w	r6[0x8],r9
80009aa2:	93 36       	st.w	r9[0xc],r6
80009aa4:	91 26       	st.w	r8[0x8],r6
80009aa6:	0e 9c       	mov	r12,r7
80009aa8:	c4 3e       	rcall	8000972e <__malloc_unlock>
80009aaa:	d8 22       	popm	r4-r7,pc

80009aac <get_arg>:
80009aac:	d4 31       	pushm	r0-r7,lr
80009aae:	20 8d       	sub	sp,32
80009ab0:	fa c4 ff bc 	sub	r4,sp,-68
80009ab4:	50 4b       	stdsp	sp[0x10],r11
80009ab6:	68 2e       	ld.w	lr,r4[0x8]
80009ab8:	50 58       	stdsp	sp[0x14],r8
80009aba:	12 96       	mov	r6,r9
80009abc:	7c 0b       	ld.w	r11,lr[0x0]
80009abe:	70 05       	ld.w	r5,r8[0x0]
80009ac0:	50 6e       	stdsp	sp[0x18],lr
80009ac2:	58 0b       	cp.w	r11,0
80009ac4:	f4 0b 17 00 	moveq	r11,r10
80009ac8:	68 03       	ld.w	r3,r4[0x0]
80009aca:	68 11       	ld.w	r1,r4[0x4]
80009acc:	40 49       	lddsp	r9,sp[0x10]
80009ace:	30 08       	mov	r8,0
80009ad0:	c2 89       	rjmp	80009d20 <get_arg+0x274>
80009ad2:	2f fb       	sub	r11,-1
80009ad4:	32 5c       	mov	r12,37
80009ad6:	17 8a       	ld.ub	r10,r11[0x0]
80009ad8:	f8 0a 18 00 	cp.b	r10,r12
80009adc:	5f 1e       	srne	lr
80009ade:	f0 0a 18 00 	cp.b	r10,r8
80009ae2:	5f 1c       	srne	r12
80009ae4:	fd ec 00 0c 	and	r12,lr,r12
80009ae8:	f0 0c 18 00 	cp.b	r12,r8
80009aec:	cf 31       	brne	80009ad2 <get_arg+0x26>
80009aee:	58 0a       	cp.w	r10,0
80009af0:	e0 80 01 25 	breq	80009d3a <get_arg+0x28e>
80009af4:	30 0c       	mov	r12,0
80009af6:	3f fa       	mov	r10,-1
80009af8:	18 90       	mov	r0,r12
80009afa:	50 3a       	stdsp	sp[0xc],r10
80009afc:	18 94       	mov	r4,r12
80009afe:	18 92       	mov	r2,r12
80009b00:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80009b04:	16 97       	mov	r7,r11
80009b06:	50 7c       	stdsp	sp[0x1c],r12
80009b08:	fe cc a7 f0 	sub	r12,pc,-22544
80009b0c:	0f 3a       	ld.ub	r10,r7++
80009b0e:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80009b12:	40 7c       	lddsp	r12,sp[0x1c]
80009b14:	1c 0c       	add	r12,lr
80009b16:	fe ce a8 c6 	sub	lr,pc,-22330
80009b1a:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80009b1e:	20 1e       	sub	lr,1
80009b20:	50 0e       	stdsp	sp[0x0],lr
80009b22:	fe ce a9 3e 	sub	lr,pc,-22210
80009b26:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80009b2a:	50 7c       	stdsp	sp[0x1c],r12
80009b2c:	40 0c       	lddsp	r12,sp[0x0]
80009b2e:	58 7c       	cp.w	r12,7
80009b30:	e0 8b 00 f1 	brhi	80009d12 <get_arg+0x266>
80009b34:	fe ce aa f0 	sub	lr,pc,-21776
80009b38:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80009b3c:	36 8b       	mov	r11,104
80009b3e:	f6 0a 18 00 	cp.b	r10,r11
80009b42:	e0 80 00 e8 	breq	80009d12 <get_arg+0x266>
80009b46:	37 1b       	mov	r11,113
80009b48:	f6 0a 18 00 	cp.b	r10,r11
80009b4c:	c0 70       	breq	80009b5a <get_arg+0xae>
80009b4e:	34 cb       	mov	r11,76
80009b50:	f6 0a 18 00 	cp.b	r10,r11
80009b54:	c0 51       	brne	80009b5e <get_arg+0xb2>
80009b56:	a3 b4       	sbr	r4,0x3
80009b58:	cd d8       	rjmp	80009d12 <get_arg+0x266>
80009b5a:	a5 b4       	sbr	r4,0x5
80009b5c:	cd b8       	rjmp	80009d12 <get_arg+0x266>
80009b5e:	08 9a       	mov	r10,r4
80009b60:	0e 9b       	mov	r11,r7
80009b62:	a5 aa       	sbr	r10,0x4
80009b64:	17 3c       	ld.ub	r12,r11++
80009b66:	a5 b4       	sbr	r4,0x5
80009b68:	36 ce       	mov	lr,108
80009b6a:	fc 0c 18 00 	cp.b	r12,lr
80009b6e:	e0 80 00 d3 	breq	80009d14 <get_arg+0x268>
80009b72:	14 94       	mov	r4,r10
80009b74:	cc f8       	rjmp	80009d12 <get_arg+0x266>
80009b76:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80009b7a:	36 7c       	mov	r12,103
80009b7c:	f8 0a 18 00 	cp.b	r10,r12
80009b80:	e0 8b 00 27 	brhi	80009bce <get_arg+0x122>
80009b84:	36 5b       	mov	r11,101
80009b86:	f6 0a 18 00 	cp.b	r10,r11
80009b8a:	c4 82       	brcc	80009c1a <get_arg+0x16e>
80009b8c:	34 fb       	mov	r11,79
80009b8e:	f6 0a 18 00 	cp.b	r10,r11
80009b92:	c4 80       	breq	80009c22 <get_arg+0x176>
80009b94:	e0 8b 00 0c 	brhi	80009bac <get_arg+0x100>
80009b98:	34 5b       	mov	r11,69
80009b9a:	f6 0a 18 00 	cp.b	r10,r11
80009b9e:	c3 e0       	breq	80009c1a <get_arg+0x16e>
80009ba0:	34 7b       	mov	r11,71
80009ba2:	f6 0a 18 00 	cp.b	r10,r11
80009ba6:	c3 a0       	breq	80009c1a <get_arg+0x16e>
80009ba8:	34 4b       	mov	r11,68
80009baa:	c0 88       	rjmp	80009bba <get_arg+0x10e>
80009bac:	35 8b       	mov	r11,88
80009bae:	f6 0a 18 00 	cp.b	r10,r11
80009bb2:	c2 c0       	breq	80009c0a <get_arg+0x15e>
80009bb4:	e0 8b 00 07 	brhi	80009bc2 <get_arg+0x116>
80009bb8:	35 5b       	mov	r11,85
80009bba:	f6 0a 18 00 	cp.b	r10,r11
80009bbe:	c3 51       	brne	80009c28 <get_arg+0x17c>
80009bc0:	c3 18       	rjmp	80009c22 <get_arg+0x176>
80009bc2:	36 3b       	mov	r11,99
80009bc4:	f6 0a 18 00 	cp.b	r10,r11
80009bc8:	c2 f0       	breq	80009c26 <get_arg+0x17a>
80009bca:	36 4b       	mov	r11,100
80009bcc:	c0 e8       	rjmp	80009be8 <get_arg+0x13c>
80009bce:	37 0b       	mov	r11,112
80009bd0:	f6 0a 18 00 	cp.b	r10,r11
80009bd4:	c2 50       	breq	80009c1e <get_arg+0x172>
80009bd6:	e0 8b 00 0d 	brhi	80009bf0 <get_arg+0x144>
80009bda:	36 eb       	mov	r11,110
80009bdc:	f6 0a 18 00 	cp.b	r10,r11
80009be0:	c1 f0       	breq	80009c1e <get_arg+0x172>
80009be2:	e0 8b 00 14 	brhi	80009c0a <get_arg+0x15e>
80009be6:	36 9b       	mov	r11,105
80009be8:	f6 0a 18 00 	cp.b	r10,r11
80009bec:	c1 e1       	brne	80009c28 <get_arg+0x17c>
80009bee:	c0 e8       	rjmp	80009c0a <get_arg+0x15e>
80009bf0:	37 5b       	mov	r11,117
80009bf2:	f6 0a 18 00 	cp.b	r10,r11
80009bf6:	c0 a0       	breq	80009c0a <get_arg+0x15e>
80009bf8:	37 8b       	mov	r11,120
80009bfa:	f6 0a 18 00 	cp.b	r10,r11
80009bfe:	c0 60       	breq	80009c0a <get_arg+0x15e>
80009c00:	37 3b       	mov	r11,115
80009c02:	f6 0a 18 00 	cp.b	r10,r11
80009c06:	c1 11       	brne	80009c28 <get_arg+0x17c>
80009c08:	c0 b8       	rjmp	80009c1e <get_arg+0x172>
80009c0a:	ed b4 00 04 	bld	r4,0x4
80009c0e:	c0 a0       	breq	80009c22 <get_arg+0x176>
80009c10:	ed b4 00 05 	bld	r4,0x5
80009c14:	c0 91       	brne	80009c26 <get_arg+0x17a>
80009c16:	30 20       	mov	r0,2
80009c18:	c0 88       	rjmp	80009c28 <get_arg+0x17c>
80009c1a:	30 40       	mov	r0,4
80009c1c:	c0 68       	rjmp	80009c28 <get_arg+0x17c>
80009c1e:	30 30       	mov	r0,3
80009c20:	c0 48       	rjmp	80009c28 <get_arg+0x17c>
80009c22:	30 10       	mov	r0,1
80009c24:	c0 28       	rjmp	80009c28 <get_arg+0x17c>
80009c26:	30 00       	mov	r0,0
80009c28:	40 3b       	lddsp	r11,sp[0xc]
80009c2a:	5b fb       	cp.w	r11,-1
80009c2c:	c0 40       	breq	80009c34 <get_arg+0x188>
80009c2e:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80009c32:	c7 08       	rjmp	80009d12 <get_arg+0x266>
80009c34:	58 60       	cp.w	r0,6
80009c36:	e0 8b 00 6e 	brhi	80009d12 <get_arg+0x266>
80009c3a:	6c 0a       	ld.w	r10,r6[0x0]
80009c3c:	ea cc ff ff 	sub	r12,r5,-1
80009c40:	fe ce ab dc 	sub	lr,pc,-21540
80009c44:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80009c48:	f4 cb ff f8 	sub	r11,r10,-8
80009c4c:	8d 0b       	st.w	r6[0x0],r11
80009c4e:	f4 ea 00 00 	ld.d	r10,r10[0]
80009c52:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80009c56:	c0 f8       	rjmp	80009c74 <get_arg+0x1c8>
80009c58:	f4 cb ff fc 	sub	r11,r10,-4
80009c5c:	8d 0b       	st.w	r6[0x0],r11
80009c5e:	74 0a       	ld.w	r10,r10[0x0]
80009c60:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80009c64:	c0 88       	rjmp	80009c74 <get_arg+0x1c8>
80009c66:	f4 cb ff f8 	sub	r11,r10,-8
80009c6a:	8d 0b       	st.w	r6[0x0],r11
80009c6c:	f4 ea 00 00 	ld.d	r10,r10[0]
80009c70:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80009c74:	0e 9b       	mov	r11,r7
80009c76:	18 95       	mov	r5,r12
80009c78:	c4 e8       	rjmp	80009d14 <get_arg+0x268>
80009c7a:	62 0a       	ld.w	r10,r1[0x0]
80009c7c:	5b fa       	cp.w	r10,-1
80009c7e:	c0 b1       	brne	80009c94 <get_arg+0x1e8>
80009c80:	50 19       	stdsp	sp[0x4],r9
80009c82:	50 28       	stdsp	sp[0x8],r8
80009c84:	e0 6a 00 80 	mov	r10,128
80009c88:	30 0b       	mov	r11,0
80009c8a:	02 9c       	mov	r12,r1
80009c8c:	e0 a0 1a 3e 	rcall	8000d108 <memset>
80009c90:	40 28       	lddsp	r8,sp[0x8]
80009c92:	40 19       	lddsp	r9,sp[0x4]
80009c94:	e4 cc 00 01 	sub	r12,r2,1
80009c98:	0e 9b       	mov	r11,r7
80009c9a:	50 3c       	stdsp	sp[0xc],r12
80009c9c:	f2 0c 0c 49 	max	r9,r9,r12
80009ca0:	c3 a8       	rjmp	80009d14 <get_arg+0x268>
80009ca2:	62 0a       	ld.w	r10,r1[0x0]
80009ca4:	5b fa       	cp.w	r10,-1
80009ca6:	c0 b1       	brne	80009cbc <get_arg+0x210>
80009ca8:	50 19       	stdsp	sp[0x4],r9
80009caa:	50 28       	stdsp	sp[0x8],r8
80009cac:	e0 6a 00 80 	mov	r10,128
80009cb0:	30 0b       	mov	r11,0
80009cb2:	02 9c       	mov	r12,r1
80009cb4:	e0 a0 1a 2a 	rcall	8000d108 <memset>
80009cb8:	40 28       	lddsp	r8,sp[0x8]
80009cba:	40 19       	lddsp	r9,sp[0x4]
80009cbc:	20 12       	sub	r2,1
80009cbe:	30 0a       	mov	r10,0
80009cc0:	0e 9b       	mov	r11,r7
80009cc2:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80009cc6:	f2 02 0c 49 	max	r9,r9,r2
80009cca:	c2 58       	rjmp	80009d14 <get_arg+0x268>
80009ccc:	16 97       	mov	r7,r11
80009cce:	6c 0a       	ld.w	r10,r6[0x0]
80009cd0:	f4 cb ff fc 	sub	r11,r10,-4
80009cd4:	8d 0b       	st.w	r6[0x0],r11
80009cd6:	74 0a       	ld.w	r10,r10[0x0]
80009cd8:	0e 9b       	mov	r11,r7
80009cda:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80009cde:	2f f5       	sub	r5,-1
80009ce0:	c1 a8       	rjmp	80009d14 <get_arg+0x268>
80009ce2:	f4 c2 00 30 	sub	r2,r10,48
80009ce6:	c0 68       	rjmp	80009cf2 <get_arg+0x246>
80009ce8:	e4 02 00 22 	add	r2,r2,r2<<0x2
80009cec:	2f f7       	sub	r7,-1
80009cee:	f4 02 00 12 	add	r2,r10,r2<<0x1
80009cf2:	0f 8a       	ld.ub	r10,r7[0x0]
80009cf4:	58 0a       	cp.w	r10,0
80009cf6:	c0 e0       	breq	80009d12 <get_arg+0x266>
80009cf8:	23 0a       	sub	r10,48
80009cfa:	58 9a       	cp.w	r10,9
80009cfc:	fe 98 ff f6 	brls	80009ce8 <get_arg+0x23c>
80009d00:	c0 98       	rjmp	80009d12 <get_arg+0x266>
80009d02:	2f f7       	sub	r7,-1
80009d04:	0f 8a       	ld.ub	r10,r7[0x0]
80009d06:	58 0a       	cp.w	r10,0
80009d08:	c0 50       	breq	80009d12 <get_arg+0x266>
80009d0a:	23 0a       	sub	r10,48
80009d0c:	58 9a       	cp.w	r10,9
80009d0e:	fe 98 ff fa 	brls	80009d02 <get_arg+0x256>
80009d12:	0e 9b       	mov	r11,r7
80009d14:	40 7c       	lddsp	r12,sp[0x1c]
80009d16:	30 ba       	mov	r10,11
80009d18:	f4 0c 18 00 	cp.b	r12,r10
80009d1c:	fe 91 fe f2 	brne	80009b00 <get_arg+0x54>
80009d20:	40 42       	lddsp	r2,sp[0x10]
80009d22:	17 8c       	ld.ub	r12,r11[0x0]
80009d24:	0a 32       	cp.w	r2,r5
80009d26:	5f 4a       	srge	r10
80009d28:	f0 0c 18 00 	cp.b	r12,r8
80009d2c:	5f 1c       	srne	r12
80009d2e:	f9 ea 00 0a 	and	r10,r12,r10
80009d32:	f0 0a 18 00 	cp.b	r10,r8
80009d36:	fe 91 fe cf 	brne	80009ad4 <get_arg+0x28>
80009d3a:	30 08       	mov	r8,0
80009d3c:	40 4e       	lddsp	lr,sp[0x10]
80009d3e:	17 8a       	ld.ub	r10,r11[0x0]
80009d40:	e2 05 00 21 	add	r1,r1,r5<<0x2
80009d44:	f0 0a 18 00 	cp.b	r10,r8
80009d48:	fc 09 17 10 	movne	r9,lr
80009d4c:	e6 05 00 38 	add	r8,r3,r5<<0x3
80009d50:	06 9e       	mov	lr,r3
80009d52:	c2 a8       	rjmp	80009da6 <get_arg+0x2fa>
80009d54:	62 0a       	ld.w	r10,r1[0x0]
80009d56:	58 3a       	cp.w	r10,3
80009d58:	c1 e0       	breq	80009d94 <get_arg+0x2e8>
80009d5a:	e0 89 00 07 	brgt	80009d68 <get_arg+0x2bc>
80009d5e:	58 1a       	cp.w	r10,1
80009d60:	c1 a0       	breq	80009d94 <get_arg+0x2e8>
80009d62:	58 2a       	cp.w	r10,2
80009d64:	c1 81       	brne	80009d94 <get_arg+0x2e8>
80009d66:	c0 58       	rjmp	80009d70 <get_arg+0x2c4>
80009d68:	58 5a       	cp.w	r10,5
80009d6a:	c0 c0       	breq	80009d82 <get_arg+0x2d6>
80009d6c:	c0 b5       	brlt	80009d82 <get_arg+0x2d6>
80009d6e:	c1 38       	rjmp	80009d94 <get_arg+0x2e8>
80009d70:	6c 0a       	ld.w	r10,r6[0x0]
80009d72:	f4 cc ff f8 	sub	r12,r10,-8
80009d76:	8d 0c       	st.w	r6[0x0],r12
80009d78:	f4 e2 00 00 	ld.d	r2,r10[0]
80009d7c:	f0 e3 00 00 	st.d	r8[0],r2
80009d80:	c1 08       	rjmp	80009da0 <get_arg+0x2f4>
80009d82:	6c 0a       	ld.w	r10,r6[0x0]
80009d84:	f4 cc ff f8 	sub	r12,r10,-8
80009d88:	8d 0c       	st.w	r6[0x0],r12
80009d8a:	f4 e2 00 00 	ld.d	r2,r10[0]
80009d8e:	f0 e3 00 00 	st.d	r8[0],r2
80009d92:	c0 78       	rjmp	80009da0 <get_arg+0x2f4>
80009d94:	6c 0a       	ld.w	r10,r6[0x0]
80009d96:	f4 cc ff fc 	sub	r12,r10,-4
80009d9a:	8d 0c       	st.w	r6[0x0],r12
80009d9c:	74 0a       	ld.w	r10,r10[0x0]
80009d9e:	91 0a       	st.w	r8[0x0],r10
80009da0:	2f f5       	sub	r5,-1
80009da2:	2f 88       	sub	r8,-8
80009da4:	2f c1       	sub	r1,-4
80009da6:	12 35       	cp.w	r5,r9
80009da8:	fe 9a ff d6 	brle	80009d54 <get_arg+0x2a8>
80009dac:	1c 93       	mov	r3,lr
80009dae:	40 52       	lddsp	r2,sp[0x14]
80009db0:	40 6e       	lddsp	lr,sp[0x18]
80009db2:	85 05       	st.w	r2[0x0],r5
80009db4:	9d 0b       	st.w	lr[0x0],r11
80009db6:	40 4b       	lddsp	r11,sp[0x10]
80009db8:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80009dbc:	2f 8d       	sub	sp,-32
80009dbe:	d8 32       	popm	r0-r7,pc

80009dc0 <__sprint_r>:
80009dc0:	d4 21       	pushm	r4-r7,lr
80009dc2:	14 97       	mov	r7,r10
80009dc4:	74 28       	ld.w	r8,r10[0x8]
80009dc6:	58 08       	cp.w	r8,0
80009dc8:	c0 41       	brne	80009dd0 <__sprint_r+0x10>
80009dca:	95 18       	st.w	r10[0x4],r8
80009dcc:	10 9c       	mov	r12,r8
80009dce:	d8 22       	popm	r4-r7,pc
80009dd0:	e0 a0 17 a2 	rcall	8000cd14 <__sfvwrite_r>
80009dd4:	30 08       	mov	r8,0
80009dd6:	8f 18       	st.w	r7[0x4],r8
80009dd8:	8f 28       	st.w	r7[0x8],r8
80009dda:	d8 22       	popm	r4-r7,pc

80009ddc <_vfprintf_r>:
80009ddc:	d4 31       	pushm	r0-r7,lr
80009dde:	fa cd 06 bc 	sub	sp,sp,1724
80009de2:	51 09       	stdsp	sp[0x40],r9
80009de4:	16 91       	mov	r1,r11
80009de6:	14 97       	mov	r7,r10
80009de8:	18 95       	mov	r5,r12
80009dea:	e0 a0 19 03 	rcall	8000cff0 <_localeconv_r>
80009dee:	78 0c       	ld.w	r12,r12[0x0]
80009df0:	50 cc       	stdsp	sp[0x30],r12
80009df2:	58 05       	cp.w	r5,0
80009df4:	c0 70       	breq	80009e02 <_vfprintf_r+0x26>
80009df6:	6a 68       	ld.w	r8,r5[0x18]
80009df8:	58 08       	cp.w	r8,0
80009dfa:	c0 41       	brne	80009e02 <_vfprintf_r+0x26>
80009dfc:	0a 9c       	mov	r12,r5
80009dfe:	e0 a0 17 3d 	rcall	8000cc78 <__sinit>
80009e02:	fe c8 a9 da 	sub	r8,pc,-22054
80009e06:	10 31       	cp.w	r1,r8
80009e08:	c0 31       	brne	80009e0e <_vfprintf_r+0x32>
80009e0a:	6a 01       	ld.w	r1,r5[0x0]
80009e0c:	c0 c8       	rjmp	80009e24 <_vfprintf_r+0x48>
80009e0e:	fe c8 a9 c6 	sub	r8,pc,-22074
80009e12:	10 31       	cp.w	r1,r8
80009e14:	c0 31       	brne	80009e1a <_vfprintf_r+0x3e>
80009e16:	6a 11       	ld.w	r1,r5[0x4]
80009e18:	c0 68       	rjmp	80009e24 <_vfprintf_r+0x48>
80009e1a:	fe c8 a9 b2 	sub	r8,pc,-22094
80009e1e:	10 31       	cp.w	r1,r8
80009e20:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80009e24:	82 68       	ld.sh	r8,r1[0xc]
80009e26:	ed b8 00 03 	bld	r8,0x3
80009e2a:	c0 41       	brne	80009e32 <_vfprintf_r+0x56>
80009e2c:	62 48       	ld.w	r8,r1[0x10]
80009e2e:	58 08       	cp.w	r8,0
80009e30:	c0 71       	brne	80009e3e <_vfprintf_r+0x62>
80009e32:	02 9b       	mov	r11,r1
80009e34:	0a 9c       	mov	r12,r5
80009e36:	e0 a0 0f 5d 	rcall	8000bcf0 <__swsetup_r>
80009e3a:	e0 81 0f 54 	brne	8000bce2 <_vfprintf_r+0x1f06>
80009e3e:	82 68       	ld.sh	r8,r1[0xc]
80009e40:	10 99       	mov	r9,r8
80009e42:	e2 19 00 1a 	andl	r9,0x1a,COH
80009e46:	58 a9       	cp.w	r9,10
80009e48:	c3 c1       	brne	80009ec0 <_vfprintf_r+0xe4>
80009e4a:	82 79       	ld.sh	r9,r1[0xe]
80009e4c:	30 0a       	mov	r10,0
80009e4e:	f4 09 19 00 	cp.h	r9,r10
80009e52:	c3 75       	brlt	80009ec0 <_vfprintf_r+0xe4>
80009e54:	a1 d8       	cbr	r8,0x1
80009e56:	fb 58 05 d0 	st.h	sp[1488],r8
80009e5a:	62 88       	ld.w	r8,r1[0x20]
80009e5c:	fb 48 05 e4 	st.w	sp[1508],r8
80009e60:	62 a8       	ld.w	r8,r1[0x28]
80009e62:	fb 48 05 ec 	st.w	sp[1516],r8
80009e66:	fa c8 ff bc 	sub	r8,sp,-68
80009e6a:	fb 48 05 d4 	st.w	sp[1492],r8
80009e6e:	fb 48 05 c4 	st.w	sp[1476],r8
80009e72:	e0 68 04 00 	mov	r8,1024
80009e76:	fb 48 05 d8 	st.w	sp[1496],r8
80009e7a:	fb 48 05 cc 	st.w	sp[1484],r8
80009e7e:	30 08       	mov	r8,0
80009e80:	fb 59 05 d2 	st.h	sp[1490],r9
80009e84:	0e 9a       	mov	r10,r7
80009e86:	41 09       	lddsp	r9,sp[0x40]
80009e88:	fa c7 fa 3c 	sub	r7,sp,-1476
80009e8c:	fb 48 05 dc 	st.w	sp[1500],r8
80009e90:	0a 9c       	mov	r12,r5
80009e92:	0e 9b       	mov	r11,r7
80009e94:	ca 4f       	rcall	80009ddc <_vfprintf_r>
80009e96:	50 bc       	stdsp	sp[0x2c],r12
80009e98:	c0 95       	brlt	80009eaa <_vfprintf_r+0xce>
80009e9a:	0e 9b       	mov	r11,r7
80009e9c:	0a 9c       	mov	r12,r5
80009e9e:	e0 a0 16 15 	rcall	8000cac8 <_fflush_r>
80009ea2:	40 be       	lddsp	lr,sp[0x2c]
80009ea4:	f9 be 01 ff 	movne	lr,-1
80009ea8:	50 be       	stdsp	sp[0x2c],lr
80009eaa:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80009eae:	ed b8 00 06 	bld	r8,0x6
80009eb2:	e0 81 0f 1a 	brne	8000bce6 <_vfprintf_r+0x1f0a>
80009eb6:	82 68       	ld.sh	r8,r1[0xc]
80009eb8:	a7 a8       	sbr	r8,0x6
80009eba:	a2 68       	st.h	r1[0xc],r8
80009ebc:	e0 8f 0f 15 	bral	8000bce6 <_vfprintf_r+0x1f0a>
80009ec0:	30 08       	mov	r8,0
80009ec2:	fb 48 06 b4 	st.w	sp[1716],r8
80009ec6:	fb 48 06 90 	st.w	sp[1680],r8
80009eca:	fb 48 06 8c 	st.w	sp[1676],r8
80009ece:	fb 48 06 b0 	st.w	sp[1712],r8
80009ed2:	30 08       	mov	r8,0
80009ed4:	30 09       	mov	r9,0
80009ed6:	50 a7       	stdsp	sp[0x28],r7
80009ed8:	50 78       	stdsp	sp[0x1c],r8
80009eda:	fa c3 f9 e0 	sub	r3,sp,-1568
80009ede:	3f f8       	mov	r8,-1
80009ee0:	50 59       	stdsp	sp[0x14],r9
80009ee2:	fb 43 06 88 	st.w	sp[1672],r3
80009ee6:	fb 48 05 44 	st.w	sp[1348],r8
80009eea:	12 9c       	mov	r12,r9
80009eec:	50 69       	stdsp	sp[0x18],r9
80009eee:	50 d9       	stdsp	sp[0x34],r9
80009ef0:	50 e9       	stdsp	sp[0x38],r9
80009ef2:	50 b9       	stdsp	sp[0x2c],r9
80009ef4:	12 97       	mov	r7,r9
80009ef6:	0a 94       	mov	r4,r5
80009ef8:	40 a2       	lddsp	r2,sp[0x28]
80009efa:	32 5a       	mov	r10,37
80009efc:	30 08       	mov	r8,0
80009efe:	c0 28       	rjmp	80009f02 <_vfprintf_r+0x126>
80009f00:	2f f2       	sub	r2,-1
80009f02:	05 89       	ld.ub	r9,r2[0x0]
80009f04:	f0 09 18 00 	cp.b	r9,r8
80009f08:	5f 1b       	srne	r11
80009f0a:	f4 09 18 00 	cp.b	r9,r10
80009f0e:	5f 19       	srne	r9
80009f10:	f3 eb 00 0b 	and	r11,r9,r11
80009f14:	f0 0b 18 00 	cp.b	r11,r8
80009f18:	cf 41       	brne	80009f00 <_vfprintf_r+0x124>
80009f1a:	40 ab       	lddsp	r11,sp[0x28]
80009f1c:	e4 0b 01 06 	sub	r6,r2,r11
80009f20:	c1 e0       	breq	80009f5c <_vfprintf_r+0x180>
80009f22:	fa f8 06 90 	ld.w	r8,sp[1680]
80009f26:	0c 08       	add	r8,r6
80009f28:	87 0b       	st.w	r3[0x0],r11
80009f2a:	fb 48 06 90 	st.w	sp[1680],r8
80009f2e:	87 16       	st.w	r3[0x4],r6
80009f30:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009f34:	2f f8       	sub	r8,-1
80009f36:	fb 48 06 8c 	st.w	sp[1676],r8
80009f3a:	58 78       	cp.w	r8,7
80009f3c:	e0 89 00 04 	brgt	80009f44 <_vfprintf_r+0x168>
80009f40:	2f 83       	sub	r3,-8
80009f42:	c0 a8       	rjmp	80009f56 <_vfprintf_r+0x17a>
80009f44:	fa ca f9 78 	sub	r10,sp,-1672
80009f48:	02 9b       	mov	r11,r1
80009f4a:	08 9c       	mov	r12,r4
80009f4c:	c3 af       	rcall	80009dc0 <__sprint_r>
80009f4e:	e0 81 0e c6 	brne	8000bcda <_vfprintf_r+0x1efe>
80009f52:	fa c3 f9 e0 	sub	r3,sp,-1568
80009f56:	40 ba       	lddsp	r10,sp[0x2c]
80009f58:	0c 0a       	add	r10,r6
80009f5a:	50 ba       	stdsp	sp[0x2c],r10
80009f5c:	05 89       	ld.ub	r9,r2[0x0]
80009f5e:	30 08       	mov	r8,0
80009f60:	f0 09 18 00 	cp.b	r9,r8
80009f64:	e0 80 0e aa 	breq	8000bcb8 <_vfprintf_r+0x1edc>
80009f68:	30 09       	mov	r9,0
80009f6a:	fb 68 06 bb 	st.b	sp[1723],r8
80009f6e:	0e 96       	mov	r6,r7
80009f70:	e4 c8 ff ff 	sub	r8,r2,-1
80009f74:	3f fe       	mov	lr,-1
80009f76:	50 93       	stdsp	sp[0x24],r3
80009f78:	50 41       	stdsp	sp[0x10],r1
80009f7a:	0e 93       	mov	r3,r7
80009f7c:	04 91       	mov	r1,r2
80009f7e:	50 89       	stdsp	sp[0x20],r9
80009f80:	50 a8       	stdsp	sp[0x28],r8
80009f82:	50 2e       	stdsp	sp[0x8],lr
80009f84:	50 39       	stdsp	sp[0xc],r9
80009f86:	12 95       	mov	r5,r9
80009f88:	12 90       	mov	r0,r9
80009f8a:	10 97       	mov	r7,r8
80009f8c:	08 92       	mov	r2,r4
80009f8e:	c0 78       	rjmp	80009f9c <_vfprintf_r+0x1c0>
80009f90:	3f fc       	mov	r12,-1
80009f92:	08 97       	mov	r7,r4
80009f94:	50 2c       	stdsp	sp[0x8],r12
80009f96:	c0 38       	rjmp	80009f9c <_vfprintf_r+0x1c0>
80009f98:	30 0b       	mov	r11,0
80009f9a:	50 3b       	stdsp	sp[0xc],r11
80009f9c:	0f 38       	ld.ub	r8,r7++
80009f9e:	c0 28       	rjmp	80009fa2 <_vfprintf_r+0x1c6>
80009fa0:	12 90       	mov	r0,r9
80009fa2:	f0 c9 00 20 	sub	r9,r8,32
80009fa6:	e0 49 00 58 	cp.w	r9,88
80009faa:	e0 8b 0a 30 	brhi	8000b40a <_vfprintf_r+0x162e>
80009fae:	fe ca af 2e 	sub	r10,pc,-20690
80009fb2:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80009fb6:	50 a7       	stdsp	sp[0x28],r7
80009fb8:	50 80       	stdsp	sp[0x20],r0
80009fba:	0c 97       	mov	r7,r6
80009fbc:	04 94       	mov	r4,r2
80009fbe:	06 96       	mov	r6,r3
80009fc0:	02 92       	mov	r2,r1
80009fc2:	fe c9 ad 06 	sub	r9,pc,-21242
80009fc6:	40 93       	lddsp	r3,sp[0x24]
80009fc8:	10 90       	mov	r0,r8
80009fca:	40 41       	lddsp	r1,sp[0x10]
80009fcc:	50 d9       	stdsp	sp[0x34],r9
80009fce:	e0 8f 08 8e 	bral	8000b0ea <_vfprintf_r+0x130e>
80009fd2:	30 08       	mov	r8,0
80009fd4:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80009fd8:	f0 09 18 00 	cp.b	r9,r8
80009fdc:	ce 01       	brne	80009f9c <_vfprintf_r+0x1c0>
80009fde:	32 08       	mov	r8,32
80009fe0:	c6 e8       	rjmp	8000a0bc <_vfprintf_r+0x2e0>
80009fe2:	a1 a5       	sbr	r5,0x0
80009fe4:	cd cb       	rjmp	80009f9c <_vfprintf_r+0x1c0>
80009fe6:	0f 89       	ld.ub	r9,r7[0x0]
80009fe8:	f2 c8 00 30 	sub	r8,r9,48
80009fec:	58 98       	cp.w	r8,9
80009fee:	e0 8b 00 1d 	brhi	8000a028 <_vfprintf_r+0x24c>
80009ff2:	ee c8 ff ff 	sub	r8,r7,-1
80009ff6:	30 0b       	mov	r11,0
80009ff8:	23 09       	sub	r9,48
80009ffa:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80009ffe:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000a002:	11 39       	ld.ub	r9,r8++
8000a004:	f2 ca 00 30 	sub	r10,r9,48
8000a008:	58 9a       	cp.w	r10,9
8000a00a:	fe 98 ff f7 	brls	80009ff8 <_vfprintf_r+0x21c>
8000a00e:	e0 49 00 24 	cp.w	r9,36
8000a012:	cc 31       	brne	80009f98 <_vfprintf_r+0x1bc>
8000a014:	e0 4b 00 20 	cp.w	r11,32
8000a018:	e0 89 0e 60 	brgt	8000bcd8 <_vfprintf_r+0x1efc>
8000a01c:	20 1b       	sub	r11,1
8000a01e:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000a022:	12 3b       	cp.w	r11,r9
8000a024:	c0 95       	brlt	8000a036 <_vfprintf_r+0x25a>
8000a026:	c1 08       	rjmp	8000a046 <_vfprintf_r+0x26a>
8000a028:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000a02c:	ec ca ff ff 	sub	r10,r6,-1
8000a030:	12 36       	cp.w	r6,r9
8000a032:	c1 f5       	brlt	8000a070 <_vfprintf_r+0x294>
8000a034:	c2 68       	rjmp	8000a080 <_vfprintf_r+0x2a4>
8000a036:	fa ce f9 44 	sub	lr,sp,-1724
8000a03a:	10 97       	mov	r7,r8
8000a03c:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
8000a040:	f6 f0 fd 88 	ld.w	r0,r11[-632]
8000a044:	c3 58       	rjmp	8000a0ae <_vfprintf_r+0x2d2>
8000a046:	10 97       	mov	r7,r8
8000a048:	fa c8 f9 50 	sub	r8,sp,-1712
8000a04c:	1a d8       	st.w	--sp,r8
8000a04e:	fa c8 fa b8 	sub	r8,sp,-1352
8000a052:	1a d8       	st.w	--sp,r8
8000a054:	fa c8 fb b4 	sub	r8,sp,-1100
8000a058:	02 9a       	mov	r10,r1
8000a05a:	1a d8       	st.w	--sp,r8
8000a05c:	04 9c       	mov	r12,r2
8000a05e:	fa c8 f9 40 	sub	r8,sp,-1728
8000a062:	fa c9 ff b4 	sub	r9,sp,-76
8000a066:	fe b0 fd 23 	rcall	80009aac <get_arg>
8000a06a:	2f dd       	sub	sp,-12
8000a06c:	78 00       	ld.w	r0,r12[0x0]
8000a06e:	c2 08       	rjmp	8000a0ae <_vfprintf_r+0x2d2>
8000a070:	fa cc f9 44 	sub	r12,sp,-1724
8000a074:	14 96       	mov	r6,r10
8000a076:	f8 03 00 38 	add	r8,r12,r3<<0x3
8000a07a:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000a07e:	c1 88       	rjmp	8000a0ae <_vfprintf_r+0x2d2>
8000a080:	41 08       	lddsp	r8,sp[0x40]
8000a082:	59 f9       	cp.w	r9,31
8000a084:	e0 89 00 11 	brgt	8000a0a6 <_vfprintf_r+0x2ca>
8000a088:	f0 cb ff fc 	sub	r11,r8,-4
8000a08c:	51 0b       	stdsp	sp[0x40],r11
8000a08e:	70 00       	ld.w	r0,r8[0x0]
8000a090:	fa cb f9 44 	sub	r11,sp,-1724
8000a094:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000a098:	f1 40 fd 88 	st.w	r8[-632],r0
8000a09c:	2f f9       	sub	r9,-1
8000a09e:	14 96       	mov	r6,r10
8000a0a0:	fb 49 06 b4 	st.w	sp[1716],r9
8000a0a4:	c0 58       	rjmp	8000a0ae <_vfprintf_r+0x2d2>
8000a0a6:	70 00       	ld.w	r0,r8[0x0]
8000a0a8:	14 96       	mov	r6,r10
8000a0aa:	2f c8       	sub	r8,-4
8000a0ac:	51 08       	stdsp	sp[0x40],r8
8000a0ae:	58 00       	cp.w	r0,0
8000a0b0:	fe 94 ff 76 	brge	80009f9c <_vfprintf_r+0x1c0>
8000a0b4:	5c 30       	neg	r0
8000a0b6:	a3 a5       	sbr	r5,0x2
8000a0b8:	c7 2b       	rjmp	80009f9c <_vfprintf_r+0x1c0>
8000a0ba:	32 b8       	mov	r8,43
8000a0bc:	fb 68 06 bb 	st.b	sp[1723],r8
8000a0c0:	c6 eb       	rjmp	80009f9c <_vfprintf_r+0x1c0>
8000a0c2:	0f 38       	ld.ub	r8,r7++
8000a0c4:	e0 48 00 2a 	cp.w	r8,42
8000a0c8:	c0 30       	breq	8000a0ce <_vfprintf_r+0x2f2>
8000a0ca:	30 09       	mov	r9,0
8000a0cc:	c7 98       	rjmp	8000a1be <_vfprintf_r+0x3e2>
8000a0ce:	0f 88       	ld.ub	r8,r7[0x0]
8000a0d0:	f0 c9 00 30 	sub	r9,r8,48
8000a0d4:	58 99       	cp.w	r9,9
8000a0d6:	e0 8b 00 1f 	brhi	8000a114 <_vfprintf_r+0x338>
8000a0da:	ee c4 ff ff 	sub	r4,r7,-1
8000a0de:	30 0b       	mov	r11,0
8000a0e0:	23 08       	sub	r8,48
8000a0e2:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000a0e6:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000a0ea:	09 38       	ld.ub	r8,r4++
8000a0ec:	f0 c9 00 30 	sub	r9,r8,48
8000a0f0:	58 99       	cp.w	r9,9
8000a0f2:	fe 98 ff f7 	brls	8000a0e0 <_vfprintf_r+0x304>
8000a0f6:	e0 48 00 24 	cp.w	r8,36
8000a0fa:	fe 91 ff 4f 	brne	80009f98 <_vfprintf_r+0x1bc>
8000a0fe:	e0 4b 00 20 	cp.w	r11,32
8000a102:	e0 89 0d eb 	brgt	8000bcd8 <_vfprintf_r+0x1efc>
8000a106:	20 1b       	sub	r11,1
8000a108:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a10c:	10 3b       	cp.w	r11,r8
8000a10e:	c0 a5       	brlt	8000a122 <_vfprintf_r+0x346>
8000a110:	c1 18       	rjmp	8000a132 <_vfprintf_r+0x356>
8000a112:	d7 03       	nop
8000a114:	fa fa 06 b4 	ld.w	r10,sp[1716]
8000a118:	ec c9 ff ff 	sub	r9,r6,-1
8000a11c:	14 36       	cp.w	r6,r10
8000a11e:	c1 f5       	brlt	8000a15c <_vfprintf_r+0x380>
8000a120:	c2 88       	rjmp	8000a170 <_vfprintf_r+0x394>
8000a122:	fa ca f9 44 	sub	r10,sp,-1724
8000a126:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000a12a:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000a12e:	50 2b       	stdsp	sp[0x8],r11
8000a130:	c3 c8       	rjmp	8000a1a8 <_vfprintf_r+0x3cc>
8000a132:	fa c8 f9 50 	sub	r8,sp,-1712
8000a136:	1a d8       	st.w	--sp,r8
8000a138:	fa c8 fa b8 	sub	r8,sp,-1352
8000a13c:	1a d8       	st.w	--sp,r8
8000a13e:	fa c8 fb b4 	sub	r8,sp,-1100
8000a142:	02 9a       	mov	r10,r1
8000a144:	1a d8       	st.w	--sp,r8
8000a146:	04 9c       	mov	r12,r2
8000a148:	fa c8 f9 40 	sub	r8,sp,-1728
8000a14c:	fa c9 ff b4 	sub	r9,sp,-76
8000a150:	fe b0 fc ae 	rcall	80009aac <get_arg>
8000a154:	2f dd       	sub	sp,-12
8000a156:	78 0c       	ld.w	r12,r12[0x0]
8000a158:	50 2c       	stdsp	sp[0x8],r12
8000a15a:	c2 78       	rjmp	8000a1a8 <_vfprintf_r+0x3cc>
8000a15c:	12 96       	mov	r6,r9
8000a15e:	0e 94       	mov	r4,r7
8000a160:	fa c9 f9 44 	sub	r9,sp,-1724
8000a164:	f2 03 00 38 	add	r8,r9,r3<<0x3
8000a168:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000a16c:	50 28       	stdsp	sp[0x8],r8
8000a16e:	c1 d8       	rjmp	8000a1a8 <_vfprintf_r+0x3cc>
8000a170:	41 08       	lddsp	r8,sp[0x40]
8000a172:	59 fa       	cp.w	r10,31
8000a174:	e0 89 00 14 	brgt	8000a19c <_vfprintf_r+0x3c0>
8000a178:	f0 cb ff fc 	sub	r11,r8,-4
8000a17c:	70 08       	ld.w	r8,r8[0x0]
8000a17e:	51 0b       	stdsp	sp[0x40],r11
8000a180:	50 28       	stdsp	sp[0x8],r8
8000a182:	fa c6 f9 44 	sub	r6,sp,-1724
8000a186:	40 2e       	lddsp	lr,sp[0x8]
8000a188:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000a18c:	f1 4e fd 88 	st.w	r8[-632],lr
8000a190:	2f fa       	sub	r10,-1
8000a192:	0e 94       	mov	r4,r7
8000a194:	fb 4a 06 b4 	st.w	sp[1716],r10
8000a198:	12 96       	mov	r6,r9
8000a19a:	c0 78       	rjmp	8000a1a8 <_vfprintf_r+0x3cc>
8000a19c:	70 0c       	ld.w	r12,r8[0x0]
8000a19e:	0e 94       	mov	r4,r7
8000a1a0:	2f c8       	sub	r8,-4
8000a1a2:	50 2c       	stdsp	sp[0x8],r12
8000a1a4:	12 96       	mov	r6,r9
8000a1a6:	51 08       	stdsp	sp[0x40],r8
8000a1a8:	40 2b       	lddsp	r11,sp[0x8]
8000a1aa:	58 0b       	cp.w	r11,0
8000a1ac:	fe 95 fe f2 	brlt	80009f90 <_vfprintf_r+0x1b4>
8000a1b0:	08 97       	mov	r7,r4
8000a1b2:	cf 5a       	rjmp	80009f9c <_vfprintf_r+0x1c0>
8000a1b4:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000a1b8:	0f 38       	ld.ub	r8,r7++
8000a1ba:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000a1be:	f0 ca 00 30 	sub	r10,r8,48
8000a1c2:	58 9a       	cp.w	r10,9
8000a1c4:	fe 98 ff f8 	brls	8000a1b4 <_vfprintf_r+0x3d8>
8000a1c8:	3f fa       	mov	r10,-1
8000a1ca:	f2 0a 0c 49 	max	r9,r9,r10
8000a1ce:	50 29       	stdsp	sp[0x8],r9
8000a1d0:	ce 9a       	rjmp	80009fa2 <_vfprintf_r+0x1c6>
8000a1d2:	a7 b5       	sbr	r5,0x7
8000a1d4:	ce 4a       	rjmp	80009f9c <_vfprintf_r+0x1c0>
8000a1d6:	30 09       	mov	r9,0
8000a1d8:	23 08       	sub	r8,48
8000a1da:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000a1de:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000a1e2:	0f 38       	ld.ub	r8,r7++
8000a1e4:	f0 ca 00 30 	sub	r10,r8,48
8000a1e8:	58 9a       	cp.w	r10,9
8000a1ea:	fe 98 ff f7 	brls	8000a1d8 <_vfprintf_r+0x3fc>
8000a1ee:	e0 48 00 24 	cp.w	r8,36
8000a1f2:	fe 91 fe d7 	brne	80009fa0 <_vfprintf_r+0x1c4>
8000a1f6:	e0 49 00 20 	cp.w	r9,32
8000a1fa:	e0 89 0d 6f 	brgt	8000bcd8 <_vfprintf_r+0x1efc>
8000a1fe:	f2 c3 00 01 	sub	r3,r9,1
8000a202:	30 19       	mov	r9,1
8000a204:	50 39       	stdsp	sp[0xc],r9
8000a206:	cc ba       	rjmp	80009f9c <_vfprintf_r+0x1c0>
8000a208:	a3 b5       	sbr	r5,0x3
8000a20a:	cc 9a       	rjmp	80009f9c <_vfprintf_r+0x1c0>
8000a20c:	a7 a5       	sbr	r5,0x6
8000a20e:	cc 7a       	rjmp	80009f9c <_vfprintf_r+0x1c0>
8000a210:	0a 98       	mov	r8,r5
8000a212:	a5 b5       	sbr	r5,0x5
8000a214:	a5 a8       	sbr	r8,0x4
8000a216:	0f 89       	ld.ub	r9,r7[0x0]
8000a218:	36 ce       	mov	lr,108
8000a21a:	fc 09 18 00 	cp.b	r9,lr
8000a21e:	f7 b7 00 ff 	subeq	r7,-1
8000a222:	f0 05 17 10 	movne	r5,r8
8000a226:	cb ba       	rjmp	80009f9c <_vfprintf_r+0x1c0>
8000a228:	a5 b5       	sbr	r5,0x5
8000a22a:	cb 9a       	rjmp	80009f9c <_vfprintf_r+0x1c0>
8000a22c:	50 a7       	stdsp	sp[0x28],r7
8000a22e:	50 80       	stdsp	sp[0x20],r0
8000a230:	0c 97       	mov	r7,r6
8000a232:	10 90       	mov	r0,r8
8000a234:	06 96       	mov	r6,r3
8000a236:	04 94       	mov	r4,r2
8000a238:	40 93       	lddsp	r3,sp[0x24]
8000a23a:	02 92       	mov	r2,r1
8000a23c:	0e 99       	mov	r9,r7
8000a23e:	40 41       	lddsp	r1,sp[0x10]
8000a240:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a244:	40 3c       	lddsp	r12,sp[0xc]
8000a246:	58 0c       	cp.w	r12,0
8000a248:	c1 d0       	breq	8000a282 <_vfprintf_r+0x4a6>
8000a24a:	10 36       	cp.w	r6,r8
8000a24c:	c0 64       	brge	8000a258 <_vfprintf_r+0x47c>
8000a24e:	fa cb f9 44 	sub	r11,sp,-1724
8000a252:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a256:	c1 d8       	rjmp	8000a290 <_vfprintf_r+0x4b4>
8000a258:	fa c8 f9 50 	sub	r8,sp,-1712
8000a25c:	1a d8       	st.w	--sp,r8
8000a25e:	fa c8 fa b8 	sub	r8,sp,-1352
8000a262:	1a d8       	st.w	--sp,r8
8000a264:	fa c8 fb b4 	sub	r8,sp,-1100
8000a268:	1a d8       	st.w	--sp,r8
8000a26a:	fa c8 f9 40 	sub	r8,sp,-1728
8000a26e:	fa c9 ff b4 	sub	r9,sp,-76
8000a272:	04 9a       	mov	r10,r2
8000a274:	0c 9b       	mov	r11,r6
8000a276:	08 9c       	mov	r12,r4
8000a278:	fe b0 fc 1a 	rcall	80009aac <get_arg>
8000a27c:	2f dd       	sub	sp,-12
8000a27e:	19 b8       	ld.ub	r8,r12[0x3]
8000a280:	c2 28       	rjmp	8000a2c4 <_vfprintf_r+0x4e8>
8000a282:	2f f7       	sub	r7,-1
8000a284:	10 39       	cp.w	r9,r8
8000a286:	c0 84       	brge	8000a296 <_vfprintf_r+0x4ba>
8000a288:	fa ca f9 44 	sub	r10,sp,-1724
8000a28c:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000a290:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000a294:	c1 88       	rjmp	8000a2c4 <_vfprintf_r+0x4e8>
8000a296:	41 09       	lddsp	r9,sp[0x40]
8000a298:	59 f8       	cp.w	r8,31
8000a29a:	e0 89 00 12 	brgt	8000a2be <_vfprintf_r+0x4e2>
8000a29e:	f2 ca ff fc 	sub	r10,r9,-4
8000a2a2:	51 0a       	stdsp	sp[0x40],r10
8000a2a4:	72 09       	ld.w	r9,r9[0x0]
8000a2a6:	fa c6 f9 44 	sub	r6,sp,-1724
8000a2aa:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000a2ae:	2f f8       	sub	r8,-1
8000a2b0:	f5 49 fd 88 	st.w	r10[-632],r9
8000a2b4:	fb 48 06 b4 	st.w	sp[1716],r8
8000a2b8:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
8000a2bc:	c0 48       	rjmp	8000a2c4 <_vfprintf_r+0x4e8>
8000a2be:	13 b8       	ld.ub	r8,r9[0x3]
8000a2c0:	2f c9       	sub	r9,-4
8000a2c2:	51 09       	stdsp	sp[0x40],r9
8000a2c4:	fb 68 06 60 	st.b	sp[1632],r8
8000a2c8:	30 0e       	mov	lr,0
8000a2ca:	30 08       	mov	r8,0
8000a2cc:	30 12       	mov	r2,1
8000a2ce:	fb 68 06 bb 	st.b	sp[1723],r8
8000a2d2:	50 2e       	stdsp	sp[0x8],lr
8000a2d4:	e0 8f 08 ad 	bral	8000b42e <_vfprintf_r+0x1652>
8000a2d8:	50 a7       	stdsp	sp[0x28],r7
8000a2da:	50 80       	stdsp	sp[0x20],r0
8000a2dc:	0c 97       	mov	r7,r6
8000a2de:	04 94       	mov	r4,r2
8000a2e0:	06 96       	mov	r6,r3
8000a2e2:	02 92       	mov	r2,r1
8000a2e4:	40 93       	lddsp	r3,sp[0x24]
8000a2e6:	10 90       	mov	r0,r8
8000a2e8:	40 41       	lddsp	r1,sp[0x10]
8000a2ea:	a5 a5       	sbr	r5,0x4
8000a2ec:	c0 a8       	rjmp	8000a300 <_vfprintf_r+0x524>
8000a2ee:	50 a7       	stdsp	sp[0x28],r7
8000a2f0:	50 80       	stdsp	sp[0x20],r0
8000a2f2:	0c 97       	mov	r7,r6
8000a2f4:	04 94       	mov	r4,r2
8000a2f6:	06 96       	mov	r6,r3
8000a2f8:	02 92       	mov	r2,r1
8000a2fa:	40 93       	lddsp	r3,sp[0x24]
8000a2fc:	10 90       	mov	r0,r8
8000a2fe:	40 41       	lddsp	r1,sp[0x10]
8000a300:	ed b5 00 05 	bld	r5,0x5
8000a304:	c5 11       	brne	8000a3a6 <_vfprintf_r+0x5ca>
8000a306:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a30a:	40 3c       	lddsp	r12,sp[0xc]
8000a30c:	58 0c       	cp.w	r12,0
8000a30e:	c1 e0       	breq	8000a34a <_vfprintf_r+0x56e>
8000a310:	10 36       	cp.w	r6,r8
8000a312:	c0 64       	brge	8000a31e <_vfprintf_r+0x542>
8000a314:	fa cb f9 44 	sub	r11,sp,-1724
8000a318:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a31c:	c2 08       	rjmp	8000a35c <_vfprintf_r+0x580>
8000a31e:	fa c8 f9 50 	sub	r8,sp,-1712
8000a322:	1a d8       	st.w	--sp,r8
8000a324:	fa c8 fa b8 	sub	r8,sp,-1352
8000a328:	0c 9b       	mov	r11,r6
8000a32a:	1a d8       	st.w	--sp,r8
8000a32c:	fa c8 fb b4 	sub	r8,sp,-1100
8000a330:	1a d8       	st.w	--sp,r8
8000a332:	fa c9 ff b4 	sub	r9,sp,-76
8000a336:	fa c8 f9 40 	sub	r8,sp,-1728
8000a33a:	04 9a       	mov	r10,r2
8000a33c:	08 9c       	mov	r12,r4
8000a33e:	fe b0 fb b7 	rcall	80009aac <get_arg>
8000a342:	2f dd       	sub	sp,-12
8000a344:	78 1b       	ld.w	r11,r12[0x4]
8000a346:	78 09       	ld.w	r9,r12[0x0]
8000a348:	c2 b8       	rjmp	8000a39e <_vfprintf_r+0x5c2>
8000a34a:	ee ca ff ff 	sub	r10,r7,-1
8000a34e:	10 37       	cp.w	r7,r8
8000a350:	c0 b4       	brge	8000a366 <_vfprintf_r+0x58a>
8000a352:	fa c9 f9 44 	sub	r9,sp,-1724
8000a356:	14 97       	mov	r7,r10
8000a358:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000a35c:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000a360:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000a364:	c1 d8       	rjmp	8000a39e <_vfprintf_r+0x5c2>
8000a366:	41 09       	lddsp	r9,sp[0x40]
8000a368:	59 f8       	cp.w	r8,31
8000a36a:	e0 89 00 14 	brgt	8000a392 <_vfprintf_r+0x5b6>
8000a36e:	f2 cb ff f8 	sub	r11,r9,-8
8000a372:	51 0b       	stdsp	sp[0x40],r11
8000a374:	fa c6 f9 44 	sub	r6,sp,-1724
8000a378:	72 1b       	ld.w	r11,r9[0x4]
8000a37a:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000a37e:	72 09       	ld.w	r9,r9[0x0]
8000a380:	f9 4b fd 8c 	st.w	r12[-628],r11
8000a384:	f9 49 fd 88 	st.w	r12[-632],r9
8000a388:	2f f8       	sub	r8,-1
8000a38a:	14 97       	mov	r7,r10
8000a38c:	fb 48 06 b4 	st.w	sp[1716],r8
8000a390:	c0 78       	rjmp	8000a39e <_vfprintf_r+0x5c2>
8000a392:	f2 c8 ff f8 	sub	r8,r9,-8
8000a396:	72 1b       	ld.w	r11,r9[0x4]
8000a398:	14 97       	mov	r7,r10
8000a39a:	51 08       	stdsp	sp[0x40],r8
8000a39c:	72 09       	ld.w	r9,r9[0x0]
8000a39e:	16 98       	mov	r8,r11
8000a3a0:	fa e9 00 00 	st.d	sp[0],r8
8000a3a4:	ca e8       	rjmp	8000a500 <_vfprintf_r+0x724>
8000a3a6:	ed b5 00 04 	bld	r5,0x4
8000a3aa:	c1 71       	brne	8000a3d8 <_vfprintf_r+0x5fc>
8000a3ac:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a3b0:	40 3e       	lddsp	lr,sp[0xc]
8000a3b2:	58 0e       	cp.w	lr,0
8000a3b4:	c0 80       	breq	8000a3c4 <_vfprintf_r+0x5e8>
8000a3b6:	10 36       	cp.w	r6,r8
8000a3b8:	c6 94       	brge	8000a48a <_vfprintf_r+0x6ae>
8000a3ba:	fa cc f9 44 	sub	r12,sp,-1724
8000a3be:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000a3c2:	c8 28       	rjmp	8000a4c6 <_vfprintf_r+0x6ea>
8000a3c4:	ee ca ff ff 	sub	r10,r7,-1
8000a3c8:	10 37       	cp.w	r7,r8
8000a3ca:	e0 84 00 81 	brge	8000a4cc <_vfprintf_r+0x6f0>
8000a3ce:	fa cb f9 44 	sub	r11,sp,-1724
8000a3d2:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a3d6:	c7 78       	rjmp	8000a4c4 <_vfprintf_r+0x6e8>
8000a3d8:	ed b5 00 06 	bld	r5,0x6
8000a3dc:	c4 b1       	brne	8000a472 <_vfprintf_r+0x696>
8000a3de:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a3e2:	40 3c       	lddsp	r12,sp[0xc]
8000a3e4:	58 0c       	cp.w	r12,0
8000a3e6:	c1 d0       	breq	8000a420 <_vfprintf_r+0x644>
8000a3e8:	10 36       	cp.w	r6,r8
8000a3ea:	c0 64       	brge	8000a3f6 <_vfprintf_r+0x61a>
8000a3ec:	fa cb f9 44 	sub	r11,sp,-1724
8000a3f0:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a3f4:	c1 f8       	rjmp	8000a432 <_vfprintf_r+0x656>
8000a3f6:	fa c8 f9 50 	sub	r8,sp,-1712
8000a3fa:	1a d8       	st.w	--sp,r8
8000a3fc:	fa c8 fa b8 	sub	r8,sp,-1352
8000a400:	1a d8       	st.w	--sp,r8
8000a402:	fa c8 fb b4 	sub	r8,sp,-1100
8000a406:	1a d8       	st.w	--sp,r8
8000a408:	fa c8 f9 40 	sub	r8,sp,-1728
8000a40c:	fa c9 ff b4 	sub	r9,sp,-76
8000a410:	04 9a       	mov	r10,r2
8000a412:	0c 9b       	mov	r11,r6
8000a414:	08 9c       	mov	r12,r4
8000a416:	fe b0 fb 4b 	rcall	80009aac <get_arg>
8000a41a:	2f dd       	sub	sp,-12
8000a41c:	98 18       	ld.sh	r8,r12[0x2]
8000a41e:	c2 68       	rjmp	8000a46a <_vfprintf_r+0x68e>
8000a420:	ee ca ff ff 	sub	r10,r7,-1
8000a424:	10 37       	cp.w	r7,r8
8000a426:	c0 94       	brge	8000a438 <_vfprintf_r+0x65c>
8000a428:	fa c9 f9 44 	sub	r9,sp,-1724
8000a42c:	14 97       	mov	r7,r10
8000a42e:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000a432:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000a436:	c1 a8       	rjmp	8000a46a <_vfprintf_r+0x68e>
8000a438:	41 09       	lddsp	r9,sp[0x40]
8000a43a:	59 f8       	cp.w	r8,31
8000a43c:	e0 89 00 13 	brgt	8000a462 <_vfprintf_r+0x686>
8000a440:	f2 cb ff fc 	sub	r11,r9,-4
8000a444:	51 0b       	stdsp	sp[0x40],r11
8000a446:	72 09       	ld.w	r9,r9[0x0]
8000a448:	fa c6 f9 44 	sub	r6,sp,-1724
8000a44c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000a450:	2f f8       	sub	r8,-1
8000a452:	f7 49 fd 88 	st.w	r11[-632],r9
8000a456:	fb 48 06 b4 	st.w	sp[1716],r8
8000a45a:	14 97       	mov	r7,r10
8000a45c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000a460:	c0 58       	rjmp	8000a46a <_vfprintf_r+0x68e>
8000a462:	92 18       	ld.sh	r8,r9[0x2]
8000a464:	14 97       	mov	r7,r10
8000a466:	2f c9       	sub	r9,-4
8000a468:	51 09       	stdsp	sp[0x40],r9
8000a46a:	50 18       	stdsp	sp[0x4],r8
8000a46c:	bf 58       	asr	r8,0x1f
8000a46e:	50 08       	stdsp	sp[0x0],r8
8000a470:	c4 88       	rjmp	8000a500 <_vfprintf_r+0x724>
8000a472:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a476:	40 3c       	lddsp	r12,sp[0xc]
8000a478:	58 0c       	cp.w	r12,0
8000a47a:	c1 d0       	breq	8000a4b4 <_vfprintf_r+0x6d8>
8000a47c:	10 36       	cp.w	r6,r8
8000a47e:	c0 64       	brge	8000a48a <_vfprintf_r+0x6ae>
8000a480:	fa cb f9 44 	sub	r11,sp,-1724
8000a484:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a488:	c1 f8       	rjmp	8000a4c6 <_vfprintf_r+0x6ea>
8000a48a:	fa c8 f9 50 	sub	r8,sp,-1712
8000a48e:	1a d8       	st.w	--sp,r8
8000a490:	fa c8 fa b8 	sub	r8,sp,-1352
8000a494:	0c 9b       	mov	r11,r6
8000a496:	1a d8       	st.w	--sp,r8
8000a498:	fa c8 fb b4 	sub	r8,sp,-1100
8000a49c:	04 9a       	mov	r10,r2
8000a49e:	1a d8       	st.w	--sp,r8
8000a4a0:	08 9c       	mov	r12,r4
8000a4a2:	fa c8 f9 40 	sub	r8,sp,-1728
8000a4a6:	fa c9 ff b4 	sub	r9,sp,-76
8000a4aa:	fe b0 fb 01 	rcall	80009aac <get_arg>
8000a4ae:	2f dd       	sub	sp,-12
8000a4b0:	78 0b       	ld.w	r11,r12[0x0]
8000a4b2:	c2 48       	rjmp	8000a4fa <_vfprintf_r+0x71e>
8000a4b4:	ee ca ff ff 	sub	r10,r7,-1
8000a4b8:	10 37       	cp.w	r7,r8
8000a4ba:	c0 94       	brge	8000a4cc <_vfprintf_r+0x6f0>
8000a4bc:	fa c9 f9 44 	sub	r9,sp,-1724
8000a4c0:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000a4c4:	14 97       	mov	r7,r10
8000a4c6:	ec fb fd 88 	ld.w	r11,r6[-632]
8000a4ca:	c1 88       	rjmp	8000a4fa <_vfprintf_r+0x71e>
8000a4cc:	41 09       	lddsp	r9,sp[0x40]
8000a4ce:	59 f8       	cp.w	r8,31
8000a4d0:	e0 89 00 11 	brgt	8000a4f2 <_vfprintf_r+0x716>
8000a4d4:	f2 cb ff fc 	sub	r11,r9,-4
8000a4d8:	51 0b       	stdsp	sp[0x40],r11
8000a4da:	fa c6 f9 44 	sub	r6,sp,-1724
8000a4de:	72 0b       	ld.w	r11,r9[0x0]
8000a4e0:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000a4e4:	f3 4b fd 88 	st.w	r9[-632],r11
8000a4e8:	2f f8       	sub	r8,-1
8000a4ea:	14 97       	mov	r7,r10
8000a4ec:	fb 48 06 b4 	st.w	sp[1716],r8
8000a4f0:	c0 58       	rjmp	8000a4fa <_vfprintf_r+0x71e>
8000a4f2:	72 0b       	ld.w	r11,r9[0x0]
8000a4f4:	14 97       	mov	r7,r10
8000a4f6:	2f c9       	sub	r9,-4
8000a4f8:	51 09       	stdsp	sp[0x40],r9
8000a4fa:	50 1b       	stdsp	sp[0x4],r11
8000a4fc:	bf 5b       	asr	r11,0x1f
8000a4fe:	50 0b       	stdsp	sp[0x0],r11
8000a500:	fa ea 00 00 	ld.d	r10,sp[0]
8000a504:	58 0a       	cp.w	r10,0
8000a506:	5c 2b       	cpc	r11
8000a508:	c0 e4       	brge	8000a524 <_vfprintf_r+0x748>
8000a50a:	30 08       	mov	r8,0
8000a50c:	fa ea 00 00 	ld.d	r10,sp[0]
8000a510:	30 09       	mov	r9,0
8000a512:	f0 0a 01 0a 	sub	r10,r8,r10
8000a516:	f2 0b 01 4b 	sbc	r11,r9,r11
8000a51a:	32 d8       	mov	r8,45
8000a51c:	fa eb 00 00 	st.d	sp[0],r10
8000a520:	fb 68 06 bb 	st.b	sp[1723],r8
8000a524:	30 18       	mov	r8,1
8000a526:	e0 8f 06 fa 	bral	8000b31a <_vfprintf_r+0x153e>
8000a52a:	50 a7       	stdsp	sp[0x28],r7
8000a52c:	50 80       	stdsp	sp[0x20],r0
8000a52e:	0c 97       	mov	r7,r6
8000a530:	04 94       	mov	r4,r2
8000a532:	06 96       	mov	r6,r3
8000a534:	02 92       	mov	r2,r1
8000a536:	40 93       	lddsp	r3,sp[0x24]
8000a538:	10 90       	mov	r0,r8
8000a53a:	40 41       	lddsp	r1,sp[0x10]
8000a53c:	0e 99       	mov	r9,r7
8000a53e:	ed b5 00 03 	bld	r5,0x3
8000a542:	c4 11       	brne	8000a5c4 <_vfprintf_r+0x7e8>
8000a544:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a548:	40 3a       	lddsp	r10,sp[0xc]
8000a54a:	58 0a       	cp.w	r10,0
8000a54c:	c1 90       	breq	8000a57e <_vfprintf_r+0x7a2>
8000a54e:	10 36       	cp.w	r6,r8
8000a550:	c6 45       	brlt	8000a618 <_vfprintf_r+0x83c>
8000a552:	fa c8 f9 50 	sub	r8,sp,-1712
8000a556:	1a d8       	st.w	--sp,r8
8000a558:	fa c8 fa b8 	sub	r8,sp,-1352
8000a55c:	1a d8       	st.w	--sp,r8
8000a55e:	fa c8 fb b4 	sub	r8,sp,-1100
8000a562:	0c 9b       	mov	r11,r6
8000a564:	1a d8       	st.w	--sp,r8
8000a566:	04 9a       	mov	r10,r2
8000a568:	fa c8 f9 40 	sub	r8,sp,-1728
8000a56c:	fa c9 ff b4 	sub	r9,sp,-76
8000a570:	08 9c       	mov	r12,r4
8000a572:	fe b0 fa 9d 	rcall	80009aac <get_arg>
8000a576:	2f dd       	sub	sp,-12
8000a578:	78 16       	ld.w	r6,r12[0x4]
8000a57a:	50 76       	stdsp	sp[0x1c],r6
8000a57c:	c4 88       	rjmp	8000a60c <_vfprintf_r+0x830>
8000a57e:	2f f7       	sub	r7,-1
8000a580:	10 39       	cp.w	r9,r8
8000a582:	c0 c4       	brge	8000a59a <_vfprintf_r+0x7be>
8000a584:	fa ce f9 44 	sub	lr,sp,-1724
8000a588:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000a58c:	ec fc fd 8c 	ld.w	r12,r6[-628]
8000a590:	50 7c       	stdsp	sp[0x1c],r12
8000a592:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000a596:	50 56       	stdsp	sp[0x14],r6
8000a598:	c6 68       	rjmp	8000a664 <_vfprintf_r+0x888>
8000a59a:	41 09       	lddsp	r9,sp[0x40]
8000a59c:	59 f8       	cp.w	r8,31
8000a59e:	e0 89 00 10 	brgt	8000a5be <_vfprintf_r+0x7e2>
8000a5a2:	f2 ca ff f8 	sub	r10,r9,-8
8000a5a6:	72 1b       	ld.w	r11,r9[0x4]
8000a5a8:	51 0a       	stdsp	sp[0x40],r10
8000a5aa:	72 09       	ld.w	r9,r9[0x0]
8000a5ac:	fa ca f9 44 	sub	r10,sp,-1724
8000a5b0:	50 7b       	stdsp	sp[0x1c],r11
8000a5b2:	50 59       	stdsp	sp[0x14],r9
8000a5b4:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000a5b8:	40 5b       	lddsp	r11,sp[0x14]
8000a5ba:	40 7a       	lddsp	r10,sp[0x1c]
8000a5bc:	c4 78       	rjmp	8000a64a <_vfprintf_r+0x86e>
8000a5be:	72 18       	ld.w	r8,r9[0x4]
8000a5c0:	50 78       	stdsp	sp[0x1c],r8
8000a5c2:	c4 c8       	rjmp	8000a65a <_vfprintf_r+0x87e>
8000a5c4:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a5c8:	40 3e       	lddsp	lr,sp[0xc]
8000a5ca:	58 0e       	cp.w	lr,0
8000a5cc:	c2 30       	breq	8000a612 <_vfprintf_r+0x836>
8000a5ce:	10 36       	cp.w	r6,r8
8000a5d0:	c0 94       	brge	8000a5e2 <_vfprintf_r+0x806>
8000a5d2:	fa cc f9 44 	sub	r12,sp,-1724
8000a5d6:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000a5da:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000a5de:	50 7b       	stdsp	sp[0x1c],r11
8000a5e0:	cd 9b       	rjmp	8000a592 <_vfprintf_r+0x7b6>
8000a5e2:	fa c8 f9 50 	sub	r8,sp,-1712
8000a5e6:	1a d8       	st.w	--sp,r8
8000a5e8:	fa c8 fa b8 	sub	r8,sp,-1352
8000a5ec:	04 9a       	mov	r10,r2
8000a5ee:	1a d8       	st.w	--sp,r8
8000a5f0:	fa c8 fb b4 	sub	r8,sp,-1100
8000a5f4:	0c 9b       	mov	r11,r6
8000a5f6:	1a d8       	st.w	--sp,r8
8000a5f8:	08 9c       	mov	r12,r4
8000a5fa:	fa c8 f9 40 	sub	r8,sp,-1728
8000a5fe:	fa c9 ff b4 	sub	r9,sp,-76
8000a602:	fe b0 fa 55 	rcall	80009aac <get_arg>
8000a606:	2f dd       	sub	sp,-12
8000a608:	78 1a       	ld.w	r10,r12[0x4]
8000a60a:	50 7a       	stdsp	sp[0x1c],r10
8000a60c:	78 0c       	ld.w	r12,r12[0x0]
8000a60e:	50 5c       	stdsp	sp[0x14],r12
8000a610:	c2 a8       	rjmp	8000a664 <_vfprintf_r+0x888>
8000a612:	2f f7       	sub	r7,-1
8000a614:	10 39       	cp.w	r9,r8
8000a616:	c0 94       	brge	8000a628 <_vfprintf_r+0x84c>
8000a618:	fa c9 f9 44 	sub	r9,sp,-1724
8000a61c:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000a620:	ec f8 fd 8c 	ld.w	r8,r6[-628]
8000a624:	50 78       	stdsp	sp[0x1c],r8
8000a626:	cb 6b       	rjmp	8000a592 <_vfprintf_r+0x7b6>
8000a628:	41 09       	lddsp	r9,sp[0x40]
8000a62a:	59 f8       	cp.w	r8,31
8000a62c:	e0 89 00 15 	brgt	8000a656 <_vfprintf_r+0x87a>
8000a630:	f2 ca ff f8 	sub	r10,r9,-8
8000a634:	72 16       	ld.w	r6,r9[0x4]
8000a636:	72 09       	ld.w	r9,r9[0x0]
8000a638:	51 0a       	stdsp	sp[0x40],r10
8000a63a:	50 59       	stdsp	sp[0x14],r9
8000a63c:	fa ce f9 44 	sub	lr,sp,-1724
8000a640:	50 76       	stdsp	sp[0x1c],r6
8000a642:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000a646:	40 5b       	lddsp	r11,sp[0x14]
8000a648:	0c 9a       	mov	r10,r6
8000a64a:	f2 eb fd 88 	st.d	r9[-632],r10
8000a64e:	2f f8       	sub	r8,-1
8000a650:	fb 48 06 b4 	st.w	sp[1716],r8
8000a654:	c0 88       	rjmp	8000a664 <_vfprintf_r+0x888>
8000a656:	72 1c       	ld.w	r12,r9[0x4]
8000a658:	50 7c       	stdsp	sp[0x1c],r12
8000a65a:	f2 c8 ff f8 	sub	r8,r9,-8
8000a65e:	51 08       	stdsp	sp[0x40],r8
8000a660:	72 09       	ld.w	r9,r9[0x0]
8000a662:	50 59       	stdsp	sp[0x14],r9
8000a664:	40 5b       	lddsp	r11,sp[0x14]
8000a666:	40 7a       	lddsp	r10,sp[0x1c]
8000a668:	e0 a0 19 a2 	rcall	8000d9ac <__isinfd>
8000a66c:	18 96       	mov	r6,r12
8000a66e:	c1 70       	breq	8000a69c <_vfprintf_r+0x8c0>
8000a670:	30 08       	mov	r8,0
8000a672:	30 09       	mov	r9,0
8000a674:	40 5b       	lddsp	r11,sp[0x14]
8000a676:	40 7a       	lddsp	r10,sp[0x1c]
8000a678:	e0 a0 1e 02 	rcall	8000e27c <__avr32_f64_cmp_lt>
8000a67c:	c0 40       	breq	8000a684 <_vfprintf_r+0x8a8>
8000a67e:	32 d8       	mov	r8,45
8000a680:	fb 68 06 bb 	st.b	sp[1723],r8
8000a684:	fe c8 b3 b4 	sub	r8,pc,-19532
8000a688:	fe c6 b3 b4 	sub	r6,pc,-19532
8000a68c:	a7 d5       	cbr	r5,0x7
8000a68e:	e0 40 00 47 	cp.w	r0,71
8000a692:	f0 06 17 a0 	movle	r6,r8
8000a696:	30 32       	mov	r2,3
8000a698:	e0 8f 06 ce 	bral	8000b434 <_vfprintf_r+0x1658>
8000a69c:	40 5b       	lddsp	r11,sp[0x14]
8000a69e:	40 7a       	lddsp	r10,sp[0x1c]
8000a6a0:	e0 a0 19 9b 	rcall	8000d9d6 <__isnand>
8000a6a4:	c0 e0       	breq	8000a6c0 <_vfprintf_r+0x8e4>
8000a6a6:	50 26       	stdsp	sp[0x8],r6
8000a6a8:	fe c8 b3 d0 	sub	r8,pc,-19504
8000a6ac:	fe c6 b3 d0 	sub	r6,pc,-19504
8000a6b0:	a7 d5       	cbr	r5,0x7
8000a6b2:	e0 40 00 47 	cp.w	r0,71
8000a6b6:	f0 06 17 a0 	movle	r6,r8
8000a6ba:	30 32       	mov	r2,3
8000a6bc:	e0 8f 06 c2 	bral	8000b440 <_vfprintf_r+0x1664>
8000a6c0:	40 2a       	lddsp	r10,sp[0x8]
8000a6c2:	5b fa       	cp.w	r10,-1
8000a6c4:	c0 41       	brne	8000a6cc <_vfprintf_r+0x8f0>
8000a6c6:	30 69       	mov	r9,6
8000a6c8:	50 29       	stdsp	sp[0x8],r9
8000a6ca:	c1 18       	rjmp	8000a6ec <_vfprintf_r+0x910>
8000a6cc:	e0 40 00 47 	cp.w	r0,71
8000a6d0:	5f 09       	sreq	r9
8000a6d2:	e0 40 00 67 	cp.w	r0,103
8000a6d6:	5f 08       	sreq	r8
8000a6d8:	f3 e8 10 08 	or	r8,r9,r8
8000a6dc:	f8 08 18 00 	cp.b	r8,r12
8000a6e0:	c0 60       	breq	8000a6ec <_vfprintf_r+0x910>
8000a6e2:	40 28       	lddsp	r8,sp[0x8]
8000a6e4:	58 08       	cp.w	r8,0
8000a6e6:	f9 b8 00 01 	moveq	r8,1
8000a6ea:	50 28       	stdsp	sp[0x8],r8
8000a6ec:	40 78       	lddsp	r8,sp[0x1c]
8000a6ee:	40 59       	lddsp	r9,sp[0x14]
8000a6f0:	fa e9 06 94 	st.d	sp[1684],r8
8000a6f4:	a9 a5       	sbr	r5,0x8
8000a6f6:	fa f8 06 94 	ld.w	r8,sp[1684]
8000a6fa:	58 08       	cp.w	r8,0
8000a6fc:	c0 65       	brlt	8000a708 <_vfprintf_r+0x92c>
8000a6fe:	40 5e       	lddsp	lr,sp[0x14]
8000a700:	30 0c       	mov	r12,0
8000a702:	50 6e       	stdsp	sp[0x18],lr
8000a704:	50 9c       	stdsp	sp[0x24],r12
8000a706:	c0 78       	rjmp	8000a714 <_vfprintf_r+0x938>
8000a708:	40 5b       	lddsp	r11,sp[0x14]
8000a70a:	32 da       	mov	r10,45
8000a70c:	ee 1b 80 00 	eorh	r11,0x8000
8000a710:	50 9a       	stdsp	sp[0x24],r10
8000a712:	50 6b       	stdsp	sp[0x18],r11
8000a714:	e0 40 00 46 	cp.w	r0,70
8000a718:	5f 09       	sreq	r9
8000a71a:	e0 40 00 66 	cp.w	r0,102
8000a71e:	5f 08       	sreq	r8
8000a720:	f3 e8 10 08 	or	r8,r9,r8
8000a724:	50 48       	stdsp	sp[0x10],r8
8000a726:	c0 40       	breq	8000a72e <_vfprintf_r+0x952>
8000a728:	40 22       	lddsp	r2,sp[0x8]
8000a72a:	30 39       	mov	r9,3
8000a72c:	c1 08       	rjmp	8000a74c <_vfprintf_r+0x970>
8000a72e:	e0 40 00 45 	cp.w	r0,69
8000a732:	5f 09       	sreq	r9
8000a734:	e0 40 00 65 	cp.w	r0,101
8000a738:	5f 08       	sreq	r8
8000a73a:	40 22       	lddsp	r2,sp[0x8]
8000a73c:	10 49       	or	r9,r8
8000a73e:	2f f2       	sub	r2,-1
8000a740:	40 46       	lddsp	r6,sp[0x10]
8000a742:	ec 09 18 00 	cp.b	r9,r6
8000a746:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000a74a:	30 29       	mov	r9,2
8000a74c:	fa c8 f9 5c 	sub	r8,sp,-1700
8000a750:	1a d8       	st.w	--sp,r8
8000a752:	fa c8 f9 54 	sub	r8,sp,-1708
8000a756:	1a d8       	st.w	--sp,r8
8000a758:	fa c8 f9 4c 	sub	r8,sp,-1716
8000a75c:	08 9c       	mov	r12,r4
8000a75e:	1a d8       	st.w	--sp,r8
8000a760:	04 98       	mov	r8,r2
8000a762:	40 9b       	lddsp	r11,sp[0x24]
8000a764:	40 aa       	lddsp	r10,sp[0x28]
8000a766:	e0 a0 0b c3 	rcall	8000beec <_dtoa_r>
8000a76a:	e0 40 00 47 	cp.w	r0,71
8000a76e:	5f 19       	srne	r9
8000a770:	e0 40 00 67 	cp.w	r0,103
8000a774:	5f 18       	srne	r8
8000a776:	18 96       	mov	r6,r12
8000a778:	2f dd       	sub	sp,-12
8000a77a:	f3 e8 00 08 	and	r8,r9,r8
8000a77e:	c0 41       	brne	8000a786 <_vfprintf_r+0x9aa>
8000a780:	ed b5 00 00 	bld	r5,0x0
8000a784:	c3 01       	brne	8000a7e4 <_vfprintf_r+0xa08>
8000a786:	ec 02 00 0e 	add	lr,r6,r2
8000a78a:	50 3e       	stdsp	sp[0xc],lr
8000a78c:	40 4c       	lddsp	r12,sp[0x10]
8000a78e:	58 0c       	cp.w	r12,0
8000a790:	c1 50       	breq	8000a7ba <_vfprintf_r+0x9de>
8000a792:	0d 89       	ld.ub	r9,r6[0x0]
8000a794:	33 08       	mov	r8,48
8000a796:	f0 09 18 00 	cp.b	r9,r8
8000a79a:	c0 b1       	brne	8000a7b0 <_vfprintf_r+0x9d4>
8000a79c:	30 08       	mov	r8,0
8000a79e:	30 09       	mov	r9,0
8000a7a0:	40 6b       	lddsp	r11,sp[0x18]
8000a7a2:	40 7a       	lddsp	r10,sp[0x1c]
8000a7a4:	e0 a0 1d 25 	rcall	8000e1ee <__avr32_f64_cmp_eq>
8000a7a8:	fb b2 00 01 	rsubeq	r2,1
8000a7ac:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
8000a7b0:	40 3b       	lddsp	r11,sp[0xc]
8000a7b2:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000a7b6:	10 0b       	add	r11,r8
8000a7b8:	50 3b       	stdsp	sp[0xc],r11
8000a7ba:	40 6b       	lddsp	r11,sp[0x18]
8000a7bc:	30 08       	mov	r8,0
8000a7be:	30 09       	mov	r9,0
8000a7c0:	40 7a       	lddsp	r10,sp[0x1c]
8000a7c2:	e0 a0 1d 16 	rcall	8000e1ee <__avr32_f64_cmp_eq>
8000a7c6:	c0 90       	breq	8000a7d8 <_vfprintf_r+0x9fc>
8000a7c8:	40 3a       	lddsp	r10,sp[0xc]
8000a7ca:	fb 4a 06 a4 	st.w	sp[1700],r10
8000a7ce:	c0 58       	rjmp	8000a7d8 <_vfprintf_r+0x9fc>
8000a7d0:	10 c9       	st.b	r8++,r9
8000a7d2:	fb 48 06 a4 	st.w	sp[1700],r8
8000a7d6:	c0 28       	rjmp	8000a7da <_vfprintf_r+0x9fe>
8000a7d8:	33 09       	mov	r9,48
8000a7da:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000a7de:	40 3e       	lddsp	lr,sp[0xc]
8000a7e0:	1c 38       	cp.w	r8,lr
8000a7e2:	cf 73       	brcs	8000a7d0 <_vfprintf_r+0x9f4>
8000a7e4:	e0 40 00 47 	cp.w	r0,71
8000a7e8:	5f 09       	sreq	r9
8000a7ea:	e0 40 00 67 	cp.w	r0,103
8000a7ee:	5f 08       	sreq	r8
8000a7f0:	f3 e8 10 08 	or	r8,r9,r8
8000a7f4:	fa f9 06 a4 	ld.w	r9,sp[1700]
8000a7f8:	0c 19       	sub	r9,r6
8000a7fa:	50 69       	stdsp	sp[0x18],r9
8000a7fc:	58 08       	cp.w	r8,0
8000a7fe:	c0 b0       	breq	8000a814 <_vfprintf_r+0xa38>
8000a800:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000a804:	5b d8       	cp.w	r8,-3
8000a806:	c0 55       	brlt	8000a810 <_vfprintf_r+0xa34>
8000a808:	40 2c       	lddsp	r12,sp[0x8]
8000a80a:	18 38       	cp.w	r8,r12
8000a80c:	e0 8a 00 6a 	brle	8000a8e0 <_vfprintf_r+0xb04>
8000a810:	20 20       	sub	r0,2
8000a812:	c0 58       	rjmp	8000a81c <_vfprintf_r+0xa40>
8000a814:	e0 40 00 65 	cp.w	r0,101
8000a818:	e0 89 00 46 	brgt	8000a8a4 <_vfprintf_r+0xac8>
8000a81c:	fa fb 06 ac 	ld.w	r11,sp[1708]
8000a820:	fb 60 06 9c 	st.b	sp[1692],r0
8000a824:	20 1b       	sub	r11,1
8000a826:	fb 4b 06 ac 	st.w	sp[1708],r11
8000a82a:	c0 47       	brpl	8000a832 <_vfprintf_r+0xa56>
8000a82c:	5c 3b       	neg	r11
8000a82e:	32 d8       	mov	r8,45
8000a830:	c0 28       	rjmp	8000a834 <_vfprintf_r+0xa58>
8000a832:	32 b8       	mov	r8,43
8000a834:	fb 68 06 9d 	st.b	sp[1693],r8
8000a838:	58 9b       	cp.w	r11,9
8000a83a:	e0 8a 00 1d 	brle	8000a874 <_vfprintf_r+0xa98>
8000a83e:	fa c9 fa 35 	sub	r9,sp,-1483
8000a842:	30 aa       	mov	r10,10
8000a844:	12 98       	mov	r8,r9
8000a846:	0e 9c       	mov	r12,r7
8000a848:	0c 92       	mov	r2,r6
8000a84a:	f6 0a 0c 06 	divs	r6,r11,r10
8000a84e:	0e 9b       	mov	r11,r7
8000a850:	2d 0b       	sub	r11,-48
8000a852:	10 fb       	st.b	--r8,r11
8000a854:	0c 9b       	mov	r11,r6
8000a856:	58 96       	cp.w	r6,9
8000a858:	fe 99 ff f9 	brgt	8000a84a <_vfprintf_r+0xa6e>
8000a85c:	2d 0b       	sub	r11,-48
8000a85e:	18 97       	mov	r7,r12
8000a860:	04 96       	mov	r6,r2
8000a862:	10 fb       	st.b	--r8,r11
8000a864:	fa ca f9 62 	sub	r10,sp,-1694
8000a868:	c0 38       	rjmp	8000a86e <_vfprintf_r+0xa92>
8000a86a:	11 3b       	ld.ub	r11,r8++
8000a86c:	14 cb       	st.b	r10++,r11
8000a86e:	12 38       	cp.w	r8,r9
8000a870:	cf d3       	brcs	8000a86a <_vfprintf_r+0xa8e>
8000a872:	c0 98       	rjmp	8000a884 <_vfprintf_r+0xaa8>
8000a874:	2d 0b       	sub	r11,-48
8000a876:	33 08       	mov	r8,48
8000a878:	fb 6b 06 9f 	st.b	sp[1695],r11
8000a87c:	fb 68 06 9e 	st.b	sp[1694],r8
8000a880:	fa ca f9 60 	sub	r10,sp,-1696
8000a884:	fa c8 f9 64 	sub	r8,sp,-1692
8000a888:	f4 08 01 08 	sub	r8,r10,r8
8000a88c:	50 e8       	stdsp	sp[0x38],r8
8000a88e:	10 92       	mov	r2,r8
8000a890:	40 6b       	lddsp	r11,sp[0x18]
8000a892:	16 02       	add	r2,r11
8000a894:	58 1b       	cp.w	r11,1
8000a896:	e0 89 00 05 	brgt	8000a8a0 <_vfprintf_r+0xac4>
8000a89a:	ed b5 00 00 	bld	r5,0x0
8000a89e:	c3 51       	brne	8000a908 <_vfprintf_r+0xb2c>
8000a8a0:	2f f2       	sub	r2,-1
8000a8a2:	c3 38       	rjmp	8000a908 <_vfprintf_r+0xb2c>
8000a8a4:	e0 40 00 66 	cp.w	r0,102
8000a8a8:	c1 c1       	brne	8000a8e0 <_vfprintf_r+0xb04>
8000a8aa:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000a8ae:	58 02       	cp.w	r2,0
8000a8b0:	e0 8a 00 0c 	brle	8000a8c8 <_vfprintf_r+0xaec>
8000a8b4:	40 2a       	lddsp	r10,sp[0x8]
8000a8b6:	58 0a       	cp.w	r10,0
8000a8b8:	c0 41       	brne	8000a8c0 <_vfprintf_r+0xae4>
8000a8ba:	ed b5 00 00 	bld	r5,0x0
8000a8be:	c2 51       	brne	8000a908 <_vfprintf_r+0xb2c>
8000a8c0:	2f f2       	sub	r2,-1
8000a8c2:	40 29       	lddsp	r9,sp[0x8]
8000a8c4:	12 02       	add	r2,r9
8000a8c6:	c0 b8       	rjmp	8000a8dc <_vfprintf_r+0xb00>
8000a8c8:	40 28       	lddsp	r8,sp[0x8]
8000a8ca:	58 08       	cp.w	r8,0
8000a8cc:	c0 61       	brne	8000a8d8 <_vfprintf_r+0xafc>
8000a8ce:	ed b5 00 00 	bld	r5,0x0
8000a8d2:	c0 30       	breq	8000a8d8 <_vfprintf_r+0xafc>
8000a8d4:	30 12       	mov	r2,1
8000a8d6:	c1 98       	rjmp	8000a908 <_vfprintf_r+0xb2c>
8000a8d8:	40 22       	lddsp	r2,sp[0x8]
8000a8da:	2f e2       	sub	r2,-2
8000a8dc:	36 60       	mov	r0,102
8000a8de:	c1 58       	rjmp	8000a908 <_vfprintf_r+0xb2c>
8000a8e0:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000a8e4:	40 6e       	lddsp	lr,sp[0x18]
8000a8e6:	1c 32       	cp.w	r2,lr
8000a8e8:	c0 65       	brlt	8000a8f4 <_vfprintf_r+0xb18>
8000a8ea:	ed b5 00 00 	bld	r5,0x0
8000a8ee:	f7 b2 00 ff 	subeq	r2,-1
8000a8f2:	c0 a8       	rjmp	8000a906 <_vfprintf_r+0xb2a>
8000a8f4:	e4 08 11 02 	rsub	r8,r2,2
8000a8f8:	40 6c       	lddsp	r12,sp[0x18]
8000a8fa:	58 02       	cp.w	r2,0
8000a8fc:	f0 02 17 a0 	movle	r2,r8
8000a900:	f9 b2 09 01 	movgt	r2,1
8000a904:	18 02       	add	r2,r12
8000a906:	36 70       	mov	r0,103
8000a908:	40 9b       	lddsp	r11,sp[0x24]
8000a90a:	58 0b       	cp.w	r11,0
8000a90c:	e0 80 05 94 	breq	8000b434 <_vfprintf_r+0x1658>
8000a910:	32 d8       	mov	r8,45
8000a912:	fb 68 06 bb 	st.b	sp[1723],r8
8000a916:	e0 8f 05 93 	bral	8000b43c <_vfprintf_r+0x1660>
8000a91a:	50 a7       	stdsp	sp[0x28],r7
8000a91c:	04 94       	mov	r4,r2
8000a91e:	0c 97       	mov	r7,r6
8000a920:	02 92       	mov	r2,r1
8000a922:	06 96       	mov	r6,r3
8000a924:	40 41       	lddsp	r1,sp[0x10]
8000a926:	40 93       	lddsp	r3,sp[0x24]
8000a928:	0e 99       	mov	r9,r7
8000a92a:	ed b5 00 05 	bld	r5,0x5
8000a92e:	c4 81       	brne	8000a9be <_vfprintf_r+0xbe2>
8000a930:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a934:	40 3e       	lddsp	lr,sp[0xc]
8000a936:	58 0e       	cp.w	lr,0
8000a938:	c1 d0       	breq	8000a972 <_vfprintf_r+0xb96>
8000a93a:	10 36       	cp.w	r6,r8
8000a93c:	c0 64       	brge	8000a948 <_vfprintf_r+0xb6c>
8000a93e:	fa cc f9 44 	sub	r12,sp,-1724
8000a942:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000a946:	c1 d8       	rjmp	8000a980 <_vfprintf_r+0xba4>
8000a948:	fa c8 f9 50 	sub	r8,sp,-1712
8000a94c:	1a d8       	st.w	--sp,r8
8000a94e:	fa c8 fa b8 	sub	r8,sp,-1352
8000a952:	04 9a       	mov	r10,r2
8000a954:	1a d8       	st.w	--sp,r8
8000a956:	fa c8 fb b4 	sub	r8,sp,-1100
8000a95a:	0c 9b       	mov	r11,r6
8000a95c:	1a d8       	st.w	--sp,r8
8000a95e:	08 9c       	mov	r12,r4
8000a960:	fa c8 f9 40 	sub	r8,sp,-1728
8000a964:	fa c9 ff b4 	sub	r9,sp,-76
8000a968:	fe b0 f8 a2 	rcall	80009aac <get_arg>
8000a96c:	2f dd       	sub	sp,-12
8000a96e:	78 0a       	ld.w	r10,r12[0x0]
8000a970:	c2 08       	rjmp	8000a9b0 <_vfprintf_r+0xbd4>
8000a972:	2f f7       	sub	r7,-1
8000a974:	10 39       	cp.w	r9,r8
8000a976:	c0 84       	brge	8000a986 <_vfprintf_r+0xbaa>
8000a978:	fa cb f9 44 	sub	r11,sp,-1724
8000a97c:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a980:	ec fa fd 88 	ld.w	r10,r6[-632]
8000a984:	c1 68       	rjmp	8000a9b0 <_vfprintf_r+0xbd4>
8000a986:	41 09       	lddsp	r9,sp[0x40]
8000a988:	59 f8       	cp.w	r8,31
8000a98a:	e0 89 00 10 	brgt	8000a9aa <_vfprintf_r+0xbce>
8000a98e:	f2 ca ff fc 	sub	r10,r9,-4
8000a992:	51 0a       	stdsp	sp[0x40],r10
8000a994:	fa c6 f9 44 	sub	r6,sp,-1724
8000a998:	72 0a       	ld.w	r10,r9[0x0]
8000a99a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000a99e:	f3 4a fd 88 	st.w	r9[-632],r10
8000a9a2:	2f f8       	sub	r8,-1
8000a9a4:	fb 48 06 b4 	st.w	sp[1716],r8
8000a9a8:	c0 48       	rjmp	8000a9b0 <_vfprintf_r+0xbd4>
8000a9aa:	72 0a       	ld.w	r10,r9[0x0]
8000a9ac:	2f c9       	sub	r9,-4
8000a9ae:	51 09       	stdsp	sp[0x40],r9
8000a9b0:	40 be       	lddsp	lr,sp[0x2c]
8000a9b2:	1c 98       	mov	r8,lr
8000a9b4:	95 1e       	st.w	r10[0x4],lr
8000a9b6:	bf 58       	asr	r8,0x1f
8000a9b8:	95 08       	st.w	r10[0x0],r8
8000a9ba:	fe 9f fa 9f 	bral	80009ef8 <_vfprintf_r+0x11c>
8000a9be:	ed b5 00 04 	bld	r5,0x4
8000a9c2:	c4 80       	breq	8000aa52 <_vfprintf_r+0xc76>
8000a9c4:	e2 15 00 40 	andl	r5,0x40,COH
8000a9c8:	c4 50       	breq	8000aa52 <_vfprintf_r+0xc76>
8000a9ca:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000a9ce:	40 3c       	lddsp	r12,sp[0xc]
8000a9d0:	58 0c       	cp.w	r12,0
8000a9d2:	c1 d0       	breq	8000aa0c <_vfprintf_r+0xc30>
8000a9d4:	10 36       	cp.w	r6,r8
8000a9d6:	c0 64       	brge	8000a9e2 <_vfprintf_r+0xc06>
8000a9d8:	fa cb f9 44 	sub	r11,sp,-1724
8000a9dc:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000a9e0:	c1 d8       	rjmp	8000aa1a <_vfprintf_r+0xc3e>
8000a9e2:	fa c8 f9 50 	sub	r8,sp,-1712
8000a9e6:	1a d8       	st.w	--sp,r8
8000a9e8:	fa c8 fa b8 	sub	r8,sp,-1352
8000a9ec:	04 9a       	mov	r10,r2
8000a9ee:	1a d8       	st.w	--sp,r8
8000a9f0:	fa c8 fb b4 	sub	r8,sp,-1100
8000a9f4:	0c 9b       	mov	r11,r6
8000a9f6:	1a d8       	st.w	--sp,r8
8000a9f8:	08 9c       	mov	r12,r4
8000a9fa:	fa c8 f9 40 	sub	r8,sp,-1728
8000a9fe:	fa c9 ff b4 	sub	r9,sp,-76
8000aa02:	fe b0 f8 55 	rcall	80009aac <get_arg>
8000aa06:	2f dd       	sub	sp,-12
8000aa08:	78 0a       	ld.w	r10,r12[0x0]
8000aa0a:	c2 08       	rjmp	8000aa4a <_vfprintf_r+0xc6e>
8000aa0c:	2f f7       	sub	r7,-1
8000aa0e:	10 39       	cp.w	r9,r8
8000aa10:	c0 84       	brge	8000aa20 <_vfprintf_r+0xc44>
8000aa12:	fa ca f9 44 	sub	r10,sp,-1724
8000aa16:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000aa1a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000aa1e:	c1 68       	rjmp	8000aa4a <_vfprintf_r+0xc6e>
8000aa20:	41 09       	lddsp	r9,sp[0x40]
8000aa22:	59 f8       	cp.w	r8,31
8000aa24:	e0 89 00 10 	brgt	8000aa44 <_vfprintf_r+0xc68>
8000aa28:	f2 ca ff fc 	sub	r10,r9,-4
8000aa2c:	51 0a       	stdsp	sp[0x40],r10
8000aa2e:	fa c6 f9 44 	sub	r6,sp,-1724
8000aa32:	72 0a       	ld.w	r10,r9[0x0]
8000aa34:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000aa38:	f3 4a fd 88 	st.w	r9[-632],r10
8000aa3c:	2f f8       	sub	r8,-1
8000aa3e:	fb 48 06 b4 	st.w	sp[1716],r8
8000aa42:	c0 48       	rjmp	8000aa4a <_vfprintf_r+0xc6e>
8000aa44:	72 0a       	ld.w	r10,r9[0x0]
8000aa46:	2f c9       	sub	r9,-4
8000aa48:	51 09       	stdsp	sp[0x40],r9
8000aa4a:	40 be       	lddsp	lr,sp[0x2c]
8000aa4c:	b4 0e       	st.h	r10[0x0],lr
8000aa4e:	fe 9f fa 55 	bral	80009ef8 <_vfprintf_r+0x11c>
8000aa52:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000aa56:	40 3c       	lddsp	r12,sp[0xc]
8000aa58:	58 0c       	cp.w	r12,0
8000aa5a:	c1 d0       	breq	8000aa94 <_vfprintf_r+0xcb8>
8000aa5c:	10 36       	cp.w	r6,r8
8000aa5e:	c0 64       	brge	8000aa6a <_vfprintf_r+0xc8e>
8000aa60:	fa cb f9 44 	sub	r11,sp,-1724
8000aa64:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000aa68:	c1 d8       	rjmp	8000aaa2 <_vfprintf_r+0xcc6>
8000aa6a:	fa c8 f9 50 	sub	r8,sp,-1712
8000aa6e:	1a d8       	st.w	--sp,r8
8000aa70:	fa c8 fa b8 	sub	r8,sp,-1352
8000aa74:	04 9a       	mov	r10,r2
8000aa76:	1a d8       	st.w	--sp,r8
8000aa78:	fa c8 fb b4 	sub	r8,sp,-1100
8000aa7c:	0c 9b       	mov	r11,r6
8000aa7e:	1a d8       	st.w	--sp,r8
8000aa80:	08 9c       	mov	r12,r4
8000aa82:	fa c8 f9 40 	sub	r8,sp,-1728
8000aa86:	fa c9 ff b4 	sub	r9,sp,-76
8000aa8a:	fe b0 f8 11 	rcall	80009aac <get_arg>
8000aa8e:	2f dd       	sub	sp,-12
8000aa90:	78 0a       	ld.w	r10,r12[0x0]
8000aa92:	c2 08       	rjmp	8000aad2 <_vfprintf_r+0xcf6>
8000aa94:	2f f7       	sub	r7,-1
8000aa96:	10 39       	cp.w	r9,r8
8000aa98:	c0 84       	brge	8000aaa8 <_vfprintf_r+0xccc>
8000aa9a:	fa ca f9 44 	sub	r10,sp,-1724
8000aa9e:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000aaa2:	ec fa fd 88 	ld.w	r10,r6[-632]
8000aaa6:	c1 68       	rjmp	8000aad2 <_vfprintf_r+0xcf6>
8000aaa8:	41 09       	lddsp	r9,sp[0x40]
8000aaaa:	59 f8       	cp.w	r8,31
8000aaac:	e0 89 00 10 	brgt	8000aacc <_vfprintf_r+0xcf0>
8000aab0:	f2 ca ff fc 	sub	r10,r9,-4
8000aab4:	51 0a       	stdsp	sp[0x40],r10
8000aab6:	fa c6 f9 44 	sub	r6,sp,-1724
8000aaba:	72 0a       	ld.w	r10,r9[0x0]
8000aabc:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000aac0:	f3 4a fd 88 	st.w	r9[-632],r10
8000aac4:	2f f8       	sub	r8,-1
8000aac6:	fb 48 06 b4 	st.w	sp[1716],r8
8000aaca:	c0 48       	rjmp	8000aad2 <_vfprintf_r+0xcf6>
8000aacc:	72 0a       	ld.w	r10,r9[0x0]
8000aace:	2f c9       	sub	r9,-4
8000aad0:	51 09       	stdsp	sp[0x40],r9
8000aad2:	40 be       	lddsp	lr,sp[0x2c]
8000aad4:	95 0e       	st.w	r10[0x0],lr
8000aad6:	fe 9f fa 11 	bral	80009ef8 <_vfprintf_r+0x11c>
8000aada:	50 a7       	stdsp	sp[0x28],r7
8000aadc:	50 80       	stdsp	sp[0x20],r0
8000aade:	0c 97       	mov	r7,r6
8000aae0:	04 94       	mov	r4,r2
8000aae2:	06 96       	mov	r6,r3
8000aae4:	02 92       	mov	r2,r1
8000aae6:	40 93       	lddsp	r3,sp[0x24]
8000aae8:	10 90       	mov	r0,r8
8000aaea:	40 41       	lddsp	r1,sp[0x10]
8000aaec:	a5 a5       	sbr	r5,0x4
8000aaee:	c0 a8       	rjmp	8000ab02 <_vfprintf_r+0xd26>
8000aaf0:	50 a7       	stdsp	sp[0x28],r7
8000aaf2:	50 80       	stdsp	sp[0x20],r0
8000aaf4:	0c 97       	mov	r7,r6
8000aaf6:	04 94       	mov	r4,r2
8000aaf8:	06 96       	mov	r6,r3
8000aafa:	02 92       	mov	r2,r1
8000aafc:	40 93       	lddsp	r3,sp[0x24]
8000aafe:	10 90       	mov	r0,r8
8000ab00:	40 41       	lddsp	r1,sp[0x10]
8000ab02:	ed b5 00 05 	bld	r5,0x5
8000ab06:	c5 d1       	brne	8000abc0 <_vfprintf_r+0xde4>
8000ab08:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ab0c:	40 3c       	lddsp	r12,sp[0xc]
8000ab0e:	58 0c       	cp.w	r12,0
8000ab10:	c2 60       	breq	8000ab5c <_vfprintf_r+0xd80>
8000ab12:	10 36       	cp.w	r6,r8
8000ab14:	c0 a4       	brge	8000ab28 <_vfprintf_r+0xd4c>
8000ab16:	fa cb f9 44 	sub	r11,sp,-1724
8000ab1a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ab1e:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000ab22:	fa e9 00 00 	st.d	sp[0],r8
8000ab26:	c1 88       	rjmp	8000ab56 <_vfprintf_r+0xd7a>
8000ab28:	fa c8 f9 50 	sub	r8,sp,-1712
8000ab2c:	1a d8       	st.w	--sp,r8
8000ab2e:	fa c8 fa b8 	sub	r8,sp,-1352
8000ab32:	04 9a       	mov	r10,r2
8000ab34:	1a d8       	st.w	--sp,r8
8000ab36:	0c 9b       	mov	r11,r6
8000ab38:	fa c8 fb b4 	sub	r8,sp,-1100
8000ab3c:	08 9c       	mov	r12,r4
8000ab3e:	1a d8       	st.w	--sp,r8
8000ab40:	fa c8 f9 40 	sub	r8,sp,-1728
8000ab44:	fa c9 ff b4 	sub	r9,sp,-76
8000ab48:	fe b0 f7 b2 	rcall	80009aac <get_arg>
8000ab4c:	2f dd       	sub	sp,-12
8000ab4e:	f8 ea 00 00 	ld.d	r10,r12[0]
8000ab52:	fa eb 00 00 	st.d	sp[0],r10
8000ab56:	30 08       	mov	r8,0
8000ab58:	e0 8f 03 de 	bral	8000b314 <_vfprintf_r+0x1538>
8000ab5c:	ee ca ff ff 	sub	r10,r7,-1
8000ab60:	10 37       	cp.w	r7,r8
8000ab62:	c0 b4       	brge	8000ab78 <_vfprintf_r+0xd9c>
8000ab64:	fa c9 f9 44 	sub	r9,sp,-1724
8000ab68:	14 97       	mov	r7,r10
8000ab6a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000ab6e:	ec ea fd 88 	ld.d	r10,r6[-632]
8000ab72:	fa eb 00 00 	st.d	sp[0],r10
8000ab76:	c1 88       	rjmp	8000aba6 <_vfprintf_r+0xdca>
8000ab78:	41 09       	lddsp	r9,sp[0x40]
8000ab7a:	59 f8       	cp.w	r8,31
8000ab7c:	e0 89 00 18 	brgt	8000abac <_vfprintf_r+0xdd0>
8000ab80:	f2 e6 00 00 	ld.d	r6,r9[0]
8000ab84:	f2 cb ff f8 	sub	r11,r9,-8
8000ab88:	fa e7 00 00 	st.d	sp[0],r6
8000ab8c:	51 0b       	stdsp	sp[0x40],r11
8000ab8e:	fa c6 f9 44 	sub	r6,sp,-1724
8000ab92:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000ab96:	fa e6 00 00 	ld.d	r6,sp[0]
8000ab9a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000ab9e:	2f f8       	sub	r8,-1
8000aba0:	14 97       	mov	r7,r10
8000aba2:	fb 48 06 b4 	st.w	sp[1716],r8
8000aba6:	40 38       	lddsp	r8,sp[0xc]
8000aba8:	e0 8f 03 b6 	bral	8000b314 <_vfprintf_r+0x1538>
8000abac:	f2 e6 00 00 	ld.d	r6,r9[0]
8000abb0:	40 38       	lddsp	r8,sp[0xc]
8000abb2:	fa e7 00 00 	st.d	sp[0],r6
8000abb6:	2f 89       	sub	r9,-8
8000abb8:	14 97       	mov	r7,r10
8000abba:	51 09       	stdsp	sp[0x40],r9
8000abbc:	e0 8f 03 ac 	bral	8000b314 <_vfprintf_r+0x1538>
8000abc0:	ed b5 00 04 	bld	r5,0x4
8000abc4:	c1 61       	brne	8000abf0 <_vfprintf_r+0xe14>
8000abc6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000abca:	40 3e       	lddsp	lr,sp[0xc]
8000abcc:	58 0e       	cp.w	lr,0
8000abce:	c0 80       	breq	8000abde <_vfprintf_r+0xe02>
8000abd0:	10 36       	cp.w	r6,r8
8000abd2:	c6 74       	brge	8000aca0 <_vfprintf_r+0xec4>
8000abd4:	fa cc f9 44 	sub	r12,sp,-1724
8000abd8:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000abdc:	c8 08       	rjmp	8000acdc <_vfprintf_r+0xf00>
8000abde:	ee ca ff ff 	sub	r10,r7,-1
8000abe2:	10 37       	cp.w	r7,r8
8000abe4:	c7 f4       	brge	8000ace2 <_vfprintf_r+0xf06>
8000abe6:	fa cb f9 44 	sub	r11,sp,-1724
8000abea:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000abee:	c7 68       	rjmp	8000acda <_vfprintf_r+0xefe>
8000abf0:	ed b5 00 06 	bld	r5,0x6
8000abf4:	c4 a1       	brne	8000ac88 <_vfprintf_r+0xeac>
8000abf6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000abfa:	40 3c       	lddsp	r12,sp[0xc]
8000abfc:	58 0c       	cp.w	r12,0
8000abfe:	c1 d0       	breq	8000ac38 <_vfprintf_r+0xe5c>
8000ac00:	10 36       	cp.w	r6,r8
8000ac02:	c0 64       	brge	8000ac0e <_vfprintf_r+0xe32>
8000ac04:	fa cb f9 44 	sub	r11,sp,-1724
8000ac08:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ac0c:	c1 f8       	rjmp	8000ac4a <_vfprintf_r+0xe6e>
8000ac0e:	fa c8 f9 50 	sub	r8,sp,-1712
8000ac12:	1a d8       	st.w	--sp,r8
8000ac14:	fa c8 fa b8 	sub	r8,sp,-1352
8000ac18:	1a d8       	st.w	--sp,r8
8000ac1a:	fa c8 fb b4 	sub	r8,sp,-1100
8000ac1e:	1a d8       	st.w	--sp,r8
8000ac20:	fa c8 f9 40 	sub	r8,sp,-1728
8000ac24:	fa c9 ff b4 	sub	r9,sp,-76
8000ac28:	04 9a       	mov	r10,r2
8000ac2a:	0c 9b       	mov	r11,r6
8000ac2c:	08 9c       	mov	r12,r4
8000ac2e:	fe b0 f7 3f 	rcall	80009aac <get_arg>
8000ac32:	2f dd       	sub	sp,-12
8000ac34:	98 18       	ld.sh	r8,r12[0x2]
8000ac36:	c2 68       	rjmp	8000ac82 <_vfprintf_r+0xea6>
8000ac38:	ee ca ff ff 	sub	r10,r7,-1
8000ac3c:	10 37       	cp.w	r7,r8
8000ac3e:	c0 94       	brge	8000ac50 <_vfprintf_r+0xe74>
8000ac40:	fa c9 f9 44 	sub	r9,sp,-1724
8000ac44:	14 97       	mov	r7,r10
8000ac46:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000ac4a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000ac4e:	c1 a8       	rjmp	8000ac82 <_vfprintf_r+0xea6>
8000ac50:	41 09       	lddsp	r9,sp[0x40]
8000ac52:	59 f8       	cp.w	r8,31
8000ac54:	e0 89 00 13 	brgt	8000ac7a <_vfprintf_r+0xe9e>
8000ac58:	f2 cb ff fc 	sub	r11,r9,-4
8000ac5c:	51 0b       	stdsp	sp[0x40],r11
8000ac5e:	72 09       	ld.w	r9,r9[0x0]
8000ac60:	fa c6 f9 44 	sub	r6,sp,-1724
8000ac64:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000ac68:	2f f8       	sub	r8,-1
8000ac6a:	f7 49 fd 88 	st.w	r11[-632],r9
8000ac6e:	fb 48 06 b4 	st.w	sp[1716],r8
8000ac72:	14 97       	mov	r7,r10
8000ac74:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000ac78:	c0 58       	rjmp	8000ac82 <_vfprintf_r+0xea6>
8000ac7a:	92 18       	ld.sh	r8,r9[0x2]
8000ac7c:	14 97       	mov	r7,r10
8000ac7e:	2f c9       	sub	r9,-4
8000ac80:	51 09       	stdsp	sp[0x40],r9
8000ac82:	5c 78       	castu.h	r8
8000ac84:	50 18       	stdsp	sp[0x4],r8
8000ac86:	c4 68       	rjmp	8000ad12 <_vfprintf_r+0xf36>
8000ac88:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ac8c:	40 3c       	lddsp	r12,sp[0xc]
8000ac8e:	58 0c       	cp.w	r12,0
8000ac90:	c1 d0       	breq	8000acca <_vfprintf_r+0xeee>
8000ac92:	10 36       	cp.w	r6,r8
8000ac94:	c0 64       	brge	8000aca0 <_vfprintf_r+0xec4>
8000ac96:	fa cb f9 44 	sub	r11,sp,-1724
8000ac9a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ac9e:	c1 f8       	rjmp	8000acdc <_vfprintf_r+0xf00>
8000aca0:	fa c8 f9 50 	sub	r8,sp,-1712
8000aca4:	1a d8       	st.w	--sp,r8
8000aca6:	fa c8 fa b8 	sub	r8,sp,-1352
8000acaa:	0c 9b       	mov	r11,r6
8000acac:	1a d8       	st.w	--sp,r8
8000acae:	fa c8 fb b4 	sub	r8,sp,-1100
8000acb2:	04 9a       	mov	r10,r2
8000acb4:	1a d8       	st.w	--sp,r8
8000acb6:	08 9c       	mov	r12,r4
8000acb8:	fa c8 f9 40 	sub	r8,sp,-1728
8000acbc:	fa c9 ff b4 	sub	r9,sp,-76
8000acc0:	fe b0 f6 f6 	rcall	80009aac <get_arg>
8000acc4:	2f dd       	sub	sp,-12
8000acc6:	78 0b       	ld.w	r11,r12[0x0]
8000acc8:	c2 48       	rjmp	8000ad10 <_vfprintf_r+0xf34>
8000acca:	ee ca ff ff 	sub	r10,r7,-1
8000acce:	10 37       	cp.w	r7,r8
8000acd0:	c0 94       	brge	8000ace2 <_vfprintf_r+0xf06>
8000acd2:	fa c9 f9 44 	sub	r9,sp,-1724
8000acd6:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000acda:	14 97       	mov	r7,r10
8000acdc:	ec fb fd 88 	ld.w	r11,r6[-632]
8000ace0:	c1 88       	rjmp	8000ad10 <_vfprintf_r+0xf34>
8000ace2:	41 09       	lddsp	r9,sp[0x40]
8000ace4:	59 f8       	cp.w	r8,31
8000ace6:	e0 89 00 11 	brgt	8000ad08 <_vfprintf_r+0xf2c>
8000acea:	f2 cb ff fc 	sub	r11,r9,-4
8000acee:	51 0b       	stdsp	sp[0x40],r11
8000acf0:	fa c6 f9 44 	sub	r6,sp,-1724
8000acf4:	72 0b       	ld.w	r11,r9[0x0]
8000acf6:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000acfa:	f3 4b fd 88 	st.w	r9[-632],r11
8000acfe:	2f f8       	sub	r8,-1
8000ad00:	14 97       	mov	r7,r10
8000ad02:	fb 48 06 b4 	st.w	sp[1716],r8
8000ad06:	c0 58       	rjmp	8000ad10 <_vfprintf_r+0xf34>
8000ad08:	72 0b       	ld.w	r11,r9[0x0]
8000ad0a:	14 97       	mov	r7,r10
8000ad0c:	2f c9       	sub	r9,-4
8000ad0e:	51 09       	stdsp	sp[0x40],r9
8000ad10:	50 1b       	stdsp	sp[0x4],r11
8000ad12:	30 0e       	mov	lr,0
8000ad14:	50 0e       	stdsp	sp[0x0],lr
8000ad16:	1c 98       	mov	r8,lr
8000ad18:	e0 8f 02 fe 	bral	8000b314 <_vfprintf_r+0x1538>
8000ad1c:	50 a7       	stdsp	sp[0x28],r7
8000ad1e:	50 80       	stdsp	sp[0x20],r0
8000ad20:	0c 97       	mov	r7,r6
8000ad22:	04 94       	mov	r4,r2
8000ad24:	06 96       	mov	r6,r3
8000ad26:	02 92       	mov	r2,r1
8000ad28:	40 93       	lddsp	r3,sp[0x24]
8000ad2a:	40 41       	lddsp	r1,sp[0x10]
8000ad2c:	0e 99       	mov	r9,r7
8000ad2e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ad32:	40 3c       	lddsp	r12,sp[0xc]
8000ad34:	58 0c       	cp.w	r12,0
8000ad36:	c1 d0       	breq	8000ad70 <_vfprintf_r+0xf94>
8000ad38:	10 36       	cp.w	r6,r8
8000ad3a:	c0 64       	brge	8000ad46 <_vfprintf_r+0xf6a>
8000ad3c:	fa cb f9 44 	sub	r11,sp,-1724
8000ad40:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ad44:	c1 d8       	rjmp	8000ad7e <_vfprintf_r+0xfa2>
8000ad46:	fa c8 f9 50 	sub	r8,sp,-1712
8000ad4a:	1a d8       	st.w	--sp,r8
8000ad4c:	fa c8 fa b8 	sub	r8,sp,-1352
8000ad50:	1a d8       	st.w	--sp,r8
8000ad52:	fa c8 fb b4 	sub	r8,sp,-1100
8000ad56:	1a d8       	st.w	--sp,r8
8000ad58:	fa c9 ff b4 	sub	r9,sp,-76
8000ad5c:	fa c8 f9 40 	sub	r8,sp,-1728
8000ad60:	04 9a       	mov	r10,r2
8000ad62:	0c 9b       	mov	r11,r6
8000ad64:	08 9c       	mov	r12,r4
8000ad66:	fe b0 f6 a3 	rcall	80009aac <get_arg>
8000ad6a:	2f dd       	sub	sp,-12
8000ad6c:	78 09       	ld.w	r9,r12[0x0]
8000ad6e:	c2 18       	rjmp	8000adb0 <_vfprintf_r+0xfd4>
8000ad70:	2f f7       	sub	r7,-1
8000ad72:	10 39       	cp.w	r9,r8
8000ad74:	c0 84       	brge	8000ad84 <_vfprintf_r+0xfa8>
8000ad76:	fa ca f9 44 	sub	r10,sp,-1724
8000ad7a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000ad7e:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000ad82:	c1 78       	rjmp	8000adb0 <_vfprintf_r+0xfd4>
8000ad84:	41 09       	lddsp	r9,sp[0x40]
8000ad86:	59 f8       	cp.w	r8,31
8000ad88:	e0 89 00 10 	brgt	8000ada8 <_vfprintf_r+0xfcc>
8000ad8c:	f2 ca ff fc 	sub	r10,r9,-4
8000ad90:	51 0a       	stdsp	sp[0x40],r10
8000ad92:	fa c6 f9 44 	sub	r6,sp,-1724
8000ad96:	72 09       	ld.w	r9,r9[0x0]
8000ad98:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000ad9c:	f5 49 fd 88 	st.w	r10[-632],r9
8000ada0:	2f f8       	sub	r8,-1
8000ada2:	fb 48 06 b4 	st.w	sp[1716],r8
8000ada6:	c0 58       	rjmp	8000adb0 <_vfprintf_r+0xfd4>
8000ada8:	f2 c8 ff fc 	sub	r8,r9,-4
8000adac:	51 08       	stdsp	sp[0x40],r8
8000adae:	72 09       	ld.w	r9,r9[0x0]
8000adb0:	33 08       	mov	r8,48
8000adb2:	fb 68 06 b8 	st.b	sp[1720],r8
8000adb6:	37 88       	mov	r8,120
8000adb8:	30 0e       	mov	lr,0
8000adba:	fb 68 06 b9 	st.b	sp[1721],r8
8000adbe:	fe cc ba de 	sub	r12,pc,-17698
8000adc2:	50 19       	stdsp	sp[0x4],r9
8000adc4:	a1 b5       	sbr	r5,0x1
8000adc6:	50 0e       	stdsp	sp[0x0],lr
8000adc8:	50 dc       	stdsp	sp[0x34],r12
8000adca:	30 28       	mov	r8,2
8000adcc:	37 80       	mov	r0,120
8000adce:	e0 8f 02 a3 	bral	8000b314 <_vfprintf_r+0x1538>
8000add2:	50 a7       	stdsp	sp[0x28],r7
8000add4:	50 80       	stdsp	sp[0x20],r0
8000add6:	10 90       	mov	r0,r8
8000add8:	30 08       	mov	r8,0
8000adda:	fb 68 06 bb 	st.b	sp[1723],r8
8000adde:	0c 97       	mov	r7,r6
8000ade0:	04 94       	mov	r4,r2
8000ade2:	06 96       	mov	r6,r3
8000ade4:	02 92       	mov	r2,r1
8000ade6:	40 93       	lddsp	r3,sp[0x24]
8000ade8:	40 41       	lddsp	r1,sp[0x10]
8000adea:	0e 99       	mov	r9,r7
8000adec:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000adf0:	40 3b       	lddsp	r11,sp[0xc]
8000adf2:	58 0b       	cp.w	r11,0
8000adf4:	c1 d0       	breq	8000ae2e <_vfprintf_r+0x1052>
8000adf6:	10 36       	cp.w	r6,r8
8000adf8:	c0 64       	brge	8000ae04 <_vfprintf_r+0x1028>
8000adfa:	fa ca f9 44 	sub	r10,sp,-1724
8000adfe:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000ae02:	c1 d8       	rjmp	8000ae3c <_vfprintf_r+0x1060>
8000ae04:	fa c8 f9 50 	sub	r8,sp,-1712
8000ae08:	1a d8       	st.w	--sp,r8
8000ae0a:	fa c8 fa b8 	sub	r8,sp,-1352
8000ae0e:	1a d8       	st.w	--sp,r8
8000ae10:	fa c8 fb b4 	sub	r8,sp,-1100
8000ae14:	0c 9b       	mov	r11,r6
8000ae16:	1a d8       	st.w	--sp,r8
8000ae18:	04 9a       	mov	r10,r2
8000ae1a:	fa c8 f9 40 	sub	r8,sp,-1728
8000ae1e:	fa c9 ff b4 	sub	r9,sp,-76
8000ae22:	08 9c       	mov	r12,r4
8000ae24:	fe b0 f6 44 	rcall	80009aac <get_arg>
8000ae28:	2f dd       	sub	sp,-12
8000ae2a:	78 06       	ld.w	r6,r12[0x0]
8000ae2c:	c2 08       	rjmp	8000ae6c <_vfprintf_r+0x1090>
8000ae2e:	2f f7       	sub	r7,-1
8000ae30:	10 39       	cp.w	r9,r8
8000ae32:	c0 84       	brge	8000ae42 <_vfprintf_r+0x1066>
8000ae34:	fa c9 f9 44 	sub	r9,sp,-1724
8000ae38:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000ae3c:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000ae40:	c1 68       	rjmp	8000ae6c <_vfprintf_r+0x1090>
8000ae42:	41 09       	lddsp	r9,sp[0x40]
8000ae44:	59 f8       	cp.w	r8,31
8000ae46:	e0 89 00 10 	brgt	8000ae66 <_vfprintf_r+0x108a>
8000ae4a:	f2 ca ff fc 	sub	r10,r9,-4
8000ae4e:	51 0a       	stdsp	sp[0x40],r10
8000ae50:	72 06       	ld.w	r6,r9[0x0]
8000ae52:	fa ce f9 44 	sub	lr,sp,-1724
8000ae56:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000ae5a:	f3 46 fd 88 	st.w	r9[-632],r6
8000ae5e:	2f f8       	sub	r8,-1
8000ae60:	fb 48 06 b4 	st.w	sp[1716],r8
8000ae64:	c0 48       	rjmp	8000ae6c <_vfprintf_r+0x1090>
8000ae66:	72 06       	ld.w	r6,r9[0x0]
8000ae68:	2f c9       	sub	r9,-4
8000ae6a:	51 09       	stdsp	sp[0x40],r9
8000ae6c:	40 2c       	lddsp	r12,sp[0x8]
8000ae6e:	58 0c       	cp.w	r12,0
8000ae70:	c1 05       	brlt	8000ae90 <_vfprintf_r+0x10b4>
8000ae72:	18 9a       	mov	r10,r12
8000ae74:	30 0b       	mov	r11,0
8000ae76:	0c 9c       	mov	r12,r6
8000ae78:	e0 a0 11 1e 	rcall	8000d0b4 <memchr>
8000ae7c:	e0 80 02 df 	breq	8000b43a <_vfprintf_r+0x165e>
8000ae80:	f8 06 01 02 	sub	r2,r12,r6
8000ae84:	40 2b       	lddsp	r11,sp[0x8]
8000ae86:	16 32       	cp.w	r2,r11
8000ae88:	e0 89 02 d9 	brgt	8000b43a <_vfprintf_r+0x165e>
8000ae8c:	e0 8f 02 d4 	bral	8000b434 <_vfprintf_r+0x1658>
8000ae90:	30 0a       	mov	r10,0
8000ae92:	0c 9c       	mov	r12,r6
8000ae94:	50 2a       	stdsp	sp[0x8],r10
8000ae96:	e0 a0 15 e7 	rcall	8000da64 <strlen>
8000ae9a:	18 92       	mov	r2,r12
8000ae9c:	e0 8f 02 d2 	bral	8000b440 <_vfprintf_r+0x1664>
8000aea0:	50 a7       	stdsp	sp[0x28],r7
8000aea2:	50 80       	stdsp	sp[0x20],r0
8000aea4:	0c 97       	mov	r7,r6
8000aea6:	04 94       	mov	r4,r2
8000aea8:	06 96       	mov	r6,r3
8000aeaa:	02 92       	mov	r2,r1
8000aeac:	40 93       	lddsp	r3,sp[0x24]
8000aeae:	10 90       	mov	r0,r8
8000aeb0:	40 41       	lddsp	r1,sp[0x10]
8000aeb2:	a5 a5       	sbr	r5,0x4
8000aeb4:	c0 a8       	rjmp	8000aec8 <_vfprintf_r+0x10ec>
8000aeb6:	50 a7       	stdsp	sp[0x28],r7
8000aeb8:	50 80       	stdsp	sp[0x20],r0
8000aeba:	0c 97       	mov	r7,r6
8000aebc:	04 94       	mov	r4,r2
8000aebe:	06 96       	mov	r6,r3
8000aec0:	02 92       	mov	r2,r1
8000aec2:	40 93       	lddsp	r3,sp[0x24]
8000aec4:	10 90       	mov	r0,r8
8000aec6:	40 41       	lddsp	r1,sp[0x10]
8000aec8:	ed b5 00 05 	bld	r5,0x5
8000aecc:	c5 61       	brne	8000af78 <_vfprintf_r+0x119c>
8000aece:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000aed2:	40 39       	lddsp	r9,sp[0xc]
8000aed4:	58 09       	cp.w	r9,0
8000aed6:	c2 10       	breq	8000af18 <_vfprintf_r+0x113c>
8000aed8:	10 36       	cp.w	r6,r8
8000aeda:	c0 74       	brge	8000aee8 <_vfprintf_r+0x110c>
8000aedc:	fa c8 f9 44 	sub	r8,sp,-1724
8000aee0:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000aee4:	c2 38       	rjmp	8000af2a <_vfprintf_r+0x114e>
8000aee6:	d7 03       	nop
8000aee8:	fa c8 f9 50 	sub	r8,sp,-1712
8000aeec:	1a d8       	st.w	--sp,r8
8000aeee:	fa c8 fa b8 	sub	r8,sp,-1352
8000aef2:	1a d8       	st.w	--sp,r8
8000aef4:	fa c8 fb b4 	sub	r8,sp,-1100
8000aef8:	1a d8       	st.w	--sp,r8
8000aefa:	fa c8 f9 40 	sub	r8,sp,-1728
8000aefe:	fa c9 ff b4 	sub	r9,sp,-76
8000af02:	04 9a       	mov	r10,r2
8000af04:	0c 9b       	mov	r11,r6
8000af06:	08 9c       	mov	r12,r4
8000af08:	fe b0 f5 d2 	rcall	80009aac <get_arg>
8000af0c:	2f dd       	sub	sp,-12
8000af0e:	f8 e8 00 00 	ld.d	r8,r12[0]
8000af12:	fa e9 00 00 	st.d	sp[0],r8
8000af16:	c2 e8       	rjmp	8000af72 <_vfprintf_r+0x1196>
8000af18:	ee ca ff ff 	sub	r10,r7,-1
8000af1c:	10 37       	cp.w	r7,r8
8000af1e:	c0 b4       	brge	8000af34 <_vfprintf_r+0x1158>
8000af20:	fa c8 f9 44 	sub	r8,sp,-1724
8000af24:	14 97       	mov	r7,r10
8000af26:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000af2a:	ec ea fd 88 	ld.d	r10,r6[-632]
8000af2e:	fa eb 00 00 	st.d	sp[0],r10
8000af32:	c2 08       	rjmp	8000af72 <_vfprintf_r+0x1196>
8000af34:	41 09       	lddsp	r9,sp[0x40]
8000af36:	59 f8       	cp.w	r8,31
8000af38:	e0 89 00 16 	brgt	8000af64 <_vfprintf_r+0x1188>
8000af3c:	f2 e6 00 00 	ld.d	r6,r9[0]
8000af40:	f2 cb ff f8 	sub	r11,r9,-8
8000af44:	fa e7 00 00 	st.d	sp[0],r6
8000af48:	51 0b       	stdsp	sp[0x40],r11
8000af4a:	fa c6 f9 44 	sub	r6,sp,-1724
8000af4e:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000af52:	fa e6 00 00 	ld.d	r6,sp[0]
8000af56:	f2 e7 fd 88 	st.d	r9[-632],r6
8000af5a:	2f f8       	sub	r8,-1
8000af5c:	14 97       	mov	r7,r10
8000af5e:	fb 48 06 b4 	st.w	sp[1716],r8
8000af62:	c0 88       	rjmp	8000af72 <_vfprintf_r+0x1196>
8000af64:	f2 e6 00 00 	ld.d	r6,r9[0]
8000af68:	2f 89       	sub	r9,-8
8000af6a:	fa e7 00 00 	st.d	sp[0],r6
8000af6e:	51 09       	stdsp	sp[0x40],r9
8000af70:	14 97       	mov	r7,r10
8000af72:	30 18       	mov	r8,1
8000af74:	e0 8f 01 d0 	bral	8000b314 <_vfprintf_r+0x1538>
8000af78:	ed b5 00 04 	bld	r5,0x4
8000af7c:	c1 61       	brne	8000afa8 <_vfprintf_r+0x11cc>
8000af7e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000af82:	40 3e       	lddsp	lr,sp[0xc]
8000af84:	58 0e       	cp.w	lr,0
8000af86:	c0 80       	breq	8000af96 <_vfprintf_r+0x11ba>
8000af88:	10 36       	cp.w	r6,r8
8000af8a:	c6 74       	brge	8000b058 <_vfprintf_r+0x127c>
8000af8c:	fa cc f9 44 	sub	r12,sp,-1724
8000af90:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000af94:	c8 08       	rjmp	8000b094 <_vfprintf_r+0x12b8>
8000af96:	ee ca ff ff 	sub	r10,r7,-1
8000af9a:	10 37       	cp.w	r7,r8
8000af9c:	c7 f4       	brge	8000b09a <_vfprintf_r+0x12be>
8000af9e:	fa cb f9 44 	sub	r11,sp,-1724
8000afa2:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000afa6:	c7 68       	rjmp	8000b092 <_vfprintf_r+0x12b6>
8000afa8:	ed b5 00 06 	bld	r5,0x6
8000afac:	c4 a1       	brne	8000b040 <_vfprintf_r+0x1264>
8000afae:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000afb2:	40 3c       	lddsp	r12,sp[0xc]
8000afb4:	58 0c       	cp.w	r12,0
8000afb6:	c1 d0       	breq	8000aff0 <_vfprintf_r+0x1214>
8000afb8:	10 36       	cp.w	r6,r8
8000afba:	c0 64       	brge	8000afc6 <_vfprintf_r+0x11ea>
8000afbc:	fa cb f9 44 	sub	r11,sp,-1724
8000afc0:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000afc4:	c1 f8       	rjmp	8000b002 <_vfprintf_r+0x1226>
8000afc6:	fa c8 f9 50 	sub	r8,sp,-1712
8000afca:	1a d8       	st.w	--sp,r8
8000afcc:	fa c8 fa b8 	sub	r8,sp,-1352
8000afd0:	1a d8       	st.w	--sp,r8
8000afd2:	fa c8 fb b4 	sub	r8,sp,-1100
8000afd6:	1a d8       	st.w	--sp,r8
8000afd8:	fa c8 f9 40 	sub	r8,sp,-1728
8000afdc:	fa c9 ff b4 	sub	r9,sp,-76
8000afe0:	04 9a       	mov	r10,r2
8000afe2:	0c 9b       	mov	r11,r6
8000afe4:	08 9c       	mov	r12,r4
8000afe6:	fe b0 f5 63 	rcall	80009aac <get_arg>
8000afea:	2f dd       	sub	sp,-12
8000afec:	98 18       	ld.sh	r8,r12[0x2]
8000afee:	c2 68       	rjmp	8000b03a <_vfprintf_r+0x125e>
8000aff0:	ee ca ff ff 	sub	r10,r7,-1
8000aff4:	10 37       	cp.w	r7,r8
8000aff6:	c0 94       	brge	8000b008 <_vfprintf_r+0x122c>
8000aff8:	fa c9 f9 44 	sub	r9,sp,-1724
8000affc:	14 97       	mov	r7,r10
8000affe:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b002:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000b006:	c1 a8       	rjmp	8000b03a <_vfprintf_r+0x125e>
8000b008:	41 09       	lddsp	r9,sp[0x40]
8000b00a:	59 f8       	cp.w	r8,31
8000b00c:	e0 89 00 13 	brgt	8000b032 <_vfprintf_r+0x1256>
8000b010:	f2 cb ff fc 	sub	r11,r9,-4
8000b014:	51 0b       	stdsp	sp[0x40],r11
8000b016:	72 09       	ld.w	r9,r9[0x0]
8000b018:	fa c6 f9 44 	sub	r6,sp,-1724
8000b01c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000b020:	2f f8       	sub	r8,-1
8000b022:	f7 49 fd 88 	st.w	r11[-632],r9
8000b026:	fb 48 06 b4 	st.w	sp[1716],r8
8000b02a:	14 97       	mov	r7,r10
8000b02c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000b030:	c0 58       	rjmp	8000b03a <_vfprintf_r+0x125e>
8000b032:	92 18       	ld.sh	r8,r9[0x2]
8000b034:	14 97       	mov	r7,r10
8000b036:	2f c9       	sub	r9,-4
8000b038:	51 09       	stdsp	sp[0x40],r9
8000b03a:	5c 78       	castu.h	r8
8000b03c:	50 18       	stdsp	sp[0x4],r8
8000b03e:	c4 68       	rjmp	8000b0ca <_vfprintf_r+0x12ee>
8000b040:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b044:	40 3c       	lddsp	r12,sp[0xc]
8000b046:	58 0c       	cp.w	r12,0
8000b048:	c1 d0       	breq	8000b082 <_vfprintf_r+0x12a6>
8000b04a:	10 36       	cp.w	r6,r8
8000b04c:	c0 64       	brge	8000b058 <_vfprintf_r+0x127c>
8000b04e:	fa cb f9 44 	sub	r11,sp,-1724
8000b052:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b056:	c1 f8       	rjmp	8000b094 <_vfprintf_r+0x12b8>
8000b058:	fa c8 f9 50 	sub	r8,sp,-1712
8000b05c:	1a d8       	st.w	--sp,r8
8000b05e:	fa c8 fa b8 	sub	r8,sp,-1352
8000b062:	0c 9b       	mov	r11,r6
8000b064:	1a d8       	st.w	--sp,r8
8000b066:	fa c8 fb b4 	sub	r8,sp,-1100
8000b06a:	04 9a       	mov	r10,r2
8000b06c:	1a d8       	st.w	--sp,r8
8000b06e:	08 9c       	mov	r12,r4
8000b070:	fa c8 f9 40 	sub	r8,sp,-1728
8000b074:	fa c9 ff b4 	sub	r9,sp,-76
8000b078:	fe b0 f5 1a 	rcall	80009aac <get_arg>
8000b07c:	2f dd       	sub	sp,-12
8000b07e:	78 0b       	ld.w	r11,r12[0x0]
8000b080:	c2 48       	rjmp	8000b0c8 <_vfprintf_r+0x12ec>
8000b082:	ee ca ff ff 	sub	r10,r7,-1
8000b086:	10 37       	cp.w	r7,r8
8000b088:	c0 94       	brge	8000b09a <_vfprintf_r+0x12be>
8000b08a:	fa c9 f9 44 	sub	r9,sp,-1724
8000b08e:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b092:	14 97       	mov	r7,r10
8000b094:	ec fb fd 88 	ld.w	r11,r6[-632]
8000b098:	c1 88       	rjmp	8000b0c8 <_vfprintf_r+0x12ec>
8000b09a:	41 09       	lddsp	r9,sp[0x40]
8000b09c:	59 f8       	cp.w	r8,31
8000b09e:	e0 89 00 11 	brgt	8000b0c0 <_vfprintf_r+0x12e4>
8000b0a2:	f2 cb ff fc 	sub	r11,r9,-4
8000b0a6:	51 0b       	stdsp	sp[0x40],r11
8000b0a8:	fa c6 f9 44 	sub	r6,sp,-1724
8000b0ac:	72 0b       	ld.w	r11,r9[0x0]
8000b0ae:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b0b2:	f3 4b fd 88 	st.w	r9[-632],r11
8000b0b6:	2f f8       	sub	r8,-1
8000b0b8:	14 97       	mov	r7,r10
8000b0ba:	fb 48 06 b4 	st.w	sp[1716],r8
8000b0be:	c0 58       	rjmp	8000b0c8 <_vfprintf_r+0x12ec>
8000b0c0:	72 0b       	ld.w	r11,r9[0x0]
8000b0c2:	14 97       	mov	r7,r10
8000b0c4:	2f c9       	sub	r9,-4
8000b0c6:	51 09       	stdsp	sp[0x40],r9
8000b0c8:	50 1b       	stdsp	sp[0x4],r11
8000b0ca:	30 0e       	mov	lr,0
8000b0cc:	30 18       	mov	r8,1
8000b0ce:	50 0e       	stdsp	sp[0x0],lr
8000b0d0:	c2 29       	rjmp	8000b314 <_vfprintf_r+0x1538>
8000b0d2:	50 a7       	stdsp	sp[0x28],r7
8000b0d4:	50 80       	stdsp	sp[0x20],r0
8000b0d6:	0c 97       	mov	r7,r6
8000b0d8:	04 94       	mov	r4,r2
8000b0da:	06 96       	mov	r6,r3
8000b0dc:	02 92       	mov	r2,r1
8000b0de:	fe cc bd fe 	sub	r12,pc,-16898
8000b0e2:	40 93       	lddsp	r3,sp[0x24]
8000b0e4:	10 90       	mov	r0,r8
8000b0e6:	40 41       	lddsp	r1,sp[0x10]
8000b0e8:	50 dc       	stdsp	sp[0x34],r12
8000b0ea:	ed b5 00 05 	bld	r5,0x5
8000b0ee:	c5 51       	brne	8000b198 <_vfprintf_r+0x13bc>
8000b0f0:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b0f4:	40 3b       	lddsp	r11,sp[0xc]
8000b0f6:	58 0b       	cp.w	r11,0
8000b0f8:	c2 20       	breq	8000b13c <_vfprintf_r+0x1360>
8000b0fa:	10 36       	cp.w	r6,r8
8000b0fc:	c0 a4       	brge	8000b110 <_vfprintf_r+0x1334>
8000b0fe:	fa ca f9 44 	sub	r10,sp,-1724
8000b102:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000b106:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000b10a:	fa e9 00 00 	st.d	sp[0],r8
8000b10e:	cf 28       	rjmp	8000b2f2 <_vfprintf_r+0x1516>
8000b110:	fa c8 f9 50 	sub	r8,sp,-1712
8000b114:	1a d8       	st.w	--sp,r8
8000b116:	fa c8 fa b8 	sub	r8,sp,-1352
8000b11a:	04 9a       	mov	r10,r2
8000b11c:	1a d8       	st.w	--sp,r8
8000b11e:	0c 9b       	mov	r11,r6
8000b120:	fa c8 fb b4 	sub	r8,sp,-1100
8000b124:	08 9c       	mov	r12,r4
8000b126:	1a d8       	st.w	--sp,r8
8000b128:	fa c8 f9 40 	sub	r8,sp,-1728
8000b12c:	fa c9 ff b4 	sub	r9,sp,-76
8000b130:	fe b0 f4 be 	rcall	80009aac <get_arg>
8000b134:	2f dd       	sub	sp,-12
8000b136:	f8 ea 00 00 	ld.d	r10,r12[0]
8000b13a:	c0 c8       	rjmp	8000b152 <_vfprintf_r+0x1376>
8000b13c:	ee ca ff ff 	sub	r10,r7,-1
8000b140:	10 37       	cp.w	r7,r8
8000b142:	c0 b4       	brge	8000b158 <_vfprintf_r+0x137c>
8000b144:	fa c9 f9 44 	sub	r9,sp,-1724
8000b148:	14 97       	mov	r7,r10
8000b14a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b14e:	ec ea fd 88 	ld.d	r10,r6[-632]
8000b152:	fa eb 00 00 	st.d	sp[0],r10
8000b156:	cc e8       	rjmp	8000b2f2 <_vfprintf_r+0x1516>
8000b158:	41 09       	lddsp	r9,sp[0x40]
8000b15a:	59 f8       	cp.w	r8,31
8000b15c:	e0 89 00 16 	brgt	8000b188 <_vfprintf_r+0x13ac>
8000b160:	f2 e6 00 00 	ld.d	r6,r9[0]
8000b164:	f2 cb ff f8 	sub	r11,r9,-8
8000b168:	fa e7 00 00 	st.d	sp[0],r6
8000b16c:	51 0b       	stdsp	sp[0x40],r11
8000b16e:	fa c6 f9 44 	sub	r6,sp,-1724
8000b172:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b176:	fa e6 00 00 	ld.d	r6,sp[0]
8000b17a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000b17e:	2f f8       	sub	r8,-1
8000b180:	14 97       	mov	r7,r10
8000b182:	fb 48 06 b4 	st.w	sp[1716],r8
8000b186:	cb 68       	rjmp	8000b2f2 <_vfprintf_r+0x1516>
8000b188:	f2 e6 00 00 	ld.d	r6,r9[0]
8000b18c:	2f 89       	sub	r9,-8
8000b18e:	fa e7 00 00 	st.d	sp[0],r6
8000b192:	51 09       	stdsp	sp[0x40],r9
8000b194:	14 97       	mov	r7,r10
8000b196:	ca e8       	rjmp	8000b2f2 <_vfprintf_r+0x1516>
8000b198:	ed b5 00 04 	bld	r5,0x4
8000b19c:	c1 71       	brne	8000b1ca <_vfprintf_r+0x13ee>
8000b19e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b1a2:	40 3e       	lddsp	lr,sp[0xc]
8000b1a4:	58 0e       	cp.w	lr,0
8000b1a6:	c0 80       	breq	8000b1b6 <_vfprintf_r+0x13da>
8000b1a8:	10 36       	cp.w	r6,r8
8000b1aa:	c6 94       	brge	8000b27c <_vfprintf_r+0x14a0>
8000b1ac:	fa cc f9 44 	sub	r12,sp,-1724
8000b1b0:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000b1b4:	c8 28       	rjmp	8000b2b8 <_vfprintf_r+0x14dc>
8000b1b6:	ee ca ff ff 	sub	r10,r7,-1
8000b1ba:	10 37       	cp.w	r7,r8
8000b1bc:	e0 84 00 81 	brge	8000b2be <_vfprintf_r+0x14e2>
8000b1c0:	fa cb f9 44 	sub	r11,sp,-1724
8000b1c4:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b1c8:	c7 78       	rjmp	8000b2b6 <_vfprintf_r+0x14da>
8000b1ca:	ed b5 00 06 	bld	r5,0x6
8000b1ce:	c4 b1       	brne	8000b264 <_vfprintf_r+0x1488>
8000b1d0:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b1d4:	40 3c       	lddsp	r12,sp[0xc]
8000b1d6:	58 0c       	cp.w	r12,0
8000b1d8:	c1 d0       	breq	8000b212 <_vfprintf_r+0x1436>
8000b1da:	10 36       	cp.w	r6,r8
8000b1dc:	c0 64       	brge	8000b1e8 <_vfprintf_r+0x140c>
8000b1de:	fa cb f9 44 	sub	r11,sp,-1724
8000b1e2:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b1e6:	c1 f8       	rjmp	8000b224 <_vfprintf_r+0x1448>
8000b1e8:	fa c8 f9 50 	sub	r8,sp,-1712
8000b1ec:	1a d8       	st.w	--sp,r8
8000b1ee:	fa c8 fa b8 	sub	r8,sp,-1352
8000b1f2:	1a d8       	st.w	--sp,r8
8000b1f4:	fa c8 fb b4 	sub	r8,sp,-1100
8000b1f8:	1a d8       	st.w	--sp,r8
8000b1fa:	fa c8 f9 40 	sub	r8,sp,-1728
8000b1fe:	fa c9 ff b4 	sub	r9,sp,-76
8000b202:	04 9a       	mov	r10,r2
8000b204:	0c 9b       	mov	r11,r6
8000b206:	08 9c       	mov	r12,r4
8000b208:	fe b0 f4 52 	rcall	80009aac <get_arg>
8000b20c:	2f dd       	sub	sp,-12
8000b20e:	98 18       	ld.sh	r8,r12[0x2]
8000b210:	c2 78       	rjmp	8000b25e <_vfprintf_r+0x1482>
8000b212:	ee ca ff ff 	sub	r10,r7,-1
8000b216:	10 37       	cp.w	r7,r8
8000b218:	c0 a4       	brge	8000b22c <_vfprintf_r+0x1450>
8000b21a:	fa c9 f9 44 	sub	r9,sp,-1724
8000b21e:	14 97       	mov	r7,r10
8000b220:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b224:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000b228:	c1 b8       	rjmp	8000b25e <_vfprintf_r+0x1482>
8000b22a:	d7 03       	nop
8000b22c:	41 09       	lddsp	r9,sp[0x40]
8000b22e:	59 f8       	cp.w	r8,31
8000b230:	e0 89 00 13 	brgt	8000b256 <_vfprintf_r+0x147a>
8000b234:	f2 cb ff fc 	sub	r11,r9,-4
8000b238:	51 0b       	stdsp	sp[0x40],r11
8000b23a:	72 09       	ld.w	r9,r9[0x0]
8000b23c:	fa c6 f9 44 	sub	r6,sp,-1724
8000b240:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000b244:	2f f8       	sub	r8,-1
8000b246:	f7 49 fd 88 	st.w	r11[-632],r9
8000b24a:	fb 48 06 b4 	st.w	sp[1716],r8
8000b24e:	14 97       	mov	r7,r10
8000b250:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000b254:	c0 58       	rjmp	8000b25e <_vfprintf_r+0x1482>
8000b256:	92 18       	ld.sh	r8,r9[0x2]
8000b258:	14 97       	mov	r7,r10
8000b25a:	2f c9       	sub	r9,-4
8000b25c:	51 09       	stdsp	sp[0x40],r9
8000b25e:	5c 78       	castu.h	r8
8000b260:	50 18       	stdsp	sp[0x4],r8
8000b262:	c4 68       	rjmp	8000b2ee <_vfprintf_r+0x1512>
8000b264:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b268:	40 3c       	lddsp	r12,sp[0xc]
8000b26a:	58 0c       	cp.w	r12,0
8000b26c:	c1 d0       	breq	8000b2a6 <_vfprintf_r+0x14ca>
8000b26e:	10 36       	cp.w	r6,r8
8000b270:	c0 64       	brge	8000b27c <_vfprintf_r+0x14a0>
8000b272:	fa cb f9 44 	sub	r11,sp,-1724
8000b276:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000b27a:	c1 f8       	rjmp	8000b2b8 <_vfprintf_r+0x14dc>
8000b27c:	fa c8 f9 50 	sub	r8,sp,-1712
8000b280:	1a d8       	st.w	--sp,r8
8000b282:	fa c8 fa b8 	sub	r8,sp,-1352
8000b286:	0c 9b       	mov	r11,r6
8000b288:	1a d8       	st.w	--sp,r8
8000b28a:	fa c8 fb b4 	sub	r8,sp,-1100
8000b28e:	04 9a       	mov	r10,r2
8000b290:	1a d8       	st.w	--sp,r8
8000b292:	08 9c       	mov	r12,r4
8000b294:	fa c8 f9 40 	sub	r8,sp,-1728
8000b298:	fa c9 ff b4 	sub	r9,sp,-76
8000b29c:	fe b0 f4 08 	rcall	80009aac <get_arg>
8000b2a0:	2f dd       	sub	sp,-12
8000b2a2:	78 0b       	ld.w	r11,r12[0x0]
8000b2a4:	c2 48       	rjmp	8000b2ec <_vfprintf_r+0x1510>
8000b2a6:	ee ca ff ff 	sub	r10,r7,-1
8000b2aa:	10 37       	cp.w	r7,r8
8000b2ac:	c0 94       	brge	8000b2be <_vfprintf_r+0x14e2>
8000b2ae:	fa c9 f9 44 	sub	r9,sp,-1724
8000b2b2:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000b2b6:	14 97       	mov	r7,r10
8000b2b8:	ec fb fd 88 	ld.w	r11,r6[-632]
8000b2bc:	c1 88       	rjmp	8000b2ec <_vfprintf_r+0x1510>
8000b2be:	41 09       	lddsp	r9,sp[0x40]
8000b2c0:	59 f8       	cp.w	r8,31
8000b2c2:	e0 89 00 11 	brgt	8000b2e4 <_vfprintf_r+0x1508>
8000b2c6:	f2 cb ff fc 	sub	r11,r9,-4
8000b2ca:	51 0b       	stdsp	sp[0x40],r11
8000b2cc:	fa c6 f9 44 	sub	r6,sp,-1724
8000b2d0:	72 0b       	ld.w	r11,r9[0x0]
8000b2d2:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000b2d6:	f3 4b fd 88 	st.w	r9[-632],r11
8000b2da:	2f f8       	sub	r8,-1
8000b2dc:	14 97       	mov	r7,r10
8000b2de:	fb 48 06 b4 	st.w	sp[1716],r8
8000b2e2:	c0 58       	rjmp	8000b2ec <_vfprintf_r+0x1510>
8000b2e4:	72 0b       	ld.w	r11,r9[0x0]
8000b2e6:	14 97       	mov	r7,r10
8000b2e8:	2f c9       	sub	r9,-4
8000b2ea:	51 09       	stdsp	sp[0x40],r9
8000b2ec:	50 1b       	stdsp	sp[0x4],r11
8000b2ee:	30 0e       	mov	lr,0
8000b2f0:	50 0e       	stdsp	sp[0x0],lr
8000b2f2:	40 08       	lddsp	r8,sp[0x0]
8000b2f4:	40 1c       	lddsp	r12,sp[0x4]
8000b2f6:	18 48       	or	r8,r12
8000b2f8:	5f 19       	srne	r9
8000b2fa:	0a 98       	mov	r8,r5
8000b2fc:	eb e9 00 09 	and	r9,r5,r9
8000b300:	a1 b8       	sbr	r8,0x1
8000b302:	58 09       	cp.w	r9,0
8000b304:	c0 70       	breq	8000b312 <_vfprintf_r+0x1536>
8000b306:	10 95       	mov	r5,r8
8000b308:	fb 60 06 b9 	st.b	sp[1721],r0
8000b30c:	33 08       	mov	r8,48
8000b30e:	fb 68 06 b8 	st.b	sp[1720],r8
8000b312:	30 28       	mov	r8,2
8000b314:	30 09       	mov	r9,0
8000b316:	fb 69 06 bb 	st.b	sp[1723],r9
8000b31a:	0a 99       	mov	r9,r5
8000b31c:	a7 d9       	cbr	r9,0x7
8000b31e:	40 2b       	lddsp	r11,sp[0x8]
8000b320:	40 16       	lddsp	r6,sp[0x4]
8000b322:	58 0b       	cp.w	r11,0
8000b324:	5f 1a       	srne	r10
8000b326:	f2 05 17 40 	movge	r5,r9
8000b32a:	fa c2 f9 78 	sub	r2,sp,-1672
8000b32e:	40 09       	lddsp	r9,sp[0x0]
8000b330:	0c 49       	or	r9,r6
8000b332:	5f 19       	srne	r9
8000b334:	f5 e9 10 09 	or	r9,r10,r9
8000b338:	c5 c0       	breq	8000b3f0 <_vfprintf_r+0x1614>
8000b33a:	30 19       	mov	r9,1
8000b33c:	f2 08 18 00 	cp.b	r8,r9
8000b340:	c0 60       	breq	8000b34c <_vfprintf_r+0x1570>
8000b342:	30 29       	mov	r9,2
8000b344:	f2 08 18 00 	cp.b	r8,r9
8000b348:	c0 41       	brne	8000b350 <_vfprintf_r+0x1574>
8000b34a:	c3 c8       	rjmp	8000b3c2 <_vfprintf_r+0x15e6>
8000b34c:	04 96       	mov	r6,r2
8000b34e:	c3 08       	rjmp	8000b3ae <_vfprintf_r+0x15d2>
8000b350:	04 96       	mov	r6,r2
8000b352:	fa e8 00 00 	ld.d	r8,sp[0]
8000b356:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000b35a:	2d 0a       	sub	r10,-48
8000b35c:	0c fa       	st.b	--r6,r10
8000b35e:	f0 0b 16 03 	lsr	r11,r8,0x3
8000b362:	f2 0c 16 03 	lsr	r12,r9,0x3
8000b366:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
8000b36a:	18 99       	mov	r9,r12
8000b36c:	16 98       	mov	r8,r11
8000b36e:	58 08       	cp.w	r8,0
8000b370:	5c 29       	cpc	r9
8000b372:	cf 21       	brne	8000b356 <_vfprintf_r+0x157a>
8000b374:	fa e9 00 00 	st.d	sp[0],r8
8000b378:	ed b5 00 00 	bld	r5,0x0
8000b37c:	c4 51       	brne	8000b406 <_vfprintf_r+0x162a>
8000b37e:	33 09       	mov	r9,48
8000b380:	f2 0a 18 00 	cp.b	r10,r9
8000b384:	c4 10       	breq	8000b406 <_vfprintf_r+0x162a>
8000b386:	0c f9       	st.b	--r6,r9
8000b388:	c3 f8       	rjmp	8000b406 <_vfprintf_r+0x162a>
8000b38a:	fa ea 00 00 	ld.d	r10,sp[0]
8000b38e:	30 a8       	mov	r8,10
8000b390:	30 09       	mov	r9,0
8000b392:	e0 a0 1a 67 	rcall	8000e860 <__avr32_umod64>
8000b396:	30 a8       	mov	r8,10
8000b398:	2d 0a       	sub	r10,-48
8000b39a:	30 09       	mov	r9,0
8000b39c:	ac 8a       	st.b	r6[0x0],r10
8000b39e:	fa ea 00 00 	ld.d	r10,sp[0]
8000b3a2:	e0 a0 19 2d 	rcall	8000e5fc <__avr32_udiv64>
8000b3a6:	16 99       	mov	r9,r11
8000b3a8:	14 98       	mov	r8,r10
8000b3aa:	fa e9 00 00 	st.d	sp[0],r8
8000b3ae:	20 16       	sub	r6,1
8000b3b0:	fa ea 00 00 	ld.d	r10,sp[0]
8000b3b4:	58 9a       	cp.w	r10,9
8000b3b6:	5c 2b       	cpc	r11
8000b3b8:	fe 9b ff e9 	brhi	8000b38a <_vfprintf_r+0x15ae>
8000b3bc:	1b f8       	ld.ub	r8,sp[0x7]
8000b3be:	2d 08       	sub	r8,-48
8000b3c0:	c2 08       	rjmp	8000b400 <_vfprintf_r+0x1624>
8000b3c2:	04 96       	mov	r6,r2
8000b3c4:	fa e8 00 00 	ld.d	r8,sp[0]
8000b3c8:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
8000b3cc:	40 de       	lddsp	lr,sp[0x34]
8000b3ce:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000b3d2:	0c fa       	st.b	--r6,r10
8000b3d4:	f2 0b 16 04 	lsr	r11,r9,0x4
8000b3d8:	f0 0a 16 04 	lsr	r10,r8,0x4
8000b3dc:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
8000b3e0:	16 99       	mov	r9,r11
8000b3e2:	14 98       	mov	r8,r10
8000b3e4:	58 08       	cp.w	r8,0
8000b3e6:	5c 29       	cpc	r9
8000b3e8:	cf 01       	brne	8000b3c8 <_vfprintf_r+0x15ec>
8000b3ea:	fa e9 00 00 	st.d	sp[0],r8
8000b3ee:	c0 c8       	rjmp	8000b406 <_vfprintf_r+0x162a>
8000b3f0:	58 08       	cp.w	r8,0
8000b3f2:	c0 91       	brne	8000b404 <_vfprintf_r+0x1628>
8000b3f4:	ed b5 00 00 	bld	r5,0x0
8000b3f8:	c0 61       	brne	8000b404 <_vfprintf_r+0x1628>
8000b3fa:	fa c6 f9 79 	sub	r6,sp,-1671
8000b3fe:	33 08       	mov	r8,48
8000b400:	ac 88       	st.b	r6[0x0],r8
8000b402:	c0 28       	rjmp	8000b406 <_vfprintf_r+0x162a>
8000b404:	04 96       	mov	r6,r2
8000b406:	0c 12       	sub	r2,r6
8000b408:	c1 c8       	rjmp	8000b440 <_vfprintf_r+0x1664>
8000b40a:	50 a7       	stdsp	sp[0x28],r7
8000b40c:	50 80       	stdsp	sp[0x20],r0
8000b40e:	40 93       	lddsp	r3,sp[0x24]
8000b410:	0c 97       	mov	r7,r6
8000b412:	10 90       	mov	r0,r8
8000b414:	04 94       	mov	r4,r2
8000b416:	40 41       	lddsp	r1,sp[0x10]
8000b418:	58 08       	cp.w	r8,0
8000b41a:	e0 80 04 4f 	breq	8000bcb8 <_vfprintf_r+0x1edc>
8000b41e:	fb 68 06 60 	st.b	sp[1632],r8
8000b422:	30 0c       	mov	r12,0
8000b424:	30 08       	mov	r8,0
8000b426:	30 12       	mov	r2,1
8000b428:	fb 68 06 bb 	st.b	sp[1723],r8
8000b42c:	50 2c       	stdsp	sp[0x8],r12
8000b42e:	fa c6 f9 a0 	sub	r6,sp,-1632
8000b432:	c0 78       	rjmp	8000b440 <_vfprintf_r+0x1664>
8000b434:	30 0b       	mov	r11,0
8000b436:	50 2b       	stdsp	sp[0x8],r11
8000b438:	c0 48       	rjmp	8000b440 <_vfprintf_r+0x1664>
8000b43a:	40 22       	lddsp	r2,sp[0x8]
8000b43c:	30 0a       	mov	r10,0
8000b43e:	50 2a       	stdsp	sp[0x8],r10
8000b440:	40 29       	lddsp	r9,sp[0x8]
8000b442:	e4 09 0c 49 	max	r9,r2,r9
8000b446:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000b44a:	50 39       	stdsp	sp[0xc],r9
8000b44c:	0a 9e       	mov	lr,r5
8000b44e:	30 09       	mov	r9,0
8000b450:	e2 1e 00 02 	andl	lr,0x2,COH
8000b454:	f2 08 18 00 	cp.b	r8,r9
8000b458:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000b45c:	f7 b8 01 ff 	subne	r8,-1
8000b460:	fb f8 1a 03 	st.wne	sp[0xc],r8
8000b464:	0a 9b       	mov	r11,r5
8000b466:	58 0e       	cp.w	lr,0
8000b468:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000b46c:	f7 bc 01 fe 	subne	r12,-2
8000b470:	fb fc 1a 03 	st.wne	sp[0xc],r12
8000b474:	e2 1b 00 84 	andl	r11,0x84,COH
8000b478:	50 fe       	stdsp	sp[0x3c],lr
8000b47a:	50 9b       	stdsp	sp[0x24],r11
8000b47c:	c4 71       	brne	8000b50a <_vfprintf_r+0x172e>
8000b47e:	40 8a       	lddsp	r10,sp[0x20]
8000b480:	40 39       	lddsp	r9,sp[0xc]
8000b482:	12 1a       	sub	r10,r9
8000b484:	50 4a       	stdsp	sp[0x10],r10
8000b486:	58 0a       	cp.w	r10,0
8000b488:	e0 89 00 20 	brgt	8000b4c8 <_vfprintf_r+0x16ec>
8000b48c:	c3 f8       	rjmp	8000b50a <_vfprintf_r+0x172e>
8000b48e:	2f 09       	sub	r9,-16
8000b490:	2f f8       	sub	r8,-1
8000b492:	fe ce c1 9a 	sub	lr,pc,-15974
8000b496:	31 0c       	mov	r12,16
8000b498:	fb 49 06 90 	st.w	sp[1680],r9
8000b49c:	87 0e       	st.w	r3[0x0],lr
8000b49e:	87 1c       	st.w	r3[0x4],r12
8000b4a0:	fb 48 06 8c 	st.w	sp[1676],r8
8000b4a4:	58 78       	cp.w	r8,7
8000b4a6:	e0 89 00 04 	brgt	8000b4ae <_vfprintf_r+0x16d2>
8000b4aa:	2f 83       	sub	r3,-8
8000b4ac:	c0 b8       	rjmp	8000b4c2 <_vfprintf_r+0x16e6>
8000b4ae:	fa ca f9 78 	sub	r10,sp,-1672
8000b4b2:	02 9b       	mov	r11,r1
8000b4b4:	08 9c       	mov	r12,r4
8000b4b6:	fe b0 f4 85 	rcall	80009dc0 <__sprint_r>
8000b4ba:	e0 81 04 10 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b4be:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b4c2:	40 4b       	lddsp	r11,sp[0x10]
8000b4c4:	21 0b       	sub	r11,16
8000b4c6:	50 4b       	stdsp	sp[0x10],r11
8000b4c8:	fa f9 06 90 	ld.w	r9,sp[1680]
8000b4cc:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b4d0:	fe ca c1 d8 	sub	r10,pc,-15912
8000b4d4:	40 4e       	lddsp	lr,sp[0x10]
8000b4d6:	59 0e       	cp.w	lr,16
8000b4d8:	fe 99 ff db 	brgt	8000b48e <_vfprintf_r+0x16b2>
8000b4dc:	1c 09       	add	r9,lr
8000b4de:	2f f8       	sub	r8,-1
8000b4e0:	87 0a       	st.w	r3[0x0],r10
8000b4e2:	fb 49 06 90 	st.w	sp[1680],r9
8000b4e6:	87 1e       	st.w	r3[0x4],lr
8000b4e8:	fb 48 06 8c 	st.w	sp[1676],r8
8000b4ec:	58 78       	cp.w	r8,7
8000b4ee:	e0 89 00 04 	brgt	8000b4f6 <_vfprintf_r+0x171a>
8000b4f2:	2f 83       	sub	r3,-8
8000b4f4:	c0 b8       	rjmp	8000b50a <_vfprintf_r+0x172e>
8000b4f6:	fa ca f9 78 	sub	r10,sp,-1672
8000b4fa:	02 9b       	mov	r11,r1
8000b4fc:	08 9c       	mov	r12,r4
8000b4fe:	fe b0 f4 61 	rcall	80009dc0 <__sprint_r>
8000b502:	e0 81 03 ec 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b506:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b50a:	30 09       	mov	r9,0
8000b50c:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000b510:	f2 08 18 00 	cp.b	r8,r9
8000b514:	c1 f0       	breq	8000b552 <_vfprintf_r+0x1776>
8000b516:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b51a:	fa c9 f9 45 	sub	r9,sp,-1723
8000b51e:	2f f8       	sub	r8,-1
8000b520:	87 09       	st.w	r3[0x0],r9
8000b522:	fb 48 06 90 	st.w	sp[1680],r8
8000b526:	30 19       	mov	r9,1
8000b528:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b52c:	87 19       	st.w	r3[0x4],r9
8000b52e:	2f f8       	sub	r8,-1
8000b530:	fb 48 06 8c 	st.w	sp[1676],r8
8000b534:	58 78       	cp.w	r8,7
8000b536:	e0 89 00 04 	brgt	8000b53e <_vfprintf_r+0x1762>
8000b53a:	2f 83       	sub	r3,-8
8000b53c:	c0 b8       	rjmp	8000b552 <_vfprintf_r+0x1776>
8000b53e:	fa ca f9 78 	sub	r10,sp,-1672
8000b542:	02 9b       	mov	r11,r1
8000b544:	08 9c       	mov	r12,r4
8000b546:	fe b0 f4 3d 	rcall	80009dc0 <__sprint_r>
8000b54a:	e0 81 03 c8 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b54e:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b552:	40 fc       	lddsp	r12,sp[0x3c]
8000b554:	58 0c       	cp.w	r12,0
8000b556:	c1 f0       	breq	8000b594 <_vfprintf_r+0x17b8>
8000b558:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b55c:	fa c9 f9 48 	sub	r9,sp,-1720
8000b560:	2f e8       	sub	r8,-2
8000b562:	87 09       	st.w	r3[0x0],r9
8000b564:	fb 48 06 90 	st.w	sp[1680],r8
8000b568:	30 29       	mov	r9,2
8000b56a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b56e:	87 19       	st.w	r3[0x4],r9
8000b570:	2f f8       	sub	r8,-1
8000b572:	fb 48 06 8c 	st.w	sp[1676],r8
8000b576:	58 78       	cp.w	r8,7
8000b578:	e0 89 00 04 	brgt	8000b580 <_vfprintf_r+0x17a4>
8000b57c:	2f 83       	sub	r3,-8
8000b57e:	c0 b8       	rjmp	8000b594 <_vfprintf_r+0x17b8>
8000b580:	fa ca f9 78 	sub	r10,sp,-1672
8000b584:	02 9b       	mov	r11,r1
8000b586:	08 9c       	mov	r12,r4
8000b588:	fe b0 f4 1c 	rcall	80009dc0 <__sprint_r>
8000b58c:	e0 81 03 a7 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b590:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b594:	40 9b       	lddsp	r11,sp[0x24]
8000b596:	e0 4b 00 80 	cp.w	r11,128
8000b59a:	c4 71       	brne	8000b628 <_vfprintf_r+0x184c>
8000b59c:	40 8a       	lddsp	r10,sp[0x20]
8000b59e:	40 39       	lddsp	r9,sp[0xc]
8000b5a0:	12 1a       	sub	r10,r9
8000b5a2:	50 4a       	stdsp	sp[0x10],r10
8000b5a4:	58 0a       	cp.w	r10,0
8000b5a6:	e0 89 00 20 	brgt	8000b5e6 <_vfprintf_r+0x180a>
8000b5aa:	c3 f8       	rjmp	8000b628 <_vfprintf_r+0x184c>
8000b5ac:	2f 09       	sub	r9,-16
8000b5ae:	2f f8       	sub	r8,-1
8000b5b0:	fe ce c2 a8 	sub	lr,pc,-15704
8000b5b4:	31 0c       	mov	r12,16
8000b5b6:	fb 49 06 90 	st.w	sp[1680],r9
8000b5ba:	87 0e       	st.w	r3[0x0],lr
8000b5bc:	87 1c       	st.w	r3[0x4],r12
8000b5be:	fb 48 06 8c 	st.w	sp[1676],r8
8000b5c2:	58 78       	cp.w	r8,7
8000b5c4:	e0 89 00 04 	brgt	8000b5cc <_vfprintf_r+0x17f0>
8000b5c8:	2f 83       	sub	r3,-8
8000b5ca:	c0 b8       	rjmp	8000b5e0 <_vfprintf_r+0x1804>
8000b5cc:	fa ca f9 78 	sub	r10,sp,-1672
8000b5d0:	02 9b       	mov	r11,r1
8000b5d2:	08 9c       	mov	r12,r4
8000b5d4:	fe b0 f3 f6 	rcall	80009dc0 <__sprint_r>
8000b5d8:	e0 81 03 81 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b5dc:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b5e0:	40 4b       	lddsp	r11,sp[0x10]
8000b5e2:	21 0b       	sub	r11,16
8000b5e4:	50 4b       	stdsp	sp[0x10],r11
8000b5e6:	fa f9 06 90 	ld.w	r9,sp[1680]
8000b5ea:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b5ee:	fe ca c2 e6 	sub	r10,pc,-15642
8000b5f2:	40 4e       	lddsp	lr,sp[0x10]
8000b5f4:	59 0e       	cp.w	lr,16
8000b5f6:	fe 99 ff db 	brgt	8000b5ac <_vfprintf_r+0x17d0>
8000b5fa:	1c 09       	add	r9,lr
8000b5fc:	2f f8       	sub	r8,-1
8000b5fe:	87 0a       	st.w	r3[0x0],r10
8000b600:	fb 49 06 90 	st.w	sp[1680],r9
8000b604:	87 1e       	st.w	r3[0x4],lr
8000b606:	fb 48 06 8c 	st.w	sp[1676],r8
8000b60a:	58 78       	cp.w	r8,7
8000b60c:	e0 89 00 04 	brgt	8000b614 <_vfprintf_r+0x1838>
8000b610:	2f 83       	sub	r3,-8
8000b612:	c0 b8       	rjmp	8000b628 <_vfprintf_r+0x184c>
8000b614:	fa ca f9 78 	sub	r10,sp,-1672
8000b618:	02 9b       	mov	r11,r1
8000b61a:	08 9c       	mov	r12,r4
8000b61c:	fe b0 f3 d2 	rcall	80009dc0 <__sprint_r>
8000b620:	e0 81 03 5d 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b624:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b628:	40 2c       	lddsp	r12,sp[0x8]
8000b62a:	04 1c       	sub	r12,r2
8000b62c:	50 2c       	stdsp	sp[0x8],r12
8000b62e:	58 0c       	cp.w	r12,0
8000b630:	e0 89 00 20 	brgt	8000b670 <_vfprintf_r+0x1894>
8000b634:	c3 f8       	rjmp	8000b6b2 <_vfprintf_r+0x18d6>
8000b636:	2f 09       	sub	r9,-16
8000b638:	2f f8       	sub	r8,-1
8000b63a:	fe cb c3 32 	sub	r11,pc,-15566
8000b63e:	31 0a       	mov	r10,16
8000b640:	fb 49 06 90 	st.w	sp[1680],r9
8000b644:	87 0b       	st.w	r3[0x0],r11
8000b646:	87 1a       	st.w	r3[0x4],r10
8000b648:	fb 48 06 8c 	st.w	sp[1676],r8
8000b64c:	58 78       	cp.w	r8,7
8000b64e:	e0 89 00 04 	brgt	8000b656 <_vfprintf_r+0x187a>
8000b652:	2f 83       	sub	r3,-8
8000b654:	c0 b8       	rjmp	8000b66a <_vfprintf_r+0x188e>
8000b656:	fa ca f9 78 	sub	r10,sp,-1672
8000b65a:	02 9b       	mov	r11,r1
8000b65c:	08 9c       	mov	r12,r4
8000b65e:	fe b0 f3 b1 	rcall	80009dc0 <__sprint_r>
8000b662:	e0 81 03 3c 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b666:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b66a:	40 29       	lddsp	r9,sp[0x8]
8000b66c:	21 09       	sub	r9,16
8000b66e:	50 29       	stdsp	sp[0x8],r9
8000b670:	fa f9 06 90 	ld.w	r9,sp[1680]
8000b674:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b678:	fe ca c3 70 	sub	r10,pc,-15504
8000b67c:	40 2e       	lddsp	lr,sp[0x8]
8000b67e:	59 0e       	cp.w	lr,16
8000b680:	fe 99 ff db 	brgt	8000b636 <_vfprintf_r+0x185a>
8000b684:	1c 09       	add	r9,lr
8000b686:	2f f8       	sub	r8,-1
8000b688:	87 0a       	st.w	r3[0x0],r10
8000b68a:	fb 49 06 90 	st.w	sp[1680],r9
8000b68e:	87 1e       	st.w	r3[0x4],lr
8000b690:	fb 48 06 8c 	st.w	sp[1676],r8
8000b694:	58 78       	cp.w	r8,7
8000b696:	e0 89 00 04 	brgt	8000b69e <_vfprintf_r+0x18c2>
8000b69a:	2f 83       	sub	r3,-8
8000b69c:	c0 b8       	rjmp	8000b6b2 <_vfprintf_r+0x18d6>
8000b69e:	fa ca f9 78 	sub	r10,sp,-1672
8000b6a2:	02 9b       	mov	r11,r1
8000b6a4:	08 9c       	mov	r12,r4
8000b6a6:	fe b0 f3 8d 	rcall	80009dc0 <__sprint_r>
8000b6aa:	e0 81 03 18 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b6ae:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b6b2:	ed b5 00 08 	bld	r5,0x8
8000b6b6:	c0 b0       	breq	8000b6cc <_vfprintf_r+0x18f0>
8000b6b8:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b6bc:	87 12       	st.w	r3[0x4],r2
8000b6be:	87 06       	st.w	r3[0x0],r6
8000b6c0:	f0 02 00 02 	add	r2,r8,r2
8000b6c4:	fb 42 06 90 	st.w	sp[1680],r2
8000b6c8:	e0 8f 01 d4 	bral	8000ba70 <_vfprintf_r+0x1c94>
8000b6cc:	e0 40 00 65 	cp.w	r0,101
8000b6d0:	e0 8a 01 d6 	brle	8000ba7c <_vfprintf_r+0x1ca0>
8000b6d4:	30 08       	mov	r8,0
8000b6d6:	30 09       	mov	r9,0
8000b6d8:	40 5b       	lddsp	r11,sp[0x14]
8000b6da:	40 7a       	lddsp	r10,sp[0x1c]
8000b6dc:	e0 a0 15 89 	rcall	8000e1ee <__avr32_f64_cmp_eq>
8000b6e0:	c7 90       	breq	8000b7d2 <_vfprintf_r+0x19f6>
8000b6e2:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b6e6:	fe c9 c3 f2 	sub	r9,pc,-15374
8000b6ea:	2f f8       	sub	r8,-1
8000b6ec:	87 09       	st.w	r3[0x0],r9
8000b6ee:	fb 48 06 90 	st.w	sp[1680],r8
8000b6f2:	30 19       	mov	r9,1
8000b6f4:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b6f8:	87 19       	st.w	r3[0x4],r9
8000b6fa:	2f f8       	sub	r8,-1
8000b6fc:	fb 48 06 8c 	st.w	sp[1676],r8
8000b700:	58 78       	cp.w	r8,7
8000b702:	e0 89 00 05 	brgt	8000b70c <_vfprintf_r+0x1930>
8000b706:	2f 83       	sub	r3,-8
8000b708:	c0 c8       	rjmp	8000b720 <_vfprintf_r+0x1944>
8000b70a:	d7 03       	nop
8000b70c:	fa ca f9 78 	sub	r10,sp,-1672
8000b710:	02 9b       	mov	r11,r1
8000b712:	08 9c       	mov	r12,r4
8000b714:	fe b0 f3 56 	rcall	80009dc0 <__sprint_r>
8000b718:	e0 81 02 e1 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b71c:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b720:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000b724:	40 6c       	lddsp	r12,sp[0x18]
8000b726:	18 38       	cp.w	r8,r12
8000b728:	c0 55       	brlt	8000b732 <_vfprintf_r+0x1956>
8000b72a:	ed b5 00 00 	bld	r5,0x0
8000b72e:	e0 81 02 6b 	brne	8000bc04 <_vfprintf_r+0x1e28>
8000b732:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b736:	2f f8       	sub	r8,-1
8000b738:	40 cb       	lddsp	r11,sp[0x30]
8000b73a:	fb 48 06 90 	st.w	sp[1680],r8
8000b73e:	30 19       	mov	r9,1
8000b740:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b744:	87 0b       	st.w	r3[0x0],r11
8000b746:	2f f8       	sub	r8,-1
8000b748:	87 19       	st.w	r3[0x4],r9
8000b74a:	fb 48 06 8c 	st.w	sp[1676],r8
8000b74e:	58 78       	cp.w	r8,7
8000b750:	e0 89 00 04 	brgt	8000b758 <_vfprintf_r+0x197c>
8000b754:	2f 83       	sub	r3,-8
8000b756:	c0 b8       	rjmp	8000b76c <_vfprintf_r+0x1990>
8000b758:	fa ca f9 78 	sub	r10,sp,-1672
8000b75c:	02 9b       	mov	r11,r1
8000b75e:	08 9c       	mov	r12,r4
8000b760:	fe b0 f3 30 	rcall	80009dc0 <__sprint_r>
8000b764:	e0 81 02 bb 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b768:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b76c:	40 66       	lddsp	r6,sp[0x18]
8000b76e:	20 16       	sub	r6,1
8000b770:	58 06       	cp.w	r6,0
8000b772:	e0 89 00 1d 	brgt	8000b7ac <_vfprintf_r+0x19d0>
8000b776:	e0 8f 02 47 	bral	8000bc04 <_vfprintf_r+0x1e28>
8000b77a:	2f 09       	sub	r9,-16
8000b77c:	2f f8       	sub	r8,-1
8000b77e:	fb 49 06 90 	st.w	sp[1680],r9
8000b782:	87 02       	st.w	r3[0x0],r2
8000b784:	87 10       	st.w	r3[0x4],r0
8000b786:	fb 48 06 8c 	st.w	sp[1676],r8
8000b78a:	58 78       	cp.w	r8,7
8000b78c:	e0 89 00 04 	brgt	8000b794 <_vfprintf_r+0x19b8>
8000b790:	2f 83       	sub	r3,-8
8000b792:	c0 b8       	rjmp	8000b7a8 <_vfprintf_r+0x19cc>
8000b794:	fa ca f9 78 	sub	r10,sp,-1672
8000b798:	02 9b       	mov	r11,r1
8000b79a:	08 9c       	mov	r12,r4
8000b79c:	fe b0 f3 12 	rcall	80009dc0 <__sprint_r>
8000b7a0:	e0 81 02 9d 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b7a4:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b7a8:	21 06       	sub	r6,16
8000b7aa:	c0 48       	rjmp	8000b7b2 <_vfprintf_r+0x19d6>
8000b7ac:	fe c2 c4 a4 	sub	r2,pc,-15196
8000b7b0:	31 00       	mov	r0,16
8000b7b2:	fa f9 06 90 	ld.w	r9,sp[1680]
8000b7b6:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b7ba:	fe ca c4 b2 	sub	r10,pc,-15182
8000b7be:	59 06       	cp.w	r6,16
8000b7c0:	fe 99 ff dd 	brgt	8000b77a <_vfprintf_r+0x199e>
8000b7c4:	0c 09       	add	r9,r6
8000b7c6:	87 0a       	st.w	r3[0x0],r10
8000b7c8:	fb 49 06 90 	st.w	sp[1680],r9
8000b7cc:	2f f8       	sub	r8,-1
8000b7ce:	87 16       	st.w	r3[0x4],r6
8000b7d0:	c5 39       	rjmp	8000ba76 <_vfprintf_r+0x1c9a>
8000b7d2:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000b7d6:	58 0a       	cp.w	r10,0
8000b7d8:	e0 89 00 92 	brgt	8000b8fc <_vfprintf_r+0x1b20>
8000b7dc:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b7e0:	fe c9 c4 ec 	sub	r9,pc,-15124
8000b7e4:	2f f8       	sub	r8,-1
8000b7e6:	87 09       	st.w	r3[0x0],r9
8000b7e8:	fb 48 06 90 	st.w	sp[1680],r8
8000b7ec:	30 19       	mov	r9,1
8000b7ee:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b7f2:	87 19       	st.w	r3[0x4],r9
8000b7f4:	2f f8       	sub	r8,-1
8000b7f6:	fb 48 06 8c 	st.w	sp[1676],r8
8000b7fa:	58 78       	cp.w	r8,7
8000b7fc:	e0 89 00 04 	brgt	8000b804 <_vfprintf_r+0x1a28>
8000b800:	2f 83       	sub	r3,-8
8000b802:	c0 b8       	rjmp	8000b818 <_vfprintf_r+0x1a3c>
8000b804:	fa ca f9 78 	sub	r10,sp,-1672
8000b808:	02 9b       	mov	r11,r1
8000b80a:	08 9c       	mov	r12,r4
8000b80c:	fe b0 f2 da 	rcall	80009dc0 <__sprint_r>
8000b810:	e0 81 02 65 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b814:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b818:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000b81c:	58 08       	cp.w	r8,0
8000b81e:	c0 81       	brne	8000b82e <_vfprintf_r+0x1a52>
8000b820:	40 6a       	lddsp	r10,sp[0x18]
8000b822:	58 0a       	cp.w	r10,0
8000b824:	c0 51       	brne	8000b82e <_vfprintf_r+0x1a52>
8000b826:	ed b5 00 00 	bld	r5,0x0
8000b82a:	e0 81 01 ed 	brne	8000bc04 <_vfprintf_r+0x1e28>
8000b82e:	40 c9       	lddsp	r9,sp[0x30]
8000b830:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b834:	2f f8       	sub	r8,-1
8000b836:	87 09       	st.w	r3[0x0],r9
8000b838:	fb 48 06 90 	st.w	sp[1680],r8
8000b83c:	30 19       	mov	r9,1
8000b83e:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b842:	87 19       	st.w	r3[0x4],r9
8000b844:	2f f8       	sub	r8,-1
8000b846:	fb 48 06 8c 	st.w	sp[1676],r8
8000b84a:	58 78       	cp.w	r8,7
8000b84c:	e0 89 00 04 	brgt	8000b854 <_vfprintf_r+0x1a78>
8000b850:	2f 83       	sub	r3,-8
8000b852:	c0 b8       	rjmp	8000b868 <_vfprintf_r+0x1a8c>
8000b854:	fa ca f9 78 	sub	r10,sp,-1672
8000b858:	02 9b       	mov	r11,r1
8000b85a:	08 9c       	mov	r12,r4
8000b85c:	fe b0 f2 b2 	rcall	80009dc0 <__sprint_r>
8000b860:	e0 81 02 3d 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b864:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b868:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000b86c:	5c 32       	neg	r2
8000b86e:	58 02       	cp.w	r2,0
8000b870:	e0 89 00 1d 	brgt	8000b8aa <_vfprintf_r+0x1ace>
8000b874:	c3 d8       	rjmp	8000b8ee <_vfprintf_r+0x1b12>
8000b876:	2f 09       	sub	r9,-16
8000b878:	2f f8       	sub	r8,-1
8000b87a:	31 0e       	mov	lr,16
8000b87c:	fb 49 06 90 	st.w	sp[1680],r9
8000b880:	87 00       	st.w	r3[0x0],r0
8000b882:	87 1e       	st.w	r3[0x4],lr
8000b884:	fb 48 06 8c 	st.w	sp[1676],r8
8000b888:	58 78       	cp.w	r8,7
8000b88a:	e0 89 00 04 	brgt	8000b892 <_vfprintf_r+0x1ab6>
8000b88e:	2f 83       	sub	r3,-8
8000b890:	c0 b8       	rjmp	8000b8a6 <_vfprintf_r+0x1aca>
8000b892:	fa ca f9 78 	sub	r10,sp,-1672
8000b896:	02 9b       	mov	r11,r1
8000b898:	08 9c       	mov	r12,r4
8000b89a:	fe b0 f2 93 	rcall	80009dc0 <__sprint_r>
8000b89e:	e0 81 02 1e 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b8a2:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b8a6:	21 02       	sub	r2,16
8000b8a8:	c0 38       	rjmp	8000b8ae <_vfprintf_r+0x1ad2>
8000b8aa:	fe c0 c5 a2 	sub	r0,pc,-14942
8000b8ae:	fa f9 06 90 	ld.w	r9,sp[1680]
8000b8b2:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b8b6:	fe ca c5 ae 	sub	r10,pc,-14930
8000b8ba:	59 02       	cp.w	r2,16
8000b8bc:	fe 99 ff dd 	brgt	8000b876 <_vfprintf_r+0x1a9a>
8000b8c0:	04 09       	add	r9,r2
8000b8c2:	2f f8       	sub	r8,-1
8000b8c4:	87 0a       	st.w	r3[0x0],r10
8000b8c6:	fb 49 06 90 	st.w	sp[1680],r9
8000b8ca:	87 12       	st.w	r3[0x4],r2
8000b8cc:	fb 48 06 8c 	st.w	sp[1676],r8
8000b8d0:	58 78       	cp.w	r8,7
8000b8d2:	e0 89 00 04 	brgt	8000b8da <_vfprintf_r+0x1afe>
8000b8d6:	2f 83       	sub	r3,-8
8000b8d8:	c0 b8       	rjmp	8000b8ee <_vfprintf_r+0x1b12>
8000b8da:	fa ca f9 78 	sub	r10,sp,-1672
8000b8de:	02 9b       	mov	r11,r1
8000b8e0:	08 9c       	mov	r12,r4
8000b8e2:	fe b0 f2 6f 	rcall	80009dc0 <__sprint_r>
8000b8e6:	e0 81 01 fa 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b8ea:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b8ee:	40 6c       	lddsp	r12,sp[0x18]
8000b8f0:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b8f4:	87 06       	st.w	r3[0x0],r6
8000b8f6:	87 1c       	st.w	r3[0x4],r12
8000b8f8:	18 08       	add	r8,r12
8000b8fa:	cb 98       	rjmp	8000ba6c <_vfprintf_r+0x1c90>
8000b8fc:	fa f9 06 90 	ld.w	r9,sp[1680]
8000b900:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b904:	40 6b       	lddsp	r11,sp[0x18]
8000b906:	16 3a       	cp.w	r10,r11
8000b908:	c6 f5       	brlt	8000b9e6 <_vfprintf_r+0x1c0a>
8000b90a:	16 09       	add	r9,r11
8000b90c:	2f f8       	sub	r8,-1
8000b90e:	87 06       	st.w	r3[0x0],r6
8000b910:	fb 49 06 90 	st.w	sp[1680],r9
8000b914:	87 1b       	st.w	r3[0x4],r11
8000b916:	fb 48 06 8c 	st.w	sp[1676],r8
8000b91a:	58 78       	cp.w	r8,7
8000b91c:	e0 89 00 04 	brgt	8000b924 <_vfprintf_r+0x1b48>
8000b920:	2f 83       	sub	r3,-8
8000b922:	c0 b8       	rjmp	8000b938 <_vfprintf_r+0x1b5c>
8000b924:	fa ca f9 78 	sub	r10,sp,-1672
8000b928:	02 9b       	mov	r11,r1
8000b92a:	08 9c       	mov	r12,r4
8000b92c:	fe b0 f2 4a 	rcall	80009dc0 <__sprint_r>
8000b930:	e0 81 01 d5 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b934:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b938:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000b93c:	40 6a       	lddsp	r10,sp[0x18]
8000b93e:	14 16       	sub	r6,r10
8000b940:	58 06       	cp.w	r6,0
8000b942:	e0 89 00 1c 	brgt	8000b97a <_vfprintf_r+0x1b9e>
8000b946:	c3 d8       	rjmp	8000b9c0 <_vfprintf_r+0x1be4>
8000b948:	2f 09       	sub	r9,-16
8000b94a:	2f f8       	sub	r8,-1
8000b94c:	fb 49 06 90 	st.w	sp[1680],r9
8000b950:	87 02       	st.w	r3[0x0],r2
8000b952:	87 10       	st.w	r3[0x4],r0
8000b954:	fb 48 06 8c 	st.w	sp[1676],r8
8000b958:	58 78       	cp.w	r8,7
8000b95a:	e0 89 00 04 	brgt	8000b962 <_vfprintf_r+0x1b86>
8000b95e:	2f 83       	sub	r3,-8
8000b960:	c0 b8       	rjmp	8000b976 <_vfprintf_r+0x1b9a>
8000b962:	fa ca f9 78 	sub	r10,sp,-1672
8000b966:	02 9b       	mov	r11,r1
8000b968:	08 9c       	mov	r12,r4
8000b96a:	fe b0 f2 2b 	rcall	80009dc0 <__sprint_r>
8000b96e:	e0 81 01 b6 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b972:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b976:	21 06       	sub	r6,16
8000b978:	c0 48       	rjmp	8000b980 <_vfprintf_r+0x1ba4>
8000b97a:	fe c2 c6 72 	sub	r2,pc,-14734
8000b97e:	31 00       	mov	r0,16
8000b980:	fa f9 06 90 	ld.w	r9,sp[1680]
8000b984:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b988:	fe ca c6 80 	sub	r10,pc,-14720
8000b98c:	59 06       	cp.w	r6,16
8000b98e:	fe 99 ff dd 	brgt	8000b948 <_vfprintf_r+0x1b6c>
8000b992:	0c 09       	add	r9,r6
8000b994:	2f f8       	sub	r8,-1
8000b996:	87 0a       	st.w	r3[0x0],r10
8000b998:	fb 49 06 90 	st.w	sp[1680],r9
8000b99c:	87 16       	st.w	r3[0x4],r6
8000b99e:	fb 48 06 8c 	st.w	sp[1676],r8
8000b9a2:	58 78       	cp.w	r8,7
8000b9a4:	e0 89 00 04 	brgt	8000b9ac <_vfprintf_r+0x1bd0>
8000b9a8:	2f 83       	sub	r3,-8
8000b9aa:	c0 b8       	rjmp	8000b9c0 <_vfprintf_r+0x1be4>
8000b9ac:	fa ca f9 78 	sub	r10,sp,-1672
8000b9b0:	02 9b       	mov	r11,r1
8000b9b2:	08 9c       	mov	r12,r4
8000b9b4:	fe b0 f2 06 	rcall	80009dc0 <__sprint_r>
8000b9b8:	e0 81 01 91 	brne	8000bcda <_vfprintf_r+0x1efe>
8000b9bc:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b9c0:	ed b5 00 00 	bld	r5,0x0
8000b9c4:	e0 81 01 20 	brne	8000bc04 <_vfprintf_r+0x1e28>
8000b9c8:	40 c9       	lddsp	r9,sp[0x30]
8000b9ca:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b9ce:	2f f8       	sub	r8,-1
8000b9d0:	87 09       	st.w	r3[0x0],r9
8000b9d2:	fb 48 06 90 	st.w	sp[1680],r8
8000b9d6:	30 19       	mov	r9,1
8000b9d8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b9dc:	87 19       	st.w	r3[0x4],r9
8000b9de:	2f f8       	sub	r8,-1
8000b9e0:	fb 48 06 8c 	st.w	sp[1676],r8
8000b9e4:	c0 29       	rjmp	8000bbe8 <_vfprintf_r+0x1e0c>
8000b9e6:	14 09       	add	r9,r10
8000b9e8:	2f f8       	sub	r8,-1
8000b9ea:	fb 49 06 90 	st.w	sp[1680],r9
8000b9ee:	87 06       	st.w	r3[0x0],r6
8000b9f0:	87 1a       	st.w	r3[0x4],r10
8000b9f2:	fb 48 06 8c 	st.w	sp[1676],r8
8000b9f6:	58 78       	cp.w	r8,7
8000b9f8:	e0 89 00 04 	brgt	8000ba00 <_vfprintf_r+0x1c24>
8000b9fc:	2f 83       	sub	r3,-8
8000b9fe:	c0 b8       	rjmp	8000ba14 <_vfprintf_r+0x1c38>
8000ba00:	fa ca f9 78 	sub	r10,sp,-1672
8000ba04:	02 9b       	mov	r11,r1
8000ba06:	08 9c       	mov	r12,r4
8000ba08:	fe b0 f1 dc 	rcall	80009dc0 <__sprint_r>
8000ba0c:	e0 81 01 67 	brne	8000bcda <_vfprintf_r+0x1efe>
8000ba10:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ba14:	40 c8       	lddsp	r8,sp[0x30]
8000ba16:	87 08       	st.w	r3[0x0],r8
8000ba18:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ba1c:	2f f8       	sub	r8,-1
8000ba1e:	30 19       	mov	r9,1
8000ba20:	fb 48 06 90 	st.w	sp[1680],r8
8000ba24:	87 19       	st.w	r3[0x4],r9
8000ba26:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ba2a:	2f f8       	sub	r8,-1
8000ba2c:	fb 48 06 8c 	st.w	sp[1676],r8
8000ba30:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000ba34:	58 78       	cp.w	r8,7
8000ba36:	e0 89 00 04 	brgt	8000ba3e <_vfprintf_r+0x1c62>
8000ba3a:	2f 83       	sub	r3,-8
8000ba3c:	c0 b8       	rjmp	8000ba52 <_vfprintf_r+0x1c76>
8000ba3e:	fa ca f9 78 	sub	r10,sp,-1672
8000ba42:	02 9b       	mov	r11,r1
8000ba44:	08 9c       	mov	r12,r4
8000ba46:	fe b0 f1 bd 	rcall	80009dc0 <__sprint_r>
8000ba4a:	e0 81 01 48 	brne	8000bcda <_vfprintf_r+0x1efe>
8000ba4e:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ba52:	04 06       	add	r6,r2
8000ba54:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000ba58:	87 06       	st.w	r3[0x0],r6
8000ba5a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000ba5e:	40 66       	lddsp	r6,sp[0x18]
8000ba60:	40 6e       	lddsp	lr,sp[0x18]
8000ba62:	10 16       	sub	r6,r8
8000ba64:	f2 08 01 08 	sub	r8,r9,r8
8000ba68:	87 16       	st.w	r3[0x4],r6
8000ba6a:	1c 08       	add	r8,lr
8000ba6c:	fb 48 06 90 	st.w	sp[1680],r8
8000ba70:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ba74:	2f f8       	sub	r8,-1
8000ba76:	fb 48 06 8c 	st.w	sp[1676],r8
8000ba7a:	cb 78       	rjmp	8000bbe8 <_vfprintf_r+0x1e0c>
8000ba7c:	40 6c       	lddsp	r12,sp[0x18]
8000ba7e:	58 1c       	cp.w	r12,1
8000ba80:	e0 89 00 06 	brgt	8000ba8c <_vfprintf_r+0x1cb0>
8000ba84:	ed b5 00 00 	bld	r5,0x0
8000ba88:	e0 81 00 85 	brne	8000bb92 <_vfprintf_r+0x1db6>
8000ba8c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ba90:	2f f8       	sub	r8,-1
8000ba92:	30 19       	mov	r9,1
8000ba94:	fb 48 06 90 	st.w	sp[1680],r8
8000ba98:	87 06       	st.w	r3[0x0],r6
8000ba9a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ba9e:	87 19       	st.w	r3[0x4],r9
8000baa0:	2f f8       	sub	r8,-1
8000baa2:	fb 48 06 8c 	st.w	sp[1676],r8
8000baa6:	58 78       	cp.w	r8,7
8000baa8:	e0 89 00 04 	brgt	8000bab0 <_vfprintf_r+0x1cd4>
8000baac:	2f 83       	sub	r3,-8
8000baae:	c0 b8       	rjmp	8000bac4 <_vfprintf_r+0x1ce8>
8000bab0:	fa ca f9 78 	sub	r10,sp,-1672
8000bab4:	02 9b       	mov	r11,r1
8000bab6:	08 9c       	mov	r12,r4
8000bab8:	fe b0 f1 84 	rcall	80009dc0 <__sprint_r>
8000babc:	e0 81 01 0f 	brne	8000bcda <_vfprintf_r+0x1efe>
8000bac0:	fa c3 f9 e0 	sub	r3,sp,-1568
8000bac4:	fa f8 06 90 	ld.w	r8,sp[1680]
8000bac8:	2f f8       	sub	r8,-1
8000baca:	40 cb       	lddsp	r11,sp[0x30]
8000bacc:	fb 48 06 90 	st.w	sp[1680],r8
8000bad0:	30 19       	mov	r9,1
8000bad2:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000bad6:	87 0b       	st.w	r3[0x0],r11
8000bad8:	2f f8       	sub	r8,-1
8000bada:	87 19       	st.w	r3[0x4],r9
8000badc:	fb 48 06 8c 	st.w	sp[1676],r8
8000bae0:	58 78       	cp.w	r8,7
8000bae2:	e0 89 00 05 	brgt	8000baec <_vfprintf_r+0x1d10>
8000bae6:	2f 83       	sub	r3,-8
8000bae8:	c0 c8       	rjmp	8000bb00 <_vfprintf_r+0x1d24>
8000baea:	d7 03       	nop
8000baec:	fa ca f9 78 	sub	r10,sp,-1672
8000baf0:	02 9b       	mov	r11,r1
8000baf2:	08 9c       	mov	r12,r4
8000baf4:	fe b0 f1 66 	rcall	80009dc0 <__sprint_r>
8000baf8:	e0 81 00 f1 	brne	8000bcda <_vfprintf_r+0x1efe>
8000bafc:	fa c3 f9 e0 	sub	r3,sp,-1568
8000bb00:	30 08       	mov	r8,0
8000bb02:	30 09       	mov	r9,0
8000bb04:	40 5b       	lddsp	r11,sp[0x14]
8000bb06:	40 7a       	lddsp	r10,sp[0x1c]
8000bb08:	e0 a0 13 73 	rcall	8000e1ee <__avr32_f64_cmp_eq>
8000bb0c:	40 68       	lddsp	r8,sp[0x18]
8000bb0e:	20 18       	sub	r8,1
8000bb10:	58 0c       	cp.w	r12,0
8000bb12:	c0 d1       	brne	8000bb2c <_vfprintf_r+0x1d50>
8000bb14:	2f f6       	sub	r6,-1
8000bb16:	87 18       	st.w	r3[0x4],r8
8000bb18:	87 06       	st.w	r3[0x0],r6
8000bb1a:	fa f6 06 90 	ld.w	r6,sp[1680]
8000bb1e:	10 06       	add	r6,r8
8000bb20:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000bb24:	fb 46 06 90 	st.w	sp[1680],r6
8000bb28:	2f f8       	sub	r8,-1
8000bb2a:	c3 18       	rjmp	8000bb8c <_vfprintf_r+0x1db0>
8000bb2c:	10 96       	mov	r6,r8
8000bb2e:	58 08       	cp.w	r8,0
8000bb30:	e0 89 00 1c 	brgt	8000bb68 <_vfprintf_r+0x1d8c>
8000bb34:	c4 b8       	rjmp	8000bbca <_vfprintf_r+0x1dee>
8000bb36:	2f 09       	sub	r9,-16
8000bb38:	2f f8       	sub	r8,-1
8000bb3a:	fb 49 06 90 	st.w	sp[1680],r9
8000bb3e:	87 02       	st.w	r3[0x0],r2
8000bb40:	87 10       	st.w	r3[0x4],r0
8000bb42:	fb 48 06 8c 	st.w	sp[1676],r8
8000bb46:	58 78       	cp.w	r8,7
8000bb48:	e0 89 00 04 	brgt	8000bb50 <_vfprintf_r+0x1d74>
8000bb4c:	2f 83       	sub	r3,-8
8000bb4e:	c0 b8       	rjmp	8000bb64 <_vfprintf_r+0x1d88>
8000bb50:	fa ca f9 78 	sub	r10,sp,-1672
8000bb54:	02 9b       	mov	r11,r1
8000bb56:	08 9c       	mov	r12,r4
8000bb58:	fe b0 f1 34 	rcall	80009dc0 <__sprint_r>
8000bb5c:	e0 81 00 bf 	brne	8000bcda <_vfprintf_r+0x1efe>
8000bb60:	fa c3 f9 e0 	sub	r3,sp,-1568
8000bb64:	21 06       	sub	r6,16
8000bb66:	c0 48       	rjmp	8000bb6e <_vfprintf_r+0x1d92>
8000bb68:	fe c2 c8 60 	sub	r2,pc,-14240
8000bb6c:	31 00       	mov	r0,16
8000bb6e:	fa f9 06 90 	ld.w	r9,sp[1680]
8000bb72:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000bb76:	fe ca c8 6e 	sub	r10,pc,-14226
8000bb7a:	59 06       	cp.w	r6,16
8000bb7c:	fe 99 ff dd 	brgt	8000bb36 <_vfprintf_r+0x1d5a>
8000bb80:	0c 09       	add	r9,r6
8000bb82:	87 0a       	st.w	r3[0x0],r10
8000bb84:	fb 49 06 90 	st.w	sp[1680],r9
8000bb88:	2f f8       	sub	r8,-1
8000bb8a:	87 16       	st.w	r3[0x4],r6
8000bb8c:	fb 48 06 8c 	st.w	sp[1676],r8
8000bb90:	c0 e8       	rjmp	8000bbac <_vfprintf_r+0x1dd0>
8000bb92:	fa f8 06 90 	ld.w	r8,sp[1680]
8000bb96:	2f f8       	sub	r8,-1
8000bb98:	30 19       	mov	r9,1
8000bb9a:	fb 48 06 90 	st.w	sp[1680],r8
8000bb9e:	87 06       	st.w	r3[0x0],r6
8000bba0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000bba4:	87 19       	st.w	r3[0x4],r9
8000bba6:	2f f8       	sub	r8,-1
8000bba8:	fb 48 06 8c 	st.w	sp[1676],r8
8000bbac:	58 78       	cp.w	r8,7
8000bbae:	e0 89 00 04 	brgt	8000bbb6 <_vfprintf_r+0x1dda>
8000bbb2:	2f 83       	sub	r3,-8
8000bbb4:	c0 b8       	rjmp	8000bbca <_vfprintf_r+0x1dee>
8000bbb6:	fa ca f9 78 	sub	r10,sp,-1672
8000bbba:	02 9b       	mov	r11,r1
8000bbbc:	08 9c       	mov	r12,r4
8000bbbe:	fe b0 f1 01 	rcall	80009dc0 <__sprint_r>
8000bbc2:	e0 81 00 8c 	brne	8000bcda <_vfprintf_r+0x1efe>
8000bbc6:	fa c3 f9 e0 	sub	r3,sp,-1568
8000bbca:	40 ea       	lddsp	r10,sp[0x38]
8000bbcc:	fa f8 06 90 	ld.w	r8,sp[1680]
8000bbd0:	14 08       	add	r8,r10
8000bbd2:	fa c9 f9 64 	sub	r9,sp,-1692
8000bbd6:	fb 48 06 90 	st.w	sp[1680],r8
8000bbda:	87 1a       	st.w	r3[0x4],r10
8000bbdc:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000bbe0:	87 09       	st.w	r3[0x0],r9
8000bbe2:	2f f8       	sub	r8,-1
8000bbe4:	fb 48 06 8c 	st.w	sp[1676],r8
8000bbe8:	58 78       	cp.w	r8,7
8000bbea:	e0 89 00 04 	brgt	8000bbf2 <_vfprintf_r+0x1e16>
8000bbee:	2f 83       	sub	r3,-8
8000bbf0:	c0 a8       	rjmp	8000bc04 <_vfprintf_r+0x1e28>
8000bbf2:	fa ca f9 78 	sub	r10,sp,-1672
8000bbf6:	02 9b       	mov	r11,r1
8000bbf8:	08 9c       	mov	r12,r4
8000bbfa:	fe b0 f0 e3 	rcall	80009dc0 <__sprint_r>
8000bbfe:	c6 e1       	brne	8000bcda <_vfprintf_r+0x1efe>
8000bc00:	fa c3 f9 e0 	sub	r3,sp,-1568
8000bc04:	e2 15 00 04 	andl	r5,0x4,COH
8000bc08:	c3 f0       	breq	8000bc86 <_vfprintf_r+0x1eaa>
8000bc0a:	40 86       	lddsp	r6,sp[0x20]
8000bc0c:	40 39       	lddsp	r9,sp[0xc]
8000bc0e:	12 16       	sub	r6,r9
8000bc10:	58 06       	cp.w	r6,0
8000bc12:	e0 89 00 1a 	brgt	8000bc46 <_vfprintf_r+0x1e6a>
8000bc16:	c3 88       	rjmp	8000bc86 <_vfprintf_r+0x1eaa>
8000bc18:	2f 09       	sub	r9,-16
8000bc1a:	2f f8       	sub	r8,-1
8000bc1c:	fb 49 06 90 	st.w	sp[1680],r9
8000bc20:	87 05       	st.w	r3[0x0],r5
8000bc22:	87 12       	st.w	r3[0x4],r2
8000bc24:	fb 48 06 8c 	st.w	sp[1676],r8
8000bc28:	58 78       	cp.w	r8,7
8000bc2a:	e0 89 00 04 	brgt	8000bc32 <_vfprintf_r+0x1e56>
8000bc2e:	2f 83       	sub	r3,-8
8000bc30:	c0 98       	rjmp	8000bc42 <_vfprintf_r+0x1e66>
8000bc32:	00 9a       	mov	r10,r0
8000bc34:	02 9b       	mov	r11,r1
8000bc36:	08 9c       	mov	r12,r4
8000bc38:	fe b0 f0 c4 	rcall	80009dc0 <__sprint_r>
8000bc3c:	c4 f1       	brne	8000bcda <_vfprintf_r+0x1efe>
8000bc3e:	fa c3 f9 e0 	sub	r3,sp,-1568
8000bc42:	21 06       	sub	r6,16
8000bc44:	c0 68       	rjmp	8000bc50 <_vfprintf_r+0x1e74>
8000bc46:	fe c5 c9 4e 	sub	r5,pc,-14002
8000bc4a:	31 02       	mov	r2,16
8000bc4c:	fa c0 f9 78 	sub	r0,sp,-1672
8000bc50:	fa f9 06 90 	ld.w	r9,sp[1680]
8000bc54:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000bc58:	fe ca c9 60 	sub	r10,pc,-13984
8000bc5c:	59 06       	cp.w	r6,16
8000bc5e:	fe 99 ff dd 	brgt	8000bc18 <_vfprintf_r+0x1e3c>
8000bc62:	0c 09       	add	r9,r6
8000bc64:	2f f8       	sub	r8,-1
8000bc66:	87 0a       	st.w	r3[0x0],r10
8000bc68:	87 16       	st.w	r3[0x4],r6
8000bc6a:	fb 49 06 90 	st.w	sp[1680],r9
8000bc6e:	fb 48 06 8c 	st.w	sp[1676],r8
8000bc72:	58 78       	cp.w	r8,7
8000bc74:	e0 8a 00 09 	brle	8000bc86 <_vfprintf_r+0x1eaa>
8000bc78:	fa ca f9 78 	sub	r10,sp,-1672
8000bc7c:	02 9b       	mov	r11,r1
8000bc7e:	08 9c       	mov	r12,r4
8000bc80:	fe b0 f0 a0 	rcall	80009dc0 <__sprint_r>
8000bc84:	c2 b1       	brne	8000bcda <_vfprintf_r+0x1efe>
8000bc86:	40 bc       	lddsp	r12,sp[0x2c]
8000bc88:	40 36       	lddsp	r6,sp[0xc]
8000bc8a:	40 8e       	lddsp	lr,sp[0x20]
8000bc8c:	ec 0e 0c 48 	max	r8,r6,lr
8000bc90:	10 0c       	add	r12,r8
8000bc92:	50 bc       	stdsp	sp[0x2c],r12
8000bc94:	fa f8 06 90 	ld.w	r8,sp[1680]
8000bc98:	58 08       	cp.w	r8,0
8000bc9a:	c0 80       	breq	8000bcaa <_vfprintf_r+0x1ece>
8000bc9c:	fa ca f9 78 	sub	r10,sp,-1672
8000bca0:	02 9b       	mov	r11,r1
8000bca2:	08 9c       	mov	r12,r4
8000bca4:	fe b0 f0 8e 	rcall	80009dc0 <__sprint_r>
8000bca8:	c1 91       	brne	8000bcda <_vfprintf_r+0x1efe>
8000bcaa:	30 0b       	mov	r11,0
8000bcac:	fa c3 f9 e0 	sub	r3,sp,-1568
8000bcb0:	fb 4b 06 8c 	st.w	sp[1676],r11
8000bcb4:	fe 9f f1 22 	bral	80009ef8 <_vfprintf_r+0x11c>
8000bcb8:	08 95       	mov	r5,r4
8000bcba:	fa f8 06 90 	ld.w	r8,sp[1680]
8000bcbe:	58 08       	cp.w	r8,0
8000bcc0:	c0 80       	breq	8000bcd0 <_vfprintf_r+0x1ef4>
8000bcc2:	08 9c       	mov	r12,r4
8000bcc4:	fa ca f9 78 	sub	r10,sp,-1672
8000bcc8:	02 9b       	mov	r11,r1
8000bcca:	fe b0 f0 7b 	rcall	80009dc0 <__sprint_r>
8000bcce:	c0 61       	brne	8000bcda <_vfprintf_r+0x1efe>
8000bcd0:	30 08       	mov	r8,0
8000bcd2:	fb 48 06 8c 	st.w	sp[1676],r8
8000bcd6:	c0 28       	rjmp	8000bcda <_vfprintf_r+0x1efe>
8000bcd8:	40 41       	lddsp	r1,sp[0x10]
8000bcda:	82 68       	ld.sh	r8,r1[0xc]
8000bcdc:	ed b8 00 06 	bld	r8,0x6
8000bce0:	c0 31       	brne	8000bce6 <_vfprintf_r+0x1f0a>
8000bce2:	3f fa       	mov	r10,-1
8000bce4:	50 ba       	stdsp	sp[0x2c],r10
8000bce6:	40 bc       	lddsp	r12,sp[0x2c]
8000bce8:	fe 3d f9 44 	sub	sp,-1724
8000bcec:	d8 32       	popm	r0-r7,pc
8000bcee:	d7 03       	nop

8000bcf0 <__swsetup_r>:
8000bcf0:	d4 21       	pushm	r4-r7,lr
8000bcf2:	e0 68 09 00 	mov	r8,2304
8000bcf6:	18 96       	mov	r6,r12
8000bcf8:	16 97       	mov	r7,r11
8000bcfa:	70 0c       	ld.w	r12,r8[0x0]
8000bcfc:	58 0c       	cp.w	r12,0
8000bcfe:	c0 60       	breq	8000bd0a <__swsetup_r+0x1a>
8000bd00:	78 68       	ld.w	r8,r12[0x18]
8000bd02:	58 08       	cp.w	r8,0
8000bd04:	c0 31       	brne	8000bd0a <__swsetup_r+0x1a>
8000bd06:	e0 a0 07 b9 	rcall	8000cc78 <__sinit>
8000bd0a:	fe c8 c8 e2 	sub	r8,pc,-14110
8000bd0e:	10 37       	cp.w	r7,r8
8000bd10:	c0 61       	brne	8000bd1c <__swsetup_r+0x2c>
8000bd12:	e0 68 09 00 	mov	r8,2304
8000bd16:	70 08       	ld.w	r8,r8[0x0]
8000bd18:	70 07       	ld.w	r7,r8[0x0]
8000bd1a:	c1 28       	rjmp	8000bd3e <__swsetup_r+0x4e>
8000bd1c:	fe c8 c8 d4 	sub	r8,pc,-14124
8000bd20:	10 37       	cp.w	r7,r8
8000bd22:	c0 61       	brne	8000bd2e <__swsetup_r+0x3e>
8000bd24:	e0 68 09 00 	mov	r8,2304
8000bd28:	70 08       	ld.w	r8,r8[0x0]
8000bd2a:	70 17       	ld.w	r7,r8[0x4]
8000bd2c:	c0 98       	rjmp	8000bd3e <__swsetup_r+0x4e>
8000bd2e:	fe c8 c8 c6 	sub	r8,pc,-14138
8000bd32:	10 37       	cp.w	r7,r8
8000bd34:	c0 51       	brne	8000bd3e <__swsetup_r+0x4e>
8000bd36:	e0 68 09 00 	mov	r8,2304
8000bd3a:	70 08       	ld.w	r8,r8[0x0]
8000bd3c:	70 27       	ld.w	r7,r8[0x8]
8000bd3e:	8e 68       	ld.sh	r8,r7[0xc]
8000bd40:	ed b8 00 03 	bld	r8,0x3
8000bd44:	c1 e0       	breq	8000bd80 <__swsetup_r+0x90>
8000bd46:	ed b8 00 04 	bld	r8,0x4
8000bd4a:	c3 e1       	brne	8000bdc6 <__swsetup_r+0xd6>
8000bd4c:	ed b8 00 02 	bld	r8,0x2
8000bd50:	c1 51       	brne	8000bd7a <__swsetup_r+0x8a>
8000bd52:	6e db       	ld.w	r11,r7[0x34]
8000bd54:	58 0b       	cp.w	r11,0
8000bd56:	c0 a0       	breq	8000bd6a <__swsetup_r+0x7a>
8000bd58:	ee c8 ff bc 	sub	r8,r7,-68
8000bd5c:	10 3b       	cp.w	r11,r8
8000bd5e:	c0 40       	breq	8000bd66 <__swsetup_r+0x76>
8000bd60:	0c 9c       	mov	r12,r6
8000bd62:	fe b0 ed e3 	rcall	80009928 <_free_r>
8000bd66:	30 08       	mov	r8,0
8000bd68:	8f d8       	st.w	r7[0x34],r8
8000bd6a:	8e 68       	ld.sh	r8,r7[0xc]
8000bd6c:	e0 18 ff db 	andl	r8,0xffdb
8000bd70:	ae 68       	st.h	r7[0xc],r8
8000bd72:	30 08       	mov	r8,0
8000bd74:	8f 18       	st.w	r7[0x4],r8
8000bd76:	6e 48       	ld.w	r8,r7[0x10]
8000bd78:	8f 08       	st.w	r7[0x0],r8
8000bd7a:	8e 68       	ld.sh	r8,r7[0xc]
8000bd7c:	a3 b8       	sbr	r8,0x3
8000bd7e:	ae 68       	st.h	r7[0xc],r8
8000bd80:	6e 48       	ld.w	r8,r7[0x10]
8000bd82:	58 08       	cp.w	r8,0
8000bd84:	c0 b1       	brne	8000bd9a <__swsetup_r+0xaa>
8000bd86:	8e 68       	ld.sh	r8,r7[0xc]
8000bd88:	e2 18 02 80 	andl	r8,0x280,COH
8000bd8c:	e0 48 02 00 	cp.w	r8,512
8000bd90:	c0 50       	breq	8000bd9a <__swsetup_r+0xaa>
8000bd92:	0c 9c       	mov	r12,r6
8000bd94:	0e 9b       	mov	r11,r7
8000bd96:	e0 a0 09 31 	rcall	8000cff8 <__smakebuf_r>
8000bd9a:	8e 69       	ld.sh	r9,r7[0xc]
8000bd9c:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000bda0:	c0 70       	breq	8000bdae <__swsetup_r+0xbe>
8000bda2:	30 08       	mov	r8,0
8000bda4:	8f 28       	st.w	r7[0x8],r8
8000bda6:	6e 58       	ld.w	r8,r7[0x14]
8000bda8:	5c 38       	neg	r8
8000bdaa:	8f 68       	st.w	r7[0x18],r8
8000bdac:	c0 68       	rjmp	8000bdb8 <__swsetup_r+0xc8>
8000bdae:	ed b9 00 01 	bld	r9,0x1
8000bdb2:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000bdb6:	8f 28       	st.w	r7[0x8],r8
8000bdb8:	6e 48       	ld.w	r8,r7[0x10]
8000bdba:	58 08       	cp.w	r8,0
8000bdbc:	c0 61       	brne	8000bdc8 <__swsetup_r+0xd8>
8000bdbe:	8e 68       	ld.sh	r8,r7[0xc]
8000bdc0:	ed b8 00 07 	bld	r8,0x7
8000bdc4:	c0 21       	brne	8000bdc8 <__swsetup_r+0xd8>
8000bdc6:	dc 2a       	popm	r4-r7,pc,r12=-1
8000bdc8:	d8 2a       	popm	r4-r7,pc,r12=0
8000bdca:	d7 03       	nop

8000bdcc <quorem>:
8000bdcc:	d4 31       	pushm	r0-r7,lr
8000bdce:	20 2d       	sub	sp,8
8000bdd0:	18 97       	mov	r7,r12
8000bdd2:	78 48       	ld.w	r8,r12[0x10]
8000bdd4:	76 46       	ld.w	r6,r11[0x10]
8000bdd6:	0c 38       	cp.w	r8,r6
8000bdd8:	c0 34       	brge	8000bdde <quorem+0x12>
8000bdda:	30 0c       	mov	r12,0
8000bddc:	c8 58       	rjmp	8000bee6 <quorem+0x11a>
8000bdde:	ec c2 ff fc 	sub	r2,r6,-4
8000bde2:	f6 c3 ff ec 	sub	r3,r11,-20
8000bde6:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000bdea:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000bdee:	2f f9       	sub	r9,-1
8000bdf0:	20 16       	sub	r6,1
8000bdf2:	f8 09 0d 08 	divu	r8,r12,r9
8000bdf6:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000bdfa:	ee c4 ff ec 	sub	r4,r7,-20
8000bdfe:	10 95       	mov	r5,r8
8000be00:	58 08       	cp.w	r8,0
8000be02:	c4 10       	breq	8000be84 <quorem+0xb8>
8000be04:	30 09       	mov	r9,0
8000be06:	06 9a       	mov	r10,r3
8000be08:	08 98       	mov	r8,r4
8000be0a:	12 91       	mov	r1,r9
8000be0c:	50 0b       	stdsp	sp[0x0],r11
8000be0e:	70 0e       	ld.w	lr,r8[0x0]
8000be10:	b1 8e       	lsr	lr,0x10
8000be12:	50 1e       	stdsp	sp[0x4],lr
8000be14:	15 0e       	ld.w	lr,r10++
8000be16:	fc 00 16 10 	lsr	r0,lr,0x10
8000be1a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000be1e:	ea 0e 03 41 	mac	r1,r5,lr
8000be22:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000be26:	b1 81       	lsr	r1,0x10
8000be28:	40 1b       	lddsp	r11,sp[0x4]
8000be2a:	ea 00 02 40 	mul	r0,r5,r0
8000be2e:	e2 00 00 00 	add	r0,r1,r0
8000be32:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000be36:	02 1b       	sub	r11,r1
8000be38:	50 1b       	stdsp	sp[0x4],r11
8000be3a:	70 0b       	ld.w	r11,r8[0x0]
8000be3c:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
8000be40:	02 09       	add	r9,r1
8000be42:	f2 0e 01 0e 	sub	lr,r9,lr
8000be46:	b0 1e       	st.h	r8[0x2],lr
8000be48:	fc 09 14 10 	asr	r9,lr,0x10
8000be4c:	40 1e       	lddsp	lr,sp[0x4]
8000be4e:	fc 09 00 09 	add	r9,lr,r9
8000be52:	b0 09       	st.h	r8[0x0],r9
8000be54:	e0 01 16 10 	lsr	r1,r0,0x10
8000be58:	2f c8       	sub	r8,-4
8000be5a:	b1 49       	asr	r9,0x10
8000be5c:	04 3a       	cp.w	r10,r2
8000be5e:	fe 98 ff d8 	brls	8000be0e <quorem+0x42>
8000be62:	40 0b       	lddsp	r11,sp[0x0]
8000be64:	58 0c       	cp.w	r12,0
8000be66:	c0 f1       	brne	8000be84 <quorem+0xb8>
8000be68:	ec c8 ff fb 	sub	r8,r6,-5
8000be6c:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000be70:	c0 28       	rjmp	8000be74 <quorem+0xa8>
8000be72:	20 16       	sub	r6,1
8000be74:	20 48       	sub	r8,4
8000be76:	08 38       	cp.w	r8,r4
8000be78:	e0 88 00 05 	brls	8000be82 <quorem+0xb6>
8000be7c:	70 09       	ld.w	r9,r8[0x0]
8000be7e:	58 09       	cp.w	r9,0
8000be80:	cf 90       	breq	8000be72 <quorem+0xa6>
8000be82:	8f 46       	st.w	r7[0x10],r6
8000be84:	0e 9c       	mov	r12,r7
8000be86:	e0 a0 09 bf 	rcall	8000d204 <__mcmp>
8000be8a:	c2 d5       	brlt	8000bee4 <quorem+0x118>
8000be8c:	2f f5       	sub	r5,-1
8000be8e:	08 98       	mov	r8,r4
8000be90:	30 09       	mov	r9,0
8000be92:	07 0b       	ld.w	r11,r3++
8000be94:	f6 0a 16 10 	lsr	r10,r11,0x10
8000be98:	70 0c       	ld.w	r12,r8[0x0]
8000be9a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000be9e:	f8 0e 16 10 	lsr	lr,r12,0x10
8000bea2:	14 1e       	sub	lr,r10
8000bea4:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000bea8:	16 1a       	sub	r10,r11
8000beaa:	12 0a       	add	r10,r9
8000beac:	b0 1a       	st.h	r8[0x2],r10
8000beae:	b1 4a       	asr	r10,0x10
8000beb0:	fc 0a 00 09 	add	r9,lr,r10
8000beb4:	b0 09       	st.h	r8[0x0],r9
8000beb6:	2f c8       	sub	r8,-4
8000beb8:	b1 49       	asr	r9,0x10
8000beba:	04 33       	cp.w	r3,r2
8000bebc:	fe 98 ff eb 	brls	8000be92 <quorem+0xc6>
8000bec0:	ec c8 ff fb 	sub	r8,r6,-5
8000bec4:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000bec8:	58 09       	cp.w	r9,0
8000beca:	c0 d1       	brne	8000bee4 <quorem+0x118>
8000becc:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000bed0:	c0 28       	rjmp	8000bed4 <quorem+0x108>
8000bed2:	20 16       	sub	r6,1
8000bed4:	20 48       	sub	r8,4
8000bed6:	08 38       	cp.w	r8,r4
8000bed8:	e0 88 00 05 	brls	8000bee2 <quorem+0x116>
8000bedc:	70 09       	ld.w	r9,r8[0x0]
8000bede:	58 09       	cp.w	r9,0
8000bee0:	cf 90       	breq	8000bed2 <quorem+0x106>
8000bee2:	8f 46       	st.w	r7[0x10],r6
8000bee4:	0a 9c       	mov	r12,r5
8000bee6:	2f ed       	sub	sp,-8
8000bee8:	d8 32       	popm	r0-r7,pc
8000beea:	d7 03       	nop

8000beec <_dtoa_r>:
8000beec:	d4 31       	pushm	r0-r7,lr
8000beee:	21 ad       	sub	sp,104
8000bef0:	fa c4 ff 74 	sub	r4,sp,-140
8000bef4:	18 97       	mov	r7,r12
8000bef6:	16 95       	mov	r5,r11
8000bef8:	68 2c       	ld.w	r12,r4[0x8]
8000befa:	50 c9       	stdsp	sp[0x30],r9
8000befc:	68 16       	ld.w	r6,r4[0x4]
8000befe:	68 09       	ld.w	r9,r4[0x0]
8000bf00:	50 e8       	stdsp	sp[0x38],r8
8000bf02:	14 94       	mov	r4,r10
8000bf04:	51 2c       	stdsp	sp[0x48],r12
8000bf06:	fa e5 00 08 	st.d	sp[8],r4
8000bf0a:	51 59       	stdsp	sp[0x54],r9
8000bf0c:	6e 95       	ld.w	r5,r7[0x24]
8000bf0e:	58 05       	cp.w	r5,0
8000bf10:	c0 91       	brne	8000bf22 <_dtoa_r+0x36>
8000bf12:	31 0c       	mov	r12,16
8000bf14:	fe b0 e9 4c 	rcall	800091ac <malloc>
8000bf18:	99 35       	st.w	r12[0xc],r5
8000bf1a:	8f 9c       	st.w	r7[0x24],r12
8000bf1c:	99 15       	st.w	r12[0x4],r5
8000bf1e:	99 25       	st.w	r12[0x8],r5
8000bf20:	99 05       	st.w	r12[0x0],r5
8000bf22:	6e 99       	ld.w	r9,r7[0x24]
8000bf24:	72 08       	ld.w	r8,r9[0x0]
8000bf26:	58 08       	cp.w	r8,0
8000bf28:	c0 f0       	breq	8000bf46 <_dtoa_r+0x5a>
8000bf2a:	72 1a       	ld.w	r10,r9[0x4]
8000bf2c:	91 1a       	st.w	r8[0x4],r10
8000bf2e:	30 1a       	mov	r10,1
8000bf30:	72 19       	ld.w	r9,r9[0x4]
8000bf32:	f4 09 09 49 	lsl	r9,r10,r9
8000bf36:	10 9b       	mov	r11,r8
8000bf38:	91 29       	st.w	r8[0x8],r9
8000bf3a:	0e 9c       	mov	r12,r7
8000bf3c:	e0 a0 09 7e 	rcall	8000d238 <_Bfree>
8000bf40:	6e 98       	ld.w	r8,r7[0x24]
8000bf42:	30 09       	mov	r9,0
8000bf44:	91 09       	st.w	r8[0x0],r9
8000bf46:	40 28       	lddsp	r8,sp[0x8]
8000bf48:	10 94       	mov	r4,r8
8000bf4a:	58 08       	cp.w	r8,0
8000bf4c:	c0 64       	brge	8000bf58 <_dtoa_r+0x6c>
8000bf4e:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000bf52:	50 28       	stdsp	sp[0x8],r8
8000bf54:	30 18       	mov	r8,1
8000bf56:	c0 28       	rjmp	8000bf5a <_dtoa_r+0x6e>
8000bf58:	30 08       	mov	r8,0
8000bf5a:	8d 08       	st.w	r6[0x0],r8
8000bf5c:	fc 1c 7f f0 	movh	r12,0x7ff0
8000bf60:	40 26       	lddsp	r6,sp[0x8]
8000bf62:	0c 98       	mov	r8,r6
8000bf64:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000bf68:	18 38       	cp.w	r8,r12
8000bf6a:	c2 01       	brne	8000bfaa <_dtoa_r+0xbe>
8000bf6c:	e0 68 27 0f 	mov	r8,9999
8000bf70:	41 5b       	lddsp	r11,sp[0x54]
8000bf72:	97 08       	st.w	r11[0x0],r8
8000bf74:	40 3a       	lddsp	r10,sp[0xc]
8000bf76:	58 0a       	cp.w	r10,0
8000bf78:	c0 71       	brne	8000bf86 <_dtoa_r+0x9a>
8000bf7a:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000bf7e:	c0 41       	brne	8000bf86 <_dtoa_r+0x9a>
8000bf80:	fe cc cb 68 	sub	r12,pc,-13464
8000bf84:	c0 38       	rjmp	8000bf8a <_dtoa_r+0x9e>
8000bf86:	fe cc cb 62 	sub	r12,pc,-13470
8000bf8a:	41 29       	lddsp	r9,sp[0x48]
8000bf8c:	58 09       	cp.w	r9,0
8000bf8e:	e0 80 05 9a 	breq	8000cac2 <_dtoa_r+0xbd6>
8000bf92:	f8 c8 ff fd 	sub	r8,r12,-3
8000bf96:	f8 c9 ff f8 	sub	r9,r12,-8
8000bf9a:	11 8b       	ld.ub	r11,r8[0x0]
8000bf9c:	30 0a       	mov	r10,0
8000bf9e:	41 25       	lddsp	r5,sp[0x48]
8000bfa0:	f4 0b 18 00 	cp.b	r11,r10
8000bfa4:	f2 08 17 10 	movne	r8,r9
8000bfa8:	c1 68       	rjmp	8000bfd4 <_dtoa_r+0xe8>
8000bfaa:	fa ea 00 08 	ld.d	r10,sp[8]
8000bfae:	30 08       	mov	r8,0
8000bfb0:	fa eb 00 3c 	st.d	sp[60],r10
8000bfb4:	30 09       	mov	r9,0
8000bfb6:	e0 a0 11 1c 	rcall	8000e1ee <__avr32_f64_cmp_eq>
8000bfba:	c1 00       	breq	8000bfda <_dtoa_r+0xee>
8000bfbc:	30 18       	mov	r8,1
8000bfbe:	41 5a       	lddsp	r10,sp[0x54]
8000bfc0:	95 08       	st.w	r10[0x0],r8
8000bfc2:	fe cc cc ce 	sub	r12,pc,-13106
8000bfc6:	41 29       	lddsp	r9,sp[0x48]
8000bfc8:	f8 08 00 08 	add	r8,r12,r8
8000bfcc:	58 09       	cp.w	r9,0
8000bfce:	e0 80 05 7a 	breq	8000cac2 <_dtoa_r+0xbd6>
8000bfd2:	12 95       	mov	r5,r9
8000bfd4:	8b 08       	st.w	r5[0x0],r8
8000bfd6:	e0 8f 05 76 	bral	8000cac2 <_dtoa_r+0xbd6>
8000bfda:	fa c8 ff 9c 	sub	r8,sp,-100
8000bfde:	fa c9 ff a0 	sub	r9,sp,-96
8000bfe2:	fa ea 00 3c 	ld.d	r10,sp[60]
8000bfe6:	0e 9c       	mov	r12,r7
8000bfe8:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
8000bfec:	e0 a0 09 78 	rcall	8000d2dc <__d2b>
8000bff0:	18 93       	mov	r3,r12
8000bff2:	58 05       	cp.w	r5,0
8000bff4:	c0 d0       	breq	8000c00e <_dtoa_r+0x122>
8000bff6:	fa ea 00 3c 	ld.d	r10,sp[60]
8000bffa:	30 04       	mov	r4,0
8000bffc:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000c000:	ea c5 03 ff 	sub	r5,r5,1023
8000c004:	10 9b       	mov	r11,r8
8000c006:	51 74       	stdsp	sp[0x5c],r4
8000c008:	ea 1b 3f f0 	orh	r11,0x3ff0
8000c00c:	c2 58       	rjmp	8000c056 <_dtoa_r+0x16a>
8000c00e:	41 88       	lddsp	r8,sp[0x60]
8000c010:	41 9c       	lddsp	r12,sp[0x64]
8000c012:	10 0c       	add	r12,r8
8000c014:	f8 c5 fb ce 	sub	r5,r12,-1074
8000c018:	e0 45 00 20 	cp.w	r5,32
8000c01c:	e0 8a 00 0e 	brle	8000c038 <_dtoa_r+0x14c>
8000c020:	f8 cc fb ee 	sub	r12,r12,-1042
8000c024:	40 3b       	lddsp	r11,sp[0xc]
8000c026:	ea 08 11 40 	rsub	r8,r5,64
8000c02a:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000c02e:	ec 08 09 46 	lsl	r6,r6,r8
8000c032:	0c 4c       	or	r12,r6
8000c034:	c0 78       	rjmp	8000c042 <_dtoa_r+0x156>
8000c036:	d7 03       	nop
8000c038:	ea 0c 11 20 	rsub	r12,r5,32
8000c03c:	40 3a       	lddsp	r10,sp[0xc]
8000c03e:	f4 0c 09 4c 	lsl	r12,r10,r12
8000c042:	e0 a0 10 62 	rcall	8000e106 <__avr32_u32_to_f64>
8000c046:	fc 18 fe 10 	movh	r8,0xfe10
8000c04a:	30 19       	mov	r9,1
8000c04c:	ea c5 04 33 	sub	r5,r5,1075
8000c050:	f0 0b 00 0b 	add	r11,r8,r11
8000c054:	51 79       	stdsp	sp[0x5c],r9
8000c056:	30 08       	mov	r8,0
8000c058:	fc 19 3f f8 	movh	r9,0x3ff8
8000c05c:	e0 a0 0e ea 	rcall	8000de30 <__avr32_f64_sub>
8000c060:	e0 68 43 61 	mov	r8,17249
8000c064:	ea 18 63 6f 	orh	r8,0x636f
8000c068:	e0 69 87 a7 	mov	r9,34727
8000c06c:	ea 19 3f d2 	orh	r9,0x3fd2
8000c070:	e0 a0 0d f4 	rcall	8000dc58 <__avr32_f64_mul>
8000c074:	e0 68 c8 b3 	mov	r8,51379
8000c078:	ea 18 8b 60 	orh	r8,0x8b60
8000c07c:	e0 69 8a 28 	mov	r9,35368
8000c080:	ea 19 3f c6 	orh	r9,0x3fc6
8000c084:	e0 a0 0f a4 	rcall	8000dfcc <__avr32_f64_add>
8000c088:	0a 9c       	mov	r12,r5
8000c08a:	14 90       	mov	r0,r10
8000c08c:	16 91       	mov	r1,r11
8000c08e:	e0 a0 10 40 	rcall	8000e10e <__avr32_s32_to_f64>
8000c092:	e0 68 79 fb 	mov	r8,31227
8000c096:	ea 18 50 9f 	orh	r8,0x509f
8000c09a:	e0 69 44 13 	mov	r9,17427
8000c09e:	ea 19 3f d3 	orh	r9,0x3fd3
8000c0a2:	e0 a0 0d db 	rcall	8000dc58 <__avr32_f64_mul>
8000c0a6:	14 98       	mov	r8,r10
8000c0a8:	16 99       	mov	r9,r11
8000c0aa:	00 9a       	mov	r10,r0
8000c0ac:	02 9b       	mov	r11,r1
8000c0ae:	e0 a0 0f 8f 	rcall	8000dfcc <__avr32_f64_add>
8000c0b2:	14 90       	mov	r0,r10
8000c0b4:	16 91       	mov	r1,r11
8000c0b6:	e0 a0 10 15 	rcall	8000e0e0 <__avr32_f64_to_s32>
8000c0ba:	30 08       	mov	r8,0
8000c0bc:	18 96       	mov	r6,r12
8000c0be:	30 09       	mov	r9,0
8000c0c0:	00 9a       	mov	r10,r0
8000c0c2:	02 9b       	mov	r11,r1
8000c0c4:	e0 a0 10 dc 	rcall	8000e27c <__avr32_f64_cmp_lt>
8000c0c8:	c0 c0       	breq	8000c0e0 <_dtoa_r+0x1f4>
8000c0ca:	0c 9c       	mov	r12,r6
8000c0cc:	e0 a0 10 21 	rcall	8000e10e <__avr32_s32_to_f64>
8000c0d0:	14 98       	mov	r8,r10
8000c0d2:	16 99       	mov	r9,r11
8000c0d4:	00 9a       	mov	r10,r0
8000c0d6:	02 9b       	mov	r11,r1
8000c0d8:	e0 a0 10 8b 	rcall	8000e1ee <__avr32_f64_cmp_eq>
8000c0dc:	f7 b6 00 01 	subeq	r6,1
8000c0e0:	59 66       	cp.w	r6,22
8000c0e2:	e0 88 00 05 	brls	8000c0ec <_dtoa_r+0x200>
8000c0e6:	30 18       	mov	r8,1
8000c0e8:	51 48       	stdsp	sp[0x50],r8
8000c0ea:	c1 38       	rjmp	8000c110 <_dtoa_r+0x224>
8000c0ec:	fe c8 cc 18 	sub	r8,pc,-13288
8000c0f0:	fa ea 00 3c 	ld.d	r10,sp[60]
8000c0f4:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000c0f8:	e0 a0 10 c2 	rcall	8000e27c <__avr32_f64_cmp_lt>
8000c0fc:	f9 b4 00 00 	moveq	r4,0
8000c100:	fb f4 0a 14 	st.weq	sp[0x50],r4
8000c104:	f7 b6 01 01 	subne	r6,1
8000c108:	f9 bc 01 00 	movne	r12,0
8000c10c:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000c110:	41 90       	lddsp	r0,sp[0x64]
8000c112:	20 10       	sub	r0,1
8000c114:	0a 10       	sub	r0,r5
8000c116:	c0 46       	brmi	8000c11e <_dtoa_r+0x232>
8000c118:	50 40       	stdsp	sp[0x10],r0
8000c11a:	30 00       	mov	r0,0
8000c11c:	c0 48       	rjmp	8000c124 <_dtoa_r+0x238>
8000c11e:	30 0b       	mov	r11,0
8000c120:	5c 30       	neg	r0
8000c122:	50 4b       	stdsp	sp[0x10],r11
8000c124:	ec 02 11 00 	rsub	r2,r6,0
8000c128:	58 06       	cp.w	r6,0
8000c12a:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000c12e:	f5 d6 e4 0a 	addge	r10,r10,r6
8000c132:	fb fa 4a 04 	st.wge	sp[0x10],r10
8000c136:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000c13a:	f9 b2 04 00 	movge	r2,0
8000c13e:	e1 d6 e5 10 	sublt	r0,r0,r6
8000c142:	f9 b9 05 00 	movlt	r9,0
8000c146:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000c14a:	40 c8       	lddsp	r8,sp[0x30]
8000c14c:	58 98       	cp.w	r8,9
8000c14e:	e0 8b 00 20 	brhi	8000c18e <_dtoa_r+0x2a2>
8000c152:	58 58       	cp.w	r8,5
8000c154:	f9 b4 0a 01 	movle	r4,1
8000c158:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000c15c:	f7 b5 09 04 	subgt	r5,4
8000c160:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000c164:	f9 b4 09 00 	movgt	r4,0
8000c168:	40 cc       	lddsp	r12,sp[0x30]
8000c16a:	58 3c       	cp.w	r12,3
8000c16c:	c2 d0       	breq	8000c1c6 <_dtoa_r+0x2da>
8000c16e:	e0 89 00 05 	brgt	8000c178 <_dtoa_r+0x28c>
8000c172:	58 2c       	cp.w	r12,2
8000c174:	c1 01       	brne	8000c194 <_dtoa_r+0x2a8>
8000c176:	c1 88       	rjmp	8000c1a6 <_dtoa_r+0x2ba>
8000c178:	40 cb       	lddsp	r11,sp[0x30]
8000c17a:	58 4b       	cp.w	r11,4
8000c17c:	c0 60       	breq	8000c188 <_dtoa_r+0x29c>
8000c17e:	58 5b       	cp.w	r11,5
8000c180:	c0 a1       	brne	8000c194 <_dtoa_r+0x2a8>
8000c182:	30 1a       	mov	r10,1
8000c184:	50 da       	stdsp	sp[0x34],r10
8000c186:	c2 28       	rjmp	8000c1ca <_dtoa_r+0x2de>
8000c188:	30 19       	mov	r9,1
8000c18a:	50 d9       	stdsp	sp[0x34],r9
8000c18c:	c0 f8       	rjmp	8000c1aa <_dtoa_r+0x2be>
8000c18e:	30 08       	mov	r8,0
8000c190:	30 14       	mov	r4,1
8000c192:	50 c8       	stdsp	sp[0x30],r8
8000c194:	3f f5       	mov	r5,-1
8000c196:	30 1c       	mov	r12,1
8000c198:	30 0b       	mov	r11,0
8000c19a:	50 95       	stdsp	sp[0x24],r5
8000c19c:	50 dc       	stdsp	sp[0x34],r12
8000c19e:	0a 91       	mov	r1,r5
8000c1a0:	31 28       	mov	r8,18
8000c1a2:	50 eb       	stdsp	sp[0x38],r11
8000c1a4:	c2 08       	rjmp	8000c1e4 <_dtoa_r+0x2f8>
8000c1a6:	30 0a       	mov	r10,0
8000c1a8:	50 da       	stdsp	sp[0x34],r10
8000c1aa:	40 e9       	lddsp	r9,sp[0x38]
8000c1ac:	58 09       	cp.w	r9,0
8000c1ae:	e0 89 00 07 	brgt	8000c1bc <_dtoa_r+0x2d0>
8000c1b2:	30 18       	mov	r8,1
8000c1b4:	50 98       	stdsp	sp[0x24],r8
8000c1b6:	10 91       	mov	r1,r8
8000c1b8:	50 e8       	stdsp	sp[0x38],r8
8000c1ba:	c1 58       	rjmp	8000c1e4 <_dtoa_r+0x2f8>
8000c1bc:	40 e5       	lddsp	r5,sp[0x38]
8000c1be:	50 95       	stdsp	sp[0x24],r5
8000c1c0:	0a 91       	mov	r1,r5
8000c1c2:	0a 98       	mov	r8,r5
8000c1c4:	c1 08       	rjmp	8000c1e4 <_dtoa_r+0x2f8>
8000c1c6:	30 0c       	mov	r12,0
8000c1c8:	50 dc       	stdsp	sp[0x34],r12
8000c1ca:	40 eb       	lddsp	r11,sp[0x38]
8000c1cc:	ec 0b 00 0b 	add	r11,r6,r11
8000c1d0:	50 9b       	stdsp	sp[0x24],r11
8000c1d2:	16 98       	mov	r8,r11
8000c1d4:	2f f8       	sub	r8,-1
8000c1d6:	58 08       	cp.w	r8,0
8000c1d8:	e0 89 00 05 	brgt	8000c1e2 <_dtoa_r+0x2f6>
8000c1dc:	10 91       	mov	r1,r8
8000c1de:	30 18       	mov	r8,1
8000c1e0:	c0 28       	rjmp	8000c1e4 <_dtoa_r+0x2f8>
8000c1e2:	10 91       	mov	r1,r8
8000c1e4:	30 09       	mov	r9,0
8000c1e6:	6e 9a       	ld.w	r10,r7[0x24]
8000c1e8:	95 19       	st.w	r10[0x4],r9
8000c1ea:	30 49       	mov	r9,4
8000c1ec:	c0 68       	rjmp	8000c1f8 <_dtoa_r+0x30c>
8000c1ee:	d7 03       	nop
8000c1f0:	6a 1a       	ld.w	r10,r5[0x4]
8000c1f2:	a1 79       	lsl	r9,0x1
8000c1f4:	2f fa       	sub	r10,-1
8000c1f6:	8b 1a       	st.w	r5[0x4],r10
8000c1f8:	6e 95       	ld.w	r5,r7[0x24]
8000c1fa:	f2 ca ff ec 	sub	r10,r9,-20
8000c1fe:	10 3a       	cp.w	r10,r8
8000c200:	fe 98 ff f8 	brls	8000c1f0 <_dtoa_r+0x304>
8000c204:	6a 1b       	ld.w	r11,r5[0x4]
8000c206:	0e 9c       	mov	r12,r7
8000c208:	e0 a0 08 32 	rcall	8000d26c <_Balloc>
8000c20c:	58 e1       	cp.w	r1,14
8000c20e:	5f 88       	srls	r8
8000c210:	8b 0c       	st.w	r5[0x0],r12
8000c212:	f1 e4 00 04 	and	r4,r8,r4
8000c216:	6e 98       	ld.w	r8,r7[0x24]
8000c218:	70 08       	ld.w	r8,r8[0x0]
8000c21a:	50 88       	stdsp	sp[0x20],r8
8000c21c:	e0 80 01 82 	breq	8000c520 <_dtoa_r+0x634>
8000c220:	58 06       	cp.w	r6,0
8000c222:	e0 8a 00 43 	brle	8000c2a8 <_dtoa_r+0x3bc>
8000c226:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000c22a:	fe c8 cd 56 	sub	r8,pc,-12970
8000c22e:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000c232:	fa e5 00 18 	st.d	sp[24],r4
8000c236:	ec 04 14 04 	asr	r4,r6,0x4
8000c23a:	ed b4 00 04 	bld	r4,0x4
8000c23e:	c0 30       	breq	8000c244 <_dtoa_r+0x358>
8000c240:	30 25       	mov	r5,2
8000c242:	c1 08       	rjmp	8000c262 <_dtoa_r+0x376>
8000c244:	fe c8 cc a8 	sub	r8,pc,-13144
8000c248:	f0 e8 00 20 	ld.d	r8,r8[32]
8000c24c:	fa ea 00 3c 	ld.d	r10,sp[60]
8000c250:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
8000c254:	e0 a0 10 48 	rcall	8000e2e4 <__avr32_f64_div>
8000c258:	30 35       	mov	r5,3
8000c25a:	14 98       	mov	r8,r10
8000c25c:	16 99       	mov	r9,r11
8000c25e:	fa e9 00 08 	st.d	sp[8],r8
8000c262:	fe cc cc c6 	sub	r12,pc,-13114
8000c266:	50 a3       	stdsp	sp[0x28],r3
8000c268:	0c 93       	mov	r3,r6
8000c26a:	18 96       	mov	r6,r12
8000c26c:	c0 f8       	rjmp	8000c28a <_dtoa_r+0x39e>
8000c26e:	fa ea 00 18 	ld.d	r10,sp[24]
8000c272:	ed b4 00 00 	bld	r4,0x0
8000c276:	c0 81       	brne	8000c286 <_dtoa_r+0x39a>
8000c278:	ec e8 00 00 	ld.d	r8,r6[0]
8000c27c:	2f f5       	sub	r5,-1
8000c27e:	e0 a0 0c ed 	rcall	8000dc58 <__avr32_f64_mul>
8000c282:	fa eb 00 18 	st.d	sp[24],r10
8000c286:	a1 54       	asr	r4,0x1
8000c288:	2f 86       	sub	r6,-8
8000c28a:	58 04       	cp.w	r4,0
8000c28c:	cf 11       	brne	8000c26e <_dtoa_r+0x382>
8000c28e:	fa e8 00 18 	ld.d	r8,sp[24]
8000c292:	fa ea 00 08 	ld.d	r10,sp[8]
8000c296:	06 96       	mov	r6,r3
8000c298:	e0 a0 10 26 	rcall	8000e2e4 <__avr32_f64_div>
8000c29c:	40 a3       	lddsp	r3,sp[0x28]
8000c29e:	14 98       	mov	r8,r10
8000c2a0:	16 99       	mov	r9,r11
8000c2a2:	fa e9 00 08 	st.d	sp[8],r8
8000c2a6:	c2 f8       	rjmp	8000c304 <_dtoa_r+0x418>
8000c2a8:	ec 08 11 00 	rsub	r8,r6,0
8000c2ac:	c0 31       	brne	8000c2b2 <_dtoa_r+0x3c6>
8000c2ae:	30 25       	mov	r5,2
8000c2b0:	c2 a8       	rjmp	8000c304 <_dtoa_r+0x418>
8000c2b2:	fe cc cd 16 	sub	r12,pc,-13034
8000c2b6:	f0 04 14 04 	asr	r4,r8,0x4
8000c2ba:	50 1c       	stdsp	sp[0x4],r12
8000c2bc:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000c2c0:	fe c9 cd ec 	sub	r9,pc,-12820
8000c2c4:	fa ea 00 3c 	ld.d	r10,sp[60]
8000c2c8:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000c2cc:	e0 a0 0c c6 	rcall	8000dc58 <__avr32_f64_mul>
8000c2d0:	40 1c       	lddsp	r12,sp[0x4]
8000c2d2:	50 63       	stdsp	sp[0x18],r3
8000c2d4:	30 25       	mov	r5,2
8000c2d6:	0c 93       	mov	r3,r6
8000c2d8:	fa eb 00 08 	st.d	sp[8],r10
8000c2dc:	18 96       	mov	r6,r12
8000c2de:	c0 f8       	rjmp	8000c2fc <_dtoa_r+0x410>
8000c2e0:	fa ea 00 08 	ld.d	r10,sp[8]
8000c2e4:	ed b4 00 00 	bld	r4,0x0
8000c2e8:	c0 81       	brne	8000c2f8 <_dtoa_r+0x40c>
8000c2ea:	ec e8 00 00 	ld.d	r8,r6[0]
8000c2ee:	2f f5       	sub	r5,-1
8000c2f0:	e0 a0 0c b4 	rcall	8000dc58 <__avr32_f64_mul>
8000c2f4:	fa eb 00 08 	st.d	sp[8],r10
8000c2f8:	a1 54       	asr	r4,0x1
8000c2fa:	2f 86       	sub	r6,-8
8000c2fc:	58 04       	cp.w	r4,0
8000c2fe:	cf 11       	brne	8000c2e0 <_dtoa_r+0x3f4>
8000c300:	06 96       	mov	r6,r3
8000c302:	40 63       	lddsp	r3,sp[0x18]
8000c304:	41 4a       	lddsp	r10,sp[0x50]
8000c306:	58 0a       	cp.w	r10,0
8000c308:	c2 a0       	breq	8000c35c <_dtoa_r+0x470>
8000c30a:	fa e8 00 08 	ld.d	r8,sp[8]
8000c30e:	58 01       	cp.w	r1,0
8000c310:	5f 94       	srgt	r4
8000c312:	fa e9 00 18 	st.d	sp[24],r8
8000c316:	30 08       	mov	r8,0
8000c318:	fc 19 3f f0 	movh	r9,0x3ff0
8000c31c:	fa ea 00 18 	ld.d	r10,sp[24]
8000c320:	e0 a0 0f ae 	rcall	8000e27c <__avr32_f64_cmp_lt>
8000c324:	f9 bc 00 00 	moveq	r12,0
8000c328:	f9 bc 01 01 	movne	r12,1
8000c32c:	e9 ec 00 0c 	and	r12,r4,r12
8000c330:	c1 60       	breq	8000c35c <_dtoa_r+0x470>
8000c332:	40 98       	lddsp	r8,sp[0x24]
8000c334:	58 08       	cp.w	r8,0
8000c336:	e0 8a 00 f1 	brle	8000c518 <_dtoa_r+0x62c>
8000c33a:	30 08       	mov	r8,0
8000c33c:	fc 19 40 24 	movh	r9,0x4024
8000c340:	ec c4 00 01 	sub	r4,r6,1
8000c344:	fa ea 00 18 	ld.d	r10,sp[24]
8000c348:	2f f5       	sub	r5,-1
8000c34a:	50 64       	stdsp	sp[0x18],r4
8000c34c:	e0 a0 0c 86 	rcall	8000dc58 <__avr32_f64_mul>
8000c350:	40 94       	lddsp	r4,sp[0x24]
8000c352:	14 98       	mov	r8,r10
8000c354:	16 99       	mov	r9,r11
8000c356:	fa e9 00 08 	st.d	sp[8],r8
8000c35a:	c0 38       	rjmp	8000c360 <_dtoa_r+0x474>
8000c35c:	50 66       	stdsp	sp[0x18],r6
8000c35e:	02 94       	mov	r4,r1
8000c360:	0a 9c       	mov	r12,r5
8000c362:	e0 a0 0e d6 	rcall	8000e10e <__avr32_s32_to_f64>
8000c366:	fa e8 00 08 	ld.d	r8,sp[8]
8000c36a:	e0 a0 0c 77 	rcall	8000dc58 <__avr32_f64_mul>
8000c36e:	30 08       	mov	r8,0
8000c370:	fc 19 40 1c 	movh	r9,0x401c
8000c374:	e0 a0 0e 2c 	rcall	8000dfcc <__avr32_f64_add>
8000c378:	14 98       	mov	r8,r10
8000c37a:	16 99       	mov	r9,r11
8000c37c:	fa e9 00 28 	st.d	sp[40],r8
8000c380:	fc 18 fc c0 	movh	r8,0xfcc0
8000c384:	40 a5       	lddsp	r5,sp[0x28]
8000c386:	10 05       	add	r5,r8
8000c388:	50 a5       	stdsp	sp[0x28],r5
8000c38a:	58 04       	cp.w	r4,0
8000c38c:	c2 11       	brne	8000c3ce <_dtoa_r+0x4e2>
8000c38e:	fa ea 00 08 	ld.d	r10,sp[8]
8000c392:	30 08       	mov	r8,0
8000c394:	fc 19 40 14 	movh	r9,0x4014
8000c398:	e0 a0 0d 4c 	rcall	8000de30 <__avr32_f64_sub>
8000c39c:	40 bc       	lddsp	r12,sp[0x2c]
8000c39e:	fa eb 00 08 	st.d	sp[8],r10
8000c3a2:	14 98       	mov	r8,r10
8000c3a4:	16 99       	mov	r9,r11
8000c3a6:	18 9a       	mov	r10,r12
8000c3a8:	0a 9b       	mov	r11,r5
8000c3aa:	e0 a0 0f 69 	rcall	8000e27c <__avr32_f64_cmp_lt>
8000c3ae:	e0 81 02 54 	brne	8000c856 <_dtoa_r+0x96a>
8000c3b2:	0a 98       	mov	r8,r5
8000c3b4:	40 b9       	lddsp	r9,sp[0x2c]
8000c3b6:	ee 18 80 00 	eorh	r8,0x8000
8000c3ba:	fa ea 00 08 	ld.d	r10,sp[8]
8000c3be:	10 95       	mov	r5,r8
8000c3c0:	12 98       	mov	r8,r9
8000c3c2:	0a 99       	mov	r9,r5
8000c3c4:	e0 a0 0f 5c 	rcall	8000e27c <__avr32_f64_cmp_lt>
8000c3c8:	e0 81 02 3e 	brne	8000c844 <_dtoa_r+0x958>
8000c3cc:	ca 68       	rjmp	8000c518 <_dtoa_r+0x62c>
8000c3ce:	fe c9 ce fa 	sub	r9,pc,-12550
8000c3d2:	e8 c8 00 01 	sub	r8,r4,1
8000c3d6:	40 d5       	lddsp	r5,sp[0x34]
8000c3d8:	58 05       	cp.w	r5,0
8000c3da:	c4 f0       	breq	8000c478 <_dtoa_r+0x58c>
8000c3dc:	30 0c       	mov	r12,0
8000c3de:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000c3e2:	51 3c       	stdsp	sp[0x4c],r12
8000c3e4:	30 0a       	mov	r10,0
8000c3e6:	fc 1b 3f e0 	movh	r11,0x3fe0
8000c3ea:	e0 a0 0f 7d 	rcall	8000e2e4 <__avr32_f64_div>
8000c3ee:	fa e8 00 28 	ld.d	r8,sp[40]
8000c3f2:	40 85       	lddsp	r5,sp[0x20]
8000c3f4:	e0 a0 0d 1e 	rcall	8000de30 <__avr32_f64_sub>
8000c3f8:	fa eb 00 28 	st.d	sp[40],r10
8000c3fc:	fa ea 00 08 	ld.d	r10,sp[8]
8000c400:	e0 a0 0e 70 	rcall	8000e0e0 <__avr32_f64_to_s32>
8000c404:	51 6c       	stdsp	sp[0x58],r12
8000c406:	e0 a0 0e 84 	rcall	8000e10e <__avr32_s32_to_f64>
8000c40a:	14 98       	mov	r8,r10
8000c40c:	16 99       	mov	r9,r11
8000c40e:	fa ea 00 08 	ld.d	r10,sp[8]
8000c412:	e0 a0 0d 0f 	rcall	8000de30 <__avr32_f64_sub>
8000c416:	fa eb 00 08 	st.d	sp[8],r10
8000c41a:	41 68       	lddsp	r8,sp[0x58]
8000c41c:	2d 08       	sub	r8,-48
8000c41e:	0a c8       	st.b	r5++,r8
8000c420:	41 39       	lddsp	r9,sp[0x4c]
8000c422:	2f f9       	sub	r9,-1
8000c424:	51 39       	stdsp	sp[0x4c],r9
8000c426:	fa e8 00 28 	ld.d	r8,sp[40]
8000c42a:	e0 a0 0f 29 	rcall	8000e27c <__avr32_f64_cmp_lt>
8000c42e:	e0 81 03 39 	brne	8000caa0 <_dtoa_r+0xbb4>
8000c432:	fa e8 00 08 	ld.d	r8,sp[8]
8000c436:	30 0a       	mov	r10,0
8000c438:	fc 1b 3f f0 	movh	r11,0x3ff0
8000c43c:	e0 a0 0c fa 	rcall	8000de30 <__avr32_f64_sub>
8000c440:	fa e8 00 28 	ld.d	r8,sp[40]
8000c444:	e0 a0 0f 1c 	rcall	8000e27c <__avr32_f64_cmp_lt>
8000c448:	fa ea 00 28 	ld.d	r10,sp[40]
8000c44c:	30 08       	mov	r8,0
8000c44e:	fc 19 40 24 	movh	r9,0x4024
8000c452:	e0 81 00 da 	brne	8000c606 <_dtoa_r+0x71a>
8000c456:	41 3c       	lddsp	r12,sp[0x4c]
8000c458:	08 3c       	cp.w	r12,r4
8000c45a:	c5 f4       	brge	8000c518 <_dtoa_r+0x62c>
8000c45c:	e0 a0 0b fe 	rcall	8000dc58 <__avr32_f64_mul>
8000c460:	30 08       	mov	r8,0
8000c462:	fa eb 00 28 	st.d	sp[40],r10
8000c466:	fc 19 40 24 	movh	r9,0x4024
8000c46a:	fa ea 00 08 	ld.d	r10,sp[8]
8000c46e:	e0 a0 0b f5 	rcall	8000dc58 <__avr32_f64_mul>
8000c472:	fa eb 00 08 	st.d	sp[8],r10
8000c476:	cc 3b       	rjmp	8000c3fc <_dtoa_r+0x510>
8000c478:	40 85       	lddsp	r5,sp[0x20]
8000c47a:	08 05       	add	r5,r4
8000c47c:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000c480:	51 35       	stdsp	sp[0x4c],r5
8000c482:	fa e8 00 28 	ld.d	r8,sp[40]
8000c486:	40 85       	lddsp	r5,sp[0x20]
8000c488:	e0 a0 0b e8 	rcall	8000dc58 <__avr32_f64_mul>
8000c48c:	fa eb 00 28 	st.d	sp[40],r10
8000c490:	fa ea 00 08 	ld.d	r10,sp[8]
8000c494:	e0 a0 0e 26 	rcall	8000e0e0 <__avr32_f64_to_s32>
8000c498:	51 6c       	stdsp	sp[0x58],r12
8000c49a:	e0 a0 0e 3a 	rcall	8000e10e <__avr32_s32_to_f64>
8000c49e:	14 98       	mov	r8,r10
8000c4a0:	16 99       	mov	r9,r11
8000c4a2:	fa ea 00 08 	ld.d	r10,sp[8]
8000c4a6:	e0 a0 0c c5 	rcall	8000de30 <__avr32_f64_sub>
8000c4aa:	fa eb 00 08 	st.d	sp[8],r10
8000c4ae:	41 68       	lddsp	r8,sp[0x58]
8000c4b0:	2d 08       	sub	r8,-48
8000c4b2:	0a c8       	st.b	r5++,r8
8000c4b4:	41 3c       	lddsp	r12,sp[0x4c]
8000c4b6:	18 35       	cp.w	r5,r12
8000c4b8:	c2 81       	brne	8000c508 <_dtoa_r+0x61c>
8000c4ba:	30 08       	mov	r8,0
8000c4bc:	fc 19 3f e0 	movh	r9,0x3fe0
8000c4c0:	fa ea 00 28 	ld.d	r10,sp[40]
8000c4c4:	e0 a0 0d 84 	rcall	8000dfcc <__avr32_f64_add>
8000c4c8:	40 85       	lddsp	r5,sp[0x20]
8000c4ca:	fa e8 00 08 	ld.d	r8,sp[8]
8000c4ce:	08 05       	add	r5,r4
8000c4d0:	e0 a0 0e d6 	rcall	8000e27c <__avr32_f64_cmp_lt>
8000c4d4:	e0 81 00 99 	brne	8000c606 <_dtoa_r+0x71a>
8000c4d8:	fa e8 00 28 	ld.d	r8,sp[40]
8000c4dc:	30 0a       	mov	r10,0
8000c4de:	fc 1b 3f e0 	movh	r11,0x3fe0
8000c4e2:	e0 a0 0c a7 	rcall	8000de30 <__avr32_f64_sub>
8000c4e6:	14 98       	mov	r8,r10
8000c4e8:	16 99       	mov	r9,r11
8000c4ea:	fa ea 00 08 	ld.d	r10,sp[8]
8000c4ee:	e0 a0 0e c7 	rcall	8000e27c <__avr32_f64_cmp_lt>
8000c4f2:	c1 30       	breq	8000c518 <_dtoa_r+0x62c>
8000c4f4:	33 09       	mov	r9,48
8000c4f6:	0a 98       	mov	r8,r5
8000c4f8:	11 7a       	ld.ub	r10,--r8
8000c4fa:	f2 0a 18 00 	cp.b	r10,r9
8000c4fe:	e0 81 02 d1 	brne	8000caa0 <_dtoa_r+0xbb4>
8000c502:	10 95       	mov	r5,r8
8000c504:	cf 9b       	rjmp	8000c4f6 <_dtoa_r+0x60a>
8000c506:	d7 03       	nop
8000c508:	30 08       	mov	r8,0
8000c50a:	fc 19 40 24 	movh	r9,0x4024
8000c50e:	e0 a0 0b a5 	rcall	8000dc58 <__avr32_f64_mul>
8000c512:	fa eb 00 08 	st.d	sp[8],r10
8000c516:	cb db       	rjmp	8000c490 <_dtoa_r+0x5a4>
8000c518:	fa ea 00 3c 	ld.d	r10,sp[60]
8000c51c:	fa eb 00 08 	st.d	sp[8],r10
8000c520:	58 e6       	cp.w	r6,14
8000c522:	5f ab       	srle	r11
8000c524:	41 8a       	lddsp	r10,sp[0x60]
8000c526:	30 08       	mov	r8,0
8000c528:	f4 09 11 ff 	rsub	r9,r10,-1
8000c52c:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000c530:	f0 09 18 00 	cp.b	r9,r8
8000c534:	e0 80 00 82 	breq	8000c638 <_dtoa_r+0x74c>
8000c538:	40 ea       	lddsp	r10,sp[0x38]
8000c53a:	58 01       	cp.w	r1,0
8000c53c:	5f a9       	srle	r9
8000c53e:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000c542:	fe ca d0 6e 	sub	r10,pc,-12178
8000c546:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000c54a:	fa e5 00 10 	st.d	sp[16],r4
8000c54e:	f0 09 18 00 	cp.b	r9,r8
8000c552:	c1 40       	breq	8000c57a <_dtoa_r+0x68e>
8000c554:	58 01       	cp.w	r1,0
8000c556:	e0 81 01 77 	brne	8000c844 <_dtoa_r+0x958>
8000c55a:	30 08       	mov	r8,0
8000c55c:	fc 19 40 14 	movh	r9,0x4014
8000c560:	08 9a       	mov	r10,r4
8000c562:	0a 9b       	mov	r11,r5
8000c564:	e0 a0 0b 7a 	rcall	8000dc58 <__avr32_f64_mul>
8000c568:	fa e8 00 08 	ld.d	r8,sp[8]
8000c56c:	e0 a0 0e 54 	rcall	8000e214 <__avr32_f64_cmp_ge>
8000c570:	e0 81 01 6a 	brne	8000c844 <_dtoa_r+0x958>
8000c574:	02 92       	mov	r2,r1
8000c576:	e0 8f 01 72 	bral	8000c85a <_dtoa_r+0x96e>
8000c57a:	40 85       	lddsp	r5,sp[0x20]
8000c57c:	30 14       	mov	r4,1
8000c57e:	fa e8 00 10 	ld.d	r8,sp[16]
8000c582:	fa ea 00 08 	ld.d	r10,sp[8]
8000c586:	e0 a0 0e af 	rcall	8000e2e4 <__avr32_f64_div>
8000c58a:	e0 a0 0d ab 	rcall	8000e0e0 <__avr32_f64_to_s32>
8000c58e:	18 92       	mov	r2,r12
8000c590:	e0 a0 0d bf 	rcall	8000e10e <__avr32_s32_to_f64>
8000c594:	fa e8 00 10 	ld.d	r8,sp[16]
8000c598:	e0 a0 0b 60 	rcall	8000dc58 <__avr32_f64_mul>
8000c59c:	14 98       	mov	r8,r10
8000c59e:	16 99       	mov	r9,r11
8000c5a0:	fa ea 00 08 	ld.d	r10,sp[8]
8000c5a4:	e0 a0 0c 46 	rcall	8000de30 <__avr32_f64_sub>
8000c5a8:	fa eb 00 08 	st.d	sp[8],r10
8000c5ac:	e4 c8 ff d0 	sub	r8,r2,-48
8000c5b0:	0a c8       	st.b	r5++,r8
8000c5b2:	fc 19 40 24 	movh	r9,0x4024
8000c5b6:	30 08       	mov	r8,0
8000c5b8:	02 34       	cp.w	r4,r1
8000c5ba:	c3 31       	brne	8000c620 <_dtoa_r+0x734>
8000c5bc:	fa e8 00 08 	ld.d	r8,sp[8]
8000c5c0:	e0 a0 0d 06 	rcall	8000dfcc <__avr32_f64_add>
8000c5c4:	16 91       	mov	r1,r11
8000c5c6:	14 90       	mov	r0,r10
8000c5c8:	14 98       	mov	r8,r10
8000c5ca:	02 99       	mov	r9,r1
8000c5cc:	fa ea 00 10 	ld.d	r10,sp[16]
8000c5d0:	e0 a0 0e 56 	rcall	8000e27c <__avr32_f64_cmp_lt>
8000c5d4:	c1 a1       	brne	8000c608 <_dtoa_r+0x71c>
8000c5d6:	fa e8 00 10 	ld.d	r8,sp[16]
8000c5da:	00 9a       	mov	r10,r0
8000c5dc:	02 9b       	mov	r11,r1
8000c5de:	e0 a0 0e 08 	rcall	8000e1ee <__avr32_f64_cmp_eq>
8000c5e2:	e0 80 02 5e 	breq	8000ca9e <_dtoa_r+0xbb2>
8000c5e6:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000c5ea:	c0 f1       	brne	8000c608 <_dtoa_r+0x71c>
8000c5ec:	e0 8f 02 59 	bral	8000ca9e <_dtoa_r+0xbb2>
8000c5f0:	40 8a       	lddsp	r10,sp[0x20]
8000c5f2:	14 38       	cp.w	r8,r10
8000c5f4:	c0 30       	breq	8000c5fa <_dtoa_r+0x70e>
8000c5f6:	10 95       	mov	r5,r8
8000c5f8:	c0 98       	rjmp	8000c60a <_dtoa_r+0x71e>
8000c5fa:	33 08       	mov	r8,48
8000c5fc:	40 89       	lddsp	r9,sp[0x20]
8000c5fe:	2f f6       	sub	r6,-1
8000c600:	b2 88       	st.b	r9[0x0],r8
8000c602:	40 88       	lddsp	r8,sp[0x20]
8000c604:	c0 88       	rjmp	8000c614 <_dtoa_r+0x728>
8000c606:	40 66       	lddsp	r6,sp[0x18]
8000c608:	33 99       	mov	r9,57
8000c60a:	0a 98       	mov	r8,r5
8000c60c:	11 7a       	ld.ub	r10,--r8
8000c60e:	f2 0a 18 00 	cp.b	r10,r9
8000c612:	ce f0       	breq	8000c5f0 <_dtoa_r+0x704>
8000c614:	50 66       	stdsp	sp[0x18],r6
8000c616:	11 89       	ld.ub	r9,r8[0x0]
8000c618:	2f f9       	sub	r9,-1
8000c61a:	b0 89       	st.b	r8[0x0],r9
8000c61c:	e0 8f 02 42 	bral	8000caa0 <_dtoa_r+0xbb4>
8000c620:	e0 a0 0b 1c 	rcall	8000dc58 <__avr32_f64_mul>
8000c624:	2f f4       	sub	r4,-1
8000c626:	fa eb 00 08 	st.d	sp[8],r10
8000c62a:	30 08       	mov	r8,0
8000c62c:	30 09       	mov	r9,0
8000c62e:	e0 a0 0d e0 	rcall	8000e1ee <__avr32_f64_cmp_eq>
8000c632:	ca 60       	breq	8000c57e <_dtoa_r+0x692>
8000c634:	e0 8f 02 35 	bral	8000ca9e <_dtoa_r+0xbb2>
8000c638:	40 d8       	lddsp	r8,sp[0x34]
8000c63a:	58 08       	cp.w	r8,0
8000c63c:	c0 51       	brne	8000c646 <_dtoa_r+0x75a>
8000c63e:	04 98       	mov	r8,r2
8000c640:	00 95       	mov	r5,r0
8000c642:	40 d4       	lddsp	r4,sp[0x34]
8000c644:	c3 78       	rjmp	8000c6b2 <_dtoa_r+0x7c6>
8000c646:	40 c5       	lddsp	r5,sp[0x30]
8000c648:	58 15       	cp.w	r5,1
8000c64a:	e0 89 00 0f 	brgt	8000c668 <_dtoa_r+0x77c>
8000c64e:	41 74       	lddsp	r4,sp[0x5c]
8000c650:	58 04       	cp.w	r4,0
8000c652:	c0 40       	breq	8000c65a <_dtoa_r+0x76e>
8000c654:	f4 c9 fb cd 	sub	r9,r10,-1075
8000c658:	c0 48       	rjmp	8000c660 <_dtoa_r+0x774>
8000c65a:	41 99       	lddsp	r9,sp[0x64]
8000c65c:	f2 09 11 36 	rsub	r9,r9,54
8000c660:	04 98       	mov	r8,r2
8000c662:	00 95       	mov	r5,r0
8000c664:	c1 c8       	rjmp	8000c69c <_dtoa_r+0x7b0>
8000c666:	d7 03       	nop
8000c668:	e2 c8 00 01 	sub	r8,r1,1
8000c66c:	58 01       	cp.w	r1,0
8000c66e:	e0 05 17 40 	movge	r5,r0
8000c672:	e2 09 17 40 	movge	r9,r1
8000c676:	e1 d1 e5 15 	sublt	r5,r0,r1
8000c67a:	f9 b9 05 00 	movlt	r9,0
8000c67e:	10 32       	cp.w	r2,r8
8000c680:	e5 d8 e4 18 	subge	r8,r2,r8
8000c684:	f1 d2 e5 18 	sublt	r8,r8,r2
8000c688:	e5 d8 e5 02 	addlt	r2,r2,r8
8000c68c:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000c690:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000c694:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000c698:	f9 b8 05 00 	movlt	r8,0
8000c69c:	40 4b       	lddsp	r11,sp[0x10]
8000c69e:	12 0b       	add	r11,r9
8000c6a0:	50 08       	stdsp	sp[0x0],r8
8000c6a2:	50 4b       	stdsp	sp[0x10],r11
8000c6a4:	12 00       	add	r0,r9
8000c6a6:	30 1b       	mov	r11,1
8000c6a8:	0e 9c       	mov	r12,r7
8000c6aa:	e0 a0 07 95 	rcall	8000d5d4 <__i2b>
8000c6ae:	40 08       	lddsp	r8,sp[0x0]
8000c6b0:	18 94       	mov	r4,r12
8000c6b2:	40 4a       	lddsp	r10,sp[0x10]
8000c6b4:	58 05       	cp.w	r5,0
8000c6b6:	5f 99       	srgt	r9
8000c6b8:	58 0a       	cp.w	r10,0
8000c6ba:	5f 9a       	srgt	r10
8000c6bc:	f5 e9 00 09 	and	r9,r10,r9
8000c6c0:	c0 80       	breq	8000c6d0 <_dtoa_r+0x7e4>
8000c6c2:	40 4c       	lddsp	r12,sp[0x10]
8000c6c4:	f8 05 0d 49 	min	r9,r12,r5
8000c6c8:	12 1c       	sub	r12,r9
8000c6ca:	12 10       	sub	r0,r9
8000c6cc:	50 4c       	stdsp	sp[0x10],r12
8000c6ce:	12 15       	sub	r5,r9
8000c6d0:	58 02       	cp.w	r2,0
8000c6d2:	e0 8a 00 27 	brle	8000c720 <_dtoa_r+0x834>
8000c6d6:	40 db       	lddsp	r11,sp[0x34]
8000c6d8:	58 0b       	cp.w	r11,0
8000c6da:	c1 d0       	breq	8000c714 <_dtoa_r+0x828>
8000c6dc:	58 08       	cp.w	r8,0
8000c6de:	e0 8a 00 17 	brle	8000c70c <_dtoa_r+0x820>
8000c6e2:	10 9a       	mov	r10,r8
8000c6e4:	50 08       	stdsp	sp[0x0],r8
8000c6e6:	08 9b       	mov	r11,r4
8000c6e8:	0e 9c       	mov	r12,r7
8000c6ea:	e0 a0 07 bb 	rcall	8000d660 <__pow5mult>
8000c6ee:	06 9a       	mov	r10,r3
8000c6f0:	18 9b       	mov	r11,r12
8000c6f2:	18 94       	mov	r4,r12
8000c6f4:	0e 9c       	mov	r12,r7
8000c6f6:	e0 a0 06 ef 	rcall	8000d4d4 <__multiply>
8000c6fa:	18 99       	mov	r9,r12
8000c6fc:	06 9b       	mov	r11,r3
8000c6fe:	50 19       	stdsp	sp[0x4],r9
8000c700:	0e 9c       	mov	r12,r7
8000c702:	e0 a0 05 9b 	rcall	8000d238 <_Bfree>
8000c706:	40 19       	lddsp	r9,sp[0x4]
8000c708:	40 08       	lddsp	r8,sp[0x0]
8000c70a:	12 93       	mov	r3,r9
8000c70c:	e4 08 01 0a 	sub	r10,r2,r8
8000c710:	c0 80       	breq	8000c720 <_dtoa_r+0x834>
8000c712:	c0 28       	rjmp	8000c716 <_dtoa_r+0x82a>
8000c714:	04 9a       	mov	r10,r2
8000c716:	06 9b       	mov	r11,r3
8000c718:	0e 9c       	mov	r12,r7
8000c71a:	e0 a0 07 a3 	rcall	8000d660 <__pow5mult>
8000c71e:	18 93       	mov	r3,r12
8000c720:	30 1b       	mov	r11,1
8000c722:	0e 9c       	mov	r12,r7
8000c724:	e0 a0 07 58 	rcall	8000d5d4 <__i2b>
8000c728:	41 1a       	lddsp	r10,sp[0x44]
8000c72a:	18 92       	mov	r2,r12
8000c72c:	58 0a       	cp.w	r10,0
8000c72e:	e0 8a 00 07 	brle	8000c73c <_dtoa_r+0x850>
8000c732:	18 9b       	mov	r11,r12
8000c734:	0e 9c       	mov	r12,r7
8000c736:	e0 a0 07 95 	rcall	8000d660 <__pow5mult>
8000c73a:	18 92       	mov	r2,r12
8000c73c:	40 c9       	lddsp	r9,sp[0x30]
8000c73e:	58 19       	cp.w	r9,1
8000c740:	e0 89 00 14 	brgt	8000c768 <_dtoa_r+0x87c>
8000c744:	40 38       	lddsp	r8,sp[0xc]
8000c746:	58 08       	cp.w	r8,0
8000c748:	c1 01       	brne	8000c768 <_dtoa_r+0x87c>
8000c74a:	40 29       	lddsp	r9,sp[0x8]
8000c74c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000c750:	c0 c1       	brne	8000c768 <_dtoa_r+0x87c>
8000c752:	12 98       	mov	r8,r9
8000c754:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000c758:	c0 80       	breq	8000c768 <_dtoa_r+0x87c>
8000c75a:	40 4c       	lddsp	r12,sp[0x10]
8000c75c:	30 1b       	mov	r11,1
8000c75e:	2f fc       	sub	r12,-1
8000c760:	2f f0       	sub	r0,-1
8000c762:	50 4c       	stdsp	sp[0x10],r12
8000c764:	50 6b       	stdsp	sp[0x18],r11
8000c766:	c0 38       	rjmp	8000c76c <_dtoa_r+0x880>
8000c768:	30 0a       	mov	r10,0
8000c76a:	50 6a       	stdsp	sp[0x18],r10
8000c76c:	41 19       	lddsp	r9,sp[0x44]
8000c76e:	58 09       	cp.w	r9,0
8000c770:	c0 31       	brne	8000c776 <_dtoa_r+0x88a>
8000c772:	30 1c       	mov	r12,1
8000c774:	c0 98       	rjmp	8000c786 <_dtoa_r+0x89a>
8000c776:	64 48       	ld.w	r8,r2[0x10]
8000c778:	2f c8       	sub	r8,-4
8000c77a:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000c77e:	e0 a0 04 cc 	rcall	8000d116 <__hi0bits>
8000c782:	f8 0c 11 20 	rsub	r12,r12,32
8000c786:	40 4b       	lddsp	r11,sp[0x10]
8000c788:	f8 0b 00 08 	add	r8,r12,r11
8000c78c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c790:	c0 c0       	breq	8000c7a8 <_dtoa_r+0x8bc>
8000c792:	f0 08 11 20 	rsub	r8,r8,32
8000c796:	58 48       	cp.w	r8,4
8000c798:	e0 8a 00 06 	brle	8000c7a4 <_dtoa_r+0x8b8>
8000c79c:	20 48       	sub	r8,4
8000c79e:	10 0b       	add	r11,r8
8000c7a0:	50 4b       	stdsp	sp[0x10],r11
8000c7a2:	c0 78       	rjmp	8000c7b0 <_dtoa_r+0x8c4>
8000c7a4:	58 48       	cp.w	r8,4
8000c7a6:	c0 70       	breq	8000c7b4 <_dtoa_r+0x8c8>
8000c7a8:	40 4a       	lddsp	r10,sp[0x10]
8000c7aa:	2e 48       	sub	r8,-28
8000c7ac:	10 0a       	add	r10,r8
8000c7ae:	50 4a       	stdsp	sp[0x10],r10
8000c7b0:	10 00       	add	r0,r8
8000c7b2:	10 05       	add	r5,r8
8000c7b4:	58 00       	cp.w	r0,0
8000c7b6:	e0 8a 00 08 	brle	8000c7c6 <_dtoa_r+0x8da>
8000c7ba:	06 9b       	mov	r11,r3
8000c7bc:	00 9a       	mov	r10,r0
8000c7be:	0e 9c       	mov	r12,r7
8000c7c0:	e0 a0 06 46 	rcall	8000d44c <__lshift>
8000c7c4:	18 93       	mov	r3,r12
8000c7c6:	40 49       	lddsp	r9,sp[0x10]
8000c7c8:	58 09       	cp.w	r9,0
8000c7ca:	e0 8a 00 08 	brle	8000c7da <_dtoa_r+0x8ee>
8000c7ce:	04 9b       	mov	r11,r2
8000c7d0:	12 9a       	mov	r10,r9
8000c7d2:	0e 9c       	mov	r12,r7
8000c7d4:	e0 a0 06 3c 	rcall	8000d44c <__lshift>
8000c7d8:	18 92       	mov	r2,r12
8000c7da:	41 48       	lddsp	r8,sp[0x50]
8000c7dc:	58 08       	cp.w	r8,0
8000c7de:	c1 b0       	breq	8000c814 <_dtoa_r+0x928>
8000c7e0:	04 9b       	mov	r11,r2
8000c7e2:	06 9c       	mov	r12,r3
8000c7e4:	e0 a0 05 10 	rcall	8000d204 <__mcmp>
8000c7e8:	c1 64       	brge	8000c814 <_dtoa_r+0x928>
8000c7ea:	06 9b       	mov	r11,r3
8000c7ec:	30 09       	mov	r9,0
8000c7ee:	30 aa       	mov	r10,10
8000c7f0:	0e 9c       	mov	r12,r7
8000c7f2:	e0 a0 06 f9 	rcall	8000d5e4 <__multadd>
8000c7f6:	20 16       	sub	r6,1
8000c7f8:	18 93       	mov	r3,r12
8000c7fa:	40 dc       	lddsp	r12,sp[0x34]
8000c7fc:	58 0c       	cp.w	r12,0
8000c7fe:	c0 31       	brne	8000c804 <_dtoa_r+0x918>
8000c800:	40 91       	lddsp	r1,sp[0x24]
8000c802:	c0 98       	rjmp	8000c814 <_dtoa_r+0x928>
8000c804:	08 9b       	mov	r11,r4
8000c806:	40 91       	lddsp	r1,sp[0x24]
8000c808:	30 09       	mov	r9,0
8000c80a:	30 aa       	mov	r10,10
8000c80c:	0e 9c       	mov	r12,r7
8000c80e:	e0 a0 06 eb 	rcall	8000d5e4 <__multadd>
8000c812:	18 94       	mov	r4,r12
8000c814:	58 01       	cp.w	r1,0
8000c816:	5f a9       	srle	r9
8000c818:	40 cb       	lddsp	r11,sp[0x30]
8000c81a:	58 2b       	cp.w	r11,2
8000c81c:	5f 98       	srgt	r8
8000c81e:	f3 e8 00 08 	and	r8,r9,r8
8000c822:	c2 50       	breq	8000c86c <_dtoa_r+0x980>
8000c824:	58 01       	cp.w	r1,0
8000c826:	c1 11       	brne	8000c848 <_dtoa_r+0x95c>
8000c828:	04 9b       	mov	r11,r2
8000c82a:	02 99       	mov	r9,r1
8000c82c:	30 5a       	mov	r10,5
8000c82e:	0e 9c       	mov	r12,r7
8000c830:	e0 a0 06 da 	rcall	8000d5e4 <__multadd>
8000c834:	18 92       	mov	r2,r12
8000c836:	18 9b       	mov	r11,r12
8000c838:	06 9c       	mov	r12,r3
8000c83a:	e0 a0 04 e5 	rcall	8000d204 <__mcmp>
8000c83e:	e0 89 00 0f 	brgt	8000c85c <_dtoa_r+0x970>
8000c842:	c0 38       	rjmp	8000c848 <_dtoa_r+0x95c>
8000c844:	30 02       	mov	r2,0
8000c846:	04 94       	mov	r4,r2
8000c848:	40 ea       	lddsp	r10,sp[0x38]
8000c84a:	30 09       	mov	r9,0
8000c84c:	5c da       	com	r10
8000c84e:	40 85       	lddsp	r5,sp[0x20]
8000c850:	50 6a       	stdsp	sp[0x18],r10
8000c852:	50 49       	stdsp	sp[0x10],r9
8000c854:	c0 f9       	rjmp	8000ca72 <_dtoa_r+0xb86>
8000c856:	08 92       	mov	r2,r4
8000c858:	40 66       	lddsp	r6,sp[0x18]
8000c85a:	04 94       	mov	r4,r2
8000c85c:	2f f6       	sub	r6,-1
8000c85e:	50 66       	stdsp	sp[0x18],r6
8000c860:	33 18       	mov	r8,49
8000c862:	40 85       	lddsp	r5,sp[0x20]
8000c864:	0a c8       	st.b	r5++,r8
8000c866:	30 08       	mov	r8,0
8000c868:	50 48       	stdsp	sp[0x10],r8
8000c86a:	c0 49       	rjmp	8000ca72 <_dtoa_r+0xb86>
8000c86c:	40 dc       	lddsp	r12,sp[0x34]
8000c86e:	58 0c       	cp.w	r12,0
8000c870:	e0 80 00 b5 	breq	8000c9da <_dtoa_r+0xaee>
8000c874:	58 05       	cp.w	r5,0
8000c876:	e0 8a 00 08 	brle	8000c886 <_dtoa_r+0x99a>
8000c87a:	08 9b       	mov	r11,r4
8000c87c:	0a 9a       	mov	r10,r5
8000c87e:	0e 9c       	mov	r12,r7
8000c880:	e0 a0 05 e6 	rcall	8000d44c <__lshift>
8000c884:	18 94       	mov	r4,r12
8000c886:	40 6b       	lddsp	r11,sp[0x18]
8000c888:	58 0b       	cp.w	r11,0
8000c88a:	c0 31       	brne	8000c890 <_dtoa_r+0x9a4>
8000c88c:	08 9c       	mov	r12,r4
8000c88e:	c1 38       	rjmp	8000c8b4 <_dtoa_r+0x9c8>
8000c890:	68 1b       	ld.w	r11,r4[0x4]
8000c892:	0e 9c       	mov	r12,r7
8000c894:	e0 a0 04 ec 	rcall	8000d26c <_Balloc>
8000c898:	68 4a       	ld.w	r10,r4[0x10]
8000c89a:	18 95       	mov	r5,r12
8000c89c:	e8 cb ff f4 	sub	r11,r4,-12
8000c8a0:	2f ea       	sub	r10,-2
8000c8a2:	2f 4c       	sub	r12,-12
8000c8a4:	a3 6a       	lsl	r10,0x2
8000c8a6:	fe b0 e6 9f 	rcall	800095e4 <memcpy>
8000c8aa:	0a 9b       	mov	r11,r5
8000c8ac:	30 1a       	mov	r10,1
8000c8ae:	0e 9c       	mov	r12,r7
8000c8b0:	e0 a0 05 ce 	rcall	8000d44c <__lshift>
8000c8b4:	50 44       	stdsp	sp[0x10],r4
8000c8b6:	40 3a       	lddsp	r10,sp[0xc]
8000c8b8:	30 19       	mov	r9,1
8000c8ba:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000c8be:	18 94       	mov	r4,r12
8000c8c0:	50 da       	stdsp	sp[0x34],r10
8000c8c2:	40 85       	lddsp	r5,sp[0x20]
8000c8c4:	50 99       	stdsp	sp[0x24],r9
8000c8c6:	50 26       	stdsp	sp[0x8],r6
8000c8c8:	50 e1       	stdsp	sp[0x38],r1
8000c8ca:	04 9b       	mov	r11,r2
8000c8cc:	06 9c       	mov	r12,r3
8000c8ce:	fe b0 fa 7f 	rcall	8000bdcc <quorem>
8000c8d2:	40 4b       	lddsp	r11,sp[0x10]
8000c8d4:	f8 c0 ff d0 	sub	r0,r12,-48
8000c8d8:	06 9c       	mov	r12,r3
8000c8da:	e0 a0 04 95 	rcall	8000d204 <__mcmp>
8000c8de:	08 9a       	mov	r10,r4
8000c8e0:	50 6c       	stdsp	sp[0x18],r12
8000c8e2:	04 9b       	mov	r11,r2
8000c8e4:	0e 9c       	mov	r12,r7
8000c8e6:	e0 a0 05 4b 	rcall	8000d37c <__mdiff>
8000c8ea:	18 91       	mov	r1,r12
8000c8ec:	78 38       	ld.w	r8,r12[0xc]
8000c8ee:	58 08       	cp.w	r8,0
8000c8f0:	c0 30       	breq	8000c8f6 <_dtoa_r+0xa0a>
8000c8f2:	30 16       	mov	r6,1
8000c8f4:	c0 68       	rjmp	8000c900 <_dtoa_r+0xa14>
8000c8f6:	18 9b       	mov	r11,r12
8000c8f8:	06 9c       	mov	r12,r3
8000c8fa:	e0 a0 04 85 	rcall	8000d204 <__mcmp>
8000c8fe:	18 96       	mov	r6,r12
8000c900:	0e 9c       	mov	r12,r7
8000c902:	02 9b       	mov	r11,r1
8000c904:	e0 a0 04 9a 	rcall	8000d238 <_Bfree>
8000c908:	40 cc       	lddsp	r12,sp[0x30]
8000c90a:	ed ec 10 08 	or	r8,r6,r12
8000c90e:	c0 d1       	brne	8000c928 <_dtoa_r+0xa3c>
8000c910:	40 db       	lddsp	r11,sp[0x34]
8000c912:	58 0b       	cp.w	r11,0
8000c914:	c0 a1       	brne	8000c928 <_dtoa_r+0xa3c>
8000c916:	40 26       	lddsp	r6,sp[0x8]
8000c918:	e0 40 00 39 	cp.w	r0,57
8000c91c:	c3 00       	breq	8000c97c <_dtoa_r+0xa90>
8000c91e:	40 6a       	lddsp	r10,sp[0x18]
8000c920:	58 0a       	cp.w	r10,0
8000c922:	e0 89 00 24 	brgt	8000c96a <_dtoa_r+0xa7e>
8000c926:	c2 f8       	rjmp	8000c984 <_dtoa_r+0xa98>
8000c928:	40 69       	lddsp	r9,sp[0x18]
8000c92a:	58 09       	cp.w	r9,0
8000c92c:	c0 85       	brlt	8000c93c <_dtoa_r+0xa50>
8000c92e:	12 98       	mov	r8,r9
8000c930:	40 cc       	lddsp	r12,sp[0x30]
8000c932:	18 48       	or	r8,r12
8000c934:	c1 d1       	brne	8000c96e <_dtoa_r+0xa82>
8000c936:	40 db       	lddsp	r11,sp[0x34]
8000c938:	58 0b       	cp.w	r11,0
8000c93a:	c1 a1       	brne	8000c96e <_dtoa_r+0xa82>
8000c93c:	0c 99       	mov	r9,r6
8000c93e:	40 26       	lddsp	r6,sp[0x8]
8000c940:	58 09       	cp.w	r9,0
8000c942:	e0 8a 00 21 	brle	8000c984 <_dtoa_r+0xa98>
8000c946:	06 9b       	mov	r11,r3
8000c948:	30 1a       	mov	r10,1
8000c94a:	0e 9c       	mov	r12,r7
8000c94c:	e0 a0 05 80 	rcall	8000d44c <__lshift>
8000c950:	04 9b       	mov	r11,r2
8000c952:	18 93       	mov	r3,r12
8000c954:	e0 a0 04 58 	rcall	8000d204 <__mcmp>
8000c958:	e0 89 00 06 	brgt	8000c964 <_dtoa_r+0xa78>
8000c95c:	c1 41       	brne	8000c984 <_dtoa_r+0xa98>
8000c95e:	ed b0 00 00 	bld	r0,0x0
8000c962:	c1 11       	brne	8000c984 <_dtoa_r+0xa98>
8000c964:	e0 40 00 39 	cp.w	r0,57
8000c968:	c0 a0       	breq	8000c97c <_dtoa_r+0xa90>
8000c96a:	2f f0       	sub	r0,-1
8000c96c:	c0 c8       	rjmp	8000c984 <_dtoa_r+0xa98>
8000c96e:	58 06       	cp.w	r6,0
8000c970:	e0 8a 00 0c 	brle	8000c988 <_dtoa_r+0xa9c>
8000c974:	40 26       	lddsp	r6,sp[0x8]
8000c976:	e0 40 00 39 	cp.w	r0,57
8000c97a:	c0 41       	brne	8000c982 <_dtoa_r+0xa96>
8000c97c:	33 98       	mov	r8,57
8000c97e:	0a c8       	st.b	r5++,r8
8000c980:	c6 78       	rjmp	8000ca4e <_dtoa_r+0xb62>
8000c982:	2f f0       	sub	r0,-1
8000c984:	0a c0       	st.b	r5++,r0
8000c986:	c7 58       	rjmp	8000ca70 <_dtoa_r+0xb84>
8000c988:	0a c0       	st.b	r5++,r0
8000c98a:	40 9a       	lddsp	r10,sp[0x24]
8000c98c:	40 e9       	lddsp	r9,sp[0x38]
8000c98e:	12 3a       	cp.w	r10,r9
8000c990:	c4 30       	breq	8000ca16 <_dtoa_r+0xb2a>
8000c992:	06 9b       	mov	r11,r3
8000c994:	30 09       	mov	r9,0
8000c996:	30 aa       	mov	r10,10
8000c998:	0e 9c       	mov	r12,r7
8000c99a:	e0 a0 06 25 	rcall	8000d5e4 <__multadd>
8000c99e:	40 48       	lddsp	r8,sp[0x10]
8000c9a0:	18 93       	mov	r3,r12
8000c9a2:	08 38       	cp.w	r8,r4
8000c9a4:	c0 91       	brne	8000c9b6 <_dtoa_r+0xaca>
8000c9a6:	10 9b       	mov	r11,r8
8000c9a8:	30 09       	mov	r9,0
8000c9aa:	30 aa       	mov	r10,10
8000c9ac:	0e 9c       	mov	r12,r7
8000c9ae:	e0 a0 06 1b 	rcall	8000d5e4 <__multadd>
8000c9b2:	50 4c       	stdsp	sp[0x10],r12
8000c9b4:	c0 e8       	rjmp	8000c9d0 <_dtoa_r+0xae4>
8000c9b6:	40 4b       	lddsp	r11,sp[0x10]
8000c9b8:	30 09       	mov	r9,0
8000c9ba:	30 aa       	mov	r10,10
8000c9bc:	0e 9c       	mov	r12,r7
8000c9be:	e0 a0 06 13 	rcall	8000d5e4 <__multadd>
8000c9c2:	08 9b       	mov	r11,r4
8000c9c4:	50 4c       	stdsp	sp[0x10],r12
8000c9c6:	30 09       	mov	r9,0
8000c9c8:	30 aa       	mov	r10,10
8000c9ca:	0e 9c       	mov	r12,r7
8000c9cc:	e0 a0 06 0c 	rcall	8000d5e4 <__multadd>
8000c9d0:	18 94       	mov	r4,r12
8000c9d2:	40 9c       	lddsp	r12,sp[0x24]
8000c9d4:	2f fc       	sub	r12,-1
8000c9d6:	50 9c       	stdsp	sp[0x24],r12
8000c9d8:	c7 9b       	rjmp	8000c8ca <_dtoa_r+0x9de>
8000c9da:	30 18       	mov	r8,1
8000c9dc:	06 90       	mov	r0,r3
8000c9de:	40 85       	lddsp	r5,sp[0x20]
8000c9e0:	08 93       	mov	r3,r4
8000c9e2:	0c 94       	mov	r4,r6
8000c9e4:	10 96       	mov	r6,r8
8000c9e6:	04 9b       	mov	r11,r2
8000c9e8:	00 9c       	mov	r12,r0
8000c9ea:	fe b0 f9 f1 	rcall	8000bdcc <quorem>
8000c9ee:	2d 0c       	sub	r12,-48
8000c9f0:	0a cc       	st.b	r5++,r12
8000c9f2:	02 36       	cp.w	r6,r1
8000c9f4:	c0 a4       	brge	8000ca08 <_dtoa_r+0xb1c>
8000c9f6:	00 9b       	mov	r11,r0
8000c9f8:	30 09       	mov	r9,0
8000c9fa:	30 aa       	mov	r10,10
8000c9fc:	0e 9c       	mov	r12,r7
8000c9fe:	2f f6       	sub	r6,-1
8000ca00:	e0 a0 05 f2 	rcall	8000d5e4 <__multadd>
8000ca04:	18 90       	mov	r0,r12
8000ca06:	cf 0b       	rjmp	8000c9e6 <_dtoa_r+0xafa>
8000ca08:	08 96       	mov	r6,r4
8000ca0a:	30 0b       	mov	r11,0
8000ca0c:	06 94       	mov	r4,r3
8000ca0e:	50 4b       	stdsp	sp[0x10],r11
8000ca10:	00 93       	mov	r3,r0
8000ca12:	18 90       	mov	r0,r12
8000ca14:	c0 28       	rjmp	8000ca18 <_dtoa_r+0xb2c>
8000ca16:	40 26       	lddsp	r6,sp[0x8]
8000ca18:	06 9b       	mov	r11,r3
8000ca1a:	30 1a       	mov	r10,1
8000ca1c:	0e 9c       	mov	r12,r7
8000ca1e:	e0 a0 05 17 	rcall	8000d44c <__lshift>
8000ca22:	04 9b       	mov	r11,r2
8000ca24:	18 93       	mov	r3,r12
8000ca26:	e0 a0 03 ef 	rcall	8000d204 <__mcmp>
8000ca2a:	e0 89 00 12 	brgt	8000ca4e <_dtoa_r+0xb62>
8000ca2e:	c1 b1       	brne	8000ca64 <_dtoa_r+0xb78>
8000ca30:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000ca34:	c0 d1       	brne	8000ca4e <_dtoa_r+0xb62>
8000ca36:	c1 78       	rjmp	8000ca64 <_dtoa_r+0xb78>
8000ca38:	40 89       	lddsp	r9,sp[0x20]
8000ca3a:	12 38       	cp.w	r8,r9
8000ca3c:	c0 30       	breq	8000ca42 <_dtoa_r+0xb56>
8000ca3e:	10 95       	mov	r5,r8
8000ca40:	c0 88       	rjmp	8000ca50 <_dtoa_r+0xb64>
8000ca42:	2f f6       	sub	r6,-1
8000ca44:	50 66       	stdsp	sp[0x18],r6
8000ca46:	33 18       	mov	r8,49
8000ca48:	40 8c       	lddsp	r12,sp[0x20]
8000ca4a:	b8 88       	st.b	r12[0x0],r8
8000ca4c:	c1 38       	rjmp	8000ca72 <_dtoa_r+0xb86>
8000ca4e:	33 9a       	mov	r10,57
8000ca50:	0a 98       	mov	r8,r5
8000ca52:	11 79       	ld.ub	r9,--r8
8000ca54:	f4 09 18 00 	cp.b	r9,r10
8000ca58:	cf 00       	breq	8000ca38 <_dtoa_r+0xb4c>
8000ca5a:	2f f9       	sub	r9,-1
8000ca5c:	b0 89       	st.b	r8[0x0],r9
8000ca5e:	c0 98       	rjmp	8000ca70 <_dtoa_r+0xb84>
8000ca60:	10 95       	mov	r5,r8
8000ca62:	c0 28       	rjmp	8000ca66 <_dtoa_r+0xb7a>
8000ca64:	33 09       	mov	r9,48
8000ca66:	0a 98       	mov	r8,r5
8000ca68:	11 7a       	ld.ub	r10,--r8
8000ca6a:	f2 0a 18 00 	cp.b	r10,r9
8000ca6e:	cf 90       	breq	8000ca60 <_dtoa_r+0xb74>
8000ca70:	50 66       	stdsp	sp[0x18],r6
8000ca72:	04 9b       	mov	r11,r2
8000ca74:	0e 9c       	mov	r12,r7
8000ca76:	e0 a0 03 e1 	rcall	8000d238 <_Bfree>
8000ca7a:	58 04       	cp.w	r4,0
8000ca7c:	c1 20       	breq	8000caa0 <_dtoa_r+0xbb4>
8000ca7e:	40 4b       	lddsp	r11,sp[0x10]
8000ca80:	08 3b       	cp.w	r11,r4
8000ca82:	5f 19       	srne	r9
8000ca84:	58 0b       	cp.w	r11,0
8000ca86:	5f 18       	srne	r8
8000ca88:	f3 e8 00 08 	and	r8,r9,r8
8000ca8c:	c0 40       	breq	8000ca94 <_dtoa_r+0xba8>
8000ca8e:	0e 9c       	mov	r12,r7
8000ca90:	e0 a0 03 d4 	rcall	8000d238 <_Bfree>
8000ca94:	08 9b       	mov	r11,r4
8000ca96:	0e 9c       	mov	r12,r7
8000ca98:	e0 a0 03 d0 	rcall	8000d238 <_Bfree>
8000ca9c:	c0 28       	rjmp	8000caa0 <_dtoa_r+0xbb4>
8000ca9e:	50 66       	stdsp	sp[0x18],r6
8000caa0:	0e 9c       	mov	r12,r7
8000caa2:	06 9b       	mov	r11,r3
8000caa4:	e0 a0 03 ca 	rcall	8000d238 <_Bfree>
8000caa8:	30 08       	mov	r8,0
8000caaa:	aa 88       	st.b	r5[0x0],r8
8000caac:	40 68       	lddsp	r8,sp[0x18]
8000caae:	41 5a       	lddsp	r10,sp[0x54]
8000cab0:	2f f8       	sub	r8,-1
8000cab2:	41 29       	lddsp	r9,sp[0x48]
8000cab4:	95 08       	st.w	r10[0x0],r8
8000cab6:	40 8c       	lddsp	r12,sp[0x20]
8000cab8:	58 09       	cp.w	r9,0
8000caba:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000cabe:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000cac2:	2e 6d       	sub	sp,-104
8000cac4:	d8 32       	popm	r0-r7,pc
8000cac6:	d7 03       	nop

8000cac8 <_fflush_r>:
8000cac8:	d4 21       	pushm	r4-r7,lr
8000caca:	16 97       	mov	r7,r11
8000cacc:	18 96       	mov	r6,r12
8000cace:	76 48       	ld.w	r8,r11[0x10]
8000cad0:	58 08       	cp.w	r8,0
8000cad2:	c7 f0       	breq	8000cbd0 <_fflush_r+0x108>
8000cad4:	58 0c       	cp.w	r12,0
8000cad6:	c0 50       	breq	8000cae0 <_fflush_r+0x18>
8000cad8:	78 68       	ld.w	r8,r12[0x18]
8000cada:	58 08       	cp.w	r8,0
8000cadc:	c0 21       	brne	8000cae0 <_fflush_r+0x18>
8000cade:	cc dc       	rcall	8000cc78 <__sinit>
8000cae0:	fe c8 d6 b8 	sub	r8,pc,-10568
8000cae4:	10 37       	cp.w	r7,r8
8000cae6:	c0 31       	brne	8000caec <_fflush_r+0x24>
8000cae8:	6c 07       	ld.w	r7,r6[0x0]
8000caea:	c0 c8       	rjmp	8000cb02 <_fflush_r+0x3a>
8000caec:	fe c8 d6 a4 	sub	r8,pc,-10588
8000caf0:	10 37       	cp.w	r7,r8
8000caf2:	c0 31       	brne	8000caf8 <_fflush_r+0x30>
8000caf4:	6c 17       	ld.w	r7,r6[0x4]
8000caf6:	c0 68       	rjmp	8000cb02 <_fflush_r+0x3a>
8000caf8:	fe c8 d6 90 	sub	r8,pc,-10608
8000cafc:	10 37       	cp.w	r7,r8
8000cafe:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000cb02:	8e 6a       	ld.sh	r10,r7[0xc]
8000cb04:	14 98       	mov	r8,r10
8000cb06:	ed ba 00 03 	bld	r10,0x3
8000cb0a:	c4 20       	breq	8000cb8e <_fflush_r+0xc6>
8000cb0c:	ab ba       	sbr	r10,0xb
8000cb0e:	ae 6a       	st.h	r7[0xc],r10
8000cb10:	6e 18       	ld.w	r8,r7[0x4]
8000cb12:	58 08       	cp.w	r8,0
8000cb14:	e0 89 00 06 	brgt	8000cb20 <_fflush_r+0x58>
8000cb18:	6f 08       	ld.w	r8,r7[0x40]
8000cb1a:	58 08       	cp.w	r8,0
8000cb1c:	e0 8a 00 5a 	brle	8000cbd0 <_fflush_r+0x108>
8000cb20:	6e b8       	ld.w	r8,r7[0x2c]
8000cb22:	58 08       	cp.w	r8,0
8000cb24:	c5 60       	breq	8000cbd0 <_fflush_r+0x108>
8000cb26:	e2 1a 10 00 	andl	r10,0x1000,COH
8000cb2a:	c0 30       	breq	8000cb30 <_fflush_r+0x68>
8000cb2c:	6f 55       	ld.w	r5,r7[0x54]
8000cb2e:	c0 f8       	rjmp	8000cb4c <_fflush_r+0x84>
8000cb30:	30 19       	mov	r9,1
8000cb32:	6e 8b       	ld.w	r11,r7[0x20]
8000cb34:	0c 9c       	mov	r12,r6
8000cb36:	5d 18       	icall	r8
8000cb38:	18 95       	mov	r5,r12
8000cb3a:	5b fc       	cp.w	r12,-1
8000cb3c:	c0 81       	brne	8000cb4c <_fflush_r+0x84>
8000cb3e:	6c 38       	ld.w	r8,r6[0xc]
8000cb40:	59 d8       	cp.w	r8,29
8000cb42:	c4 70       	breq	8000cbd0 <_fflush_r+0x108>
8000cb44:	8e 68       	ld.sh	r8,r7[0xc]
8000cb46:	a7 a8       	sbr	r8,0x6
8000cb48:	ae 68       	st.h	r7[0xc],r8
8000cb4a:	d8 22       	popm	r4-r7,pc
8000cb4c:	8e 68       	ld.sh	r8,r7[0xc]
8000cb4e:	ed b8 00 02 	bld	r8,0x2
8000cb52:	c0 91       	brne	8000cb64 <_fflush_r+0x9c>
8000cb54:	6e 18       	ld.w	r8,r7[0x4]
8000cb56:	10 15       	sub	r5,r8
8000cb58:	6e d8       	ld.w	r8,r7[0x34]
8000cb5a:	58 08       	cp.w	r8,0
8000cb5c:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000cb60:	eb d8 e1 15 	subne	r5,r5,r8
8000cb64:	6e b8       	ld.w	r8,r7[0x2c]
8000cb66:	0c 9c       	mov	r12,r6
8000cb68:	30 09       	mov	r9,0
8000cb6a:	0a 9a       	mov	r10,r5
8000cb6c:	6e 8b       	ld.w	r11,r7[0x20]
8000cb6e:	5d 18       	icall	r8
8000cb70:	8e 68       	ld.sh	r8,r7[0xc]
8000cb72:	0a 3c       	cp.w	r12,r5
8000cb74:	c2 61       	brne	8000cbc0 <_fflush_r+0xf8>
8000cb76:	ab d8       	cbr	r8,0xb
8000cb78:	30 0c       	mov	r12,0
8000cb7a:	6e 49       	ld.w	r9,r7[0x10]
8000cb7c:	ae 68       	st.h	r7[0xc],r8
8000cb7e:	8f 1c       	st.w	r7[0x4],r12
8000cb80:	8f 09       	st.w	r7[0x0],r9
8000cb82:	ed b8 00 0c 	bld	r8,0xc
8000cb86:	c2 51       	brne	8000cbd0 <_fflush_r+0x108>
8000cb88:	ef 45 00 54 	st.w	r7[84],r5
8000cb8c:	d8 22       	popm	r4-r7,pc
8000cb8e:	6e 45       	ld.w	r5,r7[0x10]
8000cb90:	58 05       	cp.w	r5,0
8000cb92:	c1 f0       	breq	8000cbd0 <_fflush_r+0x108>
8000cb94:	6e 04       	ld.w	r4,r7[0x0]
8000cb96:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000cb9a:	8f 05       	st.w	r7[0x0],r5
8000cb9c:	f9 b8 01 00 	movne	r8,0
8000cba0:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000cba4:	0a 14       	sub	r4,r5
8000cba6:	8f 28       	st.w	r7[0x8],r8
8000cba8:	c1 18       	rjmp	8000cbca <_fflush_r+0x102>
8000cbaa:	08 99       	mov	r9,r4
8000cbac:	0a 9a       	mov	r10,r5
8000cbae:	6e a8       	ld.w	r8,r7[0x28]
8000cbb0:	6e 8b       	ld.w	r11,r7[0x20]
8000cbb2:	0c 9c       	mov	r12,r6
8000cbb4:	5d 18       	icall	r8
8000cbb6:	18 14       	sub	r4,r12
8000cbb8:	58 0c       	cp.w	r12,0
8000cbba:	e0 89 00 07 	brgt	8000cbc8 <_fflush_r+0x100>
8000cbbe:	8e 68       	ld.sh	r8,r7[0xc]
8000cbc0:	a7 a8       	sbr	r8,0x6
8000cbc2:	3f fc       	mov	r12,-1
8000cbc4:	ae 68       	st.h	r7[0xc],r8
8000cbc6:	d8 22       	popm	r4-r7,pc
8000cbc8:	18 05       	add	r5,r12
8000cbca:	58 04       	cp.w	r4,0
8000cbcc:	fe 99 ff ef 	brgt	8000cbaa <_fflush_r+0xe2>
8000cbd0:	d8 2a       	popm	r4-r7,pc,r12=0
8000cbd2:	d7 03       	nop

8000cbd4 <__sfp_lock_acquire>:
8000cbd4:	5e fc       	retal	r12

8000cbd6 <__sfp_lock_release>:
8000cbd6:	5e fc       	retal	r12

8000cbd8 <_cleanup_r>:
8000cbd8:	d4 01       	pushm	lr
8000cbda:	fe cb f0 06 	sub	r11,pc,-4090
8000cbde:	ce 5d       	rcall	8000cfa8 <_fwalk>
8000cbe0:	d8 02       	popm	pc
8000cbe2:	d7 03       	nop

8000cbe4 <__sfmoreglue>:
8000cbe4:	d4 21       	pushm	r4-r7,lr
8000cbe6:	16 95       	mov	r5,r11
8000cbe8:	f6 06 10 5c 	mul	r6,r11,92
8000cbec:	ec cb ff f4 	sub	r11,r6,-12
8000cbf0:	fe b0 e2 e6 	rcall	800091bc <_malloc_r>
8000cbf4:	18 97       	mov	r7,r12
8000cbf6:	c0 90       	breq	8000cc08 <__sfmoreglue+0x24>
8000cbf8:	99 15       	st.w	r12[0x4],r5
8000cbfa:	30 0b       	mov	r11,0
8000cbfc:	2f 4c       	sub	r12,-12
8000cbfe:	0c 9a       	mov	r10,r6
8000cc00:	8f 2c       	st.w	r7[0x8],r12
8000cc02:	8f 0b       	st.w	r7[0x0],r11
8000cc04:	e0 a0 02 82 	rcall	8000d108 <memset>
8000cc08:	0e 9c       	mov	r12,r7
8000cc0a:	d8 22       	popm	r4-r7,pc

8000cc0c <__sfp>:
8000cc0c:	d4 21       	pushm	r4-r7,lr
8000cc0e:	fe c8 db ce 	sub	r8,pc,-9266
8000cc12:	18 96       	mov	r6,r12
8000cc14:	70 07       	ld.w	r7,r8[0x0]
8000cc16:	6e 68       	ld.w	r8,r7[0x18]
8000cc18:	58 08       	cp.w	r8,0
8000cc1a:	c0 31       	brne	8000cc20 <__sfp+0x14>
8000cc1c:	0e 9c       	mov	r12,r7
8000cc1e:	c2 dc       	rcall	8000cc78 <__sinit>
8000cc20:	ee c7 ff 28 	sub	r7,r7,-216
8000cc24:	30 05       	mov	r5,0
8000cc26:	6e 2c       	ld.w	r12,r7[0x8]
8000cc28:	6e 18       	ld.w	r8,r7[0x4]
8000cc2a:	c0 68       	rjmp	8000cc36 <__sfp+0x2a>
8000cc2c:	98 69       	ld.sh	r9,r12[0xc]
8000cc2e:	ea 09 19 00 	cp.h	r9,r5
8000cc32:	c1 10       	breq	8000cc54 <__sfp+0x48>
8000cc34:	2a 4c       	sub	r12,-92
8000cc36:	20 18       	sub	r8,1
8000cc38:	cf a7       	brpl	8000cc2c <__sfp+0x20>
8000cc3a:	6e 08       	ld.w	r8,r7[0x0]
8000cc3c:	58 08       	cp.w	r8,0
8000cc3e:	c0 61       	brne	8000cc4a <__sfp+0x3e>
8000cc40:	30 4b       	mov	r11,4
8000cc42:	0c 9c       	mov	r12,r6
8000cc44:	cd 0f       	rcall	8000cbe4 <__sfmoreglue>
8000cc46:	8f 0c       	st.w	r7[0x0],r12
8000cc48:	c0 30       	breq	8000cc4e <__sfp+0x42>
8000cc4a:	6e 07       	ld.w	r7,r7[0x0]
8000cc4c:	ce db       	rjmp	8000cc26 <__sfp+0x1a>
8000cc4e:	30 c8       	mov	r8,12
8000cc50:	8d 38       	st.w	r6[0xc],r8
8000cc52:	d8 22       	popm	r4-r7,pc
8000cc54:	30 08       	mov	r8,0
8000cc56:	f9 48 00 4c 	st.w	r12[76],r8
8000cc5a:	99 08       	st.w	r12[0x0],r8
8000cc5c:	99 28       	st.w	r12[0x8],r8
8000cc5e:	99 18       	st.w	r12[0x4],r8
8000cc60:	99 48       	st.w	r12[0x10],r8
8000cc62:	99 58       	st.w	r12[0x14],r8
8000cc64:	99 68       	st.w	r12[0x18],r8
8000cc66:	99 d8       	st.w	r12[0x34],r8
8000cc68:	99 e8       	st.w	r12[0x38],r8
8000cc6a:	f9 48 00 48 	st.w	r12[72],r8
8000cc6e:	3f f8       	mov	r8,-1
8000cc70:	b8 78       	st.h	r12[0xe],r8
8000cc72:	30 18       	mov	r8,1
8000cc74:	b8 68       	st.h	r12[0xc],r8
8000cc76:	d8 22       	popm	r4-r7,pc

8000cc78 <__sinit>:
8000cc78:	d4 21       	pushm	r4-r7,lr
8000cc7a:	18 96       	mov	r6,r12
8000cc7c:	78 67       	ld.w	r7,r12[0x18]
8000cc7e:	58 07       	cp.w	r7,0
8000cc80:	c4 91       	brne	8000cd12 <__sinit+0x9a>
8000cc82:	fe c8 00 aa 	sub	r8,pc,170
8000cc86:	30 15       	mov	r5,1
8000cc88:	99 a8       	st.w	r12[0x28],r8
8000cc8a:	f9 47 00 d8 	st.w	r12[216],r7
8000cc8e:	f9 47 00 dc 	st.w	r12[220],r7
8000cc92:	f9 47 00 e0 	st.w	r12[224],r7
8000cc96:	99 65       	st.w	r12[0x18],r5
8000cc98:	cb af       	rcall	8000cc0c <__sfp>
8000cc9a:	8d 0c       	st.w	r6[0x0],r12
8000cc9c:	0c 9c       	mov	r12,r6
8000cc9e:	cb 7f       	rcall	8000cc0c <__sfp>
8000cca0:	8d 1c       	st.w	r6[0x4],r12
8000cca2:	0c 9c       	mov	r12,r6
8000cca4:	cb 4f       	rcall	8000cc0c <__sfp>
8000cca6:	6c 09       	ld.w	r9,r6[0x0]
8000cca8:	30 48       	mov	r8,4
8000ccaa:	93 07       	st.w	r9[0x0],r7
8000ccac:	b2 68       	st.h	r9[0xc],r8
8000ccae:	93 17       	st.w	r9[0x4],r7
8000ccb0:	93 27       	st.w	r9[0x8],r7
8000ccb2:	6c 18       	ld.w	r8,r6[0x4]
8000ccb4:	b2 77       	st.h	r9[0xe],r7
8000ccb6:	93 47       	st.w	r9[0x10],r7
8000ccb8:	93 57       	st.w	r9[0x14],r7
8000ccba:	93 67       	st.w	r9[0x18],r7
8000ccbc:	93 89       	st.w	r9[0x20],r9
8000ccbe:	91 07       	st.w	r8[0x0],r7
8000ccc0:	91 17       	st.w	r8[0x4],r7
8000ccc2:	91 27       	st.w	r8[0x8],r7
8000ccc4:	fe ce f2 7c 	sub	lr,pc,-3460
8000ccc8:	fe cb f2 ac 	sub	r11,pc,-3412
8000cccc:	93 9e       	st.w	r9[0x24],lr
8000ccce:	93 ab       	st.w	r9[0x28],r11
8000ccd0:	fe ca f2 d4 	sub	r10,pc,-3372
8000ccd4:	fe c4 f2 e0 	sub	r4,pc,-3360
8000ccd8:	93 ba       	st.w	r9[0x2c],r10
8000ccda:	93 c4       	st.w	r9[0x30],r4
8000ccdc:	30 99       	mov	r9,9
8000ccde:	b0 69       	st.h	r8[0xc],r9
8000cce0:	b0 75       	st.h	r8[0xe],r5
8000cce2:	91 c4       	st.w	r8[0x30],r4
8000cce4:	91 47       	st.w	r8[0x10],r7
8000cce6:	91 57       	st.w	r8[0x14],r7
8000cce8:	91 67       	st.w	r8[0x18],r7
8000ccea:	91 88       	st.w	r8[0x20],r8
8000ccec:	91 9e       	st.w	r8[0x24],lr
8000ccee:	91 ab       	st.w	r8[0x28],r11
8000ccf0:	91 ba       	st.w	r8[0x2c],r10
8000ccf2:	8d 2c       	st.w	r6[0x8],r12
8000ccf4:	31 28       	mov	r8,18
8000ccf6:	99 07       	st.w	r12[0x0],r7
8000ccf8:	b8 68       	st.h	r12[0xc],r8
8000ccfa:	99 17       	st.w	r12[0x4],r7
8000ccfc:	99 27       	st.w	r12[0x8],r7
8000ccfe:	30 28       	mov	r8,2
8000cd00:	b8 78       	st.h	r12[0xe],r8
8000cd02:	99 c4       	st.w	r12[0x30],r4
8000cd04:	99 67       	st.w	r12[0x18],r7
8000cd06:	99 9e       	st.w	r12[0x24],lr
8000cd08:	99 ab       	st.w	r12[0x28],r11
8000cd0a:	99 ba       	st.w	r12[0x2c],r10
8000cd0c:	99 47       	st.w	r12[0x10],r7
8000cd0e:	99 57       	st.w	r12[0x14],r7
8000cd10:	99 8c       	st.w	r12[0x20],r12
8000cd12:	d8 22       	popm	r4-r7,pc

8000cd14 <__sfvwrite_r>:
8000cd14:	d4 31       	pushm	r0-r7,lr
8000cd16:	20 3d       	sub	sp,12
8000cd18:	14 94       	mov	r4,r10
8000cd1a:	18 95       	mov	r5,r12
8000cd1c:	16 97       	mov	r7,r11
8000cd1e:	74 28       	ld.w	r8,r10[0x8]
8000cd20:	58 08       	cp.w	r8,0
8000cd22:	e0 80 01 40 	breq	8000cfa2 <__sfvwrite_r+0x28e>
8000cd26:	96 68       	ld.sh	r8,r11[0xc]
8000cd28:	ed b8 00 03 	bld	r8,0x3
8000cd2c:	c0 41       	brne	8000cd34 <__sfvwrite_r+0x20>
8000cd2e:	76 48       	ld.w	r8,r11[0x10]
8000cd30:	58 08       	cp.w	r8,0
8000cd32:	c0 c1       	brne	8000cd4a <__sfvwrite_r+0x36>
8000cd34:	0e 9b       	mov	r11,r7
8000cd36:	0a 9c       	mov	r12,r5
8000cd38:	fe b0 f7 dc 	rcall	8000bcf0 <__swsetup_r>
8000cd3c:	c0 70       	breq	8000cd4a <__sfvwrite_r+0x36>
8000cd3e:	8e 68       	ld.sh	r8,r7[0xc]
8000cd40:	a7 a8       	sbr	r8,0x6
8000cd42:	ae 68       	st.h	r7[0xc],r8
8000cd44:	30 98       	mov	r8,9
8000cd46:	8b 38       	st.w	r5[0xc],r8
8000cd48:	c2 b9       	rjmp	8000cf9e <__sfvwrite_r+0x28a>
8000cd4a:	8e 63       	ld.sh	r3,r7[0xc]
8000cd4c:	68 00       	ld.w	r0,r4[0x0]
8000cd4e:	06 96       	mov	r6,r3
8000cd50:	e2 16 00 02 	andl	r6,0x2,COH
8000cd54:	c2 10       	breq	8000cd96 <__sfvwrite_r+0x82>
8000cd56:	30 03       	mov	r3,0
8000cd58:	e0 62 04 00 	mov	r2,1024
8000cd5c:	06 96       	mov	r6,r3
8000cd5e:	c0 48       	rjmp	8000cd66 <__sfvwrite_r+0x52>
8000cd60:	60 03       	ld.w	r3,r0[0x0]
8000cd62:	60 16       	ld.w	r6,r0[0x4]
8000cd64:	2f 80       	sub	r0,-8
8000cd66:	58 06       	cp.w	r6,0
8000cd68:	cf c0       	breq	8000cd60 <__sfvwrite_r+0x4c>
8000cd6a:	e0 46 04 00 	cp.w	r6,1024
8000cd6e:	ec 09 17 80 	movls	r9,r6
8000cd72:	e4 09 17 b0 	movhi	r9,r2
8000cd76:	06 9a       	mov	r10,r3
8000cd78:	6e a8       	ld.w	r8,r7[0x28]
8000cd7a:	6e 8b       	ld.w	r11,r7[0x20]
8000cd7c:	0a 9c       	mov	r12,r5
8000cd7e:	5d 18       	icall	r8
8000cd80:	18 16       	sub	r6,r12
8000cd82:	58 0c       	cp.w	r12,0
8000cd84:	e0 8a 01 0a 	brle	8000cf98 <__sfvwrite_r+0x284>
8000cd88:	68 28       	ld.w	r8,r4[0x8]
8000cd8a:	18 18       	sub	r8,r12
8000cd8c:	89 28       	st.w	r4[0x8],r8
8000cd8e:	e0 80 01 0a 	breq	8000cfa2 <__sfvwrite_r+0x28e>
8000cd92:	18 03       	add	r3,r12
8000cd94:	ce 9b       	rjmp	8000cd66 <__sfvwrite_r+0x52>
8000cd96:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000cd9a:	c0 70       	breq	8000cda8 <__sfvwrite_r+0x94>
8000cd9c:	50 06       	stdsp	sp[0x0],r6
8000cd9e:	0c 93       	mov	r3,r6
8000cda0:	0c 91       	mov	r1,r6
8000cda2:	50 15       	stdsp	sp[0x4],r5
8000cda4:	08 92       	mov	r2,r4
8000cda6:	c9 c8       	rjmp	8000cede <__sfvwrite_r+0x1ca>
8000cda8:	06 96       	mov	r6,r3
8000cdaa:	08 91       	mov	r1,r4
8000cdac:	c0 48       	rjmp	8000cdb4 <__sfvwrite_r+0xa0>
8000cdae:	60 03       	ld.w	r3,r0[0x0]
8000cdb0:	60 16       	ld.w	r6,r0[0x4]
8000cdb2:	2f 80       	sub	r0,-8
8000cdb4:	58 06       	cp.w	r6,0
8000cdb6:	cf c0       	breq	8000cdae <__sfvwrite_r+0x9a>
8000cdb8:	8e 68       	ld.sh	r8,r7[0xc]
8000cdba:	6e 24       	ld.w	r4,r7[0x8]
8000cdbc:	10 99       	mov	r9,r8
8000cdbe:	e2 19 02 00 	andl	r9,0x200,COH
8000cdc2:	c5 60       	breq	8000ce6e <__sfvwrite_r+0x15a>
8000cdc4:	08 36       	cp.w	r6,r4
8000cdc6:	c4 53       	brcs	8000ce50 <__sfvwrite_r+0x13c>
8000cdc8:	10 99       	mov	r9,r8
8000cdca:	e2 19 04 80 	andl	r9,0x480,COH
8000cdce:	c4 10       	breq	8000ce50 <__sfvwrite_r+0x13c>
8000cdd0:	6e 4b       	ld.w	r11,r7[0x10]
8000cdd2:	6e 09       	ld.w	r9,r7[0x0]
8000cdd4:	16 19       	sub	r9,r11
8000cdd6:	50 09       	stdsp	sp[0x0],r9
8000cdd8:	6e 59       	ld.w	r9,r7[0x14]
8000cdda:	10 9c       	mov	r12,r8
8000cddc:	f2 09 00 1a 	add	r10,r9,r9<<0x1
8000cde0:	30 28       	mov	r8,2
8000cde2:	f4 08 0c 08 	divs	r8,r10,r8
8000cde6:	fa e9 00 04 	st.d	sp[4],r8
8000cdea:	10 94       	mov	r4,r8
8000cdec:	40 09       	lddsp	r9,sp[0x0]
8000cdee:	e2 1c 04 00 	andl	r12,0x400,COH
8000cdf2:	2f f9       	sub	r9,-1
8000cdf4:	0c 09       	add	r9,r6
8000cdf6:	12 38       	cp.w	r8,r9
8000cdf8:	f2 04 17 30 	movlo	r4,r9
8000cdfc:	58 0c       	cp.w	r12,0
8000cdfe:	c1 10       	breq	8000ce20 <__sfvwrite_r+0x10c>
8000ce00:	08 9b       	mov	r11,r4
8000ce02:	0a 9c       	mov	r12,r5
8000ce04:	fe b0 e1 dc 	rcall	800091bc <_malloc_r>
8000ce08:	18 92       	mov	r2,r12
8000ce0a:	c1 50       	breq	8000ce34 <__sfvwrite_r+0x120>
8000ce0c:	40 0a       	lddsp	r10,sp[0x0]
8000ce0e:	6e 4b       	ld.w	r11,r7[0x10]
8000ce10:	fe b0 e3 ea 	rcall	800095e4 <memcpy>
8000ce14:	8e 68       	ld.sh	r8,r7[0xc]
8000ce16:	e0 18 fb 7f 	andl	r8,0xfb7f
8000ce1a:	a7 b8       	sbr	r8,0x7
8000ce1c:	ae 68       	st.h	r7[0xc],r8
8000ce1e:	c0 e8       	rjmp	8000ce3a <__sfvwrite_r+0x126>
8000ce20:	08 9a       	mov	r10,r4
8000ce22:	0a 9c       	mov	r12,r5
8000ce24:	e0 a0 04 64 	rcall	8000d6ec <_realloc_r>
8000ce28:	18 92       	mov	r2,r12
8000ce2a:	c0 81       	brne	8000ce3a <__sfvwrite_r+0x126>
8000ce2c:	6e 4b       	ld.w	r11,r7[0x10]
8000ce2e:	0a 9c       	mov	r12,r5
8000ce30:	fe b0 e5 7c 	rcall	80009928 <_free_r>
8000ce34:	30 c8       	mov	r8,12
8000ce36:	8b 38       	st.w	r5[0xc],r8
8000ce38:	cb 08       	rjmp	8000cf98 <__sfvwrite_r+0x284>
8000ce3a:	40 0a       	lddsp	r10,sp[0x0]
8000ce3c:	40 09       	lddsp	r9,sp[0x0]
8000ce3e:	e8 0a 01 0a 	sub	r10,r4,r10
8000ce42:	e4 09 00 08 	add	r8,r2,r9
8000ce46:	8f 54       	st.w	r7[0x14],r4
8000ce48:	8f 2a       	st.w	r7[0x8],r10
8000ce4a:	8f 08       	st.w	r7[0x0],r8
8000ce4c:	8f 42       	st.w	r7[0x10],r2
8000ce4e:	0c 94       	mov	r4,r6
8000ce50:	08 36       	cp.w	r6,r4
8000ce52:	ec 04 17 30 	movlo	r4,r6
8000ce56:	06 9b       	mov	r11,r3
8000ce58:	08 9a       	mov	r10,r4
8000ce5a:	6e 0c       	ld.w	r12,r7[0x0]
8000ce5c:	c3 7d       	rcall	8000d0ca <memmove>
8000ce5e:	6e 08       	ld.w	r8,r7[0x0]
8000ce60:	08 08       	add	r8,r4
8000ce62:	8f 08       	st.w	r7[0x0],r8
8000ce64:	6e 28       	ld.w	r8,r7[0x8]
8000ce66:	08 18       	sub	r8,r4
8000ce68:	0c 94       	mov	r4,r6
8000ce6a:	8f 28       	st.w	r7[0x8],r8
8000ce6c:	c2 d8       	rjmp	8000cec6 <__sfvwrite_r+0x1b2>
8000ce6e:	08 36       	cp.w	r6,r4
8000ce70:	5f ba       	srhi	r10
8000ce72:	6e 0c       	ld.w	r12,r7[0x0]
8000ce74:	6e 48       	ld.w	r8,r7[0x10]
8000ce76:	10 3c       	cp.w	r12,r8
8000ce78:	5f b8       	srhi	r8
8000ce7a:	f5 e8 00 08 	and	r8,r10,r8
8000ce7e:	f2 08 18 00 	cp.b	r8,r9
8000ce82:	c0 c0       	breq	8000ce9a <__sfvwrite_r+0x186>
8000ce84:	06 9b       	mov	r11,r3
8000ce86:	08 9a       	mov	r10,r4
8000ce88:	c2 1d       	rcall	8000d0ca <memmove>
8000ce8a:	6e 08       	ld.w	r8,r7[0x0]
8000ce8c:	08 08       	add	r8,r4
8000ce8e:	0e 9b       	mov	r11,r7
8000ce90:	8f 08       	st.w	r7[0x0],r8
8000ce92:	0a 9c       	mov	r12,r5
8000ce94:	c1 ae       	rcall	8000cac8 <_fflush_r>
8000ce96:	c1 80       	breq	8000cec6 <__sfvwrite_r+0x1b2>
8000ce98:	c8 08       	rjmp	8000cf98 <__sfvwrite_r+0x284>
8000ce9a:	6e 59       	ld.w	r9,r7[0x14]
8000ce9c:	12 36       	cp.w	r6,r9
8000ce9e:	c0 a3       	brcs	8000ceb2 <__sfvwrite_r+0x19e>
8000cea0:	6e a8       	ld.w	r8,r7[0x28]
8000cea2:	06 9a       	mov	r10,r3
8000cea4:	6e 8b       	ld.w	r11,r7[0x20]
8000cea6:	0a 9c       	mov	r12,r5
8000cea8:	5d 18       	icall	r8
8000ceaa:	18 94       	mov	r4,r12
8000ceac:	e0 89 00 0d 	brgt	8000cec6 <__sfvwrite_r+0x1b2>
8000ceb0:	c7 48       	rjmp	8000cf98 <__sfvwrite_r+0x284>
8000ceb2:	0c 9a       	mov	r10,r6
8000ceb4:	06 9b       	mov	r11,r3
8000ceb6:	c0 ad       	rcall	8000d0ca <memmove>
8000ceb8:	6e 08       	ld.w	r8,r7[0x0]
8000ceba:	0c 08       	add	r8,r6
8000cebc:	0c 94       	mov	r4,r6
8000cebe:	8f 08       	st.w	r7[0x0],r8
8000cec0:	6e 28       	ld.w	r8,r7[0x8]
8000cec2:	0c 18       	sub	r8,r6
8000cec4:	8f 28       	st.w	r7[0x8],r8
8000cec6:	62 28       	ld.w	r8,r1[0x8]
8000cec8:	08 18       	sub	r8,r4
8000ceca:	83 28       	st.w	r1[0x8],r8
8000cecc:	c6 b0       	breq	8000cfa2 <__sfvwrite_r+0x28e>
8000cece:	08 16       	sub	r6,r4
8000ced0:	08 03       	add	r3,r4
8000ced2:	c7 1b       	rjmp	8000cdb4 <__sfvwrite_r+0xa0>
8000ced4:	60 03       	ld.w	r3,r0[0x0]
8000ced6:	60 11       	ld.w	r1,r0[0x4]
8000ced8:	30 08       	mov	r8,0
8000ceda:	2f 80       	sub	r0,-8
8000cedc:	50 08       	stdsp	sp[0x0],r8
8000cede:	58 01       	cp.w	r1,0
8000cee0:	cf a0       	breq	8000ced4 <__sfvwrite_r+0x1c0>
8000cee2:	40 0a       	lddsp	r10,sp[0x0]
8000cee4:	58 0a       	cp.w	r10,0
8000cee6:	c1 41       	brne	8000cf0e <__sfvwrite_r+0x1fa>
8000cee8:	e2 c6 ff ff 	sub	r6,r1,-1
8000ceec:	02 9a       	mov	r10,r1
8000ceee:	30 ab       	mov	r11,10
8000cef0:	06 9c       	mov	r12,r3
8000cef2:	ce 1c       	rcall	8000d0b4 <memchr>
8000cef4:	f8 c8 ff ff 	sub	r8,r12,-1
8000cef8:	58 0c       	cp.w	r12,0
8000cefa:	f1 d3 e1 16 	subne	r6,r8,r3
8000cefe:	f9 b9 01 01 	movne	r9,1
8000cf02:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000cf06:	f9 b8 00 01 	moveq	r8,1
8000cf0a:	fb f8 0a 00 	st.weq	sp[0x0],r8
8000cf0e:	02 36       	cp.w	r6,r1
8000cf10:	ec 04 17 80 	movls	r4,r6
8000cf14:	e2 04 17 b0 	movhi	r4,r1
8000cf18:	6e 59       	ld.w	r9,r7[0x14]
8000cf1a:	6e 25       	ld.w	r5,r7[0x8]
8000cf1c:	f2 05 00 05 	add	r5,r9,r5
8000cf20:	0a 34       	cp.w	r4,r5
8000cf22:	5f 9a       	srgt	r10
8000cf24:	6e 0c       	ld.w	r12,r7[0x0]
8000cf26:	6e 48       	ld.w	r8,r7[0x10]
8000cf28:	10 3c       	cp.w	r12,r8
8000cf2a:	5f b8       	srhi	r8
8000cf2c:	f5 e8 00 08 	and	r8,r10,r8
8000cf30:	30 0a       	mov	r10,0
8000cf32:	f4 08 18 00 	cp.b	r8,r10
8000cf36:	c0 d0       	breq	8000cf50 <__sfvwrite_r+0x23c>
8000cf38:	06 9b       	mov	r11,r3
8000cf3a:	0a 9a       	mov	r10,r5
8000cf3c:	cc 7c       	rcall	8000d0ca <memmove>
8000cf3e:	6e 08       	ld.w	r8,r7[0x0]
8000cf40:	0a 08       	add	r8,r5
8000cf42:	0e 9b       	mov	r11,r7
8000cf44:	8f 08       	st.w	r7[0x0],r8
8000cf46:	40 1c       	lddsp	r12,sp[0x4]
8000cf48:	fe b0 fd c0 	rcall	8000cac8 <_fflush_r>
8000cf4c:	c1 70       	breq	8000cf7a <__sfvwrite_r+0x266>
8000cf4e:	c2 58       	rjmp	8000cf98 <__sfvwrite_r+0x284>
8000cf50:	12 34       	cp.w	r4,r9
8000cf52:	c0 a5       	brlt	8000cf66 <__sfvwrite_r+0x252>
8000cf54:	6e a8       	ld.w	r8,r7[0x28]
8000cf56:	06 9a       	mov	r10,r3
8000cf58:	6e 8b       	ld.w	r11,r7[0x20]
8000cf5a:	40 1c       	lddsp	r12,sp[0x4]
8000cf5c:	5d 18       	icall	r8
8000cf5e:	18 95       	mov	r5,r12
8000cf60:	e0 89 00 0d 	brgt	8000cf7a <__sfvwrite_r+0x266>
8000cf64:	c1 a8       	rjmp	8000cf98 <__sfvwrite_r+0x284>
8000cf66:	08 9a       	mov	r10,r4
8000cf68:	06 9b       	mov	r11,r3
8000cf6a:	cb 0c       	rcall	8000d0ca <memmove>
8000cf6c:	6e 08       	ld.w	r8,r7[0x0]
8000cf6e:	08 08       	add	r8,r4
8000cf70:	08 95       	mov	r5,r4
8000cf72:	8f 08       	st.w	r7[0x0],r8
8000cf74:	6e 28       	ld.w	r8,r7[0x8]
8000cf76:	08 18       	sub	r8,r4
8000cf78:	8f 28       	st.w	r7[0x8],r8
8000cf7a:	0a 16       	sub	r6,r5
8000cf7c:	c0 71       	brne	8000cf8a <__sfvwrite_r+0x276>
8000cf7e:	0e 9b       	mov	r11,r7
8000cf80:	40 1c       	lddsp	r12,sp[0x4]
8000cf82:	fe b0 fd a3 	rcall	8000cac8 <_fflush_r>
8000cf86:	c0 91       	brne	8000cf98 <__sfvwrite_r+0x284>
8000cf88:	50 06       	stdsp	sp[0x0],r6
8000cf8a:	64 28       	ld.w	r8,r2[0x8]
8000cf8c:	0a 18       	sub	r8,r5
8000cf8e:	85 28       	st.w	r2[0x8],r8
8000cf90:	c0 90       	breq	8000cfa2 <__sfvwrite_r+0x28e>
8000cf92:	0a 11       	sub	r1,r5
8000cf94:	0a 03       	add	r3,r5
8000cf96:	ca 4b       	rjmp	8000cede <__sfvwrite_r+0x1ca>
8000cf98:	8e 68       	ld.sh	r8,r7[0xc]
8000cf9a:	a7 a8       	sbr	r8,0x6
8000cf9c:	ae 68       	st.h	r7[0xc],r8
8000cf9e:	3f fc       	mov	r12,-1
8000cfa0:	c0 28       	rjmp	8000cfa4 <__sfvwrite_r+0x290>
8000cfa2:	30 0c       	mov	r12,0
8000cfa4:	2f dd       	sub	sp,-12
8000cfa6:	d8 32       	popm	r0-r7,pc

8000cfa8 <_fwalk>:
8000cfa8:	d4 31       	pushm	r0-r7,lr
8000cfaa:	30 05       	mov	r5,0
8000cfac:	16 91       	mov	r1,r11
8000cfae:	f8 c7 ff 28 	sub	r7,r12,-216
8000cfb2:	0a 92       	mov	r2,r5
8000cfb4:	c1 0e       	rcall	8000cbd4 <__sfp_lock_acquire>
8000cfb6:	3f f3       	mov	r3,-1
8000cfb8:	c1 68       	rjmp	8000cfe4 <_fwalk+0x3c>
8000cfba:	6e 26       	ld.w	r6,r7[0x8]
8000cfbc:	6e 14       	ld.w	r4,r7[0x4]
8000cfbe:	2f 46       	sub	r6,-12
8000cfc0:	c0 c8       	rjmp	8000cfd8 <_fwalk+0x30>
8000cfc2:	8c 08       	ld.sh	r8,r6[0x0]
8000cfc4:	e4 08 19 00 	cp.h	r8,r2
8000cfc8:	c0 70       	breq	8000cfd6 <_fwalk+0x2e>
8000cfca:	8c 18       	ld.sh	r8,r6[0x2]
8000cfcc:	e6 08 19 00 	cp.h	r8,r3
8000cfd0:	c0 30       	breq	8000cfd6 <_fwalk+0x2e>
8000cfd2:	5d 11       	icall	r1
8000cfd4:	18 45       	or	r5,r12
8000cfd6:	2a 46       	sub	r6,-92
8000cfd8:	20 14       	sub	r4,1
8000cfda:	ec cc 00 0c 	sub	r12,r6,12
8000cfde:	58 04       	cp.w	r4,0
8000cfe0:	cf 14       	brge	8000cfc2 <_fwalk+0x1a>
8000cfe2:	6e 07       	ld.w	r7,r7[0x0]
8000cfe4:	58 07       	cp.w	r7,0
8000cfe6:	ce a1       	brne	8000cfba <_fwalk+0x12>
8000cfe8:	fe b0 fd f7 	rcall	8000cbd6 <__sfp_lock_release>
8000cfec:	0a 9c       	mov	r12,r5
8000cfee:	d8 32       	popm	r0-r7,pc

8000cff0 <_localeconv_r>:
8000cff0:	fe cc db 68 	sub	r12,pc,-9368
8000cff4:	5e fc       	retal	r12
8000cff6:	d7 03       	nop

8000cff8 <__smakebuf_r>:
8000cff8:	d4 21       	pushm	r4-r7,lr
8000cffa:	20 fd       	sub	sp,60
8000cffc:	96 68       	ld.sh	r8,r11[0xc]
8000cffe:	16 97       	mov	r7,r11
8000d000:	18 96       	mov	r6,r12
8000d002:	e2 18 00 02 	andl	r8,0x2,COH
8000d006:	c3 d1       	brne	8000d080 <__smakebuf_r+0x88>
8000d008:	96 7b       	ld.sh	r11,r11[0xe]
8000d00a:	f0 0b 19 00 	cp.h	r11,r8
8000d00e:	c0 55       	brlt	8000d018 <__smakebuf_r+0x20>
8000d010:	1a 9a       	mov	r10,sp
8000d012:	e0 a0 05 e9 	rcall	8000dbe4 <_fstat_r>
8000d016:	c0 f4       	brge	8000d034 <__smakebuf_r+0x3c>
8000d018:	8e 65       	ld.sh	r5,r7[0xc]
8000d01a:	0a 98       	mov	r8,r5
8000d01c:	ab b8       	sbr	r8,0xb
8000d01e:	e2 15 00 80 	andl	r5,0x80,COH
8000d022:	ae 68       	st.h	r7[0xc],r8
8000d024:	30 04       	mov	r4,0
8000d026:	e0 68 04 00 	mov	r8,1024
8000d02a:	f9 b5 01 40 	movne	r5,64
8000d02e:	f0 05 17 00 	moveq	r5,r8
8000d032:	c1 c8       	rjmp	8000d06a <__smakebuf_r+0x72>
8000d034:	40 18       	lddsp	r8,sp[0x4]
8000d036:	e2 18 f0 00 	andl	r8,0xf000,COH
8000d03a:	e0 48 20 00 	cp.w	r8,8192
8000d03e:	5f 04       	sreq	r4
8000d040:	e0 48 80 00 	cp.w	r8,32768
8000d044:	c0 e1       	brne	8000d060 <__smakebuf_r+0x68>
8000d046:	6e b9       	ld.w	r9,r7[0x2c]
8000d048:	fe c8 f6 4c 	sub	r8,pc,-2484
8000d04c:	10 39       	cp.w	r9,r8
8000d04e:	c0 91       	brne	8000d060 <__smakebuf_r+0x68>
8000d050:	8e 68       	ld.sh	r8,r7[0xc]
8000d052:	e0 65 04 00 	mov	r5,1024
8000d056:	ab a8       	sbr	r8,0xa
8000d058:	ef 45 00 50 	st.w	r7[80],r5
8000d05c:	ae 68       	st.h	r7[0xc],r8
8000d05e:	c0 68       	rjmp	8000d06a <__smakebuf_r+0x72>
8000d060:	8e 68       	ld.sh	r8,r7[0xc]
8000d062:	e0 65 04 00 	mov	r5,1024
8000d066:	ab b8       	sbr	r8,0xb
8000d068:	ae 68       	st.h	r7[0xc],r8
8000d06a:	0a 9b       	mov	r11,r5
8000d06c:	0c 9c       	mov	r12,r6
8000d06e:	fe b0 e0 a7 	rcall	800091bc <_malloc_r>
8000d072:	8e 68       	ld.sh	r8,r7[0xc]
8000d074:	c0 d1       	brne	8000d08e <__smakebuf_r+0x96>
8000d076:	ed b8 00 09 	bld	r8,0x9
8000d07a:	c1 b0       	breq	8000d0b0 <__smakebuf_r+0xb8>
8000d07c:	a1 b8       	sbr	r8,0x1
8000d07e:	ae 68       	st.h	r7[0xc],r8
8000d080:	ee c8 ff b9 	sub	r8,r7,-71
8000d084:	8f 48       	st.w	r7[0x10],r8
8000d086:	8f 08       	st.w	r7[0x0],r8
8000d088:	30 18       	mov	r8,1
8000d08a:	8f 58       	st.w	r7[0x14],r8
8000d08c:	c1 28       	rjmp	8000d0b0 <__smakebuf_r+0xb8>
8000d08e:	a7 b8       	sbr	r8,0x7
8000d090:	8f 4c       	st.w	r7[0x10],r12
8000d092:	ae 68       	st.h	r7[0xc],r8
8000d094:	8f 55       	st.w	r7[0x14],r5
8000d096:	fe c8 04 be 	sub	r8,pc,1214
8000d09a:	8f 0c       	st.w	r7[0x0],r12
8000d09c:	8d a8       	st.w	r6[0x28],r8
8000d09e:	58 04       	cp.w	r4,0
8000d0a0:	c0 80       	breq	8000d0b0 <__smakebuf_r+0xb8>
8000d0a2:	8e 7c       	ld.sh	r12,r7[0xe]
8000d0a4:	fe b0 e3 7e 	rcall	800097a0 <isatty>
8000d0a8:	c0 40       	breq	8000d0b0 <__smakebuf_r+0xb8>
8000d0aa:	8e 68       	ld.sh	r8,r7[0xc]
8000d0ac:	a1 a8       	sbr	r8,0x0
8000d0ae:	ae 68       	st.h	r7[0xc],r8
8000d0b0:	2f 1d       	sub	sp,-60
8000d0b2:	d8 22       	popm	r4-r7,pc

8000d0b4 <memchr>:
8000d0b4:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000d0b8:	c0 68       	rjmp	8000d0c4 <memchr+0x10>
8000d0ba:	20 1a       	sub	r10,1
8000d0bc:	19 88       	ld.ub	r8,r12[0x0]
8000d0be:	16 38       	cp.w	r8,r11
8000d0c0:	5e 0c       	reteq	r12
8000d0c2:	2f fc       	sub	r12,-1
8000d0c4:	58 0a       	cp.w	r10,0
8000d0c6:	cf a1       	brne	8000d0ba <memchr+0x6>
8000d0c8:	5e fa       	retal	r10

8000d0ca <memmove>:
8000d0ca:	d4 01       	pushm	lr
8000d0cc:	18 3b       	cp.w	r11,r12
8000d0ce:	c1 92       	brcc	8000d100 <memmove+0x36>
8000d0d0:	f6 0a 00 09 	add	r9,r11,r10
8000d0d4:	12 3c       	cp.w	r12,r9
8000d0d6:	c1 52       	brcc	8000d100 <memmove+0x36>
8000d0d8:	f8 0a 00 0b 	add	r11,r12,r10
8000d0dc:	30 08       	mov	r8,0
8000d0de:	c0 68       	rjmp	8000d0ea <memmove+0x20>
8000d0e0:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000d0e4:	20 1a       	sub	r10,1
8000d0e6:	f6 08 0b 0e 	st.b	r11[r8],lr
8000d0ea:	20 18       	sub	r8,1
8000d0ec:	58 0a       	cp.w	r10,0
8000d0ee:	cf 91       	brne	8000d0e0 <memmove+0x16>
8000d0f0:	d8 02       	popm	pc
8000d0f2:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000d0f6:	20 1a       	sub	r10,1
8000d0f8:	f8 08 0b 09 	st.b	r12[r8],r9
8000d0fc:	2f f8       	sub	r8,-1
8000d0fe:	c0 28       	rjmp	8000d102 <memmove+0x38>
8000d100:	30 08       	mov	r8,0
8000d102:	58 0a       	cp.w	r10,0
8000d104:	cf 71       	brne	8000d0f2 <memmove+0x28>
8000d106:	d8 02       	popm	pc

8000d108 <memset>:
8000d108:	18 98       	mov	r8,r12
8000d10a:	c0 38       	rjmp	8000d110 <memset+0x8>
8000d10c:	10 cb       	st.b	r8++,r11
8000d10e:	20 1a       	sub	r10,1
8000d110:	58 0a       	cp.w	r10,0
8000d112:	cf d1       	brne	8000d10c <memset+0x4>
8000d114:	5e fc       	retal	r12

8000d116 <__hi0bits>:
8000d116:	18 98       	mov	r8,r12
8000d118:	e0 1c 00 00 	andl	r12,0x0
8000d11c:	f0 09 15 10 	lsl	r9,r8,0x10
8000d120:	58 0c       	cp.w	r12,0
8000d122:	f2 08 17 00 	moveq	r8,r9
8000d126:	f9 bc 00 10 	moveq	r12,16
8000d12a:	f9 bc 01 00 	movne	r12,0
8000d12e:	10 9a       	mov	r10,r8
8000d130:	f0 09 15 08 	lsl	r9,r8,0x8
8000d134:	e6 1a ff 00 	andh	r10,0xff00,COH
8000d138:	f7 bc 00 f8 	subeq	r12,-8
8000d13c:	f2 08 17 00 	moveq	r8,r9
8000d140:	10 9a       	mov	r10,r8
8000d142:	f0 09 15 04 	lsl	r9,r8,0x4
8000d146:	e6 1a f0 00 	andh	r10,0xf000,COH
8000d14a:	f7 bc 00 fc 	subeq	r12,-4
8000d14e:	f2 08 17 00 	moveq	r8,r9
8000d152:	10 9a       	mov	r10,r8
8000d154:	f0 09 15 02 	lsl	r9,r8,0x2
8000d158:	e6 1a c0 00 	andh	r10,0xc000,COH
8000d15c:	f7 bc 00 fe 	subeq	r12,-2
8000d160:	f2 08 17 00 	moveq	r8,r9
8000d164:	58 08       	cp.w	r8,0
8000d166:	5e 5c       	retlt	r12
8000d168:	ed b8 00 1e 	bld	r8,0x1e
8000d16c:	f9 bc 01 20 	movne	r12,32
8000d170:	f7 bc 00 ff 	subeq	r12,-1
8000d174:	5e fc       	retal	r12

8000d176 <__lo0bits>:
8000d176:	18 99       	mov	r9,r12
8000d178:	78 08       	ld.w	r8,r12[0x0]
8000d17a:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000d17e:	c1 50       	breq	8000d1a8 <__lo0bits+0x32>
8000d180:	ed b8 00 00 	bld	r8,0x0
8000d184:	c0 21       	brne	8000d188 <__lo0bits+0x12>
8000d186:	5e fd       	retal	0
8000d188:	10 9b       	mov	r11,r8
8000d18a:	f0 0a 16 01 	lsr	r10,r8,0x1
8000d18e:	e2 1b 00 02 	andl	r11,0x2,COH
8000d192:	a3 88       	lsr	r8,0x2
8000d194:	58 0b       	cp.w	r11,0
8000d196:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000d19a:	f9 bc 01 01 	movne	r12,1
8000d19e:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000d1a2:	f9 bc 00 02 	moveq	r12,2
8000d1a6:	5e fc       	retal	r12
8000d1a8:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000d1ac:	f0 0b 16 10 	lsr	r11,r8,0x10
8000d1b0:	58 0a       	cp.w	r10,0
8000d1b2:	f6 08 17 00 	moveq	r8,r11
8000d1b6:	f9 bc 00 10 	moveq	r12,16
8000d1ba:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000d1be:	f0 0a 16 08 	lsr	r10,r8,0x8
8000d1c2:	58 0b       	cp.w	r11,0
8000d1c4:	f7 bc 00 f8 	subeq	r12,-8
8000d1c8:	f4 08 17 00 	moveq	r8,r10
8000d1cc:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000d1d0:	f0 0a 16 04 	lsr	r10,r8,0x4
8000d1d4:	58 0b       	cp.w	r11,0
8000d1d6:	f7 bc 00 fc 	subeq	r12,-4
8000d1da:	f4 08 17 00 	moveq	r8,r10
8000d1de:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000d1e2:	f0 0a 16 02 	lsr	r10,r8,0x2
8000d1e6:	58 0b       	cp.w	r11,0
8000d1e8:	f7 bc 00 fe 	subeq	r12,-2
8000d1ec:	f4 08 17 00 	moveq	r8,r10
8000d1f0:	ed b8 00 00 	bld	r8,0x0
8000d1f4:	c0 60       	breq	8000d200 <__lo0bits+0x8a>
8000d1f6:	a1 98       	lsr	r8,0x1
8000d1f8:	c0 31       	brne	8000d1fe <__lo0bits+0x88>
8000d1fa:	32 0c       	mov	r12,32
8000d1fc:	5e fc       	retal	r12
8000d1fe:	2f fc       	sub	r12,-1
8000d200:	93 08       	st.w	r9[0x0],r8
8000d202:	5e fc       	retal	r12

8000d204 <__mcmp>:
8000d204:	d4 01       	pushm	lr
8000d206:	18 98       	mov	r8,r12
8000d208:	76 49       	ld.w	r9,r11[0x10]
8000d20a:	78 4c       	ld.w	r12,r12[0x10]
8000d20c:	12 1c       	sub	r12,r9
8000d20e:	c1 31       	brne	8000d234 <__mcmp+0x30>
8000d210:	2f b9       	sub	r9,-5
8000d212:	a3 69       	lsl	r9,0x2
8000d214:	12 0b       	add	r11,r9
8000d216:	f0 09 00 09 	add	r9,r8,r9
8000d21a:	2e c8       	sub	r8,-20
8000d21c:	13 4e       	ld.w	lr,--r9
8000d21e:	17 4a       	ld.w	r10,--r11
8000d220:	14 3e       	cp.w	lr,r10
8000d222:	c0 60       	breq	8000d22e <__mcmp+0x2a>
8000d224:	f9 bc 03 ff 	movlo	r12,-1
8000d228:	f9 bc 02 01 	movhs	r12,1
8000d22c:	d8 02       	popm	pc
8000d22e:	10 39       	cp.w	r9,r8
8000d230:	fe 9b ff f6 	brhi	8000d21c <__mcmp+0x18>
8000d234:	d8 02       	popm	pc
8000d236:	d7 03       	nop

8000d238 <_Bfree>:
8000d238:	d4 21       	pushm	r4-r7,lr
8000d23a:	18 97       	mov	r7,r12
8000d23c:	16 95       	mov	r5,r11
8000d23e:	78 96       	ld.w	r6,r12[0x24]
8000d240:	58 06       	cp.w	r6,0
8000d242:	c0 91       	brne	8000d254 <_Bfree+0x1c>
8000d244:	31 0c       	mov	r12,16
8000d246:	fe b0 df b3 	rcall	800091ac <malloc>
8000d24a:	99 36       	st.w	r12[0xc],r6
8000d24c:	8f 9c       	st.w	r7[0x24],r12
8000d24e:	99 16       	st.w	r12[0x4],r6
8000d250:	99 26       	st.w	r12[0x8],r6
8000d252:	99 06       	st.w	r12[0x0],r6
8000d254:	58 05       	cp.w	r5,0
8000d256:	c0 90       	breq	8000d268 <_Bfree+0x30>
8000d258:	6a 19       	ld.w	r9,r5[0x4]
8000d25a:	6e 98       	ld.w	r8,r7[0x24]
8000d25c:	70 38       	ld.w	r8,r8[0xc]
8000d25e:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000d262:	8b 0a       	st.w	r5[0x0],r10
8000d264:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000d268:	d8 22       	popm	r4-r7,pc
8000d26a:	d7 03       	nop

8000d26c <_Balloc>:
8000d26c:	d4 21       	pushm	r4-r7,lr
8000d26e:	18 97       	mov	r7,r12
8000d270:	16 96       	mov	r6,r11
8000d272:	78 95       	ld.w	r5,r12[0x24]
8000d274:	58 05       	cp.w	r5,0
8000d276:	c0 91       	brne	8000d288 <_Balloc+0x1c>
8000d278:	31 0c       	mov	r12,16
8000d27a:	fe b0 df 99 	rcall	800091ac <malloc>
8000d27e:	99 35       	st.w	r12[0xc],r5
8000d280:	8f 9c       	st.w	r7[0x24],r12
8000d282:	99 15       	st.w	r12[0x4],r5
8000d284:	99 25       	st.w	r12[0x8],r5
8000d286:	99 05       	st.w	r12[0x0],r5
8000d288:	6e 95       	ld.w	r5,r7[0x24]
8000d28a:	6a 38       	ld.w	r8,r5[0xc]
8000d28c:	58 08       	cp.w	r8,0
8000d28e:	c0 b1       	brne	8000d2a4 <_Balloc+0x38>
8000d290:	31 0a       	mov	r10,16
8000d292:	30 4b       	mov	r11,4
8000d294:	0e 9c       	mov	r12,r7
8000d296:	e0 a0 04 07 	rcall	8000daa4 <_calloc_r>
8000d29a:	8b 3c       	st.w	r5[0xc],r12
8000d29c:	6e 98       	ld.w	r8,r7[0x24]
8000d29e:	70 3c       	ld.w	r12,r8[0xc]
8000d2a0:	58 0c       	cp.w	r12,0
8000d2a2:	c1 b0       	breq	8000d2d8 <_Balloc+0x6c>
8000d2a4:	6e 98       	ld.w	r8,r7[0x24]
8000d2a6:	70 38       	ld.w	r8,r8[0xc]
8000d2a8:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000d2ac:	70 0c       	ld.w	r12,r8[0x0]
8000d2ae:	58 0c       	cp.w	r12,0
8000d2b0:	c0 40       	breq	8000d2b8 <_Balloc+0x4c>
8000d2b2:	78 09       	ld.w	r9,r12[0x0]
8000d2b4:	91 09       	st.w	r8[0x0],r9
8000d2b6:	c0 e8       	rjmp	8000d2d2 <_Balloc+0x66>
8000d2b8:	0e 9c       	mov	r12,r7
8000d2ba:	30 17       	mov	r7,1
8000d2bc:	0e 9b       	mov	r11,r7
8000d2be:	ee 06 09 47 	lsl	r7,r7,r6
8000d2c2:	ee ca ff fb 	sub	r10,r7,-5
8000d2c6:	a3 6a       	lsl	r10,0x2
8000d2c8:	e0 a0 03 ee 	rcall	8000daa4 <_calloc_r>
8000d2cc:	c0 60       	breq	8000d2d8 <_Balloc+0x6c>
8000d2ce:	99 16       	st.w	r12[0x4],r6
8000d2d0:	99 27       	st.w	r12[0x8],r7
8000d2d2:	30 08       	mov	r8,0
8000d2d4:	99 38       	st.w	r12[0xc],r8
8000d2d6:	99 48       	st.w	r12[0x10],r8
8000d2d8:	d8 22       	popm	r4-r7,pc
8000d2da:	d7 03       	nop

8000d2dc <__d2b>:
8000d2dc:	d4 31       	pushm	r0-r7,lr
8000d2de:	20 2d       	sub	sp,8
8000d2e0:	16 93       	mov	r3,r11
8000d2e2:	12 96       	mov	r6,r9
8000d2e4:	10 95       	mov	r5,r8
8000d2e6:	14 92       	mov	r2,r10
8000d2e8:	30 1b       	mov	r11,1
8000d2ea:	cc 1f       	rcall	8000d26c <_Balloc>
8000d2ec:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000d2f0:	50 09       	stdsp	sp[0x0],r9
8000d2f2:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000d2f6:	b5 a9       	sbr	r9,0x14
8000d2f8:	f0 01 16 14 	lsr	r1,r8,0x14
8000d2fc:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000d300:	18 94       	mov	r4,r12
8000d302:	58 02       	cp.w	r2,0
8000d304:	c1 d0       	breq	8000d33e <__d2b+0x62>
8000d306:	fa cc ff f8 	sub	r12,sp,-8
8000d30a:	18 d2       	st.w	--r12,r2
8000d30c:	c3 5f       	rcall	8000d176 <__lo0bits>
8000d30e:	40 18       	lddsp	r8,sp[0x4]
8000d310:	c0 d0       	breq	8000d32a <__d2b+0x4e>
8000d312:	40 09       	lddsp	r9,sp[0x0]
8000d314:	f8 0a 11 20 	rsub	r10,r12,32
8000d318:	f2 0a 09 4a 	lsl	r10,r9,r10
8000d31c:	f5 e8 10 08 	or	r8,r10,r8
8000d320:	89 58       	st.w	r4[0x14],r8
8000d322:	f2 0c 0a 49 	lsr	r9,r9,r12
8000d326:	50 09       	stdsp	sp[0x0],r9
8000d328:	c0 28       	rjmp	8000d32c <__d2b+0x50>
8000d32a:	89 58       	st.w	r4[0x14],r8
8000d32c:	40 08       	lddsp	r8,sp[0x0]
8000d32e:	58 08       	cp.w	r8,0
8000d330:	f9 b3 01 02 	movne	r3,2
8000d334:	f9 b3 00 01 	moveq	r3,1
8000d338:	89 68       	st.w	r4[0x18],r8
8000d33a:	89 43       	st.w	r4[0x10],r3
8000d33c:	c0 88       	rjmp	8000d34c <__d2b+0x70>
8000d33e:	1a 9c       	mov	r12,sp
8000d340:	c1 bf       	rcall	8000d176 <__lo0bits>
8000d342:	30 13       	mov	r3,1
8000d344:	40 08       	lddsp	r8,sp[0x0]
8000d346:	2e 0c       	sub	r12,-32
8000d348:	89 43       	st.w	r4[0x10],r3
8000d34a:	89 58       	st.w	r4[0x14],r8
8000d34c:	58 01       	cp.w	r1,0
8000d34e:	c0 90       	breq	8000d360 <__d2b+0x84>
8000d350:	e2 c1 04 33 	sub	r1,r1,1075
8000d354:	18 01       	add	r1,r12
8000d356:	8d 01       	st.w	r6[0x0],r1
8000d358:	f8 0c 11 35 	rsub	r12,r12,53
8000d35c:	8b 0c       	st.w	r5[0x0],r12
8000d35e:	c0 c8       	rjmp	8000d376 <__d2b+0x9a>
8000d360:	e6 c8 ff fc 	sub	r8,r3,-4
8000d364:	f8 cc 04 32 	sub	r12,r12,1074
8000d368:	a5 73       	lsl	r3,0x5
8000d36a:	8d 0c       	st.w	r6[0x0],r12
8000d36c:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000d370:	cd 3e       	rcall	8000d116 <__hi0bits>
8000d372:	18 13       	sub	r3,r12
8000d374:	8b 03       	st.w	r5[0x0],r3
8000d376:	08 9c       	mov	r12,r4
8000d378:	2f ed       	sub	sp,-8
8000d37a:	d8 32       	popm	r0-r7,pc

8000d37c <__mdiff>:
8000d37c:	d4 31       	pushm	r0-r7,lr
8000d37e:	74 48       	ld.w	r8,r10[0x10]
8000d380:	76 45       	ld.w	r5,r11[0x10]
8000d382:	16 97       	mov	r7,r11
8000d384:	14 96       	mov	r6,r10
8000d386:	10 15       	sub	r5,r8
8000d388:	c1 31       	brne	8000d3ae <__mdiff+0x32>
8000d38a:	2f b8       	sub	r8,-5
8000d38c:	ee ce ff ec 	sub	lr,r7,-20
8000d390:	a3 68       	lsl	r8,0x2
8000d392:	f4 08 00 0b 	add	r11,r10,r8
8000d396:	ee 08 00 08 	add	r8,r7,r8
8000d39a:	11 4a       	ld.w	r10,--r8
8000d39c:	17 49       	ld.w	r9,--r11
8000d39e:	12 3a       	cp.w	r10,r9
8000d3a0:	c0 30       	breq	8000d3a6 <__mdiff+0x2a>
8000d3a2:	c0 e2       	brcc	8000d3be <__mdiff+0x42>
8000d3a4:	c0 78       	rjmp	8000d3b2 <__mdiff+0x36>
8000d3a6:	1c 38       	cp.w	r8,lr
8000d3a8:	fe 9b ff f9 	brhi	8000d39a <__mdiff+0x1e>
8000d3ac:	c4 98       	rjmp	8000d43e <__mdiff+0xc2>
8000d3ae:	58 05       	cp.w	r5,0
8000d3b0:	c0 64       	brge	8000d3bc <__mdiff+0x40>
8000d3b2:	0e 98       	mov	r8,r7
8000d3b4:	30 15       	mov	r5,1
8000d3b6:	0c 97       	mov	r7,r6
8000d3b8:	10 96       	mov	r6,r8
8000d3ba:	c0 28       	rjmp	8000d3be <__mdiff+0x42>
8000d3bc:	30 05       	mov	r5,0
8000d3be:	6e 1b       	ld.w	r11,r7[0x4]
8000d3c0:	c5 6f       	rcall	8000d26c <_Balloc>
8000d3c2:	6e 49       	ld.w	r9,r7[0x10]
8000d3c4:	6c 44       	ld.w	r4,r6[0x10]
8000d3c6:	99 35       	st.w	r12[0xc],r5
8000d3c8:	2f b4       	sub	r4,-5
8000d3ca:	f2 c5 ff fb 	sub	r5,r9,-5
8000d3ce:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000d3d2:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000d3d6:	2e c6       	sub	r6,-20
8000d3d8:	2e c7       	sub	r7,-20
8000d3da:	f8 c8 ff ec 	sub	r8,r12,-20
8000d3de:	30 0a       	mov	r10,0
8000d3e0:	0f 0e       	ld.w	lr,r7++
8000d3e2:	0d 0b       	ld.w	r11,r6++
8000d3e4:	fc 02 16 10 	lsr	r2,lr,0x10
8000d3e8:	f6 03 16 10 	lsr	r3,r11,0x10
8000d3ec:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000d3f0:	e4 03 01 03 	sub	r3,r2,r3
8000d3f4:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000d3f8:	fc 0b 01 0b 	sub	r11,lr,r11
8000d3fc:	f6 0a 00 0a 	add	r10,r11,r10
8000d400:	b0 1a       	st.h	r8[0x2],r10
8000d402:	b1 4a       	asr	r10,0x10
8000d404:	e6 0a 00 0a 	add	r10,r3,r10
8000d408:	b0 0a       	st.h	r8[0x0],r10
8000d40a:	2f c8       	sub	r8,-4
8000d40c:	b1 4a       	asr	r10,0x10
8000d40e:	08 36       	cp.w	r6,r4
8000d410:	ce 83       	brcs	8000d3e0 <__mdiff+0x64>
8000d412:	c0 d8       	rjmp	8000d42c <__mdiff+0xb0>
8000d414:	0f 0b       	ld.w	r11,r7++
8000d416:	f6 0e 16 10 	lsr	lr,r11,0x10
8000d41a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000d41e:	16 0a       	add	r10,r11
8000d420:	b0 1a       	st.h	r8[0x2],r10
8000d422:	b1 4a       	asr	r10,0x10
8000d424:	1c 0a       	add	r10,lr
8000d426:	b0 0a       	st.h	r8[0x0],r10
8000d428:	2f c8       	sub	r8,-4
8000d42a:	b1 4a       	asr	r10,0x10
8000d42c:	0a 37       	cp.w	r7,r5
8000d42e:	cf 33       	brcs	8000d414 <__mdiff+0x98>
8000d430:	c0 28       	rjmp	8000d434 <__mdiff+0xb8>
8000d432:	20 19       	sub	r9,1
8000d434:	11 4a       	ld.w	r10,--r8
8000d436:	58 0a       	cp.w	r10,0
8000d438:	cf d0       	breq	8000d432 <__mdiff+0xb6>
8000d43a:	99 49       	st.w	r12[0x10],r9
8000d43c:	d8 32       	popm	r0-r7,pc
8000d43e:	30 0b       	mov	r11,0
8000d440:	c1 6f       	rcall	8000d26c <_Balloc>
8000d442:	30 18       	mov	r8,1
8000d444:	99 48       	st.w	r12[0x10],r8
8000d446:	30 08       	mov	r8,0
8000d448:	99 58       	st.w	r12[0x14],r8
8000d44a:	d8 32       	popm	r0-r7,pc

8000d44c <__lshift>:
8000d44c:	d4 31       	pushm	r0-r7,lr
8000d44e:	16 97       	mov	r7,r11
8000d450:	76 46       	ld.w	r6,r11[0x10]
8000d452:	f4 02 14 05 	asr	r2,r10,0x5
8000d456:	2f f6       	sub	r6,-1
8000d458:	14 93       	mov	r3,r10
8000d45a:	18 94       	mov	r4,r12
8000d45c:	04 06       	add	r6,r2
8000d45e:	76 1b       	ld.w	r11,r11[0x4]
8000d460:	6e 28       	ld.w	r8,r7[0x8]
8000d462:	c0 38       	rjmp	8000d468 <__lshift+0x1c>
8000d464:	2f fb       	sub	r11,-1
8000d466:	a1 78       	lsl	r8,0x1
8000d468:	10 36       	cp.w	r6,r8
8000d46a:	fe 99 ff fd 	brgt	8000d464 <__lshift+0x18>
8000d46e:	08 9c       	mov	r12,r4
8000d470:	cf ee       	rcall	8000d26c <_Balloc>
8000d472:	30 09       	mov	r9,0
8000d474:	18 95       	mov	r5,r12
8000d476:	f8 c8 ff ec 	sub	r8,r12,-20
8000d47a:	12 9a       	mov	r10,r9
8000d47c:	c0 38       	rjmp	8000d482 <__lshift+0x36>
8000d47e:	10 aa       	st.w	r8++,r10
8000d480:	2f f9       	sub	r9,-1
8000d482:	04 39       	cp.w	r9,r2
8000d484:	cf d5       	brlt	8000d47e <__lshift+0x32>
8000d486:	6e 4b       	ld.w	r11,r7[0x10]
8000d488:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000d48c:	2f bb       	sub	r11,-5
8000d48e:	ee c9 ff ec 	sub	r9,r7,-20
8000d492:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000d496:	58 03       	cp.w	r3,0
8000d498:	c1 30       	breq	8000d4be <__lshift+0x72>
8000d49a:	e6 0c 11 20 	rsub	r12,r3,32
8000d49e:	30 0a       	mov	r10,0
8000d4a0:	72 02       	ld.w	r2,r9[0x0]
8000d4a2:	e4 03 09 42 	lsl	r2,r2,r3
8000d4a6:	04 4a       	or	r10,r2
8000d4a8:	10 aa       	st.w	r8++,r10
8000d4aa:	13 0a       	ld.w	r10,r9++
8000d4ac:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000d4b0:	16 39       	cp.w	r9,r11
8000d4b2:	cf 73       	brcs	8000d4a0 <__lshift+0x54>
8000d4b4:	91 0a       	st.w	r8[0x0],r10
8000d4b6:	58 0a       	cp.w	r10,0
8000d4b8:	c0 70       	breq	8000d4c6 <__lshift+0x7a>
8000d4ba:	2f f6       	sub	r6,-1
8000d4bc:	c0 58       	rjmp	8000d4c6 <__lshift+0x7a>
8000d4be:	13 0a       	ld.w	r10,r9++
8000d4c0:	10 aa       	st.w	r8++,r10
8000d4c2:	16 39       	cp.w	r9,r11
8000d4c4:	cf d3       	brcs	8000d4be <__lshift+0x72>
8000d4c6:	08 9c       	mov	r12,r4
8000d4c8:	20 16       	sub	r6,1
8000d4ca:	0e 9b       	mov	r11,r7
8000d4cc:	8b 46       	st.w	r5[0x10],r6
8000d4ce:	cb 5e       	rcall	8000d238 <_Bfree>
8000d4d0:	0a 9c       	mov	r12,r5
8000d4d2:	d8 32       	popm	r0-r7,pc

8000d4d4 <__multiply>:
8000d4d4:	d4 31       	pushm	r0-r7,lr
8000d4d6:	20 2d       	sub	sp,8
8000d4d8:	76 49       	ld.w	r9,r11[0x10]
8000d4da:	74 48       	ld.w	r8,r10[0x10]
8000d4dc:	16 96       	mov	r6,r11
8000d4de:	14 95       	mov	r5,r10
8000d4e0:	10 39       	cp.w	r9,r8
8000d4e2:	ec 08 17 50 	movlt	r8,r6
8000d4e6:	ea 06 17 50 	movlt	r6,r5
8000d4ea:	f0 05 17 50 	movlt	r5,r8
8000d4ee:	6c 28       	ld.w	r8,r6[0x8]
8000d4f0:	76 43       	ld.w	r3,r11[0x10]
8000d4f2:	74 42       	ld.w	r2,r10[0x10]
8000d4f4:	76 1b       	ld.w	r11,r11[0x4]
8000d4f6:	e4 03 00 07 	add	r7,r2,r3
8000d4fa:	10 37       	cp.w	r7,r8
8000d4fc:	f7 bb 09 ff 	subgt	r11,-1
8000d500:	cb 6e       	rcall	8000d26c <_Balloc>
8000d502:	ee c4 ff fb 	sub	r4,r7,-5
8000d506:	f8 c9 ff ec 	sub	r9,r12,-20
8000d50a:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000d50e:	30 0a       	mov	r10,0
8000d510:	12 98       	mov	r8,r9
8000d512:	c0 28       	rjmp	8000d516 <__multiply+0x42>
8000d514:	10 aa       	st.w	r8++,r10
8000d516:	08 38       	cp.w	r8,r4
8000d518:	cf e3       	brcs	8000d514 <__multiply+0x40>
8000d51a:	2f b3       	sub	r3,-5
8000d51c:	2f b2       	sub	r2,-5
8000d51e:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000d522:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000d526:	ec cb ff ec 	sub	r11,r6,-20
8000d52a:	50 12       	stdsp	sp[0x4],r2
8000d52c:	ea ca ff ec 	sub	r10,r5,-20
8000d530:	c4 48       	rjmp	8000d5b8 <__multiply+0xe4>
8000d532:	94 95       	ld.uh	r5,r10[0x2]
8000d534:	58 05       	cp.w	r5,0
8000d536:	c2 00       	breq	8000d576 <__multiply+0xa2>
8000d538:	12 98       	mov	r8,r9
8000d53a:	16 96       	mov	r6,r11
8000d53c:	30 0e       	mov	lr,0
8000d53e:	50 09       	stdsp	sp[0x0],r9
8000d540:	0d 02       	ld.w	r2,r6++
8000d542:	e4 00 16 10 	lsr	r0,r2,0x10
8000d546:	70 01       	ld.w	r1,r8[0x0]
8000d548:	70 09       	ld.w	r9,r8[0x0]
8000d54a:	b1 81       	lsr	r1,0x10
8000d54c:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000d550:	e0 05 03 41 	mac	r1,r0,r5
8000d554:	ab 32       	mul	r2,r5
8000d556:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000d55a:	00 02       	add	r2,r0
8000d55c:	e4 0e 00 0e 	add	lr,r2,lr
8000d560:	b0 1e       	st.h	r8[0x2],lr
8000d562:	b1 8e       	lsr	lr,0x10
8000d564:	1c 01       	add	r1,lr
8000d566:	b0 01       	st.h	r8[0x0],r1
8000d568:	e2 0e 16 10 	lsr	lr,r1,0x10
8000d56c:	2f c8       	sub	r8,-4
8000d56e:	06 36       	cp.w	r6,r3
8000d570:	ce 83       	brcs	8000d540 <__multiply+0x6c>
8000d572:	40 09       	lddsp	r9,sp[0x0]
8000d574:	91 0e       	st.w	r8[0x0],lr
8000d576:	94 86       	ld.uh	r6,r10[0x0]
8000d578:	58 06       	cp.w	r6,0
8000d57a:	c1 d0       	breq	8000d5b4 <__multiply+0xe0>
8000d57c:	72 02       	ld.w	r2,r9[0x0]
8000d57e:	12 98       	mov	r8,r9
8000d580:	16 9e       	mov	lr,r11
8000d582:	30 05       	mov	r5,0
8000d584:	b0 12       	st.h	r8[0x2],r2
8000d586:	1d 01       	ld.w	r1,lr++
8000d588:	90 82       	ld.uh	r2,r8[0x0]
8000d58a:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000d58e:	ad 30       	mul	r0,r6
8000d590:	e0 02 00 02 	add	r2,r0,r2
8000d594:	e4 05 00 05 	add	r5,r2,r5
8000d598:	b0 05       	st.h	r8[0x0],r5
8000d59a:	b1 85       	lsr	r5,0x10
8000d59c:	b1 81       	lsr	r1,0x10
8000d59e:	2f c8       	sub	r8,-4
8000d5a0:	ad 31       	mul	r1,r6
8000d5a2:	90 92       	ld.uh	r2,r8[0x2]
8000d5a4:	e2 02 00 02 	add	r2,r1,r2
8000d5a8:	0a 02       	add	r2,r5
8000d5aa:	e4 05 16 10 	lsr	r5,r2,0x10
8000d5ae:	06 3e       	cp.w	lr,r3
8000d5b0:	ce a3       	brcs	8000d584 <__multiply+0xb0>
8000d5b2:	91 02       	st.w	r8[0x0],r2
8000d5b4:	2f ca       	sub	r10,-4
8000d5b6:	2f c9       	sub	r9,-4
8000d5b8:	40 18       	lddsp	r8,sp[0x4]
8000d5ba:	10 3a       	cp.w	r10,r8
8000d5bc:	cb b3       	brcs	8000d532 <__multiply+0x5e>
8000d5be:	c0 28       	rjmp	8000d5c2 <__multiply+0xee>
8000d5c0:	20 17       	sub	r7,1
8000d5c2:	58 07       	cp.w	r7,0
8000d5c4:	e0 8a 00 05 	brle	8000d5ce <__multiply+0xfa>
8000d5c8:	09 48       	ld.w	r8,--r4
8000d5ca:	58 08       	cp.w	r8,0
8000d5cc:	cf a0       	breq	8000d5c0 <__multiply+0xec>
8000d5ce:	99 47       	st.w	r12[0x10],r7
8000d5d0:	2f ed       	sub	sp,-8
8000d5d2:	d8 32       	popm	r0-r7,pc

8000d5d4 <__i2b>:
8000d5d4:	d4 21       	pushm	r4-r7,lr
8000d5d6:	16 97       	mov	r7,r11
8000d5d8:	30 1b       	mov	r11,1
8000d5da:	c4 9e       	rcall	8000d26c <_Balloc>
8000d5dc:	30 19       	mov	r9,1
8000d5de:	99 57       	st.w	r12[0x14],r7
8000d5e0:	99 49       	st.w	r12[0x10],r9
8000d5e2:	d8 22       	popm	r4-r7,pc

8000d5e4 <__multadd>:
8000d5e4:	d4 31       	pushm	r0-r7,lr
8000d5e6:	30 08       	mov	r8,0
8000d5e8:	12 95       	mov	r5,r9
8000d5ea:	16 97       	mov	r7,r11
8000d5ec:	18 96       	mov	r6,r12
8000d5ee:	76 44       	ld.w	r4,r11[0x10]
8000d5f0:	f6 c9 ff ec 	sub	r9,r11,-20
8000d5f4:	72 0b       	ld.w	r11,r9[0x0]
8000d5f6:	f6 0c 16 10 	lsr	r12,r11,0x10
8000d5fa:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000d5fe:	f4 0c 02 4c 	mul	r12,r10,r12
8000d602:	f4 0b 03 45 	mac	r5,r10,r11
8000d606:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000d60a:	b1 85       	lsr	r5,0x10
8000d60c:	18 05       	add	r5,r12
8000d60e:	ea 0c 15 10 	lsl	r12,r5,0x10
8000d612:	f8 0b 00 0b 	add	r11,r12,r11
8000d616:	12 ab       	st.w	r9++,r11
8000d618:	2f f8       	sub	r8,-1
8000d61a:	b1 85       	lsr	r5,0x10
8000d61c:	08 38       	cp.w	r8,r4
8000d61e:	ce b5       	brlt	8000d5f4 <__multadd+0x10>
8000d620:	58 05       	cp.w	r5,0
8000d622:	c1 c0       	breq	8000d65a <__multadd+0x76>
8000d624:	6e 28       	ld.w	r8,r7[0x8]
8000d626:	10 34       	cp.w	r4,r8
8000d628:	c1 35       	brlt	8000d64e <__multadd+0x6a>
8000d62a:	6e 1b       	ld.w	r11,r7[0x4]
8000d62c:	0c 9c       	mov	r12,r6
8000d62e:	2f fb       	sub	r11,-1
8000d630:	c1 ee       	rcall	8000d26c <_Balloc>
8000d632:	6e 4a       	ld.w	r10,r7[0x10]
8000d634:	ee cb ff f4 	sub	r11,r7,-12
8000d638:	18 93       	mov	r3,r12
8000d63a:	2f ea       	sub	r10,-2
8000d63c:	2f 4c       	sub	r12,-12
8000d63e:	a3 6a       	lsl	r10,0x2
8000d640:	fe b0 df d2 	rcall	800095e4 <memcpy>
8000d644:	0e 9b       	mov	r11,r7
8000d646:	0c 9c       	mov	r12,r6
8000d648:	fe b0 fd f8 	rcall	8000d238 <_Bfree>
8000d64c:	06 97       	mov	r7,r3
8000d64e:	e8 c8 ff ff 	sub	r8,r4,-1
8000d652:	2f b4       	sub	r4,-5
8000d654:	8f 48       	st.w	r7[0x10],r8
8000d656:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000d65a:	0e 9c       	mov	r12,r7
8000d65c:	d8 32       	popm	r0-r7,pc
8000d65e:	d7 03       	nop

8000d660 <__pow5mult>:
8000d660:	d4 31       	pushm	r0-r7,lr
8000d662:	14 96       	mov	r6,r10
8000d664:	18 97       	mov	r7,r12
8000d666:	16 94       	mov	r4,r11
8000d668:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000d66c:	c0 90       	breq	8000d67e <__pow5mult+0x1e>
8000d66e:	20 18       	sub	r8,1
8000d670:	fe c9 e1 a8 	sub	r9,pc,-7768
8000d674:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000d678:	30 09       	mov	r9,0
8000d67a:	cb 5f       	rcall	8000d5e4 <__multadd>
8000d67c:	18 94       	mov	r4,r12
8000d67e:	a3 46       	asr	r6,0x2
8000d680:	c3 40       	breq	8000d6e8 <__pow5mult+0x88>
8000d682:	6e 95       	ld.w	r5,r7[0x24]
8000d684:	58 05       	cp.w	r5,0
8000d686:	c0 91       	brne	8000d698 <__pow5mult+0x38>
8000d688:	31 0c       	mov	r12,16
8000d68a:	fe b0 dd 91 	rcall	800091ac <malloc>
8000d68e:	99 35       	st.w	r12[0xc],r5
8000d690:	8f 9c       	st.w	r7[0x24],r12
8000d692:	99 15       	st.w	r12[0x4],r5
8000d694:	99 25       	st.w	r12[0x8],r5
8000d696:	99 05       	st.w	r12[0x0],r5
8000d698:	6e 93       	ld.w	r3,r7[0x24]
8000d69a:	66 25       	ld.w	r5,r3[0x8]
8000d69c:	58 05       	cp.w	r5,0
8000d69e:	c0 c1       	brne	8000d6b6 <__pow5mult+0x56>
8000d6a0:	e0 6b 02 71 	mov	r11,625
8000d6a4:	0e 9c       	mov	r12,r7
8000d6a6:	c9 7f       	rcall	8000d5d4 <__i2b>
8000d6a8:	87 2c       	st.w	r3[0x8],r12
8000d6aa:	30 08       	mov	r8,0
8000d6ac:	18 95       	mov	r5,r12
8000d6ae:	99 08       	st.w	r12[0x0],r8
8000d6b0:	c0 38       	rjmp	8000d6b6 <__pow5mult+0x56>
8000d6b2:	06 9c       	mov	r12,r3
8000d6b4:	18 95       	mov	r5,r12
8000d6b6:	ed b6 00 00 	bld	r6,0x0
8000d6ba:	c0 b1       	brne	8000d6d0 <__pow5mult+0x70>
8000d6bc:	08 9b       	mov	r11,r4
8000d6be:	0a 9a       	mov	r10,r5
8000d6c0:	0e 9c       	mov	r12,r7
8000d6c2:	c0 9f       	rcall	8000d4d4 <__multiply>
8000d6c4:	08 9b       	mov	r11,r4
8000d6c6:	18 93       	mov	r3,r12
8000d6c8:	0e 9c       	mov	r12,r7
8000d6ca:	06 94       	mov	r4,r3
8000d6cc:	fe b0 fd b6 	rcall	8000d238 <_Bfree>
8000d6d0:	a1 56       	asr	r6,0x1
8000d6d2:	c0 b0       	breq	8000d6e8 <__pow5mult+0x88>
8000d6d4:	6a 03       	ld.w	r3,r5[0x0]
8000d6d6:	58 03       	cp.w	r3,0
8000d6d8:	ce d1       	brne	8000d6b2 <__pow5mult+0x52>
8000d6da:	0a 9a       	mov	r10,r5
8000d6dc:	0a 9b       	mov	r11,r5
8000d6de:	0e 9c       	mov	r12,r7
8000d6e0:	cf ae       	rcall	8000d4d4 <__multiply>
8000d6e2:	8b 0c       	st.w	r5[0x0],r12
8000d6e4:	99 03       	st.w	r12[0x0],r3
8000d6e6:	ce 7b       	rjmp	8000d6b4 <__pow5mult+0x54>
8000d6e8:	08 9c       	mov	r12,r4
8000d6ea:	d8 32       	popm	r0-r7,pc

8000d6ec <_realloc_r>:
8000d6ec:	d4 31       	pushm	r0-r7,lr
8000d6ee:	20 1d       	sub	sp,4
8000d6f0:	16 94       	mov	r4,r11
8000d6f2:	18 92       	mov	r2,r12
8000d6f4:	14 9b       	mov	r11,r10
8000d6f6:	58 04       	cp.w	r4,0
8000d6f8:	c0 51       	brne	8000d702 <_realloc_r+0x16>
8000d6fa:	fe b0 dd 61 	rcall	800091bc <_malloc_r>
8000d6fe:	18 95       	mov	r5,r12
8000d700:	c5 39       	rjmp	8000d9a6 <_realloc_r+0x2ba>
8000d702:	50 0a       	stdsp	sp[0x0],r10
8000d704:	fe b0 e0 14 	rcall	8000972c <__malloc_lock>
8000d708:	40 0b       	lddsp	r11,sp[0x0]
8000d70a:	f6 c8 ff f5 	sub	r8,r11,-11
8000d70e:	e8 c1 00 08 	sub	r1,r4,8
8000d712:	10 96       	mov	r6,r8
8000d714:	62 1c       	ld.w	r12,r1[0x4]
8000d716:	e0 16 ff f8 	andl	r6,0xfff8
8000d71a:	59 68       	cp.w	r8,22
8000d71c:	f9 b6 08 10 	movls	r6,16
8000d720:	16 36       	cp.w	r6,r11
8000d722:	5f 38       	srlo	r8
8000d724:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000d728:	c0 50       	breq	8000d732 <_realloc_r+0x46>
8000d72a:	30 c8       	mov	r8,12
8000d72c:	30 05       	mov	r5,0
8000d72e:	85 38       	st.w	r2[0xc],r8
8000d730:	c3 b9       	rjmp	8000d9a6 <_realloc_r+0x2ba>
8000d732:	18 90       	mov	r0,r12
8000d734:	e0 10 ff fc 	andl	r0,0xfffc
8000d738:	0c 30       	cp.w	r0,r6
8000d73a:	e0 84 01 0b 	brge	8000d950 <_realloc_r+0x264>
8000d73e:	e0 68 04 00 	mov	r8,1024
8000d742:	e2 00 00 09 	add	r9,r1,r0
8000d746:	70 25       	ld.w	r5,r8[0x8]
8000d748:	0a 39       	cp.w	r9,r5
8000d74a:	c0 90       	breq	8000d75c <_realloc_r+0x70>
8000d74c:	72 1a       	ld.w	r10,r9[0x4]
8000d74e:	a1 ca       	cbr	r10,0x0
8000d750:	f2 0a 00 0a 	add	r10,r9,r10
8000d754:	74 1a       	ld.w	r10,r10[0x4]
8000d756:	ed ba 00 00 	bld	r10,0x0
8000d75a:	c2 20       	breq	8000d79e <_realloc_r+0xb2>
8000d75c:	72 1a       	ld.w	r10,r9[0x4]
8000d75e:	e0 1a ff fc 	andl	r10,0xfffc
8000d762:	f4 00 00 03 	add	r3,r10,r0
8000d766:	0a 39       	cp.w	r9,r5
8000d768:	c1 31       	brne	8000d78e <_realloc_r+0xa2>
8000d76a:	ec c7 ff f0 	sub	r7,r6,-16
8000d76e:	0e 33       	cp.w	r3,r7
8000d770:	c1 95       	brlt	8000d7a2 <_realloc_r+0xb6>
8000d772:	e2 06 00 09 	add	r9,r1,r6
8000d776:	0c 13       	sub	r3,r6
8000d778:	a1 a3       	sbr	r3,0x0
8000d77a:	93 13       	st.w	r9[0x4],r3
8000d77c:	91 29       	st.w	r8[0x8],r9
8000d77e:	04 9c       	mov	r12,r2
8000d780:	62 18       	ld.w	r8,r1[0x4]
8000d782:	08 95       	mov	r5,r4
8000d784:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000d788:	10 46       	or	r6,r8
8000d78a:	83 16       	st.w	r1[0x4],r6
8000d78c:	c0 b9       	rjmp	8000d9a2 <_realloc_r+0x2b6>
8000d78e:	0c 33       	cp.w	r3,r6
8000d790:	c0 95       	brlt	8000d7a2 <_realloc_r+0xb6>
8000d792:	72 28       	ld.w	r8,r9[0x8]
8000d794:	02 97       	mov	r7,r1
8000d796:	72 39       	ld.w	r9,r9[0xc]
8000d798:	93 28       	st.w	r9[0x8],r8
8000d79a:	91 39       	st.w	r8[0xc],r9
8000d79c:	cd c8       	rjmp	8000d954 <_realloc_r+0x268>
8000d79e:	30 0a       	mov	r10,0
8000d7a0:	14 99       	mov	r9,r10
8000d7a2:	ed bc 00 00 	bld	r12,0x0
8000d7a6:	e0 80 00 95 	breq	8000d8d0 <_realloc_r+0x1e4>
8000d7aa:	62 07       	ld.w	r7,r1[0x0]
8000d7ac:	e2 07 01 07 	sub	r7,r1,r7
8000d7b0:	6e 1c       	ld.w	r12,r7[0x4]
8000d7b2:	e0 1c ff fc 	andl	r12,0xfffc
8000d7b6:	58 09       	cp.w	r9,0
8000d7b8:	c5 60       	breq	8000d864 <_realloc_r+0x178>
8000d7ba:	f8 00 00 03 	add	r3,r12,r0
8000d7be:	0a 39       	cp.w	r9,r5
8000d7c0:	c4 81       	brne	8000d850 <_realloc_r+0x164>
8000d7c2:	14 03       	add	r3,r10
8000d7c4:	ec c9 ff f0 	sub	r9,r6,-16
8000d7c8:	12 33       	cp.w	r3,r9
8000d7ca:	c4 d5       	brlt	8000d864 <_realloc_r+0x178>
8000d7cc:	6e 3a       	ld.w	r10,r7[0xc]
8000d7ce:	6e 29       	ld.w	r9,r7[0x8]
8000d7d0:	95 29       	st.w	r10[0x8],r9
8000d7d2:	93 3a       	st.w	r9[0xc],r10
8000d7d4:	ee c5 ff f8 	sub	r5,r7,-8
8000d7d8:	e0 ca 00 04 	sub	r10,r0,4
8000d7dc:	e0 4a 00 24 	cp.w	r10,36
8000d7e0:	e0 8b 00 25 	brhi	8000d82a <_realloc_r+0x13e>
8000d7e4:	0a 99       	mov	r9,r5
8000d7e6:	59 3a       	cp.w	r10,19
8000d7e8:	e0 88 00 1a 	brls	8000d81c <_realloc_r+0x130>
8000d7ec:	09 09       	ld.w	r9,r4++
8000d7ee:	8b 09       	st.w	r5[0x0],r9
8000d7f0:	09 09       	ld.w	r9,r4++
8000d7f2:	8f 39       	st.w	r7[0xc],r9
8000d7f4:	ee c9 ff f0 	sub	r9,r7,-16
8000d7f8:	59 ba       	cp.w	r10,27
8000d7fa:	e0 88 00 11 	brls	8000d81c <_realloc_r+0x130>
8000d7fe:	09 0b       	ld.w	r11,r4++
8000d800:	93 0b       	st.w	r9[0x0],r11
8000d802:	09 09       	ld.w	r9,r4++
8000d804:	8f 59       	st.w	r7[0x14],r9
8000d806:	ee c9 ff e8 	sub	r9,r7,-24
8000d80a:	e0 4a 00 24 	cp.w	r10,36
8000d80e:	c0 71       	brne	8000d81c <_realloc_r+0x130>
8000d810:	09 0a       	ld.w	r10,r4++
8000d812:	93 0a       	st.w	r9[0x0],r10
8000d814:	ee c9 ff e0 	sub	r9,r7,-32
8000d818:	09 0a       	ld.w	r10,r4++
8000d81a:	8f 7a       	st.w	r7[0x1c],r10
8000d81c:	09 0a       	ld.w	r10,r4++
8000d81e:	12 aa       	st.w	r9++,r10
8000d820:	68 0a       	ld.w	r10,r4[0x0]
8000d822:	93 0a       	st.w	r9[0x0],r10
8000d824:	68 1a       	ld.w	r10,r4[0x4]
8000d826:	93 1a       	st.w	r9[0x4],r10
8000d828:	c0 78       	rjmp	8000d836 <_realloc_r+0x14a>
8000d82a:	50 08       	stdsp	sp[0x0],r8
8000d82c:	08 9b       	mov	r11,r4
8000d82e:	0a 9c       	mov	r12,r5
8000d830:	fe b0 fc 4d 	rcall	8000d0ca <memmove>
8000d834:	40 08       	lddsp	r8,sp[0x0]
8000d836:	ee 06 00 09 	add	r9,r7,r6
8000d83a:	0c 13       	sub	r3,r6
8000d83c:	a1 a3       	sbr	r3,0x0
8000d83e:	93 13       	st.w	r9[0x4],r3
8000d840:	91 29       	st.w	r8[0x8],r9
8000d842:	04 9c       	mov	r12,r2
8000d844:	6e 18       	ld.w	r8,r7[0x4]
8000d846:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000d84a:	10 46       	or	r6,r8
8000d84c:	8f 16       	st.w	r7[0x4],r6
8000d84e:	ca a8       	rjmp	8000d9a2 <_realloc_r+0x2b6>
8000d850:	14 03       	add	r3,r10
8000d852:	0c 33       	cp.w	r3,r6
8000d854:	c0 85       	brlt	8000d864 <_realloc_r+0x178>
8000d856:	72 28       	ld.w	r8,r9[0x8]
8000d858:	72 39       	ld.w	r9,r9[0xc]
8000d85a:	93 28       	st.w	r9[0x8],r8
8000d85c:	91 39       	st.w	r8[0xc],r9
8000d85e:	6e 28       	ld.w	r8,r7[0x8]
8000d860:	6e 39       	ld.w	r9,r7[0xc]
8000d862:	c0 78       	rjmp	8000d870 <_realloc_r+0x184>
8000d864:	f8 00 00 03 	add	r3,r12,r0
8000d868:	0c 33       	cp.w	r3,r6
8000d86a:	c3 35       	brlt	8000d8d0 <_realloc_r+0x1e4>
8000d86c:	6e 39       	ld.w	r9,r7[0xc]
8000d86e:	6e 28       	ld.w	r8,r7[0x8]
8000d870:	93 28       	st.w	r9[0x8],r8
8000d872:	91 39       	st.w	r8[0xc],r9
8000d874:	e0 ca 00 04 	sub	r10,r0,4
8000d878:	ee cc ff f8 	sub	r12,r7,-8
8000d87c:	e0 4a 00 24 	cp.w	r10,36
8000d880:	e0 8b 00 24 	brhi	8000d8c8 <_realloc_r+0x1dc>
8000d884:	59 3a       	cp.w	r10,19
8000d886:	e0 88 00 1a 	brls	8000d8ba <_realloc_r+0x1ce>
8000d88a:	09 08       	ld.w	r8,r4++
8000d88c:	99 08       	st.w	r12[0x0],r8
8000d88e:	09 08       	ld.w	r8,r4++
8000d890:	8f 38       	st.w	r7[0xc],r8
8000d892:	ee cc ff f0 	sub	r12,r7,-16
8000d896:	59 ba       	cp.w	r10,27
8000d898:	e0 88 00 11 	brls	8000d8ba <_realloc_r+0x1ce>
8000d89c:	09 08       	ld.w	r8,r4++
8000d89e:	99 08       	st.w	r12[0x0],r8
8000d8a0:	09 08       	ld.w	r8,r4++
8000d8a2:	8f 58       	st.w	r7[0x14],r8
8000d8a4:	ee cc ff e8 	sub	r12,r7,-24
8000d8a8:	e0 4a 00 24 	cp.w	r10,36
8000d8ac:	c0 71       	brne	8000d8ba <_realloc_r+0x1ce>
8000d8ae:	09 08       	ld.w	r8,r4++
8000d8b0:	99 08       	st.w	r12[0x0],r8
8000d8b2:	ee cc ff e0 	sub	r12,r7,-32
8000d8b6:	09 08       	ld.w	r8,r4++
8000d8b8:	8f 78       	st.w	r7[0x1c],r8
8000d8ba:	09 08       	ld.w	r8,r4++
8000d8bc:	18 a8       	st.w	r12++,r8
8000d8be:	68 08       	ld.w	r8,r4[0x0]
8000d8c0:	99 08       	st.w	r12[0x0],r8
8000d8c2:	68 18       	ld.w	r8,r4[0x4]
8000d8c4:	99 18       	st.w	r12[0x4],r8
8000d8c6:	c4 78       	rjmp	8000d954 <_realloc_r+0x268>
8000d8c8:	08 9b       	mov	r11,r4
8000d8ca:	fe b0 fc 00 	rcall	8000d0ca <memmove>
8000d8ce:	c4 38       	rjmp	8000d954 <_realloc_r+0x268>
8000d8d0:	04 9c       	mov	r12,r2
8000d8d2:	fe b0 dc 75 	rcall	800091bc <_malloc_r>
8000d8d6:	18 95       	mov	r5,r12
8000d8d8:	c3 a0       	breq	8000d94c <_realloc_r+0x260>
8000d8da:	62 18       	ld.w	r8,r1[0x4]
8000d8dc:	f8 c9 00 08 	sub	r9,r12,8
8000d8e0:	a1 c8       	cbr	r8,0x0
8000d8e2:	e2 08 00 08 	add	r8,r1,r8
8000d8e6:	10 39       	cp.w	r9,r8
8000d8e8:	c0 71       	brne	8000d8f6 <_realloc_r+0x20a>
8000d8ea:	72 13       	ld.w	r3,r9[0x4]
8000d8ec:	02 97       	mov	r7,r1
8000d8ee:	e0 13 ff fc 	andl	r3,0xfffc
8000d8f2:	00 03       	add	r3,r0
8000d8f4:	c3 08       	rjmp	8000d954 <_realloc_r+0x268>
8000d8f6:	e0 ca 00 04 	sub	r10,r0,4
8000d8fa:	e0 4a 00 24 	cp.w	r10,36
8000d8fe:	e0 8b 00 20 	brhi	8000d93e <_realloc_r+0x252>
8000d902:	08 99       	mov	r9,r4
8000d904:	18 98       	mov	r8,r12
8000d906:	59 3a       	cp.w	r10,19
8000d908:	e0 88 00 14 	brls	8000d930 <_realloc_r+0x244>
8000d90c:	13 0b       	ld.w	r11,r9++
8000d90e:	10 ab       	st.w	r8++,r11
8000d910:	13 0b       	ld.w	r11,r9++
8000d912:	10 ab       	st.w	r8++,r11
8000d914:	59 ba       	cp.w	r10,27
8000d916:	e0 88 00 0d 	brls	8000d930 <_realloc_r+0x244>
8000d91a:	13 0b       	ld.w	r11,r9++
8000d91c:	10 ab       	st.w	r8++,r11
8000d91e:	13 0b       	ld.w	r11,r9++
8000d920:	10 ab       	st.w	r8++,r11
8000d922:	e0 4a 00 24 	cp.w	r10,36
8000d926:	c0 51       	brne	8000d930 <_realloc_r+0x244>
8000d928:	13 0a       	ld.w	r10,r9++
8000d92a:	10 aa       	st.w	r8++,r10
8000d92c:	13 0a       	ld.w	r10,r9++
8000d92e:	10 aa       	st.w	r8++,r10
8000d930:	13 0a       	ld.w	r10,r9++
8000d932:	10 aa       	st.w	r8++,r10
8000d934:	72 0a       	ld.w	r10,r9[0x0]
8000d936:	91 0a       	st.w	r8[0x0],r10
8000d938:	72 19       	ld.w	r9,r9[0x4]
8000d93a:	91 19       	st.w	r8[0x4],r9
8000d93c:	c0 48       	rjmp	8000d944 <_realloc_r+0x258>
8000d93e:	08 9b       	mov	r11,r4
8000d940:	fe b0 fb c5 	rcall	8000d0ca <memmove>
8000d944:	08 9b       	mov	r11,r4
8000d946:	04 9c       	mov	r12,r2
8000d948:	fe b0 df f0 	rcall	80009928 <_free_r>
8000d94c:	04 9c       	mov	r12,r2
8000d94e:	c2 a8       	rjmp	8000d9a2 <_realloc_r+0x2b6>
8000d950:	00 93       	mov	r3,r0
8000d952:	02 97       	mov	r7,r1
8000d954:	e6 06 01 09 	sub	r9,r3,r6
8000d958:	6e 18       	ld.w	r8,r7[0x4]
8000d95a:	58 f9       	cp.w	r9,15
8000d95c:	e0 88 00 16 	brls	8000d988 <_realloc_r+0x29c>
8000d960:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000d964:	ed e8 10 08 	or	r8,r6,r8
8000d968:	8f 18       	st.w	r7[0x4],r8
8000d96a:	12 98       	mov	r8,r9
8000d96c:	a1 a8       	sbr	r8,0x0
8000d96e:	ee 06 00 0b 	add	r11,r7,r6
8000d972:	f6 09 00 09 	add	r9,r11,r9
8000d976:	97 18       	st.w	r11[0x4],r8
8000d978:	72 18       	ld.w	r8,r9[0x4]
8000d97a:	a1 a8       	sbr	r8,0x0
8000d97c:	2f 8b       	sub	r11,-8
8000d97e:	93 18       	st.w	r9[0x4],r8
8000d980:	04 9c       	mov	r12,r2
8000d982:	fe b0 df d3 	rcall	80009928 <_free_r>
8000d986:	c0 b8       	rjmp	8000d99c <_realloc_r+0x2b0>
8000d988:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000d98c:	e7 e8 10 08 	or	r8,r3,r8
8000d990:	8f 18       	st.w	r7[0x4],r8
8000d992:	ee 03 00 03 	add	r3,r7,r3
8000d996:	66 18       	ld.w	r8,r3[0x4]
8000d998:	a1 a8       	sbr	r8,0x0
8000d99a:	87 18       	st.w	r3[0x4],r8
8000d99c:	04 9c       	mov	r12,r2
8000d99e:	ee c5 ff f8 	sub	r5,r7,-8
8000d9a2:	fe b0 de c6 	rcall	8000972e <__malloc_unlock>
8000d9a6:	0a 9c       	mov	r12,r5
8000d9a8:	2f fd       	sub	sp,-4
8000d9aa:	d8 32       	popm	r0-r7,pc

8000d9ac <__isinfd>:
8000d9ac:	14 98       	mov	r8,r10
8000d9ae:	fc 19 7f f0 	movh	r9,0x7ff0
8000d9b2:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000d9b6:	f0 0b 11 00 	rsub	r11,r8,0
8000d9ba:	f7 e8 10 08 	or	r8,r11,r8
8000d9be:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000d9c2:	f2 08 01 08 	sub	r8,r9,r8
8000d9c6:	f0 0c 11 00 	rsub	r12,r8,0
8000d9ca:	f9 e8 10 08 	or	r8,r12,r8
8000d9ce:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000d9d2:	2f fc       	sub	r12,-1
8000d9d4:	5e fc       	retal	r12

8000d9d6 <__isnand>:
8000d9d6:	14 98       	mov	r8,r10
8000d9d8:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000d9dc:	f0 0c 11 00 	rsub	r12,r8,0
8000d9e0:	10 4c       	or	r12,r8
8000d9e2:	fc 18 7f f0 	movh	r8,0x7ff0
8000d9e6:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000d9ea:	f0 0c 01 0c 	sub	r12,r8,r12
8000d9ee:	bf 9c       	lsr	r12,0x1f
8000d9f0:	5e fc       	retal	r12
8000d9f2:	d7 03       	nop

8000d9f4 <__sclose>:
8000d9f4:	d4 01       	pushm	lr
8000d9f6:	96 7b       	ld.sh	r11,r11[0xe]
8000d9f8:	c8 2c       	rcall	8000dafc <_close_r>
8000d9fa:	d8 02       	popm	pc

8000d9fc <__sseek>:
8000d9fc:	d4 21       	pushm	r4-r7,lr
8000d9fe:	16 97       	mov	r7,r11
8000da00:	96 7b       	ld.sh	r11,r11[0xe]
8000da02:	c0 3d       	rcall	8000dc08 <_lseek_r>
8000da04:	8e 68       	ld.sh	r8,r7[0xc]
8000da06:	10 99       	mov	r9,r8
8000da08:	ad c8       	cbr	r8,0xc
8000da0a:	ad a9       	sbr	r9,0xc
8000da0c:	5b fc       	cp.w	r12,-1
8000da0e:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000da12:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000da16:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000da1a:	d8 22       	popm	r4-r7,pc

8000da1c <__swrite>:
8000da1c:	d4 21       	pushm	r4-r7,lr
8000da1e:	96 68       	ld.sh	r8,r11[0xc]
8000da20:	16 97       	mov	r7,r11
8000da22:	14 95       	mov	r5,r10
8000da24:	12 94       	mov	r4,r9
8000da26:	e2 18 01 00 	andl	r8,0x100,COH
8000da2a:	18 96       	mov	r6,r12
8000da2c:	c0 50       	breq	8000da36 <__swrite+0x1a>
8000da2e:	30 29       	mov	r9,2
8000da30:	30 0a       	mov	r10,0
8000da32:	96 7b       	ld.sh	r11,r11[0xe]
8000da34:	ce ac       	rcall	8000dc08 <_lseek_r>
8000da36:	8e 68       	ld.sh	r8,r7[0xc]
8000da38:	ad c8       	cbr	r8,0xc
8000da3a:	08 99       	mov	r9,r4
8000da3c:	0a 9a       	mov	r10,r5
8000da3e:	8e 7b       	ld.sh	r11,r7[0xe]
8000da40:	0c 9c       	mov	r12,r6
8000da42:	ae 68       	st.h	r7[0xc],r8
8000da44:	c1 cc       	rcall	8000da7c <_write_r>
8000da46:	d8 22       	popm	r4-r7,pc

8000da48 <__sread>:
8000da48:	d4 21       	pushm	r4-r7,lr
8000da4a:	16 97       	mov	r7,r11
8000da4c:	96 7b       	ld.sh	r11,r11[0xe]
8000da4e:	cf 1c       	rcall	8000dc30 <_read_r>
8000da50:	c0 65       	brlt	8000da5c <__sread+0x14>
8000da52:	6f 58       	ld.w	r8,r7[0x54]
8000da54:	18 08       	add	r8,r12
8000da56:	ef 48 00 54 	st.w	r7[84],r8
8000da5a:	d8 22       	popm	r4-r7,pc
8000da5c:	8e 68       	ld.sh	r8,r7[0xc]
8000da5e:	ad c8       	cbr	r8,0xc
8000da60:	ae 68       	st.h	r7[0xc],r8
8000da62:	d8 22       	popm	r4-r7,pc

8000da64 <strlen>:
8000da64:	30 09       	mov	r9,0
8000da66:	18 98       	mov	r8,r12
8000da68:	c0 28       	rjmp	8000da6c <strlen+0x8>
8000da6a:	2f f8       	sub	r8,-1
8000da6c:	11 8a       	ld.ub	r10,r8[0x0]
8000da6e:	f2 0a 18 00 	cp.b	r10,r9
8000da72:	cf c1       	brne	8000da6a <strlen+0x6>
8000da74:	f0 0c 01 0c 	sub	r12,r8,r12
8000da78:	5e fc       	retal	r12
8000da7a:	d7 03       	nop

8000da7c <_write_r>:
8000da7c:	d4 21       	pushm	r4-r7,lr
8000da7e:	16 98       	mov	r8,r11
8000da80:	18 97       	mov	r7,r12
8000da82:	10 9c       	mov	r12,r8
8000da84:	30 08       	mov	r8,0
8000da86:	14 9b       	mov	r11,r10
8000da88:	e0 66 0c d4 	mov	r6,3284
8000da8c:	12 9a       	mov	r10,r9
8000da8e:	8d 08       	st.w	r6[0x0],r8
8000da90:	fe b0 de 7e 	rcall	8000978c <_write>
8000da94:	5b fc       	cp.w	r12,-1
8000da96:	c0 51       	brne	8000daa0 <_write_r+0x24>
8000da98:	6c 08       	ld.w	r8,r6[0x0]
8000da9a:	58 08       	cp.w	r8,0
8000da9c:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000daa0:	d8 22       	popm	r4-r7,pc
8000daa2:	d7 03       	nop

8000daa4 <_calloc_r>:
8000daa4:	d4 21       	pushm	r4-r7,lr
8000daa6:	f4 0b 02 4b 	mul	r11,r10,r11
8000daaa:	fe b0 db 89 	rcall	800091bc <_malloc_r>
8000daae:	18 97       	mov	r7,r12
8000dab0:	c2 30       	breq	8000daf6 <_calloc_r+0x52>
8000dab2:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000dab6:	e0 1a ff fc 	andl	r10,0xfffc
8000daba:	20 4a       	sub	r10,4
8000dabc:	e0 4a 00 24 	cp.w	r10,36
8000dac0:	e0 8b 00 18 	brhi	8000daf0 <_calloc_r+0x4c>
8000dac4:	18 98       	mov	r8,r12
8000dac6:	59 3a       	cp.w	r10,19
8000dac8:	e0 88 00 0f 	brls	8000dae6 <_calloc_r+0x42>
8000dacc:	30 09       	mov	r9,0
8000dace:	10 a9       	st.w	r8++,r9
8000dad0:	10 a9       	st.w	r8++,r9
8000dad2:	59 ba       	cp.w	r10,27
8000dad4:	e0 88 00 09 	brls	8000dae6 <_calloc_r+0x42>
8000dad8:	10 a9       	st.w	r8++,r9
8000dada:	10 a9       	st.w	r8++,r9
8000dadc:	e0 4a 00 24 	cp.w	r10,36
8000dae0:	c0 31       	brne	8000dae6 <_calloc_r+0x42>
8000dae2:	10 a9       	st.w	r8++,r9
8000dae4:	10 a9       	st.w	r8++,r9
8000dae6:	30 09       	mov	r9,0
8000dae8:	10 a9       	st.w	r8++,r9
8000daea:	91 19       	st.w	r8[0x4],r9
8000daec:	91 09       	st.w	r8[0x0],r9
8000daee:	c0 48       	rjmp	8000daf6 <_calloc_r+0x52>
8000daf0:	30 0b       	mov	r11,0
8000daf2:	fe b0 fb 0b 	rcall	8000d108 <memset>
8000daf6:	0e 9c       	mov	r12,r7
8000daf8:	d8 22       	popm	r4-r7,pc
8000dafa:	d7 03       	nop

8000dafc <_close_r>:
8000dafc:	d4 21       	pushm	r4-r7,lr
8000dafe:	30 08       	mov	r8,0
8000db00:	18 97       	mov	r7,r12
8000db02:	e0 66 0c d4 	mov	r6,3284
8000db06:	16 9c       	mov	r12,r11
8000db08:	8d 08       	st.w	r6[0x0],r8
8000db0a:	fe b0 de 23 	rcall	80009750 <_close>
8000db0e:	5b fc       	cp.w	r12,-1
8000db10:	c0 51       	brne	8000db1a <_close_r+0x1e>
8000db12:	6c 08       	ld.w	r8,r6[0x0]
8000db14:	58 08       	cp.w	r8,0
8000db16:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000db1a:	d8 22       	popm	r4-r7,pc

8000db1c <_fclose_r>:
8000db1c:	d4 21       	pushm	r4-r7,lr
8000db1e:	18 96       	mov	r6,r12
8000db20:	16 97       	mov	r7,r11
8000db22:	58 0b       	cp.w	r11,0
8000db24:	c0 31       	brne	8000db2a <_fclose_r+0xe>
8000db26:	16 95       	mov	r5,r11
8000db28:	c5 38       	rjmp	8000dbce <_fclose_r+0xb2>
8000db2a:	fe b0 f8 55 	rcall	8000cbd4 <__sfp_lock_acquire>
8000db2e:	58 06       	cp.w	r6,0
8000db30:	c0 70       	breq	8000db3e <_fclose_r+0x22>
8000db32:	6c 68       	ld.w	r8,r6[0x18]
8000db34:	58 08       	cp.w	r8,0
8000db36:	c0 41       	brne	8000db3e <_fclose_r+0x22>
8000db38:	0c 9c       	mov	r12,r6
8000db3a:	fe b0 f8 9f 	rcall	8000cc78 <__sinit>
8000db3e:	fe c8 e7 16 	sub	r8,pc,-6378
8000db42:	10 37       	cp.w	r7,r8
8000db44:	c0 31       	brne	8000db4a <_fclose_r+0x2e>
8000db46:	6c 07       	ld.w	r7,r6[0x0]
8000db48:	c0 c8       	rjmp	8000db60 <_fclose_r+0x44>
8000db4a:	fe c8 e7 02 	sub	r8,pc,-6398
8000db4e:	10 37       	cp.w	r7,r8
8000db50:	c0 31       	brne	8000db56 <_fclose_r+0x3a>
8000db52:	6c 17       	ld.w	r7,r6[0x4]
8000db54:	c0 68       	rjmp	8000db60 <_fclose_r+0x44>
8000db56:	fe c8 e6 ee 	sub	r8,pc,-6418
8000db5a:	10 37       	cp.w	r7,r8
8000db5c:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000db60:	8e 69       	ld.sh	r9,r7[0xc]
8000db62:	30 08       	mov	r8,0
8000db64:	f0 09 19 00 	cp.h	r9,r8
8000db68:	c0 51       	brne	8000db72 <_fclose_r+0x56>
8000db6a:	fe b0 f8 36 	rcall	8000cbd6 <__sfp_lock_release>
8000db6e:	30 05       	mov	r5,0
8000db70:	c2 f8       	rjmp	8000dbce <_fclose_r+0xb2>
8000db72:	0e 9b       	mov	r11,r7
8000db74:	0c 9c       	mov	r12,r6
8000db76:	fe b0 f7 a9 	rcall	8000cac8 <_fflush_r>
8000db7a:	6e c8       	ld.w	r8,r7[0x30]
8000db7c:	18 95       	mov	r5,r12
8000db7e:	58 08       	cp.w	r8,0
8000db80:	c0 60       	breq	8000db8c <_fclose_r+0x70>
8000db82:	6e 8b       	ld.w	r11,r7[0x20]
8000db84:	0c 9c       	mov	r12,r6
8000db86:	5d 18       	icall	r8
8000db88:	f9 b5 05 ff 	movlt	r5,-1
8000db8c:	8e 68       	ld.sh	r8,r7[0xc]
8000db8e:	ed b8 00 07 	bld	r8,0x7
8000db92:	c0 51       	brne	8000db9c <_fclose_r+0x80>
8000db94:	6e 4b       	ld.w	r11,r7[0x10]
8000db96:	0c 9c       	mov	r12,r6
8000db98:	fe b0 de c8 	rcall	80009928 <_free_r>
8000db9c:	6e db       	ld.w	r11,r7[0x34]
8000db9e:	58 0b       	cp.w	r11,0
8000dba0:	c0 a0       	breq	8000dbb4 <_fclose_r+0x98>
8000dba2:	ee c8 ff bc 	sub	r8,r7,-68
8000dba6:	10 3b       	cp.w	r11,r8
8000dba8:	c0 40       	breq	8000dbb0 <_fclose_r+0x94>
8000dbaa:	0c 9c       	mov	r12,r6
8000dbac:	fe b0 de be 	rcall	80009928 <_free_r>
8000dbb0:	30 08       	mov	r8,0
8000dbb2:	8f d8       	st.w	r7[0x34],r8
8000dbb4:	6f 2b       	ld.w	r11,r7[0x48]
8000dbb6:	58 0b       	cp.w	r11,0
8000dbb8:	c0 70       	breq	8000dbc6 <_fclose_r+0xaa>
8000dbba:	0c 9c       	mov	r12,r6
8000dbbc:	fe b0 de b6 	rcall	80009928 <_free_r>
8000dbc0:	30 08       	mov	r8,0
8000dbc2:	ef 48 00 48 	st.w	r7[72],r8
8000dbc6:	30 08       	mov	r8,0
8000dbc8:	ae 68       	st.h	r7[0xc],r8
8000dbca:	fe b0 f8 06 	rcall	8000cbd6 <__sfp_lock_release>
8000dbce:	0a 9c       	mov	r12,r5
8000dbd0:	d8 22       	popm	r4-r7,pc
8000dbd2:	d7 03       	nop

8000dbd4 <fclose>:
8000dbd4:	d4 01       	pushm	lr
8000dbd6:	e0 68 09 00 	mov	r8,2304
8000dbda:	18 9b       	mov	r11,r12
8000dbdc:	70 0c       	ld.w	r12,r8[0x0]
8000dbde:	c9 ff       	rcall	8000db1c <_fclose_r>
8000dbe0:	d8 02       	popm	pc
8000dbe2:	d7 03       	nop

8000dbe4 <_fstat_r>:
8000dbe4:	d4 21       	pushm	r4-r7,lr
8000dbe6:	16 98       	mov	r8,r11
8000dbe8:	18 97       	mov	r7,r12
8000dbea:	10 9c       	mov	r12,r8
8000dbec:	30 08       	mov	r8,0
8000dbee:	e0 66 0c d4 	mov	r6,3284
8000dbf2:	14 9b       	mov	r11,r10
8000dbf4:	8d 08       	st.w	r6[0x0],r8
8000dbf6:	fe b0 dd e9 	rcall	800097c8 <_fstat>
8000dbfa:	5b fc       	cp.w	r12,-1
8000dbfc:	c0 51       	brne	8000dc06 <_fstat_r+0x22>
8000dbfe:	6c 08       	ld.w	r8,r6[0x0]
8000dc00:	58 08       	cp.w	r8,0
8000dc02:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000dc06:	d8 22       	popm	r4-r7,pc

8000dc08 <_lseek_r>:
8000dc08:	d4 21       	pushm	r4-r7,lr
8000dc0a:	16 98       	mov	r8,r11
8000dc0c:	18 97       	mov	r7,r12
8000dc0e:	10 9c       	mov	r12,r8
8000dc10:	30 08       	mov	r8,0
8000dc12:	14 9b       	mov	r11,r10
8000dc14:	e0 66 0c d4 	mov	r6,3284
8000dc18:	12 9a       	mov	r10,r9
8000dc1a:	8d 08       	st.w	r6[0x0],r8
8000dc1c:	fe b0 dd a4 	rcall	80009764 <_lseek>
8000dc20:	5b fc       	cp.w	r12,-1
8000dc22:	c0 51       	brne	8000dc2c <_lseek_r+0x24>
8000dc24:	6c 08       	ld.w	r8,r6[0x0]
8000dc26:	58 08       	cp.w	r8,0
8000dc28:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000dc2c:	d8 22       	popm	r4-r7,pc
8000dc2e:	d7 03       	nop

8000dc30 <_read_r>:
8000dc30:	d4 21       	pushm	r4-r7,lr
8000dc32:	16 98       	mov	r8,r11
8000dc34:	18 97       	mov	r7,r12
8000dc36:	10 9c       	mov	r12,r8
8000dc38:	30 08       	mov	r8,0
8000dc3a:	14 9b       	mov	r11,r10
8000dc3c:	e0 66 0c d4 	mov	r6,3284
8000dc40:	12 9a       	mov	r10,r9
8000dc42:	8d 08       	st.w	r6[0x0],r8
8000dc44:	fe b0 dd 9a 	rcall	80009778 <_read>
8000dc48:	5b fc       	cp.w	r12,-1
8000dc4a:	c0 51       	brne	8000dc54 <_read_r+0x24>
8000dc4c:	6c 08       	ld.w	r8,r6[0x0]
8000dc4e:	58 08       	cp.w	r8,0
8000dc50:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000dc54:	d8 22       	popm	r4-r7,pc
8000dc56:	d7 03       	nop

8000dc58 <__avr32_f64_mul>:
8000dc58:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000dc5c:	e0 80 00 dc 	breq	8000de14 <__avr32_f64_mul_op1_zero>
8000dc60:	d4 21       	pushm	r4-r7,lr
8000dc62:	f7 e9 20 0e 	eor	lr,r11,r9
8000dc66:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000dc6a:	30 15       	mov	r5,1
8000dc6c:	c4 30       	breq	8000dcf2 <__avr32_f64_mul_op1_subnormal>
8000dc6e:	ab 6b       	lsl	r11,0xa
8000dc70:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000dc74:	ab 6a       	lsl	r10,0xa
8000dc76:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000dc7a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000dc7e:	c5 c0       	breq	8000dd36 <__avr32_f64_mul_op2_subnormal>
8000dc80:	a1 78       	lsl	r8,0x1
8000dc82:	5c f9       	rol	r9
8000dc84:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000dc88:	e0 47 07 ff 	cp.w	r7,2047
8000dc8c:	c7 70       	breq	8000dd7a <__avr32_f64_mul_op_nan_or_inf>
8000dc8e:	e0 46 07 ff 	cp.w	r6,2047
8000dc92:	c7 40       	breq	8000dd7a <__avr32_f64_mul_op_nan_or_inf>
8000dc94:	ee 06 00 0c 	add	r12,r7,r6
8000dc98:	e0 2c 03 fe 	sub	r12,1022
8000dc9c:	f6 08 06 44 	mulu.d	r4,r11,r8
8000dca0:	f4 09 07 44 	macu.d	r4,r10,r9
8000dca4:	f4 08 06 46 	mulu.d	r6,r10,r8
8000dca8:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000dcac:	08 07       	add	r7,r4
8000dcae:	f4 05 00 4a 	adc	r10,r10,r5
8000dcb2:	5c 0b       	acr	r11
8000dcb4:	ed bb 00 14 	bld	r11,0x14
8000dcb8:	c0 50       	breq	8000dcc2 <__avr32_f64_mul+0x6a>
8000dcba:	a1 77       	lsl	r7,0x1
8000dcbc:	5c fa       	rol	r10
8000dcbe:	5c fb       	rol	r11
8000dcc0:	20 1c       	sub	r12,1
8000dcc2:	58 0c       	cp.w	r12,0
8000dcc4:	e0 8a 00 6f 	brle	8000dda2 <__avr32_f64_mul_res_subnormal>
8000dcc8:	e0 4c 07 ff 	cp.w	r12,2047
8000dccc:	e0 84 00 9c 	brge	8000de04 <__avr32_f64_mul_res_inf>
8000dcd0:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000dcd4:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000dcd8:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000dcdc:	ee 17 80 00 	eorh	r7,0x8000
8000dce0:	f1 b7 04 20 	satu	r7,0x1
8000dce4:	0e 0a       	add	r10,r7
8000dce6:	5c 0b       	acr	r11
8000dce8:	ed be 00 1f 	bld	lr,0x1f
8000dcec:	ef bb 00 1f 	bst	r11,0x1f
8000dcf0:	d8 22       	popm	r4-r7,pc

8000dcf2 <__avr32_f64_mul_op1_subnormal>:
8000dcf2:	e4 1b 00 0f 	andh	r11,0xf
8000dcf6:	f4 0c 12 00 	clz	r12,r10
8000dcfa:	f6 06 12 00 	clz	r6,r11
8000dcfe:	f7 bc 03 e1 	sublo	r12,-31
8000dd02:	f8 06 17 30 	movlo	r6,r12
8000dd06:	f7 b6 02 01 	subhs	r6,1
8000dd0a:	e0 46 00 20 	cp.w	r6,32
8000dd0e:	c0 d4       	brge	8000dd28 <__avr32_f64_mul_op1_subnormal+0x36>
8000dd10:	ec 0c 11 20 	rsub	r12,r6,32
8000dd14:	f6 06 09 4b 	lsl	r11,r11,r6
8000dd18:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000dd1c:	18 4b       	or	r11,r12
8000dd1e:	f4 06 09 4a 	lsl	r10,r10,r6
8000dd22:	20 b6       	sub	r6,11
8000dd24:	0c 17       	sub	r7,r6
8000dd26:	ca ab       	rjmp	8000dc7a <__avr32_f64_mul+0x22>
8000dd28:	f4 06 09 4b 	lsl	r11,r10,r6
8000dd2c:	c6 40       	breq	8000ddf4 <__avr32_f64_mul_res_zero>
8000dd2e:	30 0a       	mov	r10,0
8000dd30:	20 b6       	sub	r6,11
8000dd32:	0c 17       	sub	r7,r6
8000dd34:	ca 3b       	rjmp	8000dc7a <__avr32_f64_mul+0x22>

8000dd36 <__avr32_f64_mul_op2_subnormal>:
8000dd36:	e4 19 00 0f 	andh	r9,0xf
8000dd3a:	f0 0c 12 00 	clz	r12,r8
8000dd3e:	f2 05 12 00 	clz	r5,r9
8000dd42:	f7 bc 03 ea 	sublo	r12,-22
8000dd46:	f8 05 17 30 	movlo	r5,r12
8000dd4a:	f7 b5 02 0a 	subhs	r5,10
8000dd4e:	e0 45 00 20 	cp.w	r5,32
8000dd52:	c0 d4       	brge	8000dd6c <__avr32_f64_mul_op2_subnormal+0x36>
8000dd54:	ea 0c 11 20 	rsub	r12,r5,32
8000dd58:	f2 05 09 49 	lsl	r9,r9,r5
8000dd5c:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000dd60:	18 49       	or	r9,r12
8000dd62:	f0 05 09 48 	lsl	r8,r8,r5
8000dd66:	20 25       	sub	r5,2
8000dd68:	0a 16       	sub	r6,r5
8000dd6a:	c8 fb       	rjmp	8000dc88 <__avr32_f64_mul+0x30>
8000dd6c:	f0 05 09 49 	lsl	r9,r8,r5
8000dd70:	c4 20       	breq	8000ddf4 <__avr32_f64_mul_res_zero>
8000dd72:	30 08       	mov	r8,0
8000dd74:	20 25       	sub	r5,2
8000dd76:	0a 16       	sub	r6,r5
8000dd78:	c8 8b       	rjmp	8000dc88 <__avr32_f64_mul+0x30>

8000dd7a <__avr32_f64_mul_op_nan_or_inf>:
8000dd7a:	e4 19 00 0f 	andh	r9,0xf
8000dd7e:	e4 1b 00 0f 	andh	r11,0xf
8000dd82:	14 4b       	or	r11,r10
8000dd84:	10 49       	or	r9,r8
8000dd86:	e0 47 07 ff 	cp.w	r7,2047
8000dd8a:	c0 91       	brne	8000dd9c <__avr32_f64_mul_op1_not_naninf>
8000dd8c:	58 0b       	cp.w	r11,0
8000dd8e:	c3 81       	brne	8000ddfe <__avr32_f64_mul_res_nan>
8000dd90:	e0 46 07 ff 	cp.w	r6,2047
8000dd94:	c3 81       	brne	8000de04 <__avr32_f64_mul_res_inf>
8000dd96:	58 09       	cp.w	r9,0
8000dd98:	c3 60       	breq	8000de04 <__avr32_f64_mul_res_inf>
8000dd9a:	c3 28       	rjmp	8000ddfe <__avr32_f64_mul_res_nan>

8000dd9c <__avr32_f64_mul_op1_not_naninf>:
8000dd9c:	58 09       	cp.w	r9,0
8000dd9e:	c3 30       	breq	8000de04 <__avr32_f64_mul_res_inf>
8000dda0:	c2 f8       	rjmp	8000ddfe <__avr32_f64_mul_res_nan>

8000dda2 <__avr32_f64_mul_res_subnormal>:
8000dda2:	5c 3c       	neg	r12
8000dda4:	2f fc       	sub	r12,-1
8000dda6:	f1 bc 04 c0 	satu	r12,0x6
8000ddaa:	e0 4c 00 20 	cp.w	r12,32
8000ddae:	c1 14       	brge	8000ddd0 <__avr32_f64_mul_res_subnormal+0x2e>
8000ddb0:	f8 08 11 20 	rsub	r8,r12,32
8000ddb4:	0e 46       	or	r6,r7
8000ddb6:	ee 0c 0a 47 	lsr	r7,r7,r12
8000ddba:	f4 08 09 49 	lsl	r9,r10,r8
8000ddbe:	12 47       	or	r7,r9
8000ddc0:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000ddc4:	f6 08 09 49 	lsl	r9,r11,r8
8000ddc8:	12 4a       	or	r10,r9
8000ddca:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000ddce:	c8 3b       	rjmp	8000dcd4 <__avr32_f64_mul+0x7c>
8000ddd0:	f8 08 11 20 	rsub	r8,r12,32
8000ddd4:	f9 b9 00 00 	moveq	r9,0
8000ddd8:	c0 30       	breq	8000ddde <__avr32_f64_mul_res_subnormal+0x3c>
8000ddda:	f6 08 09 49 	lsl	r9,r11,r8
8000ddde:	0e 46       	or	r6,r7
8000dde0:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000dde4:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000dde8:	f3 ea 10 07 	or	r7,r9,r10
8000ddec:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000ddf0:	30 0b       	mov	r11,0
8000ddf2:	c7 1b       	rjmp	8000dcd4 <__avr32_f64_mul+0x7c>

8000ddf4 <__avr32_f64_mul_res_zero>:
8000ddf4:	1c 9b       	mov	r11,lr
8000ddf6:	e6 1b 80 00 	andh	r11,0x8000,COH
8000ddfa:	30 0a       	mov	r10,0
8000ddfc:	d8 22       	popm	r4-r7,pc

8000ddfe <__avr32_f64_mul_res_nan>:
8000ddfe:	3f fb       	mov	r11,-1
8000de00:	3f fa       	mov	r10,-1
8000de02:	d8 22       	popm	r4-r7,pc

8000de04 <__avr32_f64_mul_res_inf>:
8000de04:	f0 6b 00 00 	mov	r11,-1048576
8000de08:	ed be 00 1f 	bld	lr,0x1f
8000de0c:	ef bb 00 1f 	bst	r11,0x1f
8000de10:	30 0a       	mov	r10,0
8000de12:	d8 22       	popm	r4-r7,pc

8000de14 <__avr32_f64_mul_op1_zero>:
8000de14:	f7 e9 20 0b 	eor	r11,r11,r9
8000de18:	e6 1b 80 00 	andh	r11,0x8000,COH
8000de1c:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000de20:	e0 4c 07 ff 	cp.w	r12,2047
8000de24:	5e 1c       	retne	r12
8000de26:	3f fa       	mov	r10,-1
8000de28:	3f fb       	mov	r11,-1
8000de2a:	5e fc       	retal	r12

8000de2c <__avr32_f64_sub_from_add>:
8000de2c:	ee 19 80 00 	eorh	r9,0x8000

8000de30 <__avr32_f64_sub>:
8000de30:	f7 e9 20 0c 	eor	r12,r11,r9
8000de34:	e0 86 00 ca 	brmi	8000dfc8 <__avr32_f64_add_from_sub>
8000de38:	eb cd 40 e0 	pushm	r5-r7,lr
8000de3c:	16 9c       	mov	r12,r11
8000de3e:	e6 1c 80 00 	andh	r12,0x8000,COH
8000de42:	bf db       	cbr	r11,0x1f
8000de44:	bf d9       	cbr	r9,0x1f
8000de46:	10 3a       	cp.w	r10,r8
8000de48:	f2 0b 13 00 	cpc	r11,r9
8000de4c:	c0 92       	brcc	8000de5e <__avr32_f64_sub+0x2e>
8000de4e:	16 97       	mov	r7,r11
8000de50:	12 9b       	mov	r11,r9
8000de52:	0e 99       	mov	r9,r7
8000de54:	14 97       	mov	r7,r10
8000de56:	10 9a       	mov	r10,r8
8000de58:	0e 98       	mov	r8,r7
8000de5a:	ee 1c 80 00 	eorh	r12,0x8000
8000de5e:	f6 07 16 14 	lsr	r7,r11,0x14
8000de62:	ab 7b       	lsl	r11,0xb
8000de64:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000de68:	ab 7a       	lsl	r10,0xb
8000de6a:	bf bb       	sbr	r11,0x1f
8000de6c:	f2 06 16 14 	lsr	r6,r9,0x14
8000de70:	c4 40       	breq	8000def8 <__avr32_f64_sub_opL_subnormal>
8000de72:	ab 79       	lsl	r9,0xb
8000de74:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000de78:	ab 78       	lsl	r8,0xb
8000de7a:	bf b9       	sbr	r9,0x1f

8000de7c <__avr32_f64_sub_opL_subnormal_done>:
8000de7c:	e0 47 07 ff 	cp.w	r7,2047
8000de80:	c4 f0       	breq	8000df1e <__avr32_f64_sub_opH_nan_or_inf>
8000de82:	0e 26       	rsub	r6,r7
8000de84:	c1 20       	breq	8000dea8 <__avr32_f64_sub_shift_done>
8000de86:	ec 05 11 20 	rsub	r5,r6,32
8000de8a:	e0 46 00 20 	cp.w	r6,32
8000de8e:	c7 c2       	brcc	8000df86 <__avr32_f64_sub_longshift>
8000de90:	f0 05 09 4e 	lsl	lr,r8,r5
8000de94:	f2 05 09 45 	lsl	r5,r9,r5
8000de98:	f0 06 0a 48 	lsr	r8,r8,r6
8000de9c:	f2 06 0a 49 	lsr	r9,r9,r6
8000dea0:	0a 48       	or	r8,r5
8000dea2:	58 0e       	cp.w	lr,0
8000dea4:	5f 1e       	srne	lr
8000dea6:	1c 48       	or	r8,lr

8000dea8 <__avr32_f64_sub_shift_done>:
8000dea8:	10 1a       	sub	r10,r8
8000deaa:	f6 09 01 4b 	sbc	r11,r11,r9
8000deae:	f6 06 12 00 	clz	r6,r11
8000deb2:	c0 e0       	breq	8000dece <__avr32_f64_sub_longnormalize_done>
8000deb4:	c7 83       	brcs	8000dfa4 <__avr32_f64_sub_longnormalize>
8000deb6:	ec 0e 11 20 	rsub	lr,r6,32
8000deba:	f6 06 09 4b 	lsl	r11,r11,r6
8000debe:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000dec2:	1c 4b       	or	r11,lr
8000dec4:	f4 06 09 4a 	lsl	r10,r10,r6
8000dec8:	0c 17       	sub	r7,r6
8000deca:	e0 8a 00 39 	brle	8000df3c <__avr32_f64_sub_subnormal_result>

8000dece <__avr32_f64_sub_longnormalize_done>:
8000dece:	f4 09 15 15 	lsl	r9,r10,0x15
8000ded2:	ab 9a       	lsr	r10,0xb
8000ded4:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000ded8:	ab 9b       	lsr	r11,0xb
8000deda:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000dede:	18 4b       	or	r11,r12

8000dee0 <__avr32_f64_sub_round>:
8000dee0:	fc 17 80 00 	movh	r7,0x8000
8000dee4:	ed ba 00 00 	bld	r10,0x0
8000dee8:	f7 b7 01 ff 	subne	r7,-1
8000deec:	0e 39       	cp.w	r9,r7
8000deee:	5f 29       	srhs	r9
8000def0:	12 0a       	add	r10,r9
8000def2:	5c 0b       	acr	r11
8000def4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000def8 <__avr32_f64_sub_opL_subnormal>:
8000def8:	ab 79       	lsl	r9,0xb
8000defa:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000defe:	ab 78       	lsl	r8,0xb
8000df00:	f3 e8 10 0e 	or	lr,r9,r8
8000df04:	f9 b6 01 01 	movne	r6,1
8000df08:	ee 0e 11 00 	rsub	lr,r7,0
8000df0c:	f9 b7 00 01 	moveq	r7,1
8000df10:	ef bb 00 1f 	bst	r11,0x1f
8000df14:	f7 ea 10 0e 	or	lr,r11,r10
8000df18:	f9 b7 00 00 	moveq	r7,0
8000df1c:	cb 0b       	rjmp	8000de7c <__avr32_f64_sub_opL_subnormal_done>

8000df1e <__avr32_f64_sub_opH_nan_or_inf>:
8000df1e:	bf db       	cbr	r11,0x1f
8000df20:	f7 ea 10 0e 	or	lr,r11,r10
8000df24:	c0 81       	brne	8000df34 <__avr32_f64_sub_return_nan>
8000df26:	e0 46 07 ff 	cp.w	r6,2047
8000df2a:	c0 50       	breq	8000df34 <__avr32_f64_sub_return_nan>
8000df2c:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000df30:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000df34 <__avr32_f64_sub_return_nan>:
8000df34:	3f fa       	mov	r10,-1
8000df36:	3f fb       	mov	r11,-1
8000df38:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000df3c <__avr32_f64_sub_subnormal_result>:
8000df3c:	5c 37       	neg	r7
8000df3e:	2f f7       	sub	r7,-1
8000df40:	f1 b7 04 c0 	satu	r7,0x6
8000df44:	e0 47 00 20 	cp.w	r7,32
8000df48:	c1 14       	brge	8000df6a <__avr32_f64_sub_subnormal_result+0x2e>
8000df4a:	ee 08 11 20 	rsub	r8,r7,32
8000df4e:	f4 08 09 49 	lsl	r9,r10,r8
8000df52:	5f 16       	srne	r6
8000df54:	f4 07 0a 4a 	lsr	r10,r10,r7
8000df58:	0c 4a       	or	r10,r6
8000df5a:	f6 08 09 49 	lsl	r9,r11,r8
8000df5e:	f5 e9 10 0a 	or	r10,r10,r9
8000df62:	f4 07 0a 4b 	lsr	r11,r10,r7
8000df66:	30 07       	mov	r7,0
8000df68:	cb 3b       	rjmp	8000dece <__avr32_f64_sub_longnormalize_done>
8000df6a:	ee 08 11 40 	rsub	r8,r7,64
8000df6e:	f6 08 09 49 	lsl	r9,r11,r8
8000df72:	14 49       	or	r9,r10
8000df74:	5f 16       	srne	r6
8000df76:	f6 07 0a 4a 	lsr	r10,r11,r7
8000df7a:	0c 4a       	or	r10,r6
8000df7c:	30 0b       	mov	r11,0
8000df7e:	30 07       	mov	r7,0
8000df80:	ca 7b       	rjmp	8000dece <__avr32_f64_sub_longnormalize_done>
8000df82:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000df86 <__avr32_f64_sub_longshift>:
8000df86:	f1 b6 04 c0 	satu	r6,0x6
8000df8a:	f0 0e 17 00 	moveq	lr,r8
8000df8e:	c0 40       	breq	8000df96 <__avr32_f64_sub_longshift+0x10>
8000df90:	f2 05 09 4e 	lsl	lr,r9,r5
8000df94:	10 4e       	or	lr,r8
8000df96:	f2 06 0a 48 	lsr	r8,r9,r6
8000df9a:	30 09       	mov	r9,0
8000df9c:	58 0e       	cp.w	lr,0
8000df9e:	5f 1e       	srne	lr
8000dfa0:	1c 48       	or	r8,lr
8000dfa2:	c8 3b       	rjmp	8000dea8 <__avr32_f64_sub_shift_done>

8000dfa4 <__avr32_f64_sub_longnormalize>:
8000dfa4:	f4 06 12 00 	clz	r6,r10
8000dfa8:	f9 b7 03 00 	movlo	r7,0
8000dfac:	f9 b6 03 00 	movlo	r6,0
8000dfb0:	f9 bc 03 00 	movlo	r12,0
8000dfb4:	f7 b6 02 e0 	subhs	r6,-32
8000dfb8:	f4 06 09 4b 	lsl	r11,r10,r6
8000dfbc:	30 0a       	mov	r10,0
8000dfbe:	0c 17       	sub	r7,r6
8000dfc0:	fe 9a ff be 	brle	8000df3c <__avr32_f64_sub_subnormal_result>
8000dfc4:	c8 5b       	rjmp	8000dece <__avr32_f64_sub_longnormalize_done>
8000dfc6:	d7 03       	nop

8000dfc8 <__avr32_f64_add_from_sub>:
8000dfc8:	ee 19 80 00 	eorh	r9,0x8000

8000dfcc <__avr32_f64_add>:
8000dfcc:	f7 e9 20 0c 	eor	r12,r11,r9
8000dfd0:	fe 96 ff 2e 	brmi	8000de2c <__avr32_f64_sub_from_add>
8000dfd4:	eb cd 40 e0 	pushm	r5-r7,lr
8000dfd8:	16 9c       	mov	r12,r11
8000dfda:	e6 1c 80 00 	andh	r12,0x8000,COH
8000dfde:	bf db       	cbr	r11,0x1f
8000dfe0:	bf d9       	cbr	r9,0x1f
8000dfe2:	12 3b       	cp.w	r11,r9
8000dfe4:	c0 72       	brcc	8000dff2 <__avr32_f64_add+0x26>
8000dfe6:	16 97       	mov	r7,r11
8000dfe8:	12 9b       	mov	r11,r9
8000dfea:	0e 99       	mov	r9,r7
8000dfec:	14 97       	mov	r7,r10
8000dfee:	10 9a       	mov	r10,r8
8000dff0:	0e 98       	mov	r8,r7
8000dff2:	30 0e       	mov	lr,0
8000dff4:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000dff8:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000dffc:	b5 ab       	sbr	r11,0x14
8000dffe:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000e002:	c6 20       	breq	8000e0c6 <__avr32_f64_add_op2_subnormal>
8000e004:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000e008:	b5 a9       	sbr	r9,0x14
8000e00a:	e0 47 07 ff 	cp.w	r7,2047
8000e00e:	c2 80       	breq	8000e05e <__avr32_f64_add_opH_nan_or_inf>
8000e010:	0e 26       	rsub	r6,r7
8000e012:	c1 20       	breq	8000e036 <__avr32_f64_add_shift_done>
8000e014:	e0 46 00 36 	cp.w	r6,54
8000e018:	c1 52       	brcc	8000e042 <__avr32_f64_add_res_of_done>
8000e01a:	ec 05 11 20 	rsub	r5,r6,32
8000e01e:	e0 46 00 20 	cp.w	r6,32
8000e022:	c3 52       	brcc	8000e08c <__avr32_f64_add_longshift>
8000e024:	f0 05 09 4e 	lsl	lr,r8,r5
8000e028:	f2 05 09 45 	lsl	r5,r9,r5
8000e02c:	f0 06 0a 48 	lsr	r8,r8,r6
8000e030:	f2 06 0a 49 	lsr	r9,r9,r6
8000e034:	0a 48       	or	r8,r5

8000e036 <__avr32_f64_add_shift_done>:
8000e036:	10 0a       	add	r10,r8
8000e038:	f6 09 00 4b 	adc	r11,r11,r9
8000e03c:	ed bb 00 15 	bld	r11,0x15
8000e040:	c3 40       	breq	8000e0a8 <__avr32_f64_add_res_of>

8000e042 <__avr32_f64_add_res_of_done>:
8000e042:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000e046:	18 4b       	or	r11,r12

8000e048 <__avr32_f64_add_round>:
8000e048:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000e04c:	18 4e       	or	lr,r12
8000e04e:	ee 1e 80 00 	eorh	lr,0x8000
8000e052:	f1 be 04 20 	satu	lr,0x1
8000e056:	1c 0a       	add	r10,lr
8000e058:	5c 0b       	acr	r11
8000e05a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000e05e <__avr32_f64_add_opH_nan_or_inf>:
8000e05e:	b5 cb       	cbr	r11,0x14
8000e060:	f7 ea 10 0e 	or	lr,r11,r10
8000e064:	c1 01       	brne	8000e084 <__avr32_f64_add_return_nan>
8000e066:	e0 46 07 ff 	cp.w	r6,2047
8000e06a:	c0 30       	breq	8000e070 <__avr32_f64_add_opL_nan_or_inf>
8000e06c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000e070 <__avr32_f64_add_opL_nan_or_inf>:
8000e070:	b5 c9       	cbr	r9,0x14
8000e072:	f3 e8 10 0e 	or	lr,r9,r8
8000e076:	c0 71       	brne	8000e084 <__avr32_f64_add_return_nan>
8000e078:	30 0a       	mov	r10,0
8000e07a:	fc 1b 7f f0 	movh	r11,0x7ff0
8000e07e:	18 4b       	or	r11,r12
8000e080:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000e084 <__avr32_f64_add_return_nan>:
8000e084:	3f fa       	mov	r10,-1
8000e086:	3f fb       	mov	r11,-1
8000e088:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000e08c <__avr32_f64_add_longshift>:
8000e08c:	f1 b6 04 c0 	satu	r6,0x6
8000e090:	f0 0e 17 00 	moveq	lr,r8
8000e094:	c0 60       	breq	8000e0a0 <__avr32_f64_add_longshift+0x14>
8000e096:	f2 05 09 4e 	lsl	lr,r9,r5
8000e09a:	58 08       	cp.w	r8,0
8000e09c:	5f 18       	srne	r8
8000e09e:	10 4e       	or	lr,r8
8000e0a0:	f2 06 0a 48 	lsr	r8,r9,r6
8000e0a4:	30 09       	mov	r9,0
8000e0a6:	cc 8b       	rjmp	8000e036 <__avr32_f64_add_shift_done>

8000e0a8 <__avr32_f64_add_res_of>:
8000e0a8:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000e0ac:	a1 9b       	lsr	r11,0x1
8000e0ae:	5d 0a       	ror	r10
8000e0b0:	5d 0e       	ror	lr
8000e0b2:	2f f7       	sub	r7,-1
8000e0b4:	e0 47 07 ff 	cp.w	r7,2047
8000e0b8:	f9 ba 00 00 	moveq	r10,0
8000e0bc:	f9 bb 00 00 	moveq	r11,0
8000e0c0:	f9 be 00 00 	moveq	lr,0
8000e0c4:	cb fb       	rjmp	8000e042 <__avr32_f64_add_res_of_done>

8000e0c6 <__avr32_f64_add_op2_subnormal>:
8000e0c6:	30 16       	mov	r6,1
8000e0c8:	58 07       	cp.w	r7,0
8000e0ca:	ca 01       	brne	8000e00a <__avr32_f64_add+0x3e>
8000e0cc:	b5 cb       	cbr	r11,0x14
8000e0ce:	10 0a       	add	r10,r8
8000e0d0:	f6 09 00 4b 	adc	r11,r11,r9
8000e0d4:	18 4b       	or	r11,r12
8000e0d6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e0da:	d7 03       	nop

8000e0dc <__avr32_f64_to_u32>:
8000e0dc:	58 0b       	cp.w	r11,0
8000e0de:	5e 6d       	retmi	0

8000e0e0 <__avr32_f64_to_s32>:
8000e0e0:	f6 0c 15 01 	lsl	r12,r11,0x1
8000e0e4:	b5 9c       	lsr	r12,0x15
8000e0e6:	e0 2c 03 ff 	sub	r12,1023
8000e0ea:	5e 3d       	retlo	0
8000e0ec:	f8 0c 11 1f 	rsub	r12,r12,31
8000e0f0:	16 99       	mov	r9,r11
8000e0f2:	ab 7b       	lsl	r11,0xb
8000e0f4:	bf bb       	sbr	r11,0x1f
8000e0f6:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000e0fa:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000e0fe:	a1 79       	lsl	r9,0x1
8000e100:	5e 2b       	reths	r11
8000e102:	5c 3b       	neg	r11
8000e104:	5e fb       	retal	r11

8000e106 <__avr32_u32_to_f64>:
8000e106:	f8 cb 00 00 	sub	r11,r12,0
8000e10a:	30 0c       	mov	r12,0
8000e10c:	c0 38       	rjmp	8000e112 <__avr32_s32_to_f64+0x4>

8000e10e <__avr32_s32_to_f64>:
8000e10e:	18 9b       	mov	r11,r12
8000e110:	5c 4b       	abs	r11
8000e112:	30 0a       	mov	r10,0
8000e114:	5e 0b       	reteq	r11
8000e116:	d4 01       	pushm	lr
8000e118:	e0 69 04 1e 	mov	r9,1054
8000e11c:	f6 08 12 00 	clz	r8,r11
8000e120:	c1 70       	breq	8000e14e <__avr32_s32_to_f64+0x40>
8000e122:	c0 c3       	brcs	8000e13a <__avr32_s32_to_f64+0x2c>
8000e124:	f0 0e 11 20 	rsub	lr,r8,32
8000e128:	f6 08 09 4b 	lsl	r11,r11,r8
8000e12c:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000e130:	1c 4b       	or	r11,lr
8000e132:	f4 08 09 4a 	lsl	r10,r10,r8
8000e136:	10 19       	sub	r9,r8
8000e138:	c0 b8       	rjmp	8000e14e <__avr32_s32_to_f64+0x40>
8000e13a:	f4 08 12 00 	clz	r8,r10
8000e13e:	f9 b8 03 00 	movlo	r8,0
8000e142:	f7 b8 02 e0 	subhs	r8,-32
8000e146:	f4 08 09 4b 	lsl	r11,r10,r8
8000e14a:	30 0a       	mov	r10,0
8000e14c:	10 19       	sub	r9,r8
8000e14e:	58 09       	cp.w	r9,0
8000e150:	e0 89 00 30 	brgt	8000e1b0 <__avr32_s32_to_f64+0xa2>
8000e154:	5c 39       	neg	r9
8000e156:	2f f9       	sub	r9,-1
8000e158:	e0 49 00 36 	cp.w	r9,54
8000e15c:	c0 43       	brcs	8000e164 <__avr32_s32_to_f64+0x56>
8000e15e:	30 0b       	mov	r11,0
8000e160:	30 0a       	mov	r10,0
8000e162:	c2 68       	rjmp	8000e1ae <__avr32_s32_to_f64+0xa0>
8000e164:	2f 69       	sub	r9,-10
8000e166:	f2 08 11 20 	rsub	r8,r9,32
8000e16a:	e0 49 00 20 	cp.w	r9,32
8000e16e:	c0 b2       	brcc	8000e184 <__avr32_s32_to_f64+0x76>
8000e170:	f4 08 09 4e 	lsl	lr,r10,r8
8000e174:	f6 08 09 48 	lsl	r8,r11,r8
8000e178:	f4 09 0a 4a 	lsr	r10,r10,r9
8000e17c:	f6 09 0a 4b 	lsr	r11,r11,r9
8000e180:	10 4b       	or	r11,r8
8000e182:	c0 88       	rjmp	8000e192 <__avr32_s32_to_f64+0x84>
8000e184:	f6 08 09 4e 	lsl	lr,r11,r8
8000e188:	14 4e       	or	lr,r10
8000e18a:	16 9a       	mov	r10,r11
8000e18c:	30 0b       	mov	r11,0
8000e18e:	f4 09 0a 4a 	lsr	r10,r10,r9
8000e192:	ed ba 00 00 	bld	r10,0x0
8000e196:	c0 92       	brcc	8000e1a8 <__avr32_s32_to_f64+0x9a>
8000e198:	1c 7e       	tst	lr,lr
8000e19a:	c0 41       	brne	8000e1a2 <__avr32_s32_to_f64+0x94>
8000e19c:	ed ba 00 01 	bld	r10,0x1
8000e1a0:	c0 42       	brcc	8000e1a8 <__avr32_s32_to_f64+0x9a>
8000e1a2:	2f fa       	sub	r10,-1
8000e1a4:	f7 bb 02 ff 	subhs	r11,-1
8000e1a8:	5c fc       	rol	r12
8000e1aa:	5d 0b       	ror	r11
8000e1ac:	5d 0a       	ror	r10
8000e1ae:	d8 02       	popm	pc
8000e1b0:	e0 68 03 ff 	mov	r8,1023
8000e1b4:	ed ba 00 0b 	bld	r10,0xb
8000e1b8:	f7 b8 00 ff 	subeq	r8,-1
8000e1bc:	10 0a       	add	r10,r8
8000e1be:	5c 0b       	acr	r11
8000e1c0:	f7 b9 03 fe 	sublo	r9,-2
8000e1c4:	e0 49 07 ff 	cp.w	r9,2047
8000e1c8:	c0 55       	brlt	8000e1d2 <__avr32_s32_to_f64+0xc4>
8000e1ca:	30 0a       	mov	r10,0
8000e1cc:	fc 1b ff e0 	movh	r11,0xffe0
8000e1d0:	c0 c8       	rjmp	8000e1e8 <__floatsidf_return_op1>
8000e1d2:	ed bb 00 1f 	bld	r11,0x1f
8000e1d6:	f7 b9 01 01 	subne	r9,1
8000e1da:	ab 9a       	lsr	r10,0xb
8000e1dc:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000e1e0:	a1 7b       	lsl	r11,0x1
8000e1e2:	ab 9b       	lsr	r11,0xb
8000e1e4:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000e1e8 <__floatsidf_return_op1>:
8000e1e8:	a1 7c       	lsl	r12,0x1
8000e1ea:	5d 0b       	ror	r11
8000e1ec:	d8 02       	popm	pc

8000e1ee <__avr32_f64_cmp_eq>:
8000e1ee:	10 3a       	cp.w	r10,r8
8000e1f0:	f2 0b 13 00 	cpc	r11,r9
8000e1f4:	c0 80       	breq	8000e204 <__avr32_f64_cmp_eq+0x16>
8000e1f6:	a1 7b       	lsl	r11,0x1
8000e1f8:	a1 79       	lsl	r9,0x1
8000e1fa:	14 4b       	or	r11,r10
8000e1fc:	12 4b       	or	r11,r9
8000e1fe:	10 4b       	or	r11,r8
8000e200:	5e 0f       	reteq	1
8000e202:	5e fd       	retal	0
8000e204:	a1 7b       	lsl	r11,0x1
8000e206:	fc 1c ff e0 	movh	r12,0xffe0
8000e20a:	58 0a       	cp.w	r10,0
8000e20c:	f8 0b 13 00 	cpc	r11,r12
8000e210:	5e 8f       	retls	1
8000e212:	5e fd       	retal	0

8000e214 <__avr32_f64_cmp_ge>:
8000e214:	1a de       	st.w	--sp,lr
8000e216:	1a d7       	st.w	--sp,r7
8000e218:	a1 7b       	lsl	r11,0x1
8000e21a:	5f 3c       	srlo	r12
8000e21c:	a1 79       	lsl	r9,0x1
8000e21e:	5f 37       	srlo	r7
8000e220:	5c fc       	rol	r12
8000e222:	fc 1e ff e0 	movh	lr,0xffe0
8000e226:	58 0a       	cp.w	r10,0
8000e228:	fc 0b 13 00 	cpc	r11,lr
8000e22c:	e0 8b 00 1d 	brhi	8000e266 <__avr32_f64_cmp_ge+0x52>
8000e230:	58 08       	cp.w	r8,0
8000e232:	fc 09 13 00 	cpc	r9,lr
8000e236:	e0 8b 00 18 	brhi	8000e266 <__avr32_f64_cmp_ge+0x52>
8000e23a:	58 0b       	cp.w	r11,0
8000e23c:	f5 ba 00 00 	subfeq	r10,0
8000e240:	c1 50       	breq	8000e26a <__avr32_f64_cmp_ge+0x56>
8000e242:	1b 07       	ld.w	r7,sp++
8000e244:	1b 0e       	ld.w	lr,sp++
8000e246:	58 3c       	cp.w	r12,3
8000e248:	c0 a0       	breq	8000e25c <__avr32_f64_cmp_ge+0x48>
8000e24a:	58 1c       	cp.w	r12,1
8000e24c:	c0 33       	brcs	8000e252 <__avr32_f64_cmp_ge+0x3e>
8000e24e:	5e 0f       	reteq	1
8000e250:	5e 1d       	retne	0
8000e252:	10 3a       	cp.w	r10,r8
8000e254:	f2 0b 13 00 	cpc	r11,r9
8000e258:	5e 2f       	reths	1
8000e25a:	5e 3d       	retlo	0
8000e25c:	14 38       	cp.w	r8,r10
8000e25e:	f6 09 13 00 	cpc	r9,r11
8000e262:	5e 2f       	reths	1
8000e264:	5e 3d       	retlo	0
8000e266:	1b 07       	ld.w	r7,sp++
8000e268:	d8 0a       	popm	pc,r12=0
8000e26a:	58 17       	cp.w	r7,1
8000e26c:	5f 0c       	sreq	r12
8000e26e:	58 09       	cp.w	r9,0
8000e270:	f5 b8 00 00 	subfeq	r8,0
8000e274:	1b 07       	ld.w	r7,sp++
8000e276:	1b 0e       	ld.w	lr,sp++
8000e278:	5e 0f       	reteq	1
8000e27a:	5e fc       	retal	r12

8000e27c <__avr32_f64_cmp_lt>:
8000e27c:	1a de       	st.w	--sp,lr
8000e27e:	1a d7       	st.w	--sp,r7
8000e280:	a1 7b       	lsl	r11,0x1
8000e282:	5f 3c       	srlo	r12
8000e284:	a1 79       	lsl	r9,0x1
8000e286:	5f 37       	srlo	r7
8000e288:	5c fc       	rol	r12
8000e28a:	fc 1e ff e0 	movh	lr,0xffe0
8000e28e:	58 0a       	cp.w	r10,0
8000e290:	fc 0b 13 00 	cpc	r11,lr
8000e294:	e0 8b 00 1d 	brhi	8000e2ce <__avr32_f64_cmp_lt+0x52>
8000e298:	58 08       	cp.w	r8,0
8000e29a:	fc 09 13 00 	cpc	r9,lr
8000e29e:	e0 8b 00 18 	brhi	8000e2ce <__avr32_f64_cmp_lt+0x52>
8000e2a2:	58 0b       	cp.w	r11,0
8000e2a4:	f5 ba 00 00 	subfeq	r10,0
8000e2a8:	c1 50       	breq	8000e2d2 <__avr32_f64_cmp_lt+0x56>
8000e2aa:	1b 07       	ld.w	r7,sp++
8000e2ac:	1b 0e       	ld.w	lr,sp++
8000e2ae:	58 3c       	cp.w	r12,3
8000e2b0:	c0 a0       	breq	8000e2c4 <__avr32_f64_cmp_lt+0x48>
8000e2b2:	58 1c       	cp.w	r12,1
8000e2b4:	c0 33       	brcs	8000e2ba <__avr32_f64_cmp_lt+0x3e>
8000e2b6:	5e 0d       	reteq	0
8000e2b8:	5e 1f       	retne	1
8000e2ba:	10 3a       	cp.w	r10,r8
8000e2bc:	f2 0b 13 00 	cpc	r11,r9
8000e2c0:	5e 2d       	reths	0
8000e2c2:	5e 3f       	retlo	1
8000e2c4:	14 38       	cp.w	r8,r10
8000e2c6:	f6 09 13 00 	cpc	r9,r11
8000e2ca:	5e 2d       	reths	0
8000e2cc:	5e 3f       	retlo	1
8000e2ce:	1b 07       	ld.w	r7,sp++
8000e2d0:	d8 0a       	popm	pc,r12=0
8000e2d2:	58 17       	cp.w	r7,1
8000e2d4:	5f 1c       	srne	r12
8000e2d6:	58 09       	cp.w	r9,0
8000e2d8:	f5 b8 00 00 	subfeq	r8,0
8000e2dc:	1b 07       	ld.w	r7,sp++
8000e2de:	1b 0e       	ld.w	lr,sp++
8000e2e0:	5e 0d       	reteq	0
8000e2e2:	5e fc       	retal	r12

8000e2e4 <__avr32_f64_div>:
8000e2e4:	eb cd 40 ff 	pushm	r0-r7,lr
8000e2e8:	f7 e9 20 0e 	eor	lr,r11,r9
8000e2ec:	f6 07 16 14 	lsr	r7,r11,0x14
8000e2f0:	a9 7b       	lsl	r11,0x9
8000e2f2:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000e2f6:	a9 7a       	lsl	r10,0x9
8000e2f8:	bd bb       	sbr	r11,0x1d
8000e2fa:	e4 1b 3f ff 	andh	r11,0x3fff
8000e2fe:	ab d7       	cbr	r7,0xb
8000e300:	e0 80 00 cc 	breq	8000e498 <__avr32_f64_div_round_subnormal+0x54>
8000e304:	e0 47 07 ff 	cp.w	r7,2047
8000e308:	e0 84 00 b5 	brge	8000e472 <__avr32_f64_div_round_subnormal+0x2e>
8000e30c:	f2 06 16 14 	lsr	r6,r9,0x14
8000e310:	a9 79       	lsl	r9,0x9
8000e312:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000e316:	a9 78       	lsl	r8,0x9
8000e318:	bd b9       	sbr	r9,0x1d
8000e31a:	e4 19 3f ff 	andh	r9,0x3fff
8000e31e:	ab d6       	cbr	r6,0xb
8000e320:	e0 80 00 e2 	breq	8000e4e4 <__avr32_f64_div_round_subnormal+0xa0>
8000e324:	e0 46 07 ff 	cp.w	r6,2047
8000e328:	e0 84 00 b2 	brge	8000e48c <__avr32_f64_div_round_subnormal+0x48>
8000e32c:	0c 17       	sub	r7,r6
8000e32e:	fe 37 fc 01 	sub	r7,-1023
8000e332:	fc 1c 80 00 	movh	r12,0x8000
8000e336:	f8 03 16 01 	lsr	r3,r12,0x1
8000e33a:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000e33e:	5c d4       	com	r4
8000e340:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000e344:	e6 09 06 44 	mulu.d	r4,r3,r9
8000e348:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000e34c:	e6 05 06 44 	mulu.d	r4,r3,r5
8000e350:	ea 03 15 02 	lsl	r3,r5,0x2
8000e354:	e6 09 06 44 	mulu.d	r4,r3,r9
8000e358:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000e35c:	e6 05 06 44 	mulu.d	r4,r3,r5
8000e360:	ea 03 15 02 	lsl	r3,r5,0x2
8000e364:	e6 09 06 44 	mulu.d	r4,r3,r9
8000e368:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000e36c:	e6 05 06 44 	mulu.d	r4,r3,r5
8000e370:	ea 03 15 02 	lsl	r3,r5,0x2
8000e374:	e6 08 06 40 	mulu.d	r0,r3,r8
8000e378:	e4 09 07 40 	macu.d	r0,r2,r9
8000e37c:	e6 09 06 44 	mulu.d	r4,r3,r9
8000e380:	02 04       	add	r4,r1
8000e382:	5c 05       	acr	r5
8000e384:	a3 65       	lsl	r5,0x2
8000e386:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000e38a:	a3 64       	lsl	r4,0x2
8000e38c:	5c 34       	neg	r4
8000e38e:	f8 05 01 45 	sbc	r5,r12,r5
8000e392:	e6 04 06 40 	mulu.d	r0,r3,r4
8000e396:	e4 05 07 40 	macu.d	r0,r2,r5
8000e39a:	e6 05 06 44 	mulu.d	r4,r3,r5
8000e39e:	02 04       	add	r4,r1
8000e3a0:	5c 05       	acr	r5
8000e3a2:	ea 03 15 02 	lsl	r3,r5,0x2
8000e3a6:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000e3aa:	e8 02 15 02 	lsl	r2,r4,0x2
8000e3ae:	e6 08 06 40 	mulu.d	r0,r3,r8
8000e3b2:	e4 09 07 40 	macu.d	r0,r2,r9
8000e3b6:	e6 09 06 44 	mulu.d	r4,r3,r9
8000e3ba:	02 04       	add	r4,r1
8000e3bc:	5c 05       	acr	r5
8000e3be:	a3 65       	lsl	r5,0x2
8000e3c0:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000e3c4:	a3 64       	lsl	r4,0x2
8000e3c6:	5c 34       	neg	r4
8000e3c8:	f8 05 01 45 	sbc	r5,r12,r5
8000e3cc:	e6 04 06 40 	mulu.d	r0,r3,r4
8000e3d0:	e4 05 07 40 	macu.d	r0,r2,r5
8000e3d4:	e6 05 06 44 	mulu.d	r4,r3,r5
8000e3d8:	02 04       	add	r4,r1
8000e3da:	5c 05       	acr	r5
8000e3dc:	ea 03 15 02 	lsl	r3,r5,0x2
8000e3e0:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000e3e4:	e8 02 15 02 	lsl	r2,r4,0x2
8000e3e8:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000e3ec:	e4 0b 07 40 	macu.d	r0,r2,r11
8000e3f0:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000e3f4:	02 02       	add	r2,r1
8000e3f6:	5c 03       	acr	r3
8000e3f8:	ed b3 00 1c 	bld	r3,0x1c
8000e3fc:	c0 90       	breq	8000e40e <__avr32_f64_div+0x12a>
8000e3fe:	a1 72       	lsl	r2,0x1
8000e400:	5c f3       	rol	r3
8000e402:	20 17       	sub	r7,1
8000e404:	a3 9a       	lsr	r10,0x3
8000e406:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000e40a:	a3 9b       	lsr	r11,0x3
8000e40c:	c0 58       	rjmp	8000e416 <__avr32_f64_div+0x132>
8000e40e:	a5 8a       	lsr	r10,0x4
8000e410:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000e414:	a5 8b       	lsr	r11,0x4
8000e416:	58 07       	cp.w	r7,0
8000e418:	e0 8a 00 8b 	brle	8000e52e <__avr32_f64_div_res_subnormal>
8000e41c:	e0 12 ff 00 	andl	r2,0xff00
8000e420:	e8 12 00 80 	orl	r2,0x80
8000e424:	e6 08 06 40 	mulu.d	r0,r3,r8
8000e428:	e4 09 07 40 	macu.d	r0,r2,r9
8000e42c:	e4 08 06 44 	mulu.d	r4,r2,r8
8000e430:	e6 09 06 48 	mulu.d	r8,r3,r9
8000e434:	00 05       	add	r5,r0
8000e436:	f0 01 00 48 	adc	r8,r8,r1
8000e43a:	5c 09       	acr	r9
8000e43c:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000e440:	58 04       	cp.w	r4,0
8000e442:	5c 25       	cpc	r5

8000e444 <__avr32_f64_div_round_subnormal>:
8000e444:	f4 08 13 00 	cpc	r8,r10
8000e448:	f6 09 13 00 	cpc	r9,r11
8000e44c:	5f 36       	srlo	r6
8000e44e:	f8 06 17 00 	moveq	r6,r12
8000e452:	e4 0a 16 08 	lsr	r10,r2,0x8
8000e456:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000e45a:	e6 0b 16 08 	lsr	r11,r3,0x8
8000e45e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000e462:	ed be 00 1f 	bld	lr,0x1f
8000e466:	ef bb 00 1f 	bst	r11,0x1f
8000e46a:	0c 0a       	add	r10,r6
8000e46c:	5c 0b       	acr	r11
8000e46e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000e472:	e4 1b 00 0f 	andh	r11,0xf
8000e476:	14 4b       	or	r11,r10
8000e478:	e0 81 00 a7 	brne	8000e5c6 <__avr32_f64_div_res_subnormal+0x98>
8000e47c:	f2 06 16 14 	lsr	r6,r9,0x14
8000e480:	ab d6       	cbr	r6,0xb
8000e482:	e0 46 07 ff 	cp.w	r6,2047
8000e486:	e0 81 00 a4 	brne	8000e5ce <__avr32_f64_div_res_subnormal+0xa0>
8000e48a:	c9 e8       	rjmp	8000e5c6 <__avr32_f64_div_res_subnormal+0x98>
8000e48c:	e4 19 00 0f 	andh	r9,0xf
8000e490:	10 49       	or	r9,r8
8000e492:	e0 81 00 9a 	brne	8000e5c6 <__avr32_f64_div_res_subnormal+0x98>
8000e496:	c9 28       	rjmp	8000e5ba <__avr32_f64_div_res_subnormal+0x8c>
8000e498:	a3 7b       	lsl	r11,0x3
8000e49a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000e49e:	a3 7a       	lsl	r10,0x3
8000e4a0:	f5 eb 10 04 	or	r4,r10,r11
8000e4a4:	e0 80 00 a0 	breq	8000e5e4 <__avr32_f64_div_op1_zero>
8000e4a8:	f6 04 12 00 	clz	r4,r11
8000e4ac:	c1 70       	breq	8000e4da <__avr32_f64_div_round_subnormal+0x96>
8000e4ae:	c0 c3       	brcs	8000e4c6 <__avr32_f64_div_round_subnormal+0x82>
8000e4b0:	e8 05 11 20 	rsub	r5,r4,32
8000e4b4:	f6 04 09 4b 	lsl	r11,r11,r4
8000e4b8:	f4 05 0a 45 	lsr	r5,r10,r5
8000e4bc:	0a 4b       	or	r11,r5
8000e4be:	f4 04 09 4a 	lsl	r10,r10,r4
8000e4c2:	08 17       	sub	r7,r4
8000e4c4:	c0 b8       	rjmp	8000e4da <__avr32_f64_div_round_subnormal+0x96>
8000e4c6:	f4 04 12 00 	clz	r4,r10
8000e4ca:	f9 b4 03 00 	movlo	r4,0
8000e4ce:	f7 b4 02 e0 	subhs	r4,-32
8000e4d2:	f4 04 09 4b 	lsl	r11,r10,r4
8000e4d6:	30 0a       	mov	r10,0
8000e4d8:	08 17       	sub	r7,r4
8000e4da:	a3 8a       	lsr	r10,0x2
8000e4dc:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000e4e0:	a3 8b       	lsr	r11,0x2
8000e4e2:	c1 1b       	rjmp	8000e304 <__avr32_f64_div+0x20>
8000e4e4:	a3 79       	lsl	r9,0x3
8000e4e6:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000e4ea:	a3 78       	lsl	r8,0x3
8000e4ec:	f3 e8 10 04 	or	r4,r9,r8
8000e4f0:	c6 f0       	breq	8000e5ce <__avr32_f64_div_res_subnormal+0xa0>
8000e4f2:	f2 04 12 00 	clz	r4,r9
8000e4f6:	c1 70       	breq	8000e524 <__avr32_f64_div_round_subnormal+0xe0>
8000e4f8:	c0 c3       	brcs	8000e510 <__avr32_f64_div_round_subnormal+0xcc>
8000e4fa:	e8 05 11 20 	rsub	r5,r4,32
8000e4fe:	f2 04 09 49 	lsl	r9,r9,r4
8000e502:	f0 05 0a 45 	lsr	r5,r8,r5
8000e506:	0a 49       	or	r9,r5
8000e508:	f0 04 09 48 	lsl	r8,r8,r4
8000e50c:	08 16       	sub	r6,r4
8000e50e:	c0 b8       	rjmp	8000e524 <__avr32_f64_div_round_subnormal+0xe0>
8000e510:	f0 04 12 00 	clz	r4,r8
8000e514:	f9 b4 03 00 	movlo	r4,0
8000e518:	f7 b4 02 e0 	subhs	r4,-32
8000e51c:	f0 04 09 49 	lsl	r9,r8,r4
8000e520:	30 08       	mov	r8,0
8000e522:	08 16       	sub	r6,r4
8000e524:	a3 88       	lsr	r8,0x2
8000e526:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000e52a:	a3 89       	lsr	r9,0x2
8000e52c:	cf ca       	rjmp	8000e324 <__avr32_f64_div+0x40>

8000e52e <__avr32_f64_div_res_subnormal>:
8000e52e:	5c 37       	neg	r7
8000e530:	2f f7       	sub	r7,-1
8000e532:	f1 b7 04 c0 	satu	r7,0x6
8000e536:	e0 47 00 20 	cp.w	r7,32
8000e53a:	c1 54       	brge	8000e564 <__avr32_f64_div_res_subnormal+0x36>
8000e53c:	ee 06 11 20 	rsub	r6,r7,32
8000e540:	e4 07 0a 42 	lsr	r2,r2,r7
8000e544:	e6 06 09 4c 	lsl	r12,r3,r6
8000e548:	18 42       	or	r2,r12
8000e54a:	e6 07 0a 43 	lsr	r3,r3,r7
8000e54e:	f4 06 09 41 	lsl	r1,r10,r6
8000e552:	f4 07 0a 4a 	lsr	r10,r10,r7
8000e556:	f6 06 09 4c 	lsl	r12,r11,r6
8000e55a:	18 4a       	or	r10,r12
8000e55c:	f6 07 0a 4b 	lsr	r11,r11,r7
8000e560:	30 00       	mov	r0,0
8000e562:	c1 58       	rjmp	8000e58c <__avr32_f64_div_res_subnormal+0x5e>
8000e564:	ee 06 11 20 	rsub	r6,r7,32
8000e568:	f9 b0 00 00 	moveq	r0,0
8000e56c:	f9 bc 00 00 	moveq	r12,0
8000e570:	c0 50       	breq	8000e57a <__avr32_f64_div_res_subnormal+0x4c>
8000e572:	f4 06 09 40 	lsl	r0,r10,r6
8000e576:	f6 06 09 4c 	lsl	r12,r11,r6
8000e57a:	e6 07 0a 42 	lsr	r2,r3,r7
8000e57e:	30 03       	mov	r3,0
8000e580:	f4 07 0a 41 	lsr	r1,r10,r7
8000e584:	18 41       	or	r1,r12
8000e586:	f6 07 0a 4a 	lsr	r10,r11,r7
8000e58a:	30 0b       	mov	r11,0
8000e58c:	e0 12 ff 00 	andl	r2,0xff00
8000e590:	e8 12 00 80 	orl	r2,0x80
8000e594:	e6 08 06 46 	mulu.d	r6,r3,r8
8000e598:	e4 09 07 46 	macu.d	r6,r2,r9
8000e59c:	e4 08 06 44 	mulu.d	r4,r2,r8
8000e5a0:	e6 09 06 48 	mulu.d	r8,r3,r9
8000e5a4:	0c 05       	add	r5,r6
8000e5a6:	f0 07 00 48 	adc	r8,r8,r7
8000e5aa:	5c 09       	acr	r9
8000e5ac:	30 07       	mov	r7,0
8000e5ae:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000e5b2:	00 34       	cp.w	r4,r0
8000e5b4:	e2 05 13 00 	cpc	r5,r1
8000e5b8:	c4 6b       	rjmp	8000e444 <__avr32_f64_div_round_subnormal>
8000e5ba:	1c 9b       	mov	r11,lr
8000e5bc:	e6 1b 80 00 	andh	r11,0x8000,COH
8000e5c0:	30 0a       	mov	r10,0
8000e5c2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000e5c6:	3f fb       	mov	r11,-1
8000e5c8:	30 0a       	mov	r10,0
8000e5ca:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000e5ce:	f5 eb 10 04 	or	r4,r10,r11
8000e5d2:	c0 90       	breq	8000e5e4 <__avr32_f64_div_op1_zero>
8000e5d4:	1c 9b       	mov	r11,lr
8000e5d6:	e6 1b 80 00 	andh	r11,0x8000,COH
8000e5da:	ea 1b 7f f0 	orh	r11,0x7ff0
8000e5de:	30 0a       	mov	r10,0
8000e5e0:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000e5e4 <__avr32_f64_div_op1_zero>:
8000e5e4:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000e5e8:	ce f0       	breq	8000e5c6 <__avr32_f64_div_res_subnormal+0x98>
8000e5ea:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000e5ee:	e0 44 07 ff 	cp.w	r4,2047
8000e5f2:	ce 41       	brne	8000e5ba <__avr32_f64_div_res_subnormal+0x8c>
8000e5f4:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000e5f8:	ce 10       	breq	8000e5ba <__avr32_f64_div_res_subnormal+0x8c>
8000e5fa:	ce 6b       	rjmp	8000e5c6 <__avr32_f64_div_res_subnormal+0x98>

8000e5fc <__avr32_udiv64>:
8000e5fc:	d4 31       	pushm	r0-r7,lr
8000e5fe:	1a 97       	mov	r7,sp
8000e600:	20 3d       	sub	sp,12
8000e602:	10 9c       	mov	r12,r8
8000e604:	12 9e       	mov	lr,r9
8000e606:	14 93       	mov	r3,r10
8000e608:	58 09       	cp.w	r9,0
8000e60a:	e0 81 00 bd 	brne	8000e784 <__avr32_udiv64+0x188>
8000e60e:	16 38       	cp.w	r8,r11
8000e610:	e0 88 00 40 	brls	8000e690 <__avr32_udiv64+0x94>
8000e614:	f0 08 12 00 	clz	r8,r8
8000e618:	c0 d0       	breq	8000e632 <__avr32_udiv64+0x36>
8000e61a:	f6 08 09 4b 	lsl	r11,r11,r8
8000e61e:	f0 09 11 20 	rsub	r9,r8,32
8000e622:	f8 08 09 4c 	lsl	r12,r12,r8
8000e626:	f4 09 0a 49 	lsr	r9,r10,r9
8000e62a:	f4 08 09 43 	lsl	r3,r10,r8
8000e62e:	f3 eb 10 0b 	or	r11,r9,r11
8000e632:	f8 0e 16 10 	lsr	lr,r12,0x10
8000e636:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000e63a:	f6 0e 0d 00 	divu	r0,r11,lr
8000e63e:	e6 0b 16 10 	lsr	r11,r3,0x10
8000e642:	00 99       	mov	r9,r0
8000e644:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000e648:	e0 0a 02 48 	mul	r8,r0,r10
8000e64c:	10 3b       	cp.w	r11,r8
8000e64e:	c0 a2       	brcc	8000e662 <__avr32_udiv64+0x66>
8000e650:	20 19       	sub	r9,1
8000e652:	18 0b       	add	r11,r12
8000e654:	18 3b       	cp.w	r11,r12
8000e656:	c0 63       	brcs	8000e662 <__avr32_udiv64+0x66>
8000e658:	10 3b       	cp.w	r11,r8
8000e65a:	f7 b9 03 01 	sublo	r9,1
8000e65e:	f7 dc e3 0b 	addcs	r11,r11,r12
8000e662:	f6 08 01 01 	sub	r1,r11,r8
8000e666:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000e66a:	e2 0e 0d 00 	divu	r0,r1,lr
8000e66e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000e672:	00 98       	mov	r8,r0
8000e674:	e0 0a 02 4a 	mul	r10,r0,r10
8000e678:	14 33       	cp.w	r3,r10
8000e67a:	c0 82       	brcc	8000e68a <__avr32_udiv64+0x8e>
8000e67c:	20 18       	sub	r8,1
8000e67e:	18 03       	add	r3,r12
8000e680:	18 33       	cp.w	r3,r12
8000e682:	c0 43       	brcs	8000e68a <__avr32_udiv64+0x8e>
8000e684:	14 33       	cp.w	r3,r10
8000e686:	f7 b8 03 01 	sublo	r8,1
8000e68a:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000e68e:	cd f8       	rjmp	8000e84c <__avr32_udiv64+0x250>
8000e690:	58 08       	cp.w	r8,0
8000e692:	c0 51       	brne	8000e69c <__avr32_udiv64+0xa0>
8000e694:	30 19       	mov	r9,1
8000e696:	f2 08 0d 08 	divu	r8,r9,r8
8000e69a:	10 9c       	mov	r12,r8
8000e69c:	f8 06 12 00 	clz	r6,r12
8000e6a0:	c0 41       	brne	8000e6a8 <__avr32_udiv64+0xac>
8000e6a2:	18 1b       	sub	r11,r12
8000e6a4:	30 19       	mov	r9,1
8000e6a6:	c4 08       	rjmp	8000e726 <__avr32_udiv64+0x12a>
8000e6a8:	ec 01 11 20 	rsub	r1,r6,32
8000e6ac:	f4 01 0a 49 	lsr	r9,r10,r1
8000e6b0:	f8 06 09 4c 	lsl	r12,r12,r6
8000e6b4:	f6 06 09 48 	lsl	r8,r11,r6
8000e6b8:	f6 01 0a 41 	lsr	r1,r11,r1
8000e6bc:	f3 e8 10 08 	or	r8,r9,r8
8000e6c0:	f8 03 16 10 	lsr	r3,r12,0x10
8000e6c4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000e6c8:	e2 03 0d 00 	divu	r0,r1,r3
8000e6cc:	f0 0b 16 10 	lsr	r11,r8,0x10
8000e6d0:	00 9e       	mov	lr,r0
8000e6d2:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000e6d6:	e0 05 02 49 	mul	r9,r0,r5
8000e6da:	12 3b       	cp.w	r11,r9
8000e6dc:	c0 a2       	brcc	8000e6f0 <__avr32_udiv64+0xf4>
8000e6de:	20 1e       	sub	lr,1
8000e6e0:	18 0b       	add	r11,r12
8000e6e2:	18 3b       	cp.w	r11,r12
8000e6e4:	c0 63       	brcs	8000e6f0 <__avr32_udiv64+0xf4>
8000e6e6:	12 3b       	cp.w	r11,r9
8000e6e8:	f7 be 03 01 	sublo	lr,1
8000e6ec:	f7 dc e3 0b 	addcs	r11,r11,r12
8000e6f0:	12 1b       	sub	r11,r9
8000e6f2:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000e6f6:	f6 03 0d 02 	divu	r2,r11,r3
8000e6fa:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000e6fe:	04 99       	mov	r9,r2
8000e700:	e4 05 02 4b 	mul	r11,r2,r5
8000e704:	16 38       	cp.w	r8,r11
8000e706:	c0 a2       	brcc	8000e71a <__avr32_udiv64+0x11e>
8000e708:	20 19       	sub	r9,1
8000e70a:	18 08       	add	r8,r12
8000e70c:	18 38       	cp.w	r8,r12
8000e70e:	c0 63       	brcs	8000e71a <__avr32_udiv64+0x11e>
8000e710:	16 38       	cp.w	r8,r11
8000e712:	f7 b9 03 01 	sublo	r9,1
8000e716:	f1 dc e3 08 	addcs	r8,r8,r12
8000e71a:	f4 06 09 43 	lsl	r3,r10,r6
8000e71e:	f0 0b 01 0b 	sub	r11,r8,r11
8000e722:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000e726:	f8 06 16 10 	lsr	r6,r12,0x10
8000e72a:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000e72e:	f6 06 0d 00 	divu	r0,r11,r6
8000e732:	e6 0b 16 10 	lsr	r11,r3,0x10
8000e736:	00 9a       	mov	r10,r0
8000e738:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000e73c:	e0 0e 02 48 	mul	r8,r0,lr
8000e740:	10 3b       	cp.w	r11,r8
8000e742:	c0 a2       	brcc	8000e756 <__avr32_udiv64+0x15a>
8000e744:	20 1a       	sub	r10,1
8000e746:	18 0b       	add	r11,r12
8000e748:	18 3b       	cp.w	r11,r12
8000e74a:	c0 63       	brcs	8000e756 <__avr32_udiv64+0x15a>
8000e74c:	10 3b       	cp.w	r11,r8
8000e74e:	f7 ba 03 01 	sublo	r10,1
8000e752:	f7 dc e3 0b 	addcs	r11,r11,r12
8000e756:	f6 08 01 01 	sub	r1,r11,r8
8000e75a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000e75e:	e2 06 0d 00 	divu	r0,r1,r6
8000e762:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000e766:	00 98       	mov	r8,r0
8000e768:	e0 0e 02 4b 	mul	r11,r0,lr
8000e76c:	16 33       	cp.w	r3,r11
8000e76e:	c0 82       	brcc	8000e77e <__avr32_udiv64+0x182>
8000e770:	20 18       	sub	r8,1
8000e772:	18 03       	add	r3,r12
8000e774:	18 33       	cp.w	r3,r12
8000e776:	c0 43       	brcs	8000e77e <__avr32_udiv64+0x182>
8000e778:	16 33       	cp.w	r3,r11
8000e77a:	f7 b8 03 01 	sublo	r8,1
8000e77e:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000e782:	c6 98       	rjmp	8000e854 <__avr32_udiv64+0x258>
8000e784:	16 39       	cp.w	r9,r11
8000e786:	e0 8b 00 65 	brhi	8000e850 <__avr32_udiv64+0x254>
8000e78a:	f2 09 12 00 	clz	r9,r9
8000e78e:	c0 b1       	brne	8000e7a4 <__avr32_udiv64+0x1a8>
8000e790:	10 3a       	cp.w	r10,r8
8000e792:	5f 2a       	srhs	r10
8000e794:	1c 3b       	cp.w	r11,lr
8000e796:	5f b8       	srhi	r8
8000e798:	10 4a       	or	r10,r8
8000e79a:	f2 0a 18 00 	cp.b	r10,r9
8000e79e:	c5 90       	breq	8000e850 <__avr32_udiv64+0x254>
8000e7a0:	30 18       	mov	r8,1
8000e7a2:	c5 98       	rjmp	8000e854 <__avr32_udiv64+0x258>
8000e7a4:	f0 09 09 46 	lsl	r6,r8,r9
8000e7a8:	f2 03 11 20 	rsub	r3,r9,32
8000e7ac:	fc 09 09 4e 	lsl	lr,lr,r9
8000e7b0:	f0 03 0a 48 	lsr	r8,r8,r3
8000e7b4:	f6 09 09 4c 	lsl	r12,r11,r9
8000e7b8:	f4 03 0a 42 	lsr	r2,r10,r3
8000e7bc:	ef 46 ff f4 	st.w	r7[-12],r6
8000e7c0:	f6 03 0a 43 	lsr	r3,r11,r3
8000e7c4:	18 42       	or	r2,r12
8000e7c6:	f1 ee 10 0c 	or	r12,r8,lr
8000e7ca:	f8 01 16 10 	lsr	r1,r12,0x10
8000e7ce:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000e7d2:	e6 01 0d 04 	divu	r4,r3,r1
8000e7d6:	e4 03 16 10 	lsr	r3,r2,0x10
8000e7da:	08 9e       	mov	lr,r4
8000e7dc:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000e7e0:	e8 06 02 48 	mul	r8,r4,r6
8000e7e4:	10 33       	cp.w	r3,r8
8000e7e6:	c0 a2       	brcc	8000e7fa <__avr32_udiv64+0x1fe>
8000e7e8:	20 1e       	sub	lr,1
8000e7ea:	18 03       	add	r3,r12
8000e7ec:	18 33       	cp.w	r3,r12
8000e7ee:	c0 63       	brcs	8000e7fa <__avr32_udiv64+0x1fe>
8000e7f0:	10 33       	cp.w	r3,r8
8000e7f2:	f7 be 03 01 	sublo	lr,1
8000e7f6:	e7 dc e3 03 	addcs	r3,r3,r12
8000e7fa:	10 13       	sub	r3,r8
8000e7fc:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000e800:	e6 01 0d 00 	divu	r0,r3,r1
8000e804:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000e808:	00 98       	mov	r8,r0
8000e80a:	e0 06 02 46 	mul	r6,r0,r6
8000e80e:	0c 3b       	cp.w	r11,r6
8000e810:	c0 a2       	brcc	8000e824 <__avr32_udiv64+0x228>
8000e812:	20 18       	sub	r8,1
8000e814:	18 0b       	add	r11,r12
8000e816:	18 3b       	cp.w	r11,r12
8000e818:	c0 63       	brcs	8000e824 <__avr32_udiv64+0x228>
8000e81a:	0c 3b       	cp.w	r11,r6
8000e81c:	f7 dc e3 0b 	addcs	r11,r11,r12
8000e820:	f7 b8 03 01 	sublo	r8,1
8000e824:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000e828:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000e82c:	0c 1b       	sub	r11,r6
8000e82e:	f0 04 06 42 	mulu.d	r2,r8,r4
8000e832:	06 95       	mov	r5,r3
8000e834:	16 35       	cp.w	r5,r11
8000e836:	e0 8b 00 0a 	brhi	8000e84a <__avr32_udiv64+0x24e>
8000e83a:	5f 0b       	sreq	r11
8000e83c:	f4 09 09 49 	lsl	r9,r10,r9
8000e840:	12 32       	cp.w	r2,r9
8000e842:	5f b9       	srhi	r9
8000e844:	f7 e9 00 09 	and	r9,r11,r9
8000e848:	c0 60       	breq	8000e854 <__avr32_udiv64+0x258>
8000e84a:	20 18       	sub	r8,1
8000e84c:	30 09       	mov	r9,0
8000e84e:	c0 38       	rjmp	8000e854 <__avr32_udiv64+0x258>
8000e850:	30 09       	mov	r9,0
8000e852:	12 98       	mov	r8,r9
8000e854:	10 9a       	mov	r10,r8
8000e856:	12 93       	mov	r3,r9
8000e858:	10 92       	mov	r2,r8
8000e85a:	12 9b       	mov	r11,r9
8000e85c:	2f dd       	sub	sp,-12
8000e85e:	d8 32       	popm	r0-r7,pc

8000e860 <__avr32_umod64>:
8000e860:	d4 31       	pushm	r0-r7,lr
8000e862:	1a 97       	mov	r7,sp
8000e864:	20 3d       	sub	sp,12
8000e866:	10 9c       	mov	r12,r8
8000e868:	12 95       	mov	r5,r9
8000e86a:	14 9e       	mov	lr,r10
8000e86c:	16 91       	mov	r1,r11
8000e86e:	16 96       	mov	r6,r11
8000e870:	58 09       	cp.w	r9,0
8000e872:	e0 81 00 81 	brne	8000e974 <__avr32_umod64+0x114>
8000e876:	16 38       	cp.w	r8,r11
8000e878:	e0 88 00 12 	brls	8000e89c <__avr32_umod64+0x3c>
8000e87c:	f0 08 12 00 	clz	r8,r8
8000e880:	c4 e0       	breq	8000e91c <__avr32_umod64+0xbc>
8000e882:	f6 08 09 46 	lsl	r6,r11,r8
8000e886:	f8 08 09 4c 	lsl	r12,r12,r8
8000e88a:	f0 0b 11 20 	rsub	r11,r8,32
8000e88e:	f4 08 09 4e 	lsl	lr,r10,r8
8000e892:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000e896:	f7 e6 10 06 	or	r6,r11,r6
8000e89a:	c4 18       	rjmp	8000e91c <__avr32_umod64+0xbc>
8000e89c:	58 08       	cp.w	r8,0
8000e89e:	c0 51       	brne	8000e8a8 <__avr32_umod64+0x48>
8000e8a0:	30 19       	mov	r9,1
8000e8a2:	f2 08 0d 08 	divu	r8,r9,r8
8000e8a6:	10 9c       	mov	r12,r8
8000e8a8:	f8 08 12 00 	clz	r8,r12
8000e8ac:	c0 31       	brne	8000e8b2 <__avr32_umod64+0x52>
8000e8ae:	18 16       	sub	r6,r12
8000e8b0:	c3 68       	rjmp	8000e91c <__avr32_umod64+0xbc>
8000e8b2:	f0 03 11 20 	rsub	r3,r8,32
8000e8b6:	f4 03 0a 4b 	lsr	r11,r10,r3
8000e8ba:	f8 08 09 4c 	lsl	r12,r12,r8
8000e8be:	ec 08 09 49 	lsl	r9,r6,r8
8000e8c2:	ec 03 0a 43 	lsr	r3,r6,r3
8000e8c6:	f7 e9 10 09 	or	r9,r11,r9
8000e8ca:	f8 05 16 10 	lsr	r5,r12,0x10
8000e8ce:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000e8d2:	e6 05 0d 02 	divu	r2,r3,r5
8000e8d6:	f2 0e 16 10 	lsr	lr,r9,0x10
8000e8da:	ec 02 02 4b 	mul	r11,r6,r2
8000e8de:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000e8e2:	16 3e       	cp.w	lr,r11
8000e8e4:	c0 72       	brcc	8000e8f2 <__avr32_umod64+0x92>
8000e8e6:	18 0e       	add	lr,r12
8000e8e8:	18 3e       	cp.w	lr,r12
8000e8ea:	c0 43       	brcs	8000e8f2 <__avr32_umod64+0x92>
8000e8ec:	16 3e       	cp.w	lr,r11
8000e8ee:	fd dc e3 0e 	addcs	lr,lr,r12
8000e8f2:	fc 0b 01 03 	sub	r3,lr,r11
8000e8f6:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000e8fa:	e6 05 0d 02 	divu	r2,r3,r5
8000e8fe:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000e902:	a5 36       	mul	r6,r2
8000e904:	0c 39       	cp.w	r9,r6
8000e906:	c0 72       	brcc	8000e914 <__avr32_umod64+0xb4>
8000e908:	18 09       	add	r9,r12
8000e90a:	18 39       	cp.w	r9,r12
8000e90c:	c0 43       	brcs	8000e914 <__avr32_umod64+0xb4>
8000e90e:	0c 39       	cp.w	r9,r6
8000e910:	f3 dc e3 09 	addcs	r9,r9,r12
8000e914:	f2 06 01 06 	sub	r6,r9,r6
8000e918:	f4 08 09 4e 	lsl	lr,r10,r8
8000e91c:	f8 0a 16 10 	lsr	r10,r12,0x10
8000e920:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000e924:	ec 0a 0d 02 	divu	r2,r6,r10
8000e928:	fc 09 16 10 	lsr	r9,lr,0x10
8000e92c:	ea 02 02 4b 	mul	r11,r5,r2
8000e930:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000e934:	16 39       	cp.w	r9,r11
8000e936:	c0 72       	brcc	8000e944 <__avr32_umod64+0xe4>
8000e938:	18 09       	add	r9,r12
8000e93a:	18 39       	cp.w	r9,r12
8000e93c:	c0 43       	brcs	8000e944 <__avr32_umod64+0xe4>
8000e93e:	16 39       	cp.w	r9,r11
8000e940:	f3 dc e3 09 	addcs	r9,r9,r12
8000e944:	f2 0b 01 0b 	sub	r11,r9,r11
8000e948:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000e94c:	f6 0a 0d 0a 	divu	r10,r11,r10
8000e950:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000e954:	ea 0a 02 4a 	mul	r10,r5,r10
8000e958:	14 3e       	cp.w	lr,r10
8000e95a:	c0 72       	brcc	8000e968 <__avr32_umod64+0x108>
8000e95c:	18 0e       	add	lr,r12
8000e95e:	18 3e       	cp.w	lr,r12
8000e960:	c0 43       	brcs	8000e968 <__avr32_umod64+0x108>
8000e962:	14 3e       	cp.w	lr,r10
8000e964:	fd dc e3 0e 	addcs	lr,lr,r12
8000e968:	fc 0a 01 0a 	sub	r10,lr,r10
8000e96c:	30 0b       	mov	r11,0
8000e96e:	f4 08 0a 4a 	lsr	r10,r10,r8
8000e972:	c7 b8       	rjmp	8000ea68 <__avr32_umod64+0x208>
8000e974:	16 39       	cp.w	r9,r11
8000e976:	e0 8b 00 79 	brhi	8000ea68 <__avr32_umod64+0x208>
8000e97a:	f2 09 12 00 	clz	r9,r9
8000e97e:	c1 21       	brne	8000e9a2 <__avr32_umod64+0x142>
8000e980:	10 3a       	cp.w	r10,r8
8000e982:	5f 2b       	srhs	r11
8000e984:	0a 31       	cp.w	r1,r5
8000e986:	5f ba       	srhi	r10
8000e988:	f7 ea 10 0a 	or	r10,r11,r10
8000e98c:	f2 0a 18 00 	cp.b	r10,r9
8000e990:	c0 60       	breq	8000e99c <__avr32_umod64+0x13c>
8000e992:	fc 08 01 0c 	sub	r12,lr,r8
8000e996:	e2 05 01 46 	sbc	r6,r1,r5
8000e99a:	18 9e       	mov	lr,r12
8000e99c:	0c 9b       	mov	r11,r6
8000e99e:	1c 9a       	mov	r10,lr
8000e9a0:	c6 48       	rjmp	8000ea68 <__avr32_umod64+0x208>
8000e9a2:	ea 09 09 4c 	lsl	r12,r5,r9
8000e9a6:	f2 06 11 20 	rsub	r6,r9,32
8000e9aa:	f6 09 09 4b 	lsl	r11,r11,r9
8000e9ae:	f0 09 09 42 	lsl	r2,r8,r9
8000e9b2:	ef 46 ff f4 	st.w	r7[-12],r6
8000e9b6:	f0 06 0a 48 	lsr	r8,r8,r6
8000e9ba:	18 48       	or	r8,r12
8000e9bc:	e2 06 0a 4c 	lsr	r12,r1,r6
8000e9c0:	f4 09 09 43 	lsl	r3,r10,r9
8000e9c4:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000e9c8:	f4 06 0a 4a 	lsr	r10,r10,r6
8000e9cc:	16 4a       	or	r10,r11
8000e9ce:	f0 0b 16 10 	lsr	r11,r8,0x10
8000e9d2:	f8 0b 0d 04 	divu	r4,r12,r11
8000e9d6:	f4 0c 16 10 	lsr	r12,r10,0x10
8000e9da:	08 91       	mov	r1,r4
8000e9dc:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000e9e0:	e8 0e 02 46 	mul	r6,r4,lr
8000e9e4:	0c 3c       	cp.w	r12,r6
8000e9e6:	c0 a2       	brcc	8000e9fa <__avr32_umod64+0x19a>
8000e9e8:	20 11       	sub	r1,1
8000e9ea:	10 0c       	add	r12,r8
8000e9ec:	10 3c       	cp.w	r12,r8
8000e9ee:	c0 63       	brcs	8000e9fa <__avr32_umod64+0x19a>
8000e9f0:	0c 3c       	cp.w	r12,r6
8000e9f2:	f7 b1 03 01 	sublo	r1,1
8000e9f6:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000e9fa:	0c 1c       	sub	r12,r6
8000e9fc:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000ea00:	f8 0b 0d 04 	divu	r4,r12,r11
8000ea04:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000ea08:	08 96       	mov	r6,r4
8000ea0a:	e8 0e 02 4e 	mul	lr,r4,lr
8000ea0e:	1c 3b       	cp.w	r11,lr
8000ea10:	c0 a2       	brcc	8000ea24 <__avr32_umod64+0x1c4>
8000ea12:	20 16       	sub	r6,1
8000ea14:	10 0b       	add	r11,r8
8000ea16:	10 3b       	cp.w	r11,r8
8000ea18:	c0 63       	brcs	8000ea24 <__avr32_umod64+0x1c4>
8000ea1a:	1c 3b       	cp.w	r11,lr
8000ea1c:	f7 b6 03 01 	sublo	r6,1
8000ea20:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000ea24:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000ea28:	1c 1b       	sub	r11,lr
8000ea2a:	e2 02 06 40 	mulu.d	r0,r1,r2
8000ea2e:	00 9e       	mov	lr,r0
8000ea30:	02 9c       	mov	r12,r1
8000ea32:	16 3c       	cp.w	r12,r11
8000ea34:	e0 8b 00 08 	brhi	8000ea44 <__avr32_umod64+0x1e4>
8000ea38:	5f 06       	sreq	r6
8000ea3a:	06 30       	cp.w	r0,r3
8000ea3c:	5f ba       	srhi	r10
8000ea3e:	ed ea 00 0a 	and	r10,r6,r10
8000ea42:	c0 60       	breq	8000ea4e <__avr32_umod64+0x1ee>
8000ea44:	fc 02 01 04 	sub	r4,lr,r2
8000ea48:	f8 08 01 4c 	sbc	r12,r12,r8
8000ea4c:	08 9e       	mov	lr,r4
8000ea4e:	e6 0e 01 0a 	sub	r10,r3,lr
8000ea52:	f6 0c 01 4c 	sbc	r12,r11,r12
8000ea56:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000ea5a:	f8 09 0a 4b 	lsr	r11,r12,r9
8000ea5e:	f4 09 0a 4a 	lsr	r10,r10,r9
8000ea62:	f8 01 09 4c 	lsl	r12,r12,r1
8000ea66:	18 4a       	or	r10,r12
8000ea68:	2f dd       	sub	sp,-12
8000ea6a:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

8000ec00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000ec00:	c0 08       	rjmp	8000ec00 <_evba>
	...

8000ec04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000ec04:	c0 08       	rjmp	8000ec04 <_handle_TLB_Multiple_Hit>
	...

8000ec08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000ec08:	c0 08       	rjmp	8000ec08 <_handle_Bus_Error_Data_Fetch>
	...

8000ec0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000ec0c:	c0 08       	rjmp	8000ec0c <_handle_Bus_Error_Instruction_Fetch>
	...

8000ec10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000ec10:	c0 08       	rjmp	8000ec10 <_handle_NMI>
	...

8000ec14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000ec14:	c0 08       	rjmp	8000ec14 <_handle_Instruction_Address>
	...

8000ec18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000ec18:	c0 08       	rjmp	8000ec18 <_handle_ITLB_Protection>
	...

8000ec1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000ec1c:	c0 08       	rjmp	8000ec1c <_handle_Breakpoint>
	...

8000ec20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000ec20:	c0 08       	rjmp	8000ec20 <_handle_Illegal_Opcode>
	...

8000ec24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000ec24:	c0 08       	rjmp	8000ec24 <_handle_Unimplemented_Instruction>
	...

8000ec28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000ec28:	c0 08       	rjmp	8000ec28 <_handle_Privilege_Violation>
	...

8000ec2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000ec2c:	c0 08       	rjmp	8000ec2c <_handle_Floating_Point>
	...

8000ec30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000ec30:	c0 08       	rjmp	8000ec30 <_handle_Coprocessor_Absent>
	...

8000ec34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000ec34:	c0 08       	rjmp	8000ec34 <_handle_Data_Address_Read>
	...

8000ec38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000ec38:	c0 08       	rjmp	8000ec38 <_handle_Data_Address_Write>
	...

8000ec3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000ec3c:	c0 08       	rjmp	8000ec3c <_handle_DTLB_Protection_Read>
	...

8000ec40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000ec40:	c0 08       	rjmp	8000ec40 <_handle_DTLB_Protection_Write>
	...

8000ec44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000ec44:	c0 08       	rjmp	8000ec44 <_handle_DTLB_Modified>
	...

8000ec50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000ec50:	c0 08       	rjmp	8000ec50 <_handle_ITLB_Miss>
	...

8000ec60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000ec60:	c0 08       	rjmp	8000ec60 <_handle_DTLB_Miss_Read>
	...

8000ec70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000ec70:	c0 08       	rjmp	8000ec70 <_handle_DTLB_Miss_Write>
	...

8000ed00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000ed00:	c0 08       	rjmp	8000ed00 <_handle_Supervisor_Call>
8000ed02:	d7 03       	nop

8000ed04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000ed04:	30 0c       	mov	r12,0
8000ed06:	fe b0 af 65 	rcall	80004bd0 <_get_interrupt_handler>
8000ed0a:	58 0c       	cp.w	r12,0
8000ed0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000ed10:	d6 03       	rete

8000ed12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000ed12:	30 1c       	mov	r12,1
8000ed14:	fe b0 af 5e 	rcall	80004bd0 <_get_interrupt_handler>
8000ed18:	58 0c       	cp.w	r12,0
8000ed1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000ed1e:	d6 03       	rete

8000ed20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000ed20:	30 2c       	mov	r12,2
8000ed22:	fe b0 af 57 	rcall	80004bd0 <_get_interrupt_handler>
8000ed26:	58 0c       	cp.w	r12,0
8000ed28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000ed2c:	d6 03       	rete

8000ed2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000ed2e:	30 3c       	mov	r12,3
8000ed30:	fe b0 af 50 	rcall	80004bd0 <_get_interrupt_handler>
8000ed34:	58 0c       	cp.w	r12,0
8000ed36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000ed3a:	d6 03       	rete
8000ed3c:	d7 03       	nop
8000ed3e:	d7 03       	nop
8000ed40:	d7 03       	nop
8000ed42:	d7 03       	nop
8000ed44:	d7 03       	nop
8000ed46:	d7 03       	nop
8000ed48:	d7 03       	nop
8000ed4a:	d7 03       	nop
8000ed4c:	d7 03       	nop
8000ed4e:	d7 03       	nop
8000ed50:	d7 03       	nop
8000ed52:	d7 03       	nop
8000ed54:	d7 03       	nop
8000ed56:	d7 03       	nop
8000ed58:	d7 03       	nop
8000ed5a:	d7 03       	nop
8000ed5c:	d7 03       	nop
8000ed5e:	d7 03       	nop
8000ed60:	d7 03       	nop
8000ed62:	d7 03       	nop
8000ed64:	d7 03       	nop
8000ed66:	d7 03       	nop
8000ed68:	d7 03       	nop
8000ed6a:	d7 03       	nop
8000ed6c:	d7 03       	nop
8000ed6e:	d7 03       	nop
8000ed70:	d7 03       	nop
8000ed72:	d7 03       	nop
8000ed74:	d7 03       	nop
8000ed76:	d7 03       	nop
8000ed78:	d7 03       	nop
8000ed7a:	d7 03       	nop
8000ed7c:	d7 03       	nop
8000ed7e:	d7 03       	nop
8000ed80:	d7 03       	nop
8000ed82:	d7 03       	nop
8000ed84:	d7 03       	nop
8000ed86:	d7 03       	nop
8000ed88:	d7 03       	nop
8000ed8a:	d7 03       	nop
8000ed8c:	d7 03       	nop
8000ed8e:	d7 03       	nop
8000ed90:	d7 03       	nop
8000ed92:	d7 03       	nop
8000ed94:	d7 03       	nop
8000ed96:	d7 03       	nop
8000ed98:	d7 03       	nop
8000ed9a:	d7 03       	nop
8000ed9c:	d7 03       	nop
8000ed9e:	d7 03       	nop
8000eda0:	d7 03       	nop
8000eda2:	d7 03       	nop
8000eda4:	d7 03       	nop
8000eda6:	d7 03       	nop
8000eda8:	d7 03       	nop
8000edaa:	d7 03       	nop
8000edac:	d7 03       	nop
8000edae:	d7 03       	nop
8000edb0:	d7 03       	nop
8000edb2:	d7 03       	nop
8000edb4:	d7 03       	nop
8000edb6:	d7 03       	nop
8000edb8:	d7 03       	nop
8000edba:	d7 03       	nop
8000edbc:	d7 03       	nop
8000edbe:	d7 03       	nop
8000edc0:	d7 03       	nop
8000edc2:	d7 03       	nop
8000edc4:	d7 03       	nop
8000edc6:	d7 03       	nop
8000edc8:	d7 03       	nop
8000edca:	d7 03       	nop
8000edcc:	d7 03       	nop
8000edce:	d7 03       	nop
8000edd0:	d7 03       	nop
8000edd2:	d7 03       	nop
8000edd4:	d7 03       	nop
8000edd6:	d7 03       	nop
8000edd8:	d7 03       	nop
8000edda:	d7 03       	nop
8000eddc:	d7 03       	nop
8000edde:	d7 03       	nop
8000ede0:	d7 03       	nop
8000ede2:	d7 03       	nop
8000ede4:	d7 03       	nop
8000ede6:	d7 03       	nop
8000ede8:	d7 03       	nop
8000edea:	d7 03       	nop
8000edec:	d7 03       	nop
8000edee:	d7 03       	nop
8000edf0:	d7 03       	nop
8000edf2:	d7 03       	nop
8000edf4:	d7 03       	nop
8000edf6:	d7 03       	nop
8000edf8:	d7 03       	nop
8000edfa:	d7 03       	nop
8000edfc:	d7 03       	nop
8000edfe:	d7 03       	nop
